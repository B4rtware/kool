define(['exports', 'kotlin', 'kotlinx-coroutines-core', 'kotlinx-serialization-runtime-js'], function (_, Kotlin, $module$kotlinx_coroutines_core, $module$kotlinx_serialization_runtime_js) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var mutableListOf = Kotlin.kotlin.collections.mutableListOf_i5x0yv$;
  var Unit = Kotlin.kotlin.Unit;
  var COROUTINE_SUSPENDED = Kotlin.kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED;
  var CoroutineImpl = Kotlin.kotlin.coroutines.CoroutineImpl;
  var ensureNotNull = Kotlin.ensureNotNull;
  var launch = $module$kotlinx_coroutines_core.kotlinx.coroutines.launch_s496o7$;
  var startsWith = Kotlin.kotlin.text.startsWith_7epoxm$;
  var throwCCE = Kotlin.throwCCE;
  var endsWith = Kotlin.kotlin.text.endsWith_7epoxm$;
  var CompletableDeferred = $module$kotlinx_coroutines_core.kotlinx.coroutines.CompletableDeferred_xptg6w$;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var Job = $module$kotlinx_coroutines_core.kotlinx.coroutines.Job_5dx9e$;
  var Channel = $module$kotlinx_coroutines_core.kotlinx.coroutines.channels.Channel_ww73n8$;
  var CoroutineScope = $module$kotlinx_coroutines_core.kotlinx.coroutines.CoroutineScope;
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  var LinkedHashMap_init = Kotlin.kotlin.collections.LinkedHashMap_init_q3lmfv$;
  var SelectBuilderImpl_init = $module$kotlinx_coroutines_core.kotlinx.coroutines.selects.SelectBuilderImpl;
  var Throwable = Error;
  var equals = Kotlin.equals;
  var Enum = Kotlin.kotlin.Enum;
  var throwISE = Kotlin.throwISE;
  var toChar = Kotlin.toChar;
  var toBoxedChar = Kotlin.toBoxedChar;
  var unboxChar = Kotlin.unboxChar;
  var ArrayList_init_0 = Kotlin.kotlin.collections.ArrayList_init_287e2$;
  var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
  var Math_0 = Math;
  var Array_0 = Array;
  var PropertyMetadata = Kotlin.PropertyMetadata;
  var get_indices = Kotlin.kotlin.collections.get_indices_gzk92b$;
  var reversed = Kotlin.kotlin.ranges.reversed_zf1xzc$;
  var RuntimeException_init = Kotlin.kotlin.RuntimeException_init_pdl1vj$;
  var Exception = Kotlin.kotlin.Exception;
  var first = Kotlin.kotlin.collections.first_2p1efm$;
  var last = Kotlin.kotlin.collections.last_2p1efm$;
  var numberToInt = Kotlin.numberToInt;
  var math = Kotlin.kotlin.math;
  var IllegalArgumentException_init = Kotlin.kotlin.IllegalArgumentException_init_pdl1vj$;
  var Any = Object;
  var print = Kotlin.kotlin.io.print_s8jyv4$;
  var println = Kotlin.kotlin.io.println;
  var defineInlineFunction = Kotlin.defineInlineFunction;
  var wrapFunction = Kotlin.wrapFunction;
  var get_indices_0 = Kotlin.kotlin.collections.get_indices_m7z4lg$;
  var L698769069 = Kotlin.Long.fromInt(698769069);
  var abs = Kotlin.kotlin.math.abs_za3lpa$;
  var abs_0 = Kotlin.kotlin.math.abs_s8cxhz$;
  var Long$Companion$MAX_VALUE = Kotlin.Long.MAX_VALUE;
  var kotlin_js_internal_FloatCompanionObject = Kotlin.kotlin.js.internal.FloatCompanionObject;
  var hashCode = Kotlin.hashCode;
  var round = Kotlin.kotlin.math.round_14dthe$;
  var rangeTo = Kotlin.kotlin.ranges.rangeTo_38ydlf$;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var SerialClassDescImpl = $module$kotlinx_serialization_runtime_js.kotlinx.serialization.internal.SerialClassDescImpl;
  var SerialId = $module$kotlinx_serialization_runtime_js.kotlinx.serialization.SerialId;
  var UnknownFieldException = $module$kotlinx_serialization_runtime_js.kotlinx.serialization.UnknownFieldException;
  var internal = $module$kotlinx_serialization_runtime_js.kotlinx.serialization.internal;
  var GeneratedSerializer = $module$kotlinx_serialization_runtime_js.kotlinx.serialization.internal.GeneratedSerializer;
  var MissingFieldException = $module$kotlinx_serialization_runtime_js.kotlinx.serialization.MissingFieldException;
  var ArrayListSerializer = $module$kotlinx_serialization_runtime_js.kotlinx.serialization.internal.ArrayListSerializer;
  var LinkedHashMapSerializer = $module$kotlinx_serialization_runtime_js.kotlinx.serialization.internal.LinkedHashMapSerializer;
  var NotImplementedError = Kotlin.kotlin.NotImplementedError;
  var sortWith = Kotlin.kotlin.collections.sortWith_nqfjgj$;
  var Comparator = Kotlin.kotlin.Comparator;
  var println_0 = Kotlin.kotlin.io.println_s8jyv4$;
  var L0 = Kotlin.Long.ZERO;
  var sortedWith = Kotlin.kotlin.collections.sortedWith_eknfly$;
  var kotlin_js_internal_DoubleCompanionObject = Kotlin.kotlin.js.internal.DoubleCompanionObject;
  var IntRange = Kotlin.kotlin.ranges.IntRange;
  var until = Kotlin.kotlin.ranges.until_dqglrj$;
  var LinkedHashSet_init = Kotlin.kotlin.collections.LinkedHashSet_init_287e2$;
  var coroutines = $module$kotlinx_coroutines_core.kotlinx.coroutines;
  var L50 = Kotlin.Long.fromInt(50);
  var delay = $module$kotlinx_coroutines_core.kotlinx.coroutines.delay_s8cxhz$;
  var yield_0 = $module$kotlinx_coroutines_core.kotlinx.coroutines.yield;
  var L536870911 = Kotlin.Long.fromInt(536870911);
  var Iterable = Kotlin.kotlin.collections.Iterable;
  var removeAll = Kotlin.kotlin.collections.removeAll_qafx1e$;
  var Pair = Kotlin.kotlin.Pair;
  var throwUPAE = Kotlin.throwUPAE;
  var NoSuchElementException_init = Kotlin.kotlin.NoSuchElementException_init;
  var Iterator = Kotlin.kotlin.collections.Iterator;
  var to = Kotlin.kotlin.to_ujzrz7$;
  var NoSuchElementException_init_0 = Kotlin.kotlin.NoSuchElementException;
  var emptySet = Kotlin.kotlin.collections.emptySet_287e2$;
  var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init_pdl1vj$;
  var get_lastIndex = Kotlin.kotlin.collections.get_lastIndex_55thoc$;
  var addAll = Kotlin.kotlin.collections.addAll_ipc267$;
  var listOf = Kotlin.kotlin.collections.listOf_i5x0yv$;
  var mutableSetOf = Kotlin.kotlin.collections.mutableSetOf_i5x0yv$;
  var checkIndexOverflow = Kotlin.kotlin.collections.checkIndexOverflow_za3lpa$;
  var MutableCollection = Kotlin.kotlin.collections.MutableCollection;
  var toString = Kotlin.toString;
  var addAll_0 = Kotlin.kotlin.collections.addAll_ye1y7v$;
  var setOf = Kotlin.kotlin.collections.setOf_i5x0yv$;
  var isNaN_0 = Kotlin.kotlin.isNaN_81szk$;
  var toShort = Kotlin.toShort;
  var toHashSet = Kotlin.kotlin.collections.toHashSet_us0mfu$;
  var setOf_0 = Kotlin.kotlin.collections.setOf_mh5how$;
  var indexOf = Kotlin.kotlin.text.indexOf_8eortd$;
  var substring = Kotlin.kotlin.text.substring_fc3b62$;
  var toBoolean = Kotlin.kotlin.text.toBoolean_pdl1vz$;
  var toInt = Kotlin.kotlin.text.toInt_pdl1vz$;
  var toDouble = Kotlin.kotlin.text.toDouble_pdl1vz$;
  var StringBuilder_init = Kotlin.kotlin.text.StringBuilder_init;
  var joinTo = Kotlin.kotlin.collections.joinTo_gcc71v$;
  var MutableMap = Kotlin.kotlin.collections.MutableMap;
  var lastIndexOf = Kotlin.kotlin.text.lastIndexOf_8eortd$;
  var getCallableRef = Kotlin.getCallableRef;
  var emptyList = Kotlin.kotlin.collections.emptyList_287e2$;
  var listOf_0 = Kotlin.kotlin.collections.listOf_mh5how$;
  var StringBuilder = Kotlin.kotlin.text.StringBuilder;
  var split = Kotlin.kotlin.text.split_o64adg$;
  var toMutableList = Kotlin.kotlin.collections.toMutableList_4c7yge$;
  var contains = Kotlin.kotlin.text.contains_li3zpu$;
  var trimIndent = Kotlin.kotlin.text.trimIndent_pdl1vz$;
  var toInt_0 = Kotlin.kotlin.text.toInt_6ic1pp$;
  var first_0 = Kotlin.kotlin.collections.first_us0mfu$;
  var last_0 = Kotlin.kotlin.collections.last_us0mfu$;
  var sortWith_0 = Kotlin.kotlin.collections.sortWith_iwcb0m$;
  var get_indices_1 = Kotlin.kotlin.text.get_indices_gw00vp$;
  var Map = Kotlin.kotlin.collections.Map;
  var MutableList = Kotlin.kotlin.collections.MutableList;
  var iterator = Kotlin.kotlin.text.iterator_gw00vp$;
  var MutableIterator = Kotlin.kotlin.collections.MutableIterator;
  var Collection = Kotlin.kotlin.collections.Collection;
  var ProtoBuf = $module$kotlinx_serialization_runtime_js.kotlinx.serialization.protobuf.ProtoBuf;
  var getKClass = Kotlin.getKClass;
  var getOrDefault = $module$kotlinx_serialization_runtime_js.kotlinx.serialization.context.getOrDefault_6qy6ah$;
  var EnumSerializer = $module$kotlinx_serialization_runtime_js.kotlinx.serialization.internal.EnumSerializer;
  var emptyMap = Kotlin.kotlin.collections.emptyMap_q3lmfv$;
  var removeAll_0 = Kotlin.kotlin.collections.removeAll_uhyeqt$;
  var MutableMap$MutableEntry = Kotlin.kotlin.collections.MutableMap.MutableEntry;
  var L1 = Kotlin.Long.ONE;
  var mutableMapOf = Kotlin.kotlin.collections.mutableMapOf_qfcya0$;
  AssetManager$TextureDataProxy.prototype = Object.create(TextureData.prototype);
  AssetManager$TextureDataProxy.prototype.constructor = AssetManager$TextureDataProxy;
  LocalRawAssetRef.prototype = Object.create(AssetRef.prototype);
  LocalRawAssetRef.prototype.constructor = LocalRawAssetRef;
  HttpRawAssetRef.prototype = Object.create(AssetRef.prototype);
  HttpRawAssetRef.prototype.constructor = HttpRawAssetRef;
  LocalTextureAssetRef.prototype = Object.create(AssetRef.prototype);
  LocalTextureAssetRef.prototype.constructor = LocalTextureAssetRef;
  HttpTextureAssetRef.prototype = Object.create(AssetRef.prototype);
  HttpTextureAssetRef.prototype.constructor = HttpTextureAssetRef;
  LoadedRawAsset.prototype = Object.create(LoadedAsset.prototype);
  LoadedRawAsset.prototype.constructor = LoadedRawAsset;
  LoadedTextureAsset.prototype = Object.create(LoadedAsset.prototype);
  LoadedTextureAsset.prototype.constructor = LoadedTextureAsset;
  BufferResource.prototype = Object.create(GlResource.prototype);
  BufferResource.prototype.constructor = BufferResource;
  FramebufferResource.prototype = Object.create(GlResource.prototype);
  FramebufferResource.prototype.constructor = FramebufferResource;
  FbColorTexData.prototype = Object.create(TextureData.prototype);
  FbColorTexData.prototype.constructor = FbColorTexData;
  FbDepthTexData.prototype = Object.create(TextureData.prototype);
  FbDepthTexData.prototype.constructor = FbDepthTexData;
  GlResource$Type.prototype = Object.create(Enum.prototype);
  GlResource$Type.prototype.constructor = GlResource$Type;
  ProgramResource.prototype = Object.create(GlResource.prototype);
  ProgramResource.prototype.constructor = ProgramResource;
  RenderbufferResource.prototype = Object.create(GlResource.prototype);
  RenderbufferResource.prototype.constructor = RenderbufferResource;
  ShaderResource.prototype = Object.create(GlResource.prototype);
  ShaderResource.prototype.constructor = ShaderResource;
  TextureResource.prototype = Object.create(GlResource.prototype);
  TextureResource.prototype.constructor = TextureResource;
  InputManager$BufferedPointerInput$UpdateState.prototype = Object.create(Enum.prototype);
  InputManager$BufferedPointerInput$UpdateState.prototype.constructor = InputManager$BufferedPointerInput$UpdateState;
  InputManager$BufferedPointerInput$UpdateState$STARTED.prototype = Object.create(InputManager$BufferedPointerInput$UpdateState.prototype);
  InputManager$BufferedPointerInput$UpdateState$STARTED.prototype.constructor = InputManager$BufferedPointerInput$UpdateState$STARTED;
  InputManager$BufferedPointerInput$UpdateState$ACTIVE.prototype = Object.create(InputManager$BufferedPointerInput$UpdateState.prototype);
  InputManager$BufferedPointerInput$UpdateState$ACTIVE.prototype.constructor = InputManager$BufferedPointerInput$UpdateState$ACTIVE;
  InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED.prototype = Object.create(InputManager$BufferedPointerInput$UpdateState.prototype);
  InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED.prototype.constructor = InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED;
  InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE.prototype = Object.create(InputManager$BufferedPointerInput$UpdateState.prototype);
  InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE.prototype.constructor = InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE;
  InputManager$BufferedPointerInput$UpdateState$ENDED.prototype = Object.create(InputManager$BufferedPointerInput$UpdateState.prototype);
  InputManager$BufferedPointerInput$UpdateState$ENDED.prototype.constructor = InputManager$BufferedPointerInput$UpdateState$ENDED;
  InputManager$BufferedPointerInput$UpdateState$INVALID.prototype = Object.create(InputManager$BufferedPointerInput$UpdateState.prototype);
  InputManager$BufferedPointerInput$UpdateState$INVALID.prototype.constructor = InputManager$BufferedPointerInput$UpdateState$INVALID;
  InputManager$BufferedPointerInput.prototype = Object.create(InputManager$Pointer.prototype);
  InputManager$BufferedPointerInput.prototype.constructor = InputManager$BufferedPointerInput;
  RenderPass.prototype = Object.create(Enum.prototype);
  RenderPass.prototype.constructor = RenderPass;
  KoolException.prototype = Object.create(Exception.prototype);
  KoolException.prototype.constructor = KoolException;
  BSplineVec2f.prototype = Object.create(BSpline.prototype);
  BSplineVec2f.prototype.constructor = BSplineVec2f;
  BSplineVec3f.prototype = Object.create(BSpline.prototype);
  BSplineVec3f.prototype.constructor = BSplineVec3f;
  Mat4dStack.prototype = Object.create(Mat4d.prototype);
  Mat4dStack.prototype.constructor = Mat4dStack;
  Mat4fStack.prototype = Object.create(Mat4f.prototype);
  Mat4fStack.prototype.constructor = Mat4fStack;
  CubicPointDistribution.prototype = Object.create(PointDistribution.prototype);
  CubicPointDistribution.prototype.constructor = CubicPointDistribution;
  SphericalPointDistribution.prototype = Object.create(PointDistribution.prototype);
  SphericalPointDistribution.prototype.constructor = SphericalPointDistribution;
  MutableVec2f.prototype = Object.create(Vec2f.prototype);
  MutableVec2f.prototype.constructor = MutableVec2f;
  MutableVec2d.prototype = Object.create(Vec2d.prototype);
  MutableVec2d.prototype.constructor = MutableVec2d;
  MutableVec3f.prototype = Object.create(Vec3f.prototype);
  MutableVec3f.prototype.constructor = MutableVec3f;
  MutableVec3d.prototype = Object.create(Vec3d.prototype);
  MutableVec3d.prototype.constructor = MutableVec3d;
  MutableVec4f.prototype = Object.create(Vec4f.prototype);
  MutableVec4f.prototype.constructor = MutableVec4f;
  MutableVec4d.prototype = Object.create(Vec4d.prototype);
  MutableVec4d.prototype.constructor = MutableVec4d;
  LowPassFilter.prototype = Object.create(SampleNode.prototype);
  LowPassFilter.prototype.constructor = LowPassFilter;
  HighPassFilter.prototype = Object.create(SampleNode.prototype);
  HighPassFilter.prototype.constructor = HighPassFilter;
  MoodFilter.prototype = Object.create(SampleNode.prototype);
  MoodFilter.prototype.constructor = MoodFilter;
  HiHat.prototype = Object.create(SampleNode.prototype);
  HiHat.prototype.constructor = HiHat;
  Kick.prototype = Object.create(SampleNode.prototype);
  Kick.prototype.constructor = Kick;
  Melody.prototype = Object.create(SampleNode.prototype);
  Melody.prototype.constructor = Melody;
  Oscillator.prototype = Object.create(SampleNode.prototype);
  Oscillator.prototype.constructor = Oscillator;
  Pad.prototype = Object.create(SampleNode.prototype);
  Pad.prototype.constructor = Pad;
  Shaker.prototype = Object.create(SampleNode.prototype);
  Shaker.prototype.constructor = Shaker;
  Snare.prototype = Object.create(SampleNode.prototype);
  Snare.prototype.constructor = Snare;
  NodeDp.prototype = Object.create(Node.prototype);
  NodeDp.prototype.constructor = NodeDp;
  TransformGroupDp.prototype = Object.create(NodeDp.prototype);
  TransformGroupDp.prototype.constructor = TransformGroupDp;
  Globe.prototype = Object.create(TransformGroupDp.prototype);
  Globe.prototype.constructor = Globe;
  Group.prototype = Object.create(Node.prototype);
  Group.prototype.constructor = Group;
  TransformGroup.prototype = Object.create(Group.prototype);
  TransformGroup.prototype.constructor = TransformGroup;
  SphericalInputTransform.prototype = Object.create(TransformGroup.prototype);
  SphericalInputTransform.prototype.constructor = SphericalInputTransform;
  GlobeCamHandler.prototype = Object.create(SphericalInputTransform.prototype);
  GlobeCamHandler.prototype.constructor = GlobeCamHandler;
  TileFrame.prototype = Object.create(TransformGroupDp.prototype);
  TileFrame.prototype.constructor = TileFrame;
  Mesh.prototype = Object.create(Node.prototype);
  Mesh.prototype.constructor = Mesh;
  TileMesh.prototype = Object.create(Mesh.prototype);
  TileMesh.prototype.constructor = TileMesh;
  OsmTexImageTileShaderProvider.prototype = Object.create(TexImageTileShaderProvider.prototype);
  OsmTexImageTileShaderProvider.prototype.constructor = OsmTexImageTileShaderProvider;
  HalfEdgeMesh$HalfEdgeVertex.prototype = Object.create(Vec3f.prototype);
  HalfEdgeMesh$HalfEdgeVertex.prototype.constructor = HalfEdgeMesh$HalfEdgeVertex;
  HalfEdgeMesh.prototype = Object.create(Mesh.prototype);
  HalfEdgeMesh.prototype.constructor = HalfEdgeMesh;
  CenterPointTraverser.prototype = Object.create(SpatialTreeTraverser.prototype);
  CenterPointTraverser.prototype.constructor = CenterPointTraverser;
  KNearestTraverser.prototype = Object.create(CenterPointTraverser.prototype);
  KNearestTraverser.prototype.constructor = KNearestTraverser;
  MeshCutXy$CoveringTriXyTrav.prototype = Object.create(KNearestTraverser.prototype);
  MeshCutXy$CoveringTriXyTrav.prototype.constructor = MeshCutXy$CoveringTriXyTrav;
  InRadiusTraverser.prototype = Object.create(CenterPointTraverser.prototype);
  InRadiusTraverser.prototype.constructor = InRadiusTraverser;
  MeshCutXy$ShortEdgeOnEdgeTraverser.prototype = Object.create(InRadiusTraverser.prototype);
  MeshCutXy$ShortEdgeOnEdgeTraverser.prototype.constructor = MeshCutXy$ShortEdgeOnEdgeTraverser;
  MeshCutXy$EdgeXyIntersectionTrav.prototype = Object.create(InRadiusTraverser.prototype);
  MeshCutXy$EdgeXyIntersectionTrav.prototype.constructor = MeshCutXy$EdgeXyIntersectionTrav;
  MeshSimplifier$CollapseCandidates.prototype = Object.create(TreeMap.prototype);
  MeshSimplifier$CollapseCandidates.prototype.constructor = MeshSimplifier$CollapseCandidates;
  Box$ColVecView.prototype = Object.create(MutableVec3f.prototype);
  Box$ColVecView.prototype.constructor = Box$ColVecView;
  BoxMesh.prototype = Object.create(Mesh.prototype);
  BoxMesh.prototype.constructor = BoxMesh;
  MultiBoxMesh.prototype = Object.create(Mesh.prototype);
  MultiBoxMesh.prototype.constructor = MultiBoxMesh;
  ContactConstraint.prototype = Object.create(SolverConstraint.prototype);
  ContactConstraint.prototype.constructor = ContactConstraint;
  FrictionConstraint.prototype = Object.create(SolverConstraint.prototype);
  FrictionConstraint.prototype.constructor = FrictionConstraint;
  RollingFrictionConstraint.prototype = Object.create(SolverConstraint.prototype);
  RollingFrictionConstraint.prototype.constructor = RollingFrictionConstraint;
  ShadowPreset.prototype = Object.create(Enum.prototype);
  ShadowPreset.prototype.constructor = ShadowPreset;
  ShadowPreset$SHADOW_OFF.prototype = Object.create(ShadowPreset.prototype);
  ShadowPreset$SHADOW_OFF.prototype.constructor = ShadowPreset$SHADOW_OFF;
  ShadowPreset$SHADOW_LOW.prototype = Object.create(ShadowPreset.prototype);
  ShadowPreset$SHADOW_LOW.prototype.constructor = ShadowPreset$SHADOW_LOW;
  ShadowPreset$SHADOW_MEDIUM.prototype = Object.create(ShadowPreset.prototype);
  ShadowPreset$SHADOW_MEDIUM.prototype.constructor = ShadowPreset$SHADOW_MEDIUM;
  ShadowPreset$SHADOW_HIGH.prototype = Object.create(ShadowPreset.prototype);
  ShadowPreset$SHADOW_HIGH.prototype.constructor = ShadowPreset$SHADOW_HIGH;
  ShadowPreset$SHADOW_ULTRA.prototype = Object.create(ShadowPreset.prototype);
  ShadowPreset$SHADOW_ULTRA.prototype.constructor = ShadowPreset$SHADOW_ULTRA;
  InstancedMesh.prototype = Object.create(Mesh.prototype);
  InstancedMesh.prototype.constructor = InstancedMesh;
  Armature.prototype = Object.create(InstancedMesh.prototype);
  Armature.prototype.constructor = Armature;
  RotationKey.prototype = Object.create(AnimationKey.prototype);
  RotationKey.prototype.constructor = RotationKey;
  PositionKey.prototype = Object.create(AnimationKey.prototype);
  PositionKey.prototype.constructor = PositionKey;
  ScalingKey.prototype = Object.create(AnimationKey.prototype);
  ScalingKey.prototype.constructor = ScalingKey;
  Camera.prototype = Object.create(Node.prototype);
  Camera.prototype.constructor = Camera;
  OrthographicCamera.prototype = Object.create(Camera.prototype);
  OrthographicCamera.prototype.constructor = OrthographicCamera;
  PerspectiveCamera.prototype = Object.create(Camera.prototype);
  PerspectiveCamera.prototype.constructor = PerspectiveCamera;
  DoublePrecisionRoot.prototype = Object.create(Node.prototype);
  DoublePrecisionRoot.prototype.constructor = DoublePrecisionRoot;
  NodeProxy.prototype = Object.create(NodeDp.prototype);
  NodeProxy.prototype.constructor = NodeProxy;
  InstancedLodMesh$LodInstances.prototype = Object.create(InstancedMesh$Instances.prototype);
  InstancedLodMesh$LodInstances.prototype.constructor = InstancedLodMesh$LodInstances;
  InstancedLodMesh.prototype = Object.create(Group.prototype);
  InstancedLodMesh.prototype.constructor = InstancedLodMesh;
  LodInstance.prototype = Object.create(InstancedMesh$Instance.prototype);
  LodInstance.prototype.constructor = LodInstance;
  InstancedMesh$SimpleInstances.prototype = Object.create(InstancedMesh$Instances.prototype);
  InstancedMesh$SimpleInstances.prototype.constructor = InstancedMesh$SimpleInstances;
  DirectionalLight.prototype = Object.create(Light.prototype);
  DirectionalLight.prototype.constructor = DirectionalLight;
  CullMethod.prototype = Object.create(Enum.prototype);
  CullMethod.prototype.constructor = CullMethod;
  Scene.prototype = Object.create(Group.prototype);
  Scene.prototype.constructor = Scene;
  Skybox$SkyboxCamera.prototype = Object.create(Camera.prototype);
  Skybox$SkyboxCamera.prototype.constructor = Skybox$SkyboxCamera;
  Shader.prototype = Object.create(GlObject.prototype);
  Shader.prototype.constructor = Shader;
  BasicShader.prototype = Object.create(Shader.prototype);
  BasicShader.prototype.constructor = BasicShader;
  Skybox$SkyboxShader.prototype = Object.create(BasicShader.prototype);
  Skybox$SkyboxShader.prototype.constructor = Skybox$SkyboxShader;
  Skybox.prototype = Object.create(Scene.prototype);
  Skybox.prototype.constructor = Skybox;
  SphericalInputTransform$DragMethod.prototype = Object.create(Enum.prototype);
  SphericalInputTransform$DragMethod.prototype.constructor = SphericalInputTransform$DragMethod;
  SphericalInputTransform$ZoomMethod.prototype = Object.create(Enum.prototype);
  SphericalInputTransform$ZoomMethod.prototype.constructor = SphericalInputTransform$ZoomMethod;
  CameraOrthogonalPan.prototype = Object.create(PanBase.prototype);
  CameraOrthogonalPan.prototype.constructor = CameraOrthogonalPan;
  FixedPlanePan.prototype = Object.create(PanBase.prototype);
  FixedPlanePan.prototype.constructor = FixedPlanePan;
  UiComponent.prototype = Object.create(TransformGroup.prototype);
  UiComponent.prototype.constructor = UiComponent;
  Label.prototype = Object.create(UiComponent.prototype);
  Label.prototype.constructor = Label;
  Button.prototype = Object.create(Label.prototype);
  Button.prototype.constructor = Button;
  ButtonUi.prototype = Object.create(LabelUi.prototype);
  ButtonUi.prototype.constructor = ButtonUi;
  BlurredComponentUi.prototype = Object.create(SimpleComponentUi.prototype);
  BlurredComponentUi.prototype.constructor = BlurredComponentUi;
  ToggleButtonUi.prototype = Object.create(ButtonUi.prototype);
  ToggleButtonUi.prototype.constructor = ToggleButtonUi;
  DrawerMenu$MenuButtonUi.prototype = Object.create(ToggleButtonUi.prototype);
  DrawerMenu$MenuButtonUi.prototype.constructor = DrawerMenu$MenuButtonUi;
  UiContainer.prototype = Object.create(UiComponent.prototype);
  UiContainer.prototype.constructor = UiContainer;
  DrawerMenu.prototype = Object.create(UiContainer.prototype);
  DrawerMenu.prototype.constructor = DrawerMenu;
  SizeUnit.prototype = Object.create(Enum.prototype);
  SizeUnit.prototype.constructor = SizeUnit;
  CombSizeSpec.prototype = Object.create(SizeSpec.prototype);
  CombSizeSpec.prototype.constructor = CombSizeSpec;
  Alignment.prototype = Object.create(Enum.prototype);
  Alignment.prototype.constructor = Alignment;
  ScrollHandler.prototype = Object.create(UiComponent.prototype);
  ScrollHandler.prototype.constructor = ScrollHandler;
  Slider.prototype = Object.create(UiComponent.prototype);
  Slider.prototype.constructor = Slider;
  TextField.prototype = Object.create(Label.prototype);
  TextField.prototype.constructor = TextField;
  TextFieldUi.prototype = Object.create(LabelUi.prototype);
  TextFieldUi.prototype.constructor = TextFieldUi;
  ToggleButton.prototype = Object.create(Button.prototype);
  ToggleButton.prototype.constructor = ToggleButton;
  UiRoot.prototype = Object.create(Node.prototype);
  UiRoot.prototype.constructor = UiRoot;
  ThemeBuilder.prototype = Object.create(UiTheme.prototype);
  ThemeBuilder.prototype.constructor = ThemeBuilder;
  ShaderManager.prototype = Object.create(SharedResManager.prototype);
  ShaderManager.prototype.constructor = ShaderManager;
  AttributeType.prototype = Object.create(Enum.prototype);
  AttributeType.prototype.constructor = AttributeType;
  BasicPointShader.prototype = Object.create(BasicShader.prototype);
  BasicPointShader.prototype.constructor = BasicPointShader;
  BlurShader.prototype = Object.create(BasicShader.prototype);
  BlurShader.prototype.constructor = BlurShader;
  BlurredBackgroundHelper$BlurMethod.prototype = Object.create(Enum.prototype);
  BlurredBackgroundHelper$BlurMethod.prototype.constructor = BlurredBackgroundHelper$BlurMethod;
  BlurredBackgroundHelper$BlurredBgTextureData.prototype = Object.create(TextureData.prototype);
  BlurredBackgroundHelper$BlurredBgTextureData.prototype.constructor = BlurredBackgroundHelper$BlurredBgTextureData;
  BlurredBackgroundHelper$BlurQuadShader.prototype = Object.create(Shader.prototype);
  BlurredBackgroundHelper$BlurQuadShader.prototype.constructor = BlurredBackgroundHelper$BlurQuadShader;
  NoClipping.prototype = Object.create(ClipMethod.prototype);
  NoClipping.prototype.constructor = NoClipping;
  LocalClip.prototype = Object.create(ClipMethod.prototype);
  LocalClip.prototype.constructor = LocalClip;
  LocalPlaneClip.prototype = Object.create(LocalClip.prototype);
  LocalPlaneClip.prototype.constructor = LocalPlaneClip;
  LocalSphereClip.prototype = Object.create(LocalClip.prototype);
  LocalSphereClip.prototype.constructor = LocalSphereClip;
  LightModel.prototype = Object.create(Enum.prototype);
  LightModel.prototype.constructor = LightModel;
  ColorModel.prototype = Object.create(Enum.prototype);
  ColorModel.prototype.constructor = ColorModel;
  FogModel.prototype = Object.create(Enum.prototype);
  FogModel.prototype.constructor = FogModel;
  UniformTexture2D.prototype = Object.create(Uniform.prototype);
  UniformTexture2D.prototype.constructor = UniformTexture2D;
  UniformTexture2Dv.prototype = Object.create(Uniform.prototype);
  UniformTexture2Dv.prototype.constructor = UniformTexture2Dv;
  UniformTextureCubeMap.prototype = Object.create(Uniform.prototype);
  UniformTextureCubeMap.prototype.constructor = UniformTextureCubeMap;
  Uniform1i.prototype = Object.create(Uniform.prototype);
  Uniform1i.prototype.constructor = Uniform1i;
  Uniform1iv.prototype = Object.create(Uniform.prototype);
  Uniform1iv.prototype.constructor = Uniform1iv;
  Uniform1f.prototype = Object.create(Uniform.prototype);
  Uniform1f.prototype.constructor = Uniform1f;
  Uniform1fv.prototype = Object.create(Uniform.prototype);
  Uniform1fv.prototype.constructor = Uniform1fv;
  Uniform2f.prototype = Object.create(Uniform.prototype);
  Uniform2f.prototype.constructor = Uniform2f;
  Uniform2fv.prototype = Object.create(Uniform.prototype);
  Uniform2fv.prototype.constructor = Uniform2fv;
  Uniform3f.prototype = Object.create(Uniform.prototype);
  Uniform3f.prototype.constructor = Uniform3f;
  Uniform3fv.prototype = Object.create(Uniform.prototype);
  Uniform3fv.prototype.constructor = Uniform3fv;
  Uniform4f.prototype = Object.create(Uniform.prototype);
  Uniform4f.prototype.constructor = Uniform4f;
  Uniform4fv.prototype = Object.create(Uniform.prototype);
  Uniform4fv.prototype.constructor = Uniform4fv;
  UniformMatrix4.prototype = Object.create(Uniform.prototype);
  UniformMatrix4.prototype.constructor = UniformMatrix4;
  BufferedTextureData.prototype = Object.create(TextureData.prototype);
  BufferedTextureData.prototype.constructor = BufferedTextureData;
  CubeMapTextureData.prototype = Object.create(TextureData.prototype);
  CubeMapTextureData.prototype.constructor = CubeMapTextureData;
  Texture.prototype = Object.create(GlObject.prototype);
  Texture.prototype.constructor = Texture;
  CubeMapTexture.prototype = Object.create(Texture.prototype);
  CubeMapTexture.prototype.constructor = CubeMapTexture;
  TextureManager.prototype = Object.create(SharedResManager.prototype);
  TextureManager.prototype.constructor = TextureManager;
  LinearAnimator.prototype = Object.create(Animator.prototype);
  LinearAnimator.prototype.constructor = LinearAnimator;
  CosAnimator.prototype = Object.create(Animator.prototype);
  CosAnimator.prototype.constructor = CosAnimator;
  InterpolatedFloat.prototype = Object.create(InterpolatedValue.prototype);
  InterpolatedFloat.prototype.constructor = InterpolatedFloat;
  InterpolatedColor.prototype = Object.create(InterpolatedValue.prototype);
  InterpolatedColor.prototype.constructor = InterpolatedColor;
  BillboardMesh$DrawOrder.prototype = Object.create(Enum.prototype);
  BillboardMesh$DrawOrder.prototype.constructor = BillboardMesh$DrawOrder;
  BillboardMesh.prototype = Object.create(Mesh.prototype);
  BillboardMesh.prototype.constructor = BillboardMesh;
  BillboardShader.prototype = Object.create(BasicShader.prototype);
  BillboardShader.prototype.constructor = BillboardShader;
  Vec2fView.prototype = Object.create(MutableVec2f.prototype);
  Vec2fView.prototype.constructor = Vec2fView;
  Vec3fView.prototype = Object.create(MutableVec3f.prototype);
  Vec3fView.prototype.constructor = Vec3fView;
  Vec4fView.prototype = Object.create(MutableVec4f.prototype);
  Vec4fView.prototype.constructor = Vec4fView;
  Color.prototype = Object.create(Vec4f.prototype);
  Color.prototype.constructor = Color;
  MutableColor.prototype = Object.create(Color.prototype);
  MutableColor.prototype.constructor = MutableColor;
  Position.prototype = Object.create(Enum.prototype);
  Position.prototype.constructor = Position;
  DeltaTGraph.prototype = Object.create(UiComponent.prototype);
  DeltaTGraph.prototype.constructor = DeltaTGraph;
  Font.prototype = Object.create(Texture.prototype);
  Font.prototype.constructor = Font;
  IndexedVertexList$Vertex$Vec2fView.prototype = Object.create(MutableVec2f.prototype);
  IndexedVertexList$Vertex$Vec2fView.prototype.constructor = IndexedVertexList$Vertex$Vec2fView;
  IndexedVertexList$Vertex$Vec3fView.prototype = Object.create(MutableVec3f.prototype);
  IndexedVertexList$Vertex$Vec3fView.prototype.constructor = IndexedVertexList$Vertex$Vec3fView;
  IndexedVertexList$Vertex$Vec4fView.prototype = Object.create(MutableVec4f.prototype);
  IndexedVertexList$Vertex$Vec4fView.prototype.constructor = IndexedVertexList$Vertex$Vec4fView;
  IndexedVertexList$Vertex$ColorView.prototype = Object.create(MutableColor.prototype);
  IndexedVertexList$Vertex$ColorView.prototype.constructor = IndexedVertexList$Vertex$ColorView;
  IndexedVertexList$Vertex.prototype = Object.create(MutableVec3f.prototype);
  IndexedVertexList$Vertex.prototype.constructor = IndexedVertexList$Vertex;
  KdTree$KdNode.prototype = Object.create(SpatialTree$Node.prototype);
  KdTree$KdNode.prototype.constructor = KdTree$KdNode;
  KdTree.prototype = Object.create(SpatialTree.prototype);
  KdTree.prototype.constructor = KdTree;
  LineMesh.prototype = Object.create(Mesh.prototype);
  LineMesh.prototype.constructor = LineMesh;
  Log$Level.prototype = Object.create(Enum.prototype);
  Log$Level.prototype.constructor = Log$Level;
  ObjectPool.prototype = Object.create(ObjectRecycler.prototype);
  ObjectPool.prototype.constructor = ObjectPool;
  AutoRecycler.prototype = Object.create(ObjectRecycler.prototype);
  AutoRecycler.prototype.constructor = AutoRecycler;
  OcTree$OcNode.prototype = Object.create(SpatialTree$Node.prototype);
  OcTree$OcNode.prototype.constructor = OcTree$OcNode;
  OcTree.prototype = Object.create(SpatialTree.prototype);
  OcTree.prototype.constructor = OcTree;
  ParticleSystem.prototype = Object.create(Node.prototype);
  ParticleSystem.prototype.constructor = ParticleSystem;
  PointMesh.prototype = Object.create(Mesh.prototype);
  PointMesh.prototype.constructor = PointMesh;
  PrimitiveType.prototype = Object.create(Enum.prototype);
  PrimitiveType.prototype.constructor = PrimitiveType;
  BoundingSphereInRadiusTraverser.prototype = Object.create(InRadiusTraverser.prototype);
  BoundingSphereInRadiusTraverser.prototype.constructor = BoundingSphereInRadiusTraverser;
  NearestToRayTraverser.prototype = Object.create(SpatialTreeTraverser.prototype);
  NearestToRayTraverser.prototype.constructor = NearestToRayTraverser;
  NearestEdgeToRayTraverser.prototype = Object.create(NearestToRayTraverser.prototype);
  NearestEdgeToRayTraverser.prototype.constructor = NearestEdgeToRayTraverser;
  TriangleHitTraverser.prototype = Object.create(NearestToRayTraverser.prototype);
  TriangleHitTraverser.prototype.constructor = TriangleHitTraverser;
  ImageTextureData.prototype = Object.create(TextureData.prototype);
  ImageTextureData.prototype.constructor = ImageTextureData;
  JsAssetManager.prototype = Object.create(AssetManager.prototype);
  JsAssetManager.prototype.constructor = JsAssetManager;
  JsContext.prototype = Object.create(KoolContext.prototype);
  JsContext.prototype.constructor = JsContext;
  Uint8BufferImpl.prototype = Object.create(GenericBuffer.prototype);
  Uint8BufferImpl.prototype.constructor = Uint8BufferImpl;
  Uint16BufferImpl.prototype = Object.create(GenericBuffer.prototype);
  Uint16BufferImpl.prototype.constructor = Uint16BufferImpl;
  Uint32BufferImpl.prototype = Object.create(GenericBuffer.prototype);
  Uint32BufferImpl.prototype.constructor = Uint32BufferImpl;
  Float32BufferImpl.prototype = Object.create(GenericBuffer.prototype);
  Float32BufferImpl.prototype.constructor = Float32BufferImpl;
  function select$lambda(closure$builder) {
    return function (uCont) {
      var scope = new SelectBuilderImpl_init(uCont);
      try {
        closure$builder(scope);
      }
       catch (e) {
        if (Kotlin.isType(e, Throwable)) {
          scope.handleBuilderException_tcv7n7$(e);
        }
         else
          throw e;
      }
      return scope.getResult();
    };
  }
  function AssetManager(assetsBaseDir) {
    AssetManager$Companion_getInstance();
    this.assetsBaseDir = assetsBaseDir;
    this.job = Job();
    this.awaitedAssetsChannel_nphlkp$_0 = Channel();
    this.assetRefChannel_acu3lu$_0 = Channel(2147483647);
    this.loadedAssetChannel_obd8me$_0 = Channel();
    this.loader_lxnfnl$_0 = this.loader_enrikm$_0(this.awaitedAssetsChannel_nphlkp$_0, this.assetRefChannel_acu3lu$_0, this.loadedAssetChannel_obd8me$_0);
    var list = ArrayList_init(8);
    for (var index = 0; index < 8; index++) {
      list.add_11rb$(this.loadWorker_lf86lv$_0(this.assetRefChannel_acu3lu$_0, this.loadedAssetChannel_obd8me$_0));
    }
    this.workers_dv6i5$_0 = list;
  }
  Object.defineProperty(AssetManager.prototype, 'coroutineContext', {
    get: function () {
      return this.job;
    }
  });
  AssetManager.prototype.close = function () {
    this.job.cancel();
  };
  function Coroutine$AssetManager$loader$lambda$lambda$lambda(closure$requested_0, closure$assetRefs_0, awaited_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$requested = closure$requested_0;
    this.local$closure$assetRefs = closure$assetRefs_0;
    this.local$awaited = awaited_0;
  }
  Coroutine$AssetManager$loader$lambda$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AssetManager$loader$lambda$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AssetManager$loader$lambda$lambda$lambda.prototype.constructor = Coroutine$AssetManager$loader$lambda$lambda$lambda;
  Coroutine$AssetManager$loader$lambda$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var awaiting = this.local$closure$requested.get_11rb$(this.local$awaited.ref);
            if (awaiting == null) {
              var $receiver = this.local$closure$requested;
              var key = this.local$awaited.ref;
              var value = mutableListOf([this.local$awaited]);
              $receiver.put_xwzc9p$(key, value);
              this.state_0 = 2;
              this.result_0 = this.local$closure$assetRefs.send_11rb$(this.local$awaited.ref, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            }
             else {
              return awaiting.add_11rb$(this.local$awaited);
            }

          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      }
       catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        }
         else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AssetManager$loader$lambda$lambda$lambda(closure$requested_0, closure$assetRefs_0) {
    return function (awaited_0, continuation_0, suspended) {
      var instance = new Coroutine$AssetManager$loader$lambda$lambda$lambda(closure$requested_0, closure$assetRefs_0, awaited_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AssetManager$loader$lambda$lambda$lambda_0(closure$requested_0, loaded_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$requested = closure$requested_0;
    this.local$loaded = loaded_0;
  }
  Coroutine$AssetManager$loader$lambda$lambda$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AssetManager$loader$lambda$lambda$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AssetManager$loader$lambda$lambda$lambda_0.prototype.constructor = Coroutine$AssetManager$loader$lambda$lambda$lambda_0;
  Coroutine$AssetManager$loader$lambda$lambda$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            var awaiting = ensureNotNull(this.local$closure$requested.remove_11rb$(this.local$loaded.ref));
            tmp$ = awaiting.iterator();
            while (tmp$.hasNext()) {
              var awaited = tmp$.next();
              awaited.awaiting.complete_11rb$(this.local$loaded);
            }

            return Unit;
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      }
       catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        }
         else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AssetManager$loader$lambda$lambda$lambda_0(closure$requested_0) {
    return function (loaded_0, continuation_0, suspended) {
      var instance = new Coroutine$AssetManager$loader$lambda$lambda$lambda_0(closure$requested_0, loaded_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function AssetManager$loader$lambda$lambda(closure$awaitedAssets, closure$requested, closure$assetRefs, closure$loadedAssets) {
    return function ($receiver) {
      $receiver.invoke_veq140$(closure$awaitedAssets.onReceive, AssetManager$loader$lambda$lambda$lambda(closure$requested, closure$assetRefs));
      $receiver.invoke_veq140$(closure$loadedAssets.onReceive, AssetManager$loader$lambda$lambda$lambda_0(closure$requested));
      return Unit;
    };
  }
  function Coroutine$AssetManager$loader$lambda(closure$awaitedAssets_0, closure$assetRefs_0, closure$loadedAssets_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$awaitedAssets = closure$awaitedAssets_0;
    this.local$closure$assetRefs = closure$assetRefs_0;
    this.local$closure$loadedAssets = closure$loadedAssets_0;
    this.local$requested = void 0;
  }
  Coroutine$AssetManager$loader$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AssetManager$loader$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AssetManager$loader$lambda.prototype.constructor = Coroutine$AssetManager$loader$lambda;
  Coroutine$AssetManager$loader$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$requested = LinkedHashMap_init();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = select$lambda(AssetManager$loader$lambda$lambda(this.local$closure$awaitedAssets, this.local$requested, this.local$closure$assetRefs, this.local$closure$loadedAssets))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.result_0;
            this.state_0 = 2;
            continue;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      }
       catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        }
         else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AssetManager$loader$lambda(closure$awaitedAssets_0, closure$assetRefs_0, closure$loadedAssets_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$AssetManager$loader$lambda(closure$awaitedAssets_0, closure$assetRefs_0, closure$loadedAssets_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AssetManager.prototype.loader_enrikm$_0 = function (awaitedAssets, assetRefs, loadedAssets) {
    return launch(this, void 0, void 0, AssetManager$loader$lambda(awaitedAssets, assetRefs, loadedAssets));
  };
  function Coroutine$AssetManager$loadWorker$lambda(closure$assetRefs_0, closure$loadedAssets_0, this$AssetManager_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$assetRefs = closure$assetRefs_0;
    this.local$closure$loadedAssets = closure$loadedAssets_0;
    this.local$this$AssetManager = this$AssetManager_0;
    this.local$tmp$ = void 0;
  }
  Coroutine$AssetManager$loadWorker$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AssetManager$loadWorker$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AssetManager$loadWorker$lambda.prototype.constructor = Coroutine$AssetManager$loadWorker$lambda;
  Coroutine$AssetManager$loadWorker$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.local$tmp$ = this.local$closure$assetRefs.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$tmp$.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            if (!this.result_0) {
              this.state_0 = 8;
              continue;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 5;
            this.result_0 = this.local$tmp$.next(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            var ref = this.result_0;
            this.state_0 = 6;
            this.result_0 = this.local$this$AssetManager.loadAsset_lpb790$_0(ref, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 6:
            tmp$ = this.result_0;
            this.state_0 = 7;
            this.result_0 = this.local$closure$loadedAssets.send_11rb$(tmp$, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 7:
            this.state_0 = 2;
            continue;
          case 8:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      }
       catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        }
         else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AssetManager$loadWorker$lambda(closure$assetRefs_0, closure$loadedAssets_0, this$AssetManager_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$AssetManager$loadWorker$lambda(closure$assetRefs_0, closure$loadedAssets_0, this$AssetManager_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AssetManager.prototype.loadWorker_lf86lv$_0 = function (assetRefs, loadedAssets) {
    return launch(this, void 0, void 0, AssetManager$loadWorker$lambda(assetRefs, loadedAssets, this));
  };
  function Coroutine$loadAsset_lpb790$_0($this, ref_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$ref = ref_0;
  }
  Coroutine$loadAsset_lpb790$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$loadAsset_lpb790$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$loadAsset_lpb790$_0.prototype.constructor = Coroutine$loadAsset_lpb790$_0;
  Coroutine$loadAsset_lpb790$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (Kotlin.isType(this.local$ref, LocalRawAssetRef)) {
              this.state_0 = 8;
              this.result_0 = this.$this.loadLocalRaw_hl6yzt$(this.local$ref, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            }
             else {
              if (Kotlin.isType(this.local$ref, HttpRawAssetRef)) {
                this.state_0 = 6;
                this.result_0 = this.$this.loadHttpRaw_ohmb7q$(this.local$ref, this);
                if (this.result_0 === COROUTINE_SUSPENDED)
                  return COROUTINE_SUSPENDED;
                continue;
              }
               else {
                if (Kotlin.isType(this.local$ref, LocalTextureAssetRef)) {
                  this.state_0 = 4;
                  this.result_0 = this.$this.loadLocalTexture_68kns4$(this.local$ref, this);
                  if (this.result_0 === COROUTINE_SUSPENDED)
                    return COROUTINE_SUSPENDED;
                  continue;
                }
                 else {
                  if (Kotlin.isType(this.local$ref, HttpTextureAssetRef)) {
                    this.state_0 = 2;
                    this.result_0 = this.$this.loadHttpTexture_nbaz3h$(this.local$ref, this);
                    if (this.result_0 === COROUTINE_SUSPENDED)
                      return COROUTINE_SUSPENDED;
                    continue;
                  }
                   else {
                    this.local$tmp$ = Kotlin.noWhenBranchMatched();
                    this.state_0 = 3;
                    continue;
                  }
                }
              }
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = this.result_0;
            this.state_0 = 3;
            continue;
          case 3:
            this.state_0 = 5;
            continue;
          case 4:
            this.local$tmp$ = this.result_0;
            this.state_0 = 5;
            continue;
          case 5:
            this.state_0 = 7;
            continue;
          case 6:
            this.local$tmp$ = this.result_0;
            this.state_0 = 7;
            continue;
          case 7:
            this.state_0 = 9;
            continue;
          case 8:
            this.local$tmp$ = this.result_0;
            this.state_0 = 9;
            continue;
          case 9:
            return this.local$tmp$;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      }
       catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        }
         else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AssetManager.prototype.loadAsset_lpb790$_0 = function (ref_0, continuation_0, suspended) {
    var instance = new Coroutine$loadAsset_lpb790$_0(this, ref_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  AssetManager.prototype.isHttpAsset_61zpoe$ = function (assetPath) {
    return startsWith(assetPath, 'http://', true) || startsWith(assetPath, 'https://', true);
  };
  function Coroutine$AssetManager$loadAsset$lambda(closure$assetPath_0, this$AssetManager_0, closure$onLoad_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$assetPath = closure$assetPath_0;
    this.local$this$AssetManager = this$AssetManager_0;
    this.local$closure$onLoad = closure$onLoad_0;
    this.local$awaitedAsset = void 0;
  }
  Coroutine$AssetManager$loadAsset$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AssetManager$loadAsset$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AssetManager$loadAsset$lambda.prototype.constructor = Coroutine$AssetManager$loadAsset$lambda;
  Coroutine$AssetManager$loadAsset$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0;
            if (this.local$this$AssetManager.isHttpAsset_61zpoe$(this.local$closure$assetPath)) {
              tmp$ = new HttpRawAssetRef(this.local$closure$assetPath);
            }
             else {
              tmp$ = new LocalRawAssetRef(this.local$this$AssetManager.assetsBaseDir + '/' + this.local$closure$assetPath);
            }

            var ref = tmp$;
            this.local$awaitedAsset = new AssetManager$AwaitedAsset(this.local$this$AssetManager, ref);
            this.state_0 = 2;
            this.result_0 = this.local$this$AssetManager.awaitedAssetsChannel_nphlkp$_0.send_11rb$(this.local$awaitedAsset, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$awaitedAsset.awaiting.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            var loaded = Kotlin.isType(tmp$_0 = this.result_0, LoadedRawAsset) ? tmp$_0 : throwCCE();
            return this.local$closure$onLoad(loaded.data);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      }
       catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        }
         else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AssetManager$loadAsset$lambda(closure$assetPath_0, this$AssetManager_0, closure$onLoad_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$AssetManager$loadAsset$lambda(closure$assetPath_0, this$AssetManager_0, closure$onLoad_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AssetManager.prototype.loadAsset_us385g$ = function (assetPath, onLoad) {
    launch(this, void 0, void 0, AssetManager$loadAsset$lambda(assetPath, this, onLoad));
  };
  function AssetManager$loadModel$lambda(closure$modelPath, this$AssetManager, closure$onLoad) {
    return function (loadedData) {
      var tmp$;
      if (loadedData == null) {
        var $receiver = this$AssetManager;
        var $this = package$util.Log;
        var level = Log$Level.ERROR;
        var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
        if (level.level >= $this.level.level) {
          $this.printer(level, tag, 'Failed loading model ' + closure$modelPath);
        }
        tmp$ = null;
      }
       else {
        var data = endsWith(closure$modelPath, '.kmfz', true) ? this$AssetManager.inflate_fqrh44$(loadedData) : loadedData;
        tmp$ = ModelData$Companion_getInstance().load_fqrh44$(data);
      }
      var model = tmp$;
      closure$onLoad(model);
      return Unit;
    };
  }
  AssetManager.prototype.loadModel_v5uqdg$ = function (modelPath, onLoad) {
    this.loadAsset_us385g$(modelPath, AssetManager$loadModel$lambda(modelPath, this, onLoad));
  };
  function Coroutine$AssetManager$loadTextureAsset$lambda(closure$assetPath_0, this$AssetManager_0, closure$proxy_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$assetPath = closure$assetPath_0;
    this.local$this$AssetManager = this$AssetManager_0;
    this.local$closure$proxy = closure$proxy_0;
    this.local$awaitedAsset = void 0;
  }
  Coroutine$AssetManager$loadTextureAsset$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AssetManager$loadTextureAsset$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AssetManager$loadTextureAsset$lambda.prototype.constructor = Coroutine$AssetManager$loadTextureAsset$lambda;
  Coroutine$AssetManager$loadTextureAsset$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0;
            if (this.local$this$AssetManager.isHttpAsset_61zpoe$(this.local$closure$assetPath)) {
              tmp$ = new HttpTextureAssetRef(this.local$closure$assetPath);
            }
             else {
              tmp$ = new LocalTextureAssetRef(this.local$this$AssetManager.assetsBaseDir + '/' + this.local$closure$assetPath);
            }

            var ref = tmp$;
            this.local$awaitedAsset = new AssetManager$AwaitedAsset(this.local$this$AssetManager, ref);
            this.state_0 = 2;
            this.result_0 = this.local$this$AssetManager.awaitedAssetsChannel_nphlkp$_0.send_11rb$(this.local$awaitedAsset, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$awaitedAsset.awaiting.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            var loaded = Kotlin.isType(tmp$_0 = this.result_0, LoadedTextureAsset) ? tmp$_0 : throwCCE();
            return this.local$closure$proxy.proxyData = loaded.data, Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      }
       catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        }
         else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AssetManager$loadTextureAsset$lambda(closure$assetPath_0, this$AssetManager_0, closure$proxy_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$AssetManager$loadTextureAsset$lambda(closure$assetPath_0, this$AssetManager_0, closure$proxy_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AssetManager.prototype.loadTextureAsset_61zpoe$ = function (assetPath) {
    var proxy = new AssetManager$TextureDataProxy();
    launch(this, void 0, void 0, AssetManager$loadTextureAsset$lambda(assetPath, this, proxy));
    return proxy;
  };
  function AssetManager$AwaitedAsset($outer, ref, awaiting) {
    this.$outer = $outer;
    if (awaiting === void 0)
      awaiting = CompletableDeferred(this.$outer.job);
    this.ref = ref;
    this.awaiting = awaiting;
  }
  AssetManager$AwaitedAsset.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AwaitedAsset',
    interfaces: []
  };
  function AssetManager$TextureDataProxy() {
    TextureData.call(this);
    this.proxyData = null;
  }
  Object.defineProperty(AssetManager$TextureDataProxy.prototype, 'isAvailable', {
    get: function () {
      var tmp$, tmp$_0;
      return (tmp$_0 = (tmp$ = this.proxyData) != null ? tmp$.isAvailable : null) != null ? tmp$_0 : false;
    }
  });
  Object.defineProperty(AssetManager$TextureDataProxy.prototype, 'width', {
    get: function () {
      var tmp$, tmp$_0;
      return (tmp$_0 = (tmp$ = this.proxyData) != null ? tmp$.width : null) != null ? tmp$_0 : 0;
    },
    set: function (f) {
    }
  });
  Object.defineProperty(AssetManager$TextureDataProxy.prototype, 'height', {
    get: function () {
      var tmp$, tmp$_0;
      return (tmp$_0 = (tmp$ = this.proxyData) != null ? tmp$.height : null) != null ? tmp$_0 : 0;
    },
    set: function (f) {
    }
  });
  AssetManager$TextureDataProxy.prototype.onLoad_2jsdat$ = function (texture, target, ctx) {
    ensureNotNull(this.proxyData).onLoad_2jsdat$(texture, target, ctx);
  };
  AssetManager$TextureDataProxy.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextureDataProxy',
    interfaces: [TextureData]
  };
  function AssetManager$Companion() {
    AssetManager$Companion_instance = this;
    this.NUM_LOAD_WORKERS = 8;
  }
  AssetManager$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AssetManager$Companion_instance = null;
  function AssetManager$Companion_getInstance() {
    if (AssetManager$Companion_instance === null) {
      new AssetManager$Companion();
    }
    return AssetManager$Companion_instance;
  }
  AssetManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AssetManager',
    interfaces: [CoroutineScope]
  };
  function AssetRef() {
  }
  AssetRef.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AssetRef',
    interfaces: []
  };
  function LocalRawAssetRef(url) {
    AssetRef.call(this);
    this.url = url;
  }
  LocalRawAssetRef.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LocalRawAssetRef',
    interfaces: [AssetRef]
  };
  LocalRawAssetRef.prototype.component1 = function () {
    return this.url;
  };
  LocalRawAssetRef.prototype.copy_61zpoe$ = function (url) {
    return new LocalRawAssetRef(url === void 0 ? this.url : url);
  };
  LocalRawAssetRef.prototype.toString = function () {
    return 'LocalRawAssetRef(url=' + Kotlin.toString(this.url) + ')';
  };
  LocalRawAssetRef.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.url) | 0;
    return result;
  };
  LocalRawAssetRef.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.url, other.url))));
  };
  function HttpRawAssetRef(url) {
    AssetRef.call(this);
    this.url = url;
  }
  HttpRawAssetRef.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HttpRawAssetRef',
    interfaces: [AssetRef]
  };
  HttpRawAssetRef.prototype.component1 = function () {
    return this.url;
  };
  HttpRawAssetRef.prototype.copy_61zpoe$ = function (url) {
    return new HttpRawAssetRef(url === void 0 ? this.url : url);
  };
  HttpRawAssetRef.prototype.toString = function () {
    return 'HttpRawAssetRef(url=' + Kotlin.toString(this.url) + ')';
  };
  HttpRawAssetRef.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.url) | 0;
    return result;
  };
  HttpRawAssetRef.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.url, other.url))));
  };
  function LocalTextureAssetRef(url) {
    AssetRef.call(this);
    this.url = url;
  }
  LocalTextureAssetRef.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LocalTextureAssetRef',
    interfaces: [AssetRef]
  };
  LocalTextureAssetRef.prototype.component1 = function () {
    return this.url;
  };
  LocalTextureAssetRef.prototype.copy_61zpoe$ = function (url) {
    return new LocalTextureAssetRef(url === void 0 ? this.url : url);
  };
  LocalTextureAssetRef.prototype.toString = function () {
    return 'LocalTextureAssetRef(url=' + Kotlin.toString(this.url) + ')';
  };
  LocalTextureAssetRef.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.url) | 0;
    return result;
  };
  LocalTextureAssetRef.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.url, other.url))));
  };
  function HttpTextureAssetRef(url) {
    AssetRef.call(this);
    this.url = url;
  }
  HttpTextureAssetRef.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HttpTextureAssetRef',
    interfaces: [AssetRef]
  };
  HttpTextureAssetRef.prototype.component1 = function () {
    return this.url;
  };
  HttpTextureAssetRef.prototype.copy_61zpoe$ = function (url) {
    return new HttpTextureAssetRef(url === void 0 ? this.url : url);
  };
  HttpTextureAssetRef.prototype.toString = function () {
    return 'HttpTextureAssetRef(url=' + Kotlin.toString(this.url) + ')';
  };
  HttpTextureAssetRef.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.url) | 0;
    return result;
  };
  HttpTextureAssetRef.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.url, other.url))));
  };
  function LoadedAsset(ref, successfull) {
    this.ref = ref;
    this.successfull = successfull;
  }
  LoadedAsset.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LoadedAsset',
    interfaces: []
  };
  function LoadedRawAsset(ref, data) {
    LoadedAsset.call(this, ref, data != null);
    this.data = data;
  }
  LoadedRawAsset.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LoadedRawAsset',
    interfaces: [LoadedAsset]
  };
  function LoadedTextureAsset(ref, data) {
    LoadedAsset.call(this, ref, data != null);
    this.data = data;
  }
  LoadedTextureAsset.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LoadedTextureAsset',
    interfaces: [LoadedAsset]
  };
  function assetTexture(assetPath, delayLoading) {
    if (delayLoading === void 0)
      delayLoading = true;
    return assetTexture_0(defaultPropsRepeated(assetPath), delayLoading);
  }
  function assetTexture$lambda(closure$delayLoading, closure$props) {
    return function ($receiver, ctx) {
      $receiver.delayLoading = closure$delayLoading;
      return ctx.assetMgr.loadTextureAsset_61zpoe$(closure$props.id);
    };
  }
  function assetTexture_0(props, delayLoading) {
    if (delayLoading === void 0)
      delayLoading = true;
    return new Texture(props, assetTexture$lambda(delayLoading, props));
  }
  function assetTextureCubeMap$lambda(closure$delayLoading, closure$frontPath, closure$backPath, closure$leftPath, closure$rightPath, closure$upPath, closure$downPath) {
    return function ($receiver, ctx) {
      $receiver.delayLoading = closure$delayLoading;
      var ft = ctx.assetMgr.loadTextureAsset_61zpoe$(closure$frontPath);
      var bk = ctx.assetMgr.loadTextureAsset_61zpoe$(closure$backPath);
      var lt = ctx.assetMgr.loadTextureAsset_61zpoe$(closure$leftPath);
      var rt = ctx.assetMgr.loadTextureAsset_61zpoe$(closure$rightPath);
      var up = ctx.assetMgr.loadTextureAsset_61zpoe$(closure$upPath);
      var dn = ctx.assetMgr.loadTextureAsset_61zpoe$(closure$downPath);
      return new CubeMapTextureData(ft, bk, lt, rt, up, dn);
    };
  }
  function assetTextureCubeMap(frontPath, backPath, leftPath, rightPath, upPath, downPath, delayLoading) {
    if (delayLoading === void 0)
      delayLoading = true;
    var id = frontPath + '-' + backPath + '-' + leftPath + '-' + rightPath + '-' + upPath + '-' + downPath;
    var props = new TextureProps(id, 9729, 9729, 33071, 33071, 0, 34067);
    return new CubeMapTexture(props, assetTextureCubeMap$lambda(delayLoading, frontPath, backPath, leftPath, rightPath, upPath, downPath));
  }
  var GL_ACTIVE_TEXTURE;
  var GL_DEPTH_BUFFER_BIT;
  var GL_STENCIL_BUFFER_BIT;
  var GL_COLOR_BUFFER_BIT;
  var GL_FALSE;
  var GL_TRUE;
  var GL_POINTS;
  var GL_LINES;
  var GL_LINE_LOOP;
  var GL_LINE_STRIP;
  var GL_TRIANGLES;
  var GL_TRIANGLE_STRIP;
  var GL_TRIANGLE_FAN;
  var GL_ZERO;
  var GL_ONE;
  var GL_SRC_COLOR;
  var GL_ONE_MINUS_SRC_COLOR;
  var GL_SRC_ALPHA;
  var GL_ONE_MINUS_SRC_ALPHA;
  var GL_DST_ALPHA;
  var GL_ONE_MINUS_DST_ALPHA;
  var GL_DST_COLOR;
  var GL_ONE_MINUS_DST_COLOR;
  var GL_SRC_ALPHA_SATURATE;
  var GL_FUNC_ADD;
  var GL_BLEND_EQUATION;
  var GL_BLEND_EQUATION_RGB;
  var GL_BLEND_EQUATION_ALPHA;
  var GL_FUNC_SUBTRACT;
  var GL_FUNC_REVERSE_SUBTRACT;
  var GL_BLEND_DST_RGB;
  var GL_BLEND_SRC_RGB;
  var GL_BLEND_DST_ALPHA;
  var GL_BLEND_SRC_ALPHA;
  var GL_CONSTANT_COLOR;
  var GL_ONE_MINUS_CONSTANT_COLOR;
  var GL_CONSTANT_ALPHA;
  var GL_ONE_MINUS_CONSTANT_ALPHA;
  var GL_BLEND_COLOR;
  var GL_ARRAY_BUFFER;
  var GL_ELEMENT_ARRAY_BUFFER;
  var GL_ARRAY_BUFFER_BINDING;
  var GL_ELEMENT_ARRAY_BUFFER_BINDING;
  var GL_STREAM_DRAW;
  var GL_STATIC_DRAW;
  var GL_DYNAMIC_DRAW;
  var GL_BUFFER_SIZE;
  var GL_BUFFER_USAGE;
  var GL_CURRENT_VERTEX_ATTRIB;
  var GL_FRONT;
  var GL_BACK;
  var GL_FRONT_AND_BACK;
  var GL_TEXTURE_2D;
  var GL_CULL_FACE;
  var GL_BLEND;
  var GL_DITHER;
  var GL_STENCIL_TEST;
  var GL_DEPTH_TEST;
  var GL_SCISSOR_TEST;
  var GL_POLYGON_OFFSET_FILL;
  var GL_SAMPLE_ALPHA_TO_COVERAGE;
  var GL_SAMPLE_COVERAGE;
  var GL_NO_ERROR;
  var GL_INVALID_ENUM;
  var GL_INVALID_VALUE;
  var GL_INVALID_OPERATION;
  var GL_OUT_OF_MEMORY;
  var GL_CW;
  var GL_CCW;
  var GL_LINE_WIDTH;
  var GL_ALIASED_POINT_SIZE_RANGE;
  var GL_ALIASED_LINE_WIDTH_RANGE;
  var GL_CULL_FACE_MODE;
  var GL_FRONT_FACE;
  var GL_DEPTH_RANGE;
  var GL_DEPTH_WRITEMASK;
  var GL_DEPTH_CLEAR_VALUE;
  var GL_DEPTH_FUNC;
  var GL_STENCIL_CLEAR_VALUE;
  var GL_STENCIL_FUNC;
  var GL_STENCIL_FAIL;
  var GL_STENCIL_PASS_DEPTH_FAIL;
  var GL_STENCIL_PASS_DEPTH_PASS;
  var GL_STENCIL_REF;
  var GL_STENCIL_VALUE_MASK;
  var GL_STENCIL_WRITEMASK;
  var GL_STENCIL_BACK_FUNC;
  var GL_STENCIL_BACK_FAIL;
  var GL_STENCIL_BACK_PASS_DEPTH_FAIL;
  var GL_STENCIL_BACK_PASS_DEPTH_PASS;
  var GL_STENCIL_BACK_REF;
  var GL_STENCIL_BACK_VALUE_MASK;
  var GL_STENCIL_BACK_WRITEMASK;
  var GL_VIEWPORT;
  var GL_SCISSOR_BOX;
  var GL_COLOR_CLEAR_VALUE;
  var GL_COLOR_WRITEMASK;
  var GL_UNPACK_ALIGNMENT;
  var GL_PACK_ALIGNMENT;
  var GL_MAX_TEXTURE_SIZE;
  var GL_MAX_VIEWPORT_DIMS;
  var GL_SUBPIXEL_BITS;
  var GL_RED_BITS;
  var GL_GREEN_BITS;
  var GL_BLUE_BITS;
  var GL_ALPHA_BITS;
  var GL_DEPTH_BITS;
  var GL_STENCIL_BITS;
  var GL_POLYGON_OFFSET_UNITS;
  var GL_POLYGON_OFFSET_FACTOR;
  var GL_TEXTURE_BINDING_2D;
  var GL_SAMPLE_BUFFERS;
  var GL_SAMPLES;
  var GL_SAMPLE_COVERAGE_VALUE;
  var GL_SAMPLE_COVERAGE_INVERT;
  var GL_NUM_COMPRESSED_TEXTURE_FORMATS;
  var GL_COMPRESSED_TEXTURE_FORMATS;
  var GL_DONT_CARE;
  var GL_FASTEST;
  var GL_NICEST;
  var GL_GENERATE_MIPMAP_HINT;
  var GL_BYTE;
  var GL_UNSIGNED_BYTE;
  var GL_SHORT;
  var GL_UNSIGNED_SHORT;
  var GL_INT;
  var GL_UNSIGNED_INT;
  var GL_FLOAT;
  var GL_FIXED;
  var GL_DEPTH_COMPONENT;
  var GL_DEPTH_COMPONENT24;
  var GL_DEPTH_COMPONENT32F;
  var GL_ALPHA;
  var GL_RGB;
  var GL_RGBA;
  var GL_LUMINANCE;
  var GL_LUMINANCE_ALPHA;
  var GL_UNSIGNED_SHORT_4_4_4_4;
  var GL_UNSIGNED_SHORT_5_5_5_1;
  var GL_UNSIGNED_SHORT_5_6_5;
  var GL_FRAGMENT_SHADER;
  var GL_VERTEX_SHADER;
  var GL_GEOMETRY_SHADER;
  var GL_MAX_VERTEX_ATTRIBS;
  var GL_MAX_VERTEX_UNIFORM_VECTORS;
  var GL_MAX_VARYING_VECTORS;
  var GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS;
  var GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS;
  var GL_MAX_TEXTURE_IMAGE_UNITS;
  var GL_MAX_FRAGMENT_UNIFORM_VECTORS;
  var GL_SHADER_TYPE;
  var GL_DELETE_STATUS;
  var GL_LINK_STATUS;
  var GL_VALIDATE_STATUS;
  var GL_ATTACHED_SHADERS;
  var GL_ACTIVE_UNIFORMS;
  var GL_ACTIVE_UNIFORM_MAX_LENGTH;
  var GL_ACTIVE_ATTRIBUTES;
  var GL_ACTIVE_ATTRIBUTE_MAX_LENGTH;
  var GL_SHADING_LANGUAGE_VERSION;
  var GL_CURRENT_PROGRAM;
  var GL_NEVER;
  var GL_LESS;
  var GL_EQUAL;
  var GL_LEQUAL;
  var GL_GREATER;
  var GL_NOTEQUAL;
  var GL_GEQUAL;
  var GL_ALWAYS;
  var GL_KEEP;
  var GL_REPLACE;
  var GL_INCR;
  var GL_DECR;
  var GL_INVERT;
  var GL_INCR_WRAP;
  var GL_DECR_WRAP;
  var GL_VENDOR;
  var GL_RENDERER;
  var GL_VERSION;
  var GL_EXTENSIONS;
  var GL_NEAREST;
  var GL_LINEAR;
  var GL_NEAREST_MIPMAP_NEAREST;
  var GL_LINEAR_MIPMAP_NEAREST;
  var GL_NEAREST_MIPMAP_LINEAR;
  var GL_LINEAR_MIPMAP_LINEAR;
  var GL_TEXTURE_MAG_FILTER;
  var GL_TEXTURE_MIN_FILTER;
  var GL_TEXTURE_WRAP_S;
  var GL_TEXTURE_WRAP_T;
  var GL_TEXTURE_WRAP_R;
  var GL_TEXTURE;
  var GL_TEXTURE_CUBE_MAP;
  var GL_TEXTURE_BINDING_CUBE_MAP;
  var GL_TEXTURE_CUBE_MAP_POSITIVE_X;
  var GL_TEXTURE_CUBE_MAP_NEGATIVE_X;
  var GL_TEXTURE_CUBE_MAP_POSITIVE_Y;
  var GL_TEXTURE_CUBE_MAP_NEGATIVE_Y;
  var GL_TEXTURE_CUBE_MAP_POSITIVE_Z;
  var GL_TEXTURE_CUBE_MAP_NEGATIVE_Z;
  var GL_MAX_CUBE_MAP_TEXTURE_SIZE;
  var GL_TEXTURE0;
  var GL_TEXTURE1;
  var GL_TEXTURE2;
  var GL_TEXTURE3;
  var GL_TEXTURE4;
  var GL_TEXTURE5;
  var GL_TEXTURE6;
  var GL_TEXTURE7;
  var GL_TEXTURE8;
  var GL_TEXTURE9;
  var GL_TEXTURE10;
  var GL_TEXTURE11;
  var GL_TEXTURE12;
  var GL_TEXTURE13;
  var GL_TEXTURE14;
  var GL_TEXTURE15;
  var GL_TEXTURE16;
  var GL_TEXTURE17;
  var GL_TEXTURE18;
  var GL_TEXTURE19;
  var GL_TEXTURE20;
  var GL_TEXTURE21;
  var GL_TEXTURE22;
  var GL_TEXTURE23;
  var GL_TEXTURE24;
  var GL_TEXTURE25;
  var GL_TEXTURE26;
  var GL_TEXTURE27;
  var GL_TEXTURE28;
  var GL_TEXTURE29;
  var GL_TEXTURE30;
  var GL_TEXTURE31;
  var GL_REPEAT;
  var GL_CLAMP_TO_EDGE;
  var GL_MIRRORED_REPEAT;
  var GL_FLOAT_VEC2;
  var GL_FLOAT_VEC3;
  var GL_FLOAT_VEC4;
  var GL_INT_VEC2;
  var GL_INT_VEC3;
  var GL_INT_VEC4;
  var GL_BOOL;
  var GL_BOOL_VEC2;
  var GL_BOOL_VEC3;
  var GL_BOOL_VEC4;
  var GL_FLOAT_MAT2;
  var GL_FLOAT_MAT3;
  var GL_FLOAT_MAT4;
  var GL_SAMPLER_2D;
  var GL_SAMPLER_CUBE;
  var GL_VERTEX_ATTRIB_ARRAY_ENABLED;
  var GL_VERTEX_ATTRIB_ARRAY_SIZE;
  var GL_VERTEX_ATTRIB_ARRAY_STRIDE;
  var GL_VERTEX_ATTRIB_ARRAY_TYPE;
  var GL_VERTEX_ATTRIB_ARRAY_NORMALIZED;
  var GL_VERTEX_ATTRIB_ARRAY_POINTER;
  var GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
  var GL_IMPLEMENTATION_COLOR_READ_TYPE;
  var GL_IMPLEMENTATION_COLOR_READ_FORMAT;
  var GL_COMPILE_STATUS;
  var GL_INFO_LOG_LENGTH;
  var GL_SHADER_SOURCE_LENGTH;
  var GL_SHADER_COMPILER;
  var GL_SHADER_BINARY_FORMATS;
  var GL_NUM_SHADER_BINARY_FORMATS;
  var GL_LOW_FLOAT;
  var GL_MEDIUM_FLOAT;
  var GL_HIGH_FLOAT;
  var GL_LOW_INT;
  var GL_MEDIUM_INT;
  var GL_HIGH_INT;
  var GL_FRAMEBUFFER;
  var GL_RENDERBUFFER;
  var GL_RGBA4;
  var GL_RGB5_A1;
  var GL_RGB565;
  var GL_DEPTH_COMPONENT16;
  var GL_STENCIL_INDEX8;
  var GL_RENDERBUFFER_WIDTH;
  var GL_RENDERBUFFER_HEIGHT;
  var GL_RENDERBUFFER_INTERNAL_FORMAT;
  var GL_RENDERBUFFER_RED_SIZE;
  var GL_RENDERBUFFER_GREEN_SIZE;
  var GL_RENDERBUFFER_BLUE_SIZE;
  var GL_RENDERBUFFER_ALPHA_SIZE;
  var GL_RENDERBUFFER_DEPTH_SIZE;
  var GL_RENDERBUFFER_STENCIL_SIZE;
  var GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
  var GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
  var GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
  var GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
  var GL_COLOR_ATTACHMENT0;
  var GL_DEPTH_ATTACHMENT;
  var GL_STENCIL_ATTACHMENT;
  var GL_NONE;
  var GL_FRAMEBUFFER_COMPLETE;
  var GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
  var GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
  var GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
  var GL_FRAMEBUFFER_UNSUPPORTED;
  var GL_FRAMEBUFFER_BINDING;
  var GL_RENDERBUFFER_BINDING;
  var GL_MAX_RENDERBUFFER_SIZE;
  var GL_INVALID_FRAMEBUFFER_OPERATION;
  function BufferResource(glRef, target, ctx) {
    BufferResource$Companion_getInstance();
    GlResource.call(this, glRef, GlResource$Type$BUFFER_getInstance(), ctx);
    this.target = target;
    this.targetKeyAsObject_0 = this.target;
  }
  function BufferResource$Companion() {
    BufferResource$Companion_instance = this;
  }
  BufferResource$Companion.prototype.create_2shagh$ = function (target, ctx) {
    return new BufferResource(glCreateBuffer(), target, ctx);
  };
  BufferResource$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var BufferResource$Companion_instance = null;
  function BufferResource$Companion_getInstance() {
    if (BufferResource$Companion_instance === null) {
      new BufferResource$Companion();
    }
    return BufferResource$Companion_instance;
  }
  BufferResource.prototype.delete_aemszp$ = function (ctx) {
    glDeleteBuffer(this);
    GlResource.prototype.delete_aemszp$.call(this, ctx);
  };
  BufferResource.prototype.bind_aemszp$ = function (ctx) {
    if (!equals(ctx.boundBuffers_8be2vx$.get_11rb$(ensureNotNull(this.targetKeyAsObject_0)), this)) {
      glBindBuffer(this.target, this);
      var $receiver = ctx.boundBuffers_8be2vx$;
      var key = this.targetKeyAsObject_0;
      $receiver.put_xwzc9p$(key, this);
    }
  };
  BufferResource.prototype.setData_wcsk4b$ = function (data, usage, ctx) {
    var limit = data.limit;
    var pos = data.position;
    data.flip();
    this.bind_aemszp$(ctx);
    glBufferData_2(this.target, data, usage);
    ctx.memoryMgr.memoryAllocated_927jj9$(this, pos * 4 | 0);
    data.limit = limit;
    data.position = pos;
  };
  BufferResource.prototype.setData_t9c4ce$ = function (data, usage, ctx) {
    var limit = data.limit;
    var pos = data.position;
    data.flip();
    this.bind_aemszp$(ctx);
    glBufferData(this.target, data, usage);
    ctx.memoryMgr.memoryAllocated_927jj9$(this, pos);
    data.limit = limit;
    data.position = pos;
  };
  BufferResource.prototype.setData_34zp6t$ = function (data, usage, ctx) {
    var limit = data.limit;
    var pos = data.position;
    data.flip();
    this.bind_aemszp$(ctx);
    glBufferData_0(this.target, data, usage);
    ctx.memoryMgr.memoryAllocated_927jj9$(this, pos * 2 | 0);
    data.limit = limit;
    data.position = pos;
  };
  BufferResource.prototype.setData_5h48zj$ = function (data, usage, ctx) {
    var limit = data.limit;
    var pos = data.position;
    data.flip();
    this.bind_aemszp$(ctx);
    glBufferData_1(this.target, data, usage);
    ctx.memoryMgr.memoryAllocated_927jj9$(this, pos * 4 | 0);
    data.limit = limit;
    data.position = pos;
  };
  BufferResource.prototype.unbind_aemszp$ = function (ctx) {
    glBindBuffer(this.target, null);
    var $receiver = ctx.boundBuffers_8be2vx$;
    var key = this.target;
    $receiver.put_xwzc9p$(key, null);
  };
  BufferResource.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BufferResource',
    interfaces: [GlResource]
  };
  function Framebuffer(width, height, texTargetColor, texTargetDepth) {
    if (texTargetColor === void 0)
      texTargetColor = 3553;
    if (texTargetDepth === void 0)
      texTargetDepth = 3553;
    this.width = width;
    this.height = height;
    this.texTargetColor = texTargetColor;
    this.texTargetDepth = texTargetDepth;
    this.fbId_0 = UniqueId_getInstance().nextId();
    this.fbResource_iqa21b$_0 = null;
    this.colorAttachment = null;
    this.depthAttachment = null;
    this.viewport = new KoolContext$Viewport(0, 0, this.width, this.height);
  }
  Object.defineProperty(Framebuffer.prototype, 'fbResource', {
    get: function () {
      return this.fbResource_iqa21b$_0;
    },
    set: function (fbResource) {
      this.fbResource_iqa21b$_0 = fbResource;
    }
  });
  Framebuffer.prototype.withColor = function () {
    if (this.colorAttachment == null) {
      this.colorAttachment = FbColorTexData$Companion_getInstance().colorTex_ld7r1l$(this.width, this.height, this.fbId_0);
    }
    return this;
  };
  Framebuffer.prototype.withDepth = function () {
    if (this.depthAttachment == null) {
      this.depthAttachment = FbDepthTexData$Companion_getInstance().depthTex_ld7r1l$(this.width, this.height, this.fbId_0);
    }
    return this;
  };
  Framebuffer.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$, tmp$_0, tmp$_1;
    (tmp$ = this.fbResource) != null ? (tmp$.delete_aemszp$(ctx), Unit) : null;
    (tmp$_0 = this.colorAttachment) != null ? (tmp$_0.dispose_aemszp$(ctx), Unit) : null;
    (tmp$_1 = this.depthAttachment) != null ? (tmp$_1.dispose_aemszp$(ctx), Unit) : null;
    this.fbResource = null;
    this.colorAttachment = null;
    this.depthAttachment = null;
  };
  Framebuffer.prototype.bind_aemszp$ = function (ctx) {
    var tmp$;
    var tmp$_0;
    if ((tmp$ = this.fbResource) != null)
      tmp$_0 = tmp$;
    else {
      var $receiver = FramebufferResource$Companion_getInstance().create_ys1ghx$(this.width, this.height, this.texTargetColor, this.texTargetDepth, ctx);
      this.fbResource = $receiver;
      $receiver.colorAttachment = this.colorAttachment;
      $receiver.depthAttachment = this.depthAttachment;
      tmp$_0 = $receiver;
    }
    var fb = tmp$_0;
    fb.bind_n4xpoe$(this.viewport, ctx);
  };
  Framebuffer.prototype.unbind_aemszp$ = function (ctx) {
    var tmp$;
    (tmp$ = this.fbResource) != null ? (tmp$.unbind_aemszp$(ctx), Unit) : null;
  };
  Framebuffer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Framebuffer',
    interfaces: [Disposable]
  };
  function FramebufferResource(glRef, width, height, texTargetColor, texTargetDepth, ctx) {
    FramebufferResource$Companion_getInstance();
    GlResource.call(this, glRef, GlResource$Type$FRAMEBUFFER_getInstance(), ctx);
    this.width = width;
    this.height = height;
    this.texTargetColor = texTargetColor;
    this.texTargetDepth = texTargetDepth;
    this.fbId_0 = UniqueId_getInstance().nextId();
    this.colorAttachment = null;
    this.depthAttachment = null;
    this.isFbComplete_0 = false;
  }
  function FramebufferResource$Companion() {
    FramebufferResource$Companion_instance = this;
  }
  FramebufferResource$Companion.prototype.create_ys1ghx$ = function (width, height, texTargetColor, texTargetDepth, ctx) {
    return new FramebufferResource(glCreateFramebuffer(), width, height, texTargetColor, texTargetDepth, ctx);
  };
  FramebufferResource$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var FramebufferResource$Companion_instance = null;
  function FramebufferResource$Companion_getInstance() {
    if (FramebufferResource$Companion_instance === null) {
      new FramebufferResource$Companion();
    }
    return FramebufferResource$Companion_instance;
  }
  FramebufferResource.prototype.delete_aemszp$ = function (ctx) {
    glDeleteFramebuffer(this);
    GlResource.prototype.delete_aemszp$.call(this, ctx);
  };
  FramebufferResource.prototype.bind_n4xpoe$ = function (viewport, ctx) {
    glBindFramebuffer(36160, this);
    if (!this.isFbComplete_0) {
      this.isFbComplete_0 = true;
      var color = this.colorAttachment;
      if (color != null) {
        ctx.textureMgr.bindTexture_xyx3x4$(color, ctx);
        glFramebufferTexture2D(36160, 36064, this.texTargetColor, ensureNotNull(color.res), 0);
      }
       else {
        glDrawBuffer(0);
        glReadBuffer(0);
      }
      var depth = this.depthAttachment;
      if (depth != null) {
        ctx.textureMgr.bindTexture_xyx3x4$(depth, ctx);
        glFramebufferTexture2D(36160, 36096, this.texTargetDepth, ensureNotNull(depth.res), 0);
      }
      var fbStatus = {v: glCheckFramebufferStatus(36160)};
      if (fbStatus.v !== 36053) {
        if (this.colorAttachment == null && this.depthAttachment != null) {
          this.colorAttachment = FbColorTexData$Companion_getInstance().colorTex_ld7r1l$(this.width, this.height, this.fbId_0);
          ctx.textureMgr.bindTexture_xyx3x4$(ensureNotNull(this.colorAttachment), ctx);
          glFramebufferTexture2D(36160, 36064, 3553, ensureNotNull(ensureNotNull(this.colorAttachment).res), 0);
          glDrawBuffer(1028);
          glReadBuffer(1028);
          fbStatus.v = glCheckFramebufferStatus(36160);
          var $this = package$util.Log;
          var level = Log$Level.WARN;
          var tag = Kotlin.getKClassFromExpression(this).simpleName;
          if (level.level >= $this.level.level) {
            $this.printer(level, tag, 'Depth-framebuffer is incomplete without an color attachment, adding one (makes shadow rendering slow)');
          }
        }
        if (fbStatus.v !== 36053) {
          var $this_0 = package$util.Log;
          var level_0 = Log$Level.ERROR;
          var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
          if (level_0.level >= $this_0.level.level) {
            $this_0.printer(level_0, tag_0, 'Framebuffer is incomplete, status: ' + fbStatus.v + ', has-color: ' + (this.colorAttachment != null) + ', has-depth: ' + (this.depthAttachment != null));
          }
        }
      }
    }
    ctx.pushAttributes();
    ctx.viewport = viewport;
    ctx.applyAttributes();
  };
  FramebufferResource.prototype.unbind_aemszp$ = function (ctx) {
    glBindFramebuffer(36160, null);
    ctx.popAttributes();
  };
  FramebufferResource.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FramebufferResource',
    interfaces: [GlResource]
  };
  function FbColorTexData(width, height) {
    FbColorTexData$Companion_getInstance();
    TextureData.call(this);
    this.width = width;
    this.height = height;
  }
  Object.defineProperty(FbColorTexData.prototype, 'isAvailable', {
    get: function () {
      return true;
    }
  });
  FbColorTexData.prototype.onLoad_2jsdat$ = function (texture, target, ctx) {
    glTexImage2D(target, 0, 6408, this.width, this.height, 0, 6408, 5121, null);
  };
  function FbColorTexData$Companion() {
    FbColorTexData$Companion_instance = this;
  }
  function FbColorTexData$Companion$colorTex$lambda(closure$sizeX, closure$sizeY) {
    return function ($receiver, it) {
      return new FbColorTexData(closure$sizeX, closure$sizeY);
    };
  }
  FbColorTexData$Companion.prototype.colorTex_ld7r1l$ = function (sizeX, sizeY, fbId) {
    var colorProps = new TextureProps('framebuffer-' + fbId.toString() + '-color', 9729, 9729, 33071, 33071, 0);
    return new Texture(colorProps, FbColorTexData$Companion$colorTex$lambda(sizeX, sizeY));
  };
  FbColorTexData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var FbColorTexData$Companion_instance = null;
  function FbColorTexData$Companion_getInstance() {
    if (FbColorTexData$Companion_instance === null) {
      new FbColorTexData$Companion();
    }
    return FbColorTexData$Companion_instance;
  }
  FbColorTexData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FbColorTexData',
    interfaces: [TextureData]
  };
  function FbDepthTexData(width, height) {
    FbDepthTexData$Companion_getInstance();
    TextureData.call(this);
    this.width = width;
    this.height = height;
  }
  Object.defineProperty(FbDepthTexData.prototype, 'isAvailable', {
    get: function () {
      return true;
    }
  });
  FbDepthTexData.prototype.onLoad_2jsdat$ = function (texture, target, ctx) {
    glTexParameteri(target, 10241, ctx.glCapabilities.depthFilterMethod);
    glTexParameteri(target, 10240, ctx.glCapabilities.depthFilterMethod);
    glTexImage2D(target, 0, ctx.glCapabilities.depthComponentIntFormat, this.width, this.height, 0, 6402, 5125, null);
  };
  function FbDepthTexData$Companion() {
    FbDepthTexData$Companion_instance = this;
  }
  function FbDepthTexData$Companion$depthTex$lambda(closure$sizeX, closure$sizeY) {
    return function ($receiver, it) {
      return new FbDepthTexData(closure$sizeX, closure$sizeY);
    };
  }
  FbDepthTexData$Companion.prototype.depthTex_ld7r1l$ = function (sizeX, sizeY, fbId) {
    var depthProps = new TextureProps('framebuffer-' + fbId.toString() + '-depth', 9728, 9728, 33071, 33071, 0);
    return new Texture(depthProps, FbDepthTexData$Companion$depthTex$lambda(sizeX, sizeY));
  };
  FbDepthTexData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var FbDepthTexData$Companion_instance = null;
  function FbDepthTexData$Companion_getInstance() {
    if (FbDepthTexData$Companion_instance === null) {
      new FbDepthTexData$Companion();
    }
    return FbDepthTexData$Companion_instance;
  }
  FbDepthTexData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FbDepthTexData',
    interfaces: [TextureData]
  };
  function GlObject() {
    this.res_1nanwc$_0 = null;
  }
  Object.defineProperty(GlObject.prototype, 'res', {
    get: function () {
      return this.res_1nanwc$_0;
    },
    set: function (res) {
      this.res_1nanwc$_0 = res;
    }
  });
  Object.defineProperty(GlObject.prototype, 'isValid', {
    get: function () {
      var tmp$;
      return ((tmp$ = this.res) != null ? tmp$.isValid : null) === true;
    }
  });
  GlObject.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$;
    (tmp$ = this.res) != null ? (tmp$.delete_aemszp$(ctx), Unit) : null;
    this.res = null;
  };
  GlObject.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GlObject',
    interfaces: [Disposable]
  };
  function GlResource(glRef, type, ctx) {
    this.type = type;
    this.glRef_p5t3zt$_0 = glRef;
    ctx.memoryMgr.memoryAllocated_927jj9$(this, 0);
  }
  function GlResource$Type(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function GlResource$Type_initFields() {
    GlResource$Type_initFields = function () {
    };
    GlResource$Type$BUFFER_instance = new GlResource$Type('BUFFER', 0);
    GlResource$Type$FRAMEBUFFER_instance = new GlResource$Type('FRAMEBUFFER', 1);
    GlResource$Type$PROGRAM_instance = new GlResource$Type('PROGRAM', 2);
    GlResource$Type$RENDERBUFFER_instance = new GlResource$Type('RENDERBUFFER', 3);
    GlResource$Type$SHADER_instance = new GlResource$Type('SHADER', 4);
    GlResource$Type$TEXTURE_instance = new GlResource$Type('TEXTURE', 5);
  }
  var GlResource$Type$BUFFER_instance;
  function GlResource$Type$BUFFER_getInstance() {
    GlResource$Type_initFields();
    return GlResource$Type$BUFFER_instance;
  }
  var GlResource$Type$FRAMEBUFFER_instance;
  function GlResource$Type$FRAMEBUFFER_getInstance() {
    GlResource$Type_initFields();
    return GlResource$Type$FRAMEBUFFER_instance;
  }
  var GlResource$Type$PROGRAM_instance;
  function GlResource$Type$PROGRAM_getInstance() {
    GlResource$Type_initFields();
    return GlResource$Type$PROGRAM_instance;
  }
  var GlResource$Type$RENDERBUFFER_instance;
  function GlResource$Type$RENDERBUFFER_getInstance() {
    GlResource$Type_initFields();
    return GlResource$Type$RENDERBUFFER_instance;
  }
  var GlResource$Type$SHADER_instance;
  function GlResource$Type$SHADER_getInstance() {
    GlResource$Type_initFields();
    return GlResource$Type$SHADER_instance;
  }
  var GlResource$Type$TEXTURE_instance;
  function GlResource$Type$TEXTURE_getInstance() {
    GlResource$Type_initFields();
    return GlResource$Type$TEXTURE_instance;
  }
  GlResource$Type.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Type',
    interfaces: [Enum]
  };
  function GlResource$Type$values() {
    return [GlResource$Type$BUFFER_getInstance(), GlResource$Type$FRAMEBUFFER_getInstance(), GlResource$Type$PROGRAM_getInstance(), GlResource$Type$RENDERBUFFER_getInstance(), GlResource$Type$SHADER_getInstance(), GlResource$Type$TEXTURE_getInstance()];
  }
  GlResource$Type.values = GlResource$Type$values;
  function GlResource$Type$valueOf(name) {
    switch (name) {
      case 'BUFFER':
        return GlResource$Type$BUFFER_getInstance();
      case 'FRAMEBUFFER':
        return GlResource$Type$FRAMEBUFFER_getInstance();
      case 'PROGRAM':
        return GlResource$Type$PROGRAM_getInstance();
      case 'RENDERBUFFER':
        return GlResource$Type$RENDERBUFFER_getInstance();
      case 'SHADER':
        return GlResource$Type$SHADER_getInstance();
      case 'TEXTURE':
        return GlResource$Type$TEXTURE_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.gl.GlResource.Type.' + name);
    }
  }
  GlResource$Type.valueOf_61zpoe$ = GlResource$Type$valueOf;
  Object.defineProperty(GlResource.prototype, 'glRef', {
    get: function () {
      return this.glRef_p5t3zt$_0;
    },
    set: function (glRef) {
      this.glRef_p5t3zt$_0 = glRef;
    }
  });
  Object.defineProperty(GlResource.prototype, 'isValid', {
    get: function () {
      return this.glRef != null;
    }
  });
  GlResource.prototype.delete_aemszp$ = function (ctx) {
    ctx.memoryMgr.deleted_esgzal$(this);
    this.glRef = null;
  };
  GlResource.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GlResource',
    interfaces: []
  };
  function ProgramResource(glRef, ctx) {
    ProgramResource$Companion_getInstance();
    GlResource.call(this, glRef, GlResource$Type$PROGRAM_getInstance(), ctx);
    ctx.memoryMgr.memoryAllocated_927jj9$(this, 1);
  }
  function ProgramResource$Companion() {
    ProgramResource$Companion_instance = this;
  }
  ProgramResource$Companion.prototype.create_aemszp$ = function (ctx) {
    return new ProgramResource(glCreateProgram(), ctx);
  };
  ProgramResource$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ProgramResource$Companion_instance = null;
  function ProgramResource$Companion_getInstance() {
    if (ProgramResource$Companion_instance === null) {
      new ProgramResource$Companion();
    }
    return ProgramResource$Companion_instance;
  }
  ProgramResource.prototype.delete_aemszp$ = function (ctx) {
    ctx.checkIsGlThread();
    glDeleteProgram(this);
    GlResource.prototype.delete_aemszp$.call(this, ctx);
  };
  ProgramResource.prototype.attachShader_55k08u$ = function (shader, ctx) {
    ctx.checkIsGlThread();
    glAttachShader(this, shader);
  };
  ProgramResource.prototype.link_aemszp$ = function (ctx) {
    ctx.checkIsGlThread();
    glLinkProgram(this);
    return glGetProgrami(this, 35714) === 1;
  };
  ProgramResource.prototype.getInfoLog_aemszp$ = function (ctx) {
    ctx.checkIsGlThread();
    return glGetProgramInfoLog(this);
  };
  ProgramResource.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ProgramResource',
    interfaces: [GlResource]
  };
  function RenderbufferResource(glRef, ctx) {
    RenderbufferResource$Companion_getInstance();
    GlResource.call(this, glRef, GlResource$Type$RENDERBUFFER_getInstance(), ctx);
  }
  function RenderbufferResource$Companion() {
    RenderbufferResource$Companion_instance = this;
  }
  RenderbufferResource$Companion.prototype.create_aemszp$ = function (ctx) {
    return new RenderbufferResource(glCreateRenderbuffer(), ctx);
  };
  RenderbufferResource$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var RenderbufferResource$Companion_instance = null;
  function RenderbufferResource$Companion_getInstance() {
    if (RenderbufferResource$Companion_instance === null) {
      new RenderbufferResource$Companion();
    }
    return RenderbufferResource$Companion_instance;
  }
  RenderbufferResource.prototype.delete_aemszp$ = function (ctx) {
    glDeleteRenderbuffer(this);
    GlResource.prototype.delete_aemszp$.call(this, ctx);
  };
  RenderbufferResource.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RenderbufferResource',
    interfaces: [GlResource]
  };
  function ShaderResource(glRef, ctx) {
    ShaderResource$Companion_getInstance();
    GlResource.call(this, glRef, GlResource$Type$SHADER_getInstance(), ctx);
    ctx.memoryMgr.memoryAllocated_927jj9$(this, 1);
  }
  function ShaderResource$Companion() {
    ShaderResource$Companion_instance = this;
  }
  ShaderResource$Companion.prototype.createFragmentShader_aemszp$ = function (ctx) {
    return new ShaderResource(glCreateShader(35632), ctx);
  };
  ShaderResource$Companion.prototype.createGeometryShader_aemszp$ = function (ctx) {
    if (!ctx.glCapabilities.geometryShader) {
      throw KoolException_init('Geometry shaders are not supported on this implementation');
    }
    return new ShaderResource(glCreateShader(36313), ctx);
  };
  ShaderResource$Companion.prototype.createVertexShader_aemszp$ = function (ctx) {
    return new ShaderResource(glCreateShader(35633), ctx);
  };
  ShaderResource$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ShaderResource$Companion_instance = null;
  function ShaderResource$Companion_getInstance() {
    if (ShaderResource$Companion_instance === null) {
      new ShaderResource$Companion();
    }
    return ShaderResource$Companion_instance;
  }
  ShaderResource.prototype.delete_aemszp$ = function (ctx) {
    ctx.checkIsGlThread();
    glDeleteShader(this);
    GlResource.prototype.delete_aemszp$.call(this, ctx);
  };
  ShaderResource.prototype.shaderSource_vvp3il$ = function (source, ctx) {
    ctx.checkIsGlThread();
    glShaderSource(this, source);
  };
  ShaderResource.prototype.compile_aemszp$ = function (ctx) {
    ctx.checkIsGlThread();
    glCompileShader(this);
    return glGetShaderi(this, 35713) === 1;
  };
  ShaderResource.prototype.getInfoLog_aemszp$ = function (ctx) {
    ctx.checkIsGlThread();
    return glGetShaderInfoLog(this);
  };
  ShaderResource.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShaderResource',
    interfaces: [GlResource]
  };
  function TextureResource(glRef, props, ctx) {
    TextureResource$Companion_getInstance();
    GlResource.call(this, glRef, GlResource$Type$TEXTURE_getInstance(), ctx);
    this.props = props;
    this.isLoaded = false;
    this.texUnit_xdyr2s$_0 = -1;
  }
  Object.defineProperty(TextureResource.prototype, 'target', {
    get: function () {
      return this.props.target;
    }
  });
  Object.defineProperty(TextureResource.prototype, 'texUnit', {
    get: function () {
      return this.texUnit_xdyr2s$_0;
    },
    set: function (texUnit) {
      this.texUnit_xdyr2s$_0 = texUnit;
    }
  });
  TextureResource.prototype.delete_aemszp$ = function (ctx) {
    glDeleteTexture(this);
    GlResource.prototype.delete_aemszp$.call(this, ctx);
  };
  function TextureResource$Companion() {
    TextureResource$Companion_instance = this;
  }
  TextureResource$Companion.prototype.create_8057hp$ = function (props, ctx) {
    return new TextureResource(glCreateTexture(), props, ctx);
  };
  TextureResource$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TextureResource$Companion_instance = null;
  function TextureResource$Companion_getInstance() {
    if (TextureResource$Companion_instance === null) {
      new TextureResource$Companion();
    }
    return TextureResource$Companion_instance;
  }
  TextureResource.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextureResource',
    interfaces: [GlResource]
  };
  function GlCapabilities(uint32Indices, shaderIntAttribs, maxTexUnits, premultipliedAlphaTextures, depthTextures, depthComponentIntFormat, depthFilterMethod, anisotropicTexFilterInfo, geometryShader, glslDialect, glVersion) {
    GlCapabilities$Companion_getInstance();
    this.uint32Indices = uint32Indices;
    this.shaderIntAttribs = shaderIntAttribs;
    this.maxTexUnits = maxTexUnits;
    this.premultipliedAlphaTextures = premultipliedAlphaTextures;
    this.depthTextures = depthTextures;
    this.depthComponentIntFormat = depthComponentIntFormat;
    this.depthFilterMethod = depthFilterMethod;
    this.anisotropicTexFilterInfo = anisotropicTexFilterInfo;
    this.geometryShader = geometryShader;
    this.glslDialect = glslDialect;
    this.glVersion = glVersion;
  }
  function GlCapabilities$Companion() {
    GlCapabilities$Companion_instance = this;
    this.UNKNOWN_CAPABILITIES = new GlCapabilities(false, false, 16, false, false, 0, 0, AnisotropicTexFilterInfo$Companion_getInstance().NOT_SUPPORTED, false, GlslDialect$Companion_getInstance().GLSL_DIALECT_100, new GlVersion('Unknown', 0, 0));
  }
  GlCapabilities$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var GlCapabilities$Companion_instance = null;
  function GlCapabilities$Companion_getInstance() {
    if (GlCapabilities$Companion_instance === null) {
      new GlCapabilities$Companion();
    }
    return GlCapabilities$Companion_instance;
  }
  GlCapabilities.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GlCapabilities',
    interfaces: []
  };
  GlCapabilities.prototype.component1 = function () {
    return this.uint32Indices;
  };
  GlCapabilities.prototype.component2 = function () {
    return this.shaderIntAttribs;
  };
  GlCapabilities.prototype.component3 = function () {
    return this.maxTexUnits;
  };
  GlCapabilities.prototype.component4 = function () {
    return this.premultipliedAlphaTextures;
  };
  GlCapabilities.prototype.component5 = function () {
    return this.depthTextures;
  };
  GlCapabilities.prototype.component6 = function () {
    return this.depthComponentIntFormat;
  };
  GlCapabilities.prototype.component7 = function () {
    return this.depthFilterMethod;
  };
  GlCapabilities.prototype.component8 = function () {
    return this.anisotropicTexFilterInfo;
  };
  GlCapabilities.prototype.component9 = function () {
    return this.geometryShader;
  };
  GlCapabilities.prototype.component10 = function () {
    return this.glslDialect;
  };
  GlCapabilities.prototype.component11 = function () {
    return this.glVersion;
  };
  GlCapabilities.prototype.copy_fvvqhj$ = function (uint32Indices, shaderIntAttribs, maxTexUnits, premultipliedAlphaTextures, depthTextures, depthComponentIntFormat, depthFilterMethod, anisotropicTexFilterInfo, geometryShader, glslDialect, glVersion) {
    return new GlCapabilities(uint32Indices === void 0 ? this.uint32Indices : uint32Indices, shaderIntAttribs === void 0 ? this.shaderIntAttribs : shaderIntAttribs, maxTexUnits === void 0 ? this.maxTexUnits : maxTexUnits, premultipliedAlphaTextures === void 0 ? this.premultipliedAlphaTextures : premultipliedAlphaTextures, depthTextures === void 0 ? this.depthTextures : depthTextures, depthComponentIntFormat === void 0 ? this.depthComponentIntFormat : depthComponentIntFormat, depthFilterMethod === void 0 ? this.depthFilterMethod : depthFilterMethod, anisotropicTexFilterInfo === void 0 ? this.anisotropicTexFilterInfo : anisotropicTexFilterInfo, geometryShader === void 0 ? this.geometryShader : geometryShader, glslDialect === void 0 ? this.glslDialect : glslDialect, glVersion === void 0 ? this.glVersion : glVersion);
  };
  GlCapabilities.prototype.toString = function () {
    return 'GlCapabilities(uint32Indices=' + Kotlin.toString(this.uint32Indices) + (', shaderIntAttribs=' + Kotlin.toString(this.shaderIntAttribs)) + (', maxTexUnits=' + Kotlin.toString(this.maxTexUnits)) + (', premultipliedAlphaTextures=' + Kotlin.toString(this.premultipliedAlphaTextures)) + (', depthTextures=' + Kotlin.toString(this.depthTextures)) + (', depthComponentIntFormat=' + Kotlin.toString(this.depthComponentIntFormat)) + (', depthFilterMethod=' + Kotlin.toString(this.depthFilterMethod)) + (', anisotropicTexFilterInfo=' + Kotlin.toString(this.anisotropicTexFilterInfo)) + (', geometryShader=' + Kotlin.toString(this.geometryShader)) + (', glslDialect=' + Kotlin.toString(this.glslDialect)) + (', glVersion=' + Kotlin.toString(this.glVersion)) + ')';
  };
  GlCapabilities.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.uint32Indices) | 0;
    result = result * 31 + Kotlin.hashCode(this.shaderIntAttribs) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxTexUnits) | 0;
    result = result * 31 + Kotlin.hashCode(this.premultipliedAlphaTextures) | 0;
    result = result * 31 + Kotlin.hashCode(this.depthTextures) | 0;
    result = result * 31 + Kotlin.hashCode(this.depthComponentIntFormat) | 0;
    result = result * 31 + Kotlin.hashCode(this.depthFilterMethod) | 0;
    result = result * 31 + Kotlin.hashCode(this.anisotropicTexFilterInfo) | 0;
    result = result * 31 + Kotlin.hashCode(this.geometryShader) | 0;
    result = result * 31 + Kotlin.hashCode(this.glslDialect) | 0;
    result = result * 31 + Kotlin.hashCode(this.glVersion) | 0;
    return result;
  };
  GlCapabilities.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.uint32Indices, other.uint32Indices) && Kotlin.equals(this.shaderIntAttribs, other.shaderIntAttribs) && Kotlin.equals(this.maxTexUnits, other.maxTexUnits) && Kotlin.equals(this.premultipliedAlphaTextures, other.premultipliedAlphaTextures) && Kotlin.equals(this.depthTextures, other.depthTextures) && Kotlin.equals(this.depthComponentIntFormat, other.depthComponentIntFormat) && Kotlin.equals(this.depthFilterMethod, other.depthFilterMethod) && Kotlin.equals(this.anisotropicTexFilterInfo, other.anisotropicTexFilterInfo) && Kotlin.equals(this.geometryShader, other.geometryShader) && Kotlin.equals(this.glslDialect, other.glslDialect) && Kotlin.equals(this.glVersion, other.glVersion)))));
  };
  function GlVersion(glDialect, versionMajor, versionMinor) {
    this.glDialect = glDialect;
    this.versionMajor = versionMajor;
    this.versionMinor = versionMinor;
  }
  GlVersion.prototype.toString = function () {
    return this.glDialect + ' ' + this.versionMajor + '.' + this.versionMinor;
  };
  GlVersion.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GlVersion',
    interfaces: []
  };
  GlVersion.prototype.component1 = function () {
    return this.glDialect;
  };
  GlVersion.prototype.component2 = function () {
    return this.versionMajor;
  };
  GlVersion.prototype.component3 = function () {
    return this.versionMinor;
  };
  GlVersion.prototype.copy_3m52m6$ = function (glDialect, versionMajor, versionMinor) {
    return new GlVersion(glDialect === void 0 ? this.glDialect : glDialect, versionMajor === void 0 ? this.versionMajor : versionMajor, versionMinor === void 0 ? this.versionMinor : versionMinor);
  };
  GlVersion.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.glDialect) | 0;
    result = result * 31 + Kotlin.hashCode(this.versionMajor) | 0;
    result = result * 31 + Kotlin.hashCode(this.versionMinor) | 0;
    return result;
  };
  GlVersion.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.glDialect, other.glDialect) && Kotlin.equals(this.versionMajor, other.versionMajor) && Kotlin.equals(this.versionMinor, other.versionMinor)))));
  };
  function AnisotropicTexFilterInfo(maxAnisotropy, TEXTURE_MAX_ANISOTROPY_EXT) {
    AnisotropicTexFilterInfo$Companion_getInstance();
    this.maxAnisotropy = maxAnisotropy;
    this.TEXTURE_MAX_ANISOTROPY_EXT = TEXTURE_MAX_ANISOTROPY_EXT;
  }
  Object.defineProperty(AnisotropicTexFilterInfo.prototype, 'isSupported', {
    get: function () {
      return this.TEXTURE_MAX_ANISOTROPY_EXT !== 0;
    }
  });
  function AnisotropicTexFilterInfo$Companion() {
    AnisotropicTexFilterInfo$Companion_instance = this;
    this.NOT_SUPPORTED = new AnisotropicTexFilterInfo(0.0, 0);
  }
  AnisotropicTexFilterInfo$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AnisotropicTexFilterInfo$Companion_instance = null;
  function AnisotropicTexFilterInfo$Companion_getInstance() {
    if (AnisotropicTexFilterInfo$Companion_instance === null) {
      new AnisotropicTexFilterInfo$Companion();
    }
    return AnisotropicTexFilterInfo$Companion_instance;
  }
  AnisotropicTexFilterInfo.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AnisotropicTexFilterInfo',
    interfaces: []
  };
  AnisotropicTexFilterInfo.prototype.component1 = function () {
    return this.maxAnisotropy;
  };
  AnisotropicTexFilterInfo.prototype.component2 = function () {
    return this.TEXTURE_MAX_ANISOTROPY_EXT;
  };
  AnisotropicTexFilterInfo.prototype.copy_vjorfl$ = function (maxAnisotropy, TEXTURE_MAX_ANISOTROPY_EXT) {
    return new AnisotropicTexFilterInfo(maxAnisotropy === void 0 ? this.maxAnisotropy : maxAnisotropy, TEXTURE_MAX_ANISOTROPY_EXT === void 0 ? this.TEXTURE_MAX_ANISOTROPY_EXT : TEXTURE_MAX_ANISOTROPY_EXT);
  };
  AnisotropicTexFilterInfo.prototype.toString = function () {
    return 'AnisotropicTexFilterInfo(maxAnisotropy=' + Kotlin.toString(this.maxAnisotropy) + (', TEXTURE_MAX_ANISOTROPY_EXT=' + Kotlin.toString(this.TEXTURE_MAX_ANISOTROPY_EXT)) + ')';
  };
  AnisotropicTexFilterInfo.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.maxAnisotropy) | 0;
    result = result * 31 + Kotlin.hashCode(this.TEXTURE_MAX_ANISOTROPY_EXT) | 0;
    return result;
  };
  AnisotropicTexFilterInfo.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.maxAnisotropy, other.maxAnisotropy) && Kotlin.equals(this.TEXTURE_MAX_ANISOTROPY_EXT, other.TEXTURE_MAX_ANISOTROPY_EXT)))));
  };
  function GlslDialect(version, vsIn, vsOut, fsIn, fragColorHead, fragColorBody, texSampler) {
    GlslDialect$Companion_getInstance();
    this.version = version;
    this.vsIn = vsIn;
    this.vsOut = vsOut;
    this.fsIn = fsIn;
    this.fragColorHead = fragColorHead;
    this.fragColorBody = fragColorBody;
    this.texSampler = texSampler;
  }
  function GlslDialect$Companion() {
    GlslDialect$Companion_instance = this;
    this.GLSL_DIALECT_100 = new GlslDialect('#version 100', 'attribute', 'varying', 'varying', '', 'gl_FragColor', 'texture2D');
    this.GLSL_DIALECT_330 = new GlslDialect('#version 330', 'in', 'out', 'in', 'out vec4 fragColor;', 'fragColor', 'texture');
    this.GLSL_DIALECT_300_ES = new GlslDialect('#version 300 es', 'in', 'out', 'in', 'out vec4 fragColor;', 'fragColor', 'texture');
    this.GLSL_DIALECT_320_ES = new GlslDialect('#version 320 es', 'in', 'out', 'in', 'out vec4 fragColor;', 'fragColor', 'texture');
  }
  GlslDialect$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var GlslDialect$Companion_instance = null;
  function GlslDialect$Companion_getInstance() {
    if (GlslDialect$Companion_instance === null) {
      new GlslDialect$Companion();
    }
    return GlslDialect$Companion_instance;
  }
  GlslDialect.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GlslDialect',
    interfaces: []
  };
  GlslDialect.prototype.component1 = function () {
    return this.version;
  };
  GlslDialect.prototype.component2 = function () {
    return this.vsIn;
  };
  GlslDialect.prototype.component3 = function () {
    return this.vsOut;
  };
  GlslDialect.prototype.component4 = function () {
    return this.fsIn;
  };
  GlslDialect.prototype.component5 = function () {
    return this.fragColorHead;
  };
  GlslDialect.prototype.component6 = function () {
    return this.fragColorBody;
  };
  GlslDialect.prototype.component7 = function () {
    return this.texSampler;
  };
  GlslDialect.prototype.copy_blz5pm$ = function (version, vsIn, vsOut, fsIn, fragColorHead, fragColorBody, texSampler) {
    return new GlslDialect(version === void 0 ? this.version : version, vsIn === void 0 ? this.vsIn : vsIn, vsOut === void 0 ? this.vsOut : vsOut, fsIn === void 0 ? this.fsIn : fsIn, fragColorHead === void 0 ? this.fragColorHead : fragColorHead, fragColorBody === void 0 ? this.fragColorBody : fragColorBody, texSampler === void 0 ? this.texSampler : texSampler);
  };
  GlslDialect.prototype.toString = function () {
    return 'GlslDialect(version=' + Kotlin.toString(this.version) + (', vsIn=' + Kotlin.toString(this.vsIn)) + (', vsOut=' + Kotlin.toString(this.vsOut)) + (', fsIn=' + Kotlin.toString(this.fsIn)) + (', fragColorHead=' + Kotlin.toString(this.fragColorHead)) + (', fragColorBody=' + Kotlin.toString(this.fragColorBody)) + (', texSampler=' + Kotlin.toString(this.texSampler)) + ')';
  };
  GlslDialect.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.version) | 0;
    result = result * 31 + Kotlin.hashCode(this.vsIn) | 0;
    result = result * 31 + Kotlin.hashCode(this.vsOut) | 0;
    result = result * 31 + Kotlin.hashCode(this.fsIn) | 0;
    result = result * 31 + Kotlin.hashCode(this.fragColorHead) | 0;
    result = result * 31 + Kotlin.hashCode(this.fragColorBody) | 0;
    result = result * 31 + Kotlin.hashCode(this.texSampler) | 0;
    return result;
  };
  GlslDialect.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.version, other.version) && Kotlin.equals(this.vsIn, other.vsIn) && Kotlin.equals(this.vsOut, other.vsOut) && Kotlin.equals(this.fsIn, other.fsIn) && Kotlin.equals(this.fragColorHead, other.fragColorHead) && Kotlin.equals(this.fragColorBody, other.fragColorBody) && Kotlin.equals(this.texSampler, other.texSampler)))));
  };
  function InputManager() {
    InputManager$Companion_getInstance();
    this.queuedKeyEvents_0 = ArrayList_init_0();
    this.keyEvents = ArrayList_init_0();
    this.keyHandlers_0 = LinkedHashMap_init();
    this.pointerState = new InputManager$PointerState();
  }
  function InputManager$registerKeyListener$lambda(it) {
    return it.isCharTyped;
  }
  InputManager.prototype.registerKeyListener_i13a8v$ = function (char, name, filter, callback) {
    if (filter === void 0)
      filter = InputManager$registerKeyListener$lambda;
    return this.registerKeyListener_aviy8w$(char | 0, name, filter, callback);
  };
  function InputManager$registerKeyListener$lambda_0(it) {
    return true;
  }
  InputManager.prototype.registerKeyListener_aviy8w$ = function (keyCode, name, filter, callback) {
    if (filter === void 0)
      filter = InputManager$registerKeyListener$lambda_0;
    var keyStr = 32 <= keyCode && keyCode <= 126 ? "'" + String.fromCharCode(toChar(keyCode)) + "'" : keyCode.toString();
    var $receiver = this.keyHandlers_0;
    var tmp$;
    var value = $receiver.get_11rb$(keyCode);
    if (value == null) {
      var answer = ArrayList_init_0();
      $receiver.put_xwzc9p$(keyCode, answer);
      tmp$ = answer;
    }
     else {
      tmp$ = value;
    }
    var listeners = tmp$;
    if (!listeners.isEmpty()) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        var tmp$_0 = $this.printer;
        var tmp$_1 = 'Multiple bindings for key ' + keyStr + ': ';
        var destination = ArrayList_init(collectionSizeOrDefault(listeners, 10));
        var tmp$_2;
        tmp$_2 = listeners.iterator();
        while (tmp$_2.hasNext()) {
          var item = tmp$_2.next();
          destination.add_11rb$(item.name);
        }
        tmp$_0.call($this, level, tag, tmp$_1 + destination);
      }
    }
    var handler = new InputManager$KeyEventListener(keyCode, name, filter, callback);
    listeners.add_11rb$(handler);
    var $this_0 = package$util.Log;
    var level_0 = Log$Level.DEBUG;
    var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
    if (level_0.level >= $this_0.level.level) {
      $this_0.printer(level_0, tag_0, 'Registered key handler: ' + '"' + name + '"' + ' [keyCode=' + keyStr + ']');
    }
    return handler;
  };
  InputManager.prototype.removeKeyListener_abhb69$ = function (listener) {
    var tmp$;
    tmp$ = this.keyHandlers_0.get_11rb$(listener.keyCode);
    if (tmp$ == null) {
      return;
    }
    var listeners = tmp$;
    listeners.remove_11rb$(listener);
  };
  InputManager.prototype.onNewFrame_cwprtu$ = function (ctx) {
    var tmp$;
    this.pointerState.onNewFrame_cwprtu$(ctx);
    this.keyEvents.clear();
    this.keyEvents.addAll_brywnq$(this.queuedKeyEvents_0);
    this.queuedKeyEvents_0.clear();
    tmp$ = this.keyEvents;
    for (var i = 0; i !== tmp$.size; ++i) {
      var evt = this.keyEvents.get_za3lpa$(i);
      var listeners = this.keyHandlers_0.get_11rb$(evt.keyCode);
      if (listeners != null) {
        for (var j = 0; j !== listeners.size; ++j) {
          if (listeners.get_za3lpa$(j).filter(evt)) {
            listeners.get_za3lpa$(j).invoke_9cgpoj$(evt);
          }
        }
      }
    }
  };
  InputManager.prototype.keyEvent_qt1dr2$ = function (keyCode, modifiers, event) {
    var ev = new InputManager$KeyEvent();
    ev.keyCode = keyCode;
    ev.event = event;
    ev.modifiers = modifiers;
    this.queuedKeyEvents_0.add_11rb$(ev);
  };
  InputManager.prototype.charTyped_s8itvh$ = function (typedChar) {
    var ev = new InputManager$KeyEvent();
    ev.event = 8;
    ev.typedChar = toBoxedChar(typedChar);
    ev.keyCode = typedChar | 0;
    this.queuedKeyEvents_0.add_11rb$(ev);
  };
  InputManager.prototype.handleTouchStart_nhq4am$ = function (pointerId, x, y) {
    this.pointerState.handleTouchStart_qlj5un$(pointerId, x, y);
  };
  InputManager.prototype.handleTouchEnd_za3lpa$ = function (pointerId) {
    this.pointerState.handleTouchEnd_kcn2v3$(pointerId);
  };
  InputManager.prototype.handleTouchCancel_za3lpa$ = function (pointerId) {
    this.pointerState.handleTouchCancel_kcn2v3$(pointerId);
  };
  InputManager.prototype.handleTouchMove_nhq4am$ = function (pointerId, x, y) {
    this.pointerState.handleTouchMove_qlj5un$(pointerId, x, y);
  };
  InputManager.prototype.handleMouseMove_dleff0$ = function (x, y) {
    this.pointerState.handleMouseMove_dob1fz$(x, y);
  };
  InputManager.prototype.handleMouseButtonState_fzusl$ = function (button, down) {
    this.pointerState.handleMouseButtonState_iwgtk$(button, down);
  };
  InputManager.prototype.handleMouseButtonStates_za3lpa$ = function (mask) {
    this.pointerState.handleMouseButtonStates_kcn2v3$(mask);
  };
  InputManager.prototype.handleMouseScroll_mx4ult$ = function (ticks) {
    this.pointerState.handleMouseScroll_nwfnho$(ticks);
  };
  InputManager.prototype.handleMouseExit = function () {
    this.pointerState.handleMouseExit_8be2vx$();
  };
  function InputManager$Pointer() {
    this.id_yfac1g$_0 = 0;
    this.x_5rhhjp$_0 = 0.0;
    this.y_5rhhkk$_0 = 0.0;
    this.deltaX_8nh2op$_0 = 0.0;
    this.deltaY_8nh2nu$_0 = 0.0;
    this.dragDeltaX_yg2vql$_0 = 0.0;
    this.dragDeltaY_yg2vpq$_0 = 0.0;
    this.deltaScroll_trurwo$_0 = 0.0;
    this.buttonMask_uq1vpl$_0 = 0;
    this.buttonEventMask_dc8ngn$_0 = 0;
    this.isValid_cde91$_0 = false;
    this.consumptionMask_8be2vx$ = 0;
  }
  Object.defineProperty(InputManager$Pointer.prototype, 'id', {
    get: function () {
      return this.id_yfac1g$_0;
    },
    set: function (id) {
      this.id_yfac1g$_0 = id;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'x', {
    get: function () {
      return this.x_5rhhjp$_0;
    },
    set: function (x) {
      this.x_5rhhjp$_0 = x;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'y', {
    get: function () {
      return this.y_5rhhkk$_0;
    },
    set: function (y) {
      this.y_5rhhkk$_0 = y;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'deltaX', {
    get: function () {
      return this.deltaX_8nh2op$_0;
    },
    set: function (deltaX) {
      this.deltaX_8nh2op$_0 = deltaX;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'deltaY', {
    get: function () {
      return this.deltaY_8nh2nu$_0;
    },
    set: function (deltaY) {
      this.deltaY_8nh2nu$_0 = deltaY;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'dragDeltaX', {
    get: function () {
      return this.dragDeltaX_yg2vql$_0;
    },
    set: function (dragDeltaX) {
      this.dragDeltaX_yg2vql$_0 = dragDeltaX;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'dragDeltaY', {
    get: function () {
      return this.dragDeltaY_yg2vpq$_0;
    },
    set: function (dragDeltaY) {
      this.dragDeltaY_yg2vpq$_0 = dragDeltaY;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'deltaScroll', {
    get: function () {
      return this.deltaScroll_trurwo$_0;
    },
    set: function (deltaScroll) {
      this.deltaScroll_trurwo$_0 = deltaScroll;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'buttonMask', {
    get: function () {
      return this.buttonMask_uq1vpl$_0;
    },
    set: function (value) {
      this.buttonEventMask = this.buttonEventMask | this.buttonMask_uq1vpl$_0 ^ value;
      this.buttonMask_uq1vpl$_0 = value;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'buttonEventMask', {
    get: function () {
      return this.buttonEventMask_dc8ngn$_0;
    },
    set: function (buttonEventMask) {
      this.buttonEventMask_dc8ngn$_0 = buttonEventMask;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isValid', {
    get: function () {
      return this.isValid_cde91$_0;
    },
    set: function (isValid) {
      this.isValid_cde91$_0 = isValid;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isLeftButtonDown', {
    get: function () {
      return (this.buttonMask & 1) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isRightButtonDown', {
    get: function () {
      return (this.buttonMask & 2) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isMiddleButtonDown', {
    get: function () {
      return (this.buttonMask & 4) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isBackButtonDown', {
    get: function () {
      return (this.buttonMask & 8) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isForwardButtonDown', {
    get: function () {
      return (this.buttonMask & 16) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isLeftButtonEvent', {
    get: function () {
      return (this.buttonEventMask & 1) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isRightButtonEvent', {
    get: function () {
      return (this.buttonEventMask & 2) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isMiddleButtonEvent', {
    get: function () {
      return (this.buttonEventMask & 4) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isBackButtonEvent', {
    get: function () {
      return (this.buttonEventMask & 8) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isForwardButtonEvent', {
    get: function () {
      return (this.buttonEventMask & 16) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isLeftButtonPressed', {
    get: function () {
      return this.isLeftButtonEvent && this.isLeftButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isRightButtonPressed', {
    get: function () {
      return this.isRightButtonEvent && this.isRightButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isMiddleButtonPressed', {
    get: function () {
      return this.isMiddleButtonEvent && this.isMiddleButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isBackButtonPressed', {
    get: function () {
      return this.isBackButtonEvent && this.isBackButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isForwardButtonPressed', {
    get: function () {
      return this.isForwardButtonEvent && this.isForwardButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isLeftButtonReleased', {
    get: function () {
      return this.isLeftButtonEvent && !this.isLeftButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isRightButtonReleased', {
    get: function () {
      return this.isRightButtonEvent && !this.isRightButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isMiddleButtonReleased', {
    get: function () {
      return this.isMiddleButtonEvent && !this.isMiddleButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isBackButtonReleased', {
    get: function () {
      return this.isBackButtonEvent && !this.isBackButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isForwardButtonReleased', {
    get: function () {
      return this.isForwardButtonEvent && !this.isForwardButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isLeftButtonClicked', {
    get: function () {
      var tmp$ = this.isLeftButtonReleased;
      if (tmp$) {
        var x = this.dragDeltaX;
        var tmp$_0 = Math_0.abs(x);
        var x_0 = this.dragDeltaY;
        tmp$ = tmp$_0 + Math_0.abs(x_0) < 5.0;
      }
      return tmp$;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isRightButtonClicked', {
    get: function () {
      var tmp$ = this.isRightButtonReleased;
      if (tmp$) {
        var x = this.dragDeltaX;
        var tmp$_0 = Math_0.abs(x);
        var x_0 = this.dragDeltaY;
        tmp$ = tmp$_0 + Math_0.abs(x_0) < 5.0;
      }
      return tmp$;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isMiddleButtonClicked', {
    get: function () {
      var tmp$ = this.isMiddleButtonReleased;
      if (tmp$) {
        var x = this.dragDeltaX;
        var tmp$_0 = Math_0.abs(x);
        var x_0 = this.dragDeltaY;
        tmp$ = tmp$_0 + Math_0.abs(x_0) < 5.0;
      }
      return tmp$;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isBackButtonClicked', {
    get: function () {
      var tmp$ = this.isBackButtonReleased;
      if (tmp$) {
        var x = this.dragDeltaX;
        var tmp$_0 = Math_0.abs(x);
        var x_0 = this.dragDeltaY;
        tmp$ = tmp$_0 + Math_0.abs(x_0) < 5.0;
      }
      return tmp$;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isForwardButtonClicked', {
    get: function () {
      var tmp$ = this.isForwardButtonReleased;
      if (tmp$) {
        var x = this.dragDeltaX;
        var tmp$_0 = Math_0.abs(x);
        var x_0 = this.dragDeltaY;
        tmp$ = tmp$_0 + Math_0.abs(x_0) < 5.0;
      }
      return tmp$;
    }
  });
  InputManager$Pointer.prototype.consume_za3lpa$ = function (mask) {
    if (mask === void 0)
      mask = -1;
    this.consumptionMask_8be2vx$ = this.consumptionMask_8be2vx$ | mask;
  };
  InputManager$Pointer.prototype.isConsumed_za3lpa$ = function (mask) {
    if (mask === void 0)
      mask = -1;
    return (this.consumptionMask_8be2vx$ & mask) !== 0;
  };
  InputManager$Pointer.prototype.isInViewport_n4xpoe$ = function (viewport, ctx) {
    var ptrY = ctx.windowHeight - this.y;
    return this.isValid && viewport.isInViewport_dleff0$(this.x, ptrY);
  };
  InputManager$Pointer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Pointer',
    interfaces: []
  };
  function InputManager$BufferedPointerInput() {
    InputManager$Pointer.call(this);
    this.updateState_0 = InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance();
    this.processedState_0 = InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance();
    this.lastUpdate = 0.0;
  }
  InputManager$BufferedPointerInput.prototype.setButtonMask_za3lpa$ = function (mask) {
    this.buttonMask = mask;
    if (this.isLeftButtonPressed || this.isRightButtonPressed || this.isMiddleButtonPressed) {
      this.dragDeltaX = 0.0;
      this.dragDeltaY = 0.0;
    }
  };
  InputManager$BufferedPointerInput.prototype.startPointer_nhq4am$ = function (pointerId, x, y) {
    this.movePointer_dleff0$(x, y);
    this.id = pointerId;
    this.deltaX = 0.0;
    this.deltaY = 0.0;
    this.dragDeltaX = 0.0;
    this.dragDeltaY = 0.0;
    this.deltaScroll = 0.0;
    this.updateState_0 = InputManager$BufferedPointerInput$UpdateState$STARTED_getInstance();
    this.isValid = true;
  };
  InputManager$BufferedPointerInput.prototype.movePointer_dleff0$ = function (x, y) {
    if (this.buttonMask !== 0) {
      this.dragDeltaX = this.dragDeltaX + (x - this.x);
      this.dragDeltaY = this.dragDeltaY + (y - this.y);
    }
    this.deltaX = this.deltaX + (x - this.x);
    this.deltaY = this.deltaY + (y - this.y);
    this.x = x;
    this.y = y;
    this.lastUpdate = now();
  };
  InputManager$BufferedPointerInput.prototype.endPointer = function () {
    var tmp$;
    switch (this.processedState_0.name) {
      case 'ACTIVE':
        tmp$ = InputManager$BufferedPointerInput$UpdateState$ENDED_getInstance();
        break;
      case 'STARTED':
        tmp$ = InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_getInstance();
        break;
      default:tmp$ = InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED_getInstance();
        break;
    }
    this.updateState_0 = tmp$;
  };
  InputManager$BufferedPointerInput.prototype.cancelPointer = function () {
    this.updateState_0 = InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance();
    this.isValid = false;
  };
  InputManager$BufferedPointerInput.prototype.update_sjovm5$ = function (target, t) {
    if (this.updateState_0 !== InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance() && t - this.lastUpdate > 200) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Pointer ' + this.id + ' timed out!');
      }
      this.cancelPointer();
    }
    target.id = this.id;
    target.deltaX = this.deltaX;
    target.deltaY = this.deltaY;
    target.dragDeltaX = this.dragDeltaX;
    target.dragDeltaY = this.dragDeltaY;
    target.deltaScroll = this.deltaScroll;
    target.x = this.x;
    target.y = this.y;
    target.isValid = true;
    target.consumptionMask_8be2vx$ = 0;
    target.buttonEventMask = 0;
    switch (this.updateState_0.name) {
      case 'STARTED':
        target.buttonMask = 0;
        break;
      case 'ENDED_BEFORE_STARTED':
        target.buttonMask = 0;
        break;
      case 'ACTIVE':
        target.buttonMask = this.buttonMask;
        break;
      case 'ENDED_BEFORE_ACTIVE':
        target.buttonMask = this.buttonMask;
        break;
      case 'ENDED':
        target.buttonMask = 0;
        break;
      case 'INVALID':
        this.isValid = false;
        target.isValid = false;
        break;
    }
    this.deltaX = 0.0;
    this.deltaY = 0.0;
    this.deltaScroll = 0.0;
    this.buttonEventMask = 0;
    this.processedState_0 = this.updateState_0;
    this.updateState_0 = this.updateState_0.next();
  };
  function InputManager$BufferedPointerInput$UpdateState(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function InputManager$BufferedPointerInput$UpdateState_initFields() {
    InputManager$BufferedPointerInput$UpdateState_initFields = function () {
    };
    new InputManager$BufferedPointerInput$UpdateState$STARTED();
    new InputManager$BufferedPointerInput$UpdateState$ACTIVE();
    new InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED();
    new InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE();
    new InputManager$BufferedPointerInput$UpdateState$ENDED();
    new InputManager$BufferedPointerInput$UpdateState$INVALID();
  }
  function InputManager$BufferedPointerInput$UpdateState$STARTED() {
    InputManager$BufferedPointerInput$UpdateState$STARTED_instance = this;
    InputManager$BufferedPointerInput$UpdateState.call(this, 'STARTED', 0);
  }
  InputManager$BufferedPointerInput$UpdateState$STARTED.prototype.next = function () {
    return InputManager$BufferedPointerInput$UpdateState$ACTIVE_getInstance();
  };
  InputManager$BufferedPointerInput$UpdateState$STARTED.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'STARTED',
    interfaces: [InputManager$BufferedPointerInput$UpdateState]
  };
  var InputManager$BufferedPointerInput$UpdateState$STARTED_instance = null;
  function InputManager$BufferedPointerInput$UpdateState$STARTED_getInstance() {
    InputManager$BufferedPointerInput$UpdateState_initFields();
    return InputManager$BufferedPointerInput$UpdateState$STARTED_instance;
  }
  function InputManager$BufferedPointerInput$UpdateState$ACTIVE() {
    InputManager$BufferedPointerInput$UpdateState$ACTIVE_instance = this;
    InputManager$BufferedPointerInput$UpdateState.call(this, 'ACTIVE', 1);
  }
  InputManager$BufferedPointerInput$UpdateState$ACTIVE.prototype.next = function () {
    return InputManager$BufferedPointerInput$UpdateState$ACTIVE_getInstance();
  };
  InputManager$BufferedPointerInput$UpdateState$ACTIVE.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ACTIVE',
    interfaces: [InputManager$BufferedPointerInput$UpdateState]
  };
  var InputManager$BufferedPointerInput$UpdateState$ACTIVE_instance = null;
  function InputManager$BufferedPointerInput$UpdateState$ACTIVE_getInstance() {
    InputManager$BufferedPointerInput$UpdateState_initFields();
    return InputManager$BufferedPointerInput$UpdateState$ACTIVE_instance;
  }
  function InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED() {
    InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED_instance = this;
    InputManager$BufferedPointerInput$UpdateState.call(this, 'ENDED_BEFORE_STARTED', 2);
  }
  InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED.prototype.next = function () {
    return InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_getInstance();
  };
  InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ENDED_BEFORE_STARTED',
    interfaces: [InputManager$BufferedPointerInput$UpdateState]
  };
  var InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED_instance = null;
  function InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED_getInstance() {
    InputManager$BufferedPointerInput$UpdateState_initFields();
    return InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED_instance;
  }
  function InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE() {
    InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_instance = this;
    InputManager$BufferedPointerInput$UpdateState.call(this, 'ENDED_BEFORE_ACTIVE', 3);
  }
  InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE.prototype.next = function () {
    return InputManager$BufferedPointerInput$UpdateState$ENDED_getInstance();
  };
  InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ENDED_BEFORE_ACTIVE',
    interfaces: [InputManager$BufferedPointerInput$UpdateState]
  };
  var InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_instance = null;
  function InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_getInstance() {
    InputManager$BufferedPointerInput$UpdateState_initFields();
    return InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_instance;
  }
  function InputManager$BufferedPointerInput$UpdateState$ENDED() {
    InputManager$BufferedPointerInput$UpdateState$ENDED_instance = this;
    InputManager$BufferedPointerInput$UpdateState.call(this, 'ENDED', 4);
  }
  InputManager$BufferedPointerInput$UpdateState$ENDED.prototype.next = function () {
    return InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance();
  };
  InputManager$BufferedPointerInput$UpdateState$ENDED.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ENDED',
    interfaces: [InputManager$BufferedPointerInput$UpdateState]
  };
  var InputManager$BufferedPointerInput$UpdateState$ENDED_instance = null;
  function InputManager$BufferedPointerInput$UpdateState$ENDED_getInstance() {
    InputManager$BufferedPointerInput$UpdateState_initFields();
    return InputManager$BufferedPointerInput$UpdateState$ENDED_instance;
  }
  function InputManager$BufferedPointerInput$UpdateState$INVALID() {
    InputManager$BufferedPointerInput$UpdateState$INVALID_instance = this;
    InputManager$BufferedPointerInput$UpdateState.call(this, 'INVALID', 5);
  }
  InputManager$BufferedPointerInput$UpdateState$INVALID.prototype.next = function () {
    return InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance();
  };
  InputManager$BufferedPointerInput$UpdateState$INVALID.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'INVALID',
    interfaces: [InputManager$BufferedPointerInput$UpdateState]
  };
  var InputManager$BufferedPointerInput$UpdateState$INVALID_instance = null;
  function InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance() {
    InputManager$BufferedPointerInput$UpdateState_initFields();
    return InputManager$BufferedPointerInput$UpdateState$INVALID_instance;
  }
  InputManager$BufferedPointerInput$UpdateState.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UpdateState',
    interfaces: [Enum]
  };
  function InputManager$BufferedPointerInput$UpdateState$values() {
    return [InputManager$BufferedPointerInput$UpdateState$STARTED_getInstance(), InputManager$BufferedPointerInput$UpdateState$ACTIVE_getInstance(), InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED_getInstance(), InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_getInstance(), InputManager$BufferedPointerInput$UpdateState$ENDED_getInstance(), InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance()];
  }
  InputManager$BufferedPointerInput$UpdateState.values = InputManager$BufferedPointerInput$UpdateState$values;
  function InputManager$BufferedPointerInput$UpdateState$valueOf(name) {
    switch (name) {
      case 'STARTED':
        return InputManager$BufferedPointerInput$UpdateState$STARTED_getInstance();
      case 'ACTIVE':
        return InputManager$BufferedPointerInput$UpdateState$ACTIVE_getInstance();
      case 'ENDED_BEFORE_STARTED':
        return InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED_getInstance();
      case 'ENDED_BEFORE_ACTIVE':
        return InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_getInstance();
      case 'ENDED':
        return InputManager$BufferedPointerInput$UpdateState$ENDED_getInstance();
      case 'INVALID':
        return InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.InputManager.BufferedPointerInput.UpdateState.' + name);
    }
  }
  InputManager$BufferedPointerInput$UpdateState.valueOf_61zpoe$ = InputManager$BufferedPointerInput$UpdateState$valueOf;
  InputManager$BufferedPointerInput.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BufferedPointerInput',
    interfaces: [InputManager$Pointer]
  };
  function InputManager$KeyEventListener(keyCode, name, filter, callback) {
    if (filter === void 0)
      filter = InputManager$InputManager$KeyEventListener_init$lambda;
    this.keyCode = keyCode;
    this.name = name;
    this.filter = filter;
    this.callback = callback;
  }
  InputManager$KeyEventListener.prototype.invoke_9cgpoj$ = function (evt) {
    this.callback(evt);
  };
  function InputManager$InputManager$KeyEventListener_init$lambda(it) {
    return true;
  }
  InputManager$KeyEventListener.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KeyEventListener',
    interfaces: []
  };
  function InputManager$KeyEvent() {
    this.keyCode_56t57j$_0 = 0;
    this.modifiers_cmws0f$_0 = 0;
    this.event_4ycnw1$_0 = 0;
    this.typedChar_ne8il1$_0 = toChar(0);
  }
  Object.defineProperty(InputManager$KeyEvent.prototype, 'keyCode', {
    get: function () {
      return this.keyCode_56t57j$_0;
    },
    set: function (keyCode) {
      this.keyCode_56t57j$_0 = keyCode;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'modifiers', {
    get: function () {
      return this.modifiers_cmws0f$_0;
    },
    set: function (modifiers) {
      this.modifiers_cmws0f$_0 = modifiers;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'event', {
    get: function () {
      return this.event_4ycnw1$_0;
    },
    set: function (event) {
      this.event_4ycnw1$_0 = event;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'typedChar', {
    get: function () {
      return toBoxedChar(this.typedChar_ne8il1$_0);
    },
    set: function (typedChar) {
      this.typedChar_ne8il1$_0 = unboxChar(typedChar);
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'isPressed', {
    get: function () {
      return (this.event & 2) !== 0;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'isRepeated', {
    get: function () {
      return (this.event & 4) !== 0;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'isReleased', {
    get: function () {
      return (this.event & 1) !== 0;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'isCharTyped', {
    get: function () {
      return (this.event & 8) !== 0;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'isShiftDown', {
    get: function () {
      return (this.modifiers & 1) !== 0;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'isCtrlDown', {
    get: function () {
      return (this.modifiers & 2) !== 0;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'isAltDown', {
    get: function () {
      return (this.modifiers & 4) !== 0;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'isSuperDown', {
    get: function () {
      return (this.modifiers & 8) !== 0;
    }
  });
  InputManager$KeyEvent.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KeyEvent',
    interfaces: []
  };
  function InputManager$PointerState() {
    var array = Array_0(10);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new InputManager$Pointer();
    }
    this.pointers = array;
    this.lastPtrInput_0 = 0.0;
    var array_0 = Array_0(10);
    var tmp$_0;
    tmp$_0 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array_0[i_0] = new InputManager$BufferedPointerInput();
    }
    this.inputPointers_0 = array_0;
    this.compatGestureEvaluator_0 = new TouchGestureEvaluator();
    this.isEvaluatingCompatGestures = true;
    this.primaryPointer = this.pointers[0];
  }
  InputManager$PointerState.prototype.getActivePointers_j71cmr$ = function (result, consumedMask) {
    if (consumedMask === void 0)
      consumedMask = -1;
    var tmp$;
    result.clear();
    tmp$ = this.pointers;
    for (var i = 0; i !== tmp$.length; ++i) {
      if (this.pointers[i].isValid && !this.pointers[i].isConsumed_za3lpa$(consumedMask)) {
        result.add_11rb$(this.pointers[i]);
      }
    }
  };
  InputManager$PointerState.prototype.onNewFrame_cwprtu$ = function (ctx) {
    var tmp$;
    tmp$ = this.pointers;
    for (var i = 0; i !== tmp$.length; ++i) {
      this.inputPointers_0[i].update_sjovm5$(this.pointers[i], this.lastPtrInput_0);
    }
    if (this.isEvaluatingCompatGestures) {
      this.compatGestureEvaluator_0.evaluate_19cf9$(this, ctx);
      switch (this.compatGestureEvaluator_0.currentGesture.type) {
        case 1:
          this.primaryPointer.consumptionMask_8be2vx$ = 0;
          this.primaryPointer.deltaScroll = this.compatGestureEvaluator_0.currentGesture.dPinchAmount / 20;
          this.primaryPointer.x = this.compatGestureEvaluator_0.currentGesture.centerCurrent.x;
          this.primaryPointer.y = this.compatGestureEvaluator_0.currentGesture.centerCurrent.y;
          this.primaryPointer.deltaX = this.compatGestureEvaluator_0.currentGesture.dCenter.x;
          this.primaryPointer.deltaY = this.compatGestureEvaluator_0.currentGesture.dCenter.y;
          break;
        case 2:
          this.primaryPointer.consumptionMask_8be2vx$ = 0;
          this.primaryPointer.x = this.compatGestureEvaluator_0.currentGesture.centerCurrent.x;
          this.primaryPointer.y = this.compatGestureEvaluator_0.currentGesture.centerCurrent.y;
          this.primaryPointer.deltaX = this.compatGestureEvaluator_0.currentGesture.dCenter.x;
          this.primaryPointer.deltaY = this.compatGestureEvaluator_0.currentGesture.dCenter.y;
          if (this.primaryPointer.buttonMask === 1) {
            this.primaryPointer.buttonMask = 2;
            if (this.compatGestureEvaluator_0.currentGesture.numUpdates > 1) {
              this.primaryPointer.buttonEventMask = 0;
            }
          }

          break;
      }
    }
  };
  InputManager$PointerState.prototype.getFreeInputPointer_8be2vx$ = function () {
    var tmp$;
    tmp$ = this.inputPointers_0;
    for (var i = 0; i !== tmp$.length; ++i) {
      if (!this.inputPointers_0[i].isValid) {
        return this.inputPointers_0[i];
      }
    }
    return null;
  };
  InputManager$PointerState.prototype.findInputPointer_kcn2v3$ = function (pointerId) {
    var tmp$;
    tmp$ = this.inputPointers_0;
    for (var i = 0; i !== tmp$.length; ++i) {
      if (this.inputPointers_0[i].isValid && this.inputPointers_0[i].id === pointerId) {
        return this.inputPointers_0[i];
      }
    }
    return null;
  };
  InputManager$PointerState.prototype.handleTouchStart_qlj5un$ = function (pointerId, x, y) {
    var tmp$;
    this.lastPtrInput_0 = now();
    tmp$ = this.getFreeInputPointer_8be2vx$();
    if (tmp$ == null) {
      return;
    }
    var inPtr = tmp$;
    inPtr.startPointer_nhq4am$(pointerId, x, y);
    inPtr.buttonMask = 1;
  };
  InputManager$PointerState.prototype.handleTouchEnd_kcn2v3$ = function (pointerId) {
    var tmp$;
    (tmp$ = this.findInputPointer_kcn2v3$(pointerId)) != null ? (tmp$.endPointer(), Unit) : null;
  };
  InputManager$PointerState.prototype.handleTouchCancel_kcn2v3$ = function (pointerId) {
    var tmp$;
    (tmp$ = this.findInputPointer_kcn2v3$(pointerId)) != null ? (tmp$.cancelPointer(), Unit) : null;
  };
  InputManager$PointerState.prototype.handleTouchMove_qlj5un$ = function (pointerId, x, y) {
    var tmp$;
    this.lastPtrInput_0 = now();
    (tmp$ = this.findInputPointer_kcn2v3$(pointerId)) != null ? (tmp$.movePointer_dleff0$(x, y), Unit) : null;
  };
  InputManager$PointerState.prototype.handleMouseMove_dob1fz$ = function (x, y) {
    var tmp$;
    this.lastPtrInput_0 = now();
    var mousePtr = this.findInputPointer_kcn2v3$(-1000000);
    if (mousePtr == null) {
      tmp$ = this.getFreeInputPointer_8be2vx$();
      if (tmp$ == null) {
        return;
      }
      var startPtr = tmp$;
      startPtr.startPointer_nhq4am$(-1000000, x, y);
    }
     else {
      mousePtr.movePointer_dleff0$(x, y);
    }
  };
  InputManager$PointerState.prototype.handleMouseButtonState_iwgtk$ = function (button, down) {
    var tmp$;
    tmp$ = this.findInputPointer_kcn2v3$(-1000000);
    if (tmp$ == null) {
      return;
    }
    var ptr = tmp$;
    if (down) {
      ptr.setButtonMask_za3lpa$(ptr.buttonMask | 1 << button);
    }
     else {
      ptr.setButtonMask_za3lpa$(ptr.buttonMask & ~(1 << button));
    }
  };
  InputManager$PointerState.prototype.handleMouseButtonStates_kcn2v3$ = function (mask) {
    var tmp$;
    tmp$ = this.findInputPointer_kcn2v3$(-1000000);
    if (tmp$ == null) {
      return;
    }
    var ptr = tmp$;
    ptr.setButtonMask_za3lpa$(mask);
  };
  InputManager$PointerState.prototype.handleMouseScroll_nwfnho$ = function (ticks) {
    var tmp$;
    tmp$ = this.findInputPointer_kcn2v3$(-1000000);
    if (tmp$ == null) {
      return;
    }
    var ptr = tmp$;
    ptr.deltaScroll = ptr.deltaScroll + ticks;
  };
  InputManager$PointerState.prototype.handleMouseExit_8be2vx$ = function () {
    var tmp$;
    (tmp$ = this.findInputPointer_kcn2v3$(-1000000)) != null ? (tmp$.cancelPointer(), Unit) : null;
  };
  InputManager$PointerState.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PointerState',
    interfaces: []
  };
  function InputManager$Companion() {
    InputManager$Companion_instance = this;
    this.LEFT_BUTTON = 0;
    this.LEFT_BUTTON_MASK = 1;
    this.RIGHT_BUTTON = 1;
    this.RIGHT_BUTTON_MASK = 2;
    this.MIDDLE_BUTTON = 2;
    this.MIDDLE_BUTTON_MASK = 4;
    this.BACK_BUTTON = 3;
    this.BACK_BUTTON_MASK = 8;
    this.FORWARD_BUTTON = 4;
    this.FORWARD_BUTTON_MASK = 16;
    this.MAX_POINTERS = 10;
    this.MOUSE_POINTER_ID = -1000000;
    this.CONSUMED_ALL = -1;
    this.CONSUMED_X = 1;
    this.CONSUMED_Y = 2;
    this.CONSUMED_SCROLL = 4;
    this.CONSUMED_LEFT_BUTTON = 8;
    this.CONSUMED_RIGHT_BUTTON = 16;
    this.CONSUMED_MIDDLE_BUTTON = 32;
    this.CONSUMED_BACK_BUTTON = 64;
    this.CONSUMED_FORWARD_BUTTON = 128;
    this.KEY_EV_UP = 1;
    this.KEY_EV_DOWN = 2;
    this.KEY_EV_REPEATED = 4;
    this.KEY_EV_CHAR_TYPED = 8;
    this.KEY_MOD_SHIFT = 1;
    this.KEY_MOD_CTRL = 2;
    this.KEY_MOD_ALT = 4;
    this.KEY_MOD_SUPER = 8;
    this.KEY_CTRL_LEFT = -1;
    this.KEY_CTRL_RIGHT = -2;
    this.KEY_SHIFT_LEFT = -3;
    this.KEY_SHIFT_RIGHT = -4;
    this.KEY_ALT_LEFT = -5;
    this.KEY_ALT_RIGHT = -6;
    this.KEY_SUPER_LEFT = -7;
    this.KEY_SUPER_RIGHT = -8;
    this.KEY_ESC = -9;
    this.KEY_MENU = -10;
    this.KEY_ENTER = -11;
    this.KEY_NP_ENTER = -12;
    this.KEY_NP_DIV = -13;
    this.KEY_NP_MUL = -14;
    this.KEY_NP_PLUS = -15;
    this.KEY_NP_MINUS = -16;
    this.KEY_BACKSPACE = -17;
    this.KEY_TAB = -18;
    this.KEY_DEL = -19;
    this.KEY_INSERT = -20;
    this.KEY_HOME = -21;
    this.KEY_END = -22;
    this.KEY_PAGE_UP = -23;
    this.KEY_PAGE_DOWN = -24;
    this.KEY_CURSOR_LEFT = -25;
    this.KEY_CURSOR_RIGHT = -26;
    this.KEY_CURSOR_UP = -27;
    this.KEY_CURSOR_DOWN = -28;
    this.KEY_F1 = -29;
    this.KEY_F2 = -30;
    this.KEY_F3 = -31;
    this.KEY_F4 = -32;
    this.KEY_F5 = -33;
    this.KEY_F6 = -34;
    this.KEY_F7 = -35;
    this.KEY_F8 = -36;
    this.KEY_F9 = -37;
    this.KEY_F10 = -38;
    this.KEY_F11 = -39;
    this.KEY_F12 = -40;
  }
  InputManager$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var InputManager$Companion_instance = null;
  function InputManager$Companion_getInstance() {
    if (InputManager$Companion_instance === null) {
      new InputManager$Companion();
    }
    return InputManager$Companion_instance;
  }
  InputManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InputManager',
    interfaces: []
  };
  function KoolContext() {
    this.screenDpi = 96.0;
    this.inputMgr = new InputManager();
    this.memoryMgr = new MemoryManager();
    this.shaderMgr = new ShaderManager();
    this.textureMgr = new TextureManager();
    this.renderingHints = new RenderingHints();
    this.renderPass = RenderPass$SCREEN_getInstance();
    this.mvpState = new MvpState();
    this.onRender = ArrayList_init_0();
    this.time_q5mkh0$_0 = 0.0;
    this.deltaT_wdv5hn$_0 = 0.0;
    this.frameIdx_2g8w1r$_0 = 0;
    this.fps_a02wsa$_0 = 60.0;
    this.scenes = ArrayList_init_0();
    this.attribs_e3zeo6$_0 = new KoolContext$Attribs();
    var array = Array_0(16);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new KoolContext$Attribs();
    }
    this.attribsStack_y8vpjm$_0 = array;
    this.attribsStackIdx_q83m91$_0 = 0;
    var array_0 = new Float64Array(25);
    var tmp$_0;
    tmp$_0 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array_0[i_0] = 0.017;
    }
    this.frameTimes_6eiyeg$_0 = array_0;
    this.viewport_xt8oob$_0 = this.attribs_e3zeo6$_0.get_ytbaoo$('viewport');
    this.clearColor_wr4e63$_0 = this.attribs_e3zeo6$_0.get_ytbaoo$('clearColor');
    this.cullFace_kxwi7y$_0 = this.attribs_e3zeo6$_0.get_ytbaoo$('cullFace');
    this.depthFunc_37d7wc$_0 = this.attribs_e3zeo6$_0.get_ytbaoo$('depthFunc');
    this.isDepthTest_pyg3t4$_0 = this.attribs_e3zeo6$_0.get_ytbaoo$('isDepthTest');
    this.isDepthMask_q2d84i$_0 = this.attribs_e3zeo6$_0.get_ytbaoo$('isDepthMask');
    this.isCullFace_5lucc8$_0 = this.attribs_e3zeo6$_0.get_ytbaoo$('isCullFace');
    this.isBlend_z2c90k$_0 = this.attribs_e3zeo6$_0.get_ytbaoo$('isBlend');
    this.lineWidth_1iezcf$_0 = this.attribs_e3zeo6$_0.get_ytbaoo$('lineWidth');
    this.boundBuffers_8be2vx$ = LinkedHashMap_init();
  }
  Object.defineProperty(KoolContext.prototype, 'time', {
    get: function () {
      return this.time_q5mkh0$_0;
    },
    set: function (time) {
      this.time_q5mkh0$_0 = time;
    }
  });
  Object.defineProperty(KoolContext.prototype, 'deltaT', {
    get: function () {
      return this.deltaT_wdv5hn$_0;
    },
    set: function (deltaT) {
      this.deltaT_wdv5hn$_0 = deltaT;
    }
  });
  Object.defineProperty(KoolContext.prototype, 'frameIdx', {
    get: function () {
      return this.frameIdx_2g8w1r$_0;
    },
    set: function (frameIdx) {
      this.frameIdx_2g8w1r$_0 = frameIdx;
    }
  });
  Object.defineProperty(KoolContext.prototype, 'fps', {
    get: function () {
      return this.fps_a02wsa$_0;
    },
    set: function (fps) {
      this.fps_a02wsa$_0 = fps;
    }
  });
  var KoolContext$viewport_metadata = new PropertyMetadata('viewport');
  Object.defineProperty(KoolContext.prototype, 'viewport', {
    get: function () {
      return this.viewport_xt8oob$_0.getValue_n5byny$(this, KoolContext$viewport_metadata);
    },
    set: function (viewport) {
      this.viewport_xt8oob$_0.setValue_sq4zib$(this, KoolContext$viewport_metadata, viewport);
    }
  });
  var KoolContext$clearColor_metadata = new PropertyMetadata('clearColor');
  Object.defineProperty(KoolContext.prototype, 'clearColor', {
    get: function () {
      return this.clearColor_wr4e63$_0.getValue_n5byny$(this, KoolContext$clearColor_metadata);
    },
    set: function (clearColor) {
      this.clearColor_wr4e63$_0.setValue_sq4zib$(this, KoolContext$clearColor_metadata, clearColor);
    }
  });
  var KoolContext$cullFace_metadata = new PropertyMetadata('cullFace');
  Object.defineProperty(KoolContext.prototype, 'cullFace', {
    get: function () {
      return this.cullFace_kxwi7y$_0.getValue_n5byny$(this, KoolContext$cullFace_metadata);
    },
    set: function (cullFace) {
      this.cullFace_kxwi7y$_0.setValue_sq4zib$(this, KoolContext$cullFace_metadata, cullFace);
    }
  });
  var KoolContext$depthFunc_metadata = new PropertyMetadata('depthFunc');
  Object.defineProperty(KoolContext.prototype, 'depthFunc', {
    get: function () {
      return this.depthFunc_37d7wc$_0.getValue_n5byny$(this, KoolContext$depthFunc_metadata);
    },
    set: function (depthFunc) {
      this.depthFunc_37d7wc$_0.setValue_sq4zib$(this, KoolContext$depthFunc_metadata, depthFunc);
    }
  });
  var KoolContext$isDepthTest_metadata = new PropertyMetadata('isDepthTest');
  Object.defineProperty(KoolContext.prototype, 'isDepthTest', {
    get: function () {
      return this.isDepthTest_pyg3t4$_0.getValue_n5byny$(this, KoolContext$isDepthTest_metadata);
    },
    set: function (isDepthTest) {
      this.isDepthTest_pyg3t4$_0.setValue_sq4zib$(this, KoolContext$isDepthTest_metadata, isDepthTest);
    }
  });
  var KoolContext$isDepthMask_metadata = new PropertyMetadata('isDepthMask');
  Object.defineProperty(KoolContext.prototype, 'isDepthMask', {
    get: function () {
      return this.isDepthMask_q2d84i$_0.getValue_n5byny$(this, KoolContext$isDepthMask_metadata);
    },
    set: function (isDepthMask) {
      this.isDepthMask_q2d84i$_0.setValue_sq4zib$(this, KoolContext$isDepthMask_metadata, isDepthMask);
    }
  });
  var KoolContext$isCullFace_metadata = new PropertyMetadata('isCullFace');
  Object.defineProperty(KoolContext.prototype, 'isCullFace', {
    get: function () {
      return this.isCullFace_5lucc8$_0.getValue_n5byny$(this, KoolContext$isCullFace_metadata);
    },
    set: function (isCullFace) {
      this.isCullFace_5lucc8$_0.setValue_sq4zib$(this, KoolContext$isCullFace_metadata, isCullFace);
    }
  });
  var KoolContext$isBlend_metadata = new PropertyMetadata('isBlend');
  Object.defineProperty(KoolContext.prototype, 'isBlend', {
    get: function () {
      return this.isBlend_z2c90k$_0.getValue_n5byny$(this, KoolContext$isBlend_metadata);
    },
    set: function (isBlend) {
      this.isBlend_z2c90k$_0.setValue_sq4zib$(this, KoolContext$isBlend_metadata, isBlend);
    }
  });
  var KoolContext$lineWidth_metadata = new PropertyMetadata('lineWidth');
  Object.defineProperty(KoolContext.prototype, 'lineWidth', {
    get: function () {
      return this.lineWidth_1iezcf$_0.getValue_n5byny$(this, KoolContext$lineWidth_metadata);
    },
    set: function (lineWidth) {
      this.lineWidth_1iezcf$_0.setValue_sq4zib$(this, KoolContext$lineWidth_metadata, lineWidth);
    }
  });
  KoolContext.prototype.render_14dthe$ = function (dt) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    this.deltaT = dt;
    this.time = this.time + dt;
    this.frameIdx = this.frameIdx + 1 | 0;
    this.frameTimes_6eiyeg$_0[this.frameIdx % this.frameTimes_6eiyeg$_0.length] = dt;
    var sum = 0.0;
    tmp$ = this.frameTimes_6eiyeg$_0;
    for (var i = 0; i !== tmp$.length; ++i) {
      sum += this.frameTimes_6eiyeg$_0[i];
    }
    this.fps = this.frameTimes_6eiyeg$_0.length / sum * 0.1 + this.fps * 0.9;
    this.inputMgr.onNewFrame_cwprtu$(this);
    this.textureMgr.onNewFrame_aemszp$(this);
    this.shaderMgr.onNewFrame_aemszp$(this);
    if (this.windowWidth !== this.viewport.width || this.windowHeight !== this.viewport.height) {
      this.viewport = new KoolContext$Viewport(0, 0, this.windowWidth, this.windowHeight);
      this.applyAttributes();
    }
    tmp$_0 = this.onRender;
    for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
      this.onRender.get_za3lpa$(i_0)(this);
    }
    tmp$_1 = reversed(get_indices(this.scenes)).iterator();
    while (tmp$_1.hasNext()) {
      var i_1 = tmp$_1.next();
      if (this.scenes.get_za3lpa$(i_1).isVisible) {
        this.scenes.get_za3lpa$(i_1).processInput_aemszp$(this);
      }
    }
    tmp$_2 = this.scenes;
    for (var i_2 = 0; i_2 !== tmp$_2.size; ++i_2) {
      if (this.scenes.get_za3lpa$(i_2).isVisible) {
        this.scenes.get_za3lpa$(i_2).renderScene_aemszp$(this);
      }
    }
  };
  KoolContext.prototype.pushAttributes = function () {
    var tmp$;
    this.attribsStack_y8vpjm$_0[tmp$ = this.attribsStackIdx_q83m91$_0, this.attribsStackIdx_q83m91$_0 = tmp$ + 1 | 0, tmp$].set_td6xi8$(this.attribs_e3zeo6$_0);
  };
  KoolContext.prototype.popAttributes = function () {
    this.attribs_e3zeo6$_0.set_td6xi8$(this.attribsStack_y8vpjm$_0[this.attribsStackIdx_q83m91$_0 = this.attribsStackIdx_q83m91$_0 - 1 | 0, this.attribsStackIdx_q83m91$_0]);
    this.applyAttributes();
  };
  KoolContext.prototype.applyAttributes = function () {
    this.checkIsGlThread();
    this.attribs_e3zeo6$_0.apply();
  };
  KoolContext.prototype.applyRenderingHints = function () {
    this.checkIsGlThread();
    var tmp$;
    tmp$ = this.scenes.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.onRenderingHintsChanged_aemszp$(this);
    }
    this.shaderMgr.onRenderingHintsChanged_cwprtu$(this);
  };
  function KoolContext$Attribs() {
    this.attribs_0 = mutableListOf([new Property('viewport', new KoolContext$Viewport(0, 0, 0, 0), KoolContext$Attribs$attribs$lambda), new Property('clearColor', new Color(0.05, 0.15, 0.25, 1.0), KoolContext$Attribs$attribs$lambda_0), new Property('cullFace', 1029, KoolContext$Attribs$attribs$lambda_1), new Property('depthFunc', 515, KoolContext$Attribs$attribs$lambda_2), new Property('isDepthTest', true, KoolContext$Attribs$attribs$lambda_3), new Property('isDepthMask', true, KoolContext$Attribs$attribs$lambda_4), new Property('isCullFace', true, KoolContext$Attribs$attribs$lambda_5), new Property('isBlend', true, KoolContext$Attribs$attribs$lambda_6), new Property('lineWidth', 1.0, KoolContext$Attribs$attribs$lambda_7)]);
  }
  KoolContext$Attribs.prototype.get_ytbaoo$ = function (name) {
    var tmp$;
    tmp$ = this.attribs_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      var tmp$_0;
      if (equals(this.attribs_0.get_za3lpa$(i).name, name)) {
        return Kotlin.isType(tmp$_0 = this.attribs_0.get_za3lpa$(i), Property) ? tmp$_0 : throwCCE();
      }
    }
    throw RuntimeException_init('Attribute not found: ' + name);
  };
  KoolContext$Attribs.prototype.apply = function () {
    var tmp$;
    tmp$ = this.attribs_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.attribs_0.get_za3lpa$(i).applyIfChanged();
    }
  };
  KoolContext$Attribs.prototype.set_td6xi8$ = function (other) {
    var tmp$;
    tmp$ = this.attribs_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.attribs_0.get_za3lpa$(i).copy_lshn67$(other.attribs_0.get_za3lpa$(i), false);
    }
  };
  function KoolContext$Attribs$attribs$lambda($receiver) {
    var dimen = $receiver.clear;
    glViewport(dimen.x, dimen.y, dimen.width, dimen.height);
    return Unit;
  }
  function KoolContext$Attribs$attribs$lambda_0($receiver) {
    var color = $receiver.clear;
    glClearColor(color.r, color.g, color.b, color.a);
    return Unit;
  }
  function KoolContext$Attribs$attribs$lambda_1($receiver) {
    glCullFace($receiver.clear);
    return Unit;
  }
  function KoolContext$Attribs$attribs$lambda_2($receiver) {
    glDepthFunc($receiver.clear);
    return Unit;
  }
  function KoolContext$Attribs$attribs$lambda_3($receiver) {
    if ($receiver.clear) {
      glEnable(2929);
    }
     else {
      glDisable(2929);
    }
    return Unit;
  }
  function KoolContext$Attribs$attribs$lambda_4($receiver) {
    glDepthMask($receiver.clear);
    return Unit;
  }
  function KoolContext$Attribs$attribs$lambda_5($receiver) {
    if ($receiver.clear) {
      glEnable(2884);
    }
     else {
      glDisable(2884);
    }
    return Unit;
  }
  function KoolContext$Attribs$attribs$lambda_6($receiver) {
    if ($receiver.clear) {
      glEnable(3042);
      glBlendFunc(1, 771);
    }
     else {
      glDisable(3042);
    }
    return Unit;
  }
  function KoolContext$Attribs$attribs$lambda_7($receiver) {
    glLineWidth($receiver.clear);
    return Unit;
  }
  KoolContext$Attribs.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Attribs',
    interfaces: []
  };
  function KoolContext$Viewport(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
  Object.defineProperty(KoolContext$Viewport.prototype, 'aspectRatio', {
    get: function () {
      return this.width / this.height;
    }
  });
  KoolContext$Viewport.prototype.isInViewport_dleff0$ = function (x, y) {
    return x >= this.x && x < (this.x + this.width | 0) && y >= this.y && y < (this.y + this.height | 0);
  };
  KoolContext$Viewport.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Viewport',
    interfaces: []
  };
  KoolContext$Viewport.prototype.component1 = function () {
    return this.x;
  };
  KoolContext$Viewport.prototype.component2 = function () {
    return this.y;
  };
  KoolContext$Viewport.prototype.component3 = function () {
    return this.width;
  };
  KoolContext$Viewport.prototype.component4 = function () {
    return this.height;
  };
  KoolContext$Viewport.prototype.copy_tjonv8$ = function (x, y, width, height) {
    return new KoolContext$Viewport(x === void 0 ? this.x : x, y === void 0 ? this.y : y, width === void 0 ? this.width : width, height === void 0 ? this.height : height);
  };
  KoolContext$Viewport.prototype.toString = function () {
    return 'Viewport(x=' + Kotlin.toString(this.x) + (', y=' + Kotlin.toString(this.y)) + (', width=' + Kotlin.toString(this.width)) + (', height=' + Kotlin.toString(this.height)) + ')';
  };
  KoolContext$Viewport.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.x) | 0;
    result = result * 31 + Kotlin.hashCode(this.y) | 0;
    result = result * 31 + Kotlin.hashCode(this.width) | 0;
    result = result * 31 + Kotlin.hashCode(this.height) | 0;
    return result;
  };
  KoolContext$Viewport.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.x, other.x) && Kotlin.equals(this.y, other.y) && Kotlin.equals(this.width, other.width) && Kotlin.equals(this.height, other.height)))));
  };
  KoolContext.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KoolContext',
    interfaces: []
  };
  function RenderPass(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function RenderPass_initFields() {
    RenderPass_initFields = function () {
    };
    RenderPass$SHADOW_instance = new RenderPass('SHADOW', 0);
    RenderPass$SCREEN_instance = new RenderPass('SCREEN', 1);
  }
  var RenderPass$SHADOW_instance;
  function RenderPass$SHADOW_getInstance() {
    RenderPass_initFields();
    return RenderPass$SHADOW_instance;
  }
  var RenderPass$SCREEN_instance;
  function RenderPass$SCREEN_getInstance() {
    RenderPass_initFields();
    return RenderPass$SCREEN_instance;
  }
  RenderPass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RenderPass',
    interfaces: [Enum]
  };
  function RenderPass$values() {
    return [RenderPass$SHADOW_getInstance(), RenderPass$SCREEN_getInstance()];
  }
  RenderPass.values = RenderPass$values;
  function RenderPass$valueOf(name) {
    switch (name) {
      case 'SHADOW':
        return RenderPass$SHADOW_getInstance();
      case 'SCREEN':
        return RenderPass$SCREEN_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.RenderPass.' + name);
    }
  }
  RenderPass.valueOf_61zpoe$ = RenderPass$valueOf;
  function KoolException(message, cause) {
    Exception.call(this, message, cause);
    this.name = 'KoolException';
  }
  KoolException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KoolException',
    interfaces: [Exception]
  };
  function KoolException_init(message, $this) {
    $this = $this || Object.create(KoolException.prototype);
    KoolException.call($this, message, null);
    return $this;
  }
  function BSpline(degree, factory, copy, mix) {
    this.degree = degree;
    this.factory_o8y0vc$_0 = factory;
    this.copy_1qqihf$_0 = copy;
    this.mix_rjp6wa$_0 = mix;
    this.ctrlPoints = ArrayList_init_0();
    this.knots_ks2m93$_0 = ArrayList_init_0();
    this.d_c5f19u$_0 = ArrayList_init_0();
  }
  BSpline.prototype.addInterpolationEndpoints = function () {
    var tmp$;
    tmp$ = this.degree;
    for (var i = 0; i < tmp$; i++) {
      this.ctrlPoints.add_wxm5ur$(0, first(this.ctrlPoints));
      var $receiver = this.ctrlPoints;
      var element = last(this.ctrlPoints);
      $receiver.add_11rb$(element);
    }
  };
  BSpline.prototype.evaluate_f6p79m$ = function (x, result) {
    if (x <= 0.0)
      this.copy_1qqihf$_0(first(this.ctrlPoints), result);
    else if (x >= 1.0)
      this.copy_1qqihf$_0(last(this.ctrlPoints), result);
    else {
      this.checkTemps_dp4s6j$_0();
      var xx = this.degree + x * (this.ctrlPoints.size - (this.degree * 2 | 0) + 1 | 0);
      this.deBoor_47z15v$_0(numberToInt(xx), xx, result);
    }
    return result;
  };
  BSpline.prototype.deBoor_47z15v$_0 = function (k, t, result) {
    var tmp$, tmp$_0;
    var min = this.degree;
    var max = this.ctrlPoints.size - 1 | 0;
    var clamp$result;
    if (k < min) {
      clamp$result = min;
    }
     else if (k > max) {
      clamp$result = max;
    }
     else {
      clamp$result = k;
    }
    var kk = clamp$result;
    tmp$ = this.degree;
    for (var j = 0; j <= tmp$; j++) {
      this.copy_1qqihf$_0(this.ctrlPoints.get_za3lpa$(j + kk - this.degree | 0), this.d_c5f19u$_0.get_za3lpa$(j));
    }
    tmp$_0 = this.degree;
    for (var r = 1; r <= tmp$_0; r++) {
      for (var j_0 = this.degree; j_0 >= r; j_0--) {
        var alpha = (t - this.knots_ks2m93$_0.get_za3lpa$(j_0 + kk - this.degree | 0)) / (this.knots_ks2m93$_0.get_za3lpa$(j_0 + 1 + kk - r | 0) - this.knots_ks2m93$_0.get_za3lpa$(j_0 + kk - this.degree | 0));
        this.mix_rjp6wa$_0(1.0 - alpha, this.d_c5f19u$_0.get_za3lpa$(j_0 - 1 | 0), alpha, this.d_c5f19u$_0.get_za3lpa$(j_0), this.d_c5f19u$_0.get_za3lpa$(j_0));
      }
    }
    this.copy_1qqihf$_0(this.d_c5f19u$_0.get_za3lpa$(this.degree), result);
  };
  BSpline.prototype.checkTemps_dp4s6j$_0 = function () {
    var tmp$, tmp$_0;
    if (this.knots_ks2m93$_0.size !== (this.ctrlPoints.size + this.degree | 0)) {
      this.knots_ks2m93$_0.clear();
      tmp$ = this.ctrlPoints.size + this.degree | 0;
      for (var i = 0; i < tmp$; i++) {
        this.knots_ks2m93$_0.add_11rb$(i);
      }
    }
    if (this.d_c5f19u$_0.size !== (this.degree + 1 | 0)) {
      this.d_c5f19u$_0.clear();
      tmp$_0 = this.degree;
      for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
        var $receiver = this.d_c5f19u$_0;
        var element = this.factory_o8y0vc$_0();
        $receiver.add_11rb$(element);
      }
    }
  };
  BSpline.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BSpline',
    interfaces: []
  };
  function BSplineVec2f(degree) {
    BSpline.call(this, degree, BSplineVec2f_init$lambda, BSplineVec2f_init$lambda_0, BSplineVec2f_init$lambda_1);
  }
  function BSplineVec2f_init$lambda() {
    return MutableVec2f_init();
  }
  function BSplineVec2f_init$lambda_0(src, dst) {
    dst.set_czzhjp$(src);
    return Unit;
  }
  function BSplineVec2f_init$lambda_1(w0, p0, w1, p1, result) {
    result.x = p0.x * w0 + p1.x * w1;
    result.y = p0.y * w0 + p1.y * w1;
    return Unit;
  }
  BSplineVec2f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BSplineVec2f',
    interfaces: [BSpline]
  };
  function BSplineVec3f(degree) {
    BSpline.call(this, degree, BSplineVec3f_init$lambda, BSplineVec3f_init$lambda_0, BSplineVec3f_init$lambda_1);
  }
  function BSplineVec3f_init$lambda() {
    return MutableVec3f_init();
  }
  function BSplineVec3f_init$lambda_0(src, dst) {
    dst.set_czzhiu$(src);
    return Unit;
  }
  function BSplineVec3f_init$lambda_1(w0, p0, w1, p1, result) {
    result.x = p0.x * w0 + p1.x * w1;
    result.y = p0.y * w0 + p1.y * w1;
    result.z = p0.z * w0 + p1.z * w1;
    return Unit;
  }
  BSplineVec3f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BSplineVec3f',
    interfaces: [BSpline]
  };
  function Mat3f() {
    Mat3f$Companion_getInstance();
    this.matrix = new Float32Array(9);
    this.setIdentity();
  }
  Mat3f.prototype.rotate_7b5o5w$ = function (angleDeg, axX, axY, axZ) {
    var aX = axX;
    var aY = axY;
    var aZ = axZ;
    var x = aX * aX + aY * aY + aZ * aZ;
    var len = Math_0.sqrt(x);
    var $receiver = 1.0 - len;
    var eps;
    eps = package$math.FUZZY_EQ_D;
    if (!(Math_0.abs($receiver) <= eps)) {
      var recipLen = 1.0 / len;
      aX *= recipLen;
      aY *= recipLen;
      aZ *= recipLen;
    }
    var ang = angleDeg * (math.PI / 180.0);
    var s = Math_0.sin(ang);
    var c = Math_0.cos(ang);
    var nc = 1.0 - c;
    var xy = aX * aY;
    var yz = aY * aZ;
    var zx = aZ * aX;
    var xs = aX * s;
    var ys = aY * s;
    var zs = aZ * s;
    this.set_24o109$(0, aX * aX * nc + c);
    this.set_24o109$(3, xy * nc - zs);
    this.set_24o109$(6, zx * nc + ys);
    this.set_24o109$(1, xy * nc + zs);
    this.set_24o109$(4, aY * aY * nc + c);
    this.set_24o109$(7, yz * nc - xs);
    this.set_24o109$(2, zx * nc - ys);
    this.set_24o109$(5, yz * nc + xs);
    this.set_24o109$(8, aZ * aZ * nc + c);
    return this;
  };
  Mat3f.prototype.rotate_ad55pp$ = function (angleDeg, axis) {
    return this.rotate_7b5o5w$(angleDeg, axis.x, axis.y, axis.z);
  };
  Mat3f.prototype.rotate_c240ly$ = function (angleDeg, axX, axY, axZ, result) {
    result.set_d4zu7e$(this);
    result.rotate_7b5o5w$(angleDeg, axX, axY, axZ);
    return result;
  };
  Mat3f.prototype.rotate_phvhih$ = function (angleDeg, axis, result) {
    return this.rotate_c240ly$(angleDeg, axis.x, axis.y, axis.z, result);
  };
  Mat3f.prototype.transpose = function () {
    var d = this.get_za3lpa$(1);
    this.set_24o109$(1, this.get_za3lpa$(3));
    this.set_24o109$(3, d);
    d = this.get_za3lpa$(2);
    this.set_24o109$(2, this.get_za3lpa$(6));
    this.set_24o109$(6, d);
    d = this.get_za3lpa$(5);
    this.set_24o109$(5, this.get_za3lpa$(7));
    this.set_24o109$(7, d);
    return this;
  };
  Mat3f.prototype.transpose_d4zu6j$ = function (result) {
    result.set_24o109$(0, this.get_za3lpa$(0));
    result.set_24o109$(1, this.get_za3lpa$(3));
    result.set_24o109$(2, this.get_za3lpa$(6));
    result.set_24o109$(3, this.get_za3lpa$(1));
    result.set_24o109$(4, this.get_za3lpa$(4));
    result.set_24o109$(5, this.get_za3lpa$(7));
    result.set_24o109$(6, this.get_za3lpa$(2));
    result.set_24o109$(7, this.get_za3lpa$(5));
    result.set_24o109$(8, this.get_za3lpa$(8));
    return result;
  };
  Mat3f.prototype.invert = function () {
    Mat3f$Companion_getInstance().tmpMat_0;
    var $receiver = this.invert_d4zu7e$(Mat3f$Companion_getInstance().tmpMat_0);
    if ($receiver)
      this.set_d4zu7e$(Mat3f$Companion_getInstance().tmpMat_0);
    return $receiver;
  };
  Mat3f.prototype.invert_d4zu7e$ = function (result) {
    var tmp$;
    var det = 0.0;
    for (var i = 0; i <= 2; i++) {
      det += this.get_za3lpa$(i) * (this.get_za3lpa$(3 + (i + 1 | 0) % 3 | 0) * this.get_za3lpa$(6 + (i + 2 | 0) % 3 | 0) - this.get_za3lpa$(3 + (i + 2 | 0) % 3 | 0) * this.get_za3lpa$(6 + (i + 1 | 0) % 3 | 0));
    }
    if (det > 0.0) {
      det = 1.0 / det;
      for (var j = 0; j <= 2; j++) {
        for (var i_0 = 0; i_0 <= 2; i_0++) {
          result.set_24o109$((j * 3 | 0) + i_0 | 0, (this.get_za3lpa$(((i_0 + 1 | 0) % 3 * 3 | 0) + (j + 1 | 0) % 3 | 0) * this.get_za3lpa$(((i_0 + 2 | 0) % 3 * 3 | 0) + (j + 2 | 0) % 3 | 0) - this.get_za3lpa$(((i_0 + 1 | 0) % 3 * 3 | 0) + (j + 2 | 0) % 3 | 0) * this.get_za3lpa$(((i_0 + 2 | 0) % 3 * 3 | 0) + (j + 1 | 0) % 3 | 0)) * det);
        }
      }
      tmp$ = true;
    }
     else {
      tmp$ = false;
    }
    return tmp$;
  };
  Mat3f.prototype.transform_5s4mqq$ = function (vec) {
    var x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2);
    var y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2);
    var z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2);
    return vec.set_y2kzbl$(x, y, z);
  };
  Mat3f.prototype.transform_2gj7b4$ = function (vec, result) {
    result.x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2);
    result.y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2);
    result.z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2);
    return result;
  };
  Mat3f.prototype.mul_d4zu7e$ = function (other) {
    Mat3f$Companion_getInstance().tmpMat_0;
    this.mul_4w76o0$(other, Mat3f$Companion_getInstance().tmpMat_0);
    return this.set_d4zu7e$(Mat3f$Companion_getInstance().tmpMat_0);
  };
  Mat3f.prototype.mul_4w76o0$ = function (other, result) {
    for (var i = 0; i <= 2; i++) {
      for (var j = 0; j <= 2; j++) {
        var x = 0.0;
        for (var k = 0; k <= 2; k++) {
          x += this.get_za3lpa$(j + (k * 3 | 0) | 0) * other.get_za3lpa$((i * 3 | 0) + k | 0);
        }
        result.set_24o109$((i * 3 | 0) + j | 0, x);
      }
    }
    return result;
  };
  Mat3f.prototype.scale_y2kzbl$ = function (sx, sy, sz) {
    for (var i = 0; i <= 2; i++) {
      this.matrix[i] = this.matrix[i] * sx;
      this.matrix[3 + i | 0] = this.matrix[3 + i | 0] * sy;
      this.matrix[6 + i | 0] = this.matrix[6 + i | 0] * sz;
    }
    return this;
  };
  Mat3f.prototype.scale_czzhiu$ = function (scale) {
    return this.scale_y2kzbl$(scale.x, scale.y, scale.z);
  };
  Mat3f.prototype.scale_g84k61$ = function (sx, sy, sz, result) {
    for (var i = 0; i <= 2; i++) {
      result.matrix[i] = this.matrix[i] * sx;
      result.matrix[3 + i | 0] = this.matrix[3 + i | 0] * sy;
      result.matrix[6 + i | 0] = this.matrix[6 + i | 0] * sz;
    }
    return result;
  };
  Mat3f.prototype.set_d4zu7e$ = function (other) {
    for (var i = 0; i <= 8; i++) {
      this.set_24o109$(i, other.get_za3lpa$(i));
    }
    return this;
  };
  Mat3f.prototype.set_hcyabg$ = function (floats) {
    for (var i = 0; i <= 8; i++) {
      this.set_24o109$(i, floats.get_za3lpa$(i));
    }
  };
  Mat3f.prototype.setIdentity = function () {
    for (var i = 1; i <= 8; i++) {
      this.set_24o109$(i, 0.0);
    }
    for (var i_0 = 0; i_0 <= 8; i_0 += 4) {
      this.set_24o109$(i_0, 1.0);
    }
    return this;
  };
  Mat3f.prototype.setRotate_7b5o5w$ = function (rotA, axX, axY, axZ) {
    this.setIdentity();
    this.rotate_7b5o5w$(rotA, axX, axY, axZ);
    return this;
  };
  Mat3f.prototype.setRotate_czzhhz$ = function (quaternion) {
    var r = quaternion.w;
    var i = quaternion.x;
    var j = quaternion.y;
    var k = quaternion.z;
    var x = r * r + i * i + j * j + k * k;
    var s = Math_0.sqrt(x);
    s = 1.0 / (s * s);
    this.set_n0b4r3$(0, 0, 1 - 2 * s * (j * j + k * k));
    this.set_n0b4r3$(0, 1, 2 * s * (i * j - k * r));
    this.set_n0b4r3$(0, 2, 2 * s * (i * k + j * r));
    this.set_n0b4r3$(1, 0, 2 * s * (i * j + k * r));
    this.set_n0b4r3$(1, 1, 1 - 2 * s * (i * i + k * k));
    this.set_n0b4r3$(1, 2, 2 * s * (j * k - i * r));
    this.set_n0b4r3$(2, 0, 2 * s * (i * k - j * r));
    this.set_n0b4r3$(2, 1, 2 * s * (j * k + i * r));
    this.set_n0b4r3$(2, 2, 1 - 2 * s * (i * i + j * j));
    return this;
  };
  Mat3f.prototype.getRotation_5s4mpv$ = function (result) {
    var tmp$;
    var trace = this.get_vux9f0$(0, 0) + this.get_vux9f0$(1, 1) + this.get_vux9f0$(2, 2);
    if (trace > 0.0) {
      var x = trace + 1.0;
      var s = Math_0.sqrt(x);
      result.w = s * 0.5;
      s = 0.5 / s;
      result.x = (this.get_vux9f0$(2, 1) - this.get_vux9f0$(1, 2)) * s;
      result.y = (this.get_vux9f0$(0, 2) - this.get_vux9f0$(2, 0)) * s;
      result.z = (this.get_vux9f0$(1, 0) - this.get_vux9f0$(0, 1)) * s;
    }
     else {
      if (this.get_vux9f0$(0, 0) < this.get_vux9f0$(1, 1)) {
        if (this.get_vux9f0$(1, 1) < this.get_vux9f0$(2, 2)) {
          tmp$ = 2;
        }
         else {
          tmp$ = 1;
        }
      }
       else {
        if (this.get_vux9f0$(0, 0) < this.get_vux9f0$(2, 2)) {
          tmp$ = 2;
        }
         else {
          tmp$ = 0;
        }
      }
      var i = tmp$;
      var j = (i + 1 | 0) % 3;
      var k = (i + 2 | 0) % 3;
      var x_0 = this.get_vux9f0$(i, i) - this.get_vux9f0$(j, j) - this.get_vux9f0$(k, k) + 1.0;
      var s_0 = Math_0.sqrt(x_0);
      result.set_24o109$(i, s_0 * 0.5);
      s_0 = 0.5 / s_0;
      result.w = (this.get_vux9f0$(k, j) - this.get_vux9f0$(j, k)) * s_0;
      result.set_24o109$(j, (this.get_vux9f0$(j, i) + this.get_vux9f0$(i, j)) * s_0);
      result.set_24o109$(k, (this.get_vux9f0$(k, i) + this.get_vux9f0$(i, k)) * s_0);
    }
    return result;
  };
  Mat3f.prototype.get_za3lpa$ = function (i) {
    return this.matrix[i];
  };
  Mat3f.prototype.get_vux9f0$ = function (row, col) {
    return this.matrix[(col * 3 | 0) + row | 0];
  };
  Mat3f.prototype.set_24o109$ = function (i, value) {
    this.matrix[i] = value;
  };
  Mat3f.prototype.set_n0b4r3$ = function (row, col, value) {
    this.matrix[(col * 3 | 0) + row | 0] = value;
  };
  Mat3f.prototype.setColVec_ky00qo$ = function (col, vec) {
    this.set_n0b4r3$(0, col, vec.x);
    this.set_n0b4r3$(1, col, vec.y);
    this.set_n0b4r3$(2, col, vec.z);
  };
  Mat3f.prototype.getColVec_8irwuw$ = function (col, result) {
    result.x = this.get_vux9f0$(0, col);
    result.y = this.get_vux9f0$(1, col);
    result.z = this.get_vux9f0$(2, col);
    return result;
  };
  Mat3f.prototype.toBuffer_he122g$ = function (buffer) {
    buffer.put_kgymra$(this.matrix, 0, 9);
    buffer.flip();
    return buffer;
  };
  function Mat3f$Companion() {
    Mat3f$Companion_instance = this;
    this.tmpMat_0 = new Mat3f();
  }
  Mat3f$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Mat3f$Companion_instance = null;
  function Mat3f$Companion_getInstance() {
    if (Mat3f$Companion_instance === null) {
      new Mat3f$Companion();
    }
    return Mat3f$Companion_instance;
  }
  Mat3f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Mat3f',
    interfaces: []
  };
  function Mat4d() {
    Mat4d$Companion_getInstance();
    this.matrix_ntz8bm$_0 = new Float64Array(16);
    this.offset_7ocvpo$_0 = 0;
    this.setIdentity();
  }
  Object.defineProperty(Mat4d.prototype, 'matrix', {
    get: function () {
      return this.matrix_ntz8bm$_0;
    },
    set: function (matrix) {
      this.matrix_ntz8bm$_0 = matrix;
    }
  });
  Object.defineProperty(Mat4d.prototype, 'offset', {
    get: function () {
      return this.offset_7ocvpo$_0;
    },
    set: function (offset) {
      this.offset_7ocvpo$_0 = offset;
    }
  });
  Mat4d.prototype.translate_yvo9jy$ = function (tx, ty, tz) {
    for (var i = 0; i <= 3; i++) {
      var mi = this.offset + i | 0;
      this.matrix[12 + mi | 0] = this.matrix[12 + mi | 0] + (this.matrix[mi] * tx + this.matrix[4 + mi | 0] * ty + this.matrix[8 + mi | 0] * tz);
    }
    return this;
  };
  Mat4d.prototype.translate_czzhiw$ = function (t) {
    return this.translate_yvo9jy$(t.x, t.y, t.z);
  };
  Mat4d.prototype.translate_p4gs15$ = function (tx, ty, tz, result) {
    for (var i = 0; i <= 11; i++) {
      result.matrix[result.offset + i | 0] = this.matrix[this.offset + i | 0];
    }
    for (var i_0 = 0; i_0 <= 3; i_0++) {
      var mi = this.offset + i_0 | 0;
      result.matrix[result.offset + 12 + i_0 | 0] = this.matrix[mi] * tx + this.matrix[4 + mi | 0] * ty + this.matrix[8 + mi | 0] * tz + this.matrix[12 + mi | 0];
    }
    return result;
  };
  Mat4d.prototype.rotate_6y0v78$ = function (angleDeg, axX, axY, axZ) {
    Mat4d$Companion_getInstance().tmpMatLock_0;
    Mat4d$Companion_getInstance().tmpMatA_0.setRotate_6y0v78$(angleDeg, axX, axY, axZ);
    return this.set_d4zu6l$(this.mul_u47j3u$(Mat4d$Companion_getInstance().tmpMatA_0, Mat4d$Companion_getInstance().tmpMatB_0));
  };
  Mat4d.prototype.rotate_5820x2$ = function (angleDeg, axis) {
    return this.rotate_6y0v78$(angleDeg, axis.x, axis.y, axis.z);
  };
  Mat4d.prototype.rotate_app323$ = function (angleDeg, axX, axY, axZ, result) {
    Mat4d$Companion_getInstance().tmpMatLock_0;
    Mat4d$Companion_getInstance().tmpMatA_0.setRotate_6y0v78$(angleDeg, axX, axY, axZ);
    return this.mul_u47j3u$(Mat4d$Companion_getInstance().tmpMatA_0, result);
  };
  Mat4d.prototype.rotate_wwd6w1$ = function (angleDeg, axis, result) {
    return this.rotate_app323$(angleDeg, axis.x, axis.y, axis.z, result);
  };
  Mat4d.prototype.scale_yvo9jy$ = function (sx, sy, sz) {
    for (var i = 0; i <= 3; i++) {
      var mi = this.offset + i | 0;
      this.matrix[mi] = this.matrix[mi] * sx;
      this.matrix[4 + mi | 0] = this.matrix[4 + mi | 0] * sy;
      this.matrix[8 + mi | 0] = this.matrix[8 + mi | 0] * sz;
    }
    return this;
  };
  Mat4d.prototype.scale_czzhiw$ = function (scale) {
    return this.scale_yvo9jy$(scale.x, scale.y, scale.z);
  };
  Mat4d.prototype.scale_p4gs15$ = function (sx, sy, sz, result) {
    for (var i = 0; i <= 3; i++) {
      var smi = result.offset + i | 0;
      var mi = this.offset + i | 0;
      result.matrix[smi] = this.matrix[mi] * sx;
      result.matrix[4 + smi | 0] = this.matrix[4 + mi | 0] * sy;
      result.matrix[8 + smi | 0] = this.matrix[8 + mi | 0] * sz;
      result.matrix[12 + smi | 0] = this.matrix[12 + mi | 0];
    }
    return result;
  };
  Mat4d.prototype.transpose = function () {
    Mat4d$Companion_getInstance().tmpMatLock_0;
    return this.set_d4zu6l$(this.transpose_d4zu6l$(Mat4d$Companion_getInstance().tmpMatA_0));
  };
  Mat4d.prototype.transpose_d4zu6l$ = function (result) {
    for (var i = 0; i <= 3; i++) {
      var mBase = (i * 4 | 0) + this.offset | 0;
      result.matrix[i + result.offset | 0] = this.matrix[mBase];
      result.matrix[i + 4 + result.offset | 0] = this.matrix[mBase + 1 | 0];
      result.matrix[i + 8 + result.offset | 0] = this.matrix[mBase + 2 | 0];
      result.matrix[i + 12 + result.offset | 0] = this.matrix[mBase + 3 | 0];
    }
    return result;
  };
  Mat4d.prototype.invert_14dthe$ = function (eps) {
    if (eps === void 0)
      eps = 0.0;
    Mat4d$Companion_getInstance().tmpMatLock_0;
    var $receiver = this.invert_23yxad$(Mat4d$Companion_getInstance().tmpMatA_0, eps);
    if ($receiver)
      this.set_d4zu6l$(Mat4d$Companion_getInstance().tmpMatA_0);
    return $receiver;
  };
  Mat4d.prototype.invert_23yxad$ = function (result, eps) {
    if (eps === void 0)
      eps = 0.0;
    var src0 = this.matrix[this.offset + 0 | 0];
    var src4 = this.matrix[this.offset + 1 | 0];
    var src8 = this.matrix[this.offset + 2 | 0];
    var src12 = this.matrix[this.offset + 3 | 0];
    var src1 = this.matrix[this.offset + 4 | 0];
    var src5 = this.matrix[this.offset + 5 | 0];
    var src9 = this.matrix[this.offset + 6 | 0];
    var src13 = this.matrix[this.offset + 7 | 0];
    var src2 = this.matrix[this.offset + 8 | 0];
    var src6 = this.matrix[this.offset + 9 | 0];
    var src10 = this.matrix[this.offset + 10 | 0];
    var src14 = this.matrix[this.offset + 11 | 0];
    var src3 = this.matrix[this.offset + 12 | 0];
    var src7 = this.matrix[this.offset + 13 | 0];
    var src11 = this.matrix[this.offset + 14 | 0];
    var src15 = this.matrix[this.offset + 15 | 0];
    var atmp0 = src10 * src15;
    var atmp1 = src11 * src14;
    var atmp2 = src9 * src15;
    var atmp3 = src11 * src13;
    var atmp4 = src9 * src14;
    var atmp5 = src10 * src13;
    var atmp6 = src8 * src15;
    var atmp7 = src11 * src12;
    var atmp8 = src8 * src14;
    var atmp9 = src10 * src12;
    var atmp10 = src8 * src13;
    var atmp11 = src9 * src12;
    var dst0 = atmp0 * src5 + atmp3 * src6 + atmp4 * src7 - (atmp1 * src5 + atmp2 * src6 + atmp5 * src7);
    var dst1 = atmp1 * src4 + atmp6 * src6 + atmp9 * src7 - (atmp0 * src4 + atmp7 * src6 + atmp8 * src7);
    var dst2 = atmp2 * src4 + atmp7 * src5 + atmp10 * src7 - (atmp3 * src4 + atmp6 * src5 + atmp11 * src7);
    var dst3 = atmp5 * src4 + atmp8 * src5 + atmp11 * src6 - (atmp4 * src4 + atmp9 * src5 + atmp10 * src6);
    var dst4 = atmp1 * src1 + atmp2 * src2 + atmp5 * src3 - (atmp0 * src1 + atmp3 * src2 + atmp4 * src3);
    var dst5 = atmp0 * src0 + atmp7 * src2 + atmp8 * src3 - (atmp1 * src0 + atmp6 * src2 + atmp9 * src3);
    var dst6 = atmp3 * src0 + atmp6 * src1 + atmp11 * src3 - (atmp2 * src0 + atmp7 * src1 + atmp10 * src3);
    var dst7 = atmp4 * src0 + atmp9 * src1 + atmp10 * src2 - (atmp5 * src0 + atmp8 * src1 + atmp11 * src2);
    var btmp0 = src2 * src7;
    var btmp1 = src3 * src6;
    var btmp2 = src1 * src7;
    var btmp3 = src3 * src5;
    var btmp4 = src1 * src6;
    var btmp5 = src2 * src5;
    var btmp6 = src0 * src7;
    var btmp7 = src3 * src4;
    var btmp8 = src0 * src6;
    var btmp9 = src2 * src4;
    var btmp10 = src0 * src5;
    var btmp11 = src1 * src4;
    var dst8 = btmp0 * src13 + btmp3 * src14 + btmp4 * src15 - (btmp1 * src13 + btmp2 * src14 + btmp5 * src15);
    var dst9 = btmp1 * src12 + btmp6 * src14 + btmp9 * src15 - (btmp0 * src12 + btmp7 * src14 + btmp8 * src15);
    var dst10 = btmp2 * src12 + btmp7 * src13 + btmp10 * src15 - (btmp3 * src12 + btmp6 * src13 + btmp11 * src15);
    var dst11 = btmp5 * src12 + btmp8 * src13 + btmp11 * src14 - (btmp4 * src12 + btmp9 * src13 + btmp10 * src14);
    var dst12 = btmp2 * src10 + btmp5 * src11 + btmp1 * src9 - (btmp4 * src11 + btmp0 * src9 + btmp3 * src10);
    var dst13 = btmp8 * src11 + btmp0 * src8 + btmp7 * src10 - (btmp6 * src10 + btmp9 * src11 + btmp1 * src8);
    var dst14 = btmp6 * src9 + btmp11 * src11 + btmp3 * src8 - (btmp10 * src11 + btmp2 * src8 + btmp7 * src9);
    var dst15 = btmp10 * src10 + btmp4 * src8 + btmp9 * src9 - (btmp8 * src9 + btmp11 * src10 + btmp5 * src8);
    var det = src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;
    if (Math_0.abs(det) <= eps) {
      return false;
    }
    var invdet = 1.0 / det;
    result.matrix[result.offset] = dst0 * invdet;
    result.matrix[1 + result.offset | 0] = dst1 * invdet;
    result.matrix[2 + result.offset | 0] = dst2 * invdet;
    result.matrix[3 + result.offset | 0] = dst3 * invdet;
    result.matrix[4 + result.offset | 0] = dst4 * invdet;
    result.matrix[5 + result.offset | 0] = dst5 * invdet;
    result.matrix[6 + result.offset | 0] = dst6 * invdet;
    result.matrix[7 + result.offset | 0] = dst7 * invdet;
    result.matrix[8 + result.offset | 0] = dst8 * invdet;
    result.matrix[9 + result.offset | 0] = dst9 * invdet;
    result.matrix[10 + result.offset | 0] = dst10 * invdet;
    result.matrix[11 + result.offset | 0] = dst11 * invdet;
    result.matrix[12 + result.offset | 0] = dst12 * invdet;
    result.matrix[13 + result.offset | 0] = dst13 * invdet;
    result.matrix[14 + result.offset | 0] = dst14 * invdet;
    result.matrix[15 + result.offset | 0] = dst15 * invdet;
    return true;
  };
  Mat4d.prototype.transform_w1lst9$ = function (vec, w) {
    if (w === void 0)
      w = 1.0;
    var x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + w * this.get_vux9f0$(0, 3);
    var y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + w * this.get_vux9f0$(1, 3);
    var z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + w * this.get_vux9f0$(2, 3);
    return vec.set_y2kzbl$(x, y, z);
  };
  Mat4d.prototype.transform_a6wx89$ = function (vec, w, result) {
    if (w === void 0)
      w = 1.0;
    result.x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + w * this.get_vux9f0$(0, 3);
    result.y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + w * this.get_vux9f0$(1, 3);
    result.z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + w * this.get_vux9f0$(2, 3);
    return result;
  };
  Mat4d.prototype.transform_5s4mpv$ = function (vec) {
    var x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + vec.w * this.get_vux9f0$(0, 3);
    var y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + vec.w * this.get_vux9f0$(1, 3);
    var z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + vec.w * this.get_vux9f0$(2, 3);
    var w = vec.x * this.get_vux9f0$(3, 0) + vec.y * this.get_vux9f0$(3, 1) + vec.z * this.get_vux9f0$(3, 2) + vec.w * this.get_vux9f0$(3, 3);
    return vec.set_7b5o5w$(x, y, z, w);
  };
  Mat4d.prototype.transform_uzu8ww$ = function (vec, result) {
    result.x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + vec.w * this.get_vux9f0$(0, 3);
    result.y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + vec.w * this.get_vux9f0$(1, 3);
    result.z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + vec.w * this.get_vux9f0$(2, 3);
    result.w = vec.x * this.get_vux9f0$(3, 0) + vec.y * this.get_vux9f0$(3, 1) + vec.z * this.get_vux9f0$(3, 2) + vec.w * this.get_vux9f0$(3, 3);
    return result;
  };
  Mat4d.prototype.transform_j7uy7i$ = function (vec, w) {
    if (w === void 0)
      w = 1.0;
    var x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + w * this.get_vux9f0$(0, 3);
    var y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + w * this.get_vux9f0$(1, 3);
    var z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + w * this.get_vux9f0$(2, 3);
    return vec.set_yvo9jy$(x, y, z);
  };
  Mat4d.prototype.transform_3odno2$ = function (vec, w, result) {
    if (w === void 0)
      w = 1.0;
    result.x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + w * this.get_vux9f0$(0, 3);
    result.y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + w * this.get_vux9f0$(1, 3);
    result.z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + w * this.get_vux9f0$(2, 3);
    return result;
  };
  Mat4d.prototype.transform_5s4mpx$ = function (vec) {
    var x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + vec.w * this.get_vux9f0$(0, 3);
    var y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + vec.w * this.get_vux9f0$(1, 3);
    var z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + vec.w * this.get_vux9f0$(2, 3);
    var w = vec.x * this.get_vux9f0$(3, 0) + vec.y * this.get_vux9f0$(3, 1) + vec.z * this.get_vux9f0$(3, 2) + vec.w * this.get_vux9f0$(3, 3);
    return vec.set_6y0v78$(x, y, z, w);
  };
  Mat4d.prototype.transform_2x9ggw$ = function (vec, result) {
    result.x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + vec.w * this.get_vux9f0$(0, 3);
    result.y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + vec.w * this.get_vux9f0$(1, 3);
    result.z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + vec.w * this.get_vux9f0$(2, 3);
    result.w = vec.x * this.get_vux9f0$(3, 0) + vec.y * this.get_vux9f0$(3, 1) + vec.z * this.get_vux9f0$(3, 2) + vec.w * this.get_vux9f0$(3, 3);
    return result;
  };
  Mat4d.prototype.add_d4zu6l$ = function (other) {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = this.matrix[this.offset + i | 0] + other.matrix[other.offset + i | 0];
    }
    return this;
  };
  Mat4d.prototype.mul_d4zu6l$ = function (other) {
    Mat4d$Companion_getInstance().tmpMatLock_0;
    this.mul_u47j3u$(other, Mat4d$Companion_getInstance().tmpMatA_0);
    return this.set_d4zu6l$(Mat4d$Companion_getInstance().tmpMatA_0);
  };
  Mat4d.prototype.mul_u47j3u$ = function (other, result) {
    for (var i = 0; i <= 3; i++) {
      for (var j = 0; j <= 3; j++) {
        var x = 0.0;
        for (var k = 0; k <= 3; k++) {
          x += this.matrix[this.offset + j + (k * 4 | 0) | 0] * other.matrix[other.offset + (i * 4 | 0) + k | 0];
        }
        result.matrix[result.offset + (i * 4 | 0) + j | 0] = x;
      }
    }
    return result;
  };
  Mat4d.prototype.set_d4zu6l$ = function (other) {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = other.matrix[other.offset + i | 0];
    }
    return this;
  };
  Mat4d.prototype.set_d4zu6j$ = function (other) {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = other.matrix[other.offset + i | 0];
    }
    return this;
  };
  Mat4d.prototype.set_d3e2cz$ = function (doubles) {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = doubles.get_za3lpa$(i);
    }
    return this;
  };
  Mat4d.prototype.setZero = function () {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = 0.0;
    }
    return this;
  };
  Mat4d.prototype.setIdentity = function () {
    for (var i = 1; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = 0.0;
    }
    this.matrix[this.offset] = 1.0;
    this.matrix[this.offset + 5 | 0] = 1.0;
    this.matrix[this.offset + 10 | 0] = 1.0;
    this.matrix[this.offset + 15 | 0] = 1.0;
    return this;
  };
  Mat4d.prototype.setRotate_6y0v78$ = function (rotA, axX, axY, axZ) {
    var a = rotA * package$math.DEG_2_RAD;
    var x = axX;
    var y = axY;
    var z = axZ;
    this.matrix[this.offset + 3 | 0] = 0.0;
    this.matrix[this.offset + 7 | 0] = 0.0;
    this.matrix[this.offset + 11 | 0] = 0.0;
    this.matrix[this.offset + 12 | 0] = 0.0;
    this.matrix[this.offset + 13 | 0] = 0.0;
    this.matrix[this.offset + 14 | 0] = 0.0;
    this.matrix[this.offset + 15 | 0] = 1.0;
    var s = Math_0.sin(a);
    var c = Math_0.cos(a);
    if (1.0 === x && 0.0 === y && 0.0 === z) {
      this.matrix[this.offset + 5 | 0] = c;
      this.matrix[this.offset + 10 | 0] = c;
      this.matrix[this.offset + 6 | 0] = s;
      this.matrix[this.offset + 9 | 0] = -s;
      this.matrix[this.offset + 1 | 0] = 0.0;
      this.matrix[this.offset + 2 | 0] = 0.0;
      this.matrix[this.offset + 4 | 0] = 0.0;
      this.matrix[this.offset + 8 | 0] = 0.0;
      this.matrix[this.offset + 0 | 0] = 1.0;
    }
     else if (0.0 === x && 1.0 === y && 0.0 === z) {
      this.matrix[this.offset + 0 | 0] = c;
      this.matrix[this.offset + 10 | 0] = c;
      this.matrix[this.offset + 8 | 0] = s;
      this.matrix[this.offset + 2 | 0] = -s;
      this.matrix[this.offset + 1 | 0] = 0.0;
      this.matrix[this.offset + 4 | 0] = 0.0;
      this.matrix[this.offset + 6 | 0] = 0.0;
      this.matrix[this.offset + 9 | 0] = 0.0;
      this.matrix[this.offset + 5 | 0] = 1.0;
    }
     else if (0.0 === x && 0.0 === y && 1.0 === z) {
      this.matrix[this.offset + 0 | 0] = c;
      this.matrix[this.offset + 5 | 0] = c;
      this.matrix[this.offset + 1 | 0] = s;
      this.matrix[this.offset + 4 | 0] = -s;
      this.matrix[this.offset + 2 | 0] = 0.0;
      this.matrix[this.offset + 6 | 0] = 0.0;
      this.matrix[this.offset + 8 | 0] = 0.0;
      this.matrix[this.offset + 9 | 0] = 0.0;
      this.matrix[this.offset + 10 | 0] = 1.0;
    }
     else {
      var x_0 = x * x + y * y + z * z;
      var len = Math_0.sqrt(x_0);
      var eps;
      eps = package$math.FUZZY_EQ_D;
      var $receiver = len - 1.0;
      if (!(Math_0.abs($receiver) <= eps)) {
        var recipLen = 1.0 / len;
        x *= recipLen;
        y *= recipLen;
        z *= recipLen;
      }
      var nc = 1.0 - c;
      var xy = x * y;
      var yz = y * z;
      var zx = z * x;
      var xs = x * s;
      var ys = y * s;
      var zs = z * s;
      this.matrix[this.offset + 0 | 0] = x * x * nc + c;
      this.matrix[this.offset + 4 | 0] = xy * nc - zs;
      this.matrix[this.offset + 8 | 0] = zx * nc + ys;
      this.matrix[this.offset + 1 | 0] = xy * nc + zs;
      this.matrix[this.offset + 5 | 0] = y * y * nc + c;
      this.matrix[this.offset + 9 | 0] = yz * nc - xs;
      this.matrix[this.offset + 2 | 0] = zx * nc - ys;
      this.matrix[this.offset + 6 | 0] = yz * nc + xs;
      this.matrix[this.offset + 10 | 0] = z * z * nc + c;
    }
    return this;
  };
  Mat4d.prototype.setRotate_czzhi1$ = function (quaternion) {
    var r = quaternion.w;
    var i = quaternion.x;
    var j = quaternion.y;
    var k = quaternion.z;
    var x = r * r + i * i + j * j + k * k;
    var s = Math_0.sqrt(x);
    s = 1.0 / (s * s);
    this.set_224j3y$(0, 0, 1.0 - 2 * s * (j * j + k * k));
    this.set_224j3y$(0, 1, 2.0 * s * (i * j - k * r));
    this.set_224j3y$(0, 2, 2.0 * s * (i * k + j * r));
    this.set_224j3y$(0, 3, 0.0);
    this.set_224j3y$(1, 0, 2.0 * s * (i * j + k * r));
    this.set_224j3y$(1, 1, 1.0 - 2 * s * (i * i + k * k));
    this.set_224j3y$(1, 2, 2.0 * s * (j * k - i * r));
    this.set_224j3y$(1, 3, 0.0);
    this.set_224j3y$(2, 0, 2.0 * s * (i * k - j * r));
    this.set_224j3y$(2, 1, 2.0 * s * (j * k + i * r));
    this.set_224j3y$(2, 2, 1.0 - 2 * s * (i * i + j * j));
    this.set_224j3y$(2, 3, 0.0);
    this.set_224j3y$(3, 0, 0.0);
    this.set_224j3y$(3, 1, 0.0);
    this.set_224j3y$(3, 2, 0.0);
    this.set_224j3y$(3, 3, 1.0);
    return this;
  };
  Mat4d.prototype.setLookAt_8ro9c0$ = function (position, lookAt, up) {
    var fx = lookAt.x - position.x;
    var fy = lookAt.y - position.y;
    var fz = lookAt.z - position.z;
    var x = fx * fx + fy * fy + fz * fz;
    var rlf = 1.0 / Math_0.sqrt(x);
    fx *= rlf;
    fy *= rlf;
    fz *= rlf;
    var sx = fy * up.z - fz * up.y;
    var sy = fz * up.x - fx * up.z;
    var sz = fx * up.y - fy * up.x;
    var x_0 = sx * sx + sy * sy + sz * sz;
    var rls = 1.0 / Math_0.sqrt(x_0);
    sx *= rls;
    sy *= rls;
    sz *= rls;
    var ux = sy * fz - sz * fy;
    var uy = sz * fx - sx * fz;
    var uz = sx * fy - sy * fx;
    this.matrix[this.offset + 0 | 0] = sx;
    this.matrix[this.offset + 1 | 0] = ux;
    this.matrix[this.offset + 2 | 0] = -fx;
    this.matrix[this.offset + 3 | 0] = 0.0;
    this.matrix[this.offset + 4 | 0] = sy;
    this.matrix[this.offset + 5 | 0] = uy;
    this.matrix[this.offset + 6 | 0] = -fy;
    this.matrix[this.offset + 7 | 0] = 0.0;
    this.matrix[this.offset + 8 | 0] = sz;
    this.matrix[this.offset + 9 | 0] = uz;
    this.matrix[this.offset + 10 | 0] = -fz;
    this.matrix[this.offset + 11 | 0] = 0.0;
    this.matrix[this.offset + 12 | 0] = 0.0;
    this.matrix[this.offset + 13 | 0] = 0.0;
    this.matrix[this.offset + 14 | 0] = 0.0;
    this.matrix[this.offset + 15 | 0] = 1.0;
    return this.translate_yvo9jy$(-position.x, -position.y, -position.z);
  };
  Mat4d.prototype.setOrthographic_15yvbs$ = function (left, right, bottom, top, near, far) {
    if (left === right) {
      throw IllegalArgumentException_init('left == right');
    }
    if (bottom === top) {
      throw IllegalArgumentException_init('bottom == top');
    }
    if (near === far) {
      throw IllegalArgumentException_init('near == far');
    }
    var width = 1.0 / (right - left);
    var height = 1.0 / (top - bottom);
    var depth = 1.0 / (far - near);
    var x = 2.0 * width;
    var y = 2.0 * height;
    var z = -2.0 * depth;
    var tx = -(right + left) * width;
    var ty = -(top + bottom) * height;
    var tz = -(far + near) * depth;
    this.matrix[this.offset + 0 | 0] = x;
    this.matrix[this.offset + 5 | 0] = y;
    this.matrix[this.offset + 10 | 0] = z;
    this.matrix[this.offset + 12 | 0] = tx;
    this.matrix[this.offset + 13 | 0] = ty;
    this.matrix[this.offset + 14 | 0] = tz;
    this.matrix[this.offset + 15 | 0] = 1.0;
    this.matrix[this.offset + 1 | 0] = 0.0;
    this.matrix[this.offset + 2 | 0] = 0.0;
    this.matrix[this.offset + 3 | 0] = 0.0;
    this.matrix[this.offset + 4 | 0] = 0.0;
    this.matrix[this.offset + 6 | 0] = 0.0;
    this.matrix[this.offset + 7 | 0] = 0.0;
    this.matrix[this.offset + 8 | 0] = 0.0;
    this.matrix[this.offset + 9 | 0] = 0.0;
    this.matrix[this.offset + 11 | 0] = 0.0;
    return this;
  };
  Mat4d.prototype.setPerspective_6y0v78$ = function (fovy, aspect, near, far) {
    var x = fovy * (math.PI / 360.0);
    var f = 1.0 / Math_0.tan(x);
    var rangeReciprocal = 1.0 / (near - far);
    this.matrix[this.offset + 0 | 0] = f / aspect;
    this.matrix[this.offset + 1 | 0] = 0.0;
    this.matrix[this.offset + 2 | 0] = 0.0;
    this.matrix[this.offset + 3 | 0] = 0.0;
    this.matrix[this.offset + 4 | 0] = 0.0;
    this.matrix[this.offset + 5 | 0] = f;
    this.matrix[this.offset + 6 | 0] = 0.0;
    this.matrix[this.offset + 7 | 0] = 0.0;
    this.matrix[this.offset + 8 | 0] = 0.0;
    this.matrix[this.offset + 9 | 0] = 0.0;
    this.matrix[this.offset + 10 | 0] = (far + near) * rangeReciprocal;
    this.matrix[this.offset + 11 | 0] = -1.0;
    this.matrix[this.offset + 12 | 0] = 0.0;
    this.matrix[this.offset + 13 | 0] = 0.0;
    this.matrix[this.offset + 14 | 0] = 2.0 * far * near * rangeReciprocal;
    this.matrix[this.offset + 15 | 0] = 0.0;
    return this;
  };
  Mat4d.prototype.get_za3lpa$ = function (i) {
    return this.matrix[this.offset + i | 0];
  };
  Mat4d.prototype.get_vux9f0$ = function (row, col) {
    return this.matrix[this.offset + (col * 4 | 0) + row | 0];
  };
  Mat4d.prototype.set_5wr77w$ = function (i, value) {
    this.matrix[this.offset + i | 0] = value;
  };
  Mat4d.prototype.set_224j3y$ = function (row, col, value) {
    this.matrix[this.offset + (col * 4 | 0) + row | 0] = value;
  };
  Mat4d.prototype.setRow_umtdzk$ = function (row, vec, w) {
    this.set_224j3y$(row, 0, vec.x);
    this.set_224j3y$(row, 1, vec.y);
    this.set_224j3y$(row, 2, vec.z);
    this.set_224j3y$(row, 3, w);
  };
  Mat4d.prototype.setRow_ky00rh$ = function (row, value) {
    this.set_224j3y$(row, 0, value.x);
    this.set_224j3y$(row, 1, value.y);
    this.set_224j3y$(row, 2, value.z);
    this.set_224j3y$(row, 3, value.w);
  };
  Mat4d.prototype.getRow_8irwu3$ = function (row, result) {
    result.x = this.get_vux9f0$(row, 0);
    result.y = this.get_vux9f0$(row, 1);
    result.z = this.get_vux9f0$(row, 2);
    result.w = this.get_vux9f0$(row, 3);
    return result;
  };
  Mat4d.prototype.setCol_umtdzk$ = function (col, vec, w) {
    this.set_224j3y$(0, col, vec.x);
    this.set_224j3y$(1, col, vec.y);
    this.set_224j3y$(2, col, vec.z);
    this.set_224j3y$(3, col, w);
  };
  Mat4d.prototype.setCol_ky00rh$ = function (col, value) {
    this.set_224j3y$(0, col, value.x);
    this.set_224j3y$(1, col, value.y);
    this.set_224j3y$(2, col, value.z);
    this.set_224j3y$(3, col, value.w);
  };
  Mat4d.prototype.getCol_8irwu3$ = function (col, result) {
    result.x = this.get_vux9f0$(0, col);
    result.y = this.get_vux9f0$(1, col);
    result.z = this.get_vux9f0$(2, col);
    result.w = this.get_vux9f0$(3, col);
    return result;
  };
  Mat4d.prototype.getOrigin_5s4mqs$ = function (result) {
    result.x = this.get_vux9f0$(0, 3);
    result.y = this.get_vux9f0$(1, 3);
    result.z = this.get_vux9f0$(2, 3);
    return result;
  };
  Mat4d.prototype.getRotation_5s4mpx$ = function (result) {
    var tmp$;
    var trace = this.get_vux9f0$(0, 0) + this.get_vux9f0$(1, 1) + this.get_vux9f0$(2, 2);
    if (trace > 0.0) {
      var x = trace + 1.0;
      var s = Math_0.sqrt(x);
      result.w = s * 0.5;
      s = 0.5 / s;
      result.x = (this.get_vux9f0$(2, 1) - this.get_vux9f0$(1, 2)) * s;
      result.y = (this.get_vux9f0$(0, 2) - this.get_vux9f0$(2, 0)) * s;
      result.z = (this.get_vux9f0$(1, 0) - this.get_vux9f0$(0, 1)) * s;
    }
     else {
      if (this.get_vux9f0$(0, 0) < this.get_vux9f0$(1, 1)) {
        if (this.get_vux9f0$(1, 1) < this.get_vux9f0$(2, 2)) {
          tmp$ = 2;
        }
         else {
          tmp$ = 1;
        }
      }
       else {
        if (this.get_vux9f0$(0, 0) < this.get_vux9f0$(2, 2)) {
          tmp$ = 2;
        }
         else {
          tmp$ = 0;
        }
      }
      var i = tmp$;
      var j = (i + 1 | 0) % 3;
      var k = (i + 2 | 0) % 3;
      var x_0 = this.get_vux9f0$(i, i) - this.get_vux9f0$(j, j) - this.get_vux9f0$(k, k) + 1.0;
      var s_0 = Math_0.sqrt(x_0);
      result.set_5wr77w$(i, s_0 * 0.5);
      s_0 = 0.5 / s_0;
      result.w = (this.get_vux9f0$(k, j) - this.get_vux9f0$(j, k)) * s_0;
      result.set_5wr77w$(j, (this.get_vux9f0$(j, i) + this.get_vux9f0$(i, j)) * s_0);
      result.set_5wr77w$(k, (this.get_vux9f0$(k, i) + this.get_vux9f0$(i, k)) * s_0);
    }
    return result;
  };
  Mat4d.prototype.toBuffer_he122g$ = function (buffer) {
    for (var i = 0; i < 16; i++) {
      buffer.put_mx4ult$(this.matrix[this.offset + i | 0]);
    }
    buffer.flip();
    return buffer;
  };
  Mat4d.prototype.toList = function () {
    var list = ArrayList_init_0();
    for (var i = 0; i <= 15; i++) {
      var element = this.matrix[this.offset + i | 0];
      list.add_11rb$(element);
    }
    return list;
  };
  function Mat4d$Companion() {
    Mat4d$Companion_instance = this;
    this.tmpMatLock_0 = new Any();
    this.tmpMatA_0 = new Mat4d();
    this.tmpMatB_0 = new Mat4d();
  }
  Mat4d$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Mat4d$Companion_instance = null;
  function Mat4d$Companion_getInstance() {
    if (Mat4d$Companion_instance === null) {
      new Mat4d$Companion();
    }
    return Mat4d$Companion_instance;
  }
  Mat4d.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Mat4d',
    interfaces: []
  };
  function Mat4dStack(stackSize) {
    Mat4dStack$Companion_getInstance();
    if (stackSize === void 0)
      stackSize = 32;
    Mat4d.call(this);
    this.stackSize = stackSize;
    this.stackIndex_51r8af$_0 = 0;
    this.matrix = new Float64Array(16 * this.stackSize | 0);
    this.setIdentity();
  }
  function Mat4dStack$Companion() {
    Mat4dStack$Companion_instance = this;
    this.DEFAULT_STACK_SIZE = 32;
  }
  Mat4dStack$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Mat4dStack$Companion_instance = null;
  function Mat4dStack$Companion_getInstance() {
    if (Mat4dStack$Companion_instance === null) {
      new Mat4dStack$Companion();
    }
    return Mat4dStack$Companion_instance;
  }
  Object.defineProperty(Mat4dStack.prototype, 'stackIndex', {
    get: function () {
      return this.stackIndex_51r8af$_0;
    },
    set: function (value) {
      this.stackIndex_51r8af$_0 = value;
      this.offset = value * 16 | 0;
    }
  });
  Mat4dStack.prototype.push = function () {
    if (this.stackIndex >= this.stackSize) {
      throw KoolException_init('Matrix stack overflow');
    }
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + 16 + i | 0] = this.matrix[this.offset + i | 0];
    }
    this.stackIndex = this.stackIndex + 1 | 0;
    return this;
  };
  Mat4dStack.prototype.pop = function () {
    if (this.stackIndex <= 0) {
      throw KoolException_init('Matrix stack underflow');
    }
    this.stackIndex = this.stackIndex - 1 | 0;
    return this;
  };
  Mat4dStack.prototype.reset = function () {
    this.stackIndex = 0;
    this.setIdentity();
    return this;
  };
  Mat4dStack.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Mat4dStack',
    interfaces: [Mat4d]
  };
  function Mat4f() {
    Mat4f$Companion_getInstance();
    this.matrix_cl37xc$_0 = new Float32Array(16);
    this.offset_ix8w3y$_0 = 0;
    this.setIdentity();
  }
  Object.defineProperty(Mat4f.prototype, 'matrix', {
    get: function () {
      return this.matrix_cl37xc$_0;
    },
    set: function (matrix) {
      this.matrix_cl37xc$_0 = matrix;
    }
  });
  Object.defineProperty(Mat4f.prototype, 'offset', {
    get: function () {
      return this.offset_ix8w3y$_0;
    },
    set: function (offset) {
      this.offset_ix8w3y$_0 = offset;
    }
  });
  Mat4f.prototype.translate_y2kzbl$ = function (tx, ty, tz) {
    for (var i = 0; i <= 3; i++) {
      var mi = this.offset + i | 0;
      this.matrix[12 + mi | 0] = this.matrix[12 + mi | 0] + (this.matrix[mi] * tx + this.matrix[4 + mi | 0] * ty + this.matrix[8 + mi | 0] * tz);
    }
    return this;
  };
  Mat4f.prototype.translate_czzhiu$ = function (t) {
    return this.translate_y2kzbl$(t.x, t.y, t.z);
  };
  Mat4f.prototype.translate_g84k6w$ = function (tx, ty, tz, result) {
    for (var i = 0; i <= 11; i++) {
      result.matrix[result.offset + i | 0] = this.matrix[this.offset + i | 0];
    }
    for (var i_0 = 0; i_0 <= 3; i_0++) {
      var mi = this.offset + i_0 | 0;
      result.matrix[result.offset + 12 + i_0 | 0] = this.matrix[mi] * tx + this.matrix[4 + mi | 0] * ty + this.matrix[8 + mi | 0] * tz + this.matrix[12 + mi | 0];
    }
    return result;
  };
  Mat4f.prototype.rotate_7b5o5w$ = function (angleDeg, axX, axY, axZ) {
    Mat4f$Companion_getInstance().tmpMatLock_0;
    Mat4f$Companion_getInstance().tmpMatA_0.setRotate_7b5o5w$(angleDeg, axX, axY, axZ);
    return this.set_d4zu6j$(this.mul_93v2ma$(Mat4f$Companion_getInstance().tmpMatA_0, Mat4f$Companion_getInstance().tmpMatB_0));
  };
  Mat4f.prototype.rotate_ad55pp$ = function (angleDeg, axis) {
    return this.rotate_7b5o5w$(angleDeg, axis.x, axis.y, axis.z);
  };
  Mat4f.prototype.rotate_c240mt$ = function (angleDeg, axX, axY, axZ, result) {
    Mat4f$Companion_getInstance().tmpMatLock_0;
    Mat4f$Companion_getInstance().tmpMatA_0.setRotate_7b5o5w$(angleDeg, axX, axY, axZ);
    return this.mul_93v2ma$(Mat4f$Companion_getInstance().tmpMatA_0, result);
  };
  Mat4f.prototype.rotate_phvhhm$ = function (angleDeg, axis, result) {
    return this.rotate_c240mt$(angleDeg, axis.x, axis.y, axis.z, result);
  };
  Mat4f.prototype.scale_y2kzbl$ = function (sx, sy, sz) {
    for (var i = 0; i <= 3; i++) {
      var mi = this.offset + i | 0;
      this.matrix[mi] = this.matrix[mi] * sx;
      this.matrix[4 + mi | 0] = this.matrix[4 + mi | 0] * sy;
      this.matrix[8 + mi | 0] = this.matrix[8 + mi | 0] * sz;
    }
    return this;
  };
  Mat4f.prototype.scale_czzhiu$ = function (scale) {
    return this.scale_y2kzbl$(scale.x, scale.y, scale.z);
  };
  Mat4f.prototype.scale_g84k6w$ = function (sx, sy, sz, result) {
    for (var i = 0; i <= 3; i++) {
      var smi = result.offset + i | 0;
      var mi = this.offset + i | 0;
      result.matrix[smi] = this.matrix[mi] * sx;
      result.matrix[4 + smi | 0] = this.matrix[4 + mi | 0] * sy;
      result.matrix[8 + smi | 0] = this.matrix[8 + mi | 0] * sz;
      result.matrix[12 + smi | 0] = this.matrix[12 + mi | 0];
    }
    return result;
  };
  Mat4f.prototype.transpose = function () {
    Mat4f$Companion_getInstance().tmpMatLock_0;
    return this.set_d4zu6j$(this.transpose_d4zu6j$(Mat4f$Companion_getInstance().tmpMatA_0));
  };
  Mat4f.prototype.transpose_d4zu6j$ = function (result) {
    for (var i = 0; i <= 3; i++) {
      var mBase = (i * 4 | 0) + this.offset | 0;
      result.matrix[i + result.offset | 0] = this.matrix[mBase];
      result.matrix[i + 4 + result.offset | 0] = this.matrix[mBase + 1 | 0];
      result.matrix[i + 8 + result.offset | 0] = this.matrix[mBase + 2 | 0];
      result.matrix[i + 12 + result.offset | 0] = this.matrix[mBase + 3 | 0];
    }
    return result;
  };
  Mat4f.prototype.invert_mx4ult$ = function (eps) {
    if (eps === void 0)
      eps = 0.0;
    Mat4f$Companion_getInstance().tmpMatLock_0;
    var $receiver = this.invert_8kv2li$(Mat4f$Companion_getInstance().tmpMatA_0, eps);
    if ($receiver)
      this.set_d4zu6j$(Mat4f$Companion_getInstance().tmpMatA_0);
    return $receiver;
  };
  Mat4f.prototype.invert_8kv2li$ = function (result, eps) {
    if (eps === void 0)
      eps = 0.0;
    var src0 = this.matrix[this.offset + 0 | 0];
    var src4 = this.matrix[this.offset + 1 | 0];
    var src8 = this.matrix[this.offset + 2 | 0];
    var src12 = this.matrix[this.offset + 3 | 0];
    var src1 = this.matrix[this.offset + 4 | 0];
    var src5 = this.matrix[this.offset + 5 | 0];
    var src9 = this.matrix[this.offset + 6 | 0];
    var src13 = this.matrix[this.offset + 7 | 0];
    var src2 = this.matrix[this.offset + 8 | 0];
    var src6 = this.matrix[this.offset + 9 | 0];
    var src10 = this.matrix[this.offset + 10 | 0];
    var src14 = this.matrix[this.offset + 11 | 0];
    var src3 = this.matrix[this.offset + 12 | 0];
    var src7 = this.matrix[this.offset + 13 | 0];
    var src11 = this.matrix[this.offset + 14 | 0];
    var src15 = this.matrix[this.offset + 15 | 0];
    var atmp0 = src10 * src15;
    var atmp1 = src11 * src14;
    var atmp2 = src9 * src15;
    var atmp3 = src11 * src13;
    var atmp4 = src9 * src14;
    var atmp5 = src10 * src13;
    var atmp6 = src8 * src15;
    var atmp7 = src11 * src12;
    var atmp8 = src8 * src14;
    var atmp9 = src10 * src12;
    var atmp10 = src8 * src13;
    var atmp11 = src9 * src12;
    var dst0 = atmp0 * src5 + atmp3 * src6 + atmp4 * src7 - (atmp1 * src5 + atmp2 * src6 + atmp5 * src7);
    var dst1 = atmp1 * src4 + atmp6 * src6 + atmp9 * src7 - (atmp0 * src4 + atmp7 * src6 + atmp8 * src7);
    var dst2 = atmp2 * src4 + atmp7 * src5 + atmp10 * src7 - (atmp3 * src4 + atmp6 * src5 + atmp11 * src7);
    var dst3 = atmp5 * src4 + atmp8 * src5 + atmp11 * src6 - (atmp4 * src4 + atmp9 * src5 + atmp10 * src6);
    var dst4 = atmp1 * src1 + atmp2 * src2 + atmp5 * src3 - (atmp0 * src1 + atmp3 * src2 + atmp4 * src3);
    var dst5 = atmp0 * src0 + atmp7 * src2 + atmp8 * src3 - (atmp1 * src0 + atmp6 * src2 + atmp9 * src3);
    var dst6 = atmp3 * src0 + atmp6 * src1 + atmp11 * src3 - (atmp2 * src0 + atmp7 * src1 + atmp10 * src3);
    var dst7 = atmp4 * src0 + atmp9 * src1 + atmp10 * src2 - (atmp5 * src0 + atmp8 * src1 + atmp11 * src2);
    var btmp0 = src2 * src7;
    var btmp1 = src3 * src6;
    var btmp2 = src1 * src7;
    var btmp3 = src3 * src5;
    var btmp4 = src1 * src6;
    var btmp5 = src2 * src5;
    var btmp6 = src0 * src7;
    var btmp7 = src3 * src4;
    var btmp8 = src0 * src6;
    var btmp9 = src2 * src4;
    var btmp10 = src0 * src5;
    var btmp11 = src1 * src4;
    var dst8 = btmp0 * src13 + btmp3 * src14 + btmp4 * src15 - (btmp1 * src13 + btmp2 * src14 + btmp5 * src15);
    var dst9 = btmp1 * src12 + btmp6 * src14 + btmp9 * src15 - (btmp0 * src12 + btmp7 * src14 + btmp8 * src15);
    var dst10 = btmp2 * src12 + btmp7 * src13 + btmp10 * src15 - (btmp3 * src12 + btmp6 * src13 + btmp11 * src15);
    var dst11 = btmp5 * src12 + btmp8 * src13 + btmp11 * src14 - (btmp4 * src12 + btmp9 * src13 + btmp10 * src14);
    var dst12 = btmp2 * src10 + btmp5 * src11 + btmp1 * src9 - (btmp4 * src11 + btmp0 * src9 + btmp3 * src10);
    var dst13 = btmp8 * src11 + btmp0 * src8 + btmp7 * src10 - (btmp6 * src10 + btmp9 * src11 + btmp1 * src8);
    var dst14 = btmp6 * src9 + btmp11 * src11 + btmp3 * src8 - (btmp10 * src11 + btmp2 * src8 + btmp7 * src9);
    var dst15 = btmp10 * src10 + btmp4 * src8 + btmp9 * src9 - (btmp8 * src9 + btmp11 * src10 + btmp5 * src8);
    var det = src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;
    if (Math_0.abs(det) <= eps) {
      return false;
    }
    var invdet = 1.0 / det;
    result.matrix[result.offset] = dst0 * invdet;
    result.matrix[1 + result.offset | 0] = dst1 * invdet;
    result.matrix[2 + result.offset | 0] = dst2 * invdet;
    result.matrix[3 + result.offset | 0] = dst3 * invdet;
    result.matrix[4 + result.offset | 0] = dst4 * invdet;
    result.matrix[5 + result.offset | 0] = dst5 * invdet;
    result.matrix[6 + result.offset | 0] = dst6 * invdet;
    result.matrix[7 + result.offset | 0] = dst7 * invdet;
    result.matrix[8 + result.offset | 0] = dst8 * invdet;
    result.matrix[9 + result.offset | 0] = dst9 * invdet;
    result.matrix[10 + result.offset | 0] = dst10 * invdet;
    result.matrix[11 + result.offset | 0] = dst11 * invdet;
    result.matrix[12 + result.offset | 0] = dst12 * invdet;
    result.matrix[13 + result.offset | 0] = dst13 * invdet;
    result.matrix[14 + result.offset | 0] = dst14 * invdet;
    result.matrix[15 + result.offset | 0] = dst15 * invdet;
    return true;
  };
  Mat4f.prototype.transform_w1lst9$ = function (vec, w) {
    if (w === void 0)
      w = 1.0;
    var x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + w * this.get_vux9f0$(0, 3);
    var y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + w * this.get_vux9f0$(1, 3);
    var z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + w * this.get_vux9f0$(2, 3);
    return vec.set_y2kzbl$(x, y, z);
  };
  Mat4f.prototype.transform_a6wx89$ = function (vec, w, result) {
    if (w === void 0)
      w = 1.0;
    result.x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + w * this.get_vux9f0$(0, 3);
    result.y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + w * this.get_vux9f0$(1, 3);
    result.z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + w * this.get_vux9f0$(2, 3);
    return result;
  };
  Mat4f.prototype.transform_5s4mpv$ = function (vec) {
    var x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + vec.w * this.get_vux9f0$(0, 3);
    var y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + vec.w * this.get_vux9f0$(1, 3);
    var z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + vec.w * this.get_vux9f0$(2, 3);
    var w = vec.x * this.get_vux9f0$(3, 0) + vec.y * this.get_vux9f0$(3, 1) + vec.z * this.get_vux9f0$(3, 2) + vec.w * this.get_vux9f0$(3, 3);
    return vec.set_7b5o5w$(x, y, z, w);
  };
  Mat4f.prototype.transform_uzu8ww$ = function (vec, result) {
    result.x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + vec.w * this.get_vux9f0$(0, 3);
    result.y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + vec.w * this.get_vux9f0$(1, 3);
    result.z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + vec.w * this.get_vux9f0$(2, 3);
    result.w = vec.x * this.get_vux9f0$(3, 0) + vec.y * this.get_vux9f0$(3, 1) + vec.z * this.get_vux9f0$(3, 2) + vec.w * this.get_vux9f0$(3, 3);
    return result;
  };
  Mat4f.prototype.add_d4zu6j$ = function (other) {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = this.matrix[this.offset + i | 0] + other.matrix[other.offset + i | 0];
    }
    return this;
  };
  Mat4f.prototype.mul_d4zu6j$ = function (other) {
    Mat4f$Companion_getInstance().tmpMatLock_0;
    this.mul_93v2ma$(other, Mat4f$Companion_getInstance().tmpMatA_0);
    return this.set_d4zu6j$(Mat4f$Companion_getInstance().tmpMatA_0);
  };
  Mat4f.prototype.mul_93v2ma$ = function (other, result) {
    for (var i = 0; i <= 3; i++) {
      for (var j = 0; j <= 3; j++) {
        var x = 0.0;
        for (var k = 0; k <= 3; k++) {
          x += this.matrix[this.offset + j + (k * 4 | 0) | 0] * other.matrix[other.offset + (i * 4 | 0) + k | 0];
        }
        result.matrix[result.offset + (i * 4 | 0) + j | 0] = x;
      }
    }
    return result;
  };
  Mat4f.prototype.set_d4zu6j$ = function (other) {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = other.matrix[other.offset + i | 0];
    }
    return this;
  };
  Mat4f.prototype.set_d4zu6l$ = function (other) {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = other.matrix[other.offset + i | 0];
    }
    return this;
  };
  Mat4f.prototype.set_hcyabg$ = function (floats) {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = floats.get_za3lpa$(i);
    }
    return this;
  };
  Mat4f.prototype.setZero = function () {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = 0.0;
    }
    return this;
  };
  Mat4f.prototype.setIdentity = function () {
    for (var i = 1; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = 0.0;
    }
    this.matrix[this.offset] = 1.0;
    this.matrix[this.offset + 5 | 0] = 1.0;
    this.matrix[this.offset + 10 | 0] = 1.0;
    this.matrix[this.offset + 15 | 0] = 1.0;
    return this;
  };
  Mat4f.prototype.setRotate_7b5o5w$ = function (rotA, axX, axY, axZ) {
    var a = rotA * package$math.DEG_2_RAD;
    var x = axX;
    var y = axY;
    var z = axZ;
    this.matrix[this.offset + 3 | 0] = 0.0;
    this.matrix[this.offset + 7 | 0] = 0.0;
    this.matrix[this.offset + 11 | 0] = 0.0;
    this.matrix[this.offset + 12 | 0] = 0.0;
    this.matrix[this.offset + 13 | 0] = 0.0;
    this.matrix[this.offset + 14 | 0] = 0.0;
    this.matrix[this.offset + 15 | 0] = 1.0;
    var s = Math_0.sin(a);
    var c = Math_0.cos(a);
    if (1.0 === x && 0.0 === y && 0.0 === z) {
      this.matrix[this.offset + 5 | 0] = c;
      this.matrix[this.offset + 10 | 0] = c;
      this.matrix[this.offset + 6 | 0] = s;
      this.matrix[this.offset + 9 | 0] = -s;
      this.matrix[this.offset + 1 | 0] = 0.0;
      this.matrix[this.offset + 2 | 0] = 0.0;
      this.matrix[this.offset + 4 | 0] = 0.0;
      this.matrix[this.offset + 8 | 0] = 0.0;
      this.matrix[this.offset + 0 | 0] = 1.0;
    }
     else if (0.0 === x && 1.0 === y && 0.0 === z) {
      this.matrix[this.offset + 0 | 0] = c;
      this.matrix[this.offset + 10 | 0] = c;
      this.matrix[this.offset + 8 | 0] = s;
      this.matrix[this.offset + 2 | 0] = -s;
      this.matrix[this.offset + 1 | 0] = 0.0;
      this.matrix[this.offset + 4 | 0] = 0.0;
      this.matrix[this.offset + 6 | 0] = 0.0;
      this.matrix[this.offset + 9 | 0] = 0.0;
      this.matrix[this.offset + 5 | 0] = 1.0;
    }
     else if (0.0 === x && 0.0 === y && 1.0 === z) {
      this.matrix[this.offset + 0 | 0] = c;
      this.matrix[this.offset + 5 | 0] = c;
      this.matrix[this.offset + 1 | 0] = s;
      this.matrix[this.offset + 4 | 0] = -s;
      this.matrix[this.offset + 2 | 0] = 0.0;
      this.matrix[this.offset + 6 | 0] = 0.0;
      this.matrix[this.offset + 8 | 0] = 0.0;
      this.matrix[this.offset + 9 | 0] = 0.0;
      this.matrix[this.offset + 10 | 0] = 1.0;
    }
     else {
      var x_0 = x * x + y * y + z * z;
      var len = Math_0.sqrt(x_0);
      var eps;
      eps = package$math.FUZZY_EQ_F;
      var $receiver = len - 1.0;
      if (!(Math_0.abs($receiver) <= eps)) {
        var recipLen = 1.0 / len;
        x *= recipLen;
        y *= recipLen;
        z *= recipLen;
      }
      var nc = 1.0 - c;
      var xy = x * y;
      var yz = y * z;
      var zx = z * x;
      var xs = x * s;
      var ys = y * s;
      var zs = z * s;
      this.matrix[this.offset + 0 | 0] = x * x * nc + c;
      this.matrix[this.offset + 4 | 0] = xy * nc - zs;
      this.matrix[this.offset + 8 | 0] = zx * nc + ys;
      this.matrix[this.offset + 1 | 0] = xy * nc + zs;
      this.matrix[this.offset + 5 | 0] = y * y * nc + c;
      this.matrix[this.offset + 9 | 0] = yz * nc - xs;
      this.matrix[this.offset + 2 | 0] = zx * nc - ys;
      this.matrix[this.offset + 6 | 0] = yz * nc + xs;
      this.matrix[this.offset + 10 | 0] = z * z * nc + c;
    }
    return this;
  };
  Mat4f.prototype.setRotate_czzhhz$ = function (quaternion) {
    var r = quaternion.w;
    var i = quaternion.x;
    var j = quaternion.y;
    var k = quaternion.z;
    var x = r * r + i * i + j * j + k * k;
    var s = Math_0.sqrt(x);
    s = 1.0 / (s * s);
    this.set_n0b4r3$(0, 0, 1 - 2 * s * (j * j + k * k));
    this.set_n0b4r3$(0, 1, 2 * s * (i * j - k * r));
    this.set_n0b4r3$(0, 2, 2 * s * (i * k + j * r));
    this.set_n0b4r3$(0, 3, 0.0);
    this.set_n0b4r3$(1, 0, 2 * s * (i * j + k * r));
    this.set_n0b4r3$(1, 1, 1 - 2 * s * (i * i + k * k));
    this.set_n0b4r3$(1, 2, 2 * s * (j * k - i * r));
    this.set_n0b4r3$(1, 3, 0.0);
    this.set_n0b4r3$(2, 0, 2 * s * (i * k - j * r));
    this.set_n0b4r3$(2, 1, 2 * s * (j * k + i * r));
    this.set_n0b4r3$(2, 2, 1 - 2 * s * (i * i + j * j));
    this.set_n0b4r3$(2, 3, 0.0);
    this.set_n0b4r3$(3, 0, 0.0);
    this.set_n0b4r3$(3, 1, 0.0);
    this.set_n0b4r3$(3, 2, 0.0);
    this.set_n0b4r3$(3, 3, 1.0);
    return this;
  };
  Mat4f.prototype.setLookAt_n440fu$ = function (position, lookAt, up) {
    var fx = lookAt.x - position.x;
    var fy = lookAt.y - position.y;
    var fz = lookAt.z - position.z;
    var x = fx * fx + fy * fy + fz * fz;
    var rlf = 1.0 / Math_0.sqrt(x);
    fx *= rlf;
    fy *= rlf;
    fz *= rlf;
    var sx = fy * up.z - fz * up.y;
    var sy = fz * up.x - fx * up.z;
    var sz = fx * up.y - fy * up.x;
    var x_0 = sx * sx + sy * sy + sz * sz;
    var rls = 1.0 / Math_0.sqrt(x_0);
    sx *= rls;
    sy *= rls;
    sz *= rls;
    var ux = sy * fz - sz * fy;
    var uy = sz * fx - sx * fz;
    var uz = sx * fy - sy * fx;
    this.matrix[this.offset + 0 | 0] = sx;
    this.matrix[this.offset + 1 | 0] = ux;
    this.matrix[this.offset + 2 | 0] = -fx;
    this.matrix[this.offset + 3 | 0] = 0.0;
    this.matrix[this.offset + 4 | 0] = sy;
    this.matrix[this.offset + 5 | 0] = uy;
    this.matrix[this.offset + 6 | 0] = -fy;
    this.matrix[this.offset + 7 | 0] = 0.0;
    this.matrix[this.offset + 8 | 0] = sz;
    this.matrix[this.offset + 9 | 0] = uz;
    this.matrix[this.offset + 10 | 0] = -fz;
    this.matrix[this.offset + 11 | 0] = 0.0;
    this.matrix[this.offset + 12 | 0] = 0.0;
    this.matrix[this.offset + 13 | 0] = 0.0;
    this.matrix[this.offset + 14 | 0] = 0.0;
    this.matrix[this.offset + 15 | 0] = 1.0;
    return this.translate_y2kzbl$(-position.x, -position.y, -position.z);
  };
  Mat4f.prototype.setOrthographic_w8lrqs$ = function (left, right, bottom, top, near, far) {
    if (left === right) {
      throw IllegalArgumentException_init('left == right');
    }
    if (bottom === top) {
      throw IllegalArgumentException_init('bottom == top');
    }
    if (near === far) {
      throw IllegalArgumentException_init('near == far');
    }
    var width = 1.0 / (right - left);
    var height = 1.0 / (top - bottom);
    var depth = 1.0 / (far - near);
    var x = 2.0 * width;
    var y = 2.0 * height;
    var z = -2.0 * depth;
    var tx = -(right + left) * width;
    var ty = -(top + bottom) * height;
    var tz = -(far + near) * depth;
    this.matrix[this.offset + 0 | 0] = x;
    this.matrix[this.offset + 5 | 0] = y;
    this.matrix[this.offset + 10 | 0] = z;
    this.matrix[this.offset + 12 | 0] = tx;
    this.matrix[this.offset + 13 | 0] = ty;
    this.matrix[this.offset + 14 | 0] = tz;
    this.matrix[this.offset + 15 | 0] = 1.0;
    this.matrix[this.offset + 1 | 0] = 0.0;
    this.matrix[this.offset + 2 | 0] = 0.0;
    this.matrix[this.offset + 3 | 0] = 0.0;
    this.matrix[this.offset + 4 | 0] = 0.0;
    this.matrix[this.offset + 6 | 0] = 0.0;
    this.matrix[this.offset + 7 | 0] = 0.0;
    this.matrix[this.offset + 8 | 0] = 0.0;
    this.matrix[this.offset + 9 | 0] = 0.0;
    this.matrix[this.offset + 11 | 0] = 0.0;
    return this;
  };
  Mat4f.prototype.setPerspective_7b5o5w$ = function (fovy, aspect, near, far) {
    var x = fovy * (math.PI / 360.0);
    var f = 1.0 / Math_0.tan(x);
    var rangeReciprocal = 1.0 / (near - far);
    this.matrix[this.offset + 0 | 0] = f / aspect;
    this.matrix[this.offset + 1 | 0] = 0.0;
    this.matrix[this.offset + 2 | 0] = 0.0;
    this.matrix[this.offset + 3 | 0] = 0.0;
    this.matrix[this.offset + 4 | 0] = 0.0;
    this.matrix[this.offset + 5 | 0] = f;
    this.matrix[this.offset + 6 | 0] = 0.0;
    this.matrix[this.offset + 7 | 0] = 0.0;
    this.matrix[this.offset + 8 | 0] = 0.0;
    this.matrix[this.offset + 9 | 0] = 0.0;
    this.matrix[this.offset + 10 | 0] = (far + near) * rangeReciprocal;
    this.matrix[this.offset + 11 | 0] = -1.0;
    this.matrix[this.offset + 12 | 0] = 0.0;
    this.matrix[this.offset + 13 | 0] = 0.0;
    this.matrix[this.offset + 14 | 0] = 2.0 * far * near * rangeReciprocal;
    this.matrix[this.offset + 15 | 0] = 0.0;
    return this;
  };
  Mat4f.prototype.get_za3lpa$ = function (i) {
    return this.matrix[this.offset + i | 0];
  };
  Mat4f.prototype.get_vux9f0$ = function (row, col) {
    return this.matrix[this.offset + (col * 4 | 0) + row | 0];
  };
  Mat4f.prototype.set_24o109$ = function (i, value) {
    this.matrix[this.offset + i | 0] = value;
  };
  Mat4f.prototype.set_n0b4r3$ = function (row, col, value) {
    this.matrix[this.offset + (col * 4 | 0) + row | 0] = value;
  };
  Mat4f.prototype.setRow_gdg6t7$ = function (row, vec, w) {
    this.set_n0b4r3$(row, 0, vec.x);
    this.set_n0b4r3$(row, 1, vec.y);
    this.set_n0b4r3$(row, 2, vec.z);
    this.set_n0b4r3$(row, 3, w);
  };
  Mat4f.prototype.setRow_ky00rj$ = function (row, value) {
    this.set_n0b4r3$(row, 0, value.x);
    this.set_n0b4r3$(row, 1, value.y);
    this.set_n0b4r3$(row, 2, value.z);
    this.set_n0b4r3$(row, 3, value.w);
  };
  Mat4f.prototype.getRow_8irwu1$ = function (row, result) {
    result.x = this.get_vux9f0$(row, 0);
    result.y = this.get_vux9f0$(row, 1);
    result.z = this.get_vux9f0$(row, 2);
    result.w = this.get_vux9f0$(row, 3);
    return result;
  };
  Mat4f.prototype.setCol_gdg6t7$ = function (col, vec, w) {
    this.set_n0b4r3$(0, col, vec.x);
    this.set_n0b4r3$(1, col, vec.y);
    this.set_n0b4r3$(2, col, vec.z);
    this.set_n0b4r3$(3, col, w);
  };
  Mat4f.prototype.setCol_ky00rj$ = function (col, value) {
    this.set_n0b4r3$(0, col, value.x);
    this.set_n0b4r3$(1, col, value.y);
    this.set_n0b4r3$(2, col, value.z);
    this.set_n0b4r3$(3, col, value.w);
  };
  Mat4f.prototype.getCol_8irwu1$ = function (col, result) {
    result.x = this.get_vux9f0$(0, col);
    result.y = this.get_vux9f0$(1, col);
    result.z = this.get_vux9f0$(2, col);
    result.w = this.get_vux9f0$(3, col);
    return result;
  };
  Mat4f.prototype.getOrigin_5s4mqq$ = function (result) {
    result.x = this.get_vux9f0$(0, 3);
    result.y = this.get_vux9f0$(1, 3);
    result.z = this.get_vux9f0$(2, 3);
    return result;
  };
  Mat4f.prototype.getOrientation_d4zu7e$ = function (result) {
    result.set_n0b4r3$(0, 0, this.get_vux9f0$(0, 0));
    result.set_n0b4r3$(0, 1, this.get_vux9f0$(0, 1));
    result.set_n0b4r3$(0, 2, this.get_vux9f0$(0, 2));
    result.set_n0b4r3$(1, 0, this.get_vux9f0$(1, 0));
    result.set_n0b4r3$(1, 1, this.get_vux9f0$(1, 1));
    result.set_n0b4r3$(1, 2, this.get_vux9f0$(1, 2));
    result.set_n0b4r3$(2, 0, this.get_vux9f0$(2, 0));
    result.set_n0b4r3$(2, 1, this.get_vux9f0$(2, 1));
    result.set_n0b4r3$(2, 2, this.get_vux9f0$(2, 2));
    return result;
  };
  Mat4f.prototype.getOrientationTransposed_d4zu7e$ = function (result) {
    result.set_n0b4r3$(0, 0, this.get_vux9f0$(0, 0));
    result.set_n0b4r3$(0, 1, this.get_vux9f0$(1, 0));
    result.set_n0b4r3$(0, 2, this.get_vux9f0$(2, 0));
    result.set_n0b4r3$(1, 0, this.get_vux9f0$(0, 1));
    result.set_n0b4r3$(1, 1, this.get_vux9f0$(1, 1));
    result.set_n0b4r3$(1, 2, this.get_vux9f0$(2, 1));
    result.set_n0b4r3$(2, 0, this.get_vux9f0$(0, 2));
    result.set_n0b4r3$(2, 1, this.get_vux9f0$(1, 2));
    result.set_n0b4r3$(2, 2, this.get_vux9f0$(2, 2));
    return result;
  };
  Mat4f.prototype.getRotation_5s4mpv$ = function (result) {
    var tmp$;
    var trace = this.get_vux9f0$(0, 0) + this.get_vux9f0$(1, 1) + this.get_vux9f0$(2, 2);
    if (trace > 0.0) {
      var x = trace + 1.0;
      var s = Math_0.sqrt(x);
      result.w = s * 0.5;
      s = 0.5 / s;
      result.x = (this.get_vux9f0$(2, 1) - this.get_vux9f0$(1, 2)) * s;
      result.y = (this.get_vux9f0$(0, 2) - this.get_vux9f0$(2, 0)) * s;
      result.z = (this.get_vux9f0$(1, 0) - this.get_vux9f0$(0, 1)) * s;
    }
     else {
      if (this.get_vux9f0$(0, 0) < this.get_vux9f0$(1, 1)) {
        if (this.get_vux9f0$(1, 1) < this.get_vux9f0$(2, 2)) {
          tmp$ = 2;
        }
         else {
          tmp$ = 1;
        }
      }
       else {
        if (this.get_vux9f0$(0, 0) < this.get_vux9f0$(2, 2)) {
          tmp$ = 2;
        }
         else {
          tmp$ = 0;
        }
      }
      var i = tmp$;
      var j = (i + 1 | 0) % 3;
      var k = (i + 2 | 0) % 3;
      var x_0 = this.get_vux9f0$(i, i) - this.get_vux9f0$(j, j) - this.get_vux9f0$(k, k) + 1.0;
      var s_0 = Math_0.sqrt(x_0);
      result.set_24o109$(i, s_0 * 0.5);
      s_0 = 0.5 / s_0;
      result.w = (this.get_vux9f0$(k, j) - this.get_vux9f0$(j, k)) * s_0;
      result.set_24o109$(j, (this.get_vux9f0$(j, i) + this.get_vux9f0$(i, j)) * s_0);
      result.set_24o109$(k, (this.get_vux9f0$(k, i) + this.get_vux9f0$(i, k)) * s_0);
    }
    return result;
  };
  Mat4f.prototype.toBuffer_he122g$ = function (buffer) {
    buffer.put_kgymra$(this.matrix, this.offset, 16);
    buffer.flip();
    return buffer;
  };
  Mat4f.prototype.toList = function () {
    var list = ArrayList_init_0();
    for (var i = 0; i <= 15; i++) {
      var element = this.matrix[this.offset + i | 0];
      list.add_11rb$(element);
    }
    return list;
  };
  Mat4f.prototype.dump = function () {
    for (var r = 0; r <= 3; r++) {
      for (var c = 0; c <= 3; c++) {
        print(this.get_vux9f0$(r, c).toString() + ' ');
      }
      println();
    }
  };
  function Mat4f$Companion() {
    Mat4f$Companion_instance = this;
    this.tmpMatLock_0 = new Any();
    this.tmpMatA_0 = new Mat4f();
    this.tmpMatB_0 = new Mat4f();
  }
  Mat4f$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Mat4f$Companion_instance = null;
  function Mat4f$Companion_getInstance() {
    if (Mat4f$Companion_instance === null) {
      new Mat4f$Companion();
    }
    return Mat4f$Companion_instance;
  }
  Mat4f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Mat4f',
    interfaces: []
  };
  function Mat4fStack(stackSize) {
    Mat4fStack$Companion_getInstance();
    if (stackSize === void 0)
      stackSize = 32;
    Mat4f.call(this);
    this.stackSize = stackSize;
    this.stackIndex_rxi7m3$_0 = 0;
    this.matrix = new Float32Array(16 * this.stackSize | 0);
    this.setIdentity();
  }
  function Mat4fStack$Companion() {
    Mat4fStack$Companion_instance = this;
    this.DEFAULT_STACK_SIZE = 32;
  }
  Mat4fStack$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Mat4fStack$Companion_instance = null;
  function Mat4fStack$Companion_getInstance() {
    if (Mat4fStack$Companion_instance === null) {
      new Mat4fStack$Companion();
    }
    return Mat4fStack$Companion_instance;
  }
  Object.defineProperty(Mat4fStack.prototype, 'stackIndex', {
    get: function () {
      return this.stackIndex_rxi7m3$_0;
    },
    set: function (value) {
      this.stackIndex_rxi7m3$_0 = value;
      this.offset = value * 16 | 0;
    }
  });
  Mat4fStack.prototype.push = function () {
    if (this.stackIndex >= this.stackSize) {
      throw KoolException_init('Matrix stack overflow');
    }
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + 16 + i | 0] = this.matrix[this.offset + i | 0];
    }
    this.stackIndex = this.stackIndex + 1 | 0;
    return this;
  };
  Mat4fStack.prototype.pop = function () {
    if (this.stackIndex <= 0) {
      throw KoolException_init('Matrix stack underflow');
    }
    this.stackIndex = this.stackIndex - 1 | 0;
    return this;
  };
  Mat4fStack.prototype.reset = function () {
    this.stackIndex = 0;
    this.setIdentity();
    return this;
  };
  Mat4fStack.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Mat4fStack',
    interfaces: [Mat4f]
  };
  var DEG_2_RAD;
  var RAD_2_DEG;
  var FUZZY_EQ_F;
  var FUZZY_EQ_D;
  var FLT_EPSILON;
  var SQRT_1_2;
  var toDeg = defineInlineFunction('kool.de.fabmax.kool.math.toDeg_81szk$', wrapFunction(function () {
    var math = _.de.fabmax.kool.math;
    return function ($receiver) {
      return $receiver * math.RAD_2_DEG;
    };
  }));
  var toRad = defineInlineFunction('kool.de.fabmax.kool.math.toRad_81szk$', wrapFunction(function () {
    var math = _.de.fabmax.kool.math;
    return function ($receiver) {
      return $receiver * math.DEG_2_RAD;
    };
  }));
  var toDeg_0 = defineInlineFunction('kool.de.fabmax.kool.math.toDeg_yrwdxr$', wrapFunction(function () {
    var math = _.de.fabmax.kool.math;
    return function ($receiver) {
      return $receiver * math.RAD_2_DEG;
    };
  }));
  var toRad_0 = defineInlineFunction('kool.de.fabmax.kool.math.toRad_yrwdxr$', wrapFunction(function () {
    var math = _.de.fabmax.kool.math;
    return function ($receiver) {
      return $receiver * math.DEG_2_RAD;
    };
  }));
  var isFuzzyEqual = defineInlineFunction('kool.de.fabmax.kool.math.isFuzzyEqual_y2kzbl$', wrapFunction(function () {
    var math = _.de.fabmax.kool.math;
    var Math_0 = Math;
    return function (a, b, eps) {
      if (eps === void 0)
        eps = math.FUZZY_EQ_F;
      var $receiver = a - b;
      return Math_0.abs($receiver) <= eps;
    };
  }));
  var isFuzzyEqual_0 = defineInlineFunction('kool.de.fabmax.kool.math.isFuzzyEqual_yvo9jy$', wrapFunction(function () {
    var math = _.de.fabmax.kool.math;
    var Math_0 = Math;
    return function (a, b, eps) {
      if (eps === void 0)
        eps = math.FUZZY_EQ_D;
      var $receiver = a - b;
      return Math_0.abs($receiver) <= eps;
    };
  }));
  var isFuzzyZero = defineInlineFunction('kool.de.fabmax.kool.math.isFuzzyZero_yni7l$', wrapFunction(function () {
    var math = _.de.fabmax.kool.math;
    var Math_0 = Math;
    return function ($receiver, eps) {
      if (eps === void 0)
        eps = math.FUZZY_EQ_F;
      return Math_0.abs($receiver) <= eps;
    };
  }));
  var isFuzzyZero_0 = defineInlineFunction('kool.de.fabmax.kool.math.isFuzzyZero_38ydlf$', wrapFunction(function () {
    var math = _.de.fabmax.kool.math;
    var Math_0 = Math;
    return function ($receiver, eps) {
      if (eps === void 0)
        eps = math.FUZZY_EQ_D;
      return Math_0.abs($receiver) <= eps;
    };
  }));
  var clamp = defineInlineFunction('kool.de.fabmax.kool.math.clamp_e4yvb3$', function ($receiver, min, max) {
    if ($receiver < min)
      return min;
    else if ($receiver > max)
      return max;
    else
      return $receiver;
  });
  var clamp_0 = defineInlineFunction('kool.de.fabmax.kool.math.clamp_wj6e7o$', function ($receiver, min, max) {
    if (min === void 0)
      min = 0.0;
    if (max === void 0)
      max = 1.0;
    if ($receiver < min)
      return min;
    else if ($receiver > max)
      return max;
    else
      return $receiver;
  });
  var clamp_1 = defineInlineFunction('kool.de.fabmax.kool.math.clamp_nig4hr$', function ($receiver, min, max) {
    if (min === void 0)
      min = 0.0;
    if (max === void 0)
      max = 1.0;
    if ($receiver < min)
      return min;
    else if ($receiver > max)
      return max;
    else
      return $receiver;
  });
  function triArea(va, vb, vc) {
    var xAB = vb.x - va.x;
    var yAB = vb.y - va.y;
    var zAB = vb.z - va.z;
    var xAC = vc.x - va.x;
    var yAC = vc.y - va.y;
    var zAC = vc.z - va.z;
    var abSqr = xAB * xAB + yAB * yAB + zAB * zAB;
    var acSqr = xAC * xAC + yAC * yAC + zAC * zAC;
    var abcSqr = xAB * xAC + yAB * yAC + zAB * zAC;
    var x = abSqr * acSqr - abcSqr * abcSqr;
    return 0.5 * Math_0.sqrt(x);
  }
  function triAspectRatio(va, vb, vc) {
    var a = va.distance_czzhiu$(vb);
    var b = vb.distance_czzhiu$(vc);
    var c = vc.distance_czzhiu$(va);
    var s = (a + b + c) / 2.0;
    var x = a * b * c / (8.0 * (s - a) * (s - b) * (s - c));
    return Math_0.abs(x);
  }
  function barycentricWeights(pt, va, vb, vc, result) {
    var e1 = MutableVec3f_init_1(vb).subtract_czzhiu$(va);
    var e2 = MutableVec3f_init_1(vc).subtract_czzhiu$(va);
    var n = e1.cross_2gj7b4$(e2, MutableVec3f_init());
    var a = n.length();
    var aa = a * a;
    var m = MutableVec3f_init();
    e1.set_czzhiu$(vc).subtract_czzhiu$(vb);
    e2.set_czzhiu$(pt).subtract_czzhiu$(vb);
    result.x = n.times_czzhiu$(e1.cross_2gj7b4$(e2, m)) / aa;
    e1.set_czzhiu$(va).subtract_czzhiu$(vc);
    e2.set_czzhiu$(pt).subtract_czzhiu$(vc);
    result.y = n.times_czzhiu$(e1.cross_2gj7b4$(e2, m)) / aa;
    e1.set_czzhiu$(vb).subtract_czzhiu$(va);
    e2.set_czzhiu$(pt).subtract_czzhiu$(va);
    result.z = n.times_czzhiu$(e1.cross_2gj7b4$(e2, m)) / aa;
    return result;
  }
  function partition($receiver, k, cmp) {
    partition_0($receiver, get_indices($receiver), k, cmp);
  }
  function partition$lambda($receiver, it) {
    return $receiver.get_za3lpa$(it);
  }
  function partition$lambda_0($receiver, a, b) {
    var $receiver_0 = $receiver.get_za3lpa$(b);
    $receiver.set_wxm5ur$(b, $receiver.get_za3lpa$(a));
    $receiver.set_wxm5ur$(a, $receiver_0);
    return Unit;
  }
  function partition_0($receiver, rng, k, cmp) {
    partition_3($receiver, rng.first, rng.last, k, partition$lambda, cmp, partition$lambda_0);
  }
  function partition_1($receiver, k, cmp) {
    partition_2($receiver, get_indices_0($receiver), k, cmp);
  }
  function partition$lambda_1($receiver, it) {
    return $receiver[it];
  }
  function partition$lambda_2($receiver, a, b) {
    var $receiver_0 = $receiver[b];
    $receiver[b] = $receiver[a];
    $receiver[a] = $receiver_0;
    return Unit;
  }
  function partition_2($receiver, rng, k, cmp) {
    partition_3($receiver, rng.first, rng.last, k, partition$lambda_1, cmp, partition$lambda_2);
  }
  function partition_3(elems, lt, rt, k, get, cmp, swap) {
    var left = lt;
    var right = rt;
    while (right > left) {
      if ((right - left | 0) > 600) {
        var n = right - left + 1 | 0;
        var i = k - left + 1 | 0;
        var z = Math_0.log(n);
        var x = 2.0 * z / 3.0;
        var s = 0.5 * Math_0.exp(x);
        var x_0 = z * s * (n - s) / n;
        var tmp$ = 0.5 * Math_0.sqrt(x_0);
        var x_1 = i - n / 2.0;
        var sd = tmp$ * Math_0.sign(x_1);
        var a = left;
        var b = numberToInt(k - i * s / n + sd);
        var newLeft = Math_0.max(a, b);
        var a_0 = right;
        var b_0 = numberToInt(k + (n - i | 0) * s / n + sd);
        var newRight = Math_0.min(a_0, b_0);
        partition_3(elems, newLeft, newRight, k, get, cmp, swap);
      }
      var t = get(elems, k);
      var i_0 = left;
      var j = right;
      swap(elems, left, k);
      if (cmp(get(elems, right), t) > 0) {
        swap(elems, right, left);
      }
      while (i_0 < j) {
        swap(elems, i_0, j);
        i_0 = i_0 + 1 | 0;
        j = j - 1 | 0;
        while (cmp(get(elems, i_0), t) < 0) {
          i_0 = i_0 + 1 | 0;
        }
        while (j >= 0 && cmp(get(elems, j), t) > 0) {
          j = j - 1 | 0;
        }
      }
      if (cmp(get(elems, left), t) === 0) {
        swap(elems, left, j);
      }
       else {
        j = j + 1 | 0;
        swap(elems, j, right);
      }
      if (j <= k) {
        left = j + 1 | 0;
      }
      if (k <= j) {
        right = j - 1 | 0;
      }
    }
  }
  function Plane() {
    this.p = MutableVec3f_init();
    this.n = MutableVec3f_init_1(Vec3f$Companion_getInstance().Y_AXIS);
  }
  Plane.prototype.intersectionPoint_m2314x$ = function (result, ray) {
    var denom = this.n.dot_czzhiu$(ray.direction);
    var eps;
    eps = package$math.FUZZY_EQ_F;
    if (!(Math_0.abs(denom) <= eps)) {
      var t = this.p.subtract_2gj7b4$(ray.origin, result).dot_czzhiu$(this.n) / denom;
      result.set_czzhiu$(ray.direction).scale_mx4ult$(t).add_czzhiu$(ray.origin);
      return t >= 0;
    }
    return false;
  };
  Plane.prototype.toVec4 = function () {
    return this.toVec4_5s4mpv$(MutableVec4f_init());
  };
  Plane.prototype.toVec4_5s4mpv$ = function (result) {
    result.x = this.n.x;
    result.y = this.n.y;
    result.z = this.n.z;
    result.w = this.n.times_czzhiu$(this.p);
    return result;
  };
  Plane.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Plane',
    interfaces: []
  };
  function distanceToLine($receiver, lineA, lineB) {
    var x = sqrDistanceToLine($receiver, lineA, lineB);
    return Math_0.sqrt(x);
  }
  function sqrDistanceToLine($receiver, lineA, lineB) {
    return sqrDistancePointToLine($receiver.x, $receiver.y, $receiver.z, lineA, lineB);
  }
  function sqrDistancePointToLine(x, y, z, lineA, lineB) {
    var rx = lineB.x - lineA.x;
    var ry = lineB.y - lineA.y;
    var rz = lineB.z - lineA.z;
    var dotPt = x * rx + y * ry + z * rz;
    var dotLineA = lineA.x * rx + lineA.y * ry + lineA.z * rz;
    var dotR = rx * rx + ry * ry + rz * rz;
    var l = (dotPt - dotLineA) / dotR;
    var nx = rx * l + lineA.x;
    var ny = ry * l + lineA.y;
    var nz = rz * l + lineA.z;
    var dx = nx - x;
    var dy = ny - y;
    var dz = nz - z;
    return dx * dx + dy * dy + dz * dz;
  }
  function nearestPointOnLine($receiver, lineA, lineB, result) {
    lineB.subtract_2gj7b4$(lineA, result);
    var l = ($receiver.dot_czzhiu$(result) - lineA.times_czzhiu$(result)) / result.times_czzhiu$(result);
    return result.scale_mx4ult$(l).add_czzhiu$(lineA);
  }
  function distanceToRay($receiver, ray) {
    return distanceToRay_0($receiver, ray.origin, ray.direction);
  }
  function distanceToRay_0($receiver, origin, direction) {
    var x = sqrDistanceToRay_0($receiver, origin, direction);
    return Math_0.sqrt(x);
  }
  function sqrDistanceToRay($receiver, ray) {
    return sqrDistanceToRay_0($receiver, ray.origin, ray.direction);
  }
  function sqrDistanceToRay_0($receiver, origin, direction) {
    return sqrDistancePointToRay($receiver.x, $receiver.y, $receiver.z, origin, direction);
  }
  function sqrDistancePointToRay(x, y, z, origin, direction) {
    var nx;
    var ny;
    var nz;
    var dot = x * direction.x + y * direction.y + z * direction.z;
    var l = (dot - origin.times_czzhiu$(direction)) / direction.times_czzhiu$(direction);
    if (l <= 0) {
      nx = origin.x - x;
      ny = origin.y - y;
      nz = origin.z - z;
    }
     else {
      nx = direction.x * l + origin.x - x;
      ny = direction.y * l + origin.y - y;
      nz = direction.z * l + origin.z - z;
    }
    return nx * nx + ny * ny + nz * nz;
  }
  function nearestPointOnRay($receiver, origin, direction, result) {
    var tmp$;
    var l = ($receiver.dot_czzhiu$(direction) - origin.times_czzhiu$(direction)) / direction.times_czzhiu$(direction);
    if (l <= 0) {
      tmp$ = result.set_czzhiu$(origin);
    }
     else {
      tmp$ = result.set_czzhiu$(direction).scale_mx4ult$(l).add_czzhiu$(origin);
    }
    return tmp$;
  }
  function distanceToEdge($receiver, edgeA, edgeB) {
    var x = sqrDistanceToEdge($receiver, edgeA, edgeB);
    return Math_0.sqrt(x);
  }
  function sqrDistanceToEdge($receiver, edgeA, edgeB) {
    return sqrDistancePointToEdge($receiver.x, $receiver.y, edgeA, edgeB);
  }
  function sqrDistancePointToEdge(x, y, edgeA, edgeB) {
    var rx = edgeB.x - edgeA.x;
    var ry = edgeB.y - edgeA.y;
    var dotPt = x * rx + y * ry;
    var dotEdgeA = edgeA.x * rx + edgeA.y * ry;
    var dotR = rx * rx + ry * ry;
    var l = (dotPt - dotEdgeA) / dotR;
    var nx;
    var ny;
    if (l <= 0) {
      nx = edgeA.x;
      ny = edgeA.y;
    }
     else if (l >= 1) {
      nx = edgeB.x;
      ny = edgeB.y;
    }
     else {
      nx = rx * l + edgeA.x;
      ny = ry * l + edgeA.y;
    }
    var dx = nx - x;
    var dy = ny - y;
    return dx * dx + dy * dy;
  }
  function nearestPointOnEdge($receiver, edgeA, edgeB, result) {
    var tmp$;
    edgeB.subtract_q2ruao$(edgeA, result);
    var l = ($receiver.dot_czzhjp$(result) - edgeA.times_czzhjp$(result)) / result.times_czzhjp$(result);
    if (l <= 0)
      tmp$ = result.set_czzhjp$(edgeA);
    else if (l >= 1)
      tmp$ = result.set_czzhjp$(edgeB);
    else
      tmp$ = result.scale_mx4ult$(l).add_czzhjp$(edgeA);
    return tmp$;
  }
  function distanceToEdge_0($receiver, edgeA, edgeB) {
    var x = sqrDistanceToEdge_0($receiver, edgeA, edgeB);
    return Math_0.sqrt(x);
  }
  function sqrDistanceToEdge_0($receiver, edgeA, edgeB) {
    return sqrDistancePointToEdge_0($receiver.x, $receiver.y, $receiver.z, edgeA, edgeB);
  }
  function sqrDistancePointToEdge_0(x, y, z, edgeA, edgeB) {
    var rx = edgeB.x - edgeA.x;
    var ry = edgeB.y - edgeA.y;
    var rz = edgeB.z - edgeA.z;
    var dotPt = x * rx + y * ry + z * rz;
    var dotEdgeA = edgeA.x * rx + edgeA.y * ry + edgeA.z * rz;
    var dotR = rx * rx + ry * ry + rz * rz;
    var l = (dotPt - dotEdgeA) / dotR;
    var nx;
    var ny;
    var nz;
    if (l <= 0) {
      nx = edgeA.x;
      ny = edgeA.y;
      nz = edgeA.z;
    }
     else if (l >= 1) {
      nx = edgeB.x;
      ny = edgeB.y;
      nz = edgeB.z;
    }
     else {
      nx = rx * l + edgeA.x;
      ny = ry * l + edgeA.y;
      nz = rz * l + edgeA.z;
    }
    var dx = nx - x;
    var dy = ny - y;
    var dz = nz - z;
    return dx * dx + dy * dy + dz * dz;
  }
  function nearestPointOnEdge_0($receiver, edgeA, edgeB, result) {
    var tmp$;
    edgeB.subtract_2gj7b4$(edgeA, result);
    var l = ($receiver.dot_czzhiu$(result) - edgeA.times_czzhiu$(result)) / result.times_czzhiu$(result);
    if (l <= 0)
      tmp$ = result.set_czzhiu$(edgeA);
    else if (l >= 1)
      tmp$ = result.set_czzhiu$(edgeB);
    else
      tmp$ = result.scale_mx4ult$(l).add_czzhiu$(edgeA);
    return tmp$;
  }
  function PointDistribution() {
  }
  PointDistribution.prototype.nextPoints_za3lpa$ = function (n) {
    var points = ArrayList_init_0();
    for (var i = 1; i <= n; i++) {
      var element = this.nextPoint();
      points.add_11rb$(element);
    }
    return points;
  };
  PointDistribution.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PointDistribution',
    interfaces: []
  };
  function CubicPointDistribution(size, center, random) {
    if (size === void 0)
      size = 1.0;
    if (center === void 0)
      center = Vec3f$Companion_getInstance().ZERO;
    if (random === void 0)
      random = defaultRandomInstance;
    PointDistribution.call(this);
    this.size = size;
    this.center = center;
    this.random = random;
    this.s_0 = this.size * 0.5;
  }
  CubicPointDistribution.prototype.nextPoint = function () {
    return new Vec3f(this.center.x + this.random.randomF_dleff0$(-this.s_0, this.s_0), this.center.y + this.random.randomF_dleff0$(-this.s_0, this.s_0), this.center.z + this.random.randomF_dleff0$(-this.s_0, this.s_0));
  };
  CubicPointDistribution.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CubicPointDistribution',
    interfaces: [PointDistribution]
  };
  function SphericalPointDistribution(radius, center, random) {
    if (radius === void 0)
      radius = 1.0;
    if (center === void 0)
      center = Vec3f$Companion_getInstance().ZERO;
    if (random === void 0)
      random = defaultRandomInstance;
    PointDistribution.call(this);
    this.radius = radius;
    this.center = center;
    this.random = random;
    this.rSqr_0 = this.radius * this.radius;
  }
  SphericalPointDistribution.prototype.nextPoint = function () {
    while (true) {
      var x = this.random.randomF_dleff0$(-this.radius, this.radius);
      var y = this.random.randomF_dleff0$(-this.radius, this.radius);
      var z = this.random.randomF_dleff0$(-this.radius, this.radius);
      if (x * x + y * y + z * z < this.rSqr_0) {
        return new Vec3f(this.center.x + x, this.center.y + y, this.center.z + z);
      }
    }
  };
  SphericalPointDistribution.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SphericalPointDistribution',
    interfaces: [PointDistribution]
  };
  var defaultRandomInstance;
  function randomI() {
    return defaultRandomInstance.randomI();
  }
  function randomI_0(min, max) {
    return defaultRandomInstance.randomI_vux9f0$(min, max);
  }
  function randomI_1(rng) {
    return defaultRandomInstance.randomI_vux9f0$(rng.first, rng.last);
  }
  function randomD() {
    return defaultRandomInstance.randomD();
  }
  function randomD_0(min, max) {
    return defaultRandomInstance.randomD_lu1900$(min, max);
  }
  function randomF() {
    return defaultRandomInstance.randomF();
  }
  function randomF_0(min, max) {
    return defaultRandomInstance.randomF_dleff0$(min, max);
  }
  function Random(seed) {
    this.x_i5bv4$_0 = seed;
    this.y_i5bu9$_0 = 362436000;
    this.z_i5bte$_0 = 521288629;
    this.c_i5cd7$_0 = 7654321;
  }
  Random.prototype.randomI = function () {
    this.x_i5bv4$_0 = (69069 * this.x_i5bv4$_0 | 0) + 12345 | 0;
    this.y_i5bu9$_0 = this.y_i5bu9$_0 ^ this.y_i5bu9$_0 << 13;
    this.y_i5bu9$_0 = this.y_i5bu9$_0 ^ this.y_i5bu9$_0 >> 17;
    this.y_i5bu9$_0 = this.y_i5bu9$_0 ^ this.y_i5bu9$_0 << 5;
    var t = L698769069.multiply(Kotlin.Long.fromInt(this.z_i5bte$_0)).add(Kotlin.Long.fromInt(this.c_i5cd7$_0));
    this.c_i5cd7$_0 = t.shiftRight(32).toInt();
    this.z_i5bte$_0 = t.toInt();
    return this.x_i5bv4$_0 + this.y_i5bu9$_0 + this.z_i5bte$_0 | 0;
  };
  Random.prototype.randomI_vux9f0$ = function (min, max) {
    return abs(this.randomI()) % (max - min + 1 | 0) + min | 0;
  };
  Random.prototype.randomI_n8acyv$ = function (rng) {
    return this.randomI_vux9f0$(rng.first, rng.last);
  };
  Random.prototype.randomF = function () {
    return abs(this.randomI()) / 2147483647;
  };
  Random.prototype.randomF_dleff0$ = function (min, max) {
    return this.randomF() * (max - min) + min;
  };
  Random.prototype.randomD = function () {
    var l = abs_0(Kotlin.Long.fromInt(this.randomI())).shiftLeft(32).or(abs_0(Kotlin.Long.fromInt(this.randomI())));
    return abs_0(l).toNumber() / Long$Companion$MAX_VALUE.toNumber();
  };
  Random.prototype.randomD_lu1900$ = function (min, max) {
    return this.randomD() * (max - min) + min;
  };
  Random.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Random',
    interfaces: []
  };
  function Ray() {
    this.origin = MutableVec3f_init();
    this.direction = MutableVec3f_init();
  }
  Ray.prototype.set_nvyeur$ = function (other) {
    this.origin.set_czzhiu$(other.origin);
    this.direction.set_czzhiu$(other.direction);
  };
  Ray.prototype.setFromLookAt_4lfkt4$ = function (origin, lookAt) {
    this.origin.set_czzhiu$(origin);
    this.direction.set_czzhiu$(lookAt).subtract_czzhiu$(origin).norm();
  };
  Ray.prototype.distanceToPoint_czzhiu$ = function (point) {
    return distanceToRay_0(point, this.origin, this.direction);
  };
  Ray.prototype.sqrDistanceToPoint_czzhiu$ = function (point) {
    return sqrDistanceToRay_0(point, this.origin, this.direction);
  };
  Ray.prototype.sqrDistanceToPoint_y2kzbl$ = function (x, y, z) {
    return sqrDistancePointToRay(x, y, z, this.origin, this.direction);
  };
  Ray.prototype.transformBy_d4zu6j$ = function (matrix) {
    matrix.transform_w1lst9$(this.origin);
    matrix.transform_w1lst9$(this.direction, 0.0).norm();
  };
  Ray.prototype.toString = function () {
    return '{origin=' + this.origin + ', direction=' + this.direction + '}';
  };
  Ray.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Ray',
    interfaces: []
  };
  function RayTest() {
    this.ray = new Ray();
    this.intHitPosition_0 = MutableVec3f_init();
    this.intHitPositionLocal_0 = MutableVec3f_init();
    this.hitNode_s1zft8$_0 = null;
    this.hitDistanceSqr_fy7zgf$_0 = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
  }
  Object.defineProperty(RayTest.prototype, 'hitPosition', {
    get: function () {
      return this.intHitPosition_0;
    }
  });
  Object.defineProperty(RayTest.prototype, 'hitPositionLocal', {
    get: function () {
      return this.intHitPositionLocal_0;
    }
  });
  Object.defineProperty(RayTest.prototype, 'hitNode', {
    get: function () {
      return this.hitNode_s1zft8$_0;
    },
    set: function (hitNode) {
      this.hitNode_s1zft8$_0 = hitNode;
    }
  });
  Object.defineProperty(RayTest.prototype, 'hitDistanceSqr', {
    get: function () {
      return this.hitDistanceSqr_fy7zgf$_0;
    },
    set: function (hitDistanceSqr) {
      this.hitDistanceSqr_fy7zgf$_0 = hitDistanceSqr;
    }
  });
  Object.defineProperty(RayTest.prototype, 'isHit', {
    get: function () {
      return this.hitDistanceSqr < kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    }
  });
  RayTest.prototype.clear = function () {
    this.intHitPosition_0.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.intHitPositionLocal_0.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.hitNode = null;
    this.hitDistanceSqr = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
  };
  RayTest.prototype.setHit_vfk0k2$ = function (node, distance) {
    this.intHitPosition_0.set_czzhiu$(this.ray.direction).scale_mx4ult$(distance).add_czzhiu$(this.ray.origin);
    this.setHit_ulhqnp$(node, this.intHitPosition_0);
  };
  RayTest.prototype.setHit_ulhqnp$ = function (node, position) {
    this.intHitPosition_0.set_czzhiu$(position);
    this.intHitPositionLocal_0.set_czzhiu$(position);
    this.hitNode = node;
    this.hitDistanceSqr = this.hitPosition.sqrDistance_czzhiu$(this.ray.origin);
  };
  RayTest.prototype.transformBy_d4zu6j$ = function (matrix) {
    this.ray.transformBy_d4zu6j$(matrix);
    if (this.isHit) {
      matrix.transform_w1lst9$(this.intHitPosition_0);
      this.hitDistanceSqr = this.hitPosition.sqrDistance_czzhiu$(this.ray.origin);
    }
  };
  RayTest.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RayTest',
    interfaces: []
  };
  function Vec2f(x, y) {
    Vec2f$Companion_getInstance();
    this.fields = new Float32Array(2);
    this.fields[0] = x;
    this.fields[1] = y;
  }
  Object.defineProperty(Vec2f.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    }
  });
  Object.defineProperty(Vec2f.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    }
  });
  Vec2f.prototype.add_q2ruao$ = function (other, result) {
    return result.set_czzhjp$(this).add_czzhjp$(other);
  };
  Vec2f.prototype.distance_czzhjp$ = function (other) {
    var x = this.sqrDistance_czzhjp$(other);
    return Math_0.sqrt(x);
  };
  Vec2f.prototype.dot_czzhjp$ = function (other) {
    return this.x * other.x + this.y * other.y;
  };
  Vec2f.prototype.isFuzzyEqual_rnua8g$ = function (other, eps) {
    if (eps === void 0)
      eps = FUZZY_EQ_F;
    var $receiver = this.x - other.x;
    var tmp$ = Math_0.abs($receiver) <= eps;
    if (tmp$) {
      var $receiver_0 = this.y - other.y;
      tmp$ = Math_0.abs($receiver_0) <= eps;
    }
    return tmp$;
  };
  Vec2f.prototype.length = function () {
    var x = this.sqrLength();
    return Math_0.sqrt(x);
  };
  Vec2f.prototype.mix_5uckat$ = function (other, weight, result) {
    result.x = other.x * weight + this.x * (1.0 - weight);
    result.y = other.y * weight + this.y * (1.0 - weight);
    return result;
  };
  Vec2f.prototype.mul_q2ruao$ = function (other, result) {
    return result.set_czzhjp$(this).mul_czzhjp$(other);
  };
  Vec2f.prototype.norm_5s4mrl$ = function (result) {
    return result.set_czzhjp$(this).norm();
  };
  Vec2f.prototype.rotate_749b9g$ = function (angleDeg, result) {
    return result.set_czzhjp$(this).rotate_mx4ult$(angleDeg);
  };
  Vec2f.prototype.scale_749b9g$ = function (factor, result) {
    return result.set_czzhjp$(this).scale_mx4ult$(factor);
  };
  Vec2f.prototype.sqrDistance_czzhjp$ = function (other) {
    var dx = this.x - other.x;
    var dy = this.y - other.y;
    return dx * dx + dy * dy;
  };
  Vec2f.prototype.sqrLength = function () {
    return this.x * this.x + this.y * this.y;
  };
  Vec2f.prototype.subtract_q2ruao$ = function (other, result) {
    return result.set_czzhjp$(this).subtract_czzhjp$(other);
  };
  Vec2f.prototype.get_za3lpa$ = function (i) {
    return this.fields[i];
  };
  Vec2f.prototype.times_czzhjp$ = function (other) {
    return this.dot_czzhjp$(other);
  };
  Vec2f.prototype.toString = function () {
    return '(' + this.x + ', ' + this.y + ')';
  };
  Vec2f.prototype.toVec2d = function () {
    return new Vec2d(this.x, this.y);
  };
  Vec2f.prototype.toMutableVec2d = function () {
    return this.toMutableVec2d_5s4mrn$(MutableVec2d_init());
  };
  Vec2f.prototype.toMutableVec2d_5s4mrn$ = function (result) {
    return result.set_lu1900$(this.x, this.y);
  };
  Vec2f.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!Kotlin.isType(other, Vec2f))
      return false;
    if (this.x !== other.x)
      return false;
    if (this.y !== other.y)
      return false;
    return true;
  };
  Vec2f.prototype.hashCode = function () {
    var result = hashCode(this.x);
    result = (31 * result | 0) + hashCode(this.y) | 0;
    return result;
  };
  function Vec2f$Companion() {
    Vec2f$Companion_instance = this;
    this.ZERO = Vec2f_init(0.0);
    this.X_AXIS = new Vec2f(1.0, 0.0);
    this.Y_AXIS = new Vec2f(0.0, 1.0);
    this.NEG_X_AXIS = new Vec2f(-1.0, 0.0);
    this.NEG_Y_AXIS = new Vec2f(0.0, -1.0);
  }
  Vec2f$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vec2f$Companion_instance = null;
  function Vec2f$Companion_getInstance() {
    if (Vec2f$Companion_instance === null) {
      new Vec2f$Companion();
    }
    return Vec2f$Companion_instance;
  }
  Vec2f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec2f',
    interfaces: []
  };
  function Vec2f_init(f, $this) {
    $this = $this || Object.create(Vec2f.prototype);
    Vec2f.call($this, f, f);
    return $this;
  }
  function Vec2f_init_0(v, $this) {
    $this = $this || Object.create(Vec2f.prototype);
    Vec2f.call($this, v.x, v.y);
    return $this;
  }
  function MutableVec2f(x, y) {
    Vec2f.call(this, x, y);
  }
  Object.defineProperty(MutableVec2f.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    },
    set: function (value) {
      this.set_24o109$(0, value);
    }
  });
  Object.defineProperty(MutableVec2f.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    },
    set: function (value) {
      this.set_24o109$(1, value);
    }
  });
  MutableVec2f.prototype.add_czzhjp$ = function (other) {
    this.x = this.x + other.x;
    this.y = this.y + other.y;
    return this;
  };
  MutableVec2f.prototype.mul_czzhjp$ = function (other) {
    this.x = this.x * other.x;
    this.y = this.y * other.y;
    return this;
  };
  MutableVec2f.prototype.norm = function () {
    return this.scale_mx4ult$(1.0 / this.length());
  };
  MutableVec2f.prototype.rotate_mx4ult$ = function (angleDeg) {
    var rad = angleDeg * package$math.DEG_2_RAD;
    var cos = Math_0.cos(rad);
    var sin = Math_0.sin(rad);
    var rx = this.x * cos - this.y * sin;
    var ry = this.x * sin + this.y * cos;
    this.x = rx;
    this.y = ry;
    return this;
  };
  MutableVec2f.prototype.scale_mx4ult$ = function (factor) {
    this.x = this.x * factor;
    this.y = this.y * factor;
    return this;
  };
  MutableVec2f.prototype.set_dleff0$ = function (x, y) {
    this.x = x;
    this.y = y;
    return this;
  };
  MutableVec2f.prototype.set_czzhjp$ = function (other) {
    this.x = other.x;
    this.y = other.y;
    return this;
  };
  MutableVec2f.prototype.subtract_czzhjp$ = function (other) {
    this.x = this.x - other.x;
    this.y = this.y - other.y;
    return this;
  };
  MutableVec2f.prototype.divAssign_mx4ult$ = function (div) {
    this.scale_mx4ult$(1.0 / div);
  };
  MutableVec2f.prototype.minusAssign_czzhjp$ = function (other) {
    this.subtract_czzhjp$(other);
  };
  MutableVec2f.prototype.plusAssign_czzhjp$ = function (other) {
    this.add_czzhjp$(other);
  };
  MutableVec2f.prototype.set_24o109$ = function (i, v) {
    this.fields[i] = v;
  };
  MutableVec2f.prototype.timesAssign_mx4ult$ = function (factor) {
    this.scale_mx4ult$(factor);
  };
  MutableVec2f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MutableVec2f',
    interfaces: [Vec2f]
  };
  function MutableVec2f_init($this) {
    $this = $this || Object.create(MutableVec2f.prototype);
    MutableVec2f.call($this, 0.0, 0.0);
    return $this;
  }
  function MutableVec2f_init_0(f, $this) {
    $this = $this || Object.create(MutableVec2f.prototype);
    MutableVec2f.call($this, f, f);
    return $this;
  }
  function MutableVec2f_init_1(v, $this) {
    $this = $this || Object.create(MutableVec2f.prototype);
    MutableVec2f.call($this, v.x, v.y);
    return $this;
  }
  function Vec2d(x, y) {
    Vec2d$Companion_getInstance();
    this.fields = new Float64Array(2);
    this.fields[0] = x;
    this.fields[1] = y;
  }
  Object.defineProperty(Vec2d.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    }
  });
  Object.defineProperty(Vec2d.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    }
  });
  Vec2d.prototype.add_b18iao$ = function (other, result) {
    return result.set_czzhjr$(this).add_czzhjr$(other);
  };
  Vec2d.prototype.distance_czzhjr$ = function (other) {
    var x = this.sqrDistance_czzhjr$(other);
    return Math_0.sqrt(x);
  };
  Vec2d.prototype.dot_czzhjr$ = function (other) {
    return this.x * other.x + this.y * other.y;
  };
  Vec2d.prototype.isFuzzyEqual_f3xr3v$ = function (other, eps) {
    if (eps === void 0)
      eps = FUZZY_EQ_D;
    var $receiver = this.x - other.x;
    var tmp$ = Math_0.abs($receiver) <= eps;
    if (tmp$) {
      var $receiver_0 = this.y - other.y;
      tmp$ = Math_0.abs($receiver_0) <= eps;
    }
    return tmp$;
  };
  Vec2d.prototype.length = function () {
    var x = this.sqrLength();
    return Math_0.sqrt(x);
  };
  Vec2d.prototype.mix_3jrcj6$ = function (other, weight, result) {
    result.x = other.x * weight + this.x * (1.0 - weight);
    result.y = other.y * weight + this.y * (1.0 - weight);
    return result;
  };
  Vec2d.prototype.mul_b18iao$ = function (other, result) {
    return result.set_czzhjr$(this).mul_czzhjr$(other);
  };
  Vec2d.prototype.norm_5s4mrn$ = function (result) {
    return result.set_czzhjr$(this).norm();
  };
  Vec2d.prototype.rotate_b0flcl$ = function (angleDeg, result) {
    return result.set_czzhjr$(this).rotate_14dthe$(angleDeg);
  };
  Vec2d.prototype.scale_b0flcl$ = function (factor, result) {
    return result.set_czzhjr$(this).scale_14dthe$(factor);
  };
  Vec2d.prototype.sqrDistance_czzhjr$ = function (other) {
    var dx = this.x - other.x;
    var dy = this.y - other.y;
    return dx * dx + dy * dy;
  };
  Vec2d.prototype.sqrLength = function () {
    return this.x * this.x + this.y * this.y;
  };
  Vec2d.prototype.subtract_b18iao$ = function (other, result) {
    return result.set_czzhjr$(this).subtract_czzhjr$(other);
  };
  Vec2d.prototype.get_za3lpa$ = function (i) {
    return this.fields[i];
  };
  Vec2d.prototype.times_czzhjr$ = function (other) {
    return this.dot_czzhjr$(other);
  };
  Vec2d.prototype.toString = function () {
    return '(' + this.x + ', ' + this.y + ')';
  };
  Vec2d.prototype.toVec2f = function () {
    return new Vec2f(this.x, this.y);
  };
  Vec2d.prototype.toMutableVec2f = function () {
    return this.toMutableVec2f_5s4mrl$(MutableVec2f_init());
  };
  Vec2d.prototype.toMutableVec2f_5s4mrl$ = function (result) {
    return result.set_dleff0$(this.x, this.y);
  };
  Vec2d.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!Kotlin.isType(other, Vec2d))
      return false;
    if (this.x !== other.x)
      return false;
    if (this.y !== other.y)
      return false;
    return true;
  };
  Vec2d.prototype.hashCode = function () {
    var result = hashCode(this.x);
    result = (31 * result | 0) + hashCode(this.y) | 0;
    return result;
  };
  function Vec2d$Companion() {
    Vec2d$Companion_instance = this;
    this.ZERO = Vec2d_init(0.0);
    this.X_AXIS = new Vec2d(1.0, 0.0);
    this.Y_AXIS = new Vec2d(0.0, 1.0);
    this.NEG_X_AXIS = new Vec2d(-1.0, 0.0);
    this.NEG_Y_AXIS = new Vec2d(0.0, -1.0);
  }
  Vec2d$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vec2d$Companion_instance = null;
  function Vec2d$Companion_getInstance() {
    if (Vec2d$Companion_instance === null) {
      new Vec2d$Companion();
    }
    return Vec2d$Companion_instance;
  }
  Vec2d.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec2d',
    interfaces: []
  };
  function Vec2d_init(f, $this) {
    $this = $this || Object.create(Vec2d.prototype);
    Vec2d.call($this, f, f);
    return $this;
  }
  function Vec2d_init_0(v, $this) {
    $this = $this || Object.create(Vec2d.prototype);
    Vec2d.call($this, v.x, v.y);
    return $this;
  }
  function MutableVec2d(x, y) {
    Vec2d.call(this, x, y);
  }
  Object.defineProperty(MutableVec2d.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    },
    set: function (value) {
      this.set_5wr77w$(0, value);
    }
  });
  Object.defineProperty(MutableVec2d.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    },
    set: function (value) {
      this.set_5wr77w$(1, value);
    }
  });
  MutableVec2d.prototype.add_czzhjr$ = function (other) {
    this.x = this.x + other.x;
    this.y = this.y + other.y;
    return this;
  };
  MutableVec2d.prototype.mul_czzhjr$ = function (other) {
    this.x = this.x * other.x;
    this.y = this.y * other.y;
    return this;
  };
  MutableVec2d.prototype.norm = function () {
    return this.scale_14dthe$(1.0 / this.length());
  };
  MutableVec2d.prototype.rotate_14dthe$ = function (angleDeg) {
    var rad = angleDeg * package$math.DEG_2_RAD;
    var cos = Math_0.cos(rad);
    var sin = Math_0.sin(rad);
    var rx = this.x * cos - this.y * sin;
    var ry = this.x * sin + this.y * cos;
    this.x = rx;
    this.y = ry;
    return this;
  };
  MutableVec2d.prototype.scale_14dthe$ = function (factor) {
    this.x = this.x * factor;
    this.y = this.y * factor;
    return this;
  };
  MutableVec2d.prototype.set_lu1900$ = function (x, y) {
    this.x = x;
    this.y = y;
    return this;
  };
  MutableVec2d.prototype.set_czzhjr$ = function (other) {
    this.x = other.x;
    this.y = other.y;
    return this;
  };
  MutableVec2d.prototype.subtract_czzhjr$ = function (other) {
    this.x = this.x - other.x;
    this.y = this.y - other.y;
    return this;
  };
  MutableVec2d.prototype.divAssign_14dthe$ = function (div) {
    this.scale_14dthe$(1.0 / div);
  };
  MutableVec2d.prototype.minusAssign_czzhjr$ = function (other) {
    this.subtract_czzhjr$(other);
  };
  MutableVec2d.prototype.plusAssign_czzhjr$ = function (other) {
    this.add_czzhjr$(other);
  };
  MutableVec2d.prototype.set_5wr77w$ = function (i, v) {
    this.fields[i] = v;
  };
  MutableVec2d.prototype.timesAssign_14dthe$ = function (factor) {
    this.scale_14dthe$(factor);
  };
  MutableVec2d.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MutableVec2d',
    interfaces: [Vec2d]
  };
  function MutableVec2d_init($this) {
    $this = $this || Object.create(MutableVec2d.prototype);
    MutableVec2d.call($this, 0.0, 0.0);
    return $this;
  }
  function MutableVec2d_init_0(f, $this) {
    $this = $this || Object.create(MutableVec2d.prototype);
    MutableVec2d.call($this, f, f);
    return $this;
  }
  function MutableVec2d_init_1(v, $this) {
    $this = $this || Object.create(MutableVec2d.prototype);
    MutableVec2d.call($this, v.x, v.y);
    return $this;
  }
  function Vec3f(x, y, z) {
    Vec3f$Companion_getInstance();
    this.fields = new Float32Array(3);
    this.fields[0] = x;
    this.fields[1] = y;
    this.fields[2] = z;
  }
  Object.defineProperty(Vec3f.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    }
  });
  Object.defineProperty(Vec3f.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    }
  });
  Object.defineProperty(Vec3f.prototype, 'z', {
    get: function () {
      return this.get_za3lpa$(2);
    }
  });
  Vec3f.prototype.add_2gj7b4$ = function (other, result) {
    return result.set_czzhiu$(this).add_czzhiu$(other);
  };
  Vec3f.prototype.cross_2gj7b4$ = function (other, result) {
    result.x = this.y * other.z - this.z * other.y;
    result.y = this.z * other.x - this.x * other.z;
    result.z = this.x * other.y - this.y * other.x;
    return result;
  };
  Vec3f.prototype.distance_czzhiu$ = function (other) {
    var x = this.sqrDistance_czzhiu$(other);
    return Math_0.sqrt(x);
  };
  Vec3f.prototype.dot_czzhiu$ = function (other) {
    return this.x * other.x + this.y * other.y + this.z * other.z;
  };
  Vec3f.prototype.isFuzzyEqual_2qa7tb$ = function (other, eps) {
    if (eps === void 0)
      eps = FUZZY_EQ_F;
    var $receiver = this.x - other.x;
    var tmp$ = Math_0.abs($receiver) <= eps;
    if (tmp$) {
      var $receiver_0 = this.y - other.y;
      tmp$ = Math_0.abs($receiver_0) <= eps;
    }
    var tmp$_0 = tmp$;
    if (tmp$_0) {
      var $receiver_1 = this.z - other.z;
      tmp$_0 = Math_0.abs($receiver_1) <= eps;
    }
    return tmp$_0;
  };
  Vec3f.prototype.length = function () {
    var x = this.sqrLength();
    return Math_0.sqrt(x);
  };
  Vec3f.prototype.mix_a6wx89$ = function (other, weight, result) {
    result.x = other.x * weight + this.x * (1.0 - weight);
    result.y = other.y * weight + this.y * (1.0 - weight);
    result.z = other.z * weight + this.z * (1.0 - weight);
    return result;
  };
  Vec3f.prototype.mul_2gj7b4$ = function (other, result) {
    return result.set_czzhiu$(this).mul_czzhiu$(other);
  };
  Vec3f.prototype.norm_5s4mqq$ = function (result) {
    return result.set_czzhiu$(this).norm();
  };
  Vec3f.prototype.planeSpace_t87wgk$ = function (p, q) {
    var x = this.z;
    if (Math_0.abs(x) > SQRT_1_2) {
      var a = this.y * this.y + this.z * this.z;
      var k = 1.0 / Math_0.sqrt(a);
      p.x = 0.0;
      p.y = -this.z * k;
      p.z = this.y * k;
      q.x = a * k;
      q.y = -this.x * p.z;
      q.z = this.x * p.y;
    }
     else {
      var a_0 = this.x * this.x + this.y * this.y;
      var k_0 = 1.0 / Math_0.sqrt(a_0);
      p.x = -this.y * k_0;
      p.y = this.x * k_0;
      p.z = 0.0;
      q.x = -this.z * p.y;
      q.y = this.z * p.x;
      q.z = a_0 * k_0;
    }
  };
  Vec3f.prototype.rotate_hx2y1u$ = function (angleDeg, axisX, axisY, axisZ, result) {
    return result.set_czzhiu$(this).rotate_7b5o5w$(angleDeg, axisX, axisY, axisZ);
  };
  Vec3f.prototype.rotate_vqa64j$ = function (angleDeg, axis, result) {
    return result.set_czzhiu$(this).rotate_7b5o5w$(angleDeg, axis.x, axis.y, axis.z);
  };
  Vec3f.prototype.scale_749b8l$ = function (factor, result) {
    return result.set_czzhiu$(this).scale_mx4ult$(factor);
  };
  Vec3f.prototype.sqrDistance_czzhiu$ = function (other) {
    var dx = this.x - other.x;
    var dy = this.y - other.y;
    var dz = this.z - other.z;
    return dx * dx + dy * dy + dz * dz;
  };
  Vec3f.prototype.sqrLength = function () {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  };
  Vec3f.prototype.subtract_2gj7b4$ = function (other, result) {
    return result.set_czzhiu$(this).subtract_czzhiu$(other);
  };
  Vec3f.prototype.get_za3lpa$ = function (i) {
    return this.fields[i];
  };
  Vec3f.prototype.times_czzhiu$ = function (other) {
    return this.dot_czzhiu$(other);
  };
  Vec3f.prototype.toString = function () {
    return '(' + this.x + ', ' + this.y + ', ' + this.z + ')';
  };
  Vec3f.prototype.toVec3d = function () {
    return new Vec3d(this.x, this.y, this.z);
  };
  Vec3f.prototype.toMutableVec3d = function () {
    return this.toMutableVec3d_5s4mqs$(MutableVec3d_init());
  };
  Vec3f.prototype.toMutableVec3d_5s4mqs$ = function (result) {
    return result.set_yvo9jy$(this.x, this.y, this.z);
  };
  Vec3f.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!Kotlin.isType(other, Vec3f))
      return false;
    if (this.x !== other.x)
      return false;
    if (this.y !== other.y)
      return false;
    if (this.z !== other.z)
      return false;
    return true;
  };
  Vec3f.prototype.hashCode = function () {
    var result = hashCode(this.x);
    result = (31 * result | 0) + hashCode(this.y) | 0;
    result = (31 * result | 0) + hashCode(this.z) | 0;
    return result;
  };
  function Vec3f$Companion() {
    Vec3f$Companion_instance = this;
    this.ZERO = Vec3f_init(0.0);
    this.X_AXIS = new Vec3f(1.0, 0.0, 0.0);
    this.Y_AXIS = new Vec3f(0.0, 1.0, 0.0);
    this.Z_AXIS = new Vec3f(0.0, 0.0, 1.0);
    this.NEG_X_AXIS = new Vec3f(-1.0, 0.0, 0.0);
    this.NEG_Y_AXIS = new Vec3f(0.0, -1.0, 0.0);
    this.NEG_Z_AXIS = new Vec3f(0.0, 0.0, -1.0);
  }
  Vec3f$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vec3f$Companion_instance = null;
  function Vec3f$Companion_getInstance() {
    if (Vec3f$Companion_instance === null) {
      new Vec3f$Companion();
    }
    return Vec3f$Companion_instance;
  }
  Vec3f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec3f',
    interfaces: []
  };
  function Vec3f_init(f, $this) {
    $this = $this || Object.create(Vec3f.prototype);
    Vec3f.call($this, f, f, f);
    return $this;
  }
  function Vec3f_init_0(v, $this) {
    $this = $this || Object.create(Vec3f.prototype);
    Vec3f.call($this, v.x, v.y, v.z);
    return $this;
  }
  function MutableVec3f(x, y, z) {
    Vec3f.call(this, x, y, z);
  }
  Object.defineProperty(MutableVec3f.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    },
    set: function (value) {
      this.set_24o109$(0, value);
    }
  });
  Object.defineProperty(MutableVec3f.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    },
    set: function (value) {
      this.set_24o109$(1, value);
    }
  });
  Object.defineProperty(MutableVec3f.prototype, 'z', {
    get: function () {
      return this.get_za3lpa$(2);
    },
    set: function (value) {
      this.set_24o109$(2, value);
    }
  });
  MutableVec3f.prototype.add_czzhiu$ = function (other) {
    this.x = this.x + other.x;
    this.y = this.y + other.y;
    this.z = this.z + other.z;
    return this;
  };
  MutableVec3f.prototype.mul_czzhiu$ = function (other) {
    this.x = this.x * other.x;
    this.y = this.y * other.y;
    this.z = this.z * other.z;
    return this;
  };
  MutableVec3f.prototype.norm = function () {
    return this.scale_mx4ult$(1.0 / this.length());
  };
  MutableVec3f.prototype.rotate_7b5o5w$ = function (angleDeg, axisX, axisY, axisZ) {
    var rad = angleDeg * package$math.DEG_2_RAD;
    var c = Math_0.cos(rad);
    var c1 = 1.0 - c;
    var s = Math_0.sin(rad);
    var rx = this.x * (axisX * axisX * c1 + c) + this.y * (axisX * axisY * c1 - axisZ * s) + this.z * (axisX * axisZ * c1 + axisY * s);
    var ry = this.x * (axisY * axisX * c1 + axisZ * s) + this.y * (axisY * axisY * c1 + c) + this.z * (axisY * axisZ * c1 - axisX * s);
    var rz = this.x * (axisX * axisZ * c1 - axisY * s) + this.y * (axisY * axisZ * c1 + axisX * s) + this.z * (axisZ * axisZ * c1 + c);
    this.x = rx;
    this.y = ry;
    this.z = rz;
    return this;
  };
  MutableVec3f.prototype.rotate_ad55pp$ = function (angleDeg, axis) {
    return this.rotate_7b5o5w$(angleDeg, axis.x, axis.y, axis.z);
  };
  MutableVec3f.prototype.scale_mx4ult$ = function (factor) {
    this.x = this.x * factor;
    this.y = this.y * factor;
    this.z = this.z * factor;
    return this;
  };
  MutableVec3f.prototype.set_y2kzbl$ = function (x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  };
  MutableVec3f.prototype.set_czzhiu$ = function (other) {
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
    return this;
  };
  MutableVec3f.prototype.subtract_czzhiu$ = function (other) {
    this.x = this.x - other.x;
    this.y = this.y - other.y;
    this.z = this.z - other.z;
    return this;
  };
  MutableVec3f.prototype.divAssign_mx4ult$ = function (div) {
    this.scale_mx4ult$(1.0 / div);
  };
  MutableVec3f.prototype.minusAssign_czzhiu$ = function (other) {
    this.subtract_czzhiu$(other);
  };
  MutableVec3f.prototype.plusAssign_czzhiu$ = function (other) {
    this.add_czzhiu$(other);
  };
  MutableVec3f.prototype.set_24o109$ = function (i, v) {
    this.fields[i] = v;
  };
  MutableVec3f.prototype.timesAssign_mx4ult$ = function (factor) {
    this.scale_mx4ult$(factor);
  };
  MutableVec3f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MutableVec3f',
    interfaces: [Vec3f]
  };
  function MutableVec3f_init($this) {
    $this = $this || Object.create(MutableVec3f.prototype);
    MutableVec3f.call($this, 0.0, 0.0, 0.0);
    return $this;
  }
  function MutableVec3f_init_0(f, $this) {
    $this = $this || Object.create(MutableVec3f.prototype);
    MutableVec3f.call($this, f, f, f);
    return $this;
  }
  function MutableVec3f_init_1(v, $this) {
    $this = $this || Object.create(MutableVec3f.prototype);
    MutableVec3f.call($this, v.x, v.y, v.z);
    return $this;
  }
  function Vec3d(x, y, z) {
    Vec3d$Companion_getInstance();
    this.fields = new Float64Array(3);
    this.fields[0] = x;
    this.fields[1] = y;
    this.fields[2] = z;
  }
  Object.defineProperty(Vec3d.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    }
  });
  Object.defineProperty(Vec3d.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    }
  });
  Object.defineProperty(Vec3d.prototype, 'z', {
    get: function () {
      return this.get_za3lpa$(2);
    }
  });
  Vec3d.prototype.add_vgki2o$ = function (other, result) {
    return result.set_czzhiw$(this).add_czzhiw$(other);
  };
  Vec3d.prototype.cross_vgki2o$ = function (other, result) {
    result.x = this.y * other.z - this.z * other.y;
    result.y = this.z * other.x - this.x * other.z;
    result.z = this.x * other.y - this.y * other.x;
    return result;
  };
  Vec3d.prototype.distance_czzhiw$ = function (other) {
    var x = this.sqrDistance_czzhiw$(other);
    return Math_0.sqrt(x);
  };
  Vec3d.prototype.dot_czzhiw$ = function (other) {
    return this.x * other.x + this.y * other.y + this.z * other.z;
  };
  Vec3d.prototype.isFuzzyEqual_6nz8ey$ = function (other, eps) {
    if (eps === void 0)
      eps = FUZZY_EQ_D;
    var $receiver = this.x - other.x;
    var tmp$ = Math_0.abs($receiver) <= eps;
    if (tmp$) {
      var $receiver_0 = this.y - other.y;
      tmp$ = Math_0.abs($receiver_0) <= eps;
    }
    var tmp$_0 = tmp$;
    if (tmp$_0) {
      var $receiver_1 = this.z - other.z;
      tmp$_0 = Math_0.abs($receiver_1) <= eps;
    }
    return tmp$_0;
  };
  Vec3d.prototype.length = function () {
    var x = this.sqrLength();
    return Math_0.sqrt(x);
  };
  Vec3d.prototype.mix_3odno2$ = function (other, weight, result) {
    result.x = other.x * weight + this.x * (1.0 - weight);
    result.y = other.y * weight + this.y * (1.0 - weight);
    result.z = other.z * weight + this.z * (1.0 - weight);
    return result;
  };
  Vec3d.prototype.mul_vgki2o$ = function (other, result) {
    return result.set_czzhiw$(this).mul_czzhiw$(other);
  };
  Vec3d.prototype.norm_5s4mqs$ = function (result) {
    return result.set_czzhiw$(this).norm();
  };
  Vec3d.prototype.planeSpace_7vsg4s$ = function (p, q) {
    var x = this.z;
    if (Math_0.abs(x) > SQRT_1_2) {
      var a = this.y * this.y + this.z * this.z;
      var k = 1.0 / Math_0.sqrt(a);
      p.x = 0.0;
      p.y = -this.z * k;
      p.z = this.y * k;
      q.x = a * k;
      q.y = -this.x * p.z;
      q.z = this.x * p.y;
    }
     else {
      var a_0 = this.x * this.x + this.y * this.y;
      var k_0 = 1.0 / Math_0.sqrt(a_0);
      p.x = -this.y * k_0;
      p.y = this.x * k_0;
      p.z = 0.0;
      q.x = -this.z * p.y;
      q.y = this.z * p.x;
      q.z = a_0 * k_0;
    }
  };
  Vec3d.prototype.rotate_8uuoh8$ = function (angleDeg, axisX, axisY, axisZ, result) {
    return result.set_czzhiw$(this).rotate_6y0v78$(angleDeg, axisX, axisY, axisZ);
  };
  Vec3d.prototype.rotate_cvw8z2$ = function (angleDeg, axis, result) {
    return result.set_czzhiw$(this).rotate_6y0v78$(angleDeg, axis.x, axis.y, axis.z);
  };
  Vec3d.prototype.scale_b0flbq$ = function (factor, result) {
    return result.set_czzhiw$(this).scale_14dthe$(factor);
  };
  Vec3d.prototype.sqrDistance_czzhiw$ = function (other) {
    var dx = this.x - other.x;
    var dy = this.y - other.y;
    var dz = this.z - other.z;
    return dx * dx + dy * dy + dz * dz;
  };
  Vec3d.prototype.sqrLength = function () {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  };
  Vec3d.prototype.subtract_vgki2o$ = function (other, result) {
    return result.set_czzhiw$(this).subtract_czzhiw$(other);
  };
  Vec3d.prototype.get_za3lpa$ = function (i) {
    return this.fields[i];
  };
  Vec3d.prototype.times_czzhiw$ = function (other) {
    return this.dot_czzhiw$(other);
  };
  Vec3d.prototype.toString = function () {
    return '(' + this.x + ', ' + this.y + ', ' + this.z + ')';
  };
  Vec3d.prototype.toVec3f = function () {
    return new Vec3f(this.x, this.y, this.z);
  };
  Vec3d.prototype.toMutableVec3f = function () {
    return this.toMutableVec3f_5s4mqq$(MutableVec3f_init());
  };
  Vec3d.prototype.toMutableVec3f_5s4mqq$ = function (result) {
    return result.set_y2kzbl$(this.x, this.y, this.z);
  };
  Vec3d.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!Kotlin.isType(other, Vec3d))
      return false;
    if (this.x !== other.x)
      return false;
    if (this.y !== other.y)
      return false;
    if (this.z !== other.z)
      return false;
    return true;
  };
  Vec3d.prototype.hashCode = function () {
    var result = hashCode(this.x);
    result = (31 * result | 0) + hashCode(this.y) | 0;
    result = (31 * result | 0) + hashCode(this.z) | 0;
    return result;
  };
  function Vec3d$Companion() {
    Vec3d$Companion_instance = this;
    this.ZERO = Vec3d_init(0.0);
    this.X_AXIS = new Vec3d(1.0, 0.0, 0.0);
    this.Y_AXIS = new Vec3d(0.0, 1.0, 0.0);
    this.Z_AXIS = new Vec3d(0.0, 0.0, 1.0);
    this.NEG_X_AXIS = new Vec3d(-1.0, 0.0, 0.0);
    this.NEG_Y_AXIS = new Vec3d(0.0, -1.0, 0.0);
    this.NEG_Z_AXIS = new Vec3d(0.0, 0.0, -1.0);
  }
  Vec3d$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vec3d$Companion_instance = null;
  function Vec3d$Companion_getInstance() {
    if (Vec3d$Companion_instance === null) {
      new Vec3d$Companion();
    }
    return Vec3d$Companion_instance;
  }
  Vec3d.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec3d',
    interfaces: []
  };
  function Vec3d_init(f, $this) {
    $this = $this || Object.create(Vec3d.prototype);
    Vec3d.call($this, f, f, f);
    return $this;
  }
  function Vec3d_init_0(v, $this) {
    $this = $this || Object.create(Vec3d.prototype);
    Vec3d.call($this, v.x, v.y, v.z);
    return $this;
  }
  function MutableVec3d(x, y, z) {
    Vec3d.call(this, x, y, z);
  }
  Object.defineProperty(MutableVec3d.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    },
    set: function (value) {
      this.set_5wr77w$(0, value);
    }
  });
  Object.defineProperty(MutableVec3d.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    },
    set: function (value) {
      this.set_5wr77w$(1, value);
    }
  });
  Object.defineProperty(MutableVec3d.prototype, 'z', {
    get: function () {
      return this.get_za3lpa$(2);
    },
    set: function (value) {
      this.set_5wr77w$(2, value);
    }
  });
  MutableVec3d.prototype.add_czzhiw$ = function (other) {
    this.x = this.x + other.x;
    this.y = this.y + other.y;
    this.z = this.z + other.z;
    return this;
  };
  MutableVec3d.prototype.mul_czzhiw$ = function (other) {
    this.x = this.x * other.x;
    this.y = this.y * other.y;
    this.z = this.z * other.z;
    return this;
  };
  MutableVec3d.prototype.norm = function () {
    return this.scale_14dthe$(1.0 / this.length());
  };
  MutableVec3d.prototype.rotate_6y0v78$ = function (angleDeg, axisX, axisY, axisZ) {
    var rad = angleDeg * package$math.DEG_2_RAD;
    var c = Math_0.cos(rad);
    var c1 = 1.0 - c;
    var s = Math_0.sin(rad);
    var rx = this.x * (axisX * axisX * c1 + c) + this.y * (axisX * axisY * c1 - axisZ * s) + this.z * (axisX * axisZ * c1 + axisY * s);
    var ry = this.x * (axisY * axisX * c1 + axisZ * s) + this.y * (axisY * axisY * c1 + c) + this.z * (axisY * axisZ * c1 - axisX * s);
    var rz = this.x * (axisX * axisZ * c1 - axisY * s) + this.y * (axisY * axisZ * c1 + axisX * s) + this.z * (axisZ * axisZ * c1 + c);
    this.x = rx;
    this.y = ry;
    this.z = rz;
    return this;
  };
  MutableVec3d.prototype.rotate_5820x2$ = function (angleDeg, axis) {
    return this.rotate_6y0v78$(angleDeg, axis.x, axis.y, axis.z);
  };
  MutableVec3d.prototype.scale_14dthe$ = function (factor) {
    this.x = this.x * factor;
    this.y = this.y * factor;
    this.z = this.z * factor;
    return this;
  };
  MutableVec3d.prototype.set_yvo9jy$ = function (x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  };
  MutableVec3d.prototype.set_czzhiw$ = function (other) {
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
    return this;
  };
  MutableVec3d.prototype.subtract_czzhiw$ = function (other) {
    this.x = this.x - other.x;
    this.y = this.y - other.y;
    this.z = this.z - other.z;
    return this;
  };
  MutableVec3d.prototype.divAssign_14dthe$ = function (div) {
    this.scale_14dthe$(1.0 / div);
  };
  MutableVec3d.prototype.minusAssign_czzhiw$ = function (other) {
    this.subtract_czzhiw$(other);
  };
  MutableVec3d.prototype.plusAssign_czzhiw$ = function (other) {
    this.add_czzhiw$(other);
  };
  MutableVec3d.prototype.set_5wr77w$ = function (i, v) {
    this.fields[i] = v;
  };
  MutableVec3d.prototype.timesAssign_14dthe$ = function (factor) {
    this.scale_14dthe$(factor);
  };
  MutableVec3d.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MutableVec3d',
    interfaces: [Vec3d]
  };
  function MutableVec3d_init($this) {
    $this = $this || Object.create(MutableVec3d.prototype);
    MutableVec3d.call($this, 0.0, 0.0, 0.0);
    return $this;
  }
  function MutableVec3d_init_0(f, $this) {
    $this = $this || Object.create(MutableVec3d.prototype);
    MutableVec3d.call($this, f, f, f);
    return $this;
  }
  function MutableVec3d_init_1(v, $this) {
    $this = $this || Object.create(MutableVec3d.prototype);
    MutableVec3d.call($this, v.x, v.y, v.z);
    return $this;
  }
  function Vec4f(x, y, z, w) {
    Vec4f$Companion_getInstance();
    this.fields = new Float32Array(4);
    this.fields[0] = x;
    this.fields[1] = y;
    this.fields[2] = z;
    this.fields[3] = w;
  }
  Object.defineProperty(Vec4f.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    }
  });
  Object.defineProperty(Vec4f.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    }
  });
  Object.defineProperty(Vec4f.prototype, 'z', {
    get: function () {
      return this.get_za3lpa$(2);
    }
  });
  Object.defineProperty(Vec4f.prototype, 'w', {
    get: function () {
      return this.get_za3lpa$(3);
    }
  });
  Vec4f.prototype.add_uzu8ww$ = function (other, result) {
    return result.set_czzhhz$(this).add_czzhhz$(other);
  };
  Vec4f.prototype.distance_czzhhz$ = function (other) {
    var x = this.sqrDistance_czzhhz$(other);
    return Math_0.sqrt(x);
  };
  Vec4f.prototype.dot_czzhhz$ = function (other) {
    return this.x * other.x + this.y * other.y + this.z * other.z + this.w * other.w;
  };
  Vec4f.prototype.isFuzzyEqual_m79ulu$ = function (other, eps) {
    if (eps === void 0)
      eps = FUZZY_EQ_F;
    var $receiver = this.x - other.x;
    var tmp$ = Math_0.abs($receiver) <= eps;
    if (tmp$) {
      var $receiver_0 = this.y - other.y;
      tmp$ = Math_0.abs($receiver_0) <= eps;
    }
    var tmp$_0 = tmp$;
    if (tmp$_0) {
      var $receiver_1 = this.z - other.z;
      tmp$_0 = Math_0.abs($receiver_1) <= eps;
    }
    var tmp$_1 = tmp$_0;
    if (tmp$_1) {
      var $receiver_2 = this.w - other.w;
      tmp$_1 = Math_0.abs($receiver_2) <= eps;
    }
    return tmp$_1;
  };
  Vec4f.prototype.length = function () {
    var x = this.sqrLength();
    return Math_0.sqrt(x);
  };
  Vec4f.prototype.mix_q86erb$ = function (other, weight, result) {
    result.x = other.x * weight + this.x * (1.0 - weight);
    result.y = other.y * weight + this.y * (1.0 - weight);
    result.z = other.z * weight + this.z * (1.0 - weight);
    result.w = other.w * weight + this.w * (1.0 - weight);
    return result;
  };
  Vec4f.prototype.mul_uzu8ww$ = function (other, result) {
    return result.set_czzhhz$(this).mul_czzhhz$(other);
  };
  Vec4f.prototype.norm_5s4mpv$ = function (result) {
    return result.set_czzhhz$(this).norm();
  };
  Vec4f.prototype.quatProduct_uzu8ww$ = function (otherQuat, result) {
    result.x = this.w * otherQuat.x + this.x * otherQuat.w + this.y * otherQuat.z - this.z * otherQuat.y;
    result.y = this.w * otherQuat.y + this.y * otherQuat.w + this.z * otherQuat.x - this.x * otherQuat.z;
    result.z = this.w * otherQuat.z + this.z * otherQuat.w + this.x * otherQuat.y - this.y * otherQuat.x;
    result.w = this.w * otherQuat.w - this.x * otherQuat.x - this.y * otherQuat.y - this.z * otherQuat.z;
    return result;
  };
  Vec4f.prototype.scale_749b7q$ = function (factor, result) {
    return result.set_czzhhz$(this).scale_mx4ult$(factor);
  };
  Vec4f.prototype.sqrDistance_czzhhz$ = function (other) {
    var dx = this.x - other.x;
    var dy = this.y - other.y;
    var dz = this.z - other.z;
    var dw = this.z - other.w;
    return dx * dx + dy * dy + dz * dz + dw * dw;
  };
  Vec4f.prototype.sqrLength = function () {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  };
  Vec4f.prototype.subtract_uzu8ww$ = function (other, result) {
    return result.set_czzhhz$(this).subtract_czzhhz$(other);
  };
  Vec4f.prototype.getXyz_5s4mqq$ = function (result) {
    result.x = this.x;
    result.y = this.y;
    result.z = this.z;
    return result;
  };
  Vec4f.prototype.get_za3lpa$ = function (i) {
    return this.fields[i];
  };
  Vec4f.prototype.times_czzhhz$ = function (other) {
    return this.dot_czzhhz$(other);
  };
  Vec4f.prototype.toString = function () {
    return '(' + this.x + ', ' + this.y + ', ' + this.z + ', ' + this.w + ')';
  };
  Vec4f.prototype.toVec4d = function () {
    return new Vec4d(this.x, this.y, this.z, this.w);
  };
  Vec4f.prototype.toMutableVec4d = function () {
    return this.toMutableVec4d_5s4mpx$(MutableVec4d_init());
  };
  Vec4f.prototype.toMutableVec4d_5s4mpx$ = function (result) {
    return result.set_6y0v78$(this.x, this.y, this.z, this.w);
  };
  Vec4f.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!Kotlin.isType(other, Vec4f))
      return false;
    if (this.x !== other.x)
      return false;
    if (this.y !== other.y)
      return false;
    if (this.z !== other.z)
      return false;
    if (this.w !== other.w)
      return false;
    return true;
  };
  Vec4f.prototype.hashCode = function () {
    var result = hashCode(this.x);
    result = (31 * result | 0) + hashCode(this.y) | 0;
    result = (31 * result | 0) + hashCode(this.z) | 0;
    result = (31 * result | 0) + hashCode(this.w) | 0;
    return result;
  };
  function Vec4f$Companion() {
    Vec4f$Companion_instance = this;
    this.ZERO = Vec4f_init(0.0);
    this.X_AXIS = new Vec4f(1.0, 0.0, 0.0, 0.0);
    this.Y_AXIS = new Vec4f(0.0, 1.0, 0.0, 0.0);
    this.Z_AXIS = new Vec4f(0.0, 0.0, 1.0, 0.0);
    this.W_AXIS = new Vec4f(0.0, 0.0, 0.0, 1.0);
    this.NEG_X_AXIS = new Vec4f(-1.0, 0.0, 0.0, 0.0);
    this.NEG_Y_AXIS = new Vec4f(0.0, -1.0, 0.0, 0.0);
    this.NEG_Z_AXIS = new Vec4f(0.0, 0.0, -1.0, 0.0);
    this.NEG_W_AXIS = new Vec4f(0.0, 0.0, 0.0, -1.0);
  }
  Vec4f$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vec4f$Companion_instance = null;
  function Vec4f$Companion_getInstance() {
    if (Vec4f$Companion_instance === null) {
      new Vec4f$Companion();
    }
    return Vec4f$Companion_instance;
  }
  Vec4f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec4f',
    interfaces: []
  };
  function Vec4f_init(f, $this) {
    $this = $this || Object.create(Vec4f.prototype);
    Vec4f.call($this, f, f, f, f);
    return $this;
  }
  function Vec4f_init_0(xyz, w, $this) {
    $this = $this || Object.create(Vec4f.prototype);
    Vec4f.call($this, xyz.x, xyz.y, xyz.z, w);
    return $this;
  }
  function Vec4f_init_1(v, $this) {
    $this = $this || Object.create(Vec4f.prototype);
    Vec4f.call($this, v.x, v.y, v.z, v.w);
    return $this;
  }
  function MutableVec4f(x, y, z, w) {
    Vec4f.call(this, x, y, z, w);
  }
  Object.defineProperty(MutableVec4f.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    },
    set: function (value) {
      this.set_24o109$(0, value);
    }
  });
  Object.defineProperty(MutableVec4f.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    },
    set: function (value) {
      this.set_24o109$(1, value);
    }
  });
  Object.defineProperty(MutableVec4f.prototype, 'z', {
    get: function () {
      return this.get_za3lpa$(2);
    },
    set: function (value) {
      this.set_24o109$(2, value);
    }
  });
  Object.defineProperty(MutableVec4f.prototype, 'w', {
    get: function () {
      return this.get_za3lpa$(3);
    },
    set: function (value) {
      this.set_24o109$(3, value);
    }
  });
  MutableVec4f.prototype.add_czzhhz$ = function (other) {
    this.x = this.x + other.x;
    this.y = this.y + other.y;
    this.z = this.z + other.z;
    this.w = this.w + other.w;
    return this;
  };
  MutableVec4f.prototype.mul_czzhhz$ = function (other) {
    this.x = this.x * other.x;
    this.y = this.y * other.y;
    this.z = this.z * other.z;
    this.w = this.w * other.w;
    return this;
  };
  MutableVec4f.prototype.norm = function () {
    return this.scale_mx4ult$(1.0 / this.length());
  };
  MutableVec4f.prototype.quatProduct_czzhhz$ = function (otherQuat) {
    var px = this.w * otherQuat.x + this.x * otherQuat.w + this.y * otherQuat.z - this.z * otherQuat.y;
    var py = this.w * otherQuat.y + this.y * otherQuat.w + this.z * otherQuat.x - this.x * otherQuat.z;
    var pz = this.w * otherQuat.z + this.z * otherQuat.w + this.x * otherQuat.y - this.y * otherQuat.x;
    var pw = this.w * otherQuat.w - this.x * otherQuat.x - this.y * otherQuat.y - this.z * otherQuat.z;
    this.set_7b5o5w$(px, py, pz, pw);
    return this;
  };
  MutableVec4f.prototype.scale_mx4ult$ = function (factor) {
    this.x = this.x * factor;
    this.y = this.y * factor;
    this.z = this.z * factor;
    this.w = this.w * factor;
    return this;
  };
  MutableVec4f.prototype.set_7b5o5w$ = function (x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
    return this;
  };
  MutableVec4f.prototype.set_czzhhz$ = function (other) {
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
    this.w = other.w;
    return this;
  };
  MutableVec4f.prototype.set_2qa7tb$ = function (xyz, w) {
    if (w === void 0)
      w = 0.0;
    this.x = xyz.x;
    this.y = xyz.y;
    this.z = xyz.z;
    this.w = w;
    return this;
  };
  MutableVec4f.prototype.subtract_czzhhz$ = function (other) {
    this.x = this.x - other.x;
    this.y = this.y - other.y;
    this.z = this.z - other.z;
    this.w = this.w - other.w;
    return this;
  };
  MutableVec4f.prototype.plusAssign_czzhhz$ = function (other) {
    this.add_czzhhz$(other);
  };
  MutableVec4f.prototype.minusAssign_czzhhz$ = function (other) {
    this.subtract_czzhhz$(other);
  };
  MutableVec4f.prototype.set_24o109$ = function (i, v) {
    this.fields[i] = v;
  };
  MutableVec4f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MutableVec4f',
    interfaces: [Vec4f]
  };
  function MutableVec4f_init($this) {
    $this = $this || Object.create(MutableVec4f.prototype);
    MutableVec4f.call($this, 0.0, 0.0, 0.0, 0.0);
    return $this;
  }
  function MutableVec4f_init_0(f, $this) {
    $this = $this || Object.create(MutableVec4f.prototype);
    MutableVec4f.call($this, f, f, f, f);
    return $this;
  }
  function MutableVec4f_init_1(xyz, w, $this) {
    $this = $this || Object.create(MutableVec4f.prototype);
    MutableVec4f.call($this, xyz.x, xyz.y, xyz.z, w);
    return $this;
  }
  function MutableVec4f_init_2(other, $this) {
    $this = $this || Object.create(MutableVec4f.prototype);
    MutableVec4f.call($this, other.x, other.y, other.z, other.w);
    return $this;
  }
  function Vec4d(x, y, z, w) {
    Vec4d$Companion_getInstance();
    this.fields = new Float64Array(4);
    this.fields[0] = x;
    this.fields[1] = y;
    this.fields[2] = z;
    this.fields[3] = w;
  }
  Object.defineProperty(Vec4d.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    }
  });
  Object.defineProperty(Vec4d.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    }
  });
  Object.defineProperty(Vec4d.prototype, 'z', {
    get: function () {
      return this.get_za3lpa$(2);
    }
  });
  Object.defineProperty(Vec4d.prototype, 'w', {
    get: function () {
      return this.get_za3lpa$(3);
    }
  });
  Vec4d.prototype.add_2x9ggw$ = function (other, result) {
    return result.set_czzhi1$(this).add_czzhi1$(other);
  };
  Vec4d.prototype.distance_czzhi1$ = function (other) {
    var x = this.sqrDistance_czzhi1$(other);
    return Math_0.sqrt(x);
  };
  Vec4d.prototype.dot_czzhi1$ = function (other) {
    return this.x * other.x + this.y * other.y + this.z * other.z + this.w * other.w;
  };
  Vec4d.prototype.isFuzzyEqual_1rza9z$ = function (other, eps) {
    if (eps === void 0)
      eps = FUZZY_EQ_D;
    var $receiver = this.x - other.x;
    var tmp$ = Math_0.abs($receiver) <= eps;
    if (tmp$) {
      var $receiver_0 = this.y - other.y;
      tmp$ = Math_0.abs($receiver_0) <= eps;
    }
    var tmp$_0 = tmp$;
    if (tmp$_0) {
      var $receiver_1 = this.z - other.z;
      tmp$_0 = Math_0.abs($receiver_1) <= eps;
    }
    var tmp$_1 = tmp$_0;
    if (tmp$_1) {
      var $receiver_2 = this.w - other.w;
      tmp$_1 = Math_0.abs($receiver_2) <= eps;
    }
    return tmp$_1;
  };
  Vec4d.prototype.length = function () {
    var x = this.sqrLength();
    return Math_0.sqrt(x);
  };
  Vec4d.prototype.mix_3szysy$ = function (other, weight, result) {
    result.x = other.x * weight + this.x * (1.0 - weight);
    result.y = other.y * weight + this.y * (1.0 - weight);
    result.z = other.z * weight + this.z * (1.0 - weight);
    result.w = other.w * weight + this.w * (1.0 - weight);
    return result;
  };
  Vec4d.prototype.mul_2x9ggw$ = function (other, result) {
    return result.set_czzhi1$(this).mul_czzhi1$(other);
  };
  Vec4d.prototype.norm_5s4mpx$ = function (result) {
    return result.set_czzhi1$(this).norm();
  };
  Vec4d.prototype.quatProduct_2x9ggw$ = function (otherQuat, result) {
    result.x = this.w * otherQuat.x + this.x * otherQuat.w + this.y * otherQuat.z - this.z * otherQuat.y;
    result.y = this.w * otherQuat.y + this.y * otherQuat.w + this.z * otherQuat.x - this.x * otherQuat.z;
    result.z = this.w * otherQuat.z + this.z * otherQuat.w + this.x * otherQuat.y - this.y * otherQuat.x;
    result.w = this.w * otherQuat.w - this.x * otherQuat.x - this.y * otherQuat.y - this.z * otherQuat.z;
    return result;
  };
  Vec4d.prototype.scale_b0flav$ = function (factor, result) {
    return result.set_czzhi1$(this).scale_14dthe$(factor);
  };
  Vec4d.prototype.sqrDistance_czzhi1$ = function (other) {
    var dx = this.x - other.x;
    var dy = this.y - other.y;
    var dz = this.z - other.z;
    var dw = this.z - other.w;
    return dx * dx + dy * dy + dz * dz + dw * dw;
  };
  Vec4d.prototype.sqrLength = function () {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  };
  Vec4d.prototype.subtract_2x9ggw$ = function (other, result) {
    return result.set_czzhi1$(this).subtract_czzhi1$(other);
  };
  Vec4d.prototype.getXyz_5s4mqs$ = function (result) {
    result.x = this.x;
    result.y = this.y;
    result.z = this.z;
    return result;
  };
  Vec4d.prototype.get_za3lpa$ = function (i) {
    return this.fields[i];
  };
  Vec4d.prototype.times_czzhi1$ = function (other) {
    return this.dot_czzhi1$(other);
  };
  Vec4d.prototype.toString = function () {
    return '(' + this.x + ', ' + this.y + ', ' + this.z + ', ' + this.w + ')';
  };
  Vec4d.prototype.toVec4f = function () {
    return new Vec4f(this.x, this.y, this.z, this.w);
  };
  Vec4d.prototype.toMutableVec4f = function () {
    return this.toMutableVec4f_5s4mpv$(MutableVec4f_init());
  };
  Vec4d.prototype.toMutableVec4f_5s4mpv$ = function (result) {
    return result.set_7b5o5w$(this.x, this.y, this.z, this.w);
  };
  Vec4d.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!Kotlin.isType(other, Vec4d))
      return false;
    if (this.x !== other.x)
      return false;
    if (this.y !== other.y)
      return false;
    if (this.z !== other.z)
      return false;
    if (this.w !== other.w)
      return false;
    return true;
  };
  Vec4d.prototype.hashCode = function () {
    var result = hashCode(this.x);
    result = (31 * result | 0) + hashCode(this.y) | 0;
    result = (31 * result | 0) + hashCode(this.z) | 0;
    result = (31 * result | 0) + hashCode(this.w) | 0;
    return result;
  };
  function Vec4d$Companion() {
    Vec4d$Companion_instance = this;
    this.ZERO = Vec4d_init(0.0);
    this.X_AXIS = new Vec4d(1.0, 0.0, 0.0, 0.0);
    this.Y_AXIS = new Vec4d(0.0, 1.0, 0.0, 0.0);
    this.Z_AXIS = new Vec4d(0.0, 0.0, 1.0, 0.0);
    this.W_AXIS = new Vec4d(0.0, 0.0, 0.0, 1.0);
    this.NEG_X_AXIS = new Vec4d(-1.0, 0.0, 0.0, 0.0);
    this.NEG_Y_AXIS = new Vec4d(0.0, -1.0, 0.0, 0.0);
    this.NEG_Z_AXIS = new Vec4d(0.0, 0.0, -1.0, 0.0);
    this.NEG_W_AXIS = new Vec4d(0.0, 0.0, 0.0, -1.0);
  }
  Vec4d$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vec4d$Companion_instance = null;
  function Vec4d$Companion_getInstance() {
    if (Vec4d$Companion_instance === null) {
      new Vec4d$Companion();
    }
    return Vec4d$Companion_instance;
  }
  Vec4d.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec4d',
    interfaces: []
  };
  function Vec4d_init(f, $this) {
    $this = $this || Object.create(Vec4d.prototype);
    Vec4d.call($this, f, f, f, f);
    return $this;
  }
  function Vec4d_init_0(xyz, w, $this) {
    $this = $this || Object.create(Vec4d.prototype);
    Vec4d.call($this, xyz.x, xyz.y, xyz.z, w);
    return $this;
  }
  function Vec4d_init_1(v, $this) {
    $this = $this || Object.create(Vec4d.prototype);
    Vec4d.call($this, v.x, v.y, v.z, v.w);
    return $this;
  }
  function MutableVec4d(x, y, z, w) {
    Vec4d.call(this, x, y, z, w);
  }
  Object.defineProperty(MutableVec4d.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    },
    set: function (value) {
      this.set_5wr77w$(0, value);
    }
  });
  Object.defineProperty(MutableVec4d.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    },
    set: function (value) {
      this.set_5wr77w$(1, value);
    }
  });
  Object.defineProperty(MutableVec4d.prototype, 'z', {
    get: function () {
      return this.get_za3lpa$(2);
    },
    set: function (value) {
      this.set_5wr77w$(2, value);
    }
  });
  Object.defineProperty(MutableVec4d.prototype, 'w', {
    get: function () {
      return this.get_za3lpa$(3);
    },
    set: function (value) {
      this.set_5wr77w$(3, value);
    }
  });
  MutableVec4d.prototype.add_czzhi1$ = function (other) {
    this.x = this.x + other.x;
    this.y = this.y + other.y;
    this.z = this.z + other.z;
    this.w = this.w + other.w;
    return this;
  };
  MutableVec4d.prototype.mul_czzhi1$ = function (other) {
    this.x = this.x * other.x;
    this.y = this.y * other.y;
    this.z = this.z * other.z;
    this.w = this.w * other.w;
    return this;
  };
  MutableVec4d.prototype.norm = function () {
    return this.scale_14dthe$(1.0 / this.length());
  };
  MutableVec4d.prototype.quatProduct_czzhi1$ = function (otherQuat) {
    var px = this.w * otherQuat.x + this.x * otherQuat.w + this.y * otherQuat.z - this.z * otherQuat.y;
    var py = this.w * otherQuat.y + this.y * otherQuat.w + this.z * otherQuat.x - this.x * otherQuat.z;
    var pz = this.w * otherQuat.z + this.z * otherQuat.w + this.x * otherQuat.y - this.y * otherQuat.x;
    var pw = this.w * otherQuat.w - this.x * otherQuat.x - this.y * otherQuat.y - this.z * otherQuat.z;
    this.set_6y0v78$(px, py, pz, pw);
    return this;
  };
  MutableVec4d.prototype.scale_14dthe$ = function (factor) {
    this.x = this.x * factor;
    this.y = this.y * factor;
    this.z = this.z * factor;
    this.w = this.w * factor;
    return this;
  };
  MutableVec4d.prototype.set_6y0v78$ = function (x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
    return this;
  };
  MutableVec4d.prototype.set_czzhi1$ = function (other) {
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
    this.w = other.w;
    return this;
  };
  MutableVec4d.prototype.set_6nz8ey$ = function (xyz, w) {
    if (w === void 0)
      w = 0.0;
    this.x = xyz.x;
    this.y = xyz.y;
    this.z = xyz.z;
    this.w = w;
    return this;
  };
  MutableVec4d.prototype.subtract_czzhi1$ = function (other) {
    this.x = this.x - other.x;
    this.y = this.y - other.y;
    this.z = this.z - other.z;
    this.w = this.w - other.w;
    return this;
  };
  MutableVec4d.prototype.plusAssign_czzhi1$ = function (other) {
    this.add_czzhi1$(other);
  };
  MutableVec4d.prototype.minusAssign_czzhi1$ = function (other) {
    this.subtract_czzhi1$(other);
  };
  MutableVec4d.prototype.set_5wr77w$ = function (i, v) {
    this.fields[i] = v;
  };
  MutableVec4d.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MutableVec4d',
    interfaces: [Vec4d]
  };
  function MutableVec4d_init($this) {
    $this = $this || Object.create(MutableVec4d.prototype);
    MutableVec4d.call($this, 0.0, 0.0, 0.0, 0.0);
    return $this;
  }
  function MutableVec4d_init_0(f, $this) {
    $this = $this || Object.create(MutableVec4d.prototype);
    MutableVec4d.call($this, f, f, f, f);
    return $this;
  }
  function MutableVec4d_init_1(xyz, w, $this) {
    $this = $this || Object.create(MutableVec4d.prototype);
    MutableVec4d.call($this, xyz.x, xyz.y, xyz.z, w);
    return $this;
  }
  function MutableVec4d_init_2(other, $this) {
    $this = $this || Object.create(MutableVec4d.prototype);
    MutableVec4d.call($this, other.x, other.y, other.z, other.w);
    return $this;
  }
  function add(a, b) {
    return a.add_q2ruao$(b, MutableVec2f_init());
  }
  function add_0(a, b) {
    return a.add_2gj7b4$(b, MutableVec3f_init());
  }
  function add_1(a, b) {
    return a.add_uzu8ww$(b, MutableVec4f_init());
  }
  function add_2(a, b) {
    return a.add_b18iao$(b, MutableVec2d_init());
  }
  function add_3(a, b) {
    return a.add_vgki2o$(b, MutableVec3d_init());
  }
  function add_4(a, b) {
    return a.add_2x9ggw$(b, MutableVec4d_init());
  }
  function subtract(a, b) {
    return a.subtract_q2ruao$(b, MutableVec2f_init());
  }
  function subtract_0(a, b) {
    return a.subtract_2gj7b4$(b, MutableVec3f_init());
  }
  function subtract_1(a, b) {
    return a.subtract_uzu8ww$(b, MutableVec4f_init());
  }
  function subtract_2(a, b) {
    return a.subtract_b18iao$(b, MutableVec2d_init());
  }
  function subtract_3(a, b) {
    return a.subtract_vgki2o$(b, MutableVec3d_init());
  }
  function subtract_4(a, b) {
    return a.subtract_2x9ggw$(b, MutableVec4d_init());
  }
  function scale(a, fac) {
    return a.scale_749b9g$(fac, MutableVec2f_init());
  }
  function scale_0(a, fac) {
    return a.scale_749b8l$(fac, MutableVec3f_init());
  }
  function scale_1(a, fac) {
    return a.scale_749b7q$(fac, MutableVec4f_init());
  }
  function scale_2(a, fac) {
    return a.scale_b0flcl$(fac, MutableVec2d_init());
  }
  function scale_3(a, fac) {
    return a.scale_b0flbq$(fac, MutableVec3d_init());
  }
  function scale_4(a, fac) {
    return a.scale_b0flav$(fac, MutableVec4d_init());
  }
  function norm(a) {
    return a.norm_5s4mrl$(MutableVec2f_init());
  }
  function norm_0(a) {
    return a.norm_5s4mqq$(MutableVec3f_init());
  }
  function norm_1(a) {
    return a.norm_5s4mrn$(MutableVec2d_init());
  }
  function norm_2(a) {
    return a.norm_5s4mqs$(MutableVec3d_init());
  }
  function cross(a, b) {
    return a.cross_2gj7b4$(b, MutableVec3f_init());
  }
  function cross_0(a, b) {
    return a.cross_vgki2o$(b, MutableVec3d_init());
  }
  var slerpTmpAf;
  var slerpTmpBf;
  var slerpTmpCf;
  function slerp(quatA, quatB, f, result) {
    quatA.norm_5s4mpv$(slerpTmpAf);
    quatB.norm_5s4mpv$(slerpTmpBf);
    var clamp$result;
    if (f < 0.0) {
      clamp$result = 0.0;
    }
     else if (f > 1.0) {
      clamp$result = 1.0;
    }
     else {
      clamp$result = f;
    }
    var t = clamp$result;
    var $receiver = slerpTmpAf.dot_czzhhz$(slerpTmpBf);
    var min = -1.0;
    var clamp$result_0;
    if ($receiver < min) {
      clamp$result_0 = min;
    }
     else if ($receiver > 1.0) {
      clamp$result_0 = 1.0;
    }
     else {
      clamp$result_0 = $receiver;
    }
    var dot = clamp$result_0;
    if (dot < 0) {
      slerpTmpAf.scale_mx4ult$(-1.0);
      dot = -dot;
    }
    if (dot > 0.9995) {
      slerpTmpBf.subtract_uzu8ww$(slerpTmpAf, result).scale_mx4ult$(t).add_czzhhz$(slerpTmpAf).norm();
    }
     else {
      var x = dot;
      var theta0 = Math_0.acos(x);
      var theta = theta0 * t;
      slerpTmpAf.scale_749b7q$(-dot, slerpTmpCf).add_czzhhz$(slerpTmpBf).norm();
      slerpTmpAf.scale_mx4ult$(Math_0.cos(theta));
      slerpTmpCf.scale_mx4ult$(Math_0.sin(theta));
      result.set_czzhhz$(slerpTmpAf).add_czzhhz$(slerpTmpCf);
    }
    return result;
  }
  var slerpTmpAd;
  var slerpTmpBd;
  var slerpTmpCd;
  function slerp_0(quatA, quatB, f, result) {
    quatA.norm_5s4mpx$(slerpTmpAd);
    quatB.norm_5s4mpx$(slerpTmpBd);
    var clamp$result;
    if (f < 0.0) {
      clamp$result = 0.0;
    }
     else if (f > 1.0) {
      clamp$result = 1.0;
    }
     else {
      clamp$result = f;
    }
    var t = clamp$result;
    var $receiver = slerpTmpAd.dot_czzhi1$(slerpTmpBd);
    var min = -1.0;
    var clamp$result_0;
    if ($receiver < min) {
      clamp$result_0 = min;
    }
     else if ($receiver > 1.0) {
      clamp$result_0 = 1.0;
    }
     else {
      clamp$result_0 = $receiver;
    }
    var dot = clamp$result_0;
    if (dot < 0) {
      slerpTmpAd.scale_14dthe$(-1.0);
      dot = -dot;
    }
    if (dot > 0.9999995) {
      slerpTmpBd.subtract_2x9ggw$(slerpTmpAd, result).scale_14dthe$(t).add_czzhi1$(slerpTmpAd).norm();
    }
     else {
      var x = dot;
      var theta0 = Math_0.acos(x);
      var theta = theta0 * t;
      slerpTmpAd.scale_b0flav$(-dot, slerpTmpCd).add_czzhi1$(slerpTmpBd).norm();
      slerpTmpAd.scale_14dthe$(Math_0.cos(theta));
      slerpTmpCd.scale_14dthe$(Math_0.sin(theta));
      result.set_czzhi1$(slerpTmpAd).add_czzhi1$(slerpTmpCd);
    }
    return result;
  }
  function MemoryManager() {
    this.allocationMap_0 = LinkedHashMap_init();
    this.totalMem_0 = LinkedHashMap_init();
    var tmp$, tmp$_0;
    tmp$ = GlResource$Type$values();
    for (tmp$_0 = 0; tmp$_0 !== tmp$.length; ++tmp$_0) {
      var type = tmp$[tmp$_0];
      this.allocationMap_0.put_xwzc9p$(type, LinkedHashMap_init());
      this.totalMem_0.put_xwzc9p$(type, 0.0);
    }
  }
  Object.defineProperty(MemoryManager.prototype, 'numTextures', {
    get: function () {
      return ensureNotNull(this.allocationMap_0.get_11rb$(GlResource$Type$TEXTURE_getInstance())).size;
    }
  });
  Object.defineProperty(MemoryManager.prototype, 'numShaders', {
    get: function () {
      return ensureNotNull(this.allocationMap_0.get_11rb$(GlResource$Type$PROGRAM_getInstance())).size;
    }
  });
  Object.defineProperty(MemoryManager.prototype, 'numBuffers', {
    get: function () {
      return ensureNotNull(this.allocationMap_0.get_11rb$(GlResource$Type$BUFFER_getInstance())).size;
    }
  });
  MemoryManager.prototype.getTotalMemory_b1qrxn$ = function (type) {
    return ensureNotNull(this.totalMem_0.get_11rb$(type));
  };
  MemoryManager.prototype.memoryAllocated_927jj9$ = function (resource, memory) {
    var tmp$;
    var prevAlloc = (tmp$ = ensureNotNull(this.allocationMap_0.get_11rb$(resource.type)).put_xwzc9p$(resource, memory)) != null ? tmp$ : 0;
    if (prevAlloc !== memory) {
      var newTotal = ensureNotNull(this.totalMem_0.get_11rb$(resource.type)) + memory - prevAlloc;
      this.totalMem_0.put_xwzc9p$(resource.type, newTotal);
    }
  };
  MemoryManager.prototype.deleted_esgzal$ = function (resource) {
    var tmp$;
    var memory = (tmp$ = this.allocationMap_0.get_11rb$(resource.type)) != null ? tmp$.remove_11rb$(resource) : null;
    if (memory != null) {
      var newTotal = ensureNotNull(this.totalMem_0.get_11rb$(resource.type)) - memory;
      this.totalMem_0.put_xwzc9p$(resource.type, newTotal);
    }
  };
  MemoryManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MemoryManager',
    interfaces: []
  };
  function LowPassFilter(coeff, input) {
    SampleNode.call(this);
    this.coeff = coeff;
    this.input = input;
  }
  LowPassFilter.prototype.generate_mx4ult$ = function (dt) {
    return this.filter_mx4ult$(this.input.next_mx4ult$(dt));
  };
  LowPassFilter.prototype.filter_mx4ult$ = function (input) {
    this.sample = this.sample + (input - this.sample) / this.coeff;
    return this.sample;
  };
  LowPassFilter.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LowPassFilter',
    interfaces: [SampleNode]
  };
  function HighPassFilter(coeff, input) {
    SampleNode.call(this);
    this.coeff = coeff;
    this.input = input;
  }
  HighPassFilter.prototype.generate_mx4ult$ = function (dt) {
    return this.filter_mx4ult$(this.input.next_mx4ult$(dt));
  };
  HighPassFilter.prototype.filter_mx4ult$ = function (input) {
    this.sample = this.sample + (input - this.sample * this.coeff);
    return this.sample;
  };
  HighPassFilter.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HighPassFilter',
    interfaces: [SampleNode]
  };
  function MoodFilter(input) {
    MoodFilter$Companion_getInstance();
    SampleNode.call(this);
    this.input = input;
    this.cutoff = 1000.0;
    this.res = 0.05;
    this.y1_0 = 0.0;
    this.y2_0 = 0.0;
    this.y3_0 = 0.0;
    this.y4_0 = 0.0;
    this.oldx_0 = 0.0;
    this.oldy1_0 = 0.0;
    this.oldy2_0 = 0.0;
    this.oldy3_0 = 0.0;
  }
  MoodFilter.prototype.generate_mx4ult$ = function (dt) {
    return this.filter_dleff0$(this.input.current(), dt);
  };
  MoodFilter.prototype.filter_7b5o5w$ = function (cutoff, res, input, dt) {
    this.cutoff = cutoff;
    this.res = res;
    return this.filter_dleff0$(input, dt);
  };
  MoodFilter.prototype.filter_dleff0$ = function (input, dt) {
    var cut = 2 * this.cutoff * dt;
    var p = cut * (MoodFilter$Companion_getInstance().C1_0 - MoodFilter$Companion_getInstance().C2_0 * cut);
    var x = cut * math.PI * 0.5;
    var k = 2 * Math_0.sin(x) - 1;
    var t1 = (1 - p) * MoodFilter$Companion_getInstance().C3_0;
    var t2 = 12 + t1 * t1;
    var r = this.res * (t2 + 6 * t1) / (t2 - 6 * t1);
    var x_0 = input - r * this.y4_0;
    this.y1_0 = x_0 * p + this.oldx_0 * p - k * this.y1_0;
    this.y2_0 = this.y1_0 * p + this.oldy1_0 * p - k * this.y2_0;
    this.y3_0 = this.y2_0 * p + this.oldy2_0 * p - k * this.y3_0;
    this.y4_0 = this.y3_0 * p + this.oldy3_0 * p - k * this.y4_0;
    this.y4_0 -= this.y4_0 * this.y4_0 * this.y4_0 / 6;
    this.oldx_0 = x_0;
    this.oldy1_0 = this.y1_0;
    this.oldy2_0 = this.y2_0;
    this.oldy3_0 = this.y3_0;
    return this.y4_0;
  };
  function MoodFilter$Companion() {
    MoodFilter$Companion_instance = this;
    this.C1_0 = 1.8;
    this.C2_0 = 0.8;
    this.C3_0 = 1.386;
  }
  MoodFilter$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MoodFilter$Companion_instance = null;
  function MoodFilter$Companion_getInstance() {
    if (MoodFilter$Companion_instance === null) {
      new MoodFilter$Companion();
    }
    return MoodFilter$Companion_instance;
  }
  MoodFilter.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MoodFilter',
    interfaces: [SampleNode]
  };
  function HiHat(bpm) {
    SampleNode.call(this);
    this.bpm = bpm;
    this.highPass_0 = new HighPassFilter(1.7, this);
  }
  HiHat.prototype.generate_mx4ult$ = function (dt) {
    var noise = randomF_0(-1.0, 1.0);
    var pc2 = this.t % (60.0 / this.bpm);
    var pc1 = 266.0;
    if (this.t / 2 % 0.5 > 0.25) {
      pc1 = 106.0;
    }
    return this.highPass_0.filter_mx4ult$(SampleNode$Companion_getInstance().perc_7b5o5w$(noise, pc1, pc2)) * 0.2;
  };
  HiHat.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HiHat',
    interfaces: [SampleNode]
  };
  function Kick(bpm) {
    SampleNode.call(this);
    this.bpm = bpm;
    var $receiver = new Oscillator(Wave$Companion_getInstance().SINE);
    $receiver.frequency = 50.0;
    this.osc1_0 = $receiver;
    var $receiver_0 = new Oscillator(Wave$Companion_getInstance().SAW);
    $receiver_0.frequency = 10.0;
    this.osc2_0 = $receiver_0;
    this.lowPass_0 = new LowPassFilter(240.0, this);
  }
  Kick.prototype.generate_mx4ult$ = function (dt) {
    var osc = SampleNode$Companion_getInstance().clip_dleff0$(SampleNode$Companion_getInstance().clip_dleff0$(this.osc1_0.next_mx4ult$(dt), 0.37) * 2 + SampleNode$Companion_getInstance().clip_dleff0$(this.osc2_0.next_mx4ult$(dt), 0.07) * 4, 0.6);
    var s = SampleNode$Companion_getInstance().perc_7b5o5w$(osc, 54.0, this.t % (60.0 / this.bpm)) * 2;
    return this.lowPass_0.filter_mx4ult$(s) + this.click_0(60.0 / this.bpm, this.t) * 0.055;
  };
  Kick.prototype.click_0 = function (x, t) {
    return 1.0 - 2 * (t % x) / x;
  };
  Kick.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Kick',
    interfaces: [SampleNode]
  };
  function Melody() {
    SampleNode.call(this);
    var $receiver = new Oscillator(Wave$Companion_getInstance().SINE, 1.0 / 32.0);
    $receiver.gain = 140.0;
    this.lfo1_0 = $receiver;
    var $receiver_0 = new Oscillator(Wave$Companion_getInstance().SINE, 0.5);
    $receiver_0.gain = 0.2;
    $receiver_0.phaseShift = 0.5;
    this.lfo2_0 = $receiver_0;
    var $receiver_1 = new Oscillator(Wave$Companion_getInstance().SAW);
    $receiver_1.gain = 0.7;
    this.osc1_0 = $receiver_1;
    var $receiver_2 = new Oscillator(Wave$Companion_getInstance().SQUARE);
    $receiver_2.gain = 0.4;
    this.osc2_0 = $receiver_2;
    var $receiver_3 = new Oscillator(Wave$Companion_getInstance().SINE);
    $receiver_3.gain = 0.8;
    this.osc3_0 = $receiver_3;
    var $receiver_4 = new Oscillator(Wave$Companion_getInstance().SQUARE);
    $receiver_4.gain = 1.2;
    this.osc4_0 = $receiver_4;
    this.moodFilter_0 = new MoodFilter(this);
    this.chords_0 = [7, 7, 7, 12, 10, 10, 10, 15, 7, 7, 7, 15, 15, 17, 10, 29, 7, 7, 7, 24, 10, 10, 10, 19, 7, 7, 7, 15, 29, 24, 15, 10];
  }
  Melody.prototype.generate_mx4ult$ = function (dt) {
    var f = SampleNode$Companion_getInstance().note_vux9f0$(this.chords_0[numberToInt(this.t * 4) % this.chords_0.length], 0);
    var osc = this.osc1_0.next_dleff0$(dt, f) + this.osc2_0.next_dleff0$(dt, f / 2.0) + this.osc3_0.next_dleff0$(dt, f / 2.0) + this.osc4_0.next_dleff0$(dt, f * 3.0);
    return this.moodFilter_0.filter_7b5o5w$(this.lfo1_0.next_mx4ult$(dt) + 1050, this.lfo2_0.next_mx4ult$(dt), SampleNode$Companion_getInstance().perc_7b5o5w$(osc, 48.0, this.t % 0.125), dt) * 0.25;
  };
  Melody.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Melody',
    interfaces: [SampleNode]
  };
  function Oscillator(shape, frequency) {
    if (frequency === void 0)
      frequency = 440.0;
    SampleNode.call(this);
    this.shape = shape;
    this.frequency = frequency;
    this.pos = 0.0;
    this.phaseShift_luel7x$_0 = 0.0;
  }
  Object.defineProperty(Oscillator.prototype, 'phaseShift', {
    get: function () {
      return this.phaseShift_luel7x$_0;
    },
    set: function (value) {
      var clamp$result;
      if (value < 0.0) {
        clamp$result = 0.0;
      }
       else if (value > 1.0) {
        clamp$result = 1.0;
      }
       else {
        clamp$result = value;
      }
      this.phaseShift_luel7x$_0 = clamp$result;
    }
  });
  Oscillator.prototype.generate_mx4ult$ = function (dt) {
    this.pos += dt * this.frequency;
    if (this.pos > 1) {
      this.pos -= 1;
    }
    return this.shape.get_mx4ult$(this.pos + this.phaseShift);
  };
  Oscillator.prototype.next_dleff0$ = function (dt, freq) {
    this.frequency = freq;
    return this.next_mx4ult$(dt);
  };
  Oscillator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Oscillator',
    interfaces: [SampleNode]
  };
  function Pad() {
    SampleNode.call(this);
    var $receiver = new Oscillator(Wave$Companion_getInstance().SINE, 2.0);
    $receiver.gain = 0.2;
    this.lfo1_0 = $receiver;
    var $receiver_0 = new Oscillator(Wave$Companion_getInstance().SINE, 2.0);
    $receiver_0.gain = 150.0;
    this.lfo2_0 = $receiver_0;
    var $receiver_1 = new Oscillator(Wave$Companion_getInstance().SAW);
    $receiver_1.gain = 5.1;
    this.osc1_0 = $receiver_1;
    var $receiver_2 = new Oscillator(Wave$Companion_getInstance().SAW);
    $receiver_2.gain = 3.9;
    this.osc2_0 = $receiver_2;
    var $receiver_3 = new Oscillator(Wave$Companion_getInstance().SAW);
    $receiver_3.gain = 4.0;
    this.osc3_0 = $receiver_3;
    var $receiver_4 = new Oscillator(Wave$Companion_getInstance().SQUARE);
    $receiver_4.gain = 3.0;
    this.osc4_0 = $receiver_4;
    this.highPass_0 = new HighPassFilter(0.5, this);
    this.moodFilter_0 = new MoodFilter(this);
    this.chords_0 = [new Int32Array([7, 12, 17, 10]), new Int32Array([10, 15, 19, 24])];
  }
  Pad.prototype.generate_mx4ult$ = function (dt) {
    var n = this.chords_0[numberToInt(this.t / 4) % this.chords_0.length];
    var osc = this.osc1_0.next_dleff0$(dt, SampleNode$Companion_getInstance().note_vux9f0$(n[0], 1)) + this.osc2_0.next_dleff0$(dt, SampleNode$Companion_getInstance().note_vux9f0$(n[1], 2)) + this.osc3_0.next_dleff0$(dt, SampleNode$Companion_getInstance().note_vux9f0$(n[2], 1)) + this.osc4_0.next_dleff0$(dt, SampleNode$Companion_getInstance().note_vux9f0$(n[3], 0)) + SampleNode$Companion_getInstance().noise_mx4ult$(0.7);
    var s = this.moodFilter_0.filter_7b5o5w$(this.lfo2_0.next_mx4ult$(dt) + 1100, 0.05, osc / 33.0, dt);
    return (this.lfo1_0.next_mx4ult$(dt) + 0.5) * this.highPass_0.filter_mx4ult$(s) * 0.15;
  };
  Pad.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Pad',
    interfaces: [SampleNode]
  };
  function SampleNode() {
    SampleNode$Companion_getInstance();
    this.gain = 1.0;
    this.t_brvpvk$_0 = 0.0;
    this.sample = 0.0;
  }
  Object.defineProperty(SampleNode.prototype, 't', {
    get: function () {
      return this.t_brvpvk$_0;
    },
    set: function (t) {
      this.t_brvpvk$_0 = t;
    }
  });
  SampleNode.prototype.current = function () {
    return this.sample;
  };
  SampleNode.prototype.next_mx4ult$ = function (dt) {
    this.t = this.t + dt;
    this.sample = this.generate_mx4ult$(dt) * this.gain;
    return this.sample;
  };
  function SampleNode$Companion() {
    SampleNode$Companion_instance = this;
    var array = Array_0(15);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var array_0 = new Float32Array(100);
      var tmp$_0;
      tmp$_0 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
        var x = ((i_0 - 20 | 0) - 33.0 + 12.0 * (i - 5 | 0)) / 12.0;
        array_0[i_0] = Math_0.pow(2.0, x) * 440.0;
      }
      array[i] = array_0;
    }
    this.NOTE_TABLE_0 = array;
  }
  SampleNode$Companion.prototype.clip_dleff0$ = function (value, clip) {
    var min = -clip;
    var clamp$result;
    if (value < min) {
      clamp$result = min;
    }
     else if (value > clip) {
      clamp$result = clip;
    }
     else {
      clamp$result = value;
    }
    return clamp$result;
  };
  SampleNode$Companion.prototype.noise_mx4ult$ = function (amplitude) {
    if (amplitude === void 0)
      amplitude = 1.0;
    return randomF_0(-amplitude, amplitude);
  };
  SampleNode$Companion.prototype.note_vux9f0$ = function (note, octave) {
    var clamp$result;
    if (octave < -5) {
      clamp$result = -5;
    }
     else if (octave > 9) {
      clamp$result = 9;
    }
     else {
      clamp$result = octave;
    }
    var o = clamp$result + 5 | 0;
    var clamp$result_0;
    if (note < -20) {
      clamp$result_0 = -20;
    }
     else if (note > 79) {
      clamp$result_0 = 79;
    }
     else {
      clamp$result_0 = note;
    }
    var n = clamp$result_0 + 20 | 0;
    return this.NOTE_TABLE_0[o][n];
  };
  SampleNode$Companion.prototype.perc_7b5o5w$ = function (sample, decay, f, c) {
    if (c === void 0)
      c = 0.889;
    var b = c - f * decay / (f * decay + 1);
    return sample * Math_0.max(0.0, b);
  };
  SampleNode$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SampleNode$Companion_instance = null;
  function SampleNode$Companion_getInstance() {
    if (SampleNode$Companion_instance === null) {
      new SampleNode$Companion();
    }
    return SampleNode$Companion_instance;
  }
  SampleNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SampleNode',
    interfaces: []
  };
  function Shaker(bpm) {
    SampleNode.call(this);
    this.bpm = bpm;
    this.highPass_0 = new HighPassFilter(1.5, this);
  }
  Shaker.prototype.generate_mx4ult$ = function (dt) {
    var pc2 = this.t % (60.0 / this.bpm) / 8;
    var pc1 = 230.0;
    if ((this.t + 0.5) % 0.5 > 0.25) {
      pc1 = 150.0;
    }
    return this.highPass_0.filter_mx4ult$(SampleNode$Companion_getInstance().perc_7b5o5w$(SampleNode$Companion_getInstance().noise_mx4ult$(), pc1, pc2, 0.95)) * 0.1;
  };
  Shaker.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Shaker',
    interfaces: [SampleNode]
  };
  function Snare(bpm) {
    SampleNode.call(this);
    this.bpm = bpm;
    var $receiver = new Oscillator(Wave$Companion_getInstance().SQUARE, 175.0);
    $receiver.gain = 0.156;
    this.osc_0 = $receiver;
    this.lowPass_0 = new LowPassFilter(30.0, this);
  }
  Snare.prototype.generate_mx4ult$ = function (dt) {
    var s = this.osc_0.next_mx4ult$(dt) + SampleNode$Companion_getInstance().noise_mx4ult$(0.73);
    var pc2 = (this.t + 0.5) % (60.0 / this.bpm);
    var pc1 = 120.0;
    if (this.t % 2 > 1) {
      pc1 = 105.0;
    }
    return this.lowPass_0.filter_mx4ult$(SampleNode$Companion_getInstance().perc_7b5o5w$(s, pc1, pc2) * 0.6) * 5;
  };
  Snare.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Snare',
    interfaces: [SampleNode]
  };
  function Wave(tableSize, generator) {
    Wave$Companion_getInstance();
    this.tableSize = tableSize;
    this.table_0 = new Float32Array(this.tableSize);
    var tmp$;
    tmp$ = this.tableSize;
    for (var i = 0; i < tmp$; i++) {
      this.table_0[i] = generator(i / this.tableSize);
    }
  }
  Wave.prototype.get_mx4ult$ = function (index) {
    return this.table_0[numberToInt(index * this.tableSize) % this.tableSize];
  };
  function Wave$Companion() {
    Wave$Companion_instance = this;
    this.DEFAULT_TABLE_SIZE = 2048;
    this.SINE = new Wave(2048, Wave$Companion$SINE$lambda);
    this.SAW = new Wave(2048, Wave$Companion$SAW$lambda);
    this.RAMP = new Wave(2048, Wave$Companion$RAMP$lambda);
    this.TRIANGLE = new Wave(2048, Wave$Companion$TRIANGLE$lambda);
    this.SQUARE = new Wave(2048, Wave$Companion$SQUARE$lambda);
  }
  function Wave$Companion$SINE$lambda(p) {
    var x = p * math.PI * 2;
    return Math_0.sin(x);
  }
  function Wave$Companion$SAW$lambda(p) {
    return -2.0 * (p - round(p));
  }
  function Wave$Companion$RAMP$lambda(p) {
    return 2.0 * (p - round(p));
  }
  function Wave$Companion$TRIANGLE$lambda(p) {
    var x = round(p) - p;
    return 1.0 - 4.0 * Math_0.abs(x);
  }
  function Wave$Companion$SQUARE$lambda(p) {
    return p < 0.5 ? 1.0 : -1.0;
  }
  Wave$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Wave$Companion_instance = null;
  function Wave$Companion_getInstance() {
    if (Wave$Companion_instance === null) {
      new Wave$Companion();
    }
    return Wave$Companion_instance;
  }
  Wave.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Wave',
    interfaces: []
  };
  function BoundedElevationMap() {
  }
  Object.defineProperty(BoundedElevationMap.prototype, 'centerLat', {
    get: function () {
      return (this.north + this.south) / 2.0;
    }
  });
  Object.defineProperty(BoundedElevationMap.prototype, 'centerLon', {
    get: function () {
      return (this.east + this.west) / 2.0;
    }
  });
  BoundedElevationMap.prototype.contains_lu1900$ = function (lat, lon) {
    return rangeTo(this.south - FUZZY_EQ_F, this.north + FUZZY_EQ_F).contains_mef7kx$(lat) && rangeTo(this.west - FUZZY_EQ_F, this.east + FUZZY_EQ_F).contains_mef7kx$(lon);
  };
  BoundedElevationMap.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'BoundedElevationMap',
    interfaces: [ElevationMap]
  };
  function ElevationMapProvider() {
  }
  ElevationMapProvider.prototype.getElevationAt_yvo9jy$ = function (lat, lon, resolution) {
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.getElevationMapAt_yvo9jy$(lat, lon, resolution)) != null ? tmp$.getElevationAt_lu1900$(lat, lon) : null) != null ? tmp$_0 : 0.0;
  };
  ElevationMapProvider.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ElevationMapProvider',
    interfaces: []
  };
  function ElevationMap() {
  }
  ElevationMap.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ElevationMap',
    interfaces: []
  };
  function NullElevationMap() {
    this.isAvailable_yiqgjj$_0 = true;
    this.meta_ga7kfj$_0 = null;
  }
  Object.defineProperty(NullElevationMap.prototype, 'isAvailable', {
    get: function () {
      return this.isAvailable_yiqgjj$_0;
    }
  });
  Object.defineProperty(NullElevationMap.prototype, 'meta', {
    get: function () {
      return this.meta_ga7kfj$_0;
    }
  });
  NullElevationMap.prototype.getElevationMapAt_yvo9jy$ = function (lat, lon, resolution) {
    return this;
  };
  NullElevationMap.prototype.contains_lu1900$ = function (lat, lon) {
    return true;
  };
  NullElevationMap.prototype.getElevationAt_lu1900$ = function (lat, lon) {
    return 0.0;
  };
  NullElevationMap.prototype.getNormalAt_bwm9xi$ = function (lat, lon, result) {
    return result.set_czzhiu$(Vec3f$Companion_getInstance().Z_AXIS);
  };
  NullElevationMap.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NullElevationMap',
    interfaces: [ElevationMap, ElevationMapProvider]
  };
  function ElevationMapMeta(name, format, attr, width, height, north, south, east, west, scaleX, scaleY, scaleZ) {
    ElevationMapMeta$Companion_getInstance();
    this.name = name;
    this.format = format;
    this.attr = attr;
    this.width = width;
    this.height = height;
    this.north = north;
    this.south = south;
    this.east = east;
    this.west = west;
    this.scaleX = scaleX;
    this.scaleY = scaleY;
    this.scaleZ = scaleZ;
  }
  Object.defineProperty(ElevationMapMeta.prototype, 'resolutionLat', {
    get: function () {
      return (this.north - this.south) * 3600.0 / this.height;
    }
  });
  Object.defineProperty(ElevationMapMeta.prototype, 'resolutionLon', {
    get: function () {
      return (this.east - this.west) * 3600.0 / this.height;
    }
  });
  ElevationMapMeta.prototype.contains_lu1900$ = function (lat, lon) {
    return rangeTo(this.south - this.scaleY, this.north + this.scaleY).contains_mef7kx$(lat) && rangeTo(this.west - this.scaleX, this.east + this.scaleX).contains_mef7kx$(lon);
  };
  function ElevationMapMeta$Companion() {
    ElevationMapMeta$Companion_instance = this;
  }
  ElevationMapMeta$Companion.prototype.serializer = function () {
    return ElevationMapMeta$$serializer_getInstance();
  };
  ElevationMapMeta$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ElevationMapMeta$Companion_instance = null;
  function ElevationMapMeta$Companion_getInstance() {
    if (ElevationMapMeta$Companion_instance === null) {
      new ElevationMapMeta$Companion();
    }
    return ElevationMapMeta$Companion_instance;
  }
  function ElevationMapMeta$$serializer() {
    this.descriptor_cvc8j9$_0 = new SerialClassDescImpl('de.fabmax.kool.modules.globe.elevation.ElevationMapMeta', this);
    this.descriptor.addElement_ivxn3r$('name', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(1));
    this.descriptor.addElement_ivxn3r$('format', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(2));
    this.descriptor.addElement_ivxn3r$('attr', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(3));
    this.descriptor.addElement_ivxn3r$('width', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(4));
    this.descriptor.addElement_ivxn3r$('height', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(5));
    this.descriptor.addElement_ivxn3r$('north', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(6));
    this.descriptor.addElement_ivxn3r$('south', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(7));
    this.descriptor.addElement_ivxn3r$('east', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(8));
    this.descriptor.addElement_ivxn3r$('west', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(9));
    this.descriptor.addElement_ivxn3r$('scaleX', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(10));
    this.descriptor.addElement_ivxn3r$('scaleY', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(11));
    this.descriptor.addElement_ivxn3r$('scaleZ', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(12));
    ElevationMapMeta$$serializer_instance = this;
  }
  Object.defineProperty(ElevationMapMeta$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_cvc8j9$_0;
    }
  });
  ElevationMapMeta$$serializer.prototype.serialize_awe97i$ = function (encoder, obj) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeStringElement_bgm7zs$(this.descriptor, 0, obj.name);
    output.encodeStringElement_bgm7zs$(this.descriptor, 1, obj.format);
    output.encodeStringElement_bgm7zs$(this.descriptor, 2, obj.attr);
    output.encodeIntElement_4wpqag$(this.descriptor, 3, obj.width);
    output.encodeIntElement_4wpqag$(this.descriptor, 4, obj.height);
    output.encodeDoubleElement_imzr5k$(this.descriptor, 5, obj.north);
    output.encodeDoubleElement_imzr5k$(this.descriptor, 6, obj.south);
    output.encodeDoubleElement_imzr5k$(this.descriptor, 7, obj.east);
    output.encodeDoubleElement_imzr5k$(this.descriptor, 8, obj.west);
    output.encodeDoubleElement_imzr5k$(this.descriptor, 9, obj.scaleX);
    output.encodeDoubleElement_imzr5k$(this.descriptor, 10, obj.scaleY);
    output.encodeDoubleElement_imzr5k$(this.descriptor, 11, obj.scaleZ);
    output.endStructure_qatsm0$(this.descriptor);
  };
  ElevationMapMeta$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index, readAll = false;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3
    , local4
    , local5
    , local6
    , local7
    , local8
    , local9
    , local10
    , local11;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case -2:
          readAll = true;
        case 0:
          local0 = input.decodeStringElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          if (!readAll)
            break;
        case 1:
          local1 = input.decodeStringElement_3zr2iy$(this.descriptor, 1);
          bitMask0 |= 2;
          if (!readAll)
            break;
        case 2:
          local2 = input.decodeStringElement_3zr2iy$(this.descriptor, 2);
          bitMask0 |= 4;
          if (!readAll)
            break;
        case 3:
          local3 = input.decodeIntElement_3zr2iy$(this.descriptor, 3);
          bitMask0 |= 8;
          if (!readAll)
            break;
        case 4:
          local4 = input.decodeIntElement_3zr2iy$(this.descriptor, 4);
          bitMask0 |= 16;
          if (!readAll)
            break;
        case 5:
          local5 = input.decodeDoubleElement_3zr2iy$(this.descriptor, 5);
          bitMask0 |= 32;
          if (!readAll)
            break;
        case 6:
          local6 = input.decodeDoubleElement_3zr2iy$(this.descriptor, 6);
          bitMask0 |= 64;
          if (!readAll)
            break;
        case 7:
          local7 = input.decodeDoubleElement_3zr2iy$(this.descriptor, 7);
          bitMask0 |= 128;
          if (!readAll)
            break;
        case 8:
          local8 = input.decodeDoubleElement_3zr2iy$(this.descriptor, 8);
          bitMask0 |= 256;
          if (!readAll)
            break;
        case 9:
          local9 = input.decodeDoubleElement_3zr2iy$(this.descriptor, 9);
          bitMask0 |= 512;
          if (!readAll)
            break;
        case 10:
          local10 = input.decodeDoubleElement_3zr2iy$(this.descriptor, 10);
          bitMask0 |= 1024;
          if (!readAll)
            break;
        case 11:
          local11 = input.decodeDoubleElement_3zr2iy$(this.descriptor, 11);
          bitMask0 |= 2048;
          if (!readAll)
            break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return ElevationMapMeta_init(bitMask0, local0, local1, local2, local3, local4, local5, local6, local7, local8, local9, local10, local11, null);
  };
  ElevationMapMeta$$serializer.prototype.childSerializers = function () {
    return [internal.StringSerializer, internal.StringSerializer, internal.StringSerializer, internal.IntSerializer, internal.IntSerializer, internal.DoubleSerializer, internal.DoubleSerializer, internal.DoubleSerializer, internal.DoubleSerializer, internal.DoubleSerializer, internal.DoubleSerializer, internal.DoubleSerializer];
  };
  ElevationMapMeta$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var ElevationMapMeta$$serializer_instance = null;
  function ElevationMapMeta$$serializer_getInstance() {
    if (ElevationMapMeta$$serializer_instance === null) {
      new ElevationMapMeta$$serializer();
    }
    return ElevationMapMeta$$serializer_instance;
  }
  function ElevationMapMeta_init(seen1, name, format, attr, width, height, north, south, east, west, scaleX, scaleY, scaleZ, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(ElevationMapMeta.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('name');
    else
      $this.name = name;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('format');
    else
      $this.format = format;
    if ((seen1 & 4) === 0)
      throw new MissingFieldException('attr');
    else
      $this.attr = attr;
    if ((seen1 & 8) === 0)
      throw new MissingFieldException('width');
    else
      $this.width = width;
    if ((seen1 & 16) === 0)
      throw new MissingFieldException('height');
    else
      $this.height = height;
    if ((seen1 & 32) === 0)
      throw new MissingFieldException('north');
    else
      $this.north = north;
    if ((seen1 & 64) === 0)
      throw new MissingFieldException('south');
    else
      $this.south = south;
    if ((seen1 & 128) === 0)
      throw new MissingFieldException('east');
    else
      $this.east = east;
    if ((seen1 & 256) === 0)
      throw new MissingFieldException('west');
    else
      $this.west = west;
    if ((seen1 & 512) === 0)
      throw new MissingFieldException('scaleX');
    else
      $this.scaleX = scaleX;
    if ((seen1 & 1024) === 0)
      throw new MissingFieldException('scaleY');
    else
      $this.scaleY = scaleY;
    if ((seen1 & 2048) === 0)
      throw new MissingFieldException('scaleZ');
    else
      $this.scaleZ = scaleZ;
    return $this;
  }
  ElevationMapMeta.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ElevationMapMeta',
    interfaces: []
  };
  ElevationMapMeta.prototype.component1 = function () {
    return this.name;
  };
  ElevationMapMeta.prototype.component2 = function () {
    return this.format;
  };
  ElevationMapMeta.prototype.component3 = function () {
    return this.attr;
  };
  ElevationMapMeta.prototype.component4 = function () {
    return this.width;
  };
  ElevationMapMeta.prototype.component5 = function () {
    return this.height;
  };
  ElevationMapMeta.prototype.component6 = function () {
    return this.north;
  };
  ElevationMapMeta.prototype.component7 = function () {
    return this.south;
  };
  ElevationMapMeta.prototype.component8 = function () {
    return this.east;
  };
  ElevationMapMeta.prototype.component9 = function () {
    return this.west;
  };
  ElevationMapMeta.prototype.component10 = function () {
    return this.scaleX;
  };
  ElevationMapMeta.prototype.component11 = function () {
    return this.scaleY;
  };
  ElevationMapMeta.prototype.component12 = function () {
    return this.scaleZ;
  };
  ElevationMapMeta.prototype.copy_uodd0g$ = function (name, format, attr, width, height, north, south, east, west, scaleX, scaleY, scaleZ) {
    return new ElevationMapMeta(name === void 0 ? this.name : name, format === void 0 ? this.format : format, attr === void 0 ? this.attr : attr, width === void 0 ? this.width : width, height === void 0 ? this.height : height, north === void 0 ? this.north : north, south === void 0 ? this.south : south, east === void 0 ? this.east : east, west === void 0 ? this.west : west, scaleX === void 0 ? this.scaleX : scaleX, scaleY === void 0 ? this.scaleY : scaleY, scaleZ === void 0 ? this.scaleZ : scaleZ);
  };
  ElevationMapMeta.prototype.toString = function () {
    return 'ElevationMapMeta(name=' + Kotlin.toString(this.name) + (', format=' + Kotlin.toString(this.format)) + (', attr=' + Kotlin.toString(this.attr)) + (', width=' + Kotlin.toString(this.width)) + (', height=' + Kotlin.toString(this.height)) + (', north=' + Kotlin.toString(this.north)) + (', south=' + Kotlin.toString(this.south)) + (', east=' + Kotlin.toString(this.east)) + (', west=' + Kotlin.toString(this.west)) + (', scaleX=' + Kotlin.toString(this.scaleX)) + (', scaleY=' + Kotlin.toString(this.scaleY)) + (', scaleZ=' + Kotlin.toString(this.scaleZ)) + ')';
  };
  ElevationMapMeta.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.format) | 0;
    result = result * 31 + Kotlin.hashCode(this.attr) | 0;
    result = result * 31 + Kotlin.hashCode(this.width) | 0;
    result = result * 31 + Kotlin.hashCode(this.height) | 0;
    result = result * 31 + Kotlin.hashCode(this.north) | 0;
    result = result * 31 + Kotlin.hashCode(this.south) | 0;
    result = result * 31 + Kotlin.hashCode(this.east) | 0;
    result = result * 31 + Kotlin.hashCode(this.west) | 0;
    result = result * 31 + Kotlin.hashCode(this.scaleX) | 0;
    result = result * 31 + Kotlin.hashCode(this.scaleY) | 0;
    result = result * 31 + Kotlin.hashCode(this.scaleZ) | 0;
    return result;
  };
  ElevationMapMeta.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.format, other.format) && Kotlin.equals(this.attr, other.attr) && Kotlin.equals(this.width, other.width) && Kotlin.equals(this.height, other.height) && Kotlin.equals(this.north, other.north) && Kotlin.equals(this.south, other.south) && Kotlin.equals(this.east, other.east) && Kotlin.equals(this.west, other.west) && Kotlin.equals(this.scaleX, other.scaleX) && Kotlin.equals(this.scaleY, other.scaleY) && Kotlin.equals(this.scaleZ, other.scaleZ)))));
  };
  function ElevationMapMetaHierarchy(maps) {
    ElevationMapMetaHierarchy$Companion_getInstance();
    this.maps = maps;
  }
  function ElevationMapMetaHierarchy$Companion() {
    ElevationMapMetaHierarchy$Companion_instance = this;
  }
  ElevationMapMetaHierarchy$Companion.prototype.serializer = function () {
    return ElevationMapMetaHierarchy$$serializer_getInstance();
  };
  ElevationMapMetaHierarchy$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ElevationMapMetaHierarchy$Companion_instance = null;
  function ElevationMapMetaHierarchy$Companion_getInstance() {
    if (ElevationMapMetaHierarchy$Companion_instance === null) {
      new ElevationMapMetaHierarchy$Companion();
    }
    return ElevationMapMetaHierarchy$Companion_instance;
  }
  function ElevationMapMetaHierarchy$$serializer() {
    this.descriptor_u86u3w$_0 = new SerialClassDescImpl('de.fabmax.kool.modules.globe.elevation.ElevationMapMetaHierarchy', this);
    this.descriptor.addElement_ivxn3r$('maps', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(1));
    ElevationMapMetaHierarchy$$serializer_instance = this;
  }
  Object.defineProperty(ElevationMapMetaHierarchy$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_u86u3w$_0;
    }
  });
  ElevationMapMetaHierarchy$$serializer.prototype.serialize_awe97i$ = function (encoder, obj) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeSerializableElement_blecud$(this.descriptor, 0, new LinkedHashMapSerializer(internal.DoubleSerializer, new ArrayListSerializer(ElevationMapMeta$$serializer_getInstance())), obj.maps);
    output.endStructure_qatsm0$(this.descriptor);
  };
  ElevationMapMetaHierarchy$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index, readAll = false;
    var bitMask0 = 0;
    var local0;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case -2:
          readAll = true;
        case 0:
          local0 = (bitMask0 & 1) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 0, new LinkedHashMapSerializer(internal.DoubleSerializer, new ArrayListSerializer(ElevationMapMeta$$serializer_getInstance()))) : input.updateSerializableElement_ehubvl$(this.descriptor, 0, new LinkedHashMapSerializer(internal.DoubleSerializer, new ArrayListSerializer(ElevationMapMeta$$serializer_getInstance())), local0);
          bitMask0 |= 1;
          if (!readAll)
            break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return ElevationMapMetaHierarchy_init(bitMask0, local0, null);
  };
  ElevationMapMetaHierarchy$$serializer.prototype.childSerializers = function () {
    return [new LinkedHashMapSerializer(internal.DoubleSerializer, new ArrayListSerializer(ElevationMapMeta$$serializer_getInstance()))];
  };
  ElevationMapMetaHierarchy$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var ElevationMapMetaHierarchy$$serializer_instance = null;
  function ElevationMapMetaHierarchy$$serializer_getInstance() {
    if (ElevationMapMetaHierarchy$$serializer_instance === null) {
      new ElevationMapMetaHierarchy$$serializer();
    }
    return ElevationMapMetaHierarchy$$serializer_instance;
  }
  function ElevationMapMetaHierarchy_init(seen1, maps, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(ElevationMapMetaHierarchy.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('maps');
    else
      $this.maps = maps;
    return $this;
  }
  ElevationMapMetaHierarchy.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ElevationMapMetaHierarchy',
    interfaces: []
  };
  ElevationMapMetaHierarchy.prototype.component1 = function () {
    return this.maps;
  };
  ElevationMapMetaHierarchy.prototype.copy_vy0oiy$ = function (maps) {
    return new ElevationMapMetaHierarchy(maps === void 0 ? this.maps : maps);
  };
  ElevationMapMetaHierarchy.prototype.toString = function () {
    return 'ElevationMapMetaHierarchy(maps=' + Kotlin.toString(this.maps) + ')';
  };
  ElevationMapMetaHierarchy.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.maps) | 0;
    return result;
  };
  ElevationMapMetaHierarchy.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.maps, other.maps))));
  };
  function loadElevationMap(baseDir, meta, assetMgr) {
    var tmp$;
    if (equals(meta.format, 'png_s16_rg'))
      tmp$ = loadPngS16ElevationMap(baseDir, meta, assetMgr);
    else
      throw new NotImplementedError('Unknown format ' + meta.format);
    return tmp$;
  }
  function Comparator$ObjectLiteral(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function ElevationMapHierarchy(baseDir, metaHierarchy, assetMgr) {
    this.baseDir_0 = baseDir;
    this.assetMgr_0 = assetMgr;
    this.sets_0 = ArrayList_init_0();
    this.loadedMaps_0 = new LoadedMapCache(64);
    var tmp$;
    tmp$ = metaHierarchy.maps.entries.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var resolution = element.key;
      var metas = element.value;
      var $receiver = this.sets_0;
      var element_0 = new ElevationMapHierarchy$ResolutionSet(resolution, new ElevationMapSet(metas));
      $receiver.add_11rb$(element_0);
    }
    var $receiver_0 = this.sets_0;
    if ($receiver_0.size > 1) {
      sortWith($receiver_0, new Comparator$ObjectLiteral(compareBy$lambda(ElevationMapHierarchy_init$lambda)));
    }
    var $this = package$util.Log;
    var level = Log$Level.DEBUG;
    var tag = Kotlin.getKClassFromExpression(this).simpleName;
    if (level.level >= $this.level.level) {
      $this.printer(level, tag, 'taking elevation data from: ' + this.baseDir_0);
    }
  }
  ElevationMapHierarchy.prototype.getElevationMapAt_yvo9jy$ = function (lat, lon, resolution) {
    var tmp$;
    var bestSet = first(this.sets_0);
    tmp$ = this.sets_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      if (this.sets_0.get_za3lpa$(i).resolution < resolution) {
        bestSet = this.sets_0.get_za3lpa$(i);
      }
       else {
        break;
      }
    }
    var meta = bestSet.set.getMetaAt_lu1900$(lat, lon);
    if (meta != null) {
      return this.loadedMaps_0.getOrLoad_jn660e$(this.baseDir_0, meta, this.assetMgr_0);
    }
    return null;
  };
  function ElevationMapHierarchy$ResolutionSet(resolution, set) {
    this.resolution = resolution;
    this.set = set;
  }
  ElevationMapHierarchy$ResolutionSet.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ResolutionSet',
    interfaces: []
  };
  ElevationMapHierarchy$ResolutionSet.prototype.component1 = function () {
    return this.resolution;
  };
  ElevationMapHierarchy$ResolutionSet.prototype.component2 = function () {
    return this.set;
  };
  ElevationMapHierarchy$ResolutionSet.prototype.copy_kymqdt$ = function (resolution, set) {
    return new ElevationMapHierarchy$ResolutionSet(resolution === void 0 ? this.resolution : resolution, set === void 0 ? this.set : set);
  };
  ElevationMapHierarchy$ResolutionSet.prototype.toString = function () {
    return 'ResolutionSet(resolution=' + Kotlin.toString(this.resolution) + (', set=' + Kotlin.toString(this.set)) + ')';
  };
  ElevationMapHierarchy$ResolutionSet.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.resolution) | 0;
    result = result * 31 + Kotlin.hashCode(this.set) | 0;
    return result;
  };
  ElevationMapHierarchy$ResolutionSet.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.resolution, other.resolution) && Kotlin.equals(this.set, other.set)))));
  };
  function ElevationMapHierarchy_init$lambda(it) {
    return it.resolution;
  }
  ElevationMapHierarchy.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ElevationMapHierarchy',
    interfaces: [ElevationMapProvider]
  };
  function ElevationMapS16(data, meta) {
    ElevationMapS16$Companion_getInstance();
    this.data = data;
    this.meta_hkqm5a$_0 = meta;
    this.isAvailable_uxhgmq$_0 = true;
    this.dx_0 = 0;
    this.dy_0 = 0;
    this.pixelScaleInv_0 = MutableVec2d_init();
    var dLat = (this.meta.north - this.meta.south) / this.meta.height;
    var dLon = (this.meta.east - this.meta.west) / this.meta.width;
    var x = dLat * package$math.DEG_2_RAD;
    this.dy_0 = Math_0.sin(x) * ElevationMapS16$Companion_getInstance().EARTH_RADIUS;
    var x_0 = dLon * package$math.DEG_2_RAD;
    var tmp$ = Math_0.sin(x_0);
    var x_1 = (this.meta.north + this.meta.south) * package$math.DEG_2_RAD / 2.0;
    this.dx_0 = tmp$ * Math_0.cos(x_1) * ElevationMapS16$Companion_getInstance().EARTH_RADIUS;
    this.pixelScaleInv_0.set_lu1900$(1.0 / this.meta.scaleX, 1.0 / this.meta.scaleY);
  }
  Object.defineProperty(ElevationMapS16.prototype, 'meta', {
    get: function () {
      return this.meta_hkqm5a$_0;
    }
  });
  Object.defineProperty(ElevationMapS16.prototype, 'west', {
    get: function () {
      return this.meta.west;
    }
  });
  Object.defineProperty(ElevationMapS16.prototype, 'east', {
    get: function () {
      return this.meta.east;
    }
  });
  Object.defineProperty(ElevationMapS16.prototype, 'south', {
    get: function () {
      return this.meta.south;
    }
  });
  Object.defineProperty(ElevationMapS16.prototype, 'north', {
    get: function () {
      return this.meta.north;
    }
  });
  Object.defineProperty(ElevationMapS16.prototype, 'isAvailable', {
    get: function () {
      return this.isAvailable_uxhgmq$_0;
    }
  });
  ElevationMapS16.prototype.getElevationAt_lu1900$ = function (lat, lon) {
    var tmp$;
    if (!this.contains_lu1900$(lat, lon)) {
      tmp$ = 0.0;
    }
     else {
      var x = (lon - this.meta.west) * this.pixelScaleInv_0.x;
      var wx = 1.0 - x % 1.0;
      var y = (lat - this.meta.south) * this.pixelScaleInv_0.y;
      var wy = 1.0 - y % 1.0;
      var h00 = this.get_vux9f0$(numberToInt(x), this.meta.height - 1 - numberToInt(y) | 0) * this.meta.scaleZ;
      var h01 = this.get_vux9f0$(numberToInt(x) + 1 | 0, this.meta.height - 1 - numberToInt(y) | 0) * this.meta.scaleZ;
      var h10 = this.get_vux9f0$(numberToInt(x), this.meta.height - 2 - numberToInt(y) | 0) * this.meta.scaleZ;
      var h11 = this.get_vux9f0$(numberToInt(x) + 1 | 0, this.meta.height - 2 - numberToInt(y) | 0) * this.meta.scaleZ;
      var h = (h00 * wx + h01 * (1 - wx)) * wy + (h10 * wx + h11 * (1 - wx)) * (1 - wy);
      tmp$ = h;
    }
    return tmp$;
  };
  ElevationMapS16.prototype.getNormalAt_bwm9xi$ = function (lat, lon, result) {
    if (!this.contains_lu1900$(lat, lon)) {
      result.set_czzhiu$(Vec3f$Companion_getInstance().Z_AXIS);
    }
     else {
      var x = numberToInt((lon - this.meta.west) * this.pixelScaleInv_0.x);
      var y = numberToInt((lat - this.meta.south) * this.pixelScaleInv_0.y);
      var h = this.get_vux9f0$(x, y);
      result.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
      if (x > 0) {
        result.z = result.z + 1.0;
        result.x = result.x + (this.get_vux9f0$(x - 1 | 0, this.meta.height - 1 - y | 0) - h) / this.dx_0 * this.meta.scaleZ;
      }
      if (x < (this.meta.width - 1 | 0)) {
        result.z = result.z + 1.0;
        result.x = result.x - (this.get_vux9f0$(x + 1 | 0, this.meta.height - 1 - y | 0) - h) / this.dx_0 * this.meta.scaleZ;
      }
      if (y > 0) {
        result.z = result.z + 1.0;
        result.y = result.y - (this.get_vux9f0$(x, this.meta.height - 2 - y | 0) - h) / this.dx_0 * this.meta.scaleZ;
      }
      if (y < (this.meta.height - 1 | 0)) {
        result.z = result.z + 1.0;
        result.y = result.y + (this.get_vux9f0$(x, this.meta.height - y | 0) - h) / this.dx_0 * this.meta.scaleZ;
      }
      result.norm();
    }
    return result;
  };
  ElevationMapS16.prototype.get_vux9f0$ = function (x, y) {
    var tmp$ = this.data;
    var max = this.meta.width - 1 | 0;
    var clamp$result;
    if (x < 0) {
      clamp$result = 0;
    }
     else if (x > max) {
      clamp$result = max;
    }
     else {
      clamp$result = x;
    }
    var tmp$_0 = clamp$result;
    var tmp$_1 = this.meta.width;
    var max_0 = this.meta.height - 1 | 0;
    var clamp$result_0;
    if (y < 0) {
      clamp$result_0 = 0;
    }
     else if (y > max_0) {
      clamp$result_0 = max_0;
    }
     else {
      clamp$result_0 = y;
    }
    return tmp$[tmp$_0 + Kotlin.imul(tmp$_1, clamp$result_0) | 0];
  };
  function ElevationMapS16$Companion() {
    ElevationMapS16$Companion_instance = this;
    this.EARTH_RADIUS = 6371000.8;
  }
  ElevationMapS16$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ElevationMapS16$Companion_instance = null;
  function ElevationMapS16$Companion_getInstance() {
    if (ElevationMapS16$Companion_instance === null) {
      new ElevationMapS16$Companion();
    }
    return ElevationMapS16$Companion_instance;
  }
  ElevationMapS16.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ElevationMapS16',
    interfaces: [BoundedElevationMap]
  };
  function ElevationMapSet(metas) {
    ElevationMapSet$Companion_getInstance();
    this.subMaps = LinkedHashMap_init();
    this.tileDegX_0 = 0.0;
    this.tileDegY_0 = 0.0;
    var tmp$;
    tmp$ = metas.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (this.tileDegX_0 === 0.0) {
        this.tileDegX_0 = element.east - element.west;
      }
       else {
        var a = this.tileDegX_0;
        var b = element.east - element.west;
        var eps;
        eps = package$math.FUZZY_EQ_D;
        var $receiver = a - b;
        if (!(Math_0.abs($receiver) <= eps)) {
          throw RuntimeException_init('All tiles in set must be of equal size [' + element.name + ': ' + (element.east - element.west) + ' != ' + this.tileDegX_0 + ']');
        }
      }
      if (this.tileDegY_0 === 0.0) {
        this.tileDegY_0 = element.north - element.south;
      }
       else {
        var a_0 = this.tileDegY_0;
        var b_0 = element.north - element.south;
        var eps_0;
        eps_0 = package$math.FUZZY_EQ_D;
        var $receiver_0 = a_0 - b_0;
        if (!(Math_0.abs($receiver_0) <= eps_0)) {
          throw RuntimeException_init('All tiles in set must be of equal size [' + element.name + ': ' + (element.north - element.south) + ' != ' + this.tileDegY_0 + ']');
        }
      }
      var x = ElevationMapSet$Companion_getInstance().lonToX_lu1900$((element.west + element.east) / 2.0, this.tileDegX_0);
      var y = ElevationMapSet$Companion_getInstance().latToY_lu1900$((element.south + element.north) / 2.0, this.tileDegY_0);
      var $receiver_1 = this.subMaps;
      var key = ElevationMapSet$Companion_getInstance().xyToKey_vux9f0$(x, y);
      $receiver_1.put_xwzc9p$(key, element);
    }
  }
  ElevationMapSet.prototype.getMetaAt_lu1900$ = function (lat, lon) {
    var tmp$;
    var tmp$_0;
    if ((tmp$ = this.getMetaAt_vux9f0$(ElevationMapSet$Companion_getInstance().lonToX_lu1900$(lon, this.tileDegX_0), ElevationMapSet$Companion_getInstance().latToY_lu1900$(lat, this.tileDegY_0))) != null) {
      if (!tmp$.contains_lu1900$(lat, lon)) {
        println_0("map doesn't contain lat/lon!");
      }
      tmp$_0 = tmp$;
    }
     else
      tmp$_0 = null;
    return tmp$_0;
  };
  ElevationMapSet.prototype.getMetaAt_vux9f0$ = function (x, y) {
    return this.subMaps.get_11rb$(ElevationMapSet$Companion_getInstance().xyToKey_vux9f0$(x, y));
  };
  function ElevationMapSet$Companion() {
    ElevationMapSet$Companion_instance = this;
  }
  ElevationMapSet$Companion.prototype.lonToX_lu1900$ = function (lon, tileDegX) {
    var x = (lon + 180.0) / tileDegX;
    return numberToInt(Math_0.floor(x));
  };
  ElevationMapSet$Companion.prototype.latToY_lu1900$ = function (lat, tileDegY) {
    var x = (lat + 90.0) / tileDegY;
    return numberToInt(Math_0.floor(x));
  };
  ElevationMapSet$Companion.prototype.xyToKey_vux9f0$ = function (x, y) {
    return y << 16 | x;
  };
  ElevationMapSet$Companion.prototype.keyToX_za3lpa$ = function (key) {
    return key & 65535;
  };
  ElevationMapSet$Companion.prototype.keyToY_za3lpa$ = function (key) {
    return key >> 16;
  };
  ElevationMapSet$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ElevationMapSet$Companion_instance = null;
  function ElevationMapSet$Companion_getInstance() {
    if (ElevationMapSet$Companion_instance === null) {
      new ElevationMapSet$Companion();
    }
    return ElevationMapSet$Companion_instance;
  }
  ElevationMapSet.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ElevationMapSet',
    interfaces: []
  };
  function Comparator$ObjectLiteral_0(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_0.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_0.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_0 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function LoadedMapCache(maxMaps) {
    this.maxMaps_0 = maxMaps;
    this.loadedMaps_0 = LinkedHashMap_init();
    this.useCnt_0 = L0;
  }
  function LoadedMapCache$getOrLoad$lambda(it) {
    return it.lastUsed;
  }
  LoadedMapCache.prototype.getOrLoad_jn660e$ = function (baseDir, meta, assetMgr) {
    var $receiver = this.loadedMaps_0;
    var key = meta.name;
    var tmp$;
    var value = $receiver.get_11rb$(key);
    if (value == null) {
      var answer = new LoadedMapCache$LoadedMap(L0, meta.name, loadElevationMap(baseDir, meta, assetMgr));
      $receiver.put_xwzc9p$(key, answer);
      tmp$ = answer;
    }
     else {
      tmp$ = value;
    }
    var loaded = tmp$;
    loaded.lastUsed = (this.useCnt_0 = this.useCnt_0.inc(), this.useCnt_0);
    if (this.loadedMaps_0.size > this.maxMaps_0) {
      var remCnt = this.loadedMaps_0.size - this.maxMaps_0 | 0;
      var sorted = sortedWith(this.loadedMaps_0.values, new Comparator$ObjectLiteral_0(compareBy$lambda_0(LoadedMapCache$getOrLoad$lambda)));
      for (var i = 0; i <= remCnt; i++) {
        var $receiver_0 = this.loadedMaps_0;
        var key_0 = sorted.get_za3lpa$(i).key;
        $receiver_0.remove_11rb$(key_0);
      }
    }
    return loaded.map;
  };
  function LoadedMapCache$LoadedMap(lastUsed, key, map) {
    this.lastUsed = lastUsed;
    this.key = key;
    this.map = map;
  }
  LoadedMapCache$LoadedMap.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LoadedMap',
    interfaces: []
  };
  LoadedMapCache$LoadedMap.prototype.component1 = function () {
    return this.lastUsed;
  };
  LoadedMapCache$LoadedMap.prototype.component2 = function () {
    return this.key;
  };
  LoadedMapCache$LoadedMap.prototype.component3 = function () {
    return this.map;
  };
  LoadedMapCache$LoadedMap.prototype.copy_ub8cls$ = function (lastUsed, key, map) {
    return new LoadedMapCache$LoadedMap(lastUsed === void 0 ? this.lastUsed : lastUsed, key === void 0 ? this.key : key, map === void 0 ? this.map : map);
  };
  LoadedMapCache$LoadedMap.prototype.toString = function () {
    return 'LoadedMap(lastUsed=' + Kotlin.toString(this.lastUsed) + (', key=' + Kotlin.toString(this.key)) + (', map=' + Kotlin.toString(this.map)) + ')';
  };
  LoadedMapCache$LoadedMap.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.lastUsed) | 0;
    result = result * 31 + Kotlin.hashCode(this.key) | 0;
    result = result * 31 + Kotlin.hashCode(this.map) | 0;
    return result;
  };
  LoadedMapCache$LoadedMap.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.lastUsed, other.lastUsed) && Kotlin.equals(this.key, other.key) && Kotlin.equals(this.map, other.map)))));
  };
  LoadedMapCache.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LoadedMapCache',
    interfaces: []
  };
  function Globe(radius, name) {
    Globe$Companion_getInstance();
    if (radius === void 0)
      radius = Globe$Companion_getInstance().EARTH_RADIUS;
    if (name === void 0)
      name = null;
    TransformGroupDp.call(this, name);
    this.radius = radius;
    this.meterPerPxLvl0 = 156000.0;
    this.frameZoomLvl = 11;
    this.frameZoomThresh = 14;
    this.centerLat_ikjcua$_0 = 0.0;
    this.centerLon_ikjn2u$_0 = 0.0;
    this.cameraHeight_vk4iv0$_0 = 0.0;
    this.tileManager = new TileManager(this);
    this.elevationMapProvider = new NullElevationMap();
    this.meshGenerator = new GridTileMeshGenerator();
    this.meshDetailLevel = 4;
    this.tileShaderProvider = new OsmTexImageTileShaderProvider();
    this.tileFrames_0 = LinkedHashMap_init();
    this.zoomGroups_0 = ArrayList_init_0();
    this.removeTiles_0 = ArrayList_init_0();
    this.camPosition_0 = MutableVec3f_init();
    this.camDirection_0 = MutableVec3f_init();
    this.prevCamDist_0 = 0.0;
    this.prevLat_0 = 0.0;
    this.prevLon_0 = 0.0;
    this.tmpVec_0 = MutableVec3f_init();
    var tmp$, tmp$_0;
    this.translate_yvo9jy$(0.0, 0.0, -this.radius);
    tmp$ = this.tileManager.minZoomLvl;
    tmp$_0 = this.frameZoomThresh;
    for (var i = tmp$; i <= tmp$_0; i++) {
      var grp = new Group();
      this.zoomGroups_0.add_11rb$(grp);
      this.unaryPlus_uv0sim$(grp);
    }
  }
  Object.defineProperty(Globe.prototype, 'minZoomLvl', {
    get: function () {
      return this.tileManager.minZoomLvl;
    }
  });
  Object.defineProperty(Globe.prototype, 'maxZoomLvl', {
    get: function () {
      return this.tileManager.maxZoomLvl;
    }
  });
  Object.defineProperty(Globe.prototype, 'centerLat', {
    get: function () {
      return this.centerLat_ikjcua$_0;
    },
    set: function (centerLat) {
      this.centerLat_ikjcua$_0 = centerLat;
    }
  });
  Object.defineProperty(Globe.prototype, 'centerLon', {
    get: function () {
      return this.centerLon_ikjn2u$_0;
    },
    set: function (centerLon) {
      this.centerLon_ikjn2u$_0 = centerLon;
    }
  });
  Object.defineProperty(Globe.prototype, 'cameraHeight', {
    get: function () {
      return this.cameraHeight_vk4iv0$_0;
    },
    set: function (cameraHeight) {
      this.cameraHeight_vk4iv0$_0 = cameraHeight;
    }
  });
  Globe.prototype.getHeightAt_lu1900$ = function (latitudeDeg, longitudeDeg) {
    var heightRes = this.tileManager.center.arcSecondsLat();
    return this.elevationMapProvider.getElevationAt_yvo9jy$(latitudeDeg, longitudeDeg, heightRes);
  };
  Globe.prototype.setCenter_lu1900$ = function (latitudeDeg, longitudeDeg) {
    this.setCenter_yvo9jy$(latitudeDeg, longitudeDeg, this.getHeightAt_lu1900$(latitudeDeg, longitudeDeg));
  };
  Globe.prototype.setCenter_yvo9jy$ = function (latitudeDeg, longitudeDeg, height) {
    this.setIdentity();
    this.translate_yvo9jy$(0.0, 0.0, -(this.radius + height));
    var min = -85.0;
    var clamp$result;
    if (latitudeDeg < min) {
      clamp$result = min;
    }
     else if (latitudeDeg > 85.0) {
      clamp$result = 85.0;
    }
     else {
      clamp$result = latitudeDeg;
    }
    this.rotate_6y0v78$(clamp$result, 1.0, 0.0, 0.0);
    this.rotate_6y0v78$(longitudeDeg, 0.0, -1.0, 0.0);
  };
  Globe.prototype.preRenderDp_oxz17o$ = function (ctx, modelMatDp) {
    var tmp$, tmp$_0;
    TileMesh$Companion_getInstance().prepareDefaultTex_aemszp$(ctx);
    var cam = (tmp$ = this.scene) != null ? tmp$.camera : null;
    if (cam != null && Kotlin.isType(cam, PerspectiveCamera)) {
      this.toGlobalCoords_w1lst9$(this.tmpVec_0.set_czzhiu$(Vec3f$Companion_getInstance().ZERO));
      this.tmpVec_0.subtract_czzhiu$(cam.globalPos);
      this.cameraHeight = this.tmpVec_0.length() - this.radius;
      var camDist = cam.globalPos.length();
      this.camPosition_0.set_czzhiu$(Vec3f$Companion_getInstance().Z_AXIS).scale_mx4ult$(camDist);
      this.toLocalCoords_w1lst9$(this.camPosition_0);
      this.camPosition_0.norm_5s4mqq$(this.camDirection_0);
      cam.clipNear = camDist * 0.05;
      cam.clipFar = camDist * 10.0;
      if (camDist > this.prevCamDist_0) {
        tmp$_0 = this.prevCamDist_0 / camDist;
      }
       else {
        tmp$_0 = camDist / this.prevCamDist_0;
      }
      var dh = tmp$_0;
      this.prevCamDist_0 = camDist;
      var tmp$_1 = math.PI * 0.5;
      var x = this.camDirection_0.y;
      var $receiver = tmp$_1 - Math_0.acos(x);
      var min = -Globe$Companion_getInstance().RAD_85_0;
      var max = Globe$Companion_getInstance().RAD_85_0;
      var clamp$result;
      if ($receiver < min) {
        clamp$result = min;
      }
       else if ($receiver > max) {
        clamp$result = max;
      }
       else {
        clamp$result = $receiver;
      }
      var lat = clamp$result;
      var y = this.camDirection_0.x;
      var x_0 = this.camDirection_0.z;
      var lon = Math_0.atan2(y, x_0);
      var tmp$_2 = dh < 0.99;
      if (!tmp$_2) {
        var x_1 = lat - this.prevLat_0;
        tmp$_2 = Math_0.abs(x_1) > 1.0E-5;
      }
      var tmp$_3 = tmp$_2;
      if (!tmp$_3) {
        var x_2 = lon - this.prevLon_0;
        tmp$_3 = Math_0.abs(x_2) > 1.0E-5;
      }
      var isMoving = tmp$_3;
      this.prevLat_0 = lat;
      this.prevLon_0 = lon;
      this.centerLat = lat * package$math.RAD_2_DEG;
      this.centerLon = lon * package$math.RAD_2_DEG;
      var height = this.getHeightAt_lu1900$(this.centerLat, this.centerLon);
      this.camDirection_0.scale_mx4ult$(this.radius + height);
      var camHeight = this.camDirection_0.distance_czzhiu$(this.camPosition_0);
      var x_3 = cam.fovy * package$math.DEG_2_RAD * 0.5;
      var meterPerPx = camHeight * Math_0.tan(x_3) * 2.0 / (ctx.viewport.height * 96.0 / ctx.screenDpi);
      var centerZoom = this.getBestZoom_0(meterPerPx, lat);
      var newCenter = TileName$Companion_getInstance().forLatLon_syxxoe$(lat * package$math.RAD_2_DEG, lon * package$math.RAD_2_DEG, centerZoom);
      this.tileManager.updateCenter_6i2c0k$(newCenter, isMoving, ctx);
    }
    this.tileManager.onPreRender_aemszp$(ctx);
    if (!this.removeTiles_0.isEmpty()) {
      var tmp$_4;
      tmp$_4 = this.removeTiles_0.iterator();
      while (tmp$_4.hasNext()) {
        var element = tmp$_4.next();
        if (element.isRemovable) {
          this.tileManager.onTileDeleted_xadgus$(element);
          this.deleteTile_0(element);
          element.dispose_aemszp$(ctx);
        }
      }
      this.removeTiles_0.clear();
    }
    TransformGroupDp.prototype.preRenderDp_oxz17o$.call(this, ctx, modelMatDp);
  };
  Globe.prototype.addTile_xadgus$ = function (mesh) {
    var parentFrame = this.getTileFrame_xacwza$(mesh.tileName);
    if (parentFrame != null) {
      parentFrame.addTile_xadgus$(mesh);
    }
     else {
      this.getZoomGroup_za3lpa$(mesh.tileName.zoom).plusAssign_f1kmr1$(mesh);
    }
  };
  Globe.prototype.removeTile_xadgus$ = function (mesh) {
    this.removeTiles_0.add_11rb$(mesh);
  };
  Globe.prototype.tileLoaded_xadgus$ = function (tileMesh) {
    this.tileManager.onTileLoaded_xadgus$(tileMesh);
  };
  Globe.prototype.deleteTile_0 = function (tile) {
    var frame = this.getTileFrame_xacwza$(tile.tileName);
    if (frame != null) {
      frame.removeTile_xadgus$(tile);
      if (frame.tileCount === 0) {
        this.tileFrames_0.remove_11rb$(frame.tileName.fusedKey);
        this.minusAssign_v64n5s$(frame);
      }
    }
     else {
      this.getZoomGroup_za3lpa$(tile.tileName.zoom).removeNode_f1kmr1$(tile);
    }
  };
  Globe.prototype.getBestZoom_0 = function (meterPerPx, lat) {
    var x = this.meterPerPxLvl0 / meterPerPx * Math_0.cos(lat);
    var $receiver = round(0.2 + Math_0.log2(x));
    var min = this.minZoomLvl;
    var max = this.maxZoomLvl;
    var clamp$result;
    if ($receiver < min) {
      clamp$result = min;
    }
     else if ($receiver > max) {
      clamp$result = max;
    }
     else {
      clamp$result = $receiver;
    }
    return numberToInt(clamp$result);
  };
  Globe.prototype.getZoomGroup_za3lpa$ = function (level) {
    return this.zoomGroups_0.get_za3lpa$(level - this.minZoomLvl | 0);
  };
  Globe.prototype.getTileFrame_xacwza$ = function (tileName) {
    var tmp$;
    if (tileName.zoom < this.frameZoomThresh) {
      tmp$ = null;
    }
     else {
      var div = 1 << tileName.zoom - this.frameZoomLvl;
      var frameX = tileName.x / div | 0;
      var frameY = tileName.y / div | 0;
      var frameKey = TileName$Companion_getInstance().fuesdKey_qt1dr2$(frameX, frameY, this.frameZoomLvl);
      var $receiver = this.tileFrames_0;
      var tmp$_0;
      var value = $receiver.get_11rb$(frameKey);
      if (value == null) {
        var frame = new TileFrame(new TileName(frameX, frameY, this.frameZoomLvl), this);
        this.plusAssign_v64n5s$(frame);
        var answer = frame;
        $receiver.put_xwzc9p$(frameKey, answer);
        tmp$_0 = answer;
      }
       else {
        tmp$_0 = value;
      }
      tmp$ = tmp$_0;
    }
    return tmp$;
  };
  function Globe$Companion() {
    Globe$Companion_instance = this;
    this.RAD_85_0 = 85.0 * package$math.DEG_2_RAD;
    this.ALLOWED_MESH_REFINEMENTS_PER_FRAME = 1;
    this.EARTH_RADIUS = 6378137.0;
  }
  Globe$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Globe$Companion_instance = null;
  function Globe$Companion_getInstance() {
    if (Globe$Companion_instance === null) {
      new Globe$Companion();
    }
    return Globe$Companion_instance;
  }
  Globe.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Globe',
    interfaces: [TransformGroupDp]
  };
  function GlobeCamHandler(globe, scene, ctx) {
    SphericalInputTransform.call(this);
    this.globe = globe;
    this.globePan_0 = new GlobeCamHandler$GlobePan(this);
    this.globe.onPreRender.add_11rb$(GlobeCamHandler_init$lambda(this));
    this.leftDragMethod = SphericalInputTransform$DragMethod$NONE_getInstance();
    this.rightDragMethod = SphericalInputTransform$DragMethod$ROTATE_getInstance();
    this.zoomMethod = SphericalInputTransform$ZoomMethod$ZOOM_CENTER_getInstance();
    this.minZoom = 20.0;
    this.maxZoom = 2.0E7;
    this.verticalAxis = Vec3f$Companion_getInstance().Z_AXIS;
    this.minHorizontalRot = 0.0;
    this.maxHorizontalRot = 85.0;
    this.resetZoom_mx4ult$(1.0E7);
    this.unaryPlus_uv0sim$(scene.camera);
    this.updateTransform();
    scene.camera.updateCamera_aemszp$(ctx);
    scene.registerDragHandler_y44tw7$(this);
  }
  GlobeCamHandler.prototype.handleDrag_urvnay$ = function (dragPtrs, scene, ctx) {
    SphericalInputTransform.prototype.handleDrag_urvnay$.call(this, dragPtrs, scene, ctx);
    if (dragPtrs.size === 1 && dragPtrs.get_za3lpa$(0).isInViewport_n4xpoe$(scene.viewport, ctx)) {
      var ptr = dragPtrs.get_za3lpa$(0);
      var startPan = ptr.isLeftButtonEvent && ptr.isLeftButtonDown;
      var startRotate = ptr.isRightButtonEvent && ptr.isRightButtonDown;
      var startZoom = ptr.deltaScroll !== 0.0 && (ptr.x !== this.globePan_0.screenPosStart.x || ptr.y !== this.globePan_0.screenPosStart.y);
      if (startPan || startRotate || startZoom) {
        this.globePan_0.start_1nc7s5$(ptr.x, ptr.y, ctx);
      }
      if (ptr.isLeftButtonDown) {
        this.globePan_0.screenPos.set_dleff0$(ptr.x, ptr.y);
      }
    }
  };
  GlobeCamHandler.prototype.onPreRender_0 = function (ctx) {
    if (this.globePan_0.isValid) {
      this.globePan_0.apply_aemszp$(ctx);
      this.globe.setCenter_lu1900$(this.globePan_0.globeCenter.y, this.globePan_0.globeCenter.x);
    }
  };
  function GlobeCamHandler$GlobePan($outer) {
    this.$outer = $outer;
    this.pickRay = new Ray();
    this.tmpVec = MutableVec3d_init();
    this.tmpRayO = MutableVec3d_init();
    this.tmpRayL = MutableVec3d_init();
    this.hitPosWorld = MutableVec3d_init();
    this.screenPosStart = MutableVec2f_init();
    this.screenPos = MutableVec2f_init();
    this.globeCoordsStart = MutableVec2d_init();
    this.globeCoords = MutableVec2d_init();
    this.globeCenter = MutableVec2d_init();
    this.startDist = 0.0;
    this.startZoom = 0.0;
    this.isValid = false;
  }
  Object.defineProperty(GlobeCamHandler$GlobePan.prototype, 'cam', {
    get: function () {
      var tmp$;
      return ensureNotNull((tmp$ = this.$outer.globe.scene) != null ? tmp$.camera : null);
    }
  });
  Object.defineProperty(GlobeCamHandler$GlobePan.prototype, 'camTransform', {
    get: function () {
      var tmp$;
      return Kotlin.isType(tmp$ = this.cam.parent, SphericalInputTransform) ? tmp$ : throwCCE();
    }
  });
  GlobeCamHandler$GlobePan.prototype.start_1nc7s5$ = function (screenX, screenY, ctx) {
    this.globeCenter.set_lu1900$(this.$outer.globe.centerLon, this.$outer.globe.centerLat);
    this.screenPosStart.set_dleff0$(screenX, screenY);
    this.screenPos.set_czzhjp$(this.screenPosStart);
    if (this.screen2LatLon_0(screenX, screenY, this.globeCoordsStart, ctx)) {
      this.startDist = this.cam.globalPos.toMutableVec3d_5s4mqs$(this.tmpVec).distance_czzhiw$(this.hitPosWorld);
      this.startZoom = this.camTransform.zoom;
      this.globeCoords.set_czzhjr$(this.globeCoordsStart);
    }
    this.isValid = true;
  };
  GlobeCamHandler$GlobePan.prototype.apply_aemszp$ = function (ctx) {
    if (this.isValid) {
      if (this.screen2LatLon_0(this.screenPos.x, this.screenPos.y, this.globeCoords, ctx)) {
        this.globeCenter.x = this.globeCenter.x + (this.globeCoordsStart.x - this.globeCoords.x);
        var tmp$ = this.globeCenter;
        var $receiver = this.globeCenter.y + (this.globeCoordsStart.y - this.globeCoords.y);
        var min = -85.0;
        var clamp$result;
        if ($receiver < min) {
          clamp$result = min;
        }
         else if ($receiver > 85.0) {
          clamp$result = 85.0;
        }
         else {
          clamp$result = $receiver;
        }
        tmp$.y = clamp$result;
      }
    }
  };
  GlobeCamHandler$GlobePan.prototype.applyZoom_0 = function () {
    this.cam.globalPos.toMutableVec3d_5s4mqs$(this.tmpRayO);
    this.cam.globalLookDir.toMutableVec3d_5s4mqs$(this.tmpRayL).norm();
    var d = this.hitDistSphere_0(this.tmpRayO, this.tmpRayL, this.hitPosWorld, this.startDist);
    if (d < kotlin_js_internal_DoubleCompanionObject.MAX_VALUE) {
      this.camTransform.resetZoom_mx4ult$(this.camTransform.zoom - d / 4);
      println_0('startDist = ' + this.startDist + ', d = ' + d);
    }
  };
  GlobeCamHandler$GlobePan.prototype.screen2LatLon_0 = function (screenX, screenY, result, ctx) {
    var tmp$, tmp$_0;
    tmp$_0 = (tmp$ = this.$outer.scene) != null ? tmp$.viewport : null;
    if (tmp$_0 == null) {
      return false;
    }
    var viewport = tmp$_0;
    if (this.cam.computePickRay_evt2sh$(this.pickRay, screenX, screenY, viewport, ctx)) {
      this.pickRay.origin.toMutableVec3d_5s4mqs$(this.tmpRayO);
      this.pickRay.direction.toMutableVec3d_5s4mqs$(this.tmpRayL);
      this.$outer.globe.toLocalCoordsDp_j7uy7i$(this.tmpRayO, 1.0);
      this.$outer.globe.toLocalCoordsDp_j7uy7i$(this.tmpRayL, 0.0);
      var radius = this.$outer.globe.radius + this.$outer.globe.getHeightAt_lu1900$(this.$outer.globe.centerLat, this.$outer.globe.centerLon);
      var ldo = this.tmpRayL.times_czzhiw$(this.tmpRayO);
      var sqr = ldo * ldo - this.tmpRayO.sqrLength() + radius * radius;
      if (sqr > 0) {
        var hitDist = -ldo - Math_0.sqrt(sqr);
        this.tmpRayL.scale_b0flbq$(hitDist, this.hitPosWorld).add_czzhiw$(this.tmpRayO);
        var y = this.hitPosWorld.x;
        var x = this.hitPosWorld.z;
        result.x = Math_0.atan2(y, x) * package$math.RAD_2_DEG;
        var tmp$_1 = math.PI * 0.5;
        var x_0 = this.hitPosWorld.y / radius;
        result.y = (tmp$_1 - Math_0.acos(x_0)) * package$math.RAD_2_DEG;
        this.$outer.globe.toGlobalCoordsDp_j7uy7i$(this.hitPosWorld);
        return true;
      }
    }
    return false;
  };
  GlobeCamHandler$GlobePan.prototype.hitDistSphere_0 = function (orig, dir, center, radius) {
    center.subtract_vgki2o$(orig, this.tmpVec);
    var tc = this.tmpVec.times_czzhiw$(dir);
    if (tc < 0) {
      return kotlin_js_internal_DoubleCompanionObject.MAX_VALUE;
    }
    var rSqr = radius * radius;
    var dSqr = this.tmpVec.sqrLength() - tc * tc;
    if (dSqr > rSqr) {
      return kotlin_js_internal_DoubleCompanionObject.MAX_VALUE;
    }
    var x = rSqr - dSqr;
    var t1c = Math_0.sqrt(x);
    return tc - t1c;
  };
  GlobeCamHandler$GlobePan.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GlobePan',
    interfaces: []
  };
  function GlobeCamHandler_init$lambda(this$GlobeCamHandler) {
    return function ($receiver, it) {
      this$GlobeCamHandler.onPreRender_0(it);
      return Unit;
    };
  }
  GlobeCamHandler.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GlobeCamHandler',
    interfaces: [SphericalInputTransform]
  };
  function TileFrame(tileName, globe) {
    TransformGroupDp.call(this);
    this.tileName = tileName;
    this.globe_0 = globe;
    this.zoomGroups = ArrayList_init_0();
    this.tileCount_sswiux$_0 = 0;
    var tmp$, tmp$_0;
    this.rotate_5820x2$(this.tileName.lonCenter, Vec3d$Companion_getInstance().Y_AXIS);
    this.rotate_5820x2$(90.0 - this.tileName.latCenter, Vec3d$Companion_getInstance().X_AXIS);
    this.translate_yvo9jy$(0.0, this.globe_0.radius, 0.0);
    this.checkInverse();
    tmp$ = this.tileName.zoom;
    tmp$_0 = this.globe_0.maxZoomLvl;
    for (var i = tmp$; i <= tmp$_0; i++) {
      var grp = new Group();
      this.zoomGroups.add_11rb$(grp);
      this.unaryPlus_uv0sim$(grp);
    }
  }
  Object.defineProperty(TileFrame.prototype, 'transformToLocal', {
    get: function () {
      return this.invTransform;
    }
  });
  Object.defineProperty(TileFrame.prototype, 'transformToGlobal', {
    get: function () {
      return this.transform;
    }
  });
  Object.defineProperty(TileFrame.prototype, 'tileCount', {
    get: function () {
      return this.tileCount_sswiux$_0;
    },
    set: function (tileCount) {
      this.tileCount_sswiux$_0 = tileCount;
    }
  });
  TileFrame.prototype.addTile_xadgus$ = function (tile) {
    this.getZoomGroup_0(tile.tileName.zoom).plusAssign_f1kmr1$(tile);
    this.tileCount = this.tileCount + 1 | 0;
  };
  TileFrame.prototype.removeTile_xadgus$ = function (tile) {
    this.getZoomGroup_0(tile.tileName.zoom).minusAssign_f1kmr1$(tile);
    this.tileCount = this.tileCount - 1 | 0;
  };
  TileFrame.prototype.getZoomGroup_0 = function (level) {
    return this.zoomGroups.get_za3lpa$(level - this.tileName.zoom | 0);
  };
  TileFrame.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TileFrame',
    interfaces: [TransformGroupDp]
  };
  function Comparator$ObjectLiteral_1(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_1.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_1.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_1 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function TileManager(globe) {
    this.globe = globe;
    this.maxTiles = 300;
    this.minZoomLvl = 3;
    this.maxZoomLvl = 19;
    this.tiles_0 = LinkedHashMap_init();
    this.loadingTiles_0 = LinkedHashSet_init();
    this.removingTiles_0 = LinkedHashMap_init();
    this.center_zihcwr$_0 = new TileName(0, 0, 1);
  }
  Object.defineProperty(TileManager.prototype, 'center', {
    get: function () {
      return this.center_zihcwr$_0;
    },
    set: function (center) {
      this.center_zihcwr$_0 = center;
    }
  });
  TileManager.prototype.onTileLoaded_xadgus$ = function (tile) {
    var $receiver = this.loadingTiles_0;
    var element = tile.key;
    $receiver.remove_11rb$(element);
    this.removeObsoleteTiles_0(tile);
  };
  TileManager.prototype.onTileDeleted_xadgus$ = function (tile) {
    if (!tile.isRemovable) {
      var $this = package$util.Log;
      var level = Log$Level.ERROR;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'removed non removable tile: ' + tile.tileName);
      }
    }
    var $receiver = this.loadingTiles_0;
    var element = tile.key;
    $receiver.remove_11rb$(element);
    var $receiver_0 = this.removingTiles_0;
    var key = tile.key;
    $receiver_0.remove_11rb$(key);
    var $receiver_1 = this.tiles_0;
    var key_0 = tile.key;
    $receiver_1.remove_11rb$(key_0);
  };
  TileManager.prototype.onPreRender_aemszp$ = function (ctx) {
    if (this.loadingTiles_0.isEmpty() && !this.removingTiles_0.isEmpty()) {
      var tmp$;
      tmp$ = this.removingTiles_0.values.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        this.globe.removeTile_xadgus$(element);
      }
      this.removingTiles_0.clear();
      var tmp$_0;
      tmp$_0 = this.tiles_0.values.iterator();
      while (tmp$_0.hasNext()) {
        var element_0 = tmp$_0.next();
        element_0.isVisible = true;
      }
    }
  };
  TileManager.prototype.updateCenter_6i2c0k$ = function (newCenter, isMoving, ctx) {
    if (!(newCenter != null ? newCenter.equals(this.center) : null) && (this.tiles_0.size < this.maxTiles || !isMoving)) {
      this.center = newCenter;
      this.updateTiles_0(ctx);
    }
  };
  TileManager.prototype.getCenterTile = function () {
    return this.getTile_xacwza$(this.center);
  };
  TileManager.prototype.getTile_xacwza$ = function (tileName) {
    return this.getTile_s8cxhz$(tileName.fusedKey);
  };
  TileManager.prototype.getTile_s8cxhz$ = function (key) {
    return this.tiles_0.get_11rb$(key);
  };
  function TileManager$updateTiles$lambda(this$TileManager) {
    return function (m) {
      if (!m.isLoaded || !m.isCurrentlyVisible) {
        return -kotlin_js_internal_DoubleCompanionObject.MAX_VALUE;
      }
       else {
        var dx = m.tileName.lonCenter - this$TileManager.center.lonCenter;
        var dy = m.tileName.latCenter - this$TileManager.center.latCenter;
        return -(dx * dx + dy * dy);
      }
    };
  }
  TileManager.prototype.updateTiles_0 = function (ctx) {
    var tmp$;
    var newTiles = this.computeNeededTileList_0();
    this.removingTiles_0.putAll_a2k3zr$(this.tiles_0);
    for (var i = 0; i !== newTiles.size; ++i) {
      var key = newTiles.get_za3lpa$(i);
      this.removingTiles_0.remove_11rb$(key);
      var existing = this.tiles_0.get_11rb$(key);
      if (existing == null) {
        var tile = new TileMesh(this.globe, TileName$Companion_getInstance().fromFusedKey_s8cxhz$(key), ctx);
        this.loadingTiles_0.add_11rb$(key);
        this.tiles_0.put_xwzc9p$(key, tile);
        this.globe.addTile_xadgus$(tile);
      }
       else {
        existing.isRemovable = false;
      }
    }
    var tmp$_0;
    tmp$_0 = this.removingTiles_0.values.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      element.isRemovable = true;
    }
    var forceRemoveThresh = numberToInt(this.maxTiles * 1.5);
    if (this.tiles_0.size > forceRemoveThresh) {
      var $receiver = ArrayList_init_0();
      $receiver.addAll_brywnq$(this.removingTiles_0.values);
      var rmQueue = $receiver;
      if (rmQueue.size > 1) {
        sortWith(rmQueue, new Comparator$ObjectLiteral_1(compareBy$lambda_1(TileManager$updateTiles$lambda(this))));
      }
      tmp$ = this.tiles_0.size - forceRemoveThresh | 0;
      for (var i_0 = 0; i_0 <= tmp$; i_0++) {
        this.globe.removeTile_xadgus$(rmQueue.get_za3lpa$(i_0));
      }
    }
  };
  TileManager.prototype.computeNeededTileList_0 = function () {
    var tileList = ArrayList_init_0();
    var rng = 5;
    var zoom = this.center.zoom;
    var xStart = this.center.x - rng + 1 & -2;
    var xEnd = (this.center.x + rng + 1 & -2) - 1 | 0;
    var yStart = this.center.y - rng + 1 & -2;
    var yEnd = (this.center.y + rng + 1 & -2) - 1 | 0;
    this.addTilesWrappingX_0(xStart, xEnd, yStart, yEnd, zoom, tileList);
    for (var i = 1; i <= 4; i++) {
      zoom = zoom - 1 | 0;
      if (zoom >= this.minZoomLvl) {
        var xStShf = xStart >> 1;
        var xEdShf = xEnd + 1 >> 1;
        var yStShf = yStart >> 1;
        var yEdShf = yEnd + 1 >> 1;
        xStart = xStShf - 1 & -2;
        xEnd = (xEdShf & -2) + 1 | 0;
        yStart = yStShf - 1 & -2;
        yEnd = (yEdShf & -2) + 1 | 0;
        this.addTilesWrappingX_0(xStart, xStShf - 1 | 0, yStart, yEnd, zoom, tileList);
        this.addTilesWrappingX_0(xEdShf, xEnd, yStart, yEnd, zoom, tileList);
        this.addTilesWrappingX_0(xStShf, xEdShf - 1 | 0, yStart, yStShf - 1 | 0, zoom, tileList);
        this.addTilesWrappingX_0(xStShf, xEdShf - 1 | 0, yEdShf, yEnd, zoom, tileList);
      }
       else {
        break;
      }
    }
    return tileList;
  };
  TileManager.prototype.addTilesWrappingX_0 = function (xStart, xEnd, yStart, yEnd, zoom, tiles) {
    var size = 1 << zoom;
    var ys = Math_0.max(0, yStart);
    var a = size - 1 | 0;
    var ye = Math_0.min(a, yEnd);
    var tmp$ = Math_0.max(0, xStart);
    var a_0 = size - 1 | 0;
    this.addTiles_0(new IntRange(tmp$, Math_0.min(a_0, xEnd)), new IntRange(ys, ye), zoom, tiles);
    if (xStart < 0 && xEnd < (size - 1 | 0)) {
      var a_1 = size + xStart | 0;
      this.addTiles_0(until(Math_0.max(a_1, xEnd), size), new IntRange(ys, ye), zoom, tiles);
    }
     else if (xStart > 0 && xEnd > (size - 1 | 0)) {
      var b = xEnd - (size - 1) | 0;
      this.addTiles_0(new IntRange(0, Math_0.min(xStart, b)), new IntRange(ys, ye), zoom, tiles);
    }
  };
  TileManager.prototype.addTiles_0 = function (xRng, yRng, zoom, tiles) {
    if ((xRng.last - xRng.first | 0) > 2 && (yRng.last - yRng.first | 0) > 2) {
      this.addTilesCircular_0(xRng, yRng, zoom, tiles);
    }
     else {
      this.addTilesRectRange_0(xRng, yRng, zoom, tiles);
    }
  };
  TileManager.prototype.addTilesRectRange_0 = function (xRng, yRng, zoom, tiles) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    tmp$ = xRng.first;
    tmp$_0 = xRng.last;
    tmp$_1 = xRng.step;
    for (var x = tmp$; x <= tmp$_0; x += tmp$_1) {
      tmp$_2 = yRng.first;
      tmp$_3 = yRng.last;
      tmp$_4 = yRng.step;
      for (var y = tmp$_2; y <= tmp$_3; y += tmp$_4) {
        this.addTile_0(x, y, zoom, xRng, yRng, tiles);
      }
    }
  };
  TileManager.prototype.addTilesCircular_0 = function (xRng, yRng, zoom, tiles) {
    var tmp$, tmp$_0;
    var cx = xRng.first + ((xRng.last - xRng.first | 0) / 2 | 0) | 0;
    var cy = yRng.first + ((yRng.last - yRng.first | 0) / 2 | 0) | 0;
    var a = cx - xRng.first | 0;
    var b = xRng.last - cx | 0;
    var tmp$_1 = Math_0.max(a, b);
    var a_0 = cy - yRng.first | 0;
    var b_0 = yRng.last - cy | 0;
    var b_1 = Math_0.max(a_0, b_0);
    var r = Math_0.max(tmp$_1, b_1);
    for (var i = 0; i <= r; i++) {
      tmp$ = cx + i | 0;
      for (var x = cx - i | 0; x <= tmp$; x++) {
        this.addTile_0(x, cy - i | 0, zoom, xRng, yRng, tiles);
        if (i > 0) {
          this.addTile_0(x, cy + i | 0, zoom, xRng, yRng, tiles);
        }
      }
      if (i > 0) {
        tmp$_0 = cy + i | 0;
        for (var y = cy - i + 1 | 0; y < tmp$_0; y++) {
          this.addTile_0(cx - i | 0, y, zoom, xRng, yRng, tiles);
          this.addTile_0(cx + i | 0, y, zoom, xRng, yRng, tiles);
        }
      }
    }
  };
  TileManager.prototype.addTile_0 = function (x, y, zoom, xRng, yRng, tiles) {
    if (xRng.contains_mef7kx$(x) && yRng.contains_mef7kx$(y)) {
      var element = TileName$Companion_getInstance().fuesdKey_qt1dr2$(x, y, zoom);
      tiles.add_11rb$(element);
    }
  };
  TileManager.prototype.removeObsoleteTiles_0 = function (tile) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var makeVisible = true;
    var it = this.removingTiles_0.values.iterator();
    while (it.hasNext()) {
      var mesh = it.next();
      if (!mesh.isRemovable) {
        var $this = package$util.Log;
        var level = Log$Level.ERROR;
        var tag = Kotlin.getKClassFromExpression(this).simpleName;
        if (level.level >= $this.level.level) {
          $this.printer(level, tag, 'mesh is not removable!');
        }
      }
      if (mesh.tileName.isSubTileOf_xacwza$(tile.tileName)) {
        this.globe.removeTile_xadgus$(mesh);
        it.remove();
      }
       else if (tile.tileName.isSubTileOf_xacwza$(mesh.tileName)) {
        var z = mesh.tileName.zoom + 1 | 0;
        var subKey1 = TileName$Companion_getInstance().fuesdKey_qt1dr2$(mesh.tileName.x * 2 | 0, mesh.tileName.y * 2 | 0, z);
        var subKey2 = TileName$Companion_getInstance().fuesdKey_qt1dr2$(mesh.tileName.x * 2 | 0, (mesh.tileName.y * 2 | 0) + 1 | 0, z);
        var subKey3 = TileName$Companion_getInstance().fuesdKey_qt1dr2$((mesh.tileName.x * 2 | 0) + 1 | 0, mesh.tileName.y * 2 | 0, z);
        var subKey4 = TileName$Companion_getInstance().fuesdKey_qt1dr2$((mesh.tileName.x * 2 | 0) + 1 | 0, (mesh.tileName.y * 2 | 0) + 1 | 0, z);
        if (((tmp$ = this.tiles_0.get_11rb$(subKey1)) != null ? tmp$.isLoaded : null) === true && ((tmp$_0 = this.tiles_0.get_11rb$(subKey2)) != null ? tmp$_0.isLoaded : null) === true && ((tmp$_1 = this.tiles_0.get_11rb$(subKey3)) != null ? tmp$_1.isLoaded : null) === true && ((tmp$_2 = this.tiles_0.get_11rb$(subKey4)) != null ? tmp$_2.isLoaded : null) === true) {
          this.globe.removeTile_xadgus$(mesh);
          it.remove();
          ensureNotNull(this.tiles_0.get_11rb$(subKey1)).isVisible = true;
          ensureNotNull(this.tiles_0.get_11rb$(subKey2)).isVisible = true;
          ensureNotNull(this.tiles_0.get_11rb$(subKey3)).isVisible = true;
          ensureNotNull(this.tiles_0.get_11rb$(subKey4)).isVisible = true;
        }
         else {
          makeVisible = false;
        }
      }
    }
    tile.isVisible = makeVisible;
  };
  TileManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TileManager',
    interfaces: []
  };
  function TileMesh(globe, tileName, ctx) {
    TileMesh$Companion_getInstance();
    Mesh.call(this, MeshData_init([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().NORMALS, Attribute$Companion_getInstance().TEXTURE_COORDS]), tileName.toString());
    this.globe = globe;
    this.tileName = tileName;
    this.tileShader_0 = null;
    this.tileTex_0 = null;
    this.createTime_0 = ctx.time;
    this.generatorJob_0 = null;
    this.isRemovable = false;
    this.isLoaded_s14qev$_0 = false;
    this.attributionInfo = LinkedHashSet_init();
    var tmp$;
    var provShader = this.globe.tileShaderProvider.getShader_wqbs4n$(this.tileName, ctx);
    if (Kotlin.isType(provShader.shader, BasicShader)) {
      tmp$ = provShader.shader.texture;
    }
     else {
      tmp$ = null;
    }
    this.tileTex_0 = tmp$;
    this.tileShader_0 = provShader.shader;
    this.shader = this.tileShader_0;
    var $receiver = this.attributionInfo;
    var element = provShader.attribution;
    $receiver.add_11rb$(element);
    this.isVisible = false;
    this.generatorJob_0 = launch(coroutines.GlobalScope, void 0, void 0, TileMesh_init$lambda(this));
  }
  Object.defineProperty(TileMesh.prototype, 'key', {
    get: function () {
      return this.tileName.fusedKey;
    }
  });
  Object.defineProperty(TileMesh.prototype, 'isCurrentlyVisible', {
    get: function () {
      return this.isRendered;
    }
  });
  Object.defineProperty(TileMesh.prototype, 'isLoaded', {
    get: function () {
      return this.isLoaded_s14qev$_0;
    },
    set: function (isLoaded) {
      this.isLoaded_s14qev$_0 = isLoaded;
    }
  });
  Object.defineProperty(TileMesh.prototype, 'isFallbackShader_0', {
    get: function () {
      return this.shader === TileMesh$Companion_getInstance().fallbackShader_0;
    }
  });
  TileMesh.prototype.preRender_aemszp$ = function (ctx) {
    var tmp$, tmp$_0, tmp$_1;
    var tex = this.tileTex_0;
    if (tex != null) {
      if (((tmp$ = tex.res) != null ? tmp$.isLoaded : null) !== true) {
        ctx.textureMgr.bindTexture_xyx3x4$(tex, ctx);
      }
       else if (this.isFallbackShader_0 && ((tmp$_0 = tex.res) != null ? tmp$_0.isLoaded : null) === true) {
        this.shader = this.tileShader_0;
      }
    }
    if (!this.generatorJob_0.isCompleted) {
      return;
    }
     else if (this.meshData.vertexList.size === 0) {
      var $this = package$util.Log;
      var level = Log$Level.ERROR;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'mesh is still empty');
      }
    }
    if (!this.isLoaded && (((tmp$_1 = tex != null ? tex.res : null) != null ? tmp$_1.isLoaded : null) === true || this.isFallbackShader_0)) {
      this.isLoaded = true;
      this.globe.tileLoaded_xadgus$(this);
    }
    if (!this.isLoaded && ctx.time - this.createTime_0 > TileMesh$Companion_getInstance().TILE_TIMEOUT) {
      this.shader = TileMesh$Companion_getInstance().getFallbackShader_0();
    }
    Mesh.prototype.preRender_aemszp$.call(this, ctx);
  };
  TileMesh.prototype.dispose_aemszp$ = function (ctx) {
    this.shader = this.tileShader_0;
    Mesh.prototype.dispose_aemszp$.call(this, ctx);
  };
  function TileMesh$AttributionInfo(text, url) {
    this.text = text;
    this.url = url;
  }
  TileMesh$AttributionInfo.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AttributionInfo',
    interfaces: []
  };
  TileMesh$AttributionInfo.prototype.component1 = function () {
    return this.text;
  };
  TileMesh$AttributionInfo.prototype.component2 = function () {
    return this.url;
  };
  TileMesh$AttributionInfo.prototype.copy_jyasbz$ = function (text, url) {
    return new TileMesh$AttributionInfo(text === void 0 ? this.text : text, url === void 0 ? this.url : url);
  };
  TileMesh$AttributionInfo.prototype.toString = function () {
    return 'AttributionInfo(text=' + Kotlin.toString(this.text) + (', url=' + Kotlin.toString(this.url)) + ')';
  };
  TileMesh$AttributionInfo.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.text) | 0;
    result = result * 31 + Kotlin.hashCode(this.url) | 0;
    return result;
  };
  TileMesh$AttributionInfo.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.text, other.text) && Kotlin.equals(this.url, other.url)))));
  };
  function TileMesh$Companion() {
    TileMesh$Companion_instance = this;
    this.TILE_TIMEOUT = 3.0;
    this.fallbackShader_0 = null;
  }
  function TileMesh$Companion$getFallbackShader$lambda($receiver) {
    $receiver.colorModel = ColorModel$TEXTURE_COLOR_getInstance();
    $receiver.lightModel = LightModel$PHONG_LIGHTING_getInstance();
    $receiver.specularIntensity = 0.25;
    $receiver.shininess = 25.0;
    $receiver.staticColor = Color$Companion_getInstance().LIGHT_GRAY;
    $receiver.texture = assetTexture('tile_empty.png', false);
    return Unit;
  }
  TileMesh$Companion.prototype.getFallbackShader_0 = function () {
    if (this.fallbackShader_0 == null) {
      this.fallbackShader_0 = basicShader(void 0, TileMesh$Companion$getFallbackShader$lambda);
    }
    return ensureNotNull(this.fallbackShader_0);
  };
  TileMesh$Companion.prototype.prepareDefaultTex_aemszp$ = function (ctx) {
    var tmp$;
    var fbTex = this.getFallbackShader_0().texture;
    if (fbTex != null && ((tmp$ = fbTex.res) != null ? tmp$.isLoaded : null) !== true) {
      ctx.textureMgr.bindTexture_xyx3x4$(fbTex, ctx);
    }
  };
  TileMesh$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TileMesh$Companion_instance = null;
  function TileMesh$Companion_getInstance() {
    if (TileMesh$Companion_instance === null) {
      new TileMesh$Companion();
    }
    return TileMesh$Companion_instance;
  }
  function Coroutine$TileMesh_init$lambda(this$TileMesh_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$TileMesh = this$TileMesh_0;
  }
  Coroutine$TileMesh_init$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$TileMesh_init$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$TileMesh_init$lambda.prototype.constructor = Coroutine$TileMesh_init$lambda;
  Coroutine$TileMesh_init$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$TileMesh.globe.meshGenerator.generateMesh_gyuwlq$(this.local$this$TileMesh.globe, this.local$this$TileMesh, this.local$this$TileMesh.globe.meshDetailLevel, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      }
       catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        }
         else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function TileMesh_init$lambda(this$TileMesh_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$TileMesh_init$lambda(this$TileMesh_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  TileMesh.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TileMesh',
    interfaces: [Mesh]
  };
  function TileMeshGenerator() {
  }
  TileMeshGenerator.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'TileMeshGenerator',
    interfaces: []
  };
  function GridTileMeshGenerator() {
    GridTileMeshGenerator$Companion_getInstance();
  }
  GridTileMeshGenerator.prototype.getFrame_uewq6o$_0 = function (globe, tileName) {
    var tmp$;
    if (tileName.zoom < globe.frameZoomThresh) {
      tmp$ = null;
    }
     else {
      tmp$ = globe.getTileFrame_xacwza$(tileName);
    }
    return tmp$;
  };
  function Coroutine$generateMesh_gyuwlq$($this, globe_0, tileMesh_0, stepsLog2_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$frame = void 0;
    this.local$builder = void 0;
    this.local$steps = void 0;
    this.local$zoomDiv = void 0;
    this.local$heightResolution = void 0;
    this.local$pos = void 0;
    this.local$nrm = void 0;
    this.local$posf = void 0;
    this.local$map = void 0;
    this.local$row = void 0;
    this.local$latRad = void 0;
    this.local$i = void 0;
    this.local$lonRad = void 0;
    this.local$lat = void 0;
    this.local$lon = void 0;
    this.local$tmp$ = void 0;
    this.local$$receiver = void 0;
    this.local$globe = globe_0;
    this.local$tileMesh = tileMesh_0;
    this.local$stepsLog2 = stepsLog2_0;
  }
  Coroutine$generateMesh_gyuwlq$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$generateMesh_gyuwlq$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$generateMesh_gyuwlq$.prototype.constructor = Coroutine$generateMesh_gyuwlq$;
  Coroutine$generateMesh_gyuwlq$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0;
            this.local$frame = this.$this.getFrame_uewq6o$_0(this.local$globe, this.local$tileMesh.tileName);
            this.local$builder = new MeshBuilder(this.local$tileMesh.meshData);
            this.local$tileMesh.meshData.isBatchUpdate = true;
            this.local$steps = 1 << this.local$stepsLog2;
            this.local$zoomDiv = 2 * math.PI / (1 << this.local$tileMesh.tileName.zoom + this.local$stepsLog2);
            this.local$heightResolution = this.local$tileMesh.tileName.arcSecondsLat() / this.local$steps;
            this.local$pos = MutableVec3d_init();
            this.local$nrm = MutableVec3f_init();
            this.local$posf = MutableVec3f_init();
            this.local$map = null;
            this.local$row = 0;
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$row > this.local$steps) {
              this.state_0 = 12;
              continue;
            }

            var tys = Kotlin.imul(this.local$tileMesh.tileName.y + 1 | 0, this.local$steps) - this.local$row | 0;
            var x = math.PI - tys * this.local$zoomDiv;
            var x_0 = Math_0.sinh(x);
            this.local$latRad = Math_0.atan(x_0);
            this.local$i = 0;
            this.state_0 = 3;
            continue;
          case 3:
            if (this.local$i > this.local$steps) {
              this.state_0 = 9;
              continue;
            }

            this.local$lonRad = (Kotlin.imul(this.local$tileMesh.tileName.x, this.local$steps) + this.local$i | 0) * this.local$zoomDiv - math.PI;
            this.local$lat = this.local$latRad * package$math.RAD_2_DEG;
            this.local$lon = this.local$lonRad * package$math.RAD_2_DEG;
            if (this.local$map == null || !this.local$map.contains_lu1900$(this.local$lat, this.local$lon)) {
              this.local$map = this.local$globe.elevationMapProvider.getElevationMapAt_yvo9jy$(this.local$lat, this.local$lon, this.local$heightResolution);
              if ((tmp$ = this.local$map != null ? this.local$map.meta : null) != null) {
                var $receiver = this.local$tileMesh.attributionInfo;
                var element = new TileMesh$AttributionInfo('Elevation-Data: ' + tmp$.attr, null);
                $receiver.add_11rb$(element);
              }
            }

            if (this.local$map != null) {
              this.local$$receiver = this.local$map;
              this.state_0 = 4;
              continue;
            }
             else {
              this.local$tmp$ = null;
              this.state_0 = 7;
              continue;
            }

          case 4:
            if (this.local$$receiver.isAvailable) {
              this.state_0 = 6;
              continue;
            }

            this.state_0 = 5;
            this.result_0 = delay(L50, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            this.state_0 = 4;
            continue;
          case 6:
            this.local$tmp$ = this.local$$receiver.getElevationAt_lu1900$(this.local$lat, this.local$lon);
            this.state_0 = 7;
            continue;
          case 7:
            var height = (tmp$_0 = this.local$tmp$) != null ? tmp$_0 : 0.0;
            GridTileMeshGenerator$Companion_getInstance().latLonToCartesian_dp1656$(this.local$latRad, this.local$lonRad, this.local$globe.radius + height, this.local$pos);
            if (this.local$frame != null) {
              this.local$frame.transformToLocal.transform_j7uy7i$(this.local$pos, 1.0);
            }

            var uv = new Vec2f(this.local$i / this.local$steps, 1.0 - this.local$row / this.local$steps);
            var iv = this.local$builder.vertex_n440gp$(this.local$pos.toMutableVec3f_5s4mqq$(this.local$posf), this.local$nrm, uv);
            if (this.local$i > 0 && this.local$row > 0) {
              this.local$tileMesh.meshData.addTriIndices_qt1dr2$(iv - this.local$steps - 2 | 0, iv, iv - 1 | 0);
              this.local$tileMesh.meshData.addTriIndices_qt1dr2$(iv - this.local$steps - 2 | 0, iv - this.local$steps - 1 | 0, iv);
            }

            this.state_0 = 8;
            continue;
          case 8:
            this.local$i++;
            this.state_0 = 3;
            continue;
          case 9:
            this.state_0 = 10;
            this.result_0 = yield_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 10:
            this.state_0 = 11;
            continue;
          case 11:
            this.local$row++;
            this.state_0 = 2;
            continue;
          case 12:
            this.local$tileMesh.meshData.generateNormals();
            this.local$tileMesh.meshData.isBatchUpdate = false;
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      }
       catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        }
         else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  GridTileMeshGenerator.prototype.generateMesh_gyuwlq$ = function (globe_0, tileMesh_0, stepsLog2_0, continuation_0, suspended) {
    var instance = new Coroutine$generateMesh_gyuwlq$(this, globe_0, tileMesh_0, stepsLog2_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function GridTileMeshGenerator$Companion() {
    GridTileMeshGenerator$Companion_instance = this;
  }
  GridTileMeshGenerator$Companion.prototype.latLonToCartesian_dp1656$ = function (latRad, lonRad, radius, result) {
    var theta = math.PI * 0.5 - latRad;
    result.x = Math_0.sin(theta) * Math_0.sin(lonRad) * radius;
    result.z = Math_0.sin(theta) * Math_0.cos(lonRad) * radius;
    result.y = Math_0.cos(theta) * radius;
    return result;
  };
  GridTileMeshGenerator$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var GridTileMeshGenerator$Companion_instance = null;
  function GridTileMeshGenerator$Companion_getInstance() {
    if (GridTileMeshGenerator$Companion_instance === null) {
      new GridTileMeshGenerator$Companion();
    }
    return GridTileMeshGenerator$Companion_instance;
  }
  GridTileMeshGenerator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GridTileMeshGenerator',
    interfaces: [TileMeshGenerator]
  };
  function TileName(x, y, zoom) {
    TileName$Companion_getInstance();
    this.x = x;
    this.y = y;
    this.zoom = zoom;
    this.latN = 0;
    this.latS = 0;
    this.lonE = 0;
    this.lonW = 0;
    this.latCenter = 0;
    this.lonCenter = 0;
    this.fusedKey = TileName$Companion_getInstance().fuesdKey_qt1dr2$(this.x, this.y, this.zoom);
    this.sizeMeters = 0;
    var zp = 1 << this.zoom;
    var x_0 = math.PI - (this.y + 1 | 0) / (1 << this.zoom) * 2 * math.PI;
    var x_1 = Math_0.sinh(x_0);
    this.latS = Math_0.atan(x_1) * package$math.RAD_2_DEG;
    this.lonW = this.x / zp * 360.0 - 180.0;
    var x_2 = math.PI - this.y / (1 << this.zoom) * 2 * math.PI;
    var x_3 = Math_0.sinh(x_2);
    this.latN = Math_0.atan(x_3) * package$math.RAD_2_DEG;
    this.lonE = (this.x + 1 | 0) / zp * 360.0 - 180.0;
    this.latCenter = this.latS + (this.latN - this.latS) * 0.5;
    this.lonCenter = this.lonE + (this.lonW - this.lonE) * 0.5;
    var tmp$ = 2 * math.PI * Globe$Companion_getInstance().EARTH_RADIUS;
    var x_4 = this.latCenter * package$math.DEG_2_RAD;
    this.sizeMeters = tmp$ * Math_0.cos(x_4) / (1 << this.zoom);
  }
  TileName.prototype.isSubTileOf_xacwza$ = function (parent) {
    var tmp$;
    if (parent.zoom > this.zoom) {
      tmp$ = false;
    }
     else {
      var projX = this.x >> this.zoom - parent.zoom;
      var projY = this.y >> this.zoom - parent.zoom;
      tmp$ = (projX === parent.x && projY === parent.y);
    }
    return tmp$;
  };
  TileName.prototype.toString = function () {
    return this.zoom.toString() + '/' + this.x + '/' + this.y;
  };
  TileName.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!Kotlin.isType(other, TileName))
      return false;
    if (!equals(this.fusedKey, other.fusedKey))
      return false;
    return true;
  };
  TileName.prototype.hashCode = function () {
    return hashCode(this.fusedKey);
  };
  TileName.prototype.arcSecondsLat = function () {
    return (this.latN - this.latS) * 3600.0;
  };
  function TileName$Companion() {
    TileName$Companion_instance = this;
  }
  TileName$Companion.prototype.forLatLon_syxxoe$ = function (lat, lon, zoom) {
    var latRad = lat * package$math.DEG_2_RAD;
    var zp = 1 << zoom;
    var $receiver = numberToInt((lon + 180.0) / 360 * zp);
    var max = zp - 1 | 0;
    var clamp$result;
    if ($receiver < 0) {
      clamp$result = 0;
    }
     else if ($receiver > max) {
      clamp$result = max;
    }
     else {
      clamp$result = $receiver;
    }
    var x = clamp$result;
    var x_0 = Math_0.tan(latRad) + 1 / Math_0.cos(latRad);
    var $receiver_0 = numberToInt((1 - Math_0.log(x_0) / math.PI) / 2 * zp);
    var max_0 = zp - 1 | 0;
    var clamp$result_0;
    if ($receiver_0 < 0) {
      clamp$result_0 = 0;
    }
     else if ($receiver_0 > max_0) {
      clamp$result_0 = max_0;
    }
     else {
      clamp$result_0 = $receiver_0;
    }
    var y = clamp$result_0;
    return new TileName(x, y, zoom);
  };
  TileName$Companion.prototype.fuesdKey_qt1dr2$ = function (tx, ty, tz) {
    return Kotlin.Long.fromInt(tz).shiftLeft(58).or(Kotlin.Long.fromInt(tx & 536870911).shiftLeft(29)).or(Kotlin.Long.fromInt(ty & 536870911));
  };
  TileName$Companion.prototype.fromFusedKey_s8cxhz$ = function (fusedKey) {
    var zoom = fusedKey.shiftRight(58).toInt();
    var x = fusedKey.shiftRight(29).and(L536870911).toInt();
    var y = fusedKey.and(L536870911).toInt();
    return new TileName(x, y, zoom);
  };
  TileName$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TileName$Companion_instance = null;
  function TileName$Companion_getInstance() {
    if (TileName$Companion_instance === null) {
      new TileName$Companion();
    }
    return TileName$Companion_instance;
  }
  TileName.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TileName',
    interfaces: []
  };
  function TileShaderProvider() {
  }
  TileShaderProvider.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'TileShaderProvider',
    interfaces: []
  };
  function TileShader(shader, attribution) {
    this.shader = shader;
    this.attribution = attribution;
  }
  TileShader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TileShader',
    interfaces: []
  };
  function TexImageTileShaderProvider() {
    this.specularIntensity = 0.25;
    this.shininess = 25.0;
  }
  function TexImageTileShaderProvider$getShader$lambda(this$TexImageTileShaderProvider, closure$tileName, closure$ctx) {
    return function ($receiver) {
      $receiver.colorModel = ColorModel$TEXTURE_COLOR_getInstance();
      $receiver.lightModel = LightModel$PHONG_LIGHTING_getInstance();
      $receiver.specularIntensity = this$TexImageTileShaderProvider.specularIntensity;
      $receiver.shininess = this$TexImageTileShaderProvider.shininess;
      $receiver.texture = this$TexImageTileShaderProvider.getTexture_wqbs4n$(closure$tileName, closure$ctx);
      return Unit;
    };
  }
  TexImageTileShaderProvider.prototype.getShader_wqbs4n$ = function (tileName, ctx) {
    var shader = basicShader(void 0, TexImageTileShaderProvider$getShader$lambda(this, tileName, ctx));
    return new TileShader(shader, this.getAttributionInfo_xacwza$(tileName));
  };
  TexImageTileShaderProvider.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TexImageTileShaderProvider',
    interfaces: [TileShaderProvider]
  };
  function OsmTexImageTileShaderProvider() {
    TexImageTileShaderProvider.call(this);
  }
  OsmTexImageTileShaderProvider.prototype.getTexture_wqbs4n$ = function (tileName, ctx) {
    return assetTexture('https://tile.openstreetmap.org/' + tileName.zoom + '/' + tileName.x + '/' + tileName.y + '.png');
  };
  OsmTexImageTileShaderProvider.prototype.getAttributionInfo_xacwza$ = function (tileName) {
    return new TileMesh$AttributionInfo('Imagery: \xA9 OpenStreetMap', 'http://www.openstreetmap.org/copyright');
  };
  OsmTexImageTileShaderProvider.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OsmTexImageTileShaderProvider',
    interfaces: [TexImageTileShaderProvider]
  };
  function HalfEdgeMesh(meshData, edgeHandler) {
    if (edgeHandler === void 0)
      edgeHandler = new ListEdgeHandler();
    Mesh.call(this, meshData);
    this.edgeHandler = edgeHandler;
    this.verts_0 = null;
    this.positionOffset_0 = ensureNotNull(meshData.vertexList.attributeOffsets.get_11rb$(Attribute$Companion_getInstance().POSITIONS));
    this.tmpVec1_0 = MutableVec3f_init();
    this.tmpVec2_0 = MutableVec3f_init();
    this.tmpVec3_0 = MutableVec3f_init();
    this.vertexIt1_0 = meshData.get_za3lpa$(0);
    this.vertexIt2_0 = meshData.get_za3lpa$(0);
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (meshData.primitiveType !== 4) {
      throw KoolException_init('Supplied meshData must be of primitive type GL_TRIANGLES');
    }
    var size = meshData.numVertices;
    var list = ArrayList_init(size);
    for (var index = 0; index < size; index++) {
      list.add_11rb$(new HalfEdgeMesh$HalfEdgeVertex(this, index));
    }
    this.verts_0 = list;
    tmp$ = meshData.numIndices;
    for (var i = 0; i < tmp$; i += 3) {
      var v0 = this.verts_0.get_za3lpa$(meshData.vertexList.indices.get_za3lpa$(i));
      var v1 = this.verts_0.get_za3lpa$(meshData.vertexList.indices.get_za3lpa$(i + 1 | 0));
      var v2 = this.verts_0.get_za3lpa$(meshData.vertexList.indices.get_za3lpa$(i + 2 | 0));
      var e0 = new HalfEdgeMesh$HalfEdge(this, v0, v1);
      var $receiver = new HalfEdgeMesh$HalfEdge(this, v1, v2);
      e0.next = $receiver;
      var e1 = $receiver;
      var $receiver_0 = new HalfEdgeMesh$HalfEdge(this, v2, v0);
      e1.next = $receiver_0;
      $receiver_0.next = e0;
      var e2 = $receiver_0;
      var tmp$_3;
      if ((tmp$_0 = v1.getEdgeTo_n38rgs$(v0)) != null) {
        tmp$_0.opp = e0;
        tmp$_3 = tmp$_0;
      }
       else
        tmp$_3 = null;
      e0.opp = tmp$_3;
      var tmp$_4;
      if ((tmp$_1 = v2.getEdgeTo_n38rgs$(v1)) != null) {
        tmp$_1.opp = e1;
        tmp$_4 = tmp$_1;
      }
       else
        tmp$_4 = null;
      e1.opp = tmp$_4;
      var tmp$_5;
      if ((tmp$_2 = v0.getEdgeTo_n38rgs$(v2)) != null) {
        tmp$_2.opp = e2;
        tmp$_5 = tmp$_2;
      }
       else
        tmp$_5 = null;
      e2.opp = tmp$_5;
      this.edgeHandler.plusAssign_ebe40$(e0);
      this.edgeHandler.plusAssign_ebe40$(e1);
      this.edgeHandler.plusAssign_ebe40$(e2);
    }
  }
  Object.defineProperty(HalfEdgeMesh.prototype, 'vertices', {
    get: function () {
      return this.verts_0;
    }
  });
  Object.defineProperty(HalfEdgeMesh.prototype, 'vertCount', {
    get: function () {
      return this.verts_0.size;
    }
  });
  Object.defineProperty(HalfEdgeMesh.prototype, 'faceCount', {
    get: function () {
      return this.edgeHandler.numEdges / 3 | 0;
    }
  });
  function HalfEdgeMesh$EdgeHandler() {
  }
  HalfEdgeMesh$EdgeHandler.prototype.distinctTriangleEdges = function () {
    var destination = ArrayList_init_0();
    var tmp$;
    tmp$ = this.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (element.id.compareTo_11rb$(element.next.id) < 0 && element.id.compareTo_11rb$(element.next.next.id) < 0)
        destination.add_11rb$(element);
    }
    return destination;
  };
  HalfEdgeMesh$EdgeHandler.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'EdgeHandler',
    interfaces: [Iterable]
  };
  HalfEdgeMesh.prototype.generateWireframe_wuugko$ = function (lineMesh, lineColor) {
    if (lineColor === void 0)
      lineColor = Color$Companion_getInstance().MD_PINK;
    var v0 = MutableVec3f_init();
    var v1 = MutableVec3f_init();
    var $receiver = this.edgeHandler;
    var destination = ArrayList_init_0();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (element.opp == null || element.from.index < element.to.index)
        destination.add_11rb$(element);
    }
    var tmp$_0;
    tmp$_0 = destination.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      v0.set_czzhiu$(element_0.from);
      v1.set_czzhiu$(element_0.to);
      lineMesh.addLine_b8opkg$(v0, lineColor, v1, lineColor);
    }
  };
  function HalfEdgeMesh$sanitize$lambda(closure$v, this$HalfEdgeMesh) {
    return function (it) {
      if (it.isDeleted) {
        var $receiver = this$HalfEdgeMesh;
        var $this = package$util.Log;
        var level = Log$Level.WARN;
        var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
        if (level.level >= $this.level.level) {
          $this.printer(level, tag, 'Deleted edge in v, edge.from == v: ' + (it.from === closure$v));
        }
      }
      return it.isDeleted;
    };
  }
  HalfEdgeMesh.prototype.sanitize = function () {
    var tmp$, tmp$_0, tmp$_1;
    var vIt = this.verts_0.iterator();
    var vi = 0;
    while (vIt.hasNext()) {
      var v = vIt.next();
      if (v.isDeleted) {
        vIt.remove();
      }
       else {
        v.index = (tmp$ = vi, vi = tmp$ + 1 | 0, tmp$);
      }
    }
    var vertCnt = this.verts_0.size;
    this.edgeHandler.rebuild();
    if (this.edgeHandler.numEdges % 3 !== 0) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Uneven edge count: ' + this.edgeHandler.numEdges % 3);
      }
    }
    var removeEdges = ArrayList_init_0();
    tmp$_0 = this.verts_0.iterator();
    while (tmp$_0.hasNext()) {
      var v_0 = tmp$_0.next();
      removeAll(v_0.edges, HalfEdgeMesh$sanitize$lambda(v_0, this));
      tmp$_1 = v_0.edges.iterator();
      while (tmp$_1.hasNext()) {
        var he = tmp$_1.next();
        var i0 = he.from.index;
        var i1 = he.next.from.index;
        var i2 = he.next.next.from.index;
        if (i0 >= vertCnt || i1 >= vertCnt || i2 >= vertCnt) {
          var $this_0 = package$util.Log;
          var level_0 = Log$Level.WARN;
          var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
          if (level_0.level >= $this_0.level.level) {
            $this_0.printer(level_0, tag_0, 'Inconsistent triangle indices: i0=' + i0 + ', i1=' + i1 + ', i2=' + i2 + ', mesh has only ' + vertCnt + ' vertices');
          }
          removeEdges.add_11rb$(he);
        }
      }
    }
    var tmp$_2;
    tmp$_2 = this.edgeHandler.iterator();
    while (tmp$_2.hasNext()) {
      var element = tmp$_2.next();
      if (element.from.isDeleted || element.from.index >= vertCnt || element.to.isDeleted || element.to.index >= vertCnt) {
        var $this_1 = package$util.Log;
        var level_1 = Log$Level.WARN;
        var tag_1 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_1.level >= $this_1.level.level) {
          $this_1.printer(level_1, tag_1, 'Inconsistent edge: ' + element.from.index + ' (del=' + element.from.isDeleted + ') -> ' + element.to.index + ' (del=' + element.to.isDeleted + '), mesh has only ' + vertCnt + ' vertices');
        }
        removeEdges.add_11rb$(element);
      }
      if (element === element.next || element === element.next.next) {
        var $this_2 = package$util.Log;
        var level_2 = Log$Level.WARN;
        var tag_2 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_2.level >= $this_2.level.level) {
          $this_2.printer(level_2, tag_2, 'Invalid edge linkage: he == he.next || he == he.next.next');
        }
        removeEdges.add_11rb$(element);
      }
    }
    var tmp$_3;
    tmp$_3 = removeEdges.iterator();
    while (tmp$_3.hasNext()) {
      var element_0 = tmp$_3.next();
      element_0.deleteTriangle();
    }
  };
  HalfEdgeMesh.prototype.rebuild_dqye30$ = function (generateNormals, generateTangents) {
    if (generateNormals === void 0)
      generateNormals = true;
    if (generateTangents === void 0)
      generateTangents = true;
    this.sanitize();
    var $this = this.meshData;
    var wasBatchUpdate = $this.isBatchUpdate;
    $this.isBatchUpdate = true;
    var tmp$, tmp$_0;
    var strideF = this.meshData.vertexList.vertexSizeF;
    var strideI = this.meshData.vertexList.vertexSizeI;
    var vertCnt = this.verts_0.size;
    var newDataF = createFloat32Buffer(Kotlin.imul(vertCnt, strideF));
    var newDataI = strideI > 0 ? createUint32Buffer(Kotlin.imul(vertCnt, strideI)) : this.meshData.vertexList.dataI;
    tmp$ = this.verts_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      var oldIdx = this.verts_0.get_za3lpa$(i).meshDataIndex_8be2vx$;
      this.verts_0.get_za3lpa$(i).meshDataIndex_8be2vx$ = this.verts_0.get_za3lpa$(i).index;
      for (var j = 0; j < strideF; j++) {
        newDataF.put_mx4ult$(this.meshData.vertexList.dataF.get_za3lpa$(Kotlin.imul(oldIdx, strideF) + j | 0));
      }
      if (strideI > 0) {
        for (var j_0 = 0; j_0 < strideI; j_0++) {
          newDataI.put_za3lpa$(this.meshData.vertexList.dataI.get_za3lpa$(Kotlin.imul(oldIdx, strideI) + j_0 | 0));
        }
      }
    }
    this.meshData.vertexList.clearIndices();
    tmp$_0 = this.edgeHandler.distinctTriangleEdges().iterator();
    while (tmp$_0.hasNext()) {
      var e = tmp$_0.next();
      this.meshData.vertexList.addIndex_za3lpa$(e.from.index);
      this.meshData.vertexList.addIndex_za3lpa$(e.next.from.index);
      this.meshData.vertexList.addIndex_za3lpa$(e.next.next.from.index);
    }
    if (this.meshData.numIndices !== (this.faceCount * 3 | 0)) {
      var $this_0 = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression($this).simpleName;
      if (level.level >= $this_0.level.level) {
        $this_0.printer(level, tag, 'Inconsistent triangle count! MeshData: ' + (this.meshData.numIndices / 3 | 0) + ', HalfEdgeMesh: ' + this.faceCount);
      }
    }
    this.meshData.vertexList.dataF = newDataF;
    this.meshData.vertexList.dataI = newDataI;
    this.meshData.vertexList.size = vertCnt;
    if (generateNormals) {
      this.meshData.generateNormals();
    }
    if (generateTangents) {
      this.meshData.generateTangents();
    }
    $this.isSyncRequired = true;
    $this.isBatchUpdate = wasBatchUpdate;
    if (true) {
      $this.rebuildBounds();
    }
  };
  HalfEdgeMesh.prototype.selectBorders = function () {
    var tmp$, tmp$_0;
    var borders = ArrayList_init_0();
    var collected = LinkedHashSet_init();
    var border = ArrayList_init_0();
    tmp$ = this.edgeHandler.iterator();
    while (tmp$.hasNext()) {
      var edge = tmp$.next();
      if (edge.opp == null) {
        var borderEdge = edge;
        while (!collected.contains_11rb$(borderEdge)) {
          border.add_11rb$(borderEdge);
          collected.add_11rb$(borderEdge);
          var $receiver = borderEdge.to.edges;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_1;
            tmp$_1 = $receiver.iterator();
            while (tmp$_1.hasNext()) {
              var element = tmp$_1.next();
              if (element.opp == null && !collected.contains_11rb$(element)) {
                firstOrNull$result = element;
                break firstOrNull$break;
              }
            }
            firstOrNull$result = null;
          }
           while (false);
          tmp$_0 = firstOrNull$result;
          if (tmp$_0 == null) {
            break;
          }
          borderEdge = tmp$_0;
        }
        if (!border.isEmpty()) {
          borders.add_11rb$(border);
          border = ArrayList_init_0();
        }
      }
    }
    return borders;
  };
  HalfEdgeMesh.prototype.subSelect_ojfeji$ = function (start, maxTris) {
    if (maxTris === void 0)
      maxTris = 0;
    var selection = ArrayList_init_0();
    var borderEdges = LinkedHashSet_init();
    var innerEdges = LinkedHashSet_init();
    var borderQueue = mutableListOf([start]);
    while (!borderQueue.isEmpty() && (maxTris === 0 || (selection.size / 3 | 0) < maxTris)) {
      var he = borderQueue.removeAt_za3lpa$(0);
      if (innerEdges.contains_11rb$(he.id)) {
        continue;
      }
      var element = he.id;
      innerEdges.add_11rb$(element);
      selection.add_11rb$(he);
      var $receiver = he.next;
      var element_0 = $receiver.id;
      innerEdges.add_11rb$(element_0);
      selection.add_11rb$($receiver);
      var $receiver_0 = he.next.next;
      var element_1 = $receiver_0.id;
      innerEdges.add_11rb$(element_1);
      selection.add_11rb$($receiver_0);
      if (he.opp != null && !innerEdges.contains_11rb$(ensureNotNull(he.opp).id) && !borderEdges.contains_11rb$(ensureNotNull(he.opp).id)) {
        var element_2 = ensureNotNull(he.opp);
        borderQueue.add_11rb$(element_2);
      }
      if (he.next.opp != null && !innerEdges.contains_11rb$(ensureNotNull(he.next.opp).id) && !borderEdges.contains_11rb$(ensureNotNull(he.next.opp).id)) {
        var element_3 = ensureNotNull(he.next.opp);
        borderQueue.add_11rb$(element_3);
      }
      if (he.next.next.opp != null && !innerEdges.contains_11rb$(ensureNotNull(he.next.next.opp).id) && !borderEdges.contains_11rb$(ensureNotNull(he.next.next.opp).id)) {
        var element_4 = ensureNotNull(he.next.next.opp);
        borderQueue.add_11rb$(element_4);
      }
    }
    return new Pair(borderQueue, selection);
  };
  HalfEdgeMesh.prototype.splitEdge_b49or$ = function (edge, fraction) {
    var $this = this.meshData.vertexList;
    var tmp$, tmp$_0, tmp$_1;
    $this.checkBufferSizes_za3lpa$();
    tmp$ = $this.vertexSizeF;
    for (var i = 1; i <= tmp$; i++) {
      $this.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_0 = $this.vertexSizeI;
    for (var i_0 = 1; i_0 <= tmp$_0; i_0++) {
      $this.dataI.plusAssign_za3lpa$(0);
    }
    $this.vertexIt.index = (tmp$_1 = $this.size, $this.size = tmp$_1 + 1 | 0, tmp$_1);
    var $receiver = $this.vertexIt;
    $receiver.position.set_czzhiu$(edge.to).subtract_czzhiu$(edge.from).scale_mx4ult$(fraction).add_czzhiu$(edge.from);
    edge.from.getMeshVertex_j5bz6$(this.vertexIt1_0);
    edge.to.getMeshVertex_j5bz6$(this.vertexIt2_0);
    $receiver.texCoord.set_czzhjp$(this.vertexIt2_0.texCoord).subtract_czzhjp$(this.vertexIt1_0.texCoord).scale_mx4ult$(fraction).add_czzhjp$(this.vertexIt1_0.texCoord);
    $receiver.normal.set_czzhiu$(this.vertexIt2_0.normal).subtract_czzhiu$(this.vertexIt1_0.normal).scale_mx4ult$(fraction).add_czzhiu$(this.vertexIt1_0.normal);
    null != null ? null.add_czzhiu$($this.vertexIt.position) : null;
    var idx = $this.size - 1 | 0;
    var insertV = new HalfEdgeMesh$HalfEdgeVertex(this, idx);
    this.verts_0.add_11rb$(insertV);
    var prevToR = edge.to;
    edge.updateTo_n38rgs$(insertV);
    var $receiver_0 = edge.next.from.edges;
    var element = edge.next;
    $receiver_0.remove_11rb$(element);
    edge.next.updateFrom_n38rgs$(insertV);
    var $receiver_1 = insertV.edges;
    var element_0 = edge.next;
    $receiver_1.add_11rb$(element_0);
    var insertEdR0 = new HalfEdgeMesh$HalfEdge(this, insertV, prevToR);
    var $receiver_2 = new HalfEdgeMesh$HalfEdge(this, prevToR, edge.next.to);
    var tmp$_2;
    insertEdR0.next = $receiver_2;
    $receiver_2.opp = edge.next.opp;
    (tmp$_2 = $receiver_2.opp) != null ? (tmp$_2.opp = $receiver_2) : null;
    var insertEdR1 = $receiver_2;
    var $receiver_3 = new HalfEdgeMesh$HalfEdge(this, edge.next.to, insertV);
    insertEdR1.next = $receiver_3;
    $receiver_3.next = insertEdR0;
    $receiver_3.opp = edge.next;
    edge.next.opp = $receiver_3;
    var insertEdR2 = $receiver_3;
    this.edgeHandler.plusAssign_ebe40$(insertEdR0);
    this.edgeHandler.plusAssign_ebe40$(insertEdR1);
    this.edgeHandler.plusAssign_ebe40$(insertEdR2);
    var edgeOpp = edge.opp;
    if (edgeOpp != null) {
      var prevToL = edgeOpp.to;
      edgeOpp.updateTo_n38rgs$(insertV);
      var $receiver_4 = edgeOpp.next.from.edges;
      var element_1 = edgeOpp.next;
      $receiver_4.remove_11rb$(element_1);
      edgeOpp.next.updateFrom_n38rgs$(insertV);
      var $receiver_5 = insertV.edges;
      var element_2 = edgeOpp.next;
      $receiver_5.add_11rb$(element_2);
      var insertEdL0 = new HalfEdgeMesh$HalfEdge(this, insertV, prevToL);
      var $receiver_6 = new HalfEdgeMesh$HalfEdge(this, prevToL, edgeOpp.next.to);
      var tmp$_3;
      insertEdL0.next = $receiver_6;
      $receiver_6.opp = edgeOpp.next.opp;
      (tmp$_3 = $receiver_6.opp) != null ? (tmp$_3.opp = $receiver_6) : null;
      var insertEdL1 = $receiver_6;
      var $receiver_7 = new HalfEdgeMesh$HalfEdge(this, edgeOpp.next.to, insertV);
      insertEdL1.next = $receiver_7;
      $receiver_7.next = insertEdL0;
      $receiver_7.opp = edgeOpp.next;
      edgeOpp.next.opp = $receiver_7;
      var insertEdL2 = $receiver_7;
      insertEdL0.opp = edge;
      edge.opp = insertEdL0;
      insertEdR0.opp = edgeOpp;
      edgeOpp.opp = insertEdR0;
      this.edgeHandler.plusAssign_ebe40$(insertEdL0);
      this.edgeHandler.plusAssign_ebe40$(insertEdL1);
      this.edgeHandler.plusAssign_ebe40$(insertEdL2);
    }
    return insertV;
  };
  HalfEdgeMesh.prototype.collapseEdge_b49or$ = function (edge, fraction) {
    var tmp$;
    var srcVert = edge.from;
    var delVert = edge.to;
    var oppR1 = edge.next.opp;
    if (oppR1 != null) {
      edge.next.opp = null;
      oppR1.opp = null;
      oppR1.updateTo_n38rgs$(srcVert);
    }
    var oppR2 = edge.next.next.opp;
    if (oppR2 != null) {
      edge.next.next.opp = null;
      oppR2.opp = oppR1;
      if (oppR1 != null) {
        oppR1.opp = oppR2;
      }
    }
    var edgeOpp = edge.opp;
    if (edgeOpp != null) {
      var oppL1 = edgeOpp.next.opp;
      if (oppL1 != null) {
        edgeOpp.next.opp = null;
        oppL1.opp = null;
      }
      var oppL2 = edgeOpp.next.next.opp;
      if (oppL2 != null) {
        delVert.edges.remove_11rb$(oppL2);
        srcVert.edges.add_11rb$(oppL2);
        oppL2.updateFrom_n38rgs$(srcVert);
        oppL2.next.next.updateTo_n38rgs$(srcVert);
        edgeOpp.next.next.opp = null;
        oppL2.opp = oppL1;
        if (oppL1 != null) {
          oppL1.opp = oppL2;
        }
      }
    }
    edge.deleteTriangle();
    edgeOpp != null ? (edgeOpp.deleteTriangle(), Unit) : null;
    tmp$ = delVert.edges;
    for (var i = 0; i !== tmp$.size; ++i) {
      var e = delVert.edges.get_za3lpa$(i);
      e.updateFrom_n38rgs$(srcVert);
      e.next.next.updateTo_n38rgs$(srcVert);
      var eOpp = e.opp;
      if (eOpp != null) {
        eOpp.updateTo_n38rgs$(srcVert);
        eOpp.next.updateFrom_n38rgs$(srcVert);
      }
      srcVert.edges.add_11rb$(e);
    }
    delVert.edges.clear();
    delVert.delete();
    if (fraction !== 0.0) {
      var newX = srcVert.x + (delVert.x - srcVert.x) * fraction;
      var newY = srcVert.y + (delVert.y - srcVert.y) * fraction;
      var newZ = srcVert.z + (delVert.z - srcVert.z) * fraction;
      srcVert.updatePosition_y2kzbl$(newX, newY, newZ);
    }
  };
  HalfEdgeMesh.prototype.subMeshOf_u28ozl$ = function (edges) {
    var subData = new MeshData(this.meshData.vertexAttributes);
    var indexMap = LinkedHashMap_init();
    var v = this.meshData.vertexList.vertexIt;
    var tmp$;
    tmp$ = edges.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (!indexMap.keys.contains_11rb$(element.from.index)) {
        var tmp$_0 = element.from.index;
        subData.isSyncRequired = true;
        var $this = subData.vertexList;
        var updateBounds = subData.bounds;
        var tmp$_1, tmp$_2, tmp$_3;
        $this.checkBufferSizes_za3lpa$();
        tmp$_1 = $this.vertexSizeF;
        for (var i = 1; i <= tmp$_1; i++) {
          $this.dataF.plusAssign_mx4ult$(0.0);
        }
        tmp$_2 = $this.vertexSizeI;
        for (var i_0 = 1; i_0 <= tmp$_2; i_0++) {
          $this.dataI.plusAssign_za3lpa$(0);
        }
        $this.vertexIt.index = (tmp$_3 = $this.size, $this.size = tmp$_3 + 1 | 0, tmp$_3);
        var $receiver = $this.vertexIt;
        v.index = element.from.index;
        $receiver.set_j5bz6$(v);
        updateBounds != null ? updateBounds.add_czzhiu$($this.vertexIt.position) : null;
        var value = $this.size - 1 | 0;
        indexMap.put_xwzc9p$(tmp$_0, value);
      }
      if (!indexMap.keys.contains_11rb$(element.to.index)) {
        var tmp$_4 = element.to.index;
        subData.isSyncRequired = true;
        var $this_0 = subData.vertexList;
        var updateBounds_0 = subData.bounds;
        var tmp$_5, tmp$_6, tmp$_7;
        $this_0.checkBufferSizes_za3lpa$();
        tmp$_5 = $this_0.vertexSizeF;
        for (var i_1 = 1; i_1 <= tmp$_5; i_1++) {
          $this_0.dataF.plusAssign_mx4ult$(0.0);
        }
        tmp$_6 = $this_0.vertexSizeI;
        for (var i_2 = 1; i_2 <= tmp$_6; i_2++) {
          $this_0.dataI.plusAssign_za3lpa$(0);
        }
        $this_0.vertexIt.index = (tmp$_7 = $this_0.size, $this_0.size = tmp$_7 + 1 | 0, tmp$_7);
        var $receiver_0 = $this_0.vertexIt;
        v.index = element.to.index;
        $receiver_0.set_j5bz6$(v);
        updateBounds_0 != null ? updateBounds_0.add_czzhiu$($this_0.vertexIt.position) : null;
        var value_0 = $this_0.size - 1 | 0;
        indexMap.put_xwzc9p$(tmp$_4, value_0);
      }
    }
    var addedHes = LinkedHashSet_init();
    var tmp$_8;
    tmp$_8 = edges.iterator();
    while (tmp$_8.hasNext()) {
      var element_0 = tmp$_8.next();
      if (!addedHes.contains_11rb$(element_0.id)) {
        subData.addTriIndices_qt1dr2$(ensureNotNull(indexMap.get_11rb$(element_0.from.index)), ensureNotNull(indexMap.get_11rb$(element_0.next.from.index)), ensureNotNull(indexMap.get_11rb$(element_0.next.next.from.index)));
        var element_1 = element_0.id;
        addedHes.add_11rb$(element_1);
        var element_2 = element_0.next.id;
        addedHes.add_11rb$(element_2);
        var element_3 = element_0.next.next.id;
        addedHes.add_11rb$(element_3);
      }
    }
    return subData;
  };
  function HalfEdgeMesh$HalfEdgeVertex($outer, index) {
    this.$outer = $outer;
    Vec3f_init(0.0, this);
    this.index = index;
    this.edges = ArrayList_init_0();
    this.isDeleted_st01j9$_0 = false;
    this.meshDataIndex_8be2vx$ = this.index;
  }
  Object.defineProperty(HalfEdgeMesh$HalfEdgeVertex.prototype, 'isDeleted', {
    get: function () {
      return this.isDeleted_st01j9$_0;
    },
    set: function (isDeleted) {
      this.isDeleted_st01j9$_0 = isDeleted;
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdgeVertex.prototype, 'x', {
    get: function () {
      return this.$outer.meshData.vertexList.dataF.get_za3lpa$(Kotlin.imul(this.index, this.$outer.meshData.vertexList.vertexSizeF) + this.$outer.positionOffset_0 | 0);
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdgeVertex.prototype, 'y', {
    get: function () {
      return this.$outer.meshData.vertexList.dataF.get_za3lpa$(Kotlin.imul(this.index, this.$outer.meshData.vertexList.vertexSizeF) + this.$outer.positionOffset_0 + 1 | 0);
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdgeVertex.prototype, 'z', {
    get: function () {
      return this.$outer.meshData.vertexList.dataF.get_za3lpa$(Kotlin.imul(this.index, this.$outer.meshData.vertexList.vertexSizeF) + this.$outer.positionOffset_0 + 2 | 0);
    }
  });
  HalfEdgeMesh$HalfEdgeVertex.prototype.setPosition_eyxpjg$ = function (x, y, z) {
    this.$outer.meshData.vertexList.dataF.set_24o109$(Kotlin.imul(this.index, this.$outer.meshData.vertexList.vertexSizeF) + this.$outer.positionOffset_0 | 0, x);
    this.$outer.meshData.vertexList.dataF.set_24o109$(Kotlin.imul(this.index, this.$outer.meshData.vertexList.vertexSizeF) + this.$outer.positionOffset_0 + 1 | 0, y);
    this.$outer.meshData.vertexList.dataF.set_24o109$(Kotlin.imul(this.index, this.$outer.meshData.vertexList.vertexSizeF) + this.$outer.positionOffset_0 + 2 | 0, z);
  };
  HalfEdgeMesh$HalfEdgeVertex.prototype.getMeshVertex_j5bz6$ = function (result) {
    result.index = this.index;
    return result;
  };
  HalfEdgeMesh$HalfEdgeVertex.prototype.getEdgeTo_n38rgs$ = function (v) {
    var tmp$;
    tmp$ = this.edges;
    for (var i = 0; i !== tmp$.size; ++i) {
      if (this.edges.get_za3lpa$(i).to === v) {
        return this.edges.get_za3lpa$(i);
      }
    }
    return null;
  };
  HalfEdgeMesh$HalfEdgeVertex.prototype.delete = function () {
    while (!this.edges.isEmpty()) {
      last(this.edges).deleteTriangle();
    }
    this.isDeleted = true;
  };
  HalfEdgeMesh$HalfEdgeVertex.prototype.updatePosition_czzhiu$ = function (newPos) {
    this.updatePosition_y2kzbl$(newPos.x, newPos.y, newPos.z);
  };
  HalfEdgeMesh$HalfEdgeVertex.prototype.updatePosition_y2kzbl$ = function (x, y, z) {
    this.$outer.edgeHandler.checkedUpdateVertexPosition_efzdnr$(this, x, y, z);
  };
  HalfEdgeMesh$HalfEdgeVertex.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HalfEdgeVertex',
    interfaces: [Vec3f]
  };
  function HalfEdgeMesh$HalfEdge($outer, from, to) {
    this.$outer = $outer;
    this.from_t0m3rm$_0 = from;
    this.to_z50l7l$_0 = to;
    this.isDeleted_tjy89$_0 = false;
    this.treeNode_u2e3i4$_0 = null;
    this.next_t4scix$_0 = this.next_t4scix$_0;
    this.opp_nuqb1l$_0 = null;
    from.edges.add_11rb$(this);
  }
  Object.defineProperty(HalfEdgeMesh$HalfEdge.prototype, 'from', {
    get: function () {
      return this.from_t0m3rm$_0;
    },
    set: function (from) {
      this.from_t0m3rm$_0 = from;
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdge.prototype, 'to', {
    get: function () {
      return this.to_z50l7l$_0;
    },
    set: function (to) {
      this.to_z50l7l$_0 = to;
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdge.prototype, 'isDeleted', {
    get: function () {
      return this.isDeleted_tjy89$_0;
    },
    set: function (isDeleted) {
      this.isDeleted_tjy89$_0 = isDeleted;
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdge.prototype, 'treeNode', {
    get: function () {
      return this.treeNode_u2e3i4$_0;
    },
    set: function (treeNode) {
      this.treeNode_u2e3i4$_0 = treeNode;
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdge.prototype, 'id', {
    get: function () {
      return Kotlin.Long.fromInt(this.from.index).shiftLeft(32).or(Kotlin.Long.fromInt(this.to.index));
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdge.prototype, 'triId', {
    get: function () {
      var a = this.id;
      var b = this.next.id;
      var c = this.next.next.id;
      var b_0 = b.compareTo_11rb$(c) <= 0 ? b : c;
      return a.compareTo_11rb$(b_0) <= 0 ? a : b_0;
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdge.prototype, 'next', {
    get: function () {
      if (this.next_t4scix$_0 == null)
        return throwUPAE('next');
      return this.next_t4scix$_0;
    },
    set: function (next) {
      this.next_t4scix$_0 = next;
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdge.prototype, 'opp', {
    get: function () {
      return this.opp_nuqb1l$_0;
    },
    set: function (opp) {
      this.opp_nuqb1l$_0 = opp;
    }
  });
  HalfEdgeMesh$HalfEdge.prototype.computeLength = function () {
    return this.from.distance_czzhiu$(this.to);
  };
  HalfEdgeMesh$HalfEdge.prototype.computeTriArea = function () {
    return triArea(this.from, this.to, this.next.to);
  };
  HalfEdgeMesh$HalfEdge.prototype.computeTriAspectRatio = function () {
    return triAspectRatio(this.from, this.to, this.next.to);
  };
  HalfEdgeMesh$HalfEdge.prototype.computeTriNormal_5s4mqq$ = function (result) {
    this.to.subtract_2gj7b4$(this.from, this.$outer.tmpVec1_0);
    this.next.to.subtract_2gj7b4$(this.from, this.$outer.tmpVec2_0);
    this.$outer.tmpVec1_0.cross_2gj7b4$(this.$outer.tmpVec2_0, result);
    return result.norm();
  };
  HalfEdgeMesh$HalfEdge.prototype.computeTriPlane_5s4mpv$ = function (result) {
    this.computeTriNormal_5s4mqq$(this.$outer.tmpVec3_0);
    result.set_2qa7tb$(this.$outer.tmpVec3_0, -this.$outer.tmpVec3_0.dot_czzhiu$(this.from));
    return result;
  };
  HalfEdgeMesh$HalfEdge.prototype.collapse_mx4ult$ = function (fraction) {
    this.$outer.collapseEdge_b49or$(this, fraction);
  };
  HalfEdgeMesh$HalfEdge.prototype.split_mx4ult$ = function (fraction) {
    return this.$outer.splitEdge_b49or$(this, fraction);
  };
  HalfEdgeMesh$HalfEdge.prototype.deleteEdge_0 = function () {
    var tmp$;
    this.$outer.edgeHandler.minusAssign_ebe40$(this);
    this.isDeleted = true;
    this.from.edges.remove_11rb$(this);
    if ((tmp$ = this.opp) != null) {
      tmp$.opp = null;
    }
    this.treeNode = null;
    this.opp = null;
  };
  HalfEdgeMesh$HalfEdge.prototype.deleteTriangle = function () {
    this.deleteEdge_0();
    this.next.deleteEdge_0();
    this.next.next.deleteEdge_0();
  };
  HalfEdgeMesh$HalfEdge.prototype.updateFrom_n38rgs$ = function (newFrom) {
    this.$outer.edgeHandler.checkedUpdateEdgeFrom_870n7c$(this, newFrom);
  };
  HalfEdgeMesh$HalfEdge.prototype.updateTo_n38rgs$ = function (newTo) {
    this.$outer.edgeHandler.checkedUpdateEdgeTo_870n7c$(this, newTo);
  };
  HalfEdgeMesh$HalfEdge.prototype.toString = function () {
    return this.from.index.toString() + ' -> ' + this.to.index;
  };
  HalfEdgeMesh$HalfEdge.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HalfEdge',
    interfaces: []
  };
  HalfEdgeMesh.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HalfEdgeMesh',
    interfaces: [Mesh]
  };
  function ListEdgeHandler() {
    this.edgeList = ArrayList_init_0();
    this.numEdges_wlm1ja$_0 = 0;
  }
  Object.defineProperty(ListEdgeHandler.prototype, 'numEdges', {
    get: function () {
      return this.numEdges_wlm1ja$_0;
    },
    set: function (numEdges) {
      this.numEdges_wlm1ja$_0 = numEdges;
    }
  });
  ListEdgeHandler.prototype.plusAssign_ebe40$ = function (edge) {
    if (edge.isDeleted) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'edge was deleted before');
      }
      edge.isDeleted = false;
      this.rebuild();
    }
    this.edgeList.add_11rb$(edge);
    this.numEdges = this.numEdges + 1 | 0;
  };
  ListEdgeHandler.prototype.minusAssign_ebe40$ = function (edge) {
    if (!edge.isDeleted) {
      this.numEdges = this.numEdges - 1 | 0;
    }
     else {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'edge is already deleted');
      }
      this.rebuild();
    }
  };
  ListEdgeHandler.prototype.checkedUpdateEdgeTo_870n7c$ = function (edge, newTo) {
    edge.to = newTo;
  };
  ListEdgeHandler.prototype.checkedUpdateEdgeFrom_870n7c$ = function (edge, newFrom) {
    edge.from = newFrom;
  };
  ListEdgeHandler.prototype.checkedUpdateVertexPosition_efzdnr$ = function (vertex, x, y, z) {
    vertex.setPosition_eyxpjg$(x, y, z);
  };
  function ListEdgeHandler$rebuild$lambda(it) {
    return it.isDeleted;
  }
  ListEdgeHandler.prototype.rebuild = function () {
    removeAll(this.edgeList, ListEdgeHandler$rebuild$lambda);
    if (this.numEdges !== this.edgeList.size) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Wrong edge count: ' + this.numEdges + ' != ' + this.edgeList.size);
      }
      this.numEdges = this.edgeList.size;
    }
  };
  function ListEdgeHandler$iterator$ObjectLiteral(this$ListEdgeHandler) {
    this.this$ListEdgeHandler = this$ListEdgeHandler;
    this.i = 0;
  }
  ListEdgeHandler$iterator$ObjectLiteral.prototype.hasNext = function () {
    while (this.i < this.this$ListEdgeHandler.edgeList.size && this.this$ListEdgeHandler.edgeList.get_za3lpa$(this.i).isDeleted) {
      this.i = this.i + 1 | 0;
    }
    return this.i < this.this$ListEdgeHandler.edgeList.size;
  };
  ListEdgeHandler$iterator$ObjectLiteral.prototype.next = function () {
    var tmp$;
    if (!this.hasNext()) {
      throw NoSuchElementException_init();
    }
    return this.this$ListEdgeHandler.edgeList.get_za3lpa$((tmp$ = this.i, this.i = tmp$ + 1 | 0, tmp$));
  };
  ListEdgeHandler$iterator$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [Iterator]
  };
  ListEdgeHandler.prototype.iterator = function () {
    return new ListEdgeHandler$iterator$ObjectLiteral(this);
  };
  ListEdgeHandler.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ListEdgeHandler',
    interfaces: [HalfEdgeMesh$EdgeHandler]
  };
  function Comparator$ObjectLiteral_2(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_2.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_2.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_2 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function MeshCutXy(meshData) {
    MeshCutXy$Companion_getInstance();
    this.meshData = meshData;
    this.ocTreeHandler = OcTreeEdgeHandler_init(this.meshData);
    this.halfEdgeMesh = new HalfEdgeMesh(this.meshData, this.ocTreeHandler);
    this.eps_0 = this.meshData.bounds.min.distance_czzhiu$(this.meshData.bounds.max) * FUZZY_EQ_F;
    this.shortEdgeThresh = 0;
    var tmp$;
    var edLen = 0.0;
    tmp$ = this.ocTreeHandler.iterator();
    while (tmp$.hasNext()) {
      var ed = tmp$.next();
      edLen += ed.computeLength();
    }
    this.shortEdgeThresh = edLen / this.ocTreeHandler.numEdges * 0.05;
  }
  MeshCutXy.prototype.cutXy_uqk2hy$ = function (cutPoly) {
    var tmp$;
    var cutEdges = ArrayList_init_0();
    tmp$ = cutPoly.size;
    for (var i = 0; i < tmp$; i++) {
      var j = (i + 1 | 0) % cutPoly.size;
      var element = new Edge(new Vec3f(cutPoly.get_za3lpa$(i).x, cutPoly.get_za3lpa$(i).y, 0.0), new Vec3f(cutPoly.get_za3lpa$(j).x, cutPoly.get_za3lpa$(j).y, 0.0));
      cutEdges.add_11rb$(element);
    }
    this.insertVertices_0(cutPoly);
    this.splitIntersectingEdges_0(cutEdges);
    this.deleteInside_0(cutPoly);
    this.halfEdgeMesh.rebuild_dqye30$(false, false);
  };
  MeshCutXy.prototype.insertVertices_0 = function (cutPoly) {
    var trav = new MeshCutXy$CoveringTriXyTrav(this);
    var tmp$;
    tmp$ = cutPoly.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      trav.setup_czzhjp$(element);
      trav.traverse_m6hlto$(this.ocTreeHandler.edgeTree);
      var tmp$_0;
      tmp$_0 = trav.result.iterator();
      loop_label: while (tmp$_0.hasNext()) {
        var element_0 = tmp$_0.next();
        var $receiver = MeshCutXy$Companion_getInstance().distXy_0(element_0.from, element);
        var eps = this.eps_0;
        var tmp$_1 = !(Math_0.abs($receiver) <= eps);
        if (tmp$_1) {
          var $receiver_0 = MeshCutXy$Companion_getInstance().distXy_0(element_0.to, element);
          var eps_0 = this.eps_0;
          tmp$_1 = !(Math_0.abs($receiver_0) <= eps_0);
        }
        if (tmp$_1) {
          var edTo = element_0.to;
          var insertedA = element_0.split_mx4ult$(this.computeSplitFraction_0(element, element_0));
          var $receiver_1 = insertedA.edges;
          var first$result;
          first$break: do {
            var tmp$_2;
            tmp$_2 = $receiver_1.iterator();
            while (tmp$_2.hasNext()) {
              var element_1 = tmp$_2.next();
              if (element_1.to === edTo) {
                first$result = element_1;
                break first$break;
              }
            }
            throw new NoSuchElementException_init_0('Collection contains no element matching the predicate.');
          }
           while (false);
          var newEdge = first$result.next.next;
          var f = MeshCutXy$Companion_getInstance().distXy_0(newEdge.from, element) / MeshCutXy$Companion_getInstance().distXy_1(newEdge.to, newEdge.from);
          var $receiver_2 = newEdge.split_mx4ult$(f);
          $receiver_2.updatePosition_y2kzbl$(element.x, element.y, $receiver_2.z);
        }
         else {
          var $receiver_3 = MeshCutXy$Companion_getInstance().distXy_0(element_0.from, element);
          var eps_1 = this.eps_0;
          if (Math_0.abs($receiver_3) <= eps_1) {
            element_0.from.updatePosition_y2kzbl$(element.x, element.y, element_0.from.z);
          }
           else {
            element_0.to.updatePosition_y2kzbl$(element.x, element.y, element_0.to.z);
          }
        }
      }
    }
    this.ocTreeHandler.edgeTree;
  };
  MeshCutXy.prototype.computeSplitFraction_0 = function ($receiver, edge) {
    var pt = new Vec3f($receiver.x, $receiver.y, 0.0);
    var a = new Vec3f(edge.from.x, edge.from.y, 0.0);
    var b = new Vec3f(edge.to.x, edge.to.y, 0.0);
    var r = nearestPointOnEdge_0(pt, a, b, MutableVec3f_init());
    return r.distance_czzhiu$(a) / b.distance_czzhiu$(a);
  };
  MeshCutXy.prototype.splitIntersectingEdges_0 = function (cutEdges) {
    var tmp$;
    var intersectionTrav = new MeshCutXy$EdgeXyIntersectionTrav(this);
    tmp$ = cutEdges.iterator();
    while (tmp$.hasNext()) {
      var cutEdge = tmp$.next();
      for (var pass = 1; pass <= 2; pass++) {
        intersectionTrav.setup_r4d89c$(cutEdge).traverse_m6hlto$(this.ocTreeHandler.edgeTree);
        if (!intersectionTrav.splitEdges.isEmpty()) {
          var tmp$_0;
          tmp$_0 = intersectionTrav.splitEdges.iterator();
          while (tmp$_0.hasNext()) {
            var element = tmp$_0.next();
            var splitEd = element.component1();
            var splitPos = MutableVec3f_init();
            if (MeshCutXy$Companion_getInstance().computeXyEdgeIntersectionPoint_0(cutEdge.pt0, cutEdge.pt1, splitEd.from, splitEd.to, splitPos)) {
              var f = MeshCutXy$Companion_getInstance().distXy_1(splitPos, splitEd.from) / MeshCutXy$Companion_getInstance().distXy_1(splitEd.to, splitEd.from);
              var $receiver = splitEd.split_mx4ult$(f);
              $receiver.updatePosition_y2kzbl$(splitPos.x, splitPos.y, $receiver.z);
            }
          }
        }
      }
    }
  };
  MeshCutXy.prototype.collapseShortEdges_0 = function (cutEdges) {
    var tmp$;
    var collapseCnt = {v: 0};
    var edgeTrav = new MeshCutXy$ShortEdgeOnEdgeTraverser(this);
    tmp$ = cutEdges.iterator();
    while (tmp$.hasNext()) {
      var cutEdge = tmp$.next();
      var remove = true;
      while (remove) {
        remove = false;
        edgeTrav.setup_r4d89c$(cutEdge).traverse_m6hlto$(this.ocTreeHandler.edgeTree);
        if (!edgeTrav.result.isEmpty()) {
          var ed = edgeTrav.result.get_za3lpa$(0);
          var a = ed.from.distance_czzhiu$(cutEdge.pt0);
          var b = ed.from.distance_czzhiu$(cutEdge.pt1);
          var minFromD = Math_0.min(a, b);
          var a_0 = ed.to.distance_czzhiu$(cutEdge.pt0);
          var b_0 = ed.to.distance_czzhiu$(cutEdge.pt1);
          var minToD = Math_0.min(a_0, b_0);
          if (minFromD < minToD) {
            ed.collapse_mx4ult$(0.0);
          }
           else {
            ed.collapse_mx4ult$(1.0);
          }
          collapseCnt.v = collapseCnt.v + 1 | 0;
          remove = true;
        }
      }
    }
    var $this = package$util.Log;
    var level = Log$Level.DEBUG;
    var tag = Kotlin.getKClassFromExpression(this).simpleName;
    if (level.level >= $this.level.level) {
      $this.printer(level, tag, 'Collapsed ' + collapseCnt.v + ' short edges');
    }
  };
  MeshCutXy.prototype.deleteInside_0 = function (cutPoly) {
    var delCnt = {v: 0};
    var $receiver = this.ocTreeHandler.distinctTriangleEdges();
    var destination = ArrayList_init_0();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (MeshCutXy$Companion_getInstance().isInPolygon_c7vmv8$(MutableVec3f_init_1(element.from).add_czzhiu$(element.next.from).add_czzhiu$(element.next.next.from).scale_mx4ult$(1 / 3.0), cutPoly))
        destination.add_11rb$(element);
    }
    var tmp$_0;
    tmp$_0 = destination.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      element_0.deleteTriangle();
      delCnt.v = delCnt.v + 1 | 0;
    }
  };
  function MeshCutXy$CoveringTriXyTrav($outer) {
    this.$outer = $outer;
    KNearestTraverser.call(this);
    var list = ArrayList_init(3);
    for (var index = 0; index < 3; index++) {
      list.add_11rb$(MutableVec2f_init());
    }
    this.triPts = list;
    this.pointDistance = new MeshCutXy$MeshCutXy$CoveringTriXyTrav_init$ObjectLiteral(this);
  }
  MeshCutXy$CoveringTriXyTrav.prototype.setup_czzhjp$ = function (pt) {
    this.setup_w8bw21$(new Vec3f(pt.x, pt.y, 0.0), 1, 1000000.0, KNearestTraverser.prototype.setup_w8bw21$$default.bind(this));
  };
  function MeshCutXy$MeshCutXy$CoveringTriXyTrav_init$ObjectLiteral(this$CoveringTriXyTrav) {
    this.this$CoveringTriXyTrav = this$CoveringTriXyTrav;
  }
  MeshCutXy$MeshCutXy$CoveringTriXyTrav_init$ObjectLiteral.prototype.nodeSqrDistanceToPoint_m5117s$ = function (node, point) {
    var pt = new Vec3f(point.x, point.y, node.bounds.center.z);
    return node.bounds.pointDistanceSqr_czzhiu$(pt);
  };
  MeshCutXy$MeshCutXy$CoveringTriXyTrav_init$ObjectLiteral.prototype.itemSqrDistanceToPoint_54x1zp$ = function (tree, item, point) {
    var tmp$;
    this.this$CoveringTriXyTrav.triPts.get_za3lpa$(0).set_dleff0$(item.from.x, item.from.y);
    this.this$CoveringTriXyTrav.triPts.get_za3lpa$(1).set_dleff0$(item.next.from.x, item.next.from.y);
    this.this$CoveringTriXyTrav.triPts.get_za3lpa$(2).set_dleff0$(item.next.next.from.x, item.next.next.from.y);
    if (MeshCutXy$Companion_getInstance().isInPolygon_c7vmv8$(this.this$CoveringTriXyTrav.center, this.this$CoveringTriXyTrav.triPts)) {
      return distanceToEdge_0(point, new Vec3f(item.from.x, item.from.y, 0.0), new Vec3f(item.to.x, item.to.y, 0.0));
    }
     else {
      tmp$ = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    }
    return tmp$;
  };
  MeshCutXy$MeshCutXy$CoveringTriXyTrav_init$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [PointDistance]
  };
  MeshCutXy$CoveringTriXyTrav.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CoveringTriXyTrav',
    interfaces: [KNearestTraverser]
  };
  function MeshCutXy$ShortEdgeOnEdgeTraverser($outer) {
    this.$outer = $outer;
    InRadiusTraverser.call(this);
    this.edge_wlnz31$_0 = this.edge_wlnz31$_0;
  }
  Object.defineProperty(MeshCutXy$ShortEdgeOnEdgeTraverser.prototype, 'edge', {
    get: function () {
      if (this.edge_wlnz31$_0 == null)
        return throwUPAE('edge');
      return this.edge_wlnz31$_0;
    },
    set: function (edge) {
      this.edge_wlnz31$_0 = edge;
    }
  });
  function MeshCutXy$ShortEdgeOnEdgeTraverser$setup$ObjectLiteral(this$MeshCutXy, closure$edge) {
    this.this$MeshCutXy = this$MeshCutXy;
    this.closure$edge = closure$edge;
  }
  MeshCutXy$ShortEdgeOnEdgeTraverser$setup$ObjectLiteral.prototype.nodeSqrDistanceToPoint_m5117s$ = function (node, point) {
    var pt = new Vec3f(point.x, point.y, node.bounds.center.z);
    return PointDistance.prototype.nodeSqrDistanceToPoint_m5117s$.call(this, node, pt);
  };
  MeshCutXy$ShortEdgeOnEdgeTraverser$setup$ObjectLiteral.prototype.itemSqrDistanceToPoint_54x1zp$ = function (tree, item, point) {
    if (item.computeLength() < this.this$MeshCutXy.shortEdgeThresh) {
      var d0 = distanceToEdge_0(new Vec3f(item.from.x, item.from.y, 0.0), this.closure$edge.pt0, this.closure$edge.pt1);
      var d1 = distanceToEdge_0(new Vec3f(item.to.x, item.to.y, 0.0), this.closure$edge.pt0, this.closure$edge.pt1);
      var eps = this.this$MeshCutXy.eps_0;
      var tmp$ = Math_0.abs(d0) <= eps;
      if (tmp$) {
        var eps_0 = this.this$MeshCutXy.eps_0;
        tmp$ = Math_0.abs(d1) <= eps_0;
      }
      var tmp$_0 = tmp$;
      if (tmp$_0) {
        var a = item.computeLength();
        var b = this.closure$edge.length;
        var eps_1 = this.this$MeshCutXy.eps_0;
        var $receiver = a - b;
        tmp$_0 = !(Math_0.abs($receiver) <= eps_1);
      }
      if (tmp$_0) {
        return 0.0;
      }
    }
    return kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
  };
  MeshCutXy$ShortEdgeOnEdgeTraverser$setup$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [PointDistance]
  };
  MeshCutXy$ShortEdgeOnEdgeTraverser.prototype.setup_r4d89c$ = function (edge) {
    InRadiusTraverser.prototype.setup_2qa7tb$.call(this, MutableVec3f_init_1(edge.pt0).add_czzhiu$(edge.pt1).scale_mx4ult$(0.5), edge.length / 2);
    this.edge = edge;
    this.pointDistance = new MeshCutXy$ShortEdgeOnEdgeTraverser$setup$ObjectLiteral(this.$outer, edge);
    return this;
  };
  MeshCutXy$ShortEdgeOnEdgeTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShortEdgeOnEdgeTraverser',
    interfaces: [InRadiusTraverser]
  };
  function MeshCutXy$EdgeXyIntersectionTrav($outer) {
    this.$outer = $outer;
    InRadiusTraverser.call(this);
    this.edge_93dgqa$_0 = this.edge_93dgqa$_0;
    this.intersectionPt = MutableVec3f_init();
    this.splitEdges = ArrayList_init_0();
  }
  Object.defineProperty(MeshCutXy$EdgeXyIntersectionTrav.prototype, 'edge', {
    get: function () {
      if (this.edge_93dgqa$_0 == null)
        return throwUPAE('edge');
      return this.edge_93dgqa$_0;
    },
    set: function (edge) {
      this.edge_93dgqa$_0 = edge;
    }
  });
  function MeshCutXy$EdgeXyIntersectionTrav$traverse$lambda(this$EdgeXyIntersectionTrav) {
    return function (it) {
      return it.second.distance_czzhiu$(this$EdgeXyIntersectionTrav.edge.pt0);
    };
  }
  MeshCutXy$EdgeXyIntersectionTrav.prototype.traverse_m6hlto$ = function (tree) {
    this.splitEdges.clear();
    InRadiusTraverser.prototype.traverse_m6hlto$.call(this, tree);
    var $receiver = this.splitEdges;
    if ($receiver.size > 1) {
      sortWith($receiver, new Comparator$ObjectLiteral_2(compareBy$lambda_2(MeshCutXy$EdgeXyIntersectionTrav$traverse$lambda(this))));
    }
  };
  function MeshCutXy$EdgeXyIntersectionTrav$setup$ObjectLiteral(closure$edge, this$EdgeXyIntersectionTrav) {
    this.closure$edge = closure$edge;
    this.this$EdgeXyIntersectionTrav = this$EdgeXyIntersectionTrav;
  }
  MeshCutXy$EdgeXyIntersectionTrav$setup$ObjectLiteral.prototype.nodeSqrDistanceToPoint_m5117s$ = function (node, point) {
    var pt = new Vec3f(point.x, point.y, node.bounds.center.z);
    return PointDistance.prototype.nodeSqrDistanceToPoint_m5117s$.call(this, node, pt);
  };
  MeshCutXy$EdgeXyIntersectionTrav$setup$ObjectLiteral.prototype.itemSqrDistanceToPoint_54x1zp$ = function (tree, item, point) {
    var tmp$;
    if (MeshCutXy$Companion_getInstance().computeXyEdgeIntersectionPoint_0(this.closure$edge.pt0, this.closure$edge.pt1, item.from, item.to, this.this$EdgeXyIntersectionTrav.intersectionPt)) {
      var d = MeshCutXy$Companion_getInstance().distXy_1(this.this$EdgeXyIntersectionTrav.intersectionPt, item.from) / MeshCutXy$Companion_getInstance().distXy_1(item.to, item.from);
      var eps;
      eps = package$math.FUZZY_EQ_F;
      var $receiver = d - 0.0;
      var tmp$_0 = Math_0.abs($receiver) <= eps;
      if (!tmp$_0) {
        var eps_0;
        eps_0 = package$math.FUZZY_EQ_F;
        var $receiver_0 = d - 1.0;
        tmp$_0 = Math_0.abs($receiver_0) <= eps_0;
      }
      if (tmp$_0) {
        tmp$ = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
      }
       else {
        var v = MutableVec3f_init_1(item.to).subtract_czzhiu$(item.from).scale_mx4ult$(d).add_czzhiu$(item.from);
        var $receiver_1 = this.this$EdgeXyIntersectionTrav.splitEdges;
        var element = to(item, v);
        $receiver_1.add_11rb$(element);
        tmp$ = 0.0;
      }
    }
     else {
      tmp$ = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    }
    return tmp$;
  };
  MeshCutXy$EdgeXyIntersectionTrav$setup$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [PointDistance]
  };
  MeshCutXy$EdgeXyIntersectionTrav.prototype.setup_r4d89c$ = function (edge) {
    InRadiusTraverser.prototype.setup_2qa7tb$.call(this, MutableVec3f_init_1(edge.pt0).add_czzhiu$(edge.pt1).scale_mx4ult$(0.5), edge.length / 2);
    this.edge = edge;
    this.pointDistance = new MeshCutXy$EdgeXyIntersectionTrav$setup$ObjectLiteral(edge, this);
    return this;
  };
  MeshCutXy$EdgeXyIntersectionTrav.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EdgeXyIntersectionTrav',
    interfaces: [InRadiusTraverser]
  };
  function MeshCutXy$Companion() {
    MeshCutXy$Companion_instance = this;
  }
  MeshCutXy$Companion.prototype.distXy_1 = function ($receiver, other) {
    var dx = $receiver.x - other.x;
    var dy = $receiver.y - other.y;
    var x = dx * dx + dy * dy;
    return Math_0.sqrt(x);
  };
  MeshCutXy$Companion.prototype.distXy_0 = function ($receiver, other) {
    var dx = $receiver.x - other.x;
    var dy = $receiver.y - other.y;
    var x = dx * dx + dy * dy;
    return Math_0.sqrt(x);
  };
  MeshCutXy$Companion.prototype.isInPolygon_c7vmv8$ = function (point, poly) {
    var tmp$;
    var i = 0;
    var j = poly.size - 1 | 0;
    var result = false;
    while (i < poly.size) {
      if (poly.get_za3lpa$(i).y > point.y !== poly.get_za3lpa$(j).y > point.y && point.x < (poly.get_za3lpa$(j).x - poly.get_za3lpa$(i).x) * (point.y - poly.get_za3lpa$(i).y) / (poly.get_za3lpa$(j).y - poly.get_za3lpa$(i).y) + poly.get_za3lpa$(i).x) {
        result = !result;
      }
      j = (tmp$ = i, i = tmp$ + 1 | 0, tmp$);
    }
    return result;
  };
  MeshCutXy$Companion.prototype.computeXyLineIntersectionPoint_0 = function (e11, e12, e21, e22, result) {
    var x1 = e11.x;
    var y1 = e11.y;
    var x2 = e12.x;
    var y2 = e12.y;
    var x3 = e21.x;
    var y3 = e21.y;
    var x4 = e22.x;
    var y4 = e22.y;
    var denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
    var eps;
    eps = package$math.FUZZY_EQ_D;
    if (!(Math_0.abs(denom) <= eps)) {
      var a = x1 * y2 - y1 * x2;
      var b = x3 * y4 - y3 * x4;
      var x = (a * (x3 - x4) - b * (x1 - x2)) / denom;
      var y = (a * (y3 - y4) - b * (y1 - y2)) / denom;
      result.set_y2kzbl$(x, y, 0.0);
      return true;
    }
    return false;
  };
  MeshCutXy$Companion.prototype.computeXyEdgeIntersectionPoint_0 = function (e11, e12, e21, e22, result) {
    if (!this.computeXyLineIntersectionPoint_0(e11, e12, e21, e22, result)) {
      return false;
    }
    var dx0 = result.x - e11.x;
    var dy0 = result.y - e11.y;
    var dx1 = e12.x - e11.x;
    var dy1 = e12.y - e11.y;
    var dot = dx0 * dx1 + dy0 * dy1;
    var l0 = dx0 * dx0 + dy0 * dy0;
    var l1 = dx1 * dx1 + dy1 * dy1;
    if (dot < 0.0 || l0 > l1) {
      return false;
    }
    dx0 = result.x - e21.x;
    dy0 = result.y - e21.y;
    dx1 = e22.x - e21.x;
    dy1 = e22.y - e21.y;
    dot = dx0 * dx1 + dy0 * dy1;
    l0 = dx0 * dx0 + dy0 * dy0;
    l1 = dx1 * dx1 + dy1 * dy1;
    return dot > 0 && l0 < l1;
  };
  MeshCutXy$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MeshCutXy$Companion_instance = null;
  function MeshCutXy$Companion_getInstance() {
    if (MeshCutXy$Companion_instance === null) {
      new MeshCutXy$Companion();
    }
    return MeshCutXy$Companion_instance;
  }
  MeshCutXy.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MeshCutXy',
    interfaces: []
  };
  function OcTreeEdgeHandler(treeBounds) {
    OcTreeEdgeHandler$Companion_getInstance();
    this.edgeTree = new OcTree(OcTreeEdgeHandler$Companion$HalfEdgeAdapter_getInstance(), void 0, treeBounds);
  }
  Object.defineProperty(OcTreeEdgeHandler.prototype, 'numEdges', {
    get: function () {
      return this.edgeTree.size;
    }
  });
  OcTreeEdgeHandler.prototype.plusAssign_ebe40$ = function (edge) {
    this.edgeTree.add_11rb$(edge);
  };
  OcTreeEdgeHandler.prototype.minusAssign_ebe40$ = function (edge) {
    if (edge.isDeleted) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'edge is already deleted, probably not in tree anymore...');
      }
    }
    this.edgeTree.remove_11rb$(edge);
  };
  OcTreeEdgeHandler.prototype.checkedUpdateEdgeTo_870n7c$ = function (edge, newTo) {
    var tmp$;
    var newX = (edge.from.x + newTo.x) * 0.5;
    var newY = (edge.from.y + newTo.y) * 0.5;
    var newZ = (edge.from.z + newTo.z) * 0.5;
    if (((tmp$ = edge.treeNode) != null ? tmp$.isInBounds_y2kzbl$(newX, newY, newZ) : null) === true) {
      edge.to = newTo;
    }
     else {
      this.edgeTree.remove_11rb$(edge);
      edge.to = newTo;
      this.edgeTree.add_11rb$(edge);
    }
  };
  OcTreeEdgeHandler.prototype.checkedUpdateEdgeFrom_870n7c$ = function (edge, newFrom) {
    var tmp$;
    var newX = (newFrom.x + edge.to.x) * 0.5;
    var newY = (newFrom.y + edge.to.y) * 0.5;
    var newZ = (newFrom.z + edge.to.z) * 0.5;
    if (((tmp$ = edge.treeNode) != null ? tmp$.isInBounds_y2kzbl$(newX, newY, newZ) : null) === true) {
      edge.from = newFrom;
    }
     else {
      this.edgeTree.remove_11rb$(edge);
      edge.from = newFrom;
      this.edgeTree.add_11rb$(edge);
    }
  };
  OcTreeEdgeHandler.prototype.checkedUpdateVertexPosition_efzdnr$ = function (vertex, x, y, z) {
    var tmp$, tmp$_0;
    tmp$ = vertex.edges;
    for (var i = 0; i !== tmp$.size; ++i) {
      var tmp$_1, tmp$_2;
      var ed = vertex.edges.get_za3lpa$(i);
      var newX = (x + ed.to.x) * 0.5;
      var newY = (y + ed.to.y) * 0.5;
      var newZ = (z + ed.to.z) * 0.5;
      if (((tmp$_1 = ed.treeNode) != null ? tmp$_1.isInBounds_y2kzbl$(newX, newY, newZ) : null) === false) {
        var $receiver = this.edgeTree;
        var element = ed;
        $receiver.remove_11rb$(element);
        ed.treeNode = null;
      }
      ed = vertex.edges.get_za3lpa$(i).next.next;
      newX = (x + ed.from.x) * 0.5;
      newY = (y + ed.from.y) * 0.5;
      newZ = (z + ed.from.z) * 0.5;
      if (((tmp$_2 = ed.treeNode) != null ? tmp$_2.isInBounds_y2kzbl$(newX, newY, newZ) : null) === false) {
        var $receiver_0 = this.edgeTree;
        var element_0 = ed;
        $receiver_0.remove_11rb$(element_0);
        ed.treeNode = null;
      }
    }
    vertex.setPosition_eyxpjg$(x, y, z);
    tmp$_0 = vertex.edges;
    for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
      var ed_0 = vertex.edges.get_za3lpa$(i_0);
      if (ed_0.treeNode == null) {
        this.plusAssign_ebe40$(ed_0);
      }
      if (ed_0.next.next.treeNode == null) {
        this.plusAssign_ebe40$(ed_0.next.next);
      }
    }
  };
  OcTreeEdgeHandler.prototype.rebuild = function () {
  };
  OcTreeEdgeHandler.prototype.iterator = function () {
    return this.edgeTree.iterator();
  };
  function OcTreeEdgeHandler$Companion() {
    OcTreeEdgeHandler$Companion_instance = this;
  }
  function OcTreeEdgeHandler$Companion$HalfEdgeAdapter() {
    OcTreeEdgeHandler$Companion$HalfEdgeAdapter_instance = this;
  }
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getMinX_trkh7z$ = function (item) {
    var a = item.from.x;
    var b = item.to.x;
    return Math_0.min(a, b);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getMinY_trkh7z$ = function (item) {
    var a = item.from.y;
    var b = item.to.y;
    return Math_0.min(a, b);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getMinZ_trkh7z$ = function (item) {
    var a = item.from.z;
    var b = item.to.z;
    return Math_0.min(a, b);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getMaxX_trkh7z$ = function (item) {
    var a = item.from.x;
    var b = item.to.x;
    return Math_0.max(a, b);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getMaxY_trkh7z$ = function (item) {
    var a = item.from.y;
    var b = item.to.y;
    return Math_0.max(a, b);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getMaxZ_trkh7z$ = function (item) {
    var a = item.from.z;
    var b = item.to.z;
    return Math_0.max(a, b);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getSzX_trkh7z$ = function (item) {
    var x = item.from.x - item.to.x;
    return Math_0.abs(x);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getSzY_trkh7z$ = function (item) {
    var x = item.from.y - item.to.y;
    return Math_0.abs(x);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getSzZ_trkh7z$ = function (item) {
    var x = item.from.z - item.to.z;
    return Math_0.abs(x);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getCenterX_trkh7z$ = function (item) {
    return (item.from.x + item.to.x) * 0.5;
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getCenterY_trkh7z$ = function (item) {
    return (item.from.y + item.to.y) * 0.5;
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getCenterZ_trkh7z$ = function (item) {
    return (item.from.z + item.to.z) * 0.5;
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.setNode_bc9457$ = function (item, node) {
    var tmp$;
    item.treeNode = Kotlin.isType(tmp$ = node, OcTree$OcNode) ? tmp$ : throwCCE();
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'HalfEdgeAdapter',
    interfaces: [ItemAdapter]
  };
  var OcTreeEdgeHandler$Companion$HalfEdgeAdapter_instance = null;
  function OcTreeEdgeHandler$Companion$HalfEdgeAdapter_getInstance() {
    if (OcTreeEdgeHandler$Companion$HalfEdgeAdapter_instance === null) {
      new OcTreeEdgeHandler$Companion$HalfEdgeAdapter();
    }
    return OcTreeEdgeHandler$Companion$HalfEdgeAdapter_instance;
  }
  OcTreeEdgeHandler$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var OcTreeEdgeHandler$Companion_instance = null;
  function OcTreeEdgeHandler$Companion_getInstance() {
    if (OcTreeEdgeHandler$Companion_instance === null) {
      new OcTreeEdgeHandler$Companion();
    }
    return OcTreeEdgeHandler$Companion_instance;
  }
  OcTreeEdgeHandler.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OcTreeEdgeHandler',
    interfaces: [HalfEdgeMesh$EdgeHandler]
  };
  function OcTreeEdgeHandler_init(meshData, $this) {
    $this = $this || Object.create(OcTreeEdgeHandler.prototype);
    var $receiver = new BoundingBox();
    var wasBatchUpdate = $receiver.isBatchUpdate;
    $receiver.isBatchUpdate = true;
    var tmp$;
    var v = meshData.vertexList.vertexIt;
    tmp$ = meshData.numVertices;
    for (var i = 0; i < tmp$; i++) {
      v.index = i;
      $receiver.add_czzhiu$(v.position);
    }
    $receiver.isBatchUpdate = wasBatchUpdate;
    OcTreeEdgeHandler.call($this, $receiver);
    return $this;
  }
  function CollapseStrategy() {
  }
  CollapseStrategy.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'CollapseStrategy',
    interfaces: []
  };
  function defaultCollapseStrategy$ObjectLiteral() {
    this.tmpQ = new Mat4d();
    this.tmpNrm0 = MutableVec3f_init();
    this.tmpNrm1 = MutableVec3f_init();
    this.tmpPos0 = MutableVec3f_init();
    this.tmpPos1 = MutableVec3f_init();
  }
  defaultCollapseStrategy$ObjectLiteral.prototype.computeCollapsePosition_2pqe3s$ = function (q1, q2, resultPos) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var triCnt = 0;
    tmp$ = q1.vertex.edges;
    for (var i = 0; i !== tmp$.size; ++i) {
      var he = q1.vertex.edges.get_za3lpa$(i);
      if (he.to === q2.vertex || he.next.to === q2.vertex) {
        triCnt = triCnt + 1 | 0;
      }
    }
    if (triCnt > 2 || triCnt < (q1.isBorder && q2.isBorder ? 1 : 2)) {
      return kotlin_js_internal_DoubleCompanionObject.MAX_VALUE;
    }
    if (q1.isStickyVertex && q2.isStickyVertex)
      return kotlin_js_internal_DoubleCompanionObject.MAX_VALUE;
    else if (q1.isStickyVertex) {
      resultPos.set_czzhiu$(q1.vertex);
      return q1.getError_czzhiu$(resultPos) + q2.getError_czzhiu$(resultPos);
    }
     else if (q2.isStickyVertex) {
      resultPos.set_czzhiu$(q2.vertex);
      return q1.getError_czzhiu$(resultPos) + q2.getError_czzhiu$(resultPos);
    }
    if ((tmp$_0 = q1.vertex.getEdgeTo_n38rgs$(q2.vertex)) != null) {
      if (tmp$_0.next.opp == null && tmp$_0.next.next.opp == null) {
        return kotlin_js_internal_DoubleCompanionObject.MAX_VALUE;
      }
    }
    if ((tmp$_1 = q2.vertex.getEdgeTo_n38rgs$(q1.vertex)) != null) {
      if (tmp$_1.next.opp == null && tmp$_1.next.next.opp == null) {
        return kotlin_js_internal_DoubleCompanionObject.MAX_VALUE;
      }
    }
    this.tmpQ.set_d4zu6l$(q1.errQuadric);
    this.tmpQ.add_d4zu6l$(q2.errQuadric);
    this.tmpQ.setRow_ky00rh$(3, Vec4d$Companion_getInstance().W_AXIS);
    if (this.tmpQ.invert_14dthe$(FUZZY_EQ_D)) {
      resultPos.set_y2kzbl$(this.tmpQ.get_vux9f0$(0, 3), this.tmpQ.get_vux9f0$(1, 3), this.tmpQ.get_vux9f0$(2, 3));
      tmp$_2 = q1.getError_czzhiu$(resultPos) + q2.getError_czzhiu$(resultPos);
    }
     else {
      q2.vertex.subtract_2gj7b4$(q1.vertex, resultPos).scale_mx4ult$(0.5).add_czzhiu$(q1.vertex);
      tmp$_2 = q1.vertex.distance_czzhiu$(q2.vertex) / 1.0E100;
    }
    var err = tmp$_2;
    if (this.isRejected_0(q1.vertex, q2.vertex, resultPos) || this.isRejected_0(q2.vertex, q1.vertex, resultPos)) {
      tmp$_3 = kotlin_js_internal_DoubleCompanionObject.MAX_VALUE;
    }
     else {
      tmp$_3 = err;
    }
    return tmp$_3;
  };
  defaultCollapseStrategy$ObjectLiteral.prototype.isRejected_0 = function (vert, excludedTo, newPos) {
    var tmp$, tmp$_0;
    tmp$ = vert.edges.iterator();
    while (tmp$.hasNext()) {
      var edge = tmp$.next();
      if (!((tmp$_0 = edge.to) != null ? tmp$_0.equals(excludedTo) : null)) {
        edge.computeTriNormal_5s4mqq$(this.tmpNrm0);
        this.newNormal_0(edge, newPos, this.tmpNrm1);
        if (this.tmpNrm0.dot_czzhiu$(this.tmpNrm1) < 0) {
          return true;
        }
        if (triAspectRatio(newPos, edge.to, edge.next.to) > 10000) {
          return true;
        }
      }
    }
    return false;
  };
  defaultCollapseStrategy$ObjectLiteral.prototype.newNormal_0 = function (edge, newPos, newNormal) {
    edge.to.subtract_2gj7b4$(newPos, this.tmpPos0);
    edge.next.to.subtract_2gj7b4$(newPos, this.tmpPos1);
    this.tmpPos0.cross_2gj7b4$(this.tmpPos1, newNormal);
    newNormal.norm();
  };
  defaultCollapseStrategy$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [CollapseStrategy]
  };
  function defaultCollapseStrategy() {
    return new defaultCollapseStrategy$ObjectLiteral();
  }
  function ErrorQuadric(vertex) {
    this.vertex = vertex;
    this.errQuadric = (new Mat4d()).setZero();
    this.isStickyVertex = false;
    this.isBorder_qaaj7p$_0 = false;
    this.isDeleted_clri7e$_0 = false;
    this.tmpVec4_0 = MutableVec4f_init();
    var tmp$;
    tmp$ = this.vertex.edges;
    for (var i = 0; i !== tmp$.size; ++i) {
      var ed = this.vertex.edges.get_za3lpa$(i);
      this.addPlane_0(ed.computeTriPlane_5s4mpv$(this.tmpVec4_0));
      if (ed.opp == null) {
        var triNrm = this.tmpVec4_0.getXyz_5s4mqq$(MutableVec3f_init());
        var edDir = MutableVec3f_init_1(this.vertex).subtract_czzhiu$(ed.to).norm();
        var nrm = triNrm.cross_2gj7b4$(edDir, MutableVec3f_init());
        this.tmpVec4_0.set_2qa7tb$(nrm, -nrm.dot_czzhiu$(this.vertex));
        this.addPlane_0(this.tmpVec4_0);
        this.isBorder = true;
      }
      if (ed.next.next.opp == null) {
        if (ed.opp == null) {
          ed.computeTriPlane_5s4mpv$(this.tmpVec4_0);
        }
        var triNrm_0 = this.tmpVec4_0.getXyz_5s4mqq$(MutableVec3f_init());
        var edDir_0 = MutableVec3f_init_1(ed.next.next.from).subtract_czzhiu$(this.vertex).norm();
        var nrm_0 = triNrm_0.cross_2gj7b4$(edDir_0, MutableVec3f_init());
        this.tmpVec4_0.set_2qa7tb$(nrm_0, -nrm_0.dot_czzhiu$(this.vertex));
        this.addPlane_0(this.tmpVec4_0);
        this.isBorder = true;
      }
    }
  }
  Object.defineProperty(ErrorQuadric.prototype, 'isBorder', {
    get: function () {
      return this.isBorder_qaaj7p$_0;
    },
    set: function (isBorder) {
      this.isBorder_qaaj7p$_0 = isBorder;
    }
  });
  Object.defineProperty(ErrorQuadric.prototype, 'isDeleted', {
    get: function () {
      return this.isDeleted_clri7e$_0;
    },
    set: function (isDeleted) {
      this.isDeleted_clri7e$_0 = isDeleted;
    }
  });
  ErrorQuadric.prototype.consume_zdf47l$ = function (other) {
    this.isBorder = this.isBorder || other.isBorder;
    this.errQuadric.add_d4zu6l$(other.errQuadric);
    other.isDeleted = true;
  };
  ErrorQuadric.prototype.getError_czzhiu$ = function (v) {
    this.errQuadric.transform_5s4mpv$(this.tmpVec4_0.set_2qa7tb$(v, 1.0));
    return this.tmpVec4_0.x * v.x + this.tmpVec4_0.y * v.y + this.tmpVec4_0.z * v.z + this.tmpVec4_0.w;
  };
  ErrorQuadric.prototype.addPlane_0 = function (planeVec) {
    this.errQuadric.set_224j3y$(0, 0, this.errQuadric.get_vux9f0$(0, 0) + planeVec.x * planeVec.x);
    this.errQuadric.set_224j3y$(1, 0, this.errQuadric.get_vux9f0$(1, 0) + planeVec.x * planeVec.y);
    this.errQuadric.set_224j3y$(2, 0, this.errQuadric.get_vux9f0$(2, 0) + planeVec.x * planeVec.z);
    this.errQuadric.set_224j3y$(3, 0, this.errQuadric.get_vux9f0$(3, 0) + planeVec.x * planeVec.w);
    this.errQuadric.set_224j3y$(0, 1, this.errQuadric.get_vux9f0$(0, 1) + planeVec.y * planeVec.x);
    this.errQuadric.set_224j3y$(1, 1, this.errQuadric.get_vux9f0$(1, 1) + planeVec.y * planeVec.y);
    this.errQuadric.set_224j3y$(2, 1, this.errQuadric.get_vux9f0$(2, 1) + planeVec.y * planeVec.z);
    this.errQuadric.set_224j3y$(3, 1, this.errQuadric.get_vux9f0$(3, 1) + planeVec.y * planeVec.w);
    this.errQuadric.set_224j3y$(0, 2, this.errQuadric.get_vux9f0$(0, 2) + planeVec.z * planeVec.x);
    this.errQuadric.set_224j3y$(1, 2, this.errQuadric.get_vux9f0$(1, 2) + planeVec.z * planeVec.y);
    this.errQuadric.set_224j3y$(2, 2, this.errQuadric.get_vux9f0$(2, 2) + planeVec.z * planeVec.z);
    this.errQuadric.set_224j3y$(3, 2, this.errQuadric.get_vux9f0$(3, 2) + planeVec.z * planeVec.w);
    this.errQuadric.set_224j3y$(0, 3, this.errQuadric.get_vux9f0$(0, 3) + planeVec.w * planeVec.x);
    this.errQuadric.set_224j3y$(1, 3, this.errQuadric.get_vux9f0$(1, 3) + planeVec.w * planeVec.y);
    this.errQuadric.set_224j3y$(2, 3, this.errQuadric.get_vux9f0$(2, 3) + planeVec.w * planeVec.z);
    this.errQuadric.set_224j3y$(3, 3, this.errQuadric.get_vux9f0$(3, 3) + planeVec.w * planeVec.w);
  };
  ErrorQuadric.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ErrorQuadric',
    interfaces: []
  };
  function simplify($receiver, termCrit) {
    simplify_0(new HalfEdgeMesh($receiver), termCrit, emptySet());
  }
  function simplify_0($receiver, termCrit, excludedEdges) {
    if (excludedEdges === void 0)
      excludedEdges = emptySet();
    var $receiver_0 = new MeshSimplifier(termCrit);
    addAll($receiver_0.excludedEdges, excludedEdges);
    $receiver_0.simplifyMesh_mnbsaa$($receiver);
  }
  function MeshSimplifier(termCrit, collapseStrategy) {
    if (collapseStrategy === void 0)
      collapseStrategy = defaultCollapseStrategy();
    this.termCrit = termCrit;
    this.collapseStrategy = collapseStrategy;
    this.quadrics_h71pfh$_0 = LinkedHashMap_init();
    this.candidates_gym04f$_0 = new MeshSimplifier$CollapseCandidates();
    this.mesh_c14x7o$_aesyuh$_0 = this.mesh_c14x7o$_aesyuh$_0;
    this.excludedEdges = LinkedHashSet_init();
    this.stickyVertices = LinkedHashSet_init();
    this.keepBorders = false;
  }
  Object.defineProperty(MeshSimplifier.prototype, 'mesh_c14x7o$_0', {
    get: function () {
      if (this.mesh_c14x7o$_aesyuh$_0 == null)
        return throwUPAE('mesh');
      return this.mesh_c14x7o$_aesyuh$_0;
    },
    set: function (mesh) {
      this.mesh_c14x7o$_aesyuh$_0 = mesh;
    }
  });
  MeshSimplifier.prototype.simplifyMesh_mnbsaa$ = function (mesh, generateNormals, generateTangents) {
    if (generateNormals === void 0)
      generateNormals = true;
    if (generateTangents === void 0)
      generateTangents = true;
    this.mesh_c14x7o$_0 = mesh;
    var $this = package$util.Log;
    var level = Log$Level.DEBUG;
    var tag = Kotlin.getKClassFromExpression(this).simpleName;
    if (level.level >= $this.level.level) {
      $this.printer(level, tag, 'Simplifying mesh: ' + mesh.faceCount + ' faces / ' + mesh.vertCount + ' vertices...');
    }
    var perf = new PerfTimer();
    this.quadrics_h71pfh$_0.clear();
    this.candidates_gym04f$_0.clear();
    this.termCrit.init_nbf0q6$(mesh);
    var nextReshape = mesh.faceCount / 2 | 0;
    this.rebuildCollapseQueue_sifma0$_0();
    var lastError = {v: 0.0};
    while (this.candidates_gym04f$_0.isNotEmpty() && this.candidates_gym04f$_0.peek().error < kotlin_js_internal_DoubleCompanionObject.MAX_VALUE && !this.termCrit.isFinished_6w1xds$(mesh, lastError.v)) {
      if (mesh.faceCount < nextReshape) {
        this.reshapeTriangles_ps2mgc$_0();
        nextReshape = mesh.faceCount / 2 | 0;
      }
      var candidate = this.candidates_gym04f$_0.poll();
      if (candidate.edge.isDeleted || candidate.q1.isDeleted || candidate.q2.isDeleted) {
        var $this_0 = package$util.Log;
        var level_0 = Log$Level.WARN;
        var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_0.level >= $this_0.level.level) {
          $this_0.printer(level_0, tag_0, 'Invalid edge: already deleted!');
        }
        continue;
      }
      if (candidate.edgeId.fromId !== candidate.edge.from.index || candidate.edgeId.toId !== candidate.edge.to.index) {
        var $this_1 = package$util.Log;
        var level_1 = Log$Level.ERROR;
        var tag_1 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_1.level >= $this_1.level.level) {
          $this_1.printer(level_1, tag_1, 'Invalid edge: inconsistent vertex indices');
        }
        this.rebuildCollapseQueue_sifma0$_0();
        continue;
      }
      var oldError = candidate.error;
      candidate.updateCollapsePosAndError();
      if (oldError !== candidate.error) {
        this.candidates_gym04f$_0.plusAssign_g91td9$(candidate);
        continue;
      }
      if (candidate.error < kotlin_js_internal_DoubleCompanionObject.MAX_VALUE) {
        lastError.v = candidate.collapse();
      }
       else {
        var $this_2 = package$util.Log;
        var level_2 = Log$Level.DEBUG;
        var tag_2 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_2.level >= $this_2.level.level) {
          $this_2.printer(level_2, tag_2, 'No more collapsable edges');
        }
        break;
      }
    }
    mesh.rebuild_dqye30$(generateNormals, generateTangents);
    var $this_3 = package$util.Log;
    var level_3 = Log$Level.DEBUG;
    var tag_3 = Kotlin.getKClassFromExpression(this).simpleName;
    if (level_3.level >= $this_3.level.level) {
      $this_3.printer(level_3, tag_3, 'Mesh simplification done! ' + mesh.faceCount + ' faces / ' + mesh.vertCount + ' vertices remain, last error: ' + lastError.v + ', took ' + toString_1(perf.takeSecs(), 3) + ' s');
    }
  };
  MeshSimplifier.prototype.reshapeTriangles_ps2mgc$_0 = function () {
    var v1 = MutableVec3f_init();
    var v2 = MutableVec3f_init();
    var tmp$;
    tmp$ = this.mesh_c14x7o$_0.edgeHandler.distinctTriangleEdges().iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0;
      if (element.computeTriAspectRatio() > 50.0) {
        var l1 = element.computeLength();
        var l2 = element.next.computeLength();
        var l3 = element.next.next.computeLength();
        if (l1 > l2 && l1 > l3)
          tmp$_0 = element;
        else if (l2 > l1 && l2 > l3)
          tmp$_0 = element.next;
        else
          tmp$_0 = element.next.next;
        var splitEd = tmp$_0;
        v1.set_czzhiu$(element.to).subtract_czzhiu$(element.from).norm();
        v2.set_czzhiu$(element.next.from).subtract_czzhiu$(element.next.to);
        var f = 1.0 - v1.dot_czzhiu$(v2) / splitEd.computeLength();
        if (f > 0.1 && f < 0.9) {
          splitEd.split_mx4ult$(f);
        }
      }
    }
    this.rebuildCollapseQueue_sifma0$_0();
  };
  MeshSimplifier.prototype.rebuildCollapseQueue_sifma0$_0 = function () {
    var tmp$;
    this.candidates_gym04f$_0.clear();
    tmp$ = this.mesh_c14x7o$_0.edgeHandler.iterator();
    while (tmp$.hasNext()) {
      var edge = tmp$.next();
      this.insertEdge_56qw8l$_0(edge);
    }
  };
  MeshSimplifier.prototype.insertEdge_56qw8l$_0 = function (edge) {
    if (!this.excludedEdges.contains_11rb$(edge) && (edge.from.index < edge.to.index || edge.opp == null)) {
      var $receiver = this.quadrics_h71pfh$_0;
      var key = edge.from.index;
      var tmp$;
      var value = $receiver.get_11rb$(key);
      if (value == null) {
        var $receiver_0 = new ErrorQuadric(edge.from);
        $receiver_0.isStickyVertex = this.stickyVertices.contains_11rb$(edge.from);
        var answer = $receiver_0;
        $receiver.put_xwzc9p$(key, answer);
        tmp$ = answer;
      }
       else {
        tmp$ = value;
      }
      var q1 = tmp$;
      var $receiver_1 = this.quadrics_h71pfh$_0;
      var key_0 = edge.to.index;
      var tmp$_0;
      var value_0 = $receiver_1.get_11rb$(key_0);
      if (value_0 == null) {
        var $receiver_2 = new ErrorQuadric(edge.to);
        $receiver_2.isStickyVertex = this.stickyVertices.contains_11rb$(edge.to);
        var answer_0 = $receiver_2;
        $receiver_1.put_xwzc9p$(key_0, answer_0);
        tmp$_0 = answer_0;
      }
       else {
        tmp$_0 = value_0;
      }
      var q2 = tmp$_0;
      if ((!q1.isStickyVertex || !q2.isStickyVertex) && (!this.keepBorders || (!q1.isBorder && !q2.isBorder))) {
        this.candidates_gym04f$_0.plusAssign_g91td9$(new MeshSimplifier$CollapseCandidate(this, edge, q1, q2));
      }
    }
  };
  function MeshSimplifier$CollapseCandidate($outer, edge, q1, q2) {
    this.$outer = $outer;
    this.edge = edge;
    this.q1 = q1;
    this.q2 = q2;
    this.error = 0.0;
    this.collapsePos = MutableVec3f_init();
    this.edgeId = new MeshSimplifier$EdgeId(this.edge.from.index, this.edge.to.index);
    this.updateCollapsePosAndError();
  }
  MeshSimplifier$CollapseCandidate.prototype.updateCollapsePosAndError = function () {
    this.error = this.$outer.collapseStrategy.computeCollapsePosition_2pqe3s$(this.q1, this.q2, this.collapsePos);
  };
  MeshSimplifier$CollapseCandidate.prototype.collapse = function () {
    var rem = this.$outer.quadrics_h71pfh$_0.remove_11rb$(this.q2.vertex.index);
    if (rem !== this.q2) {
      throw IllegalStateException_init('Quadric removal failed!');
    }
    var affectedEdges = LinkedHashSet_init();
    this.collectAffectedEdges_0(this.q1.vertex, affectedEdges);
    this.collectAffectedEdges_0(this.q2.vertex, affectedEdges);
    this.$outer;
    var tmp$;
    tmp$ = affectedEdges.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      this.$outer.candidates_gym04f$_0.removeByVertexIndices_vux9f0$(element.from.index, element.to.index);
    }
    this.q1.consume_zdf47l$(this.q2);
    this.edge.collapse_mx4ult$(0.0);
    this.q1.vertex.updatePosition_czzhiu$(this.collapsePos);
    affectedEdges.clear();
    this.collectAffectedEdges_0(this.q1.vertex, affectedEdges);
    this.$outer;
    var tmp$_0;
    tmp$_0 = affectedEdges.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      this.$outer.insertEdge_56qw8l$_0(element_0);
    }
    return this.error;
  };
  MeshSimplifier$CollapseCandidate.prototype.collectAffectedEdges_0 = function (v, result) {
    var tmp$;
    tmp$ = v.edges.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      result.add_11rb$(element);
      var element_0 = element.next.next;
      result.add_11rb$(element_0);
    }
  };
  MeshSimplifier$CollapseCandidate.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CollapseCandidate',
    interfaces: []
  };
  function MeshSimplifier$EdgeId(fromId, toId) {
    this.fromId = fromId;
    this.toId = toId;
  }
  MeshSimplifier$EdgeId.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EdgeId',
    interfaces: []
  };
  MeshSimplifier$EdgeId.prototype.component1 = function () {
    return this.fromId;
  };
  MeshSimplifier$EdgeId.prototype.component2 = function () {
    return this.toId;
  };
  MeshSimplifier$EdgeId.prototype.copy_vux9f0$ = function (fromId, toId) {
    return new MeshSimplifier$EdgeId(fromId === void 0 ? this.fromId : fromId, toId === void 0 ? this.toId : toId);
  };
  MeshSimplifier$EdgeId.prototype.toString = function () {
    return 'EdgeId(fromId=' + Kotlin.toString(this.fromId) + (', toId=' + Kotlin.toString(this.toId)) + ')';
  };
  MeshSimplifier$EdgeId.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.fromId) | 0;
    result = result * 31 + Kotlin.hashCode(this.toId) | 0;
    return result;
  };
  MeshSimplifier$EdgeId.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.fromId, other.fromId) && Kotlin.equals(this.toId, other.toId)))));
  };
  function MeshSimplifier$CollapseCandidates() {
    TreeMap.call(this);
    this.candidateMap = LinkedHashMap_init();
  }
  MeshSimplifier$CollapseCandidates.prototype.isNotEmpty = function () {
    return !this.isEmpty();
  };
  MeshSimplifier$CollapseCandidates.prototype.peek = function () {
    return first(this.firstValue());
  };
  MeshSimplifier$CollapseCandidates.prototype.poll = function () {
    var v = this.firstValue();
    var c = v.removeAt_za3lpa$(get_lastIndex(v));
    if (v.isEmpty()) {
      this.remove_11rb$(this.firstKey());
    }
    var $receiver = this.candidateMap;
    var key = c.edgeId;
    $receiver.remove_11rb$(key);
    return c;
  };
  MeshSimplifier$CollapseCandidates.prototype.clear = function () {
    TreeMap.prototype.clear.call(this);
    this.candidateMap.clear();
  };
  MeshSimplifier$CollapseCandidates.prototype.removeByVertexIndices_vux9f0$ = function (fromId, toId) {
    var c = this.candidateMap.remove_11rb$(new MeshSimplifier$EdgeId(fromId, toId));
    if (c != null) {
      this.minusAssign_g91td9$(c);
    }
    return c;
  };
  MeshSimplifier$CollapseCandidates.prototype.plusAssign_g91td9$ = function (c) {
    var key = c.error;
    var tmp$;
    var value = this.get_11rb$(key);
    if (value == null) {
      var answer = ArrayList_init_0();
      this.put_xwzc9p$(key, answer);
      tmp$ = answer;
    }
     else {
      tmp$ = value;
    }
    tmp$.add_11rb$(c);
    var $receiver = this.candidateMap;
    var key_0 = c.edgeId;
    $receiver.put_xwzc9p$(key_0, c);
  };
  MeshSimplifier$CollapseCandidates.prototype.minusAssign_g91td9$ = function (c) {
    var v = this.get_11rb$(c.error);
    if (v != null) {
      v.remove_11rb$(c);
      if (v.isEmpty()) {
        this.remove_11rb$(c.error);
      }
    }
    var $receiver = this.candidateMap;
    var key = c.edgeId;
    $receiver.remove_11rb$(key);
  };
  MeshSimplifier$CollapseCandidates.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CollapseCandidates',
    interfaces: [TreeMap]
  };
  MeshSimplifier.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MeshSimplifier',
    interfaces: []
  };
  function TermCriterion() {
  }
  TermCriterion.prototype.init_nbf0q6$ = function (mesh) {
  };
  TermCriterion.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'TermCriterion',
    interfaces: []
  };
  function terminateOnFaceCountRel$ObjectLiteral(closure$factor) {
    this.closure$factor = closure$factor;
    this.targetFaceCnt = 2147483647;
  }
  terminateOnFaceCountRel$ObjectLiteral.prototype.init_nbf0q6$ = function (mesh) {
    this.targetFaceCnt = numberToInt(round(mesh.faceCount * this.closure$factor));
  };
  terminateOnFaceCountRel$ObjectLiteral.prototype.isFinished_6w1xds$ = function (mesh, nextError) {
    return mesh.faceCount <= this.targetFaceCnt;
  };
  terminateOnFaceCountRel$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [TermCriterion]
  };
  function terminateOnFaceCountRel(factor) {
    return new terminateOnFaceCountRel$ObjectLiteral(factor);
  }
  function terminateOnFaceCountAbs$ObjectLiteral(closure$targetFaceCnt) {
    this.closure$targetFaceCnt = closure$targetFaceCnt;
  }
  terminateOnFaceCountAbs$ObjectLiteral.prototype.isFinished_6w1xds$ = function (mesh, nextError) {
    return mesh.faceCount <= this.closure$targetFaceCnt;
  };
  terminateOnFaceCountAbs$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [TermCriterion]
  };
  function terminateOnFaceCountAbs(targetFaceCnt) {
    return new terminateOnFaceCountAbs$ObjectLiteral(targetFaceCnt);
  }
  function terminateOnError$ObjectLiteral(closure$targetError) {
    this.closure$targetError = closure$targetError;
  }
  terminateOnError$ObjectLiteral.prototype.isFinished_6w1xds$ = function (mesh, nextError) {
    return nextError > this.closure$targetError;
  };
  terminateOnError$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [TermCriterion]
  };
  function terminateOnError(targetError) {
    return new terminateOnError$ObjectLiteral(targetError);
  }
  function Box(sizeX, sizeY, sizeZ) {
    this.halfExtents = new Vec3f(sizeX * 0.5, sizeY * 0.5, sizeZ * 0.5);
    this.transform = new Mat4f();
    this.bX = new Box$ColVecView(this, 0);
    this.bY = new Box$ColVecView(this, 1);
    this.bZ = new Box$ColVecView(this, 2);
    this.center = new Box$ColVecView(this, 3);
    this.tmpD_0 = MutableVec3f_init();
  }
  Object.defineProperty(Box.prototype, 'eX', {
    get: function () {
      return this.halfExtents.x;
    }
  });
  Object.defineProperty(Box.prototype, 'eY', {
    get: function () {
      return this.halfExtents.y;
    }
  });
  Object.defineProperty(Box.prototype, 'eZ', {
    get: function () {
      return this.halfExtents.z;
    }
  });
  Box.prototype.isIntersecting_ywo8gk$ = function (other) {
    other.center.subtract_2gj7b4$(this.center, this.tmpD_0);
    var rX = this.halfExtents.x + other.halfExtents.x;
    var rY = this.halfExtents.y + other.halfExtents.y;
    var rZ = this.halfExtents.z + other.halfExtents.z;
    if (this.tmpD_0.sqrLength() > rX * rX + rY * rY + rZ * rZ) {
      return false;
    }
    var c00 = this.bX.times_czzhiu$(other.bX);
    var c10 = this.bY.times_czzhiu$(other.bX);
    var c20 = this.bZ.times_czzhiu$(other.bX);
    var c01 = this.bX.times_czzhiu$(other.bY);
    var c11 = this.bY.times_czzhiu$(other.bY);
    var c21 = this.bZ.times_czzhiu$(other.bY);
    var c02 = this.bX.times_czzhiu$(other.bZ);
    var c12 = this.bY.times_czzhiu$(other.bZ);
    var c22 = this.bZ.times_czzhiu$(other.bZ);
    var r0 = this.halfExtents.x;
    var r1 = other.halfExtents.x * Math_0.abs(c00) + other.halfExtents.y * Math_0.abs(c01) + other.halfExtents.z * Math_0.abs(c02);
    var x = this.bX.times_czzhiu$(this.tmpD_0);
    var r = Math_0.abs(x);
    if (r > r0 + r1) {
      return false;
    }
    r0 = this.halfExtents.y;
    r1 = other.halfExtents.x * Math_0.abs(c10) + other.halfExtents.y * Math_0.abs(c11) + other.halfExtents.z * Math_0.abs(c12);
    var x_0 = this.bY.times_czzhiu$(this.tmpD_0);
    r = Math_0.abs(x_0);
    if (r > r0 + r1) {
      return false;
    }
    r0 = this.halfExtents.z;
    r1 = other.halfExtents.x * Math_0.abs(c20) + other.halfExtents.y * Math_0.abs(c21) + other.halfExtents.z * Math_0.abs(c22);
    var x_1 = this.bZ.times_czzhiu$(this.tmpD_0);
    r = Math_0.abs(x_1);
    if (r > r0 + r1) {
      return false;
    }
    r0 = this.halfExtents.x * Math_0.abs(c00) + this.halfExtents.y * Math_0.abs(c10) + this.halfExtents.z * Math_0.abs(c20);
    r1 = other.halfExtents.x;
    var x_2 = other.bX.times_czzhiu$(this.tmpD_0);
    r = Math_0.abs(x_2);
    if (r > r0 + r1) {
      return false;
    }
    r0 = this.halfExtents.x * Math_0.abs(c01) + this.halfExtents.y * Math_0.abs(c11) + this.halfExtents.z * Math_0.abs(c21);
    r1 = other.halfExtents.y;
    var x_3 = other.bY.times_czzhiu$(this.tmpD_0);
    r = Math_0.abs(x_3);
    if (r > r0 + r1) {
      return false;
    }
    r0 = this.halfExtents.x * Math_0.abs(c02) + this.halfExtents.y * Math_0.abs(c12) + this.halfExtents.z * Math_0.abs(c22);
    r1 = other.halfExtents.z;
    var x_4 = other.bZ.times_czzhiu$(this.tmpD_0);
    r = Math_0.abs(x_4);
    if (r > r0 + r1) {
      return false;
    }
    r0 = this.halfExtents.y * Math_0.abs(c20) + this.halfExtents.z * Math_0.abs(c10);
    r1 = other.halfExtents.y * Math_0.abs(c02) + other.halfExtents.z * Math_0.abs(c01);
    var x_5 = c10 * this.bZ.times_czzhiu$(this.tmpD_0) - c20 * this.bY.times_czzhiu$(this.tmpD_0);
    r = Math_0.abs(x_5);
    if (r > r0 + r1) {
      return false;
    }
    r0 = this.halfExtents.y * Math_0.abs(c21) + this.halfExtents.z * Math_0.abs(c11);
    r1 = other.halfExtents.x * Math_0.abs(c02) + other.halfExtents.z * Math_0.abs(c00);
    var x_6 = c11 * this.bZ.times_czzhiu$(this.tmpD_0) - c21 * this.bY.times_czzhiu$(this.tmpD_0);
    r = Math_0.abs(x_6);
    if (r > r0 + r1) {
      return false;
    }
    r0 = this.halfExtents.y * Math_0.abs(c22) + this.halfExtents.z * Math_0.abs(c12);
    r1 = other.halfExtents.x * Math_0.abs(c01) + other.halfExtents.y * Math_0.abs(c00);
    var x_7 = c12 * this.bZ.times_czzhiu$(this.tmpD_0) - c22 * this.bY.times_czzhiu$(this.tmpD_0);
    r = Math_0.abs(x_7);
    if (r > r0 + r1) {
      return false;
    }
    r0 = this.halfExtents.x * Math_0.abs(c20) + this.halfExtents.z * Math_0.abs(c00);
    r1 = other.halfExtents.y * Math_0.abs(c12) + other.halfExtents.z * Math_0.abs(c11);
    var x_8 = c20 * this.bX.times_czzhiu$(this.tmpD_0) - c00 * this.bZ.times_czzhiu$(this.tmpD_0);
    r = Math_0.abs(x_8);
    if (r > r0 + r1) {
      return false;
    }
    r0 = this.halfExtents.x * Math_0.abs(c21) + this.halfExtents.z * Math_0.abs(c01);
    r1 = other.halfExtents.x * Math_0.abs(c12) + other.halfExtents.z * Math_0.abs(c10);
    var x_9 = c21 * this.bX.times_czzhiu$(this.tmpD_0) - c01 * this.bZ.times_czzhiu$(this.tmpD_0);
    r = Math_0.abs(x_9);
    if (r > r0 + r1) {
      return false;
    }
    r0 = this.halfExtents.x * Math_0.abs(c22) + this.halfExtents.z * Math_0.abs(c02);
    r1 = other.halfExtents.x * Math_0.abs(c11) + other.halfExtents.y * Math_0.abs(c10);
    var x_10 = c22 * this.bX.times_czzhiu$(this.tmpD_0) - c02 * this.bZ.times_czzhiu$(this.tmpD_0);
    r = Math_0.abs(x_10);
    if (r > r0 + r1) {
      return false;
    }
    r0 = this.halfExtents.x * Math_0.abs(c10) + this.halfExtents.y * Math_0.abs(c00);
    r1 = other.halfExtents.y * Math_0.abs(c22) + other.halfExtents.z * Math_0.abs(c21);
    var x_11 = c00 * this.bY.times_czzhiu$(this.tmpD_0) - c10 * this.bX.times_czzhiu$(this.tmpD_0);
    r = Math_0.abs(x_11);
    if (r > r0 + r1) {
      return false;
    }
    r0 = this.halfExtents.x * Math_0.abs(c11) + this.halfExtents.y * Math_0.abs(c01);
    r1 = other.halfExtents.x * Math_0.abs(c22) + other.halfExtents.z * Math_0.abs(c20);
    var x_12 = c01 * this.bY.times_czzhiu$(this.tmpD_0) - c11 * this.bX.times_czzhiu$(this.tmpD_0);
    r = Math_0.abs(x_12);
    if (r > r0 + r1) {
      return false;
    }
    r0 = this.halfExtents.x * Math_0.abs(c12) + this.halfExtents.y * Math_0.abs(c02);
    r1 = other.halfExtents.x * Math_0.abs(c21) + other.halfExtents.y * Math_0.abs(c20);
    var x_13 = c02 * this.bY.times_czzhiu$(this.tmpD_0) - c12 * this.bX.times_czzhiu$(this.tmpD_0);
    r = Math_0.abs(x_13);
    if (r > r0 + r1) {
      return false;
    }
    return true;
  };
  function Box$ColVecView($outer, col) {
    this.$outer = $outer;
    MutableVec3f_init(this);
    this.iX_0 = col * 4 | 0;
    this.iY_0 = (col * 4 | 0) + 1 | 0;
    this.iZ_0 = (col * 4 | 0) + 2 | 0;
  }
  Object.defineProperty(Box$ColVecView.prototype, 'x', {
    get: function () {
      return this.$outer.transform.matrix[this.iX_0];
    },
    set: function (value) {
      this.$outer.transform.matrix[this.iX_0] = value;
    }
  });
  Object.defineProperty(Box$ColVecView.prototype, 'y', {
    get: function () {
      return this.$outer.transform.matrix[this.iY_0];
    },
    set: function (value) {
      this.$outer.transform.matrix[this.iY_0] = value;
    }
  });
  Object.defineProperty(Box$ColVecView.prototype, 'z', {
    get: function () {
      return this.$outer.transform.matrix[this.iZ_0];
    },
    set: function (value) {
      this.$outer.transform.matrix[this.iZ_0] = value;
    }
  });
  Box$ColVecView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ColVecView',
    interfaces: [MutableVec3f]
  };
  Box.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Box',
    interfaces: []
  };
  function BoxMesh(box, boxColor) {
    if (boxColor === void 0)
      boxColor = Color$Companion_getInstance().MD_GREY;
    Mesh.call(this, MeshData_init([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().COLORS, Attribute$Companion_getInstance().NORMALS]), box.name);
    this.box = box;
    this.boundsMin_0 = MutableVec3f_init();
    this.boundsMax_0 = MutableVec3f_init();
    this.radius_0 = this.box.shape.halfExtents.length();
    var $receiver = new MeshBuilder(this.meshData);
    $receiver.color = boxColor;
    var $receiver_0 = $receiver.cubeProps.defaults();
    $receiver_0.size.set_czzhiu$(this.box.shape.halfExtents).scale_mx4ult$(2.0);
    $receiver_0.centerOrigin();
    $receiver.cube_lhbb6w$($receiver.cubeProps);
    this.shader = basicShader(void 0, BoxMesh_init$lambda);
  }
  BoxMesh.prototype.preRender_aemszp$ = function (ctx) {
    this.box.worldTransform.getOrigin_5s4mqq$(this.boundsMin_0);
    this.boundsMax_0.set_czzhiu$(this.boundsMin_0);
    this.boundsMin_0.x = this.boundsMin_0.x - this.radius_0;
    this.boundsMin_0.y = this.boundsMin_0.y - this.radius_0;
    this.boundsMin_0.z = this.boundsMin_0.z - this.radius_0;
    this.boundsMax_0.x = this.boundsMax_0.x + this.radius_0;
    this.boundsMax_0.y = this.boundsMax_0.y + this.radius_0;
    this.boundsMax_0.z = this.boundsMax_0.z + this.radius_0;
    this.bounds.set_4lfkt4$(this.boundsMin_0, this.boundsMax_0);
    Mesh.prototype.preRender_aemszp$.call(this, ctx);
  };
  BoxMesh.prototype.render_aemszp$ = function (ctx) {
    ctx.mvpState.modelMatrix.push();
    ctx.mvpState.modelMatrix.mul_d4zu6j$(this.box.worldTransform);
    ctx.mvpState.update_aemszp$(ctx);
    Mesh.prototype.render_aemszp$.call(this, ctx);
    ctx.mvpState.modelMatrix.pop();
    ctx.mvpState.update_aemszp$(ctx);
  };
  function BoxMesh_init$lambda($receiver) {
    $receiver.colorModel = ColorModel$VERTEX_COLOR_getInstance();
    $receiver.lightModel = LightModel$PHONG_LIGHTING_getInstance();
    $receiver.isReceivingShadows = true;
    $receiver.specularIntensity = 0.4;
    return Unit;
  }
  BoxMesh.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BoxMesh',
    interfaces: [Mesh]
  };
  function MultiBoxMesh(world) {
    MultiBoxMesh$Companion_getInstance();
    Mesh.call(this, MeshData_init([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().COLORS, Attribute$Companion_getInstance().NORMALS, Attribute$Companion_getInstance().TEXTURE_COORDS, Attribute$Companion_getInstance().TANGENTS]));
    this.world = world;
    this.boxMeshIdcs_0 = LinkedHashMap_init();
    this.vert_0 = this.meshData.get_za3lpa$(0);
    this.meshData.isRebuildBoundsOnSync = true;
  }
  MultiBoxMesh.prototype.updateBoxes = function () {
    var tmp$;
    if (this.boxMeshIdcs_0.size !== this.world.bodies.size) {
      tmp$ = this.world.bodies;
      for (var i = 0; i !== tmp$.size; ++i) {
        if (!this.boxMeshIdcs_0.containsKey_11rb$(this.world.bodies.get_za3lpa$(i))) {
          var $receiver = this.boxMeshIdcs_0;
          var key = this.world.bodies.get_za3lpa$(i);
          var value = this.addBoxVerts_0(this.world.bodies.get_za3lpa$(i));
          $receiver.put_xwzc9p$(key, value);
        }
      }
    }
    var boxI = {v: 0};
    var tmp$_0;
    tmp$_0 = this.boxMeshIdcs_0.entries.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      var body = element.key;
      var idx = element.value;
      var tmp$_1;
      this.updateBoxVerts_0(body, (tmp$_1 = boxI.v, boxI.v = tmp$_1 + 1 | 0, tmp$_1), idx);
    }
    this.meshData.generateTangents();
  };
  MultiBoxMesh.prototype.updateBoxVerts_0 = function (body, boxIdx, vertIdx) {
    var tmp$;
    switch (boxIdx) {
      case 0:
        tmp$ = Color$Companion_getInstance().MD_PURPLE;
        break;
      case 1:
        tmp$ = Color$Companion_getInstance().MD_PINK;
        break;
      default:tmp$ = Color$Companion_getInstance().MD_ORANGE;
        break;
    }
    var color = tmp$;
    for (var i = 0; i <= 23; i++) {
      this.vert_0.index = vertIdx + i | 0;
      this.vert_0.color.set_d7aj7k$(color);
      body.worldTransform.transform_w1lst9$(this.vert_0.position.set_czzhiu$(body.shape.halfExtents).mul_czzhiu$(MultiBoxMesh$Companion_getInstance().SOLID_SIGNS_0.get_za3lpa$(i)));
      body.worldTransform.transform_w1lst9$(this.vert_0.normal.set_czzhiu$(MultiBoxMesh$Companion_getInstance().SOLID_NORMALS_0.get_za3lpa$(i / 4 | 0)), 0.0);
    }
    this.meshData.isSyncRequired = true;
  };
  MultiBoxMesh.prototype.addBoxVerts_0 = function (rigidBody) {
    var startIdx = {v: 0};
    var $this = this.meshData;
    var wasBatchUpdate = $this.isBatchUpdate;
    $this.isBatchUpdate = true;
    var tmp$, tmp$_0;
    for (var i = 0; i <= 23; i++) {
      switch (i / 8 | 0) {
        case 0:
          tmp$ = rigidBody.shape.halfExtents.z * 2;
          break;
        case 1:
          tmp$ = rigidBody.shape.halfExtents.x * 2;
          break;
        default:tmp$ = rigidBody.shape.halfExtents.x * 2;
          break;
      }
      var w = tmp$;
      switch (i / 8 | 0) {
        case 0:
          tmp$_0 = rigidBody.shape.halfExtents.y * 2;
          break;
        case 1:
          tmp$_0 = rigidBody.shape.halfExtents.z * 2;
          break;
        default:tmp$_0 = rigidBody.shape.halfExtents.y * 2;
          break;
      }
      var h = tmp$_0;
      $this.isSyncRequired = true;
      var $this_0 = $this.vertexList;
      var updateBounds = $this.bounds;
      var tmp$_1, tmp$_2, tmp$_3;
      $this_0.checkBufferSizes_za3lpa$();
      tmp$_1 = $this_0.vertexSizeF;
      for (var i_0 = 1; i_0 <= tmp$_1; i_0++) {
        $this_0.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_2 = $this_0.vertexSizeI;
      for (var i_1 = 1; i_1 <= tmp$_2; i_1++) {
        $this_0.dataI.plusAssign_za3lpa$(0);
      }
      $this_0.vertexIt.index = (tmp$_3 = $this_0.size, $this_0.size = tmp$_3 + 1 | 0, tmp$_3);
      var $receiver = $this_0.vertexIt;
      switch (i % 4) {
        case 0:
          $receiver.texCoord.set_dleff0$(0.0, 0.0);
          break;
        case 1:
          $receiver.texCoord.set_dleff0$(0.0, h);
          break;
        case 2:
          $receiver.texCoord.set_dleff0$(w, h);
          break;
        case 3:
          $receiver.texCoord.set_dleff0$(w, 0.0);
          break;
      }
      updateBounds != null ? updateBounds.add_czzhiu$($this_0.vertexIt.position) : null;
      var idx = $this_0.size - 1 | 0;
      if (i === 0) {
        startIdx.v = idx;
      }
    }
    for (var i_2 = 0; i_2 <= 5; i_2++) {
      $this.addTriIndices_qt1dr2$(startIdx.v + (i_2 * 4 | 0) | 0, startIdx.v + (i_2 * 4 | 0) + 1 | 0, startIdx.v + (i_2 * 4 | 0) + 2 | 0);
      $this.addTriIndices_qt1dr2$(startIdx.v + (i_2 * 4 | 0) | 0, startIdx.v + (i_2 * 4 | 0) + 2 | 0, startIdx.v + (i_2 * 4 | 0) + 3 | 0);
    }
    $this.isSyncRequired = true;
    $this.isBatchUpdate = wasBatchUpdate;
    if (false) {
      $this.rebuildBounds();
    }
    return startIdx.v;
  };
  function MultiBoxMesh$Companion() {
    MultiBoxMesh$Companion_instance = this;
    this.SOLID_SIGNS_0 = listOf([new Vec3f(1.0, 1.0, 1.0), new Vec3f(1.0, -1.0, 1.0), new Vec3f(1.0, -1.0, -1.0), new Vec3f(1.0, 1.0, -1.0), new Vec3f(-1.0, 1.0, 1.0), new Vec3f(-1.0, 1.0, -1.0), new Vec3f(-1.0, -1.0, -1.0), new Vec3f(-1.0, -1.0, 1.0), new Vec3f(1.0, 1.0, 1.0), new Vec3f(1.0, 1.0, -1.0), new Vec3f(-1.0, 1.0, -1.0), new Vec3f(-1.0, 1.0, 1.0), new Vec3f(1.0, -1.0, 1.0), new Vec3f(-1.0, -1.0, 1.0), new Vec3f(-1.0, -1.0, -1.0), new Vec3f(1.0, -1.0, -1.0), new Vec3f(1.0, -1.0, 1.0), new Vec3f(1.0, 1.0, 1.0), new Vec3f(-1.0, 1.0, 1.0), new Vec3f(-1.0, -1.0, 1.0), new Vec3f(-1.0, 1.0, -1.0), new Vec3f(1.0, 1.0, -1.0), new Vec3f(1.0, -1.0, -1.0), new Vec3f(-1.0, -1.0, -1.0)]);
    this.SOLID_NORMALS_0 = listOf([Vec3f$Companion_getInstance().X_AXIS, Vec3f$Companion_getInstance().NEG_X_AXIS, Vec3f$Companion_getInstance().Y_AXIS, Vec3f$Companion_getInstance().NEG_Y_AXIS, Vec3f$Companion_getInstance().Z_AXIS, Vec3f$Companion_getInstance().NEG_Z_AXIS]);
  }
  MultiBoxMesh$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MultiBoxMesh$Companion_instance = null;
  function MultiBoxMesh$Companion_getInstance() {
    if (MultiBoxMesh$Companion_instance === null) {
      new MultiBoxMesh$Companion();
    }
    return MultiBoxMesh$Companion_instance;
  }
  MultiBoxMesh.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MultiBoxMesh',
    interfaces: [Mesh]
  };
  function BoxBoxCollision() {
    BoxBoxCollision$Companion_getInstance();
    this.normal_0 = MutableVec3f_init();
    this.depth_0 = 0.0;
    this.satTest_0 = new BoxBoxCollision$SatTest(this);
    this.pa_0 = MutableVec3f_init();
    this.pb_0 = MutableVec3f_init();
    this.tmpP_0 = MutableVec3f_init();
    this.normal2_0 = MutableVec3f_init();
    this.nr_0 = MutableVec3f_init();
    this.anr_0 = MutableVec3f_init();
    this.faceCenter_0 = MutableVec3f_init();
    this.rectIntersector_0 = new BoxBoxCollision$QuadRectIntersector();
    this.quadPt_0 = MutableVec3f_init();
    this.tmpVec1_0 = MutableVec3f_init();
  }
  BoxBoxCollision.prototype.testForCollision_yvmcey$ = function (bodyA, bodyB, result) {
    var tmp$;
    var satAxis = this.satTest_0.performSat_jzlprg$(bodyA.shape, bodyB.shape);
    if (satAxis > 6)
      tmp$ = this.computeEdgeEdgeIntersection_0(bodyA, bodyB, satAxis, result);
    else if (satAxis > 0) {
      var body1 = satAxis < 4 ? bodyA : bodyB;
      var body2 = satAxis < 4 ? bodyB : bodyA;
      tmp$ = this.computeFaceSthIntersection_0(body1, body2, satAxis, result);
    }
     else
      tmp$ = 0;
    return tmp$;
  };
  BoxBoxCollision.prototype.computeEdgeEdgeIntersection_0 = function (bodyA, bodyB, satAxis, result) {
    var tmp$;
    var box1 = bodyA.shape;
    var box2 = bodyB.shape;
    this.pa_0.set_czzhiu$(box1.center);
    for (var i = 0; i <= 2; i++) {
      switch (i) {
        case 0:
          tmp$ = box1.bX;
          break;
        case 1:
          tmp$ = box1.bY;
          break;
        default:tmp$ = box1.bZ;
          break;
      }
      var b = tmp$;
      var x = this.normal_0.times_czzhiu$(b);
      var sign = Math_0.sign(x);
      this.pa_0.x = this.pa_0.x + sign * box1.eX * b.x;
      this.pa_0.y = this.pa_0.y + sign * box1.eY * b.y;
      this.pa_0.z = this.pa_0.z + sign * box1.eZ * b.z;
    }
    this.pb_0.set_czzhiu$(box2.center);
    for (var i_0 = 0; i_0 <= 2; i_0++) {
      var b_0 = this.base_0(box2, i_0);
      var x_0 = this.normal_0.times_czzhiu$(b_0);
      var sign_0 = -Math_0.sign(x_0);
      this.pb_0.x = this.pb_0.x + sign_0 * box2.eX * b_0.x;
      this.pb_0.y = this.pb_0.y + sign_0 * box2.eY * b_0.y;
      this.pb_0.z = this.pb_0.z + sign_0 * box2.eZ * b_0.z;
    }
    var ua = this.base_0(box1, (satAxis - 7 | 0) / 3 | 0);
    var ub = this.base_0(box2, (satAxis - 7 | 0) % 3);
    this.lineClosestApproach_0(this.pa_0, ua, this.pb_0, ub);
    var c = result.addNewContact_jp95gs$(bodyA, bodyB);
    c.worldNormalOnB.set_czzhiu$(this.normal_0).scale_mx4ult$(-1.0);
    var $receiver = c.worldPosB;
    var element = result.newWorldPosVec_2qa7tb$(this.pb_0, -this.depth_0);
    $receiver.add_11rb$(element);
    return 1;
  };
  BoxBoxCollision.prototype.lineClosestApproach_0 = function (pa, ua, pb, ub) {
    pb.subtract_2gj7b4$(pa, this.tmpP_0);
    var uaub = ua.times_czzhiu$(ub);
    var q1 = ua.times_czzhiu$(this.tmpP_0);
    var q2 = -ub.times_czzhiu$(this.tmpP_0);
    var d = 1.0 - uaub * uaub;
    if (d > FLT_EPSILON) {
      d = 1.0 / d;
      var alpha = (q1 + uaub * q2) * d;
      var beta = (q1 * uaub + q2) * d;
      pa.x = pa.x + ua.x * alpha;
      pa.y = pa.y + ua.y * alpha;
      pa.z = pa.z + ua.z * alpha;
      pb.x = pb.x + ub.x * beta;
      pb.y = pb.y + ub.y * beta;
      pb.z = pb.z + ub.z * beta;
    }
  };
  BoxBoxCollision.prototype.computeFaceSthIntersection_0 = function (bodyA, bodyB, satAxis, result) {
    var tmp$;
    var box1 = bodyA.shape;
    var box2 = bodyB.shape;
    this.normal2_0.set_czzhiu$(this.normal_0);
    if (satAxis > 3) {
      this.normal2_0.scale_mx4ult$(-1.0);
    }
    transformTransposed(box2.transform, this.nr_0.set_czzhiu$(this.normal2_0));
    var tmp$_0 = this.anr_0;
    var x = this.nr_0.x;
    tmp$_0.x = Math_0.abs(x);
    var tmp$_1 = this.anr_0;
    var x_0 = this.nr_0.y;
    tmp$_1.y = Math_0.abs(x_0);
    var tmp$_2 = this.anr_0;
    var x_1 = this.nr_0.z;
    tmp$_2.z = Math_0.abs(x_1);
    var lanr = this.largestComponentIdx_0(this.anr_0);
    var a1 = lanr === 0 ? 1 : 0;
    var a2 = lanr <= 1 ? 2 : 1;
    var sign = this.nr_0.get_za3lpa$(lanr) < 0 ? 1.0 : -1.0;
    this.faceCenter_0.x = box2.center.x - box1.center.x + sign * box2.halfExtents.get_za3lpa$(lanr) * box2.transform.get_vux9f0$(0, lanr);
    this.faceCenter_0.y = box2.center.y - box1.center.y + sign * box2.halfExtents.get_za3lpa$(lanr) * box2.transform.get_vux9f0$(1, lanr);
    this.faceCenter_0.z = box2.center.z - box1.center.z + sign * box2.halfExtents.get_za3lpa$(lanr) * box2.transform.get_vux9f0$(2, lanr);
    var codeN = satAxis <= 3 ? satAxis - 1 | 0 : satAxis - 4 | 0;
    var code1 = codeN === 0 ? 1 : 0;
    var code2 = codeN === 2 ? 1 : 2;
    var box1Code1 = this.base_0(box1, code1);
    var box1Code2 = this.base_0(box1, code2);
    var box2A1 = this.base_0(box2, a1);
    var box2A2 = this.base_0(box2, a2);
    var c1 = this.faceCenter_0.times_czzhiu$(box1Code1);
    var c2 = this.faceCenter_0.times_czzhiu$(box1Code2);
    var m11 = box1Code1.times_czzhiu$(box2A1);
    var m12 = box1Code1.times_czzhiu$(box2A2);
    var m21 = box1Code2.times_czzhiu$(box2A1);
    var m22 = box1Code2.times_czzhiu$(box2A2);
    var k1 = m11 * box2.halfExtents.get_za3lpa$(a1);
    var k2 = m21 * box2.halfExtents.get_za3lpa$(a1);
    var k3 = m12 * box2.halfExtents.get_za3lpa$(a2);
    var k4 = m22 * box2.halfExtents.get_za3lpa$(a2);
    this.rectIntersector_0.quad[0].set_dleff0$(c1 - k1 - k3, c2 - k2 - k4);
    this.rectIntersector_0.quad[1].set_dleff0$(c1 - k1 + k3, c2 - k2 + k4);
    this.rectIntersector_0.quad[2].set_dleff0$(c1 + k1 + k3, c2 + k2 + k4);
    this.rectIntersector_0.quad[3].set_dleff0$(c1 + k1 - k3, c2 + k2 - k4);
    this.rectIntersector_0.rect.set_dleff0$(box1.halfExtents.get_za3lpa$(code1), box1.halfExtents.get_za3lpa$(code2));
    var n = this.rectIntersector_0.intersectRectQuad2();
    var quadInterPts = this.rectIntersector_0.resultPoints;
    var det1 = 1.0 / (m11 * m22 - m12 * m21);
    m11 *= det1;
    m12 *= det1;
    m21 *= det1;
    m22 *= det1;
    var cNum = 0;
    var cont = {v: null};
    var swapBodies = false;
    for (var j = 0; j < n; j++) {
      k1 = m22 * (quadInterPts[j].x - c1) - m12 * (quadInterPts[j].y - c2);
      k2 = -m21 * (quadInterPts[j].x - c1) + m11 * (quadInterPts[j].y - c2);
      this.quadPt_0.x = this.faceCenter_0.x + k1 * this.base_0(box2, a1).x + k2 * this.base_0(box2, a2).x;
      this.quadPt_0.y = this.faceCenter_0.y + k1 * this.base_0(box2, a1).y + k2 * this.base_0(box2, a2).y;
      this.quadPt_0.z = this.faceCenter_0.z + k1 * this.base_0(box2, a1).z + k2 * this.base_0(box2, a2).z;
      var depth = box1.halfExtents.get_za3lpa$(codeN) - this.normal2_0.times_czzhiu$(this.quadPt_0);
      if (depth >= 0) {
        this.tmpVec1_0.set_czzhiu$(this.quadPt_0).add_czzhiu$(box1.center);
        if (satAxis >= 4) {
          swapBodies = true;
          this.tmpVec1_0.subtract_czzhiu$(this.quadPt_0.set_czzhiu$(this.normal_0).scale_mx4ult$(depth));
        }
        var tmp$_3;
        if ((tmp$ = cont.v) != null)
          tmp$_3 = tmp$;
        else {
          var c = result.addNewContact_jp95gs$(swapBodies ? bodyB : bodyA, swapBodies ? bodyA : bodyB);
          cont.v = c;
          c.worldNormalOnB.set_czzhiu$(this.normal_0).scale_mx4ult$(-1.0);
          tmp$_3 = c;
        }
        var c_0 = tmp$_3;
        var $receiver = c_0.worldPosB;
        var element = result.newWorldPosVec_2qa7tb$(this.tmpVec1_0, -depth);
        $receiver.add_11rb$(element);
        cNum = cNum + 1 | 0;
      }
    }
    return cNum;
  };
  BoxBoxCollision.prototype.largestComponentIdx_0 = function ($receiver) {
    if ($receiver.x > $receiver.y && $receiver.x > $receiver.z)
      return 0;
    else if ($receiver.y > $receiver.x && $receiver.y > $receiver.z)
      return 1;
    else
      return 2;
  };
  BoxBoxCollision.prototype.base_0 = function ($receiver, i) {
    switch (i) {
      case 0:
        return $receiver.bX;
      case 1:
        return $receiver.bY;
      default:return $receiver.bZ;
    }
  };
  function BoxBoxCollision$Companion() {
    BoxBoxCollision$Companion_instance = this;
    this.FUDGE_FACTOR_0 = 1.05;
    this.FUDGE_2_0 = 1.0E-5;
  }
  BoxBoxCollision$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var BoxBoxCollision$Companion_instance = null;
  function BoxBoxCollision$Companion_getInstance() {
    if (BoxBoxCollision$Companion_instance === null) {
      new BoxBoxCollision$Companion();
    }
    return BoxBoxCollision$Companion_instance;
  }
  function BoxBoxCollision$SatTest($outer) {
    this.$outer = $outer;
    this.satP_0 = MutableVec3f_init();
    this.satPp_0 = MutableVec3f_init();
    this.satNormalC_0 = MutableVec3f_init();
    this.s_0 = -kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    this.normalR_0 = null;
    this.invertNormal_0 = false;
    this.code_0 = 0;
  }
  BoxBoxCollision$SatTest.prototype.performSat_jzlprg$ = function (box1, box2) {
    var tmp$;
    box2.center.subtract_2gj7b4$(box1.center, this.satP_0);
    transformTransposed(box1.transform, this.satPp_0.set_czzhiu$(this.satP_0));
    var r11 = box1.bX.times_czzhiu$(box2.bX);
    var r12 = box1.bX.times_czzhiu$(box2.bY);
    var r13 = box1.bX.times_czzhiu$(box2.bZ);
    var r21 = box1.bY.times_czzhiu$(box2.bX);
    var r22 = box1.bY.times_czzhiu$(box2.bY);
    var r23 = box1.bY.times_czzhiu$(box2.bZ);
    var r31 = box1.bZ.times_czzhiu$(box2.bX);
    var r32 = box1.bZ.times_czzhiu$(box2.bY);
    var r33 = box1.bZ.times_czzhiu$(box2.bZ);
    var q11 = Math_0.abs(r11);
    var q12 = Math_0.abs(r12);
    var q13 = Math_0.abs(r13);
    var q21 = Math_0.abs(r21);
    var q22 = Math_0.abs(r22);
    var q23 = Math_0.abs(r23);
    var q31 = Math_0.abs(r31);
    var q32 = Math_0.abs(r32);
    var q33 = Math_0.abs(r33);
    this.s_0 = -kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    this.normalR_0 = null;
    this.invertNormal_0 = false;
    this.code_0 = 0;
    if (!this.tstBase_8f7t3w$(this.satPp_0.x, box1.eX + box2.eX * q11 + box2.eY * q12 + box2.eZ * q13, box1.bX, 1)) {
      return 0;
    }
    if (!this.tstBase_8f7t3w$(this.satPp_0.y, box1.eY + box2.eX * q21 + box2.eY * q22 + box2.eZ * q23, box1.bY, 2)) {
      return 0;
    }
    if (!this.tstBase_8f7t3w$(this.satPp_0.z, box1.eZ + box2.eX * q31 + box2.eY * q32 + box2.eZ * q33, box1.bZ, 3)) {
      return 0;
    }
    if (!this.tstBase_8f7t3w$(box2.bX.times_czzhiu$(this.satP_0), box1.eX * q11 + box1.eY * q21 + box1.eZ * q31 + box2.eX, box2.bX, 4)) {
      return 0;
    }
    if (!this.tstBase_8f7t3w$(box2.bY.times_czzhiu$(this.satP_0), box1.eX * q12 + box1.eY * q22 + box1.eZ * q32 + box2.eY, box2.bY, 5)) {
      return 0;
    }
    if (!this.tstBase_8f7t3w$(box2.bZ.times_czzhiu$(this.satP_0), box1.eX * q13 + box1.eY * q23 + box1.eZ * q33 + box2.eZ, box2.bZ, 6)) {
      return 0;
    }
    q11 += BoxBoxCollision$Companion_getInstance().FUDGE_2_0;
    q12 += BoxBoxCollision$Companion_getInstance().FUDGE_2_0;
    q13 += BoxBoxCollision$Companion_getInstance().FUDGE_2_0;
    q21 += BoxBoxCollision$Companion_getInstance().FUDGE_2_0;
    q22 += BoxBoxCollision$Companion_getInstance().FUDGE_2_0;
    q23 += BoxBoxCollision$Companion_getInstance().FUDGE_2_0;
    q31 += BoxBoxCollision$Companion_getInstance().FUDGE_2_0;
    q32 += BoxBoxCollision$Companion_getInstance().FUDGE_2_0;
    q33 += BoxBoxCollision$Companion_getInstance().FUDGE_2_0;
    if (!this.tstBaseXBase_i54ftt$(this.satPp_0.z * r21 - this.satPp_0.y * r31, box1.eY * q31 + box1.eZ * q21 + box2.eY * q13 + box2.eZ * q12, 0.0, -r31, r21, 7)) {
      return 0;
    }
    if (!this.tstBaseXBase_i54ftt$(this.satPp_0.z * r22 - this.satPp_0.y * r32, box1.eY * q32 + box1.eZ * q22 + box2.eX * q13 + box2.eZ * q11, 0.0, -r32, r22, 8)) {
      return 0;
    }
    if (!this.tstBaseXBase_i54ftt$(this.satPp_0.z * r23 - this.satPp_0.y * r33, box1.eY * q33 + box1.eZ * q23 + box2.eX * q12 + box2.eY * q11, 0.0, -r33, r23, 9)) {
      return 0;
    }
    if (!this.tstBaseXBase_i54ftt$(this.satPp_0.x * r31 - this.satPp_0.z * r11, box1.eX * q31 + box1.eZ * q11 + box2.eY * q23 + box2.eZ * q22, r31, 0.0, -r11, 10)) {
      return 0;
    }
    if (!this.tstBaseXBase_i54ftt$(this.satPp_0.x * r32 - this.satPp_0.z * r12, box1.eX * q32 + box1.eZ * q12 + box2.eX * q23 + box2.eZ * q21, r32, 0.0, -r12, 11)) {
      return 0;
    }
    if (!this.tstBaseXBase_i54ftt$(this.satPp_0.x * r33 - this.satPp_0.z * r13, box1.eX * q33 + box1.eZ * q13 + box2.eX * q22 + box2.eY * q21, r33, 0.0, -r13, 12)) {
      return 0;
    }
    if (!this.tstBaseXBase_i54ftt$(this.satPp_0.y * r11 - this.satPp_0.x * r21, box1.eX * q21 + box1.eY * q11 + box2.eY * q33 + box2.eZ * q32, -r21, r11, 0.0, 13)) {
      return 0;
    }
    if (!this.tstBaseXBase_i54ftt$(this.satPp_0.y * r12 - this.satPp_0.x * r22, box1.eX * q22 + box1.eY * q12 + box2.eX * q33 + box2.eZ * q31, -r22, r12, 0.0, 14)) {
      return 0;
    }
    if (!this.tstBaseXBase_i54ftt$(this.satPp_0.y * r13 - this.satPp_0.x * r23, box1.eX * q23 + box1.eY * q13 + box2.eX * q32 + box2.eY * q31, -r23, r13, 0.0, 15)) {
      return 0;
    }
    this.$outer.normal_0.set_czzhiu$((tmp$ = this.normalR_0) != null ? tmp$ : this.satNormalC_0);
    if (this.normalR_0 == null) {
      box1.transform.transform_w1lst9$(this.$outer.normal_0, 0.0);
    }
    if (this.invertNormal_0) {
      this.$outer.normal_0.scale_mx4ult$(-1.0);
    }
    this.$outer.depth_0 = -this.s_0;
    return this.code_0;
  };
  BoxBoxCollision$SatTest.prototype.tstBase_8f7t3w$ = function (expr1, expr2, norm, cc) {
    var s2 = Math_0.abs(expr1) - expr2;
    if (s2 > 0) {
      return false;
    }
     else if (s2 > this.s_0) {
      this.s_0 = s2;
      this.normalR_0 = norm;
      this.invertNormal_0 = expr1 < 0;
      this.code_0 = cc;
    }
    return true;
  };
  BoxBoxCollision$SatTest.prototype.tstBaseXBase_i54ftt$ = function (expr1, expr2, n1, n2, n3, cc) {
    var s2 = Math_0.abs(expr1) - expr2;
    if (s2 > FLT_EPSILON) {
      return false;
    }
    var x = n1 * n1 + n2 * n2 + n3 * n3;
    var l = Math_0.sqrt(x);
    if (l > FLT_EPSILON) {
      s2 /= l;
      if (s2 * BoxBoxCollision$Companion_getInstance().FUDGE_FACTOR_0 > this.s_0) {
        this.s_0 = s2;
        this.normalR_0 = null;
        this.satNormalC_0.set_y2kzbl$(n1, n2, n3).scale_mx4ult$(1.0 / l);
        this.invertNormal_0 = expr1 < 0;
        this.code_0 = cc;
      }
    }
    return true;
  };
  BoxBoxCollision$SatTest.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SatTest',
    interfaces: []
  };
  function BoxBoxCollision$QuadRectIntersector() {
    var array = Array_0(4);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = MutableVec2f_init();
    }
    this.quad = array;
    this.rect = MutableVec2f_init();
    var array_0 = Array_0(8);
    var tmp$_0;
    tmp$_0 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array_0[i_0] = MutableVec2f_init();
    }
    this.bufferPoints_0 = array_0;
    var array_1 = Array_0(8);
    var tmp$_1;
    tmp$_1 = array_1.length - 1 | 0;
    for (var i_1 = 0; i_1 <= tmp$_1; i_1++) {
      array_1[i_1] = MutableVec2f_init();
    }
    this.resultPoints = array_1;
    this.resultPointCnt_bnlmla$_0 = 0;
  }
  Object.defineProperty(BoxBoxCollision$QuadRectIntersector.prototype, 'resultPointCnt', {
    get: function () {
      return this.resultPointCnt_bnlmla$_0;
    },
    set: function (resultPointCnt) {
      this.resultPointCnt_bnlmla$_0 = resultPointCnt;
    }
  });
  BoxBoxCollision$QuadRectIntersector.prototype.intersectRectQuad2 = function () {
    var tmp$;
    var nq = 4;
    this.resultPointCnt = 0;
    var q = this.quad;
    var r = this.resultPoints;
    dirLoop: for (var dir = 0; dir <= 1; dir++) {
      var sign = -1;
      while (sign < 1) {
        var pq = 0;
        var pr = 0;
        this.resultPointCnt = 0;
        for (var i = nq; i >= 1; i--) {
          if (sign * q[pq].get_za3lpa$(dir) < this.rect.get_za3lpa$(dir)) {
            r[pr].set_czzhjp$(q[pq]);
            pr = pr + 1 | 0;
            this.resultPointCnt = this.resultPointCnt + 1 | 0;
            if (this.resultPointCnt >= 8) {
              q = r;
              break dirLoop;
            }
          }
          var nextQ = i > 1 ? pq + 1 | 0 : 0;
          if (sign * q[pq].get_za3lpa$(dir) < this.rect.get_za3lpa$(dir) ^ sign * q[nextQ].get_za3lpa$(dir) < this.rect.get_za3lpa$(dir)) {
            r[pr].set_24o109$(1 - dir | 0, q[pq].get_za3lpa$(1 - dir | 0) + (q[nextQ].get_za3lpa$(1 - dir | 0) - q[pq].get_za3lpa$(1 - dir | 0)) / (q[nextQ].get_za3lpa$(dir) - q[pq].get_za3lpa$(dir)) * (sign * this.rect.get_za3lpa$(dir) - q[pq].get_za3lpa$(dir)));
            r[pr].set_24o109$(dir, sign * this.rect.get_za3lpa$(dir));
            pr = pr + 1 | 0;
            this.resultPointCnt = this.resultPointCnt + 1 | 0;
            if (this.resultPointCnt >= 8) {
              q = r;
              break dirLoop;
            }
          }
          pq = pq + 1 | 0;
        }
        q = r;
        r = q === this.resultPoints ? this.bufferPoints_0 : this.resultPoints;
        nq = this.resultPointCnt;
        sign = sign + 2 | 0;
      }
    }
    if (q !== this.resultPoints) {
      tmp$ = this.resultPointCnt;
      for (var i_0 = 0; i_0 < tmp$; i_0++) {
        this.resultPoints[i_0].set_czzhjp$(q[i_0]);
      }
    }
    return this.resultPointCnt;
  };
  BoxBoxCollision$QuadRectIntersector.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'QuadRectIntersector',
    interfaces: []
  };
  BoxBoxCollision.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BoxBoxCollision',
    interfaces: []
  };
  function transformTransposed($receiver, vec) {
    var x = vec.x * $receiver.get_vux9f0$(0, 0) + vec.y * $receiver.get_vux9f0$(1, 0) + vec.z * $receiver.get_vux9f0$(2, 0);
    var y = vec.x * $receiver.get_vux9f0$(0, 1) + vec.y * $receiver.get_vux9f0$(1, 1) + vec.z * $receiver.get_vux9f0$(2, 1);
    var z = vec.x * $receiver.get_vux9f0$(0, 2) + vec.y * $receiver.get_vux9f0$(1, 2) + vec.z * $receiver.get_vux9f0$(2, 2);
    return vec.set_y2kzbl$(x, y, z);
  }
  function BroadphaseInterface() {
  }
  BroadphaseInterface.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'BroadphaseInterface',
    interfaces: []
  };
  function BroadphaseProxy() {
  }
  BroadphaseProxy.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'BroadphaseProxy',
    interfaces: []
  };
  function Dbvt() {
    Dbvt$Companion_getInstance();
    this.root_pbrg7c$_0 = null;
    this.lookAhead = -1;
    this.leaves_ofw18u$_0 = 0;
    this.opath_0 = 0;
    this.nodes_0 = ObjectRecycler_init(Dbvt$nodes$lambda);
    this.tmpVec_0 = MutableVec3f_init();
    this.tmpVolume_0 = new BoundingBox();
    this.tmpLeaves_0 = ArrayList_init_0();
  }
  Object.defineProperty(Dbvt.prototype, 'root', {
    get: function () {
      return this.root_pbrg7c$_0;
    },
    set: function (root) {
      this.root_pbrg7c$_0 = root;
    }
  });
  Object.defineProperty(Dbvt.prototype, 'leaves', {
    get: function () {
      return this.leaves_ofw18u$_0;
    },
    set: function (leaves) {
      this.leaves_ofw18u$_0 = leaves;
    }
  });
  Dbvt.prototype.clear = function () {
    if (this.root != null) {
      this.recurseDeleteNode_0(ensureNotNull(this.root));
    }
    this.lookAhead = -1;
    this.leaves = 0;
    this.opath_0 = 0;
  };
  Dbvt.prototype.insert_lb6qlj$ = function (volume, data) {
    var leaf = this.createNode_0(null, volume, data);
    this.insertLeaf_0(this.root, leaf);
    this.leaves = this.leaves + 1 | 0;
    return leaf;
  };
  Dbvt.prototype.remove_3l3fal$ = function (leaf) {
    this.removeLeaf_0(leaf);
    this.deleteNode_0(leaf);
    this.leaves = this.leaves - 1 | 0;
  };
  Dbvt.prototype.extractLeaves_l4st19$ = function (leaves) {
    var tmp$;
    if ((tmp$ = this.root) != null) {
      this.extractLeaves_0(tmp$, leaves);
    }
  };
  Dbvt.prototype.optimizeBottomUp = function () {
    if (this.root != null) {
      this.tmpLeaves_0.clear();
      this.fetchLeaves_0(ensureNotNull(this.root), this.tmpLeaves_0);
      this.bottomUp_0(this.tmpLeaves_0, get_indices(this.tmpLeaves_0));
      this.root = this.tmpLeaves_0.get_za3lpa$(0);
      this.tmpLeaves_0.clear();
    }
  };
  Dbvt.prototype.optimizeTopDown_za3lpa$ = function (buThreshold) {
    if (buThreshold === void 0)
      buThreshold = 128;
    if (this.root != null) {
      this.tmpLeaves_0.clear();
      this.fetchLeaves_0(ensureNotNull(this.root), this.tmpLeaves_0);
      this.root = this.topDown_0(this.tmpLeaves_0, get_indices(this.tmpLeaves_0), buThreshold);
      this.tmpLeaves_0.clear();
    }
  };
  Dbvt.prototype.optimizeIncremental_za3lpa$ = function (passes) {
    var tmp$;
    var nPasses = passes < 0 ? this.leaves : passes;
    if (this.root != null && nPasses > 0) {
      while ((tmp$ = nPasses, nPasses = tmp$ - 1 | 0, tmp$) > 0) {
        var node = ensureNotNull(this.root);
        var bit = 0;
        while (!node.isLeaf) {
          node = this.sort_0(node).getChild_kcn2v3$(this.opath_0 >> bit & 1);
          bit = bit + 1 & 31;
        }
        this.update_43dupb$(node);
        this.opath_0 = this.opath_0 + 1 | 0;
      }
    }
  };
  Dbvt.prototype.update_43dupb$ = function (leaf, lookAhead) {
    if (lookAhead === void 0)
      lookAhead = -1;
    var tmp$;
    var root = this.removeLeaf_0(leaf);
    if (root != null) {
      if (lookAhead >= 0) {
        for (var i = 0; i < lookAhead; i++) {
          tmp$ = ensureNotNull(root).parent;
          if (tmp$ == null) {
            break;
          }
          root = tmp$;
        }
      }
       else {
        root = this.root;
      }
    }
    this.insertLeaf_0(root, leaf);
  };
  Dbvt.prototype.update_oiz9wb$ = function (leaf, volume) {
    var tmp$, tmp$_0;
    var root = this.removeLeaf_0(leaf);
    if (root != null) {
      if (this.lookAhead >= 0) {
        tmp$ = this.lookAhead;
        for (var i = 0; i < tmp$; i++) {
          tmp$_0 = ensureNotNull(root).parent;
          if (tmp$_0 == null) {
            break;
          }
          root = tmp$_0;
        }
      }
       else {
        root = this.root;
      }
    }
    leaf.volume.set_ea4od8$(volume);
    this.insertLeaf_0(root, leaf);
  };
  Dbvt.prototype.update_xxqp3s$ = function (leaf, volume, velocity, margin) {
    if (leaf.volume.isIncluding_ea4od8$(volume)) {
      return false;
    }
    volume.expand_czzhiu$(this.tmpVec_0.set_y2kzbl$(margin, margin, margin)).signedExpand_czzhiu$(velocity);
    this.update_oiz9wb$(leaf, volume);
    return true;
  };
  Dbvt.prototype.update_z4mtab$ = function (leaf, volume, velocity) {
    if (leaf.volume.isIncluding_ea4od8$(volume)) {
      return false;
    }
    volume.signedExpand_czzhiu$(velocity);
    this.update_oiz9wb$(leaf, volume);
    return true;
  };
  Dbvt.prototype.update_ioke9y$ = function (leaf, volume, margin) {
    if (leaf.volume.isIncluding_ea4od8$(volume)) {
      return false;
    }
    volume.expand_czzhiu$(this.tmpVec_0.set_y2kzbl$(margin, margin, margin));
    this.update_oiz9wb$(leaf, volume);
    return true;
  };
  Dbvt.prototype.sort_0 = function (n) {
    var p = n.parent;
    if (p != null && p.id_8be2vx$ > n.id_8be2vx$) {
      var i = n.getIndexInParent_8be2vx$();
      var j = 1 - i | 0;
      var s = p.getChild_kcn2v3$(j);
      var q = p.parent;
      if (q != null) {
        q.replaceChild_lb1qxj$(p, n);
      }
       else {
        this.root = n;
      }
      s.parent = n;
      p.parent = n;
      n.parent = q;
      p.left = n.left;
      p.right = n.right;
      ensureNotNull(n.left).parent = p;
      ensureNotNull(n.right).parent = p;
      n.setChild_tw79om$(i, p);
      n.setChild_tw79om$(j, s);
      this.tmpVolume_0.set_ea4od8$(p.volume);
      p.volume.set_ea4od8$(n.volume);
      n.volume.set_ea4od8$(this.tmpVolume_0);
      return p;
    }
    return n;
  };
  Dbvt.prototype.insertLeaf_0 = function (root, leaf) {
    if (this.root == null) {
      this.root = leaf;
      leaf.parent = null;
    }
     else {
      var rt = ensureNotNull(root);
      while (!rt.isLeaf) {
        rt = rt.selectChild_d0340p$(leaf.volume);
      }
      var prev = rt.parent;
      var node = {v: this.createNode_1(prev, leaf.volume, rt.volume, null)};
      if (prev != null) {
        prev.replaceChild_lb1qxj$(rt, node.v);
        var tmp$ = node.v;
        var $receiver = rt;
        $receiver.parent = node.v;
        tmp$.left = $receiver;
        var tmp$_0 = node.v;
        leaf.parent = node.v;
        tmp$_0.right = leaf;
        while (prev != null) {
          if (!prev.volume.isIncluding_ea4od8$(node.v.volume)) {
            prev.volume.setMerged_hnxjto$(ensureNotNull(prev.left).volume, ensureNotNull(prev.right).volume);
          }
           else {
            break;
          }
          node.v = prev;
          prev = node.v.parent;
        }
      }
       else {
        var tmp$_1 = node.v;
        var $receiver_0 = rt;
        $receiver_0.parent = node.v;
        tmp$_1.left = $receiver_0;
        var tmp$_2 = node.v;
        leaf.parent = node.v;
        tmp$_2.right = leaf;
        this.root = node.v;
      }
    }
  };
  Dbvt.prototype.removeLeaf_0 = function (leaf) {
    var tmp$, tmp$_0;
    if (leaf === this.root) {
      this.root = null;
      return null;
    }
     else {
      var parent = ensureNotNull(leaf.parent);
      var prev = parent.parent;
      var sibling = parent.sibling_mb5tva$(leaf);
      if (prev != null) {
        prev.replaceChild_lb1qxj$(parent, sibling);
        sibling.parent = prev;
        this.deleteNode_0(parent);
        while (prev != null) {
          this.tmpVolume_0.set_ea4od8$(prev.volume);
          prev.volume.setMerged_hnxjto$(ensureNotNull(prev.left).volume, ensureNotNull(prev.right).volume);
          if (!((tmp$ = prev.volume) != null ? tmp$.equals(this.tmpVolume_0) : null)) {
            prev = prev.parent;
          }
           else {
            break;
          }
        }
        if (prev != null) {
          tmp$_0 = prev;
        }
         else {
          tmp$_0 = this.root;
        }
        return tmp$_0;
      }
       else {
        sibling.parent = null;
        this.root = sibling;
        this.deleteNode_0(parent);
        return this.root;
      }
    }
  };
  Dbvt.prototype.bottomUp_0 = function (leaves, indices) {
    var tmp$, tmp$_0;
    var first = indices.first;
    var last = indices.last;
    while ((last - first + 1 | 0) > 1) {
      var minSize = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
      var minIdx0 = -1;
      var minIdx1 = -1;
      tmp$ = last;
      for (var i = first; i <= tmp$; i++) {
        tmp$_0 = last;
        for (var j = i + 1 | 0; j <= tmp$_0; j++) {
          this.tmpVolume_0.setMerged_hnxjto$(leaves.get_za3lpa$(i).volume, leaves.get_za3lpa$(j).volume);
          var sz = this.sizeMetric_0(this.tmpVolume_0);
          if (sz < minSize) {
            minSize = sz;
            minIdx0 = i;
            minIdx1 = j;
          }
        }
      }
      var n0 = leaves.get_za3lpa$(minIdx0);
      var n1 = leaves.get_za3lpa$(minIdx1);
      var p = this.createNode_1(null, n0.volume, n1.volume, null);
      n0.parent = p;
      p.left = n0;
      n1.parent = p;
      p.right = n1;
      leaves.set_wxm5ur$(minIdx0, p);
      leaves.set_wxm5ur$(minIdx1, leaves.get_za3lpa$(last));
      last = last - 1 | 0;
    }
  };
  Dbvt.prototype.topDown_0 = function (leaves, indices, buThreshold) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var size = indices.last - indices.first + 1 | 0;
    if (size > 1) {
      if (size > buThreshold) {
        this.tmpVolume_0.set_ea4od8$(leaves.get_za3lpa$(indices.start).volume);
        var $this = this.tmpVolume_0;
        var wasBatchUpdate = $this.isBatchUpdate;
        $this.isBatchUpdate = true;
        var tmp$_3, tmp$_4;
        tmp$_3 = indices.start + 1 | 0;
        tmp$_4 = indices.last;
        for (var i = tmp$_3; i <= tmp$_4; i++) {
          this.tmpVolume_0.add_ea4od8$(leaves.get_za3lpa$(i).volume);
        }
        $this.isBatchUpdate = wasBatchUpdate;
        var splitCnt00 = 0;
        var splitCnt01 = 0;
        var splitCnt10 = 0;
        var splitCnt11 = 0;
        var splitCnt20 = 0;
        var splitCnt21 = 0;
        tmp$ = indices.first;
        tmp$_0 = indices.last;
        tmp$_1 = indices.step;
        for (var i_0 = tmp$; i_0 <= tmp$_0; i_0 += tmp$_1) {
          leaves.get_za3lpa$(i_0).volume.center.subtract_2gj7b4$(this.tmpVolume_0.center, this.tmpVec_0);
          if (this.tmpVec_0.times_czzhiu$(Dbvt$Companion_getInstance().AXIS_0[0]) > 0) {
            splitCnt01 = splitCnt01 + 1 | 0;
          }
           else {
            splitCnt00 = splitCnt00 + 1 | 0;
          }
          if (this.tmpVec_0.times_czzhiu$(Dbvt$Companion_getInstance().AXIS_0[1]) > 0) {
            splitCnt11 = splitCnt11 + 1 | 0;
          }
           else {
            splitCnt10 = splitCnt10 + 1 | 0;
          }
          if (this.tmpVec_0.times_czzhiu$(Dbvt$Companion_getInstance().AXIS_0[2]) > 0) {
            splitCnt21 = splitCnt21 + 1 | 0;
          }
           else {
            splitCnt20 = splitCnt20 + 1 | 0;
          }
        }
        var bestMidp = indices.last - indices.start + 1 | 0;
        var bestAxis = -1;
        if (splitCnt00 > 0 && splitCnt01 > 0) {
          var midp = abs(splitCnt00 - splitCnt01 | 0);
          if (midp < bestMidp) {
            bestMidp = midp;
            bestAxis = 0;
          }
        }
        if (splitCnt10 > 0 && splitCnt11 > 0) {
          var midp_0 = abs(splitCnt10 - splitCnt11 | 0);
          if (midp_0 < bestMidp) {
            bestMidp = midp_0;
            bestAxis = 1;
          }
        }
        if (splitCnt20 > 0 && splitCnt21 > 0) {
          var midp_1 = abs(splitCnt20 - splitCnt21 | 0);
          if (midp_1 < bestMidp) {
            bestAxis = 2;
          }
        }
        if (bestAxis >= 0) {
          tmp$_2 = this.split_0(leaves, indices, this.tmpVolume_0.center, Dbvt$Companion_getInstance().AXIS_0[bestAxis]);
        }
         else {
          tmp$_2 = ((indices.last - indices.start + 1 | 0) / 2 | 0) + 1 | 0;
        }
        var partition = tmp$_2;
        var node = this.createNode_2(this.tmpVolume_0);
        var $receiver = this.topDown_0(leaves, until(indices.start, partition), buThreshold);
        $receiver.parent = node;
        node.left = $receiver;
        var $receiver_0 = this.topDown_0(leaves, new IntRange(partition, indices.last), buThreshold);
        $receiver_0.parent = node;
        node.right = $receiver_0;
        return node;
      }
       else {
        this.bottomUp_0(leaves, indices);
        return leaves.get_za3lpa$(indices.start);
      }
    }
    return leaves.get_za3lpa$(indices.start);
  };
  Dbvt.prototype.split_0 = function (leaves, indices, origin, axis) {
    var begin = indices.start;
    var end = indices.last + 1 | 0;
    while (true) {
      while (begin !== end && this.isLeftOfAxis_0(leaves.get_za3lpa$(begin), origin, axis)) {
        begin = begin + 1 | 0;
      }
      if (begin === end) {
        break;
      }
      while (begin !== end && !this.isLeftOfAxis_0(leaves.get_za3lpa$(end - 1 | 0), origin, axis)) {
        end = end - 1 | 0;
      }
      if (begin === end) {
        break;
      }
      end = end - 1 | 0;
      var temp = leaves.get_za3lpa$(begin);
      leaves.set_wxm5ur$(begin, leaves.get_za3lpa$(end));
      leaves.set_wxm5ur$(end, temp);
      begin = begin + 1 | 0;
    }
    return begin;
  };
  Dbvt.prototype.isLeftOfAxis_0 = function (node, origin, axis) {
    return axis.x * (node.volume.center.x - origin.x) + axis.y * (node.volume.center.y - origin.y) + axis.z * (node.volume.center.z - origin.z) <= 0;
  };
  Dbvt.prototype.extractLeaves_0 = function (root, leaves) {
    if (!root.isLeaf) {
      this.extractLeaves_0(ensureNotNull(root.left), leaves);
      this.extractLeaves_0(ensureNotNull(root.right), leaves);
    }
     else {
      leaves.add_11rb$(root);
    }
  };
  Dbvt.prototype.fetchLeaves_0 = function (root, leaves, depth) {
    if (depth === void 0)
      depth = -1;
    if (!root.isLeaf && depth !== 0) {
      this.fetchLeaves_0(ensureNotNull(root.left), leaves, depth - 1 | 0);
      this.fetchLeaves_0(ensureNotNull(root.right), leaves, depth - 1 | 0);
      this.deleteNode_0(root);
    }
     else {
      leaves.add_11rb$(root);
    }
  };
  Dbvt.prototype.sizeMetric_0 = function (volume) {
    return volume.size.x * volume.size.y * volume.size.z + volume.size.x + volume.size.y + volume.size.z;
  };
  Dbvt.prototype.deleteNode_0 = function (node) {
    this.nodes_0.recycle_trkh7z$(node);
  };
  Dbvt.prototype.recurseDeleteNode_0 = function (node) {
    if (!node.isLeaf) {
      this.recurseDeleteNode_0(ensureNotNull(node.left));
      this.recurseDeleteNode_0(ensureNotNull(node.right));
    }
    if (equals(node, this.root)) {
      this.root = null;
    }
    this.deleteNode_0(node);
  };
  Dbvt.prototype.createNode_2 = function (volume) {
    var $receiver = this.nodes_0.get();
    $receiver.parent = null;
    $receiver.volume.set_ea4od8$(volume);
    $receiver.data = null;
    return $receiver;
  };
  Dbvt.prototype.createNode_0 = function (parent, volume, data) {
    var $receiver = this.nodes_0.get();
    $receiver.parent = parent;
    $receiver.volume.set_ea4od8$(volume);
    $receiver.data = data;
    return $receiver;
  };
  Dbvt.prototype.createNode_1 = function (parent, volume0, volume1, data) {
    var $receiver = this.nodes_0.get();
    $receiver.parent = parent;
    $receiver.volume.setMerged_hnxjto$(volume0, volume1);
    $receiver.data = data;
    return $receiver;
  };
  function Dbvt$DbvtNode() {
    Dbvt$DbvtNode$Companion_getInstance();
    this.parent = null;
    this.volume = new BoundingBox();
    this.data = null;
    this.left_r0omq5$_0 = null;
    this.right_homfge$_0 = null;
    this.id_8be2vx$ = Dbvt$DbvtNode$Companion_getInstance().nextId_0();
  }
  Object.defineProperty(Dbvt$DbvtNode.prototype, 'left', {
    get: function () {
      return this.left_r0omq5$_0;
    },
    set: function (left) {
      this.left_r0omq5$_0 = left;
    }
  });
  Object.defineProperty(Dbvt$DbvtNode.prototype, 'right', {
    get: function () {
      return this.right_homfge$_0;
    },
    set: function (right) {
      this.right_homfge$_0 = right;
    }
  });
  Object.defineProperty(Dbvt$DbvtNode.prototype, 'isLeaf', {
    get: function () {
      return this.left === null;
    }
  });
  Dbvt$DbvtNode.prototype.getChild_kcn2v3$ = function (i) {
    if (i === 0)
      return ensureNotNull(this.left);
    else
      return ensureNotNull(this.right);
  };
  Dbvt$DbvtNode.prototype.setChild_tw79om$ = function (i, c) {
    if (i === 0)
      this.left = c;
    else
      this.right = c;
  };
  Dbvt$DbvtNode.prototype.getIndexInParent_8be2vx$ = function () {
    if (equals(this, ensureNotNull(this.parent).left)) {
      return 0;
    }
     else {
      return 1;
    }
  };
  Dbvt$DbvtNode.prototype.replaceChild_lb1qxj$ = function (existing, new_0) {
    if (existing === this.left) {
      this.left = new_0;
    }
     else {
      this.right = new_0;
    }
  };
  Dbvt$DbvtNode.prototype.selectChild_d0340p$ = function (forVolume) {
    var tmp$;
    var lt = ensureNotNull(this.left);
    var rt = ensureNotNull(this.right);
    var x = lt.volume.min.x + lt.volume.max.x - (forVolume.min.x + forVolume.max.x);
    var dxLt = Math_0.abs(x);
    var x_0 = lt.volume.min.y + lt.volume.max.y - (forVolume.min.y + forVolume.max.y);
    var dyLt = Math_0.abs(x_0);
    var x_1 = lt.volume.min.z + lt.volume.max.z - (forVolume.min.z + forVolume.max.z);
    var dzLt = Math_0.abs(x_1);
    var dLt = dxLt + dyLt + dzLt;
    var x_2 = rt.volume.min.x + rt.volume.max.x - (forVolume.min.x + forVolume.max.x);
    var dxRt = Math_0.abs(x_2);
    var x_3 = rt.volume.min.y + rt.volume.max.y - (forVolume.min.y + forVolume.max.y);
    var dyRt = Math_0.abs(x_3);
    var x_4 = rt.volume.min.z + rt.volume.max.z - (forVolume.min.z + forVolume.max.z);
    var dzRt = Math_0.abs(x_4);
    var dRt = dxRt + dyRt + dzRt;
    if (dLt < dRt) {
      tmp$ = lt;
    }
     else {
      tmp$ = rt;
    }
    return tmp$;
  };
  Dbvt$DbvtNode.prototype.sibling_mb5tva$ = function (child) {
    var tmp$;
    if (child === this.left) {
      tmp$ = ensureNotNull(this.right);
    }
     else {
      tmp$ = ensureNotNull(this.left);
    }
    return tmp$;
  };
  function Dbvt$DbvtNode$Companion() {
    Dbvt$DbvtNode$Companion_instance = this;
    this.ID_LOCK_0 = new Any();
    this.idCnt_0 = 0;
  }
  Dbvt$DbvtNode$Companion.prototype.nextId_0 = function () {
    this.ID_LOCK_0;
    return this.idCnt_0 = this.idCnt_0 + 1 | 0, this.idCnt_0;
  };
  Dbvt$DbvtNode$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Dbvt$DbvtNode$Companion_instance = null;
  function Dbvt$DbvtNode$Companion_getInstance() {
    if (Dbvt$DbvtNode$Companion_instance === null) {
      new Dbvt$DbvtNode$Companion();
    }
    return Dbvt$DbvtNode$Companion_instance;
  }
  Dbvt$DbvtNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DbvtNode',
    interfaces: []
  };
  function Dbvt$Companion() {
    Dbvt$Companion_instance = this;
    this.AXIS_0 = [Vec3f$Companion_getInstance().X_AXIS, Vec3f$Companion_getInstance().Y_AXIS, Vec3f$Companion_getInstance().Z_AXIS];
  }
  Dbvt$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Dbvt$Companion_instance = null;
  function Dbvt$Companion_getInstance() {
    if (Dbvt$Companion_instance === null) {
      new Dbvt$Companion();
    }
    return Dbvt$Companion_instance;
  }
  function Dbvt$nodes$lambda() {
    return new Dbvt$DbvtNode();
  }
  Dbvt.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Dbvt',
    interfaces: []
  };
  function OverlappingPairCache() {
  }
  OverlappingPairCache.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OverlappingPairCache',
    interfaces: []
  };
  function Contact() {
    this.worldPosB = ArrayList_init_0();
    this.worldNormalOnB = MutableVec3f_init();
    this.restitutionCoeff = 0.0;
    this.frictionCoeff = 0.0;
    this.batchIdx = 0;
    this.contactProcessingThreshold = 0.02;
    this.bodyA_aortk4$_0 = this.bodyA_aortk4$_0;
    this.bodyB_aortj9$_0 = this.bodyB_aortj9$_0;
  }
  Object.defineProperty(Contact.prototype, 'bodyA', {
    get: function () {
      if (this.bodyA_aortk4$_0 == null)
        return throwUPAE('bodyA');
      return this.bodyA_aortk4$_0;
    },
    set: function (bodyA) {
      this.bodyA_aortk4$_0 = bodyA;
    }
  });
  Object.defineProperty(Contact.prototype, 'bodyB', {
    get: function () {
      if (this.bodyB_aortj9$_0 == null)
        return throwUPAE('bodyB');
      return this.bodyB_aortj9$_0;
    },
    set: function (bodyB) {
      this.bodyB_aortj9$_0 = bodyB;
    }
  });
  Contact.prototype.initContact_jp95gs$ = function (bodyA, bodyB) {
    this.bodyA = bodyA;
    this.bodyB = bodyB;
    this.worldNormalOnB.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.restitutionCoeff = 0.0;
    this.frictionCoeff = 1.0;
    this.batchIdx = 0;
    if (!this.worldPosB.isEmpty()) {
      this.worldPosB.clear();
    }
    return this;
  };
  Contact.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Contact',
    interfaces: []
  };
  function Contacts() {
    this.contactRecycler_0 = ObjectRecycler_init(Contacts$contactRecycler$lambda);
    this.vec4Recycler_0 = ObjectRecycler_init(Contacts$vec4Recycler$lambda);
    this.liveContacts_0 = ArrayList_init_0();
  }
  Object.defineProperty(Contacts.prototype, 'contacts', {
    get: function () {
      return this.liveContacts_0;
    }
  });
  Contacts.prototype.addNewContact_jp95gs$ = function (bodyA, bodyB) {
    var c = this.contactRecycler_0.get().initContact_jp95gs$(bodyA, bodyB);
    this.liveContacts_0.add_11rb$(c);
    return c;
  };
  Contacts.prototype.addContact_ukv0h6$ = defineInlineFunction('kool.de.fabmax.kool.modules.physics.collision.Contacts.addContact_ukv0h6$', function (bodyA, bodyB, block) {
    var c = this.addNewContact_jp95gs$(bodyA, bodyB);
    block(c);
    return c;
  });
  Contacts.prototype.newWorldPosVec_2qa7tb$ = function (pos, depth) {
    var vec4 = this.vec4Recycler_0.get();
    vec4.set_2qa7tb$(pos, depth);
    return vec4;
  };
  Contacts.prototype.clearContacts = function () {
    var tmp$;
    tmp$ = this.liveContacts_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      var tmp$_0;
      var c = this.liveContacts_0.get_za3lpa$(i);
      tmp$_0 = c.worldPosB;
      for (var j = 0; j !== tmp$_0.size; ++j) {
        this.vec4Recycler_0.recycle_trkh7z$(c.worldPosB.get_za3lpa$(j));
      }
      c.worldPosB.clear();
      this.contactRecycler_0.recycle_trkh7z$(c);
    }
    this.liveContacts_0.clear();
  };
  Contacts.prototype.dumpContacts = function () {
    var tmp$, tmp$_0;
    println_0(this.contacts.size.toString() + ' contacts:');
    tmp$ = this.contacts.iterator();
    while (tmp$.hasNext()) {
      var c = tmp$.next();
      println_0('a: ' + c.bodyA + ', b: ' + c.bodyB + ', normal = ' + c.worldNormalOnB);
      tmp$_0 = c.worldPosB.iterator();
      while (tmp$_0.hasNext()) {
        var pt = tmp$_0.next();
        println_0('  ' + pt);
      }
    }
  };
  function Contacts$contactRecycler$lambda() {
    return new Contact();
  }
  function Contacts$vec4Recycler$lambda() {
    return MutableVec4f_init();
  }
  Contacts.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Contacts',
    interfaces: []
  };
  function Dispatcher() {
  }
  Dispatcher.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Dispatcher',
    interfaces: []
  };
  function CollisionWorld() {
    this.bodies = ArrayList_init_0();
    this.gravity = new MutableVec3f(0.0, -9.81, 0.0);
    this.collisionChecker_0 = new BoxBoxCollision();
    this.solver_0 = new SequentialImpulseConstraintSolver();
    this.contacts_0 = new Contacts();
    this.realTime_0 = 0.0;
    this.simTime_0 = 0.0;
    this.timeStep_0 = 1 / 60.0;
  }
  CollisionWorld.prototype.stepSimulation_mx4ult$ = function (dt) {
    var tmp$, tmp$_0;
    this.realTime_0 += Math_0.min(dt, 0.1);
    while (this.realTime_0 - this.simTime_0 > this.timeStep_0 / 2) {
      this.simTime_0 += this.timeStep_0;
      tmp$ = this.bodies;
      for (var i = 0; i !== tmp$.size; ++i) {
        this.bodies.get_za3lpa$(i).applyGravity_kzbnk6$(this.timeStep_0, this);
        this.bodies.get_za3lpa$(i).predictIntegratedTransform_mx4ult$(this.timeStep_0);
      }
      this.broadPhase();
      tmp$_0 = this.bodies;
      for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
        this.bodies.get_za3lpa$(i_0).stepSimulation_mx4ult$(this.timeStep_0);
      }
    }
  };
  CollisionWorld.prototype.broadPhase = function () {
    var tmp$;
    tmp$ = this.bodies;
    for (var i = 0; i !== tmp$.size; ++i) {
      var tmp$_0;
      tmp$_0 = this.bodies.size;
      for (var j = i + 1 | 0; j < tmp$_0; j++) {
        if (!this.bodies.get_za3lpa$(i).isStaticOrKinematic || !this.bodies.get_za3lpa$(j).isStaticOrKinematic) {
          this.collisionChecker_0.testForCollision_yvmcey$(this.bodies.get_za3lpa$(i), this.bodies.get_za3lpa$(j), this.contacts_0);
        }
      }
    }
    this.solver_0.solveContacts_43rfs2$(this.contacts_0.contacts);
    this.contacts_0.clearContacts();
  };
  CollisionWorld.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CollisionWorld',
    interfaces: []
  };
  function ContactPoint() {
    this.positionWorldOnA = MutableVec3f_init();
    this.positionWorldOnB = MutableVec3f_init();
    this.normalWorldOnB = MutableVec3f_init();
    this.appliedImpulse = 0.0;
    this.distance = 0.0;
    this.combinedRestitution = 0.0;
    this.combinedFriction = 0.0;
    this.lateralFrictionDir1 = MutableVec3f_init();
    this.lateralFrictionDir2 = MutableVec3f_init();
    this.appliedImpulseLateral1 = 0.0;
    this.appliedImpulseLateral2 = 0.0;
    this.combinedRollingFriction = 0.0;
    this.contactMotion1 = 0.0;
    this.contactMotion2 = 0.0;
    this.contactCFM1 = 0.0;
    this.contactCFM2 = 0.0;
    this.lateralFrictionInitialized = false;
  }
  ContactPoint.prototype.initContactPoint_bqjqrj$ = function (contact, contactIndex) {
    this.appliedImpulse = 0.0;
    this.appliedImpulseLateral1 = 0.0;
    this.appliedImpulseLateral2 = 0.0;
    this.combinedFriction = contact.frictionCoeff;
    this.combinedRestitution = contact.restitutionCoeff;
    this.combinedRollingFriction = 0.0;
    this.contactCFM1 = 0.0;
    this.contactCFM2 = 0.0;
    this.contactMotion1 = 0.0;
    this.contactMotion2 = 0.0;
    this.distance = contact.worldPosB.get_za3lpa$(contactIndex).w;
    this.normalWorldOnB.set_czzhiu$(contact.worldNormalOnB).norm();
    this.normalWorldOnB.planeSpace_t87wgk$(this.lateralFrictionDir1, this.lateralFrictionDir2);
    this.lateralFrictionInitialized = true;
    contact.worldPosB.get_za3lpa$(contactIndex).getXyz_5s4mqq$(this.positionWorldOnB);
    this.positionWorldOnA.set_czzhiu$(this.normalWorldOnB).scale_mx4ult$(this.distance).add_czzhiu$(this.positionWorldOnB);
    return this;
  };
  ContactPoint.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ContactPoint',
    interfaces: []
  };
  function ContactSolverInfo() {
    ContactSolverInfo$Companion_getInstance();
    this.tau = 0.6;
    this.damping = 1.0;
    this.friction = 0.3;
    this.timeStep = 1.0 / 60.0;
    this.restitution = 0.0;
    this.maxErrorReduction = 20.0;
    this.numIterations = 10;
    this.erp = 0.2;
    this.erp2 = 0.8;
    this.globalCfm = 0.0;
    this.sor = 1.0;
    this.splitImpulse = true;
    this.splitImpulsePenetrationThreshold = -0.04;
    this.splitImpulseTurnErp = 0.1;
    this.linearSlop = 0.0;
    this.warmstartingFactor = 0.85;
    this.solverMode = 4;
    this.minimumSolverBatchSize = 128;
    this.maxGyroscopicForce = 100.0;
    this.singleAxisRollingFrictionThreshold = 1.0E30;
  }
  function ContactSolverInfo$Companion() {
    ContactSolverInfo$Companion_instance = this;
    this.SOLVER_RANDOMIZE_ORDER = 1;
    this.SOLVER_FRICTION_SEPARATE = 2;
    this.SOLVER_USE_WARMSTARTING = 4;
    this.SOLVER_USE_2_FRICTION_DIRECTIONS = 16;
    this.SOLVER_ENABLE_FRICTION_DIRECTION_CACHING = 32;
    this.SOLVER_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION = 64;
    this.SOLVER_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS = 512;
    this.SOLVER_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS = 1024;
  }
  ContactSolverInfo$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ContactSolverInfo$Companion_instance = null;
  function ContactSolverInfo$Companion_getInstance() {
    if (ContactSolverInfo$Companion_instance === null) {
      new ContactSolverInfo$Companion();
    }
    return ContactSolverInfo$Companion_instance;
  }
  ContactSolverInfo.prototype.isSolverMode_za3lpa$ = function (mode) {
    return (this.solverMode & mode) !== 0;
  };
  ContactSolverInfo.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ContactSolverInfo',
    interfaces: []
  };
  function SequentialImpulseConstraintSolver() {
    this.maxOverrideNumSolverIterations_0 = 0;
    this.infoGlobal_0 = new ContactSolverInfo();
    this.contactPointPool_0 = new ObjectPool(SequentialImpulseConstraintSolver$contactPointPool$lambda);
    this.solverBodyPool_0 = new ObjectPool(SequentialImpulseConstraintSolver$solverBodyPool$lambda);
    this.contactConstraintPool_0 = new ObjectPool(SequentialImpulseConstraintSolver$contactConstraintPool$lambda);
    this.contactFrictionConstraintPool_0 = new ObjectPool(SequentialImpulseConstraintSolver$contactFrictionConstraintPool$lambda);
    this.contactRollingConstraintPool_0 = new ObjectPool(SequentialImpulseConstraintSolver$contactRollingConstraintPool$lambda);
    this.tmpVec1_0 = MutableVec3f_init();
    this.tmpVec2_0 = MutableVec3f_init();
    this.tmpVec3_0 = MutableVec3f_init();
    this.n_0 = 0;
    this.infoGlobal_0.splitImpulse = false;
    this.infoGlobal_0.timeStep = 1.0 / 60.0;
    this.infoGlobal_0.numIterations = 4;
    this.infoGlobal_0.solverMode = this.infoGlobal_0.solverMode | 16;
  }
  SequentialImpulseConstraintSolver.prototype.solveContacts_43rfs2$ = function (contacts) {
    this.solveGroupSetup_0(contacts);
    this.solveGroupIterations_0();
    this.solveGroupFinish_0();
  };
  SequentialImpulseConstraintSolver.prototype.solveGroupSetup_0 = function (contacts) {
    this.maxOverrideNumSolverIterations_0 = 0;
    for (var i = 0; i !== contacts.size; ++i) {
      this.convertContact_0(contacts.get_za3lpa$(i));
    }
  };
  SequentialImpulseConstraintSolver.prototype.convertContact_0 = function (contact) {
    var tmp$;
    var $receiver = contact.bodyA.mass;
    var eps;
    eps = package$math.FUZZY_EQ_F;
    var tmp$_0 = Math_0.abs($receiver) <= eps;
    if (tmp$_0) {
      var $receiver_0 = contact.bodyB.mass;
      var eps_0;
      eps_0 = package$math.FUZZY_EQ_F;
      tmp$_0 = Math_0.abs($receiver_0) <= eps_0;
    }
    if (tmp$_0) {
      return;
    }
    var solverBodyA = this.solverBodyPool_0.get().initSolverBody_xkjwdy$(contact.bodyA);
    var solverBodyB = this.solverBodyPool_0.get().initSolverBody_xkjwdy$(contact.bodyB);
    var rollingFrictionCnt = 1;
    tmp$ = contact.worldPosB;
    for (var i = 0; i !== tmp$.size; ++i) {
      var cp = this.contactPointPool_0.get().initContactPoint_bqjqrj$(contact, i);
      if (cp.distance < contact.contactProcessingThreshold) {
        var contactConstraint = this.contactConstraintPool_0.get();
        contactConstraint.setupContactConstraint_8cr739$(cp, solverBodyA, solverBodyB, this.infoGlobal_0);
        if (cp.combinedRollingFriction > 0.0 && rollingFrictionCnt > 0) {
          rollingFrictionCnt = rollingFrictionCnt - 1 | 0;
          solverBodyB.angularVelocity.subtract_2gj7b4$(solverBodyA.angularVelocity, this.tmpVec1_0);
          if (this.tmpVec1_0.length() > this.infoGlobal_0.singleAxisRollingFrictionThreshold) {
            this.tmpVec1_0.norm();
            this.addRollingFrictionConstraint_0(this.tmpVec1_0, contactConstraint);
          }
           else {
            this.addRollingFrictionConstraint_0(this.tmpVec1_0, contactConstraint);
            cp.normalWorldOnB.planeSpace_t87wgk$(this.tmpVec1_0, this.tmpVec2_0);
            if (this.tmpVec1_0.length() > 0.001) {
              this.addRollingFrictionConstraint_0(this.tmpVec1_0, contactConstraint);
            }
            if (this.tmpVec2_0.length() > 0.001) {
              this.addRollingFrictionConstraint_0(this.tmpVec2_0, contactConstraint);
            }
          }
        }
        if (!this.infoGlobal_0.isSolverMode_za3lpa$(32) || !cp.lateralFrictionInitialized) {
          cp.lateralFrictionDir1.set_czzhiu$(cp.normalWorldOnB).scale_mx4ult$(-contactConstraint.relVelocity).add_czzhiu$(contactConstraint.velocity);
          var latRelVel = cp.lateralFrictionDir1.sqrLength();
          if (!this.infoGlobal_0.isSolverMode_za3lpa$(64) && latRelVel > FLT_EPSILON) {
            cp.lateralFrictionDir1.scale_mx4ult$(1.0 / Math_0.sqrt(latRelVel));
            if (this.infoGlobal_0.isSolverMode_za3lpa$(16)) {
              cp.lateralFrictionDir1.cross_2gj7b4$(cp.normalWorldOnB, cp.lateralFrictionDir2);
              cp.lateralFrictionDir2.norm();
              contactConstraint.frictionConstraint2 = this.addFrictionConstraint_0(cp.lateralFrictionDir2, contactConstraint);
            }
            contactConstraint.frictionConstraint1 = this.addFrictionConstraint_0(cp.lateralFrictionDir1, contactConstraint);
          }
           else {
            cp.normalWorldOnB.planeSpace_t87wgk$(cp.lateralFrictionDir1, cp.lateralFrictionDir2);
            if (this.infoGlobal_0.isSolverMode_za3lpa$(16)) {
              contactConstraint.frictionConstraint2 = this.addFrictionConstraint_0(cp.lateralFrictionDir2, contactConstraint);
            }
            contactConstraint.frictionConstraint1 = this.addFrictionConstraint_0(cp.lateralFrictionDir1, contactConstraint);
            if (this.infoGlobal_0.isSolverMode_za3lpa$(16) && this.infoGlobal_0.isSolverMode_za3lpa$(64)) {
              cp.lateralFrictionInitialized = true;
            }
          }
        }
         else {
          contactConstraint.frictionConstraint1 = this.addFrictionConstraint_0(cp.lateralFrictionDir1, contactConstraint);
          if (this.infoGlobal_0.isSolverMode_za3lpa$(16)) {
            contactConstraint.frictionConstraint2 = this.addFrictionConstraint_0(cp.lateralFrictionDir2, contactConstraint);
          }
          this.setFrictionConstraintImpulse_0(contactConstraint);
        }
      }
    }
  };
  SequentialImpulseConstraintSolver.prototype.addFrictionConstraint_0 = function (normalAxis, contactConstraint, desiredVelocity, cfmSlip) {
    if (desiredVelocity === void 0)
      desiredVelocity = 0.0;
    if (cfmSlip === void 0)
      cfmSlip = 0.0;
    var frictionConstraint = this.contactFrictionConstraintPool_0.get();
    frictionConstraint.contactConstraint = contactConstraint;
    frictionConstraint.setupFrictionConstraint_5uhjh0$(normalAxis, contactConstraint, desiredVelocity, cfmSlip);
    return frictionConstraint;
  };
  SequentialImpulseConstraintSolver.prototype.addRollingFrictionConstraint_0 = function (normalAxis, contactConstraint, desiredVelocity, cfmSlip) {
    if (desiredVelocity === void 0)
      desiredVelocity = 0.0;
    if (cfmSlip === void 0)
      cfmSlip = 0.0;
    var frictionConstraint = this.contactRollingConstraintPool_0.get();
    frictionConstraint.contactConstraint = contactConstraint;
    frictionConstraint.setupRollingFrictionConstraint_5uhjh0$(normalAxis, contactConstraint, desiredVelocity, cfmSlip);
    return frictionConstraint;
  };
  SequentialImpulseConstraintSolver.prototype.setFrictionConstraintImpulse_0 = function (contactConstraint) {
    var bodyA = contactConstraint.solverBodyA;
    var bodyB = contactConstraint.solverBodyB;
    var cp = contactConstraint.originalContactPoint;
    var frictionConstraint1 = ensureNotNull(contactConstraint.frictionConstraint1);
    if (this.infoGlobal_0.isSolverMode_za3lpa$(4)) {
      frictionConstraint1.appliedImpulse = cp.appliedImpulseLateral1 * this.infoGlobal_0.warmstartingFactor;
      if (bodyA.originalBody.invMass !== 0.0) {
        bodyA.internalApplyImpulse_lqfte8$(frictionConstraint1.contactNormal.mul_2gj7b4$(bodyA.invMass, this.tmpVec1_0), frictionConstraint1.angularComponentA, frictionConstraint1.appliedImpulse);
      }
      if (bodyB.originalBody.invMass !== 0.0) {
        bodyB.internalApplyImpulse_lqfte8$(frictionConstraint1.contactNormal.mul_2gj7b4$(bodyB.invMass, this.tmpVec1_0), frictionConstraint1.angularComponentB.scale_749b8l$(-1.0, this.tmpVec3_0), -frictionConstraint1.appliedImpulse);
      }
    }
     else {
      frictionConstraint1.appliedImpulse = 0.0;
    }
    if (this.infoGlobal_0.isSolverMode_za3lpa$(16)) {
      var frictionConstraint2 = ensureNotNull(contactConstraint.frictionConstraint2);
      if (this.infoGlobal_0.isSolverMode_za3lpa$(4)) {
        frictionConstraint2.appliedImpulse = cp.appliedImpulseLateral2 * this.infoGlobal_0.warmstartingFactor;
        if (bodyA.originalBody.invMass !== 0.0) {
          bodyA.internalApplyImpulse_lqfte8$(frictionConstraint2.contactNormal.mul_2gj7b4$(bodyA.invMass, this.tmpVec1_0), frictionConstraint2.angularComponentA, frictionConstraint2.appliedImpulse);
        }
        if (bodyB.originalBody.invMass !== 0.0) {
          bodyB.internalApplyImpulse_lqfte8$(frictionConstraint2.contactNormal.mul_2gj7b4$(bodyB.invMass, this.tmpVec1_0), frictionConstraint2.angularComponentB.scale_749b8l$(-1.0, this.tmpVec3_0), -frictionConstraint2.appliedImpulse);
        }
      }
       else {
        frictionConstraint2.appliedImpulse = 0.0;
      }
    }
  };
  SequentialImpulseConstraintSolver.prototype.solveGroupIterations_0 = function () {
    this.solveGroupSplitImpulseIterations_0();
    var a = this.maxOverrideNumSolverIterations_0;
    var b = this.infoGlobal_0.numIterations;
    var maxIterations = Math_0.max(a, b);
    for (var iteration = 0; iteration < maxIterations; iteration++) {
      this.solveSingleIteration_0(iteration);
    }
  };
  SequentialImpulseConstraintSolver.prototype.solveGroupSplitImpulseIterations_0 = function () {
    var tmp$, tmp$_0;
    if (this.infoGlobal_0.splitImpulse) {
      tmp$ = this.infoGlobal_0.numIterations;
      for (var iteration = 0; iteration < tmp$; iteration++) {
        tmp$_0 = this.contactConstraintPool_0.size;
        for (var i = 0; i < tmp$_0; i++) {
          this.resolveSplitPenetrationImpulse_0(this.contactConstraintPool_0.get_za3lpa$(i));
        }
      }
    }
  };
  SequentialImpulseConstraintSolver.prototype.solveSingleIteration_0 = function (iteration) {
    var tmp$, tmp$_0, tmp$_1;
    if (iteration < this.infoGlobal_0.numIterations) {
      tmp$ = this.contactConstraintPool_0.size;
      for (var j = 0; j < tmp$; j++) {
        this.resolveSingleConstraintRowLowerLimit_0(this.contactConstraintPool_0.get_za3lpa$(j));
      }
      tmp$_0 = this.contactFrictionConstraintPool_0.size;
      for (var j_0 = 0; j_0 < tmp$_0; j_0++) {
        var constraint = this.contactFrictionConstraintPool_0.get_za3lpa$(j_0);
        var totalImpulse = constraint.contactConstraint.appliedImpulse;
        if (totalImpulse > 0) {
          constraint.lowerLimit = constraint.friction * -totalImpulse;
          constraint.upperLimit = constraint.friction * totalImpulse;
          this.resolveSingleConstraintRowGeneric_0(constraint);
        }
      }
      tmp$_1 = this.contactRollingConstraintPool_0.size;
      for (var j_1 = 0; j_1 < tmp$_1; j_1++) {
        var constraint_0 = this.contactFrictionConstraintPool_0.get_za3lpa$(j_1);
        var totalImpulse_0 = constraint_0.contactConstraint.appliedImpulse;
        if (totalImpulse_0 > 0) {
          var rollingFrictionMagnitude = constraint_0.friction * totalImpulse_0;
          if (rollingFrictionMagnitude > constraint_0.friction) {
            rollingFrictionMagnitude = constraint_0.friction;
          }
          constraint_0.lowerLimit = -rollingFrictionMagnitude;
          constraint_0.upperLimit = rollingFrictionMagnitude;
          this.resolveSingleConstraintRowGeneric_0(constraint_0);
        }
      }
    }
  };
  SequentialImpulseConstraintSolver.prototype.resolveSingleConstraintRowLowerLimit_0 = function (contConst) {
    var tmp$;
    var bodyA = contConst.solverBodyA;
    var bodyB = contConst.solverBodyB;
    var deltaImpulse = contConst.rhs - contConst.appliedImpulse * contConst.cfm;
    var deltaVelADotn = contConst.contactNormal.times_czzhiu$(bodyA.deltaLinearVelocity) + contConst.relPosACrossNormal.times_czzhiu$(bodyA.deltaAngularVelocity);
    var deltaVelBDotn = -contConst.contactNormal.times_czzhiu$(bodyB.deltaLinearVelocity) + contConst.relPosBCrossNormal.times_czzhiu$(bodyB.deltaAngularVelocity);
    deltaImpulse -= deltaVelADotn * contConst.jacDiagABInv;
    deltaImpulse -= deltaVelBDotn * contConst.jacDiagABInv;
    var sum = contConst.appliedImpulse + deltaImpulse;
    if (sum < contConst.lowerLimit) {
      deltaImpulse = contConst.lowerLimit - contConst.appliedImpulse;
      tmp$ = contConst.lowerLimit;
    }
     else
      tmp$ = sum;
    contConst.appliedImpulse = tmp$;
    bodyA.internalApplyImpulse_lqfte8$(this.tmpVec1_0.set_czzhiu$(contConst.contactNormal).mul_czzhiu$(bodyA.invMass), contConst.angularComponentA, deltaImpulse);
    bodyB.internalApplyImpulse_lqfte8$(this.tmpVec1_0.set_czzhiu$(contConst.contactNormal).scale_mx4ult$(-1.0).mul_czzhiu$(bodyB.invMass), contConst.angularComponentB, deltaImpulse);
  };
  SequentialImpulseConstraintSolver.prototype.resolveSingleConstraintRowGeneric_0 = function (contConst) {
    var tmp$;
    var bodyA = contConst.solverBodyA;
    var bodyB = contConst.solverBodyB;
    var deltaImpulse = contConst.rhs - contConst.appliedImpulse * contConst.cfm;
    var deltaVelADotn = contConst.contactNormal.times_czzhiu$(bodyA.deltaLinearVelocity) + contConst.relPosACrossNormal.times_czzhiu$(bodyA.deltaAngularVelocity);
    var deltaVelBDotn = -contConst.contactNormal.times_czzhiu$(bodyB.deltaLinearVelocity) + contConst.relPosBCrossNormal.times_czzhiu$(bodyB.deltaAngularVelocity);
    deltaImpulse -= deltaVelADotn * contConst.jacDiagABInv;
    deltaImpulse -= deltaVelBDotn * contConst.jacDiagABInv;
    var sum = contConst.appliedImpulse + deltaImpulse;
    if (sum < contConst.lowerLimit) {
      deltaImpulse = contConst.lowerLimit - contConst.appliedImpulse;
      tmp$ = contConst.lowerLimit;
    }
     else if (sum > contConst.upperLimit) {
      deltaImpulse = contConst.upperLimit - contConst.appliedImpulse;
      tmp$ = contConst.upperLimit;
    }
     else
      tmp$ = sum;
    contConst.appliedImpulse = tmp$;
    bodyA.internalApplyImpulse_lqfte8$(this.tmpVec1_0.set_czzhiu$(contConst.contactNormal).mul_czzhiu$(bodyA.invMass), contConst.angularComponentA, deltaImpulse);
    bodyB.internalApplyImpulse_lqfte8$(this.tmpVec1_0.set_czzhiu$(contConst.contactNormal).scale_mx4ult$(-1.0).mul_czzhiu$(bodyB.invMass), contConst.angularComponentB, deltaImpulse);
  };
  SequentialImpulseConstraintSolver.prototype.resolveSplitPenetrationImpulse_0 = function (contConst) {
    var tmp$;
    if (contConst.rhsPenetration !== 0.0) {
      var bodyA = contConst.solverBodyA;
      var bodyB = contConst.solverBodyB;
      var deltaImpulse = contConst.rhsPenetration - contConst.appliedPushImpulse * contConst.cfm;
      var deltaVelADotn = contConst.contactNormal.times_czzhiu$(bodyA.pushVelocity) + contConst.relPosACrossNormal.times_czzhiu$(bodyA.turnVelocity);
      var deltaVelBDotn = -contConst.contactNormal.times_czzhiu$(bodyB.pushVelocity) + contConst.relPosBCrossNormal.times_czzhiu$(bodyB.turnVelocity);
      deltaImpulse -= deltaVelADotn * contConst.jacDiagABInv;
      deltaImpulse -= deltaVelBDotn * contConst.jacDiagABInv;
      var sum = contConst.appliedPushImpulse + deltaImpulse;
      if (sum < contConst.lowerLimit) {
        deltaImpulse = contConst.lowerLimit - contConst.appliedPushImpulse;
        tmp$ = contConst.lowerLimit;
      }
       else
        tmp$ = sum;
      contConst.appliedPushImpulse = tmp$;
      bodyA.internalApplyPushImpulse_lqfte8$(this.tmpVec1_0.set_czzhiu$(contConst.contactNormal).mul_czzhiu$(bodyA.invMass), contConst.angularComponentA, deltaImpulse);
      bodyB.internalApplyPushImpulse_lqfte8$(this.tmpVec1_0.set_czzhiu$(contConst.contactNormal).scale_mx4ult$(-1.0).mul_czzhiu$(bodyB.invMass), contConst.angularComponentB, deltaImpulse);
    }
  };
  SequentialImpulseConstraintSolver.prototype.solveGroupFinish_0 = function () {
    var tmp$, tmp$_0;
    if (this.infoGlobal_0.isSolverMode_za3lpa$(4)) {
      tmp$ = this.contactConstraintPool_0.size;
      for (var i = 0; i < tmp$; i++) {
        var constraint = this.contactConstraintPool_0.get_za3lpa$(i);
        var cp = constraint.originalContactPoint;
        cp.appliedImpulse = constraint.appliedImpulse;
        cp.appliedImpulseLateral1 = ensureNotNull(constraint.frictionConstraint1).appliedImpulse;
        if (this.infoGlobal_0.isSolverMode_za3lpa$(16)) {
          cp.appliedImpulseLateral2 = ensureNotNull(constraint.frictionConstraint2).appliedImpulse;
        }
      }
    }
    tmp$_0 = this.solverBodyPool_0.size;
    for (var i_0 = 0; i_0 < tmp$_0; i_0++) {
      var solverBody = this.solverBodyPool_0.get_za3lpa$(i_0);
      var body = solverBody.originalBody;
      if (body.invMass !== 0.0) {
        if (this.infoGlobal_0.splitImpulse) {
          solverBody.writebackVelocityAndTransform_dleff0$(this.infoGlobal_0.timeStep, this.infoGlobal_0.splitImpulseTurnErp);
          body.worldTransform.set_d4zu6j$(solverBody.worldTransform);
        }
         else {
          solverBody.writebackVelocity();
        }
        body.velocity.set_czzhiu$(solverBody.linearVelocity);
        body.angularVelocity.set_czzhiu$(solverBody.angularVelocity);
      }
    }
    this.contactPointPool_0.recycleAll();
    this.solverBodyPool_0.recycleAll();
    this.contactConstraintPool_0.recycleAll();
    this.contactFrictionConstraintPool_0.recycleAll();
    this.contactRollingConstraintPool_0.recycleAll();
  };
  function SequentialImpulseConstraintSolver$contactPointPool$lambda() {
    return new ContactPoint();
  }
  function SequentialImpulseConstraintSolver$solverBodyPool$lambda() {
    return new SolverBody();
  }
  function SequentialImpulseConstraintSolver$contactConstraintPool$lambda() {
    return new ContactConstraint();
  }
  function SequentialImpulseConstraintSolver$contactFrictionConstraintPool$lambda() {
    return new FrictionConstraint();
  }
  function SequentialImpulseConstraintSolver$contactRollingConstraintPool$lambda() {
    return new RollingFrictionConstraint();
  }
  SequentialImpulseConstraintSolver.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SequentialImpulseConstraintSolver',
    interfaces: []
  };
  function SolverBody() {
    SolverBody$Companion_getInstance();
    this.worldTransform = new Mat4f();
    this.deltaLinearVelocity = MutableVec3f_init();
    this.deltaAngularVelocity = MutableVec3f_init();
    this.angularFactor = MutableVec3f_init();
    this.linearFactor = MutableVec3f_init();
    this.invMass = MutableVec3f_init();
    this.pushVelocity = MutableVec3f_init();
    this.turnVelocity = MutableVec3f_init();
    this.linearVelocity = MutableVec3f_init();
    this.angularVelocity = MutableVec3f_init();
    this.originalBody_7vi7md$_0 = this.originalBody_7vi7md$_0;
    this.tmpVec1_0 = MutableVec3f_init();
    this.tmpVec2_0 = MutableVec3f_init();
    this.tmpVec3_0 = MutableVec3f_init();
    this.tmpQuat1_0 = MutableVec4f_init();
    this.tmpQuat2_0 = MutableVec4f_init();
  }
  Object.defineProperty(SolverBody.prototype, 'originalBody', {
    get: function () {
      if (this.originalBody_7vi7md$_0 == null)
        return throwUPAE('originalBody');
      return this.originalBody_7vi7md$_0;
    },
    set: function (originalBody) {
      this.originalBody_7vi7md$_0 = originalBody;
    }
  });
  SolverBody.prototype.initSolverBody_xkjwdy$ = function (originalBody) {
    this.originalBody = originalBody;
    this.deltaLinearVelocity.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.deltaAngularVelocity.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.pushVelocity.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.turnVelocity.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.worldTransform.set_d4zu6j$(originalBody.worldTransform);
    this.invMass.set_y2kzbl$(originalBody.invMass, originalBody.invMass, originalBody.invMass);
    this.angularFactor.set_y2kzbl$(1.0, 1.0, 1.0);
    this.linearFactor.set_y2kzbl$(1.0, 1.0, 1.0);
    this.linearVelocity.set_czzhiu$(originalBody.velocity);
    this.angularVelocity.set_czzhiu$(originalBody.angularVelocity);
    return this;
  };
  SolverBody.prototype.internalApplyImpulse_lqfte8$ = function (linearComponent, angularComponent, impulseMagnitude) {
    this.deltaLinearVelocity.add_czzhiu$(this.tmpVec1_0.set_czzhiu$(linearComponent).scale_mx4ult$(impulseMagnitude).mul_czzhiu$(this.linearFactor));
    this.deltaAngularVelocity.add_czzhiu$(this.tmpVec1_0.set_czzhiu$(angularComponent).scale_mx4ult$(impulseMagnitude).mul_czzhiu$(this.angularFactor));
  };
  SolverBody.prototype.internalApplyPushImpulse_lqfte8$ = function (linearComponent, angularComponent, impulseMagnitude) {
    this.pushVelocity.add_czzhiu$(this.tmpVec1_0.set_czzhiu$(linearComponent).scale_mx4ult$(impulseMagnitude).mul_czzhiu$(this.linearFactor));
    this.turnVelocity.add_czzhiu$(this.tmpVec1_0.set_czzhiu$(angularComponent).scale_mx4ult$(impulseMagnitude).mul_czzhiu$(this.angularFactor));
  };
  SolverBody.prototype.writebackVelocity = function () {
    this.linearVelocity.add_czzhiu$(this.deltaLinearVelocity);
    this.angularVelocity.add_czzhiu$(this.deltaAngularVelocity);
  };
  SolverBody.prototype.writebackVelocityAndTransform_dleff0$ = function (timeStep, splitImpulseTurnErp) {
    var tmp$, tmp$_0;
    this.linearVelocity.add_czzhiu$(this.deltaLinearVelocity);
    this.angularVelocity.add_czzhiu$(this.deltaAngularVelocity);
    if (!((tmp$ = this.pushVelocity) != null ? tmp$.equals(Vec3f$Companion_getInstance().ZERO) : null) || !((tmp$_0 = this.turnVelocity) != null ? tmp$_0.equals(Vec3f$Companion_getInstance().ZERO) : null)) {
      this.tmpVec3_0.set_czzhiu$(this.turnVelocity).scale_mx4ult$(splitImpulseTurnErp);
      this.integrateTransform_0(this.pushVelocity, this.tmpVec3_0, timeStep);
    }
  };
  SolverBody.prototype.integrateTransform_0 = function (linVel, angVel, timeStep) {
    this.worldTransform.getOrigin_5s4mqq$(this.tmpVec1_0).add_czzhiu$(this.tmpVec2_0.set_czzhiu$(linVel).scale_mx4ult$(timeStep));
    var oriX = this.tmpVec1_0.x;
    var oriY = this.tmpVec1_0.y;
    var oriZ = this.tmpVec1_0.z;
    var fAngle = angVel.length();
    if (fAngle * timeStep > SolverBody$Companion_getInstance().ANGULAR_MOTION_THRESHOLD_0) {
      fAngle = SolverBody$Companion_getInstance().ANGULAR_MOTION_THRESHOLD_0 / timeStep;
    }
    if (fAngle < 0.001) {
      this.tmpVec1_0.set_czzhiu$(angVel).scale_mx4ult$(0.5 * timeStep - timeStep * timeStep * timeStep * 0.020833334 * fAngle * fAngle);
    }
     else {
      var tmp$ = this.tmpVec1_0.set_czzhiu$(angVel);
      var x = 0.5 * fAngle * timeStep;
      tmp$.scale_mx4ult$(Math_0.sin(x) / fAngle);
    }
    var tmp$_0 = this.tmpQuat1_0;
    var tmp$_1 = this.tmpVec1_0;
    var x_0 = fAngle * timeStep * 0.5;
    tmp$_0.set_2qa7tb$(tmp$_1, Math_0.cos(x_0));
    this.worldTransform.getRotation_5s4mpv$(this.tmpQuat2_0);
    this.tmpQuat1_0.quatProduct_czzhhz$(this.tmpQuat2_0).norm();
    this.worldTransform.setRotate_czzhhz$(this.tmpQuat1_0);
    this.worldTransform.set_n0b4r3$(0, 3, oriX);
    this.worldTransform.set_n0b4r3$(1, 3, oriY);
    this.worldTransform.set_n0b4r3$(2, 3, oriZ);
  };
  function SolverBody$Companion() {
    SolverBody$Companion_instance = this;
    this.ANGULAR_MOTION_THRESHOLD_0 = math.PI / 4.0;
  }
  SolverBody$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SolverBody$Companion_instance = null;
  function SolverBody$Companion_getInstance() {
    if (SolverBody$Companion_instance === null) {
      new SolverBody$Companion();
    }
    return SolverBody$Companion_instance;
  }
  SolverBody.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SolverBody',
    interfaces: []
  };
  function SolverConstraint() {
    this.solverBodyA_6k6b5x$_0 = this.solverBodyA_6k6b5x$_0;
    this.solverBodyB_6k6b6s$_0 = this.solverBodyB_6k6b6s$_0;
    this.contactNormal = MutableVec3f_init();
    this.relPosACrossNormal = MutableVec3f_init();
    this.relPosBCrossNormal = MutableVec3f_init();
    this.angularComponentA = MutableVec3f_init();
    this.angularComponentB = MutableVec3f_init();
    this.appliedPushImpulse = 0.0;
    this.appliedImpulse = 0.0;
    this.friction = 0.0;
    this.jacDiagABInv = 0.0;
    this.rhs = 0.0;
    this.cfm = 0.0;
    this.lowerLimit = 0.0;
    this.upperLimit = 0.0;
    this.tmpVec1 = MutableVec3f_init();
    this.tmpVec2 = MutableVec3f_init();
  }
  Object.defineProperty(SolverConstraint.prototype, 'solverBodyA', {
    get: function () {
      if (this.solverBodyA_6k6b5x$_0 == null)
        return throwUPAE('solverBodyA');
      return this.solverBodyA_6k6b5x$_0;
    },
    set: function (solverBodyA) {
      this.solverBodyA_6k6b5x$_0 = solverBodyA;
    }
  });
  Object.defineProperty(SolverConstraint.prototype, 'solverBodyB', {
    get: function () {
      if (this.solverBodyB_6k6b6s$_0 == null)
        return throwUPAE('solverBodyB');
      return this.solverBodyB_6k6b6s$_0;
    },
    set: function (solverBodyB) {
      this.solverBodyB_6k6b6s$_0 = solverBodyB;
    }
  });
  SolverConstraint.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SolverConstraint',
    interfaces: []
  };
  function ContactConstraint() {
    SolverConstraint.call(this);
    this.frictionConstraint1 = null;
    this.frictionConstraint2 = null;
    this.originalContactPoint_wbybi7$_0 = this.originalContactPoint_wbybi7$_0;
    this.relPosA = MutableVec3f_init();
    this.relPosB = MutableVec3f_init();
    this.velocity = MutableVec3f_init();
    this.relaxation = 0.0;
    this.relVelocity = 0.0;
    this.rhsPenetration = 0.0;
  }
  Object.defineProperty(ContactConstraint.prototype, 'originalContactPoint', {
    get: function () {
      if (this.originalContactPoint_wbybi7$_0 == null)
        return throwUPAE('originalContactPoint');
      return this.originalContactPoint_wbybi7$_0;
    },
    set: function (originalContactPoint) {
      this.originalContactPoint_wbybi7$_0 = originalContactPoint;
    }
  });
  ContactConstraint.prototype.setupContactConstraint_8cr739$ = function (cp, bodyA, bodyB, solverInfo) {
    this.originalContactPoint = cp;
    this.solverBodyA = bodyA;
    this.solverBodyB = bodyB;
    this.relaxation = 1.0;
    var rbA = bodyA.originalBody;
    var rbB = bodyB.originalBody;
    this.relPosA.set_czzhiu$(cp.positionWorldOnA).subtract_czzhiu$(bodyA.worldTransform.getOrigin_5s4mqq$(this.tmpVec1));
    this.relPosB.set_czzhiu$(cp.positionWorldOnB).subtract_czzhiu$(bodyB.worldTransform.getOrigin_5s4mqq$(this.tmpVec1));
    this.relPosA.cross_2gj7b4$(cp.normalWorldOnB, this.relPosACrossNormal);
    this.angularComponentA.set_czzhiu$(rbA.invInertiaTensor.transform_2gj7b4$(this.relPosACrossNormal, this.tmpVec1));
    cp.normalWorldOnB.cross_2gj7b4$(this.relPosB, this.relPosBCrossNormal);
    this.angularComponentB.set_czzhiu$(rbB.invInertiaTensor.transform_2gj7b4$(this.relPosBCrossNormal, this.tmpVec1));
    var denomA = rbA.invMass + cp.normalWorldOnB.times_czzhiu$(this.angularComponentA.cross_2gj7b4$(this.relPosA, this.tmpVec1));
    var denomB = rbB.invMass + cp.normalWorldOnB.times_czzhiu$(this.relPosB.cross_2gj7b4$(this.angularComponentB, this.tmpVec1));
    var scaledDenom = this.relaxation / (denomA + denomB);
    this.jacDiagABInv = scaledDenom;
    this.contactNormal.set_czzhiu$(cp.normalWorldOnB);
    var penetration = cp.distance + solverInfo.linearSlop;
    rbA.getVelocityInLocalPoint_2gj7b4$(this.relPosA, this.tmpVec1);
    rbB.getVelocityInLocalPoint_2gj7b4$(this.relPosB, this.tmpVec2);
    this.tmpVec1.subtract_2gj7b4$(this.tmpVec2, this.velocity);
    this.relVelocity = this.contactNormal.times_czzhiu$(this.velocity);
    this.friction = cp.combinedFriction;
    var restitution = this.restitutionCurve_0(this.relVelocity, cp.combinedRestitution);
    if (restitution < 0.0) {
      restitution = 0.0;
    }
    if (solverInfo.isSolverMode_za3lpa$(4)) {
      this.appliedImpulse = cp.appliedImpulse * solverInfo.warmstartingFactor;
      this.tmpVec1.set_czzhiu$(this.contactNormal).mul_czzhiu$(bodyA.invMass);
      bodyA.internalApplyImpulse_lqfte8$(this.tmpVec1, this.angularComponentA, this.appliedImpulse);
      this.tmpVec1.set_czzhiu$(this.contactNormal).mul_czzhiu$(bodyB.invMass);
      bodyB.internalApplyImpulse_lqfte8$(this.tmpVec1, this.angularComponentB, -this.appliedImpulse);
    }
     else {
      this.appliedImpulse = 0.0;
    }
    this.appliedPushImpulse = 0.0;
    var velADotN = this.contactNormal.times_czzhiu$(bodyA.linearVelocity) + this.relPosACrossNormal.times_czzhiu$(bodyA.angularVelocity);
    var velBDotN = -this.contactNormal.times_czzhiu$(bodyB.linearVelocity) + this.relPosBCrossNormal.times_czzhiu$(bodyB.angularVelocity);
    var relVel = velADotN + velBDotN;
    var positionalError = 0.0;
    var velocityError = restitution - relVel;
    var erp = solverInfo.erp;
    if (!solverInfo.splitImpulse || penetration > solverInfo.splitImpulsePenetrationThreshold) {
      erp = solverInfo.erp2;
    }
    if (penetration > 0) {
      velocityError -= penetration / solverInfo.timeStep;
    }
     else {
      positionalError = -penetration * erp / solverInfo.timeStep;
    }
    var penetrationImpulse = positionalError * scaledDenom;
    var velocityImpulse = velocityError * scaledDenom;
    if (!solverInfo.splitImpulse || penetration > solverInfo.splitImpulsePenetrationThreshold) {
      this.rhs = penetrationImpulse + velocityImpulse;
      this.rhsPenetration = 0.0;
    }
     else {
      this.rhs = velocityImpulse;
      this.rhsPenetration = penetrationImpulse;
    }
    this.cfm = 0.0;
    this.lowerLimit = 0.0;
    this.upperLimit = 1.0E10;
  };
  ContactConstraint.prototype.restitutionCurve_0 = function (relVel, restitution) {
    return restitution * -relVel;
  };
  ContactConstraint.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ContactConstraint',
    interfaces: [SolverConstraint]
  };
  function FrictionConstraint() {
    SolverConstraint.call(this);
    this.contactConstraint_vgyjqr$_0 = this.contactConstraint_vgyjqr$_0;
  }
  Object.defineProperty(FrictionConstraint.prototype, 'contactConstraint', {
    get: function () {
      if (this.contactConstraint_vgyjqr$_0 == null)
        return throwUPAE('contactConstraint');
      return this.contactConstraint_vgyjqr$_0;
    },
    set: function (contactConstraint) {
      this.contactConstraint_vgyjqr$_0 = contactConstraint;
    }
  });
  FrictionConstraint.prototype.setupFrictionConstraint_5uhjh0$ = function (normalAxis, contactConstraint, desiredVelocity, cfmSlip) {
    this.contactConstraint = contactConstraint;
    this.contactNormal.set_czzhiu$(normalAxis);
    this.solverBodyA = contactConstraint.solverBodyA;
    this.solverBodyB = contactConstraint.solverBodyB;
    this.friction = contactConstraint.originalContactPoint.combinedFriction;
    this.appliedImpulse = 0.0;
    this.appliedPushImpulse = 0.0;
    var bodyA = this.solverBodyA;
    var bodyB = this.solverBodyB;
    var rbA = bodyA.originalBody;
    var rbB = bodyB.originalBody;
    contactConstraint.relPosA.cross_2gj7b4$(this.contactNormal, this.relPosACrossNormal);
    this.angularComponentA.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    rbA.invInertiaTensor.transform_2gj7b4$(this.relPosACrossNormal, this.angularComponentA);
    this.contactNormal.cross_2gj7b4$(contactConstraint.relPosB, this.relPosBCrossNormal);
    this.angularComponentB.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    rbB.invInertiaTensor.transform_2gj7b4$(this.relPosBCrossNormal, this.angularComponentB);
    var denomA = rbA.invMass + normalAxis.times_czzhiu$(this.angularComponentA.cross_2gj7b4$(contactConstraint.relPosA, this.tmpVec1));
    var denomB = rbB.invMass + normalAxis.times_czzhiu$(contactConstraint.relPosB.cross_2gj7b4$(this.angularComponentB, this.tmpVec1));
    this.jacDiagABInv = contactConstraint.relaxation / (denomA + denomB);
    var velADotN = this.contactNormal.times_czzhiu$(bodyA.linearVelocity) + this.relPosACrossNormal.times_czzhiu$(bodyA.angularVelocity);
    var velBDotN = -this.contactNormal.times_czzhiu$(bodyB.linearVelocity) + this.relPosBCrossNormal.times_czzhiu$(bodyB.angularVelocity);
    var relVel = velADotN + velBDotN;
    var velocityError = desiredVelocity - relVel;
    var velocityImpulse = velocityError * this.jacDiagABInv;
    this.rhs = velocityImpulse;
    this.cfm = cfmSlip;
    this.lowerLimit = 0.0;
    this.upperLimit = 1.0E10;
  };
  FrictionConstraint.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FrictionConstraint',
    interfaces: [SolverConstraint]
  };
  function RollingFrictionConstraint() {
    SolverConstraint.call(this);
    this.contactConstraint_6tkcae$_0 = this.contactConstraint_6tkcae$_0;
  }
  Object.defineProperty(RollingFrictionConstraint.prototype, 'contactConstraint', {
    get: function () {
      if (this.contactConstraint_6tkcae$_0 == null)
        return throwUPAE('contactConstraint');
      return this.contactConstraint_6tkcae$_0;
    },
    set: function (contactConstraint) {
      this.contactConstraint_6tkcae$_0 = contactConstraint;
    }
  });
  RollingFrictionConstraint.prototype.setupRollingFrictionConstraint_5uhjh0$ = function (normalAxis, contactConstraint, desiredVelocity, cfmSlip) {
    this.contactConstraint = contactConstraint;
    this.contactNormal.set_czzhiu$(normalAxis);
    this.solverBodyA = contactConstraint.solverBodyA;
    this.solverBodyB = contactConstraint.solverBodyB;
    this.friction = contactConstraint.originalContactPoint.combinedRollingFriction;
    this.appliedImpulse = 0.0;
    this.appliedPushImpulse = 0.0;
    var bodyA = this.solverBodyA;
    var bodyB = this.solverBodyB;
    var rbA = bodyA.originalBody;
    var rbB = bodyB.originalBody;
    normalAxis.scale_749b8l$(-1.0, this.relPosACrossNormal);
    this.angularComponentA.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    rbA.invInertiaTensor.transform_2gj7b4$(this.relPosACrossNormal, this.angularComponentA);
    this.relPosBCrossNormal.set_czzhiu$(normalAxis);
    this.angularComponentB.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    rbB.invInertiaTensor.transform_2gj7b4$(this.relPosBCrossNormal, this.angularComponentB);
    rbA.invInertiaTensor.transform_2gj7b4$(this.relPosACrossNormal, this.tmpVec1);
    rbB.invInertiaTensor.transform_2gj7b4$(this.relPosBCrossNormal, this.tmpVec2);
    this.jacDiagABInv = 1.0 / (this.tmpVec1.times_czzhiu$(this.relPosACrossNormal) + this.tmpVec2.times_czzhiu$(this.relPosBCrossNormal));
    var velADotN = this.contactNormal.times_czzhiu$(bodyA.linearVelocity) + this.relPosACrossNormal.times_czzhiu$(bodyA.angularVelocity);
    var velBDotN = -this.contactNormal.times_czzhiu$(bodyB.linearVelocity) + this.relPosBCrossNormal.times_czzhiu$(bodyB.angularVelocity);
    var relVel = velADotN + velBDotN;
    var velocityError = desiredVelocity - relVel;
    var velocityImpulse = velocityError * this.jacDiagABInv;
    this.rhs = velocityImpulse;
    this.cfm = cfmSlip;
    this.lowerLimit = 0.0;
    this.upperLimit = 1.0E10;
  };
  RollingFrictionConstraint.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RollingFrictionConstraint',
    interfaces: [SolverConstraint]
  };
  function RigidBody(shape, mass, inertiaVec) {
    RigidBody$Companion_getInstance();
    this.shape = shape;
    this.mass = mass;
    this.inertiaVec = inertiaVec;
    var tmp$;
    this.name = 'RigidBody-' + (tmp$ = RigidBody$Companion_getInstance().nInstances_0, RigidBody$Companion_getInstance().nInstances_0 = tmp$ + 1 | 0, tmp$);
    this.unpredictedWorldTransform_0 = new Mat4f();
    this.invInertiaTensor = new Mat3f();
    this.invMass = !this.isStaticOrKinematic ? 1.0 / this.mass : 0.0;
    this.velocity = MutableVec3f_init();
    this.mutAcceleration_0 = MutableVec3f_init();
    this.angularVelocity = MutableVec3f_init();
    this.mutAngularAcceleration_0 = MutableVec3f_init();
    this.force_0 = MutableVec3f_init();
    this.torque_0 = MutableVec3f_init();
    this.prevForce_0 = MutableVec3f_init();
    this.prevTorque_0 = MutableVec3f_init();
    this.tmpVec_0 = MutableVec3f_init();
    this.tmpPosLocal_0 = MutableVec3f_init();
    this.tmpQuat1_0 = MutableVec4f_init();
    this.tmpQuat2_0 = MutableVec4f_init();
    this.tmpMat3_0 = new Mat3f();
    this.updateInertiaTensor();
  }
  Object.defineProperty(RigidBody.prototype, 'isStaticOrKinematic', {
    get: function () {
      return this.mass === 0.0;
    }
  });
  Object.defineProperty(RigidBody.prototype, 'worldTransform', {
    get: function () {
      return this.shape.transform;
    }
  });
  Object.defineProperty(RigidBody.prototype, 'centerOfMass', {
    get: function () {
      return this.shape.center;
    }
  });
  Object.defineProperty(RigidBody.prototype, 'acceleration', {
    get: function () {
      return this.mutAcceleration_0;
    }
  });
  Object.defineProperty(RigidBody.prototype, 'angularAcceleration', {
    get: function () {
      return this.mutAngularAcceleration_0;
    }
  });
  RigidBody.prototype.applyGravity_kzbnk6$ = function (dt, world) {
    if (!this.isStaticOrKinematic) {
      world.gravity.scale_749b8l$(dt, this.tmpVec_0);
      this.velocity.plusAssign_czzhiu$(this.tmpVec_0);
    }
  };
  RigidBody.prototype.stepSimulation_mx4ult$ = function (dt) {
    if (!this.isStaticOrKinematic) {
      this.worldTransform.set_d4zu6j$(this.unpredictedWorldTransform_0);
      this.tmpVec_0.set_czzhiu$(this.force_0).subtract_czzhiu$(this.prevForce_0).scale_mx4ult$(0.5).add_czzhiu$(this.prevForce_0);
      this.prevForce_0.set_czzhiu$(this.force_0);
      this.tmpVec_0.scale_mx4ult$(this.invMass);
      this.mutAcceleration_0.set_czzhiu$(this.tmpVec_0);
      this.tmpVec_0.scale_mx4ult$(dt).add_czzhiu$(this.velocity);
      this.velocity.set_czzhiu$(this.tmpVec_0);
      this.tmpVec_0.scale_mx4ult$(dt);
      this.centerOfMass.add_czzhiu$(this.tmpVec_0);
      this.tmpPosLocal_0.set_czzhiu$(this.centerOfMass);
      var fAngle = this.angularVelocity.length();
      if (fAngle * dt > RigidBody$Companion_getInstance().ANGULAR_MOTION_THRESHOLD) {
        fAngle = RigidBody$Companion_getInstance().ANGULAR_MOTION_THRESHOLD / dt;
      }
      if (fAngle < 0.001) {
        this.tmpVec_0.set_czzhiu$(this.angularVelocity).scale_mx4ult$(0.5 * dt - dt * dt * dt * 0.020833334 * fAngle * fAngle);
      }
       else {
        var tmp$ = this.tmpVec_0.set_czzhiu$(this.angularVelocity);
        var x = 0.5 * fAngle * dt;
        tmp$.scale_mx4ult$(Math_0.sin(x) / fAngle);
      }
      var tmp$_0 = this.tmpQuat1_0;
      var tmp$_1 = this.tmpVec_0;
      var x_0 = fAngle * dt * 0.5;
      tmp$_0.set_2qa7tb$(tmp$_1, Math_0.cos(x_0));
      this.worldTransform.getRotation_5s4mpv$(this.tmpQuat2_0);
      this.tmpQuat1_0.quatProduct_czzhhz$(this.tmpQuat2_0).norm();
      this.worldTransform.setRotate_czzhhz$(this.tmpQuat1_0);
      this.centerOfMass.set_czzhiu$(this.tmpPosLocal_0);
      this.updateInertiaTensor();
    }
    this.force_0.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.torque_0.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
  };
  RigidBody.prototype.predictIntegratedTransform_mx4ult$ = function (dt) {
    if (!this.isStaticOrKinematic) {
      this.unpredictedWorldTransform_0.set_d4zu6j$(this.worldTransform);
      this.tmpPosLocal_0.set_czzhiu$(this.velocity).scale_mx4ult$(dt).add_czzhiu$(this.centerOfMass);
      var fAngle = this.angularVelocity.length();
      if (fAngle * dt > RigidBody$Companion_getInstance().ANGULAR_MOTION_THRESHOLD) {
        fAngle = RigidBody$Companion_getInstance().ANGULAR_MOTION_THRESHOLD / dt;
      }
      if (fAngle < 0.001) {
        this.tmpVec_0.set_czzhiu$(this.angularVelocity).scale_mx4ult$(0.5 * dt - dt * dt * dt * 0.020833334 * fAngle * fAngle);
      }
       else {
        var tmp$ = this.tmpVec_0.set_czzhiu$(this.angularVelocity);
        var x = 0.5 * fAngle * dt;
        tmp$.scale_mx4ult$(Math_0.sin(x) / fAngle);
      }
      var tmp$_0 = this.tmpQuat1_0;
      var tmp$_1 = this.tmpVec_0;
      var x_0 = fAngle * dt * 0.5;
      tmp$_0.set_2qa7tb$(tmp$_1, Math_0.cos(x_0));
      this.worldTransform.getRotation_5s4mpv$(this.tmpQuat2_0);
      this.tmpQuat1_0.quatProduct_czzhhz$(this.tmpQuat2_0).norm();
      this.worldTransform.setRotate_czzhhz$(this.tmpQuat1_0);
      this.centerOfMass.set_czzhiu$(this.tmpPosLocal_0);
    }
  };
  RigidBody.prototype.updateInertiaTensor = function () {
    this.worldTransform.getOrientation_d4zu7e$(this.tmpMat3_0);
    this.invInertiaTensor.set_d4zu7e$(this.tmpMat3_0).scale_czzhiu$(this.inertiaVec).mul_d4zu7e$(this.tmpMat3_0.transpose());
  };
  RigidBody.prototype.getVelocityInLocalPoint_2gj7b4$ = function (pos, result) {
    return result.set_czzhiu$(this.angularVelocity.cross_2gj7b4$(pos, this.tmpVec_0)).add_czzhiu$(this.velocity);
  };
  RigidBody.prototype.applyForceRelative_4lfkt4$ = function (position, force) {
    this.torque_0.add_czzhiu$(position.cross_2gj7b4$(force, this.tmpVec_0));
    this.force_0.add_czzhiu$(force);
  };
  RigidBody.prototype.applyForceGlobal_4lfkt4$ = function (position, force) {
    this.tmpPosLocal_0.set_czzhiu$(position).subtract_czzhiu$(this.centerOfMass);
    this.applyForceRelative_4lfkt4$(this.tmpPosLocal_0, force);
  };
  RigidBody.prototype.applyImpulseRelative_4lfkt4$ = function (position, impulse) {
    this.velocity.add_czzhiu$(this.tmpVec_0.set_czzhiu$(impulse).scale_mx4ult$(this.invMass));
    this.invInertiaTensor.transform_5s4mqq$(position.cross_2gj7b4$(impulse, this.tmpVec_0));
    this.angularVelocity.add_czzhiu$(this.tmpVec_0);
  };
  RigidBody.prototype.applyImpulseGlobal_4lfkt4$ = function (position, impulse) {
    this.tmpPosLocal_0.set_czzhiu$(position).subtract_czzhiu$(this.centerOfMass);
    this.applyImpulseRelative_4lfkt4$(this.tmpPosLocal_0, impulse);
  };
  RigidBody.prototype.toString = function () {
    return this.name;
  };
  function RigidBody$Companion() {
    RigidBody$Companion_instance = this;
    this.ANGULAR_DAMPING = 0.98;
    this.ANGULAR_MOTION_THRESHOLD = math.PI / 4.0;
    this.nInstances_0 = 1;
  }
  RigidBody$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var RigidBody$Companion_instance = null;
  function RigidBody$Companion_getInstance() {
    if (RigidBody$Companion_instance === null) {
      new RigidBody$Companion();
    }
    return RigidBody$Companion_instance;
  }
  RigidBody.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RigidBody',
    interfaces: []
  };
  function staticBox(size) {
    return staticBox_0(size.x, size.y, size.z);
  }
  function staticBox_0(sizeX, sizeY, sizeZ) {
    return new RigidBody(new Box(sizeX, sizeY, sizeZ), 0.0, Vec3f$Companion_getInstance().ZERO);
  }
  function uniformMassBox(size, mass) {
    return uniformMassBox_0(size.x, size.y, size.z, mass);
  }
  function uniformMassBox_0(sizeX, sizeY, sizeZ, mass) {
    var inertia = MutableVec3f_init();
    var i = mass / 12.0;
    inertia.x = 1.0 / (i * (sizeY * sizeY + sizeZ * sizeZ));
    inertia.y = 1.0 / (i * (sizeX * sizeX + sizeZ * sizeZ));
    inertia.z = 1.0 / (i * (sizeX * sizeX + sizeY * sizeY));
    return new RigidBody(new Box(sizeX, sizeY, sizeZ), mass, inertia);
  }
  function MvpState() {
    this.projMatrix = new Mat4fStack();
    this.projMatrixBuffer_tikfj5$_0 = createFloat32Buffer(16);
    this.viewMatrix = new Mat4fStack();
    this.viewMatrixBuffer_nu8w9l$_0 = createFloat32Buffer(16);
    this.modelMatrix = new Mat4fStack();
    this.modelMatrixBuffer_9b4lcl$_0 = createFloat32Buffer(16);
    this.mvpMatrix = new Mat4f();
    this.mvpMatrixBuffer_nw2k6l$_0 = createFloat32Buffer(16);
    this.tempMatrix_0 = new Mat4f();
    this.reset();
  }
  Object.defineProperty(MvpState.prototype, 'projMatrixBuffer', {
    get: function () {
      this.projMatrix.toBuffer_he122g$(this.projMatrixBuffer_tikfj5$_0);
      return this.projMatrixBuffer_tikfj5$_0;
    }
  });
  Object.defineProperty(MvpState.prototype, 'viewMatrixBuffer', {
    get: function () {
      this.viewMatrix.toBuffer_he122g$(this.viewMatrixBuffer_nu8w9l$_0);
      return this.viewMatrixBuffer_nu8w9l$_0;
    }
  });
  Object.defineProperty(MvpState.prototype, 'modelMatrixBuffer', {
    get: function () {
      this.modelMatrix.toBuffer_he122g$(this.modelMatrixBuffer_9b4lcl$_0);
      return this.modelMatrixBuffer_9b4lcl$_0;
    }
  });
  Object.defineProperty(MvpState.prototype, 'mvpMatrixBuffer', {
    get: function () {
      this.mvpMatrix.toBuffer_he122g$(this.mvpMatrixBuffer_nw2k6l$_0);
      return this.mvpMatrixBuffer_nw2k6l$_0;
    }
  });
  MvpState.prototype.reset = function () {
    this.projMatrix.reset();
    this.viewMatrix.reset();
    this.modelMatrix.reset();
    this.mvpMatrix.setIdentity();
  };
  MvpState.prototype.pushMatrices = function () {
    this.projMatrix.push();
    this.viewMatrix.push();
    this.modelMatrix.push();
  };
  MvpState.prototype.popMatrices = function () {
    this.projMatrix.pop();
    this.viewMatrix.pop();
    this.modelMatrix.pop();
  };
  MvpState.prototype.update_aemszp$ = function (ctx) {
    var tmp$;
    this.projMatrix.mul_93v2ma$(this.viewMatrix.mul_93v2ma$(this.modelMatrix, this.tempMatrix_0), this.mvpMatrix);
    (tmp$ = ctx.shaderMgr.boundShader) != null ? (tmp$.onMatrixUpdate_aemszp$(ctx), Unit) : null;
  };
  MvpState.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MvpState',
    interfaces: []
  };
  function toString_0($receiver, precision) {
    return toString_1($receiver, precision);
  }
  function RenderingHints() {
    this.shadowRange = 100.0;
    this.shadowPreset = ShadowPreset$SHADOW_HIGH_getInstance();
  }
  RenderingHints.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RenderingHints',
    interfaces: []
  };
  function ShadowPreset(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ShadowPreset_initFields() {
    ShadowPreset_initFields = function () {
    };
    new ShadowPreset$SHADOW_OFF();
    new ShadowPreset$SHADOW_LOW();
    new ShadowPreset$SHADOW_MEDIUM();
    new ShadowPreset$SHADOW_HIGH();
    new ShadowPreset$SHADOW_ULTRA();
  }
  function ShadowPreset$SHADOW_OFF() {
    ShadowPreset$SHADOW_OFF_instance = this;
    ShadowPreset.call(this, 'SHADOW_OFF', 0);
  }
  ShadowPreset$SHADOW_OFF.prototype.createShadowMap_nqmrbr$ = function (hints) {
    return null;
  };
  ShadowPreset$SHADOW_OFF.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SHADOW_OFF',
    interfaces: [ShadowPreset]
  };
  var ShadowPreset$SHADOW_OFF_instance = null;
  function ShadowPreset$SHADOW_OFF_getInstance() {
    ShadowPreset_initFields();
    return ShadowPreset$SHADOW_OFF_instance;
  }
  function ShadowPreset$SHADOW_LOW() {
    ShadowPreset$SHADOW_LOW_instance = this;
    ShadowPreset.call(this, 'SHADOW_LOW', 1);
  }
  ShadowPreset$SHADOW_LOW.prototype.createShadowMap_nqmrbr$ = function (hints) {
    return new SimpleShadowMap(0.0, hints.shadowRange);
  };
  ShadowPreset$SHADOW_LOW.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SHADOW_LOW',
    interfaces: [ShadowPreset]
  };
  var ShadowPreset$SHADOW_LOW_instance = null;
  function ShadowPreset$SHADOW_LOW_getInstance() {
    ShadowPreset_initFields();
    return ShadowPreset$SHADOW_LOW_instance;
  }
  function ShadowPreset$SHADOW_MEDIUM() {
    ShadowPreset$SHADOW_MEDIUM_instance = this;
    ShadowPreset.call(this, 'SHADOW_MEDIUM', 2);
  }
  ShadowPreset$SHADOW_MEDIUM.prototype.createShadowMap_nqmrbr$ = function (hints) {
    return new SimpleShadowMap(0.0, hints.shadowRange, 4096);
  };
  ShadowPreset$SHADOW_MEDIUM.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SHADOW_MEDIUM',
    interfaces: [ShadowPreset]
  };
  var ShadowPreset$SHADOW_MEDIUM_instance = null;
  function ShadowPreset$SHADOW_MEDIUM_getInstance() {
    ShadowPreset_initFields();
    return ShadowPreset$SHADOW_MEDIUM_instance;
  }
  function ShadowPreset$SHADOW_HIGH() {
    ShadowPreset$SHADOW_HIGH_instance = this;
    ShadowPreset.call(this, 'SHADOW_HIGH', 3);
  }
  ShadowPreset$SHADOW_HIGH.prototype.createShadowMap_nqmrbr$ = function (hints) {
    return CascadedShadowMap$Companion_getInstance().defaultCascadedShadowMap3_vjorfl$(hints.shadowRange);
  };
  ShadowPreset$SHADOW_HIGH.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SHADOW_HIGH',
    interfaces: [ShadowPreset]
  };
  var ShadowPreset$SHADOW_HIGH_instance = null;
  function ShadowPreset$SHADOW_HIGH_getInstance() {
    ShadowPreset_initFields();
    return ShadowPreset$SHADOW_HIGH_instance;
  }
  function ShadowPreset$SHADOW_ULTRA() {
    ShadowPreset$SHADOW_ULTRA_instance = this;
    ShadowPreset.call(this, 'SHADOW_ULTRA', 4);
  }
  ShadowPreset$SHADOW_ULTRA.prototype.createShadowMap_nqmrbr$ = function (hints) {
    return CascadedShadowMap$Companion_getInstance().defaultCascadedShadowMap3_vjorfl$(hints.shadowRange, 4096);
  };
  ShadowPreset$SHADOW_ULTRA.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SHADOW_ULTRA',
    interfaces: [ShadowPreset]
  };
  var ShadowPreset$SHADOW_ULTRA_instance = null;
  function ShadowPreset$SHADOW_ULTRA_getInstance() {
    ShadowPreset_initFields();
    return ShadowPreset$SHADOW_ULTRA_instance;
  }
  ShadowPreset.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShadowPreset',
    interfaces: [Enum]
  };
  function ShadowPreset$values() {
    return [ShadowPreset$SHADOW_OFF_getInstance(), ShadowPreset$SHADOW_LOW_getInstance(), ShadowPreset$SHADOW_MEDIUM_getInstance(), ShadowPreset$SHADOW_HIGH_getInstance(), ShadowPreset$SHADOW_ULTRA_getInstance()];
  }
  ShadowPreset.values = ShadowPreset$values;
  function ShadowPreset$valueOf(name) {
    switch (name) {
      case 'SHADOW_OFF':
        return ShadowPreset$SHADOW_OFF_getInstance();
      case 'SHADOW_LOW':
        return ShadowPreset$SHADOW_LOW_getInstance();
      case 'SHADOW_MEDIUM':
        return ShadowPreset$SHADOW_MEDIUM_getInstance();
      case 'SHADOW_HIGH':
        return ShadowPreset$SHADOW_HIGH_getInstance();
      case 'SHADOW_ULTRA':
        return ShadowPreset$SHADOW_ULTRA_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.ShadowPreset.' + name);
    }
  }
  ShadowPreset.valueOf_61zpoe$ = ShadowPreset$valueOf;
  function Animation(duration) {
    this.duration = duration;
    this.channels = ArrayList_init_0();
    this.weight = 0.0;
  }
  Animation.prototype.apply_8ca0d4$ = function (pos, clearTransform) {
    var tmp$;
    tmp$ = this.channels;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.channels.get_za3lpa$(i).apply_g1oyt7$(pos * this.duration, this.weight, clearTransform);
    }
  };
  Animation.prototype.copy_pb6i6z$ = function (withNodes) {
    var copy = new Animation(this.duration);
    var tmp$;
    tmp$ = this.channels.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var $receiver = copy.channels;
      var element_0 = element.copy_dm1hwa$(ensureNotNull(withNodes.get_11rb$(element.name)));
      $receiver.add_11rb$(element_0);
    }
    return copy;
  };
  Animation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Animation',
    interfaces: []
  };
  function Armature(meshData, name, instances, attributes) {
    Armature$Companion_getInstance();
    if (name === void 0)
      name = null;
    if (instances === void 0)
      instances = InstancedMesh$Companion_getInstance().identityInstance();
    if (attributes === void 0)
      attributes = InstancedMesh$Companion_getInstance().MODEL_INSTANCES;
    InstancedMesh.call(this, meshData, name, instances, attributes);
    this.rootBones = ArrayList_init_0();
    this.bones = LinkedHashMap_init();
    this.indexedBones_emt8o4$_0 = ArrayList_init_0();
    this.boneTransforms_8cyf9r$_0 = null;
    this.isCpuAnimated = false;
    this.animations_k11tmz$_0 = LinkedHashMap_init();
    this.animationList_t94xw8$_0 = ArrayList_init_0();
    this.animationPos = 0.0;
    this.animationSpeed = 1.0;
    this.transform_sr6hm6$_0 = new Mat4fStack();
    this.tmpTransform_4g4z8l$_0 = new Mat4f();
    this.tmpVec_lyxif1$_0 = MutableVec3f_init();
    this.originalMeshData_jfsf2m$_0 = meshData;
    this.meshV_mh84a9$_0 = null;
    this.origV_nmaa6d$_0 = null;
    var tmp$, tmp$_0;
    var armatureAttribs = mutableSetOf([Armature$Companion_getInstance().BONE_WEIGHTS, Armature$Companion_getInstance().BONE_INDICES]);
    armatureAttribs.addAll_brywnq$(meshData.vertexAttributes);
    this.meshData = new MeshData(armatureAttribs);
    this.origV_nmaa6d$_0 = this.originalMeshData_jfsf2m$_0.get_za3lpa$(0);
    tmp$ = this.originalMeshData_jfsf2m$_0.numVertices;
    for (var i = 0; i < tmp$; i++) {
      this.origV_nmaa6d$_0.index = i;
      var $this = this.meshData;
      $this.isSyncRequired = true;
      var $this_0 = $this.vertexList;
      var updateBounds = $this.bounds;
      var tmp$_1, tmp$_2, tmp$_3;
      $this_0.checkBufferSizes_za3lpa$();
      tmp$_1 = $this_0.vertexSizeF;
      for (var i_0 = 1; i_0 <= tmp$_1; i_0++) {
        $this_0.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_2 = $this_0.vertexSizeI;
      for (var i_1 = 1; i_1 <= tmp$_2; i_1++) {
        $this_0.dataI.plusAssign_za3lpa$(0);
      }
      $this_0.vertexIt.index = (tmp$_3 = $this_0.size, $this_0.size = tmp$_3 + 1 | 0, tmp$_3);
      $this_0.vertexIt.set_j5bz6$(this.origV_nmaa6d$_0);
      updateBounds != null ? updateBounds.add_czzhiu$($this_0.vertexIt.position) : null;
    }
    tmp$_0 = this.originalMeshData_jfsf2m$_0.numIndices;
    for (var i_2 = 0; i_2 < tmp$_0; i_2++) {
      this.meshData.addIndex_za3lpa$(this.originalMeshData_jfsf2m$_0.vertexList.indices.get_za3lpa$(i_2));
    }
    this.meshV_mh84a9$_0 = this.meshData.get_za3lpa$(0);
  }
  function Armature$BoneWeight(weight, id) {
    this.weight = weight;
    this.id = id;
  }
  Armature$BoneWeight.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BoneWeight',
    interfaces: []
  };
  Armature$BoneWeight.prototype.component1 = function () {
    return this.weight;
  };
  Armature$BoneWeight.prototype.component2 = function () {
    return this.id;
  };
  Armature$BoneWeight.prototype.copy_vjorfl$ = function (weight, id) {
    return new Armature$BoneWeight(weight === void 0 ? this.weight : weight, id === void 0 ? this.id : id);
  };
  Armature$BoneWeight.prototype.toString = function () {
    return 'BoneWeight(weight=' + Kotlin.toString(this.weight) + (', id=' + Kotlin.toString(this.id)) + ')';
  };
  Armature$BoneWeight.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.weight) | 0;
    result = result * 31 + Kotlin.hashCode(this.id) | 0;
    return result;
  };
  Armature$BoneWeight.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.weight, other.weight) && Kotlin.equals(this.id, other.id)))));
  };
  Armature.prototype.addBoneWeight_p70jd0$_0 = function (boneWeights, boneId, boneWeight) {
    for (var i = 0; i <= 3; i++) {
      if (boneWeight > boneWeights[i].weight) {
        boneWeights[i].weight = boneWeight;
        boneWeights[i].id = boneId;
        break;
      }
    }
  };
  Armature.prototype.copyBonesAndAnimations_rdsqcy$ = function (other) {
    var $receiver = this.bones;
    var map = other.bones;
    $receiver.putAll_a2k3zr$(map);
    addAll(this.rootBones, other.rootBones);
    this.updateBones();
    var tmp$;
    tmp$ = other.animations_k11tmz$_0.entries.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var name = element.key;
      var anim = element.value;
      this.addAnimation_z5ltv$(name, anim.copy_pb6i6z$(this.bones));
    }
  };
  Armature.prototype.updateBones = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    this.indexedBones_emt8o4$_0.clear();
    this.indexedBones_emt8o4$_0.addAll_brywnq$(this.bones.values);
    this.boneTransforms_8cyf9r$_0 = createFloat32Buffer(this.indexedBones_emt8o4$_0.size * 16 | 0);
    this.tmpTransform_4g4z8l$_0.setIdentity();
    var array = Array_0(this.meshData.numVertices);
    var tmp$_3;
    tmp$_3 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_3; i++) {
      var array_0 = Array_0(4);
      var tmp$_4;
      tmp$_4 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_4; i_0++) {
        array_0[i_0] = new Armature$BoneWeight(0.0, 0);
      }
      array[i] = array_0;
    }
    var boneWeights = array;
    var tmp$_5, tmp$_0_0;
    var index = 0;
    tmp$_5 = this.indexedBones_emt8o4$_0.iterator();
    while (tmp$_5.hasNext()) {
      var item = tmp$_5.next();
      var boneId = checkIndexOverflow((tmp$_0_0 = index, index = tmp$_0_0 + 1 | 0, tmp$_0_0));
      var tmp$_6;
      item.id = boneId;
      ensureNotNull(this.boneTransforms_8cyf9r$_0).position = boneId * 16 | 0;
      this.tmpTransform_4g4z8l$_0.toBuffer_he122g$(ensureNotNull(this.boneTransforms_8cyf9r$_0));
      ensureNotNull(this.boneTransforms_8cyf9r$_0).limit = ensureNotNull(this.boneTransforms_8cyf9r$_0).capacity;
      tmp$_6 = item.vertexIds;
      for (var i_1 = 0; i_1 !== tmp$_6.length; ++i_1) {
        var vertexId = item.vertexIds[i_1];
        this.addBoneWeight_p70jd0$_0(boneWeights[vertexId], boneId, item.vertexWeights[i_1]);
      }
    }
    for (tmp$ = 0; tmp$ !== boneWeights.length; ++tmp$) {
      var vertexBoneWeights = boneWeights[tmp$];
      var tmp$_7;
      var sum = 0.0;
      for (tmp$_7 = 0; tmp$_7 !== vertexBoneWeights.length; ++tmp$_7) {
        var element = vertexBoneWeights[tmp$_7];
        sum += element.weight;
      }
      var weightSum = sum;
      var tmp$_8;
      for (tmp$_8 = 0; tmp$_8 !== vertexBoneWeights.length; ++tmp$_8) {
        var element_0 = vertexBoneWeights[tmp$_8];
        element_0.weight = element_0.weight / weightSum;
      }
    }
    var tmp$_9, tmp$_0_1;
    var index_0 = 0;
    tmp$_9 = this.indexedBones_emt8o4$_0.iterator();
    while (tmp$_9.hasNext()) {
      var item_0 = tmp$_9.next();
      var boneId_0 = checkIndexOverflow((tmp$_0_1 = index_0, index_0 = tmp$_0_1 + 1 | 0, tmp$_0_1));
      var tmp$_10;
      tmp$_10 = item_0.vertexIds;
      for (var i_2 = 0; i_2 !== tmp$_10.length; ++i_2) {
        var tmp$_11, tmp$_12;
        var vertexId_0 = item_0.vertexIds[i_2];
        item_0.vertexWeights[i_2] = 0.0;
        tmp$_11 = boneWeights[vertexId_0];
        for (tmp$_12 = 0; tmp$_12 !== tmp$_11.length; ++tmp$_12) {
          var boneW = tmp$_11[tmp$_12];
          if (boneW.id === boneId_0) {
            item_0.vertexWeights[i_2] = boneW.weight;
            break;
          }
        }
      }
    }
    tmp$_0 = this.meshData.numVertices;
    for (var i_3 = 0; i_3 < tmp$_0; i_3++) {
      var boneWs = boneWeights[i_3];
      this.meshV_mh84a9$_0.index = i_3;
      (tmp$_1 = this.meshV_mh84a9$_0.getVec4fAttribute_mczodr$(Armature$Companion_getInstance().BONE_WEIGHTS)) != null ? tmp$_1.set_7b5o5w$(boneWs[0].weight, boneWs[1].weight, boneWs[2].weight, boneWs[3].weight) : null;
      (tmp$_2 = this.meshV_mh84a9$_0.getVec4iAttribute_mczodr$(Armature$Companion_getInstance().BONE_INDICES)) != null ? (tmp$_2.set_tjonv8$(boneWs[0].id, boneWs[1].id, boneWs[2].id, boneWs[3].id), Unit) : null;
    }
  };
  Armature.prototype.getAnimation_61zpoe$ = function (name) {
    return this.animations_k11tmz$_0.get_11rb$(name);
  };
  Armature.prototype.addAnimation_z5ltv$ = function (name, animation) {
    this.animations_k11tmz$_0.put_xwzc9p$(name, animation);
    this.animationList_t94xw8$_0.add_11rb$(animation);
  };
  Armature.prototype.removeAnimation_61zpoe$ = function (name) {
    var $receiver = this.animationList_t94xw8$_0;
    var element = this.animations_k11tmz$_0.remove_11rb$(name);
    var tmp$;
    (Kotlin.isType(tmp$ = $receiver, MutableCollection) ? tmp$ : throwCCE()).remove_11rb$(element);
  };
  Armature.prototype.preRender_aemszp$ = function (ctx) {
    if (ctx.deltaT > 0) {
      this.applyAnimation_vkqu3b$_0(ctx);
    }
    InstancedMesh.prototype.preRender_aemszp$.call(this, ctx);
  };
  Armature.prototype.render_aemszp$ = function (ctx) {
    var shader = this.shader;
    if (Kotlin.isType(shader, BasicShader)) {
      shader.bones = this.boneTransforms_8cyf9r$_0;
    }
    InstancedMesh.prototype.render_aemszp$.call(this, ctx);
  };
  Armature.prototype.applyAnimation_vkqu3b$_0 = function (ctx) {
    var tmp$, tmp$_0, tmp$_1;
    var update = false;
    var weightedDuration = 0.0;
    tmp$ = this.animationList_t94xw8$_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      var anim = this.animationList_t94xw8$_0.get_za3lpa$(i);
      if (anim.weight > 0) {
        weightedDuration += anim.duration * anim.weight;
      }
    }
    this.animationPos = (this.animationPos + ctx.deltaT / weightedDuration * this.animationSpeed) % 1.0;
    tmp$_0 = this.animationList_t94xw8$_0;
    for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
      var anim_0 = this.animationList_t94xw8$_0.get_za3lpa$(i_0);
      if (anim_0.weight > 0) {
        anim_0.apply_8ca0d4$(this.animationPos, !update);
        update = true;
      }
    }
    if (update) {
      if (!this.isCpuAnimated && !ctx.glCapabilities.shaderIntAttribs) {
        var $this = package$util.Log;
        var level = Log$Level.WARN;
        var tag = Kotlin.getKClassFromExpression(this).simpleName;
        if (level.level >= $this.level.level) {
          $this.printer(level, tag, 'Vertex shader animation requested, but not supported by hardware. Falling back to CPU based mesh animation');
        }
        this.isCpuAnimated = true;
      }
      if (this.isCpuAnimated) {
        var $this_0 = this.meshData;
        var wasBatchUpdate = $this_0.isBatchUpdate;
        $this_0.isBatchUpdate = true;
        var tmp$_2;
        this.clearMesh_q44r9c$_0();
        tmp$_2 = this.rootBones;
        for (var i_1 = 0; i_1 !== tmp$_2.size; ++i_1) {
          this.applyBone_luh3jt$_0(this.rootBones.get_za3lpa$(i_1), this.transform_sr6hm6$_0, this.isCpuAnimated);
        }
        $this_0.isSyncRequired = true;
        $this_0.isBatchUpdate = wasBatchUpdate;
        if (false) {
          $this_0.rebuildBounds();
        }
      }
       else {
        tmp$_1 = this.rootBones;
        for (var i_2 = 0; i_2 !== tmp$_1.size; ++i_2) {
          this.applyBone_luh3jt$_0(this.rootBones.get_za3lpa$(i_2), this.transform_sr6hm6$_0, this.isCpuAnimated);
        }
      }
    }
  };
  Armature.prototype.applyBone_luh3jt$_0 = function (bone, transform, updateMesh) {
    var tmp$;
    transform.push();
    transform.mul_d4zu6j$(bone.transform).mul_93v2ma$(bone.offsetMatrix, this.tmpTransform_4g4z8l$_0);
    if (updateMesh) {
      this.softTransformMesh_u789jd$_0(bone, this.tmpTransform_4g4z8l$_0);
    }
     else {
      ensureNotNull(this.boneTransforms_8cyf9r$_0).position = 16 * bone.id | 0;
      this.tmpTransform_4g4z8l$_0.toBuffer_he122g$(ensureNotNull(this.boneTransforms_8cyf9r$_0));
      ensureNotNull(this.boneTransforms_8cyf9r$_0).limit = ensureNotNull(this.boneTransforms_8cyf9r$_0).capacity;
    }
    tmp$ = bone.children;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.applyBone_luh3jt$_0(bone.children.get_za3lpa$(i), transform, updateMesh);
    }
    transform.pop();
  };
  Armature.prototype.clearMesh_q44r9c$_0 = function () {
    var tmp$;
    tmp$ = this.meshData.numVertices;
    for (var i = 0; i < tmp$; i++) {
      this.meshV_mh84a9$_0.index = i;
      this.meshV_mh84a9$_0.position.set_y2kzbl$(0.0, 0.0, 0.0);
      this.meshV_mh84a9$_0.normal.set_y2kzbl$(0.0, 0.0, 0.0);
    }
  };
  Armature.prototype.softTransformMesh_u789jd$_0 = function (bone, transform) {
    var tmp$;
    tmp$ = bone.vertexIds;
    for (var i = 0; i !== tmp$.length; ++i) {
      this.meshV_mh84a9$_0.index = bone.vertexIds[i];
      this.origV_nmaa6d$_0.index = bone.vertexIds[i];
      this.tmpVec_lyxif1$_0.set_czzhiu$(this.origV_nmaa6d$_0.position);
      transform.transform_w1lst9$(this.tmpVec_lyxif1$_0);
      this.tmpVec_lyxif1$_0.timesAssign_mx4ult$(bone.vertexWeights[i]);
      this.meshV_mh84a9$_0.position.plusAssign_czzhiu$(this.tmpVec_lyxif1$_0);
      this.tmpVec_lyxif1$_0.set_czzhiu$(this.origV_nmaa6d$_0.normal);
      transform.transform_w1lst9$(this.tmpVec_lyxif1$_0, 0.0);
      this.tmpVec_lyxif1$_0.timesAssign_mx4ult$(bone.vertexWeights[i]);
      this.meshV_mh84a9$_0.normal.plusAssign_czzhiu$(this.tmpVec_lyxif1$_0);
    }
  };
  function Armature$Companion() {
    Armature$Companion_instance = this;
    this.BONE_WEIGHTS = new Attribute('attrib_bone_weights', AttributeType$VEC_4F_getInstance());
    this.BONE_INDICES = new Attribute('attrib_bone_indices', AttributeType$VEC_4I_getInstance());
  }
  Armature$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Armature$Companion_instance = null;
  function Armature$Companion_getInstance() {
    if (Armature$Companion_instance === null) {
      new Armature$Companion();
    }
    return Armature$Companion_instance;
  }
  Armature.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Armature',
    interfaces: [InstancedMesh]
  };
  function Bone(name, numVertices) {
    this.name = name;
    this.parent = null;
    this.id = 0;
    this.children = ArrayList_init_0();
    this.offsetMatrix = new Mat4f();
    this.transform = new Mat4f();
    this.vertexIds = new Int32Array(numVertices);
    this.vertexWeights = new Float32Array(numVertices);
  }
  Bone.prototype.clearTransform = function () {
    for (var i = 0; i <= 15; i++) {
      this.transform.matrix[i] = 0.0;
    }
  };
  Bone.prototype.addTransform_8kv2li$ = function (transform, weight) {
    for (var i = 0; i <= 15; i++) {
      this.transform.matrix[i] = this.transform.matrix[i] + transform.get_za3lpa$(i) * weight;
    }
  };
  Bone.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Bone',
    interfaces: [AnimatedNode]
  };
  function AnimatedNode() {
  }
  AnimatedNode.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AnimatedNode',
    interfaces: []
  };
  function NodeAnimation(name, node) {
    this.name = name;
    this.node = node;
    this.rotationKeys = ArrayList_init_0();
    this.positionKeys = ArrayList_init_0();
    this.scalingKeys = ArrayList_init_0();
    this.tmpTransform_0 = new Mat4f();
    this.tmpMat_0 = new Mat4f();
  }
  NodeAnimation.prototype.apply_g1oyt7$ = function (time, weight, clearTransform) {
    this.tmpTransform_0.setIdentity();
    this.mul_0(this.positionKeys, time);
    this.mul_0(this.rotationKeys, time);
    this.mul_0(this.scalingKeys, time);
    if (clearTransform) {
      this.node.clearTransform();
    }
    this.node.addTransform_8kv2li$(this.tmpTransform_0, weight);
  };
  NodeAnimation.prototype.mul_0 = function (keys, time) {
    var tmp$;
    if (!keys.isEmpty()) {
      var idx = this.findIndex_0(time, keys);
      if ((idx + 1 | 0) < keys.size) {
        tmp$ = keys.get_za3lpa$(idx + 1 | 0);
      }
       else {
        tmp$ = null;
      }
      var next = tmp$;
      this.tmpTransform_0.mul_d4zu6j$(keys.get_za3lpa$(idx).mixAndSet_yh9mvs$(time, next, this.tmpMat_0));
    }
  };
  NodeAnimation.prototype.findIndex_0 = function (time, keys) {
    for (var i = 0; i !== keys.size; ++i) {
      if (keys.get_za3lpa$(i).time > time) {
        var b = i - 1 | 0;
        return Math_0.max(0, b);
      }
    }
    return keys.size - 1 | 0;
  };
  NodeAnimation.prototype.copy_dm1hwa$ = function (withNode) {
    var copy = new NodeAnimation(this.name, withNode);
    var tmp$;
    tmp$ = this.rotationKeys.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var $receiver = copy.rotationKeys;
      var element_0 = element.copy();
      $receiver.add_11rb$(element_0);
    }
    var tmp$_0;
    tmp$_0 = this.positionKeys.iterator();
    while (tmp$_0.hasNext()) {
      var element_1 = tmp$_0.next();
      var $receiver_0 = copy.positionKeys;
      var element_2 = element_1.copy();
      $receiver_0.add_11rb$(element_2);
    }
    var tmp$_1;
    tmp$_1 = this.scalingKeys.iterator();
    while (tmp$_1.hasNext()) {
      var element_3 = tmp$_1.next();
      var $receiver_1 = copy.scalingKeys;
      var element_4 = element_3.copy();
      $receiver_1.add_11rb$(element_4);
    }
    return copy;
  };
  NodeAnimation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NodeAnimation',
    interfaces: []
  };
  function AnimationKey(time, value) {
    this.time = time;
    this.value = value;
  }
  AnimationKey.prototype.weight_dleff0$ = function (pos, nextTime) {
    return (pos - this.time) / (nextTime - this.time);
  };
  AnimationKey.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AnimationKey',
    interfaces: []
  };
  function RotationKey(time, rotation) {
    AnimationKey.call(this, time, rotation);
    this.tmpRotation_0 = MutableVec4f_init();
  }
  RotationKey.prototype.mixAndSet_yh9mvs$ = function (time, next, result) {
    if (next == null) {
      result.setRotate_czzhhz$(this.value);
    }
     else {
      slerp(this.value, next.value, this.weight_dleff0$(time, next.time), this.tmpRotation_0);
      result.setRotate_czzhhz$(this.tmpRotation_0);
    }
    return result;
  };
  RotationKey.prototype.copy = function () {
    return new RotationKey(this.time, this.value);
  };
  RotationKey.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RotationKey',
    interfaces: [AnimationKey]
  };
  function PositionKey(time, position) {
    AnimationKey.call(this, time, position);
    this.tmpPosition_0 = MutableVec3f_init();
  }
  PositionKey.prototype.mixAndSet_yh9mvs$ = function (time, next, result) {
    if (next == null) {
      result.setIdentity().translate_czzhiu$(this.value);
    }
     else {
      next.value.subtract_2gj7b4$(this.value, this.tmpPosition_0).scale_mx4ult$(this.weight_dleff0$(time, next.time)).add_czzhiu$(this.value);
      result.setIdentity().translate_czzhiu$(this.tmpPosition_0);
    }
    return result;
  };
  PositionKey.prototype.copy = function () {
    return new PositionKey(this.time, this.value);
  };
  PositionKey.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PositionKey',
    interfaces: [AnimationKey]
  };
  function ScalingKey(time, scaling) {
    AnimationKey.call(this, time, scaling);
    this.tmpScaling_0 = MutableVec3f_init();
  }
  ScalingKey.prototype.mixAndSet_yh9mvs$ = function (time, next, result) {
    if (next == null) {
      result.setIdentity().scale_czzhiu$(this.value);
    }
     else {
      next.value.subtract_2gj7b4$(this.value, this.tmpScaling_0).scale_mx4ult$(this.weight_dleff0$(time, next.time)).add_czzhiu$(this.value);
      result.setIdentity().scale_czzhiu$(this.tmpScaling_0);
    }
    return result;
  };
  ScalingKey.prototype.copy = function () {
    return new ScalingKey(this.time, this.value);
  };
  ScalingKey.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ScalingKey',
    interfaces: [AnimationKey]
  };
  function Camera(name) {
    if (name === void 0)
      name = 'camera';
    Node.call(this, name);
    this.position = new MutableVec3f(0.0, 0.0, 1.0);
    this.lookAt = MutableVec3f_init_1(Vec3f$Companion_getInstance().ZERO);
    this.up = MutableVec3f_init_1(Vec3f$Companion_getInstance().Y_AXIS);
    this.aspectRatio_147bkr$_0 = 1.0;
    this.globalRange_4hi0xu$_0 = 0.0;
    this.globalPosMut = MutableVec3f_init();
    this.globalLookAtMut = MutableVec3f_init();
    this.globalUpMut = MutableVec3f_init();
    this.globalRightMut = MutableVec3f_init();
    this.globalLookDirMut = MutableVec3f_init();
    this.proj = new Mat4f();
    this.view = new Mat4f();
    this.invView = new Mat4f();
    this.mvp = new Mat4f();
    this.invMvp = new Mat4f();
    this.tmpVec3_txabpe$_0 = MutableVec3f_init();
    this.tmpVec4_txabq9$_0 = MutableVec4f_init();
  }
  Object.defineProperty(Camera.prototype, 'aspectRatio', {
    get: function () {
      return this.aspectRatio_147bkr$_0;
    },
    set: function (aspectRatio) {
      this.aspectRatio_147bkr$_0 = aspectRatio;
    }
  });
  Object.defineProperty(Camera.prototype, 'globalPos', {
    get: function () {
      return this.globalPosMut;
    }
  });
  Object.defineProperty(Camera.prototype, 'globalLookAt', {
    get: function () {
      return this.globalLookAtMut;
    }
  });
  Object.defineProperty(Camera.prototype, 'globalUp', {
    get: function () {
      return this.globalUpMut;
    }
  });
  Object.defineProperty(Camera.prototype, 'globalRight', {
    get: function () {
      return this.globalRightMut;
    }
  });
  Object.defineProperty(Camera.prototype, 'globalLookDir', {
    get: function () {
      return this.globalLookDirMut;
    }
  });
  Object.defineProperty(Camera.prototype, 'globalRange', {
    get: function () {
      return this.globalRange_4hi0xu$_0;
    },
    set: function (globalRange) {
      this.globalRange_4hi0xu$_0 = globalRange;
    }
  });
  Camera.prototype.updateCamera_aemszp$ = function (ctx) {
    this.aspectRatio = ctx.viewport.aspectRatio;
    this.updateViewMatrix();
    this.updateProjectionMatrix();
    ctx.mvpState.viewMatrix.set_d4zu6j$(this.view);
    ctx.mvpState.projMatrix.set_d4zu6j$(this.proj);
    ctx.mvpState.update_aemszp$(ctx);
    this.mvp.set_d4zu6j$(ctx.mvpState.mvpMatrix);
    this.mvp.invert_8kv2li$(this.invMvp);
  };
  Camera.prototype.updateViewMatrix = function () {
    this.toGlobalCoords_w1lst9$(this.globalPosMut.set_czzhiu$(this.position));
    this.toGlobalCoords_w1lst9$(this.globalLookAtMut.set_czzhiu$(this.lookAt));
    this.toGlobalCoords_w1lst9$(this.globalUpMut.set_czzhiu$(this.up), 0.0).norm();
    this.globalLookDirMut.set_czzhiu$(this.globalLookAtMut).subtract_czzhiu$(this.globalPosMut);
    this.globalRange = this.globalLookDirMut.length();
    this.globalLookDirMut.scale_mx4ult$(1.0 / this.globalRange);
    this.globalLookDirMut.cross_2gj7b4$(this.globalUpMut, this.globalRightMut).norm();
    this.globalRightMut.cross_2gj7b4$(this.globalLookDirMut, this.globalUpMut).norm();
    this.view.setLookAt_n440fu$(this.globalPosMut, this.globalLookAtMut, this.globalUpMut);
    this.view.invert_8kv2li$(this.invView);
  };
  Camera.prototype.computePickRay_9t2ms2$ = function (pickRay, ptr, viewport, ctx) {
    return ptr.isValid && this.computePickRay_evt2sh$(pickRay, ptr.x, ptr.y, viewport, ctx);
  };
  Camera.prototype.computePickRay_evt2sh$ = function (pickRay, screenX, screenY, viewport, ctx) {
    var valid = this.unProjectScreen_dr5ppi$(this.tmpVec3_txabpe$_0.set_y2kzbl$(screenX, screenY, 0.0), viewport, ctx, pickRay.origin);
    valid = (valid && this.unProjectScreen_dr5ppi$(this.tmpVec3_txabpe$_0.set_y2kzbl$(screenX, screenY, 1.0), viewport, ctx, pickRay.direction));
    if (valid) {
      pickRay.direction.subtract_czzhiu$(pickRay.origin);
      pickRay.direction.norm();
    }
    return valid;
  };
  Camera.prototype.initRayTes_xfyfmo$ = function (rayTest, ptr, viewport, ctx) {
    return ptr.isValid && this.initRayTes_ae40wh$(rayTest, ptr.x, ptr.y, viewport, ctx);
  };
  Camera.prototype.initRayTes_ae40wh$ = function (rayTest, screenX, screenY, viewport, ctx) {
    rayTest.clear();
    return this.computePickRay_evt2sh$(rayTest.ray, screenX, screenY, viewport, ctx);
  };
  Camera.prototype.isInFrustum_f1kmr1$ = function (node) {
    return this.isInFrustum_2qa7tb$(node.globalCenter, node.globalRadius);
  };
  Camera.prototype.project_2gj7b4$ = function (world, result) {
    this.tmpVec4_txabq9$_0.set_7b5o5w$(world.x, world.y, world.z, 1.0);
    this.mvp.transform_5s4mpv$(this.tmpVec4_txabq9$_0);
    var $receiver = this.tmpVec4_txabq9$_0.w;
    var eps;
    eps = package$math.FUZZY_EQ_F;
    if (Math_0.abs($receiver) <= eps) {
      return false;
    }
    result.set_y2kzbl$(this.tmpVec4_txabq9$_0.x, this.tmpVec4_txabq9$_0.y, this.tmpVec4_txabq9$_0.z).scale_mx4ult$(1.0 / this.tmpVec4_txabq9$_0.w);
    return true;
  };
  Camera.prototype.project_2gj7bz$ = function (world, result) {
    return this.mvp.transform_5s4mpv$(result.set_7b5o5w$(world.x, world.y, world.z, 1.0));
  };
  Camera.prototype.projectScreen_dr5ppi$ = function (world, viewport, ctx, result) {
    if (!this.project_2gj7b4$(world, result)) {
      return false;
    }
    result.x = (1 + result.x) * 0.5 * viewport.width + viewport.x;
    result.y = ctx.windowHeight - ((1 + result.y) * 0.5 * viewport.height + viewport.y);
    result.z = (1 + result.z) * 0.5;
    return true;
  };
  Camera.prototype.unProjectScreen_dr5ppi$ = function (screen, viewport, ctx, result) {
    var x = screen.x - viewport.x;
    var y = ctx.windowHeight - screen.y - viewport.y;
    this.tmpVec4_txabq9$_0.set_7b5o5w$(2.0 * x / viewport.width - 1.0, 2.0 * y / viewport.height - 1.0, 2.0 * screen.z - 1.0, 1.0);
    this.invMvp.transform_5s4mpv$(this.tmpVec4_txabq9$_0);
    var s = 1.0 / this.tmpVec4_txabq9$_0.w;
    result.set_y2kzbl$(this.tmpVec4_txabq9$_0.x * s, this.tmpVec4_txabq9$_0.y * s, this.tmpVec4_txabq9$_0.z * s);
    return true;
  };
  Camera.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Camera',
    interfaces: [Node]
  };
  function OrthographicCamera(name) {
    if (name === void 0)
      name = 'orthographicCam';
    Camera.call(this, name);
    this.left = -10.0;
    this.right = 10.0;
    this.bottom = -10.0;
    this.top = 10.0;
    this.near = -10.0;
    this.far = 10.0;
    this.isClipToViewport = false;
    this.isKeepAspectRatio = true;
    this.tmpNodeCenter_dwzowq$_0 = MutableVec3f_init();
  }
  OrthographicCamera.prototype.setCentered_y2kzbl$ = function (height, near, far) {
    this.top = height * 0.5;
    this.bottom = -this.top;
    this.right = this.aspectRatio * this.top;
    this.left = -this.right;
    this.near = near;
    this.far = far;
  };
  OrthographicCamera.prototype.updateCamera_aemszp$ = function (ctx) {
    if (this.isClipToViewport) {
      this.left = 0.0;
      this.right = ctx.viewport.width;
      this.bottom = 0.0;
      this.top = ctx.viewport.height;
    }
     else if (this.isKeepAspectRatio) {
      var h = this.top - this.bottom;
      var w = ctx.viewport.aspectRatio * h;
      var xCenter = this.left + (this.right - this.left) * 0.5;
      this.left = xCenter - w * 0.5;
      this.right = xCenter + w * 0.5;
    }
    Camera.prototype.updateCamera_aemszp$.call(this, ctx);
  };
  OrthographicCamera.prototype.updateProjectionMatrix = function () {
    if (this.left !== this.right && this.bottom !== this.top && this.near !== this.far) {
      this.proj.setOrthographic_w8lrqs$(this.left, this.right, this.bottom, this.top, this.near, this.far);
    }
  };
  OrthographicCamera.prototype.computeFrustumPlane_jwr40o$ = function (z, result) {
    this.invView.transform_w1lst9$(result.upperLeft.set_y2kzbl$(this.left, this.top, -z));
    this.invView.transform_w1lst9$(result.upperRight.set_y2kzbl$(this.right, this.top, -z));
    this.invView.transform_w1lst9$(result.lowerLeft.set_y2kzbl$(this.left, this.bottom, -z));
    this.invView.transform_w1lst9$(result.lowerRight.set_y2kzbl$(this.right, this.bottom, -z));
  };
  OrthographicCamera.prototype.isInFrustum_2qa7tb$ = function (globalCenter, globalRadius) {
    this.tmpNodeCenter_dwzowq$_0.set_czzhiu$(globalCenter);
    this.tmpNodeCenter_dwzowq$_0.subtract_czzhiu$(this.globalPos);
    var x = this.tmpNodeCenter_dwzowq$_0.dot_czzhiu$(this.globalRight);
    if (x > this.right + globalRadius || x < this.left - globalRadius) {
      return false;
    }
    var y = this.tmpNodeCenter_dwzowq$_0.dot_czzhiu$(this.globalUp);
    if (y > this.top + globalRadius || y < this.bottom - globalRadius) {
      return false;
    }
    var z = this.tmpNodeCenter_dwzowq$_0.dot_czzhiu$(this.globalLookDir);
    if (z > this.far + globalRadius || z < this.near - globalRadius) {
      return false;
    }
    return true;
  };
  OrthographicCamera.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OrthographicCamera',
    interfaces: [Camera]
  };
  function PerspectiveCamera(name) {
    if (name === void 0)
      name = 'perspectiveCam';
    Camera.call(this, name);
    this.clipNear = 0.1;
    this.clipFar = 100.0;
    this.fovy = 60.0;
    this.fovX_7k9npl$_0 = 0.0;
    this.sphereFacX_87yued$_0 = 1.0;
    this.sphereFacY_87yuf8$_0 = 1.0;
    this.tangX_ey6fwg$_0 = 1.0;
    this.tangY_ey6fvl$_0 = 1.0;
    this.tmpNodeCenter_hw7d0$_0 = MutableVec3f_init();
  }
  Object.defineProperty(PerspectiveCamera.prototype, 'fovX', {
    get: function () {
      return this.fovX_7k9npl$_0;
    },
    set: function (fovX) {
      this.fovX_7k9npl$_0 = fovX;
    }
  });
  PerspectiveCamera.prototype.updateProjectionMatrix = function () {
    this.proj.setPerspective_7b5o5w$(this.fovy, this.aspectRatio, this.clipNear, this.clipFar);
    var angY = this.fovy * package$math.DEG_2_RAD / 2.0;
    this.sphereFacY_87yuf8$_0 = 1.0 / Math_0.cos(angY);
    this.tangY_ey6fvl$_0 = Math_0.tan(angY);
    var x = this.tangY_ey6fvl$_0 * this.aspectRatio;
    var angX = Math_0.atan(x);
    this.sphereFacX_87yued$_0 = 1.0 / Math_0.cos(angX);
    this.tangX_ey6fwg$_0 = Math_0.tan(angX);
    this.fovX = angX * 2 * package$math.RAD_2_DEG;
  };
  PerspectiveCamera.prototype.computeFrustumPlane_jwr40o$ = function (z, result) {
    var x = z * this.tangX_ey6fwg$_0;
    var y = z * this.tangY_ey6fvl$_0;
    this.invView.transform_w1lst9$(result.upperLeft.set_y2kzbl$(-x, y, -z));
    this.invView.transform_w1lst9$(result.upperRight.set_y2kzbl$(x, y, -z));
    this.invView.transform_w1lst9$(result.lowerLeft.set_y2kzbl$(-x, -y, -z));
    this.invView.transform_w1lst9$(result.lowerRight.set_y2kzbl$(x, -y, -z));
  };
  PerspectiveCamera.prototype.isInFrustum_2qa7tb$ = function (globalCenter, globalRadius) {
    this.tmpNodeCenter_hw7d0$_0.set_czzhiu$(globalCenter);
    this.tmpNodeCenter_hw7d0$_0.subtract_czzhiu$(this.globalPos);
    var z = this.tmpNodeCenter_hw7d0$_0.dot_czzhiu$(this.globalLookDir);
    if (z > this.clipFar + globalRadius || z < this.clipNear - globalRadius) {
      return false;
    }
    var y = this.tmpNodeCenter_hw7d0$_0.dot_czzhiu$(this.globalUp);
    var d = globalRadius * this.sphereFacY_87yuf8$_0;
    z *= this.tangY_ey6fvl$_0;
    if (y > z + d || y < -z - d) {
      return false;
    }
    var x = this.tmpNodeCenter_hw7d0$_0.dot_czzhiu$(this.globalRight);
    d = globalRadius * this.sphereFacX_87yued$_0;
    z *= this.aspectRatio;
    if (x > z + d || x < -z - d) {
      return false;
    }
    return true;
  };
  PerspectiveCamera.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PerspectiveCamera',
    interfaces: [Camera]
  };
  function FrustumPlane() {
    this.upperLeft = MutableVec3f_init();
    this.upperRight = MutableVec3f_init();
    this.lowerLeft = MutableVec3f_init();
    this.lowerRight = MutableVec3f_init();
  }
  FrustumPlane.prototype.set_lj9zd1$ = function (other) {
    this.upperLeft.set_czzhiu$(other.upperLeft);
    this.upperRight.set_czzhiu$(other.upperRight);
    this.lowerLeft.set_czzhiu$(other.lowerLeft);
    this.lowerRight.set_czzhiu$(other.lowerRight);
  };
  FrustumPlane.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FrustumPlane',
    interfaces: []
  };
  function doublePrecisionTransform(name, block) {
    if (name === void 0)
      name = null;
    var root = new DoublePrecisionRoot(new TransformGroupDp((name != null ? name : 'DoublePrecisionRoot') + '-rootGroup'), name);
    block(root.root);
    return root;
  }
  function DoublePrecisionRoot(root, name) {
    if (name === void 0)
      name = null;
    Node.call(this, name);
    this.root = root;
    this.modelMatDp_0 = new Mat4dStack();
    this.modelMatDp_0.setIdentity();
    this.root.parent = this;
  }
  DoublePrecisionRoot.prototype.onSceneChanged_9srkog$ = function (oldScene, newScene) {
    Node.prototype.onSceneChanged_9srkog$.call(this, oldScene, newScene);
    this.root.scene = newScene;
  };
  DoublePrecisionRoot.prototype.preRender_aemszp$ = function (ctx) {
    this.modelMatDp_0.set_d4zu6j$(ctx.mvpState.modelMatrix);
    this.root.preRenderDp_oxz17o$(ctx, this.modelMatDp_0);
    Node.prototype.preRender_aemszp$.call(this, ctx);
  };
  DoublePrecisionRoot.prototype.render_aemszp$ = function (ctx) {
    this.modelMatDp_0.set_d4zu6j$(ctx.mvpState.modelMatrix);
    this.root.renderDp_oxz17o$(ctx, this.modelMatDp_0);
    Node.prototype.render_aemszp$.call(this, ctx);
  };
  DoublePrecisionRoot.prototype.postRender_aemszp$ = function (ctx) {
    this.root.postRender_aemszp$(ctx);
    Node.prototype.postRender_aemszp$.call(this, ctx);
  };
  DoublePrecisionRoot.prototype.dispose_aemszp$ = function (ctx) {
    this.root.dispose_aemszp$(ctx);
    Node.prototype.dispose_aemszp$.call(this, ctx);
  };
  DoublePrecisionRoot.prototype.rayTest_jljx4v$ = function (test) {
    this.root.rayTest_jljx4v$(test);
    Node.prototype.rayTest_jljx4v$.call(this, test);
  };
  DoublePrecisionRoot.prototype.get_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = Node.prototype.get_61zpoe$.call(this, name)) != null ? tmp$ : this.root.get_61zpoe$(name);
  };
  DoublePrecisionRoot.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DoublePrecisionRoot',
    interfaces: [Node]
  };
  function NodeDp(name) {
    if (name === void 0)
      name = null;
    Node.call(this, name);
  }
  NodeDp.prototype.preRenderDp_oxz17o$ = function (ctx, modelMatDp) {
    this.preRender_aemszp$(ctx);
  };
  NodeDp.prototype.renderDp_oxz17o$ = function (ctx, modelMatDp) {
    this.render_aemszp$(ctx);
  };
  NodeDp.prototype.toGlobalCoordsDp_j7uy7i$$default = function (vec, w) {
    var tmp$;
    tmp$ = this.parent;
    if (tmp$ == null) {
      return vec;
    }
    var p = tmp$;
    if (Kotlin.isType(p, NodeDp)) {
      p.toGlobalCoordsDp_j7uy7i$(vec, w);
    }
    return vec;
  };
  NodeDp.prototype.toGlobalCoordsDp_j7uy7i$ = function (vec, w, callback$default) {
    if (w === void 0)
      w = 1.0;
    return callback$default ? callback$default(vec, w) : this.toGlobalCoordsDp_j7uy7i$$default(vec, w);
  };
  NodeDp.prototype.toLocalCoordsDp_j7uy7i$$default = function (vec, w) {
    var tmp$;
    tmp$ = this.parent;
    if (tmp$ == null) {
      return vec;
    }
    var p = tmp$;
    if (Kotlin.isType(p, NodeDp)) {
      p.toLocalCoordsDp_j7uy7i$(vec, w);
    }
    return vec;
  };
  NodeDp.prototype.toLocalCoordsDp_j7uy7i$ = function (vec, w, callback$default) {
    if (w === void 0)
      w = 1.0;
    return callback$default ? callback$default(vec, w) : this.toLocalCoordsDp_j7uy7i$$default(vec, w);
  };
  NodeDp.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NodeDp',
    interfaces: [Node]
  };
  function NodeProxy(node) {
    NodeDp.call(this, node.name);
    this.node = node;
    this.node.parent = this;
  }
  Object.defineProperty(NodeProxy.prototype, 'bounds', {
    get: function () {
      return this.node.bounds;
    }
  });
  Object.defineProperty(NodeProxy.prototype, 'globalCenter', {
    get: function () {
      return this.node.globalCenter;
    }
  });
  Object.defineProperty(NodeProxy.prototype, 'globalRadius', {
    get: function () {
      return this.node.globalRadius;
    },
    set: function (f) {
    }
  });
  NodeProxy.prototype.onSceneChanged_9srkog$ = function (oldScene, newScene) {
    NodeDp.prototype.onSceneChanged_9srkog$.call(this, oldScene, newScene);
    this.node.scene = newScene;
  };
  NodeProxy.prototype.preRender_aemszp$ = function (ctx) {
    this.node.preRender_aemszp$(ctx);
    NodeDp.prototype.preRender_aemszp$.call(this, ctx);
  };
  NodeProxy.prototype.render_aemszp$ = function (ctx) {
    this.node.render_aemszp$(ctx);
    NodeDp.prototype.render_aemszp$.call(this, ctx);
  };
  NodeProxy.prototype.postRender_aemszp$ = function (ctx) {
    this.node.postRender_aemszp$(ctx);
    NodeDp.prototype.postRender_aemszp$.call(this, ctx);
  };
  NodeProxy.prototype.dispose_aemszp$ = function (ctx) {
    this.node.dispose_aemszp$(ctx);
    NodeDp.prototype.dispose_aemszp$.call(this, ctx);
  };
  NodeProxy.prototype.rayTest_jljx4v$ = function (test) {
    this.node.rayTest_jljx4v$(test);
  };
  NodeProxy.prototype.get_61zpoe$ = function (name) {
    return this.node.get_61zpoe$(name);
  };
  NodeProxy.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NodeProxy',
    interfaces: [NodeDp]
  };
  function transformGroupDp(name, block) {
    if (name === void 0)
      name = null;
    var tg = new TransformGroupDp(name);
    block(tg);
    return tg;
  }
  function TransformGroupDp(name) {
    if (name === void 0)
      name = null;
    NodeDp.call(this, name);
    this.children = ArrayList_init_0();
    this.tmpBounds = new BoundingBox();
    this.transform = new Mat4d();
    this.invTransform = new Mat4d();
    this.isIdentity = false;
    this.isDirty = false;
    this.tmpTransformVec_fqdmwo$_0 = MutableVec3f_init();
  }
  Object.defineProperty(TransformGroupDp.prototype, 'size', {
    get: function () {
      return this.children.size;
    }
  });
  TransformGroupDp.prototype.onSceneChanged_9srkog$ = function (oldScene, newScene) {
    var tmp$;
    NodeDp.prototype.onSceneChanged_9srkog$.call(this, oldScene, newScene);
    tmp$ = this.children;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.children.get_za3lpa$(i).scene = newScene;
    }
  };
  TransformGroupDp.prototype.checkInverse = function () {
    if (this.isDirty) {
      this.transform.invert_23yxad$(this.invTransform);
      this.isDirty = false;
    }
  };
  TransformGroupDp.prototype.setDirty = function () {
    this.isDirty = true;
    this.isIdentity = false;
  };
  TransformGroupDp.prototype.preRenderDp_oxz17o$ = function (ctx, modelMatDp) {
    var tmp$;
    var wasIdentity = this.isIdentity;
    if (!wasIdentity) {
      modelMatDp.push().mul_d4zu6l$(this.transform);
      ctx.mvpState.modelMatrix.set_d4zu6l$(modelMatDp);
      ctx.mvpState.update_aemszp$(ctx);
    }
    this.tmpBounds.clear();
    tmp$ = this.children;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.children.get_za3lpa$(i).preRenderDp_oxz17o$(ctx, modelMatDp);
      this.tmpBounds.add_ea4od8$(this.children.get_za3lpa$(i).bounds);
    }
    this.bounds.set_ea4od8$(this.tmpBounds);
    if (!this.bounds.isEmpty && !wasIdentity) {
      this.tmpBounds.clear();
      this.tmpBounds.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_fqdmwo$_0.set_y2kzbl$(this.bounds.min.x, this.bounds.min.y, this.bounds.min.z), 1.0));
      this.tmpBounds.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_fqdmwo$_0.set_y2kzbl$(this.bounds.min.x, this.bounds.min.y, this.bounds.max.z), 1.0));
      this.tmpBounds.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_fqdmwo$_0.set_y2kzbl$(this.bounds.min.x, this.bounds.max.y, this.bounds.min.z), 1.0));
      this.tmpBounds.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_fqdmwo$_0.set_y2kzbl$(this.bounds.min.x, this.bounds.max.y, this.bounds.max.z), 1.0));
      this.tmpBounds.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_fqdmwo$_0.set_y2kzbl$(this.bounds.max.x, this.bounds.min.y, this.bounds.min.z), 1.0));
      this.tmpBounds.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_fqdmwo$_0.set_y2kzbl$(this.bounds.max.x, this.bounds.min.y, this.bounds.max.z), 1.0));
      this.tmpBounds.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_fqdmwo$_0.set_y2kzbl$(this.bounds.max.x, this.bounds.max.y, this.bounds.min.z), 1.0));
      this.tmpBounds.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_fqdmwo$_0.set_y2kzbl$(this.bounds.max.x, this.bounds.max.y, this.bounds.max.z), 1.0));
      this.bounds.set_ea4od8$(this.tmpBounds);
    }
    if (!wasIdentity) {
      modelMatDp.pop();
      ctx.mvpState.modelMatrix.set_d4zu6l$(modelMatDp);
      ctx.mvpState.update_aemszp$(ctx);
    }
    NodeDp.prototype.preRenderDp_oxz17o$.call(this, ctx, modelMatDp);
  };
  TransformGroupDp.prototype.renderDp_oxz17o$ = function (ctx, modelMatDp) {
    var tmp$;
    if (this.isVisible) {
      var wasIdentity = this.isIdentity;
      if (!wasIdentity) {
        modelMatDp.push().mul_d4zu6l$(this.transform);
        ctx.mvpState.modelMatrix.set_d4zu6l$(modelMatDp);
        ctx.mvpState.update_aemszp$(ctx);
      }
      NodeDp.prototype.renderDp_oxz17o$.call(this, ctx, modelMatDp);
      if (this.isRendered) {
        tmp$ = this.children;
        for (var i = 0; i !== tmp$.size; ++i) {
          if (ctx.renderPass !== RenderPass$SHADOW_getInstance() || this.children.get_za3lpa$(i).isCastingShadow) {
            this.children.get_za3lpa$(i).renderDp_oxz17o$(ctx, modelMatDp);
          }
        }
      }
      if (!wasIdentity) {
        modelMatDp.pop();
        ctx.mvpState.modelMatrix.set_d4zu6l$(modelMatDp);
        ctx.mvpState.update_aemszp$(ctx);
      }
    }
  };
  TransformGroupDp.prototype.toGlobalCoords_w1lst9$$default = function (vec, w) {
    if (!this.isIdentity) {
      this.transform.transform_w1lst9$(vec, w);
    }
    return this.toGlobalCoords_w1lst9$(vec, w, NodeDp.prototype.toGlobalCoords_w1lst9$$default.bind(this));
  };
  TransformGroupDp.prototype.toLocalCoords_w1lst9$$default = function (vec, w) {
    this.toLocalCoords_w1lst9$(vec, w, NodeDp.prototype.toLocalCoords_w1lst9$$default.bind(this));
    if (!this.isIdentity) {
      this.checkInverse();
      return this.invTransform.transform_w1lst9$(vec, w);
    }
     else {
      return vec;
    }
  };
  TransformGroupDp.prototype.toGlobalCoordsDp_j7uy7i$$default = function (vec, w) {
    if (!this.isIdentity) {
      this.transform.transform_j7uy7i$(vec, w);
    }
    return this.toGlobalCoordsDp_j7uy7i$(vec, w, NodeDp.prototype.toGlobalCoordsDp_j7uy7i$$default.bind(this));
  };
  TransformGroupDp.prototype.toLocalCoordsDp_j7uy7i$$default = function (vec, w) {
    this.toLocalCoordsDp_j7uy7i$(vec, w, NodeDp.prototype.toLocalCoordsDp_j7uy7i$$default.bind(this));
    if (!this.isIdentity) {
      this.checkInverse();
      return this.invTransform.transform_j7uy7i$(vec, w);
    }
     else {
      return vec;
    }
  };
  TransformGroupDp.prototype.rayTest_jljx4v$ = function (test) {
    if (!this.isIdentity) {
      this.checkInverse();
      this.invTransform.transform_w1lst9$(test.ray.origin, 1.0);
      this.invTransform.transform_w1lst9$(test.ray.direction, 0.0);
    }
    NodeDp.prototype.rayTest_jljx4v$.call(this, test);
    if (!this.isIdentity) {
      this.transform.transform_w1lst9$(test.ray.origin, 1.0);
      this.transform.transform_w1lst9$(test.ray.direction, 0.0);
    }
  };
  TransformGroupDp.prototype.getTransform_d4zu6l$ = function (result) {
    return result.set_d4zu6l$(this.transform);
  };
  TransformGroupDp.prototype.getInverseTransform_d4zu6l$ = function (result) {
    return result.set_d4zu6l$(this.invTransform);
  };
  TransformGroupDp.prototype.translate_czzhiw$ = function (t) {
    return this.translate_yvo9jy$(t.x, t.y, t.z);
  };
  TransformGroupDp.prototype.translate_yvo9jy$ = function (tx, ty, tz) {
    this.transform.translate_yvo9jy$(tx, ty, tz);
    this.setDirty();
    return this;
  };
  TransformGroupDp.prototype.rotate_5820x2$ = function (angleDeg, axis) {
    return this.rotate_6y0v78$(angleDeg, axis.x, axis.y, axis.z);
  };
  TransformGroupDp.prototype.rotate_6y0v78$ = function (angleDeg, axX, axY, axZ) {
    this.transform.rotate_6y0v78$(angleDeg, axX, axY, axZ);
    this.setDirty();
    return this;
  };
  TransformGroupDp.prototype.scale_yvo9jy$ = function (sx, sy, sz) {
    this.transform.scale_yvo9jy$(sx, sy, sz);
    this.setDirty();
    return this;
  };
  TransformGroupDp.prototype.mul_d4zu6l$ = function (mat) {
    this.transform.mul_d4zu6l$(mat);
    this.setDirty();
    return this;
  };
  TransformGroupDp.prototype.set_d4zu6l$ = function (mat) {
    this.transform.set_d4zu6l$(mat);
    this.setDirty();
    return this;
  };
  TransformGroupDp.prototype.setIdentity = function () {
    this.transform.setIdentity();
    this.invTransform.setIdentity();
    this.isDirty = false;
    this.isIdentity = true;
    return this;
  };
  TransformGroupDp.prototype.addNode_mvx38y$$default = function (node, index) {
    if (index >= 0) {
      this.children.add_wxm5ur$(index, node);
    }
     else {
      this.children.add_11rb$(node);
    }
    node.parent = this;
    this.bounds.add_ea4od8$(node.bounds);
  };
  TransformGroupDp.prototype.addNode_mvx38y$ = function (node, index, callback$default) {
    if (index === void 0)
      index = -1;
    callback$default ? callback$default(node, index) : this.addNode_mvx38y$$default(node, index);
  };
  TransformGroupDp.prototype.removeNode_v64n5s$ = function (node) {
    if (this.children.remove_11rb$(node)) {
      node.parent = null;
      return true;
    }
    return false;
  };
  TransformGroupDp.prototype.containsNode_v64n5s$ = function (node) {
    return this.children.contains_11rb$(node);
  };
  TransformGroupDp.prototype.plusAssign_v64n5s$ = function (node) {
    this.addNode_mvx38y$(node);
  };
  TransformGroupDp.prototype.minusAssign_v64n5s$ = function (node) {
    this.removeNode_v64n5s$(node);
  };
  TransformGroupDp.prototype.unaryPlus_s5ktn5$ = function ($receiver) {
    this.addNode_mvx38y$($receiver);
  };
  TransformGroupDp.prototype.unaryPlus_uv0sim$ = function ($receiver) {
    this.addNode_mvx38y$(new NodeProxy($receiver));
  };
  TransformGroupDp.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TransformGroupDp',
    interfaces: [NodeDp]
  };
  function Comparator$ObjectLiteral_3(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_3.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_3.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_3 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function group(name, block) {
    if (name === void 0)
      name = null;
    var grp = new Group(name);
    block(grp);
    return grp;
  }
  function Group(name) {
    if (name === void 0)
      name = null;
    Node.call(this, name);
    this.intChildren = ArrayList_init_0();
    this.childrenBounds = new BoundingBox();
  }
  Object.defineProperty(Group.prototype, 'children', {
    get: function () {
      return this.intChildren;
    }
  });
  Object.defineProperty(Group.prototype, 'size', {
    get: function () {
      return this.intChildren.size;
    }
  });
  Group.prototype.onSceneChanged_9srkog$ = function (oldScene, newScene) {
    var tmp$;
    Node.prototype.onSceneChanged_9srkog$.call(this, oldScene, newScene);
    tmp$ = this.intChildren;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.intChildren.get_za3lpa$(i).scene = newScene;
    }
  };
  Group.prototype.preRender_aemszp$ = function (ctx) {
    var tmp$;
    this.childrenBounds.clear();
    tmp$ = this.intChildren;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.intChildren.get_za3lpa$(i).preRender_aemszp$(ctx);
      this.childrenBounds.add_ea4od8$(this.intChildren.get_za3lpa$(i).bounds);
    }
    this.setLocalBounds();
    Node.prototype.preRender_aemszp$.call(this, ctx);
  };
  Group.prototype.setLocalBounds = function () {
    this.bounds.set_ea4od8$(this.childrenBounds);
  };
  Group.prototype.render_aemszp$ = function (ctx) {
    var tmp$;
    Node.prototype.render_aemszp$.call(this, ctx);
    if (this.isRendered) {
      tmp$ = this.intChildren;
      for (var i = 0; i !== tmp$.size; ++i) {
        if (ctx.renderPass !== RenderPass$SHADOW_getInstance() || this.intChildren.get_za3lpa$(i).isCastingShadow) {
          this.intChildren.get_za3lpa$(i).render_aemszp$(ctx);
        }
      }
    }
  };
  Group.prototype.postRender_aemszp$ = function (ctx) {
    var tmp$;
    tmp$ = this.intChildren;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.intChildren.get_za3lpa$(i).postRender_aemszp$(ctx);
    }
    Node.prototype.postRender_aemszp$.call(this, ctx);
  };
  Group.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$;
    Node.prototype.dispose_aemszp$.call(this, ctx);
    tmp$ = this.intChildren;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.intChildren.get_za3lpa$(i).dispose_aemszp$(ctx);
    }
  };
  Group.prototype.get_61zpoe$ = function (name) {
    var tmp$;
    if (equals(name, this.name)) {
      return this;
    }
    tmp$ = this.intChildren;
    for (var i = 0; i !== tmp$.size; ++i) {
      var node = this.intChildren.get_za3lpa$(i).get_61zpoe$(name);
      if (node != null) {
        return node;
      }
    }
    return null;
  };
  Group.prototype.rayTest_jljx4v$ = function (test) {
    var tmp$;
    tmp$ = this.intChildren;
    for (var i = 0; i !== tmp$.size; ++i) {
      var child = this.intChildren.get_za3lpa$(i);
      if (child.isPickable && child.isVisible) {
        var d = child.bounds.hitDistanceSqr_nvyeur$(test.ray);
        if (d < kotlin_js_internal_FloatCompanionObject.MAX_VALUE && d <= test.hitDistanceSqr) {
          child.rayTest_jljx4v$(test);
        }
      }
    }
  };
  Group.prototype.addNode_xtids1$$default = function (node, index) {
    if (index >= 0) {
      this.intChildren.add_wxm5ur$(index, node);
    }
     else {
      this.intChildren.add_11rb$(node);
    }
    node.parent = this;
    this.bounds.add_ea4od8$(node.bounds);
  };
  Group.prototype.addNode_xtids1$ = function (node, index, callback$default) {
    if (index === void 0)
      index = -1;
    callback$default ? callback$default(node, index) : this.addNode_xtids1$$default(node, index);
  };
  Group.prototype.sortChildrenBy_mq7kdd$ = function (selector) {
    var $receiver = this.intChildren;
    if ($receiver.size > 1) {
      sortWith($receiver, new Comparator$ObjectLiteral_3(compareBy$lambda_3(selector)));
    }
  };
  Group.prototype.removeNode_f1kmr1$ = function (node) {
    if (this.intChildren.remove_11rb$(node)) {
      node.parent = null;
      return true;
    }
    return false;
  };
  Group.prototype.removeAllChildren = function () {
    var tmp$;
    tmp$ = this.intChildren;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.intChildren.get_za3lpa$(i).parent = null;
    }
    this.intChildren.clear();
  };
  Group.prototype.containsNode_f1kmr1$ = function (node) {
    return this.intChildren.contains_11rb$(node);
  };
  Group.prototype.plusAssign_f1kmr1$ = function (node) {
    this.addNode_xtids1$(node);
  };
  Group.prototype.minusAssign_f1kmr1$ = function (node) {
    this.removeNode_f1kmr1$(node);
  };
  Group.prototype.unaryPlus_uv0sim$ = function ($receiver) {
    this.addNode_xtids1$($receiver);
  };
  Group.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Group',
    interfaces: [Node]
  };
  function InstancedLodMesh(lodDescs, name, attributes) {
    if (name === void 0)
      name = null;
    if (attributes === void 0)
      attributes = InstancedMesh$Companion_getInstance().MODEL_INSTANCES;
    Group.call(this);
    this.lodDescs = lodDescs;
    this.instances = ArrayList_init_0();
    this.instancedLodMeshes = ArrayList_init_0();
    this.lodInstances_cpo69l$_0 = ArrayList_init_0();
    var tmp$, tmp$_0;
    var index = 0;
    tmp$ = this.lodDescs.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var closure$name = name;
      var closure$attributes = attributes;
      var i = checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0));
      var tmp$_1;
      if (closure$name != null) {
        tmp$_1 = toString(closure$name) + '-lod-' + i;
      }
       else {
        tmp$_1 = null;
      }
      var n = tmp$_1;
      var insts = new InstancedLodMesh$LodInstances(item.maxInstances);
      var mesh = new InstancedMesh(item.meshData, n, insts, closure$attributes);
      this.instancedLodMeshes.add_11rb$(mesh);
      this.lodInstances_cpo69l$_0.add_11rb$(insts);
      this.unaryPlus_uv0sim$(mesh);
    }
  }
  InstancedLodMesh.prototype.preRender_aemszp$ = function (ctx) {
    if (this.isVisible) {
      this.updateInstances_t02h72$_0(ctx);
    }
    Group.prototype.preRender_aemszp$.call(this, ctx);
  };
  InstancedLodMesh.prototype.updateInstances_t02h72$_0 = function (ctx) {
    var tmp$, tmp$_0, tmp$_1;
    var cam = (tmp$ = this.scene) != null ? tmp$.camera : null;
    if (cam != null) {
      var tmpVec = MutableVec3f_init();
      tmp$_0 = this.lodInstances_cpo69l$_0;
      for (var i = 0; i !== tmp$_0.size; ++i) {
        this.lodInstances_cpo69l$_0.get_za3lpa$(i).clearInstances();
      }
      tmp$_1 = this.instances;
      for (var i_0 = 0; i_0 !== tmp$_1.size; ++i_0) {
        var tmp$_2;
        var inst = this.instances.get_za3lpa$(i_0);
        inst.lod = -1;
        ctx.mvpState.modelMatrix.transform_w1lst9$(tmpVec.set_czzhiu$(inst.localOrigin));
        if (cam.isInFrustum_2qa7tb$(tmpVec, inst.radius)) {
          var camDist = cam.globalPos.distance_czzhiu$(tmpVec);
          tmp$_2 = this.lodDescs;
          for (var j = 0; j !== tmp$_2.size; ++j) {
            if (this.lodDescs.get_za3lpa$(j).inRange_mx4ult$(camDist)) {
              inst.lod = j;
              this.lodInstances_cpo69l$_0.get_za3lpa$(j).addInstance_m661aa$(inst);
              break;
            }
          }
        }
      }
    }
  };
  function InstancedLodMesh$LodDesc(meshData, minDist, maxDist, isCastingShadows, maxInstances) {
    this.meshData = meshData;
    this.minDist = minDist;
    this.maxDist = maxDist;
    this.isCastingShadows = isCastingShadows;
    this.maxInstances = maxInstances;
  }
  InstancedLodMesh$LodDesc.prototype.inRange_mx4ult$ = function (dist) {
    return dist >= this.minDist && dist <= this.maxDist;
  };
  InstancedLodMesh$LodDesc.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LodDesc',
    interfaces: []
  };
  function InstancedLodMesh$LodInstances(maxInstances) {
    InstancedMesh$Instances.call(this, maxInstances);
  }
  InstancedLodMesh$LodInstances.prototype.isIncludeInstance_fkvpwf$ = function (instance, localPos, cam, ctx) {
    return true;
  };
  InstancedLodMesh$LodInstances.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LodInstances',
    interfaces: [InstancedMesh$Instances]
  };
  InstancedLodMesh.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InstancedLodMesh',
    interfaces: [Group]
  };
  function LodInstance() {
    InstancedMesh$Instance.call(this, new Mat4f());
    this.localOrigin = MutableVec3f_init();
    this.lod = -1;
  }
  LodInstance.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LodInstance',
    interfaces: [InstancedMesh$Instance]
  };
  function InstancedMesh(meshData, name, instances, attributes) {
    InstancedMesh$Companion_getInstance();
    if (name === void 0)
      name = null;
    if (instances === void 0)
      instances = InstancedMesh$Companion_getInstance().identityInstance();
    if (attributes === void 0)
      attributes = InstancedMesh$Companion_getInstance().MODEL_INSTANCES;
    Mesh.call(this, meshData, name);
    this.instances = instances;
    this.attributes = attributes;
    this.instanceBuffer_enbm6w$_0 = null;
    this.instanceBinders_ctiejn$_0 = LinkedHashMap_init();
    this.instanceStride_lhoub3$_0 = 0;
    this.rayTest = MeshRayTest$Companion_getInstance().nopTest();
    var tmp$;
    var sum = 0;
    tmp$ = this.attributes.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      sum = sum + (element.type.size * 4 | 0) | 0;
    }
    this.instanceStride_lhoub3$_0 = sum;
    var $receiver = this.attributes;
    var destination = ArrayList_init_0();
    var tmp$_0;
    tmp$_0 = $receiver.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      if (element_0.divisor === 0)
        destination.add_11rb$(element_0);
    }
    var tmp$_1;
    tmp$_1 = destination.iterator();
    while (tmp$_1.hasNext()) {
      var element_1 = tmp$_1.next();
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'InstancedMesh attribute ' + element_1.name + ' has divisor = 0');
      }
    }
  }
  Object.defineProperty(InstancedMesh.prototype, 'bounds', {
    get: function () {
      return this.instances.bounds;
    }
  });
  InstancedMesh.prototype.preRender_aemszp$ = function (ctx) {
    Mesh.prototype.preRender_aemszp$.call(this, ctx);
    if (this.isVisible) {
      this.instances.setupInstances_yqauzk$(this, ctx);
    }
  };
  InstancedMesh.prototype.getAttributeBinder_mczodr$ = function (attrib) {
    var tmp$;
    return (tmp$ = this.instanceBinders_ctiejn$_0.get_11rb$(attrib)) != null ? tmp$ : Mesh.prototype.getAttributeBinder_mczodr$.call(this, attrib);
  };
  InstancedMesh.prototype.render_aemszp$ = function (ctx) {
    var tmp$;
    if (this.instanceBuffer_enbm6w$_0 == null) {
      this.instanceBuffer_enbm6w$_0 = BufferResource$Companion_getInstance().create_2shagh$(34962, ctx);
      var pos = {v: 0};
      var tmp$_0;
      tmp$_0 = this.attributes.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        var $receiver = this.instanceBinders_ctiejn$_0;
        var value = new VboBinder(ensureNotNull(this.instanceBuffer_enbm6w$_0), element.type.size, this.instanceStride_lhoub3$_0, pos.v, 5126);
        $receiver.put_xwzc9p$(element, value);
        pos.v = pos.v + element.type.size | 0;
      }
    }
    if ((tmp$ = this.instances.instanceData) != null) {
      ensureNotNull(this.instanceBuffer_enbm6w$_0).setData_wcsk4b$(tmp$, 35048, ctx);
    }
    var wasFrustumChecked = this.isFrustumChecked;
    this.isFrustumChecked = false;
    Mesh.prototype.render_aemszp$.call(this, ctx);
    this.isFrustumChecked = wasFrustumChecked;
  };
  InstancedMesh.prototype.drawElements_aemszp$ = function (ctx) {
    glDrawElementsInstanced(this.meshData.primitiveType, this.meshData.numIndices, this.meshData.indexType, 0, this.instances.numInstances);
  };
  InstancedMesh.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$;
    Mesh.prototype.dispose_aemszp$.call(this, ctx);
    (tmp$ = this.instanceBuffer_enbm6w$_0) != null ? (tmp$.delete_aemszp$(ctx), Unit) : null;
    this.instanceBuffer_enbm6w$_0 = null;
    this.instanceBinders_ctiejn$_0.clear();
  };
  function InstancedMesh$Instance(modelMat) {
    this.modelMat = modelMat;
    this.radius = 1.0;
  }
  InstancedMesh$Instance.prototype.putInstanceAttributes_he122g$ = function (target) {
    target.put_q3cr5i$(this.modelMat.matrix);
  };
  InstancedMesh$Instance.prototype.getLocalOrigin_5s4mqq$ = function (result) {
    return this.modelMat.transform_w1lst9$(result.set_czzhiu$(Vec3f$Companion_getInstance().ZERO));
  };
  InstancedMesh$Instance.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Instance',
    interfaces: []
  };
  function InstancedMesh$Instances(maxInstances) {
    this.instances = ArrayList_init_0();
    this.bounds = new BoundingBox();
    this.maxInstances_dqdtpv$_0 = maxInstances;
    this.instanceData_52xgya$_0 = null;
    this.numInstances_nbmnv9$_0 = 0;
    this.tmpVec_hx22mo$_0 = MutableVec3f_init();
  }
  Object.defineProperty(InstancedMesh$Instances.prototype, 'maxInstances', {
    get: function () {
      return this.maxInstances_dqdtpv$_0;
    },
    set: function (value) {
      this.maxInstances_dqdtpv$_0 = value;
      this.instanceData = null;
    }
  });
  Object.defineProperty(InstancedMesh$Instances.prototype, 'instanceData', {
    get: function () {
      return this.instanceData_52xgya$_0;
    },
    set: function (instanceData) {
      this.instanceData_52xgya$_0 = instanceData;
    }
  });
  Object.defineProperty(InstancedMesh$Instances.prototype, 'numInstances', {
    get: function () {
      return this.numInstances_nbmnv9$_0;
    },
    set: function (numInstances) {
      this.numInstances_nbmnv9$_0 = numInstances;
    }
  });
  InstancedMesh$Instances.prototype.clearInstances = function () {
    this.instances.clear();
  };
  InstancedMesh$Instances.prototype.addInstance_m661aa$ = function (instance) {
    this.instances.add_11rb$(instance);
  };
  InstancedMesh$Instances.prototype.addInstances_tzquvz$ = function (instance) {
    addAll(this.instances, instance);
  };
  InstancedMesh$Instances.prototype.plusAssign_m661aa$ = function (instance) {
    this.addInstance_m661aa$(instance);
  };
  InstancedMesh$Instances.prototype.setupInstances_yqauzk$ = function (mesh, ctx) {
    var tmp$;
    var tmp$_0;
    if ((tmp$ = this.instanceData) != null)
      tmp$_0 = tmp$;
    else {
      var $receiver = createFloat32Buffer(Kotlin.imul(this.maxInstances, mesh.instanceStride_lhoub3$_0));
      this.instanceData = $receiver;
      tmp$_0 = $receiver;
    }
    var data = tmp$_0;
    data.clear();
    this.bounds.clear();
    this.numInstances = 0;
    this.putInstanceData_v9xxlg$(data, mesh, ctx);
  };
  InstancedMesh$Instances.prototype.putInstanceData_v9xxlg$ = function (target, mesh, ctx) {
    var tmp$, tmp$_0, tmp$_1;
    var cam = (tmp$ = mesh.scene) != null ? tmp$.camera : null;
    if (mesh.isFrustumChecked && cam != null) {
      tmp$_0 = this.instances;
      for (var i = 0; i !== tmp$_0.size; ++i) {
        this.instances.get_za3lpa$(i).getLocalOrigin_5s4mqq$(this.tmpVec_hx22mo$_0);
        this.bounds.add_czzhiu$(this.tmpVec_hx22mo$_0);
        if (this.isIncludeInstance_fkvpwf$(this.instances.get_za3lpa$(i), this.tmpVec_hx22mo$_0, cam, ctx)) {
          this.putInstance_uo5pze$(this.instances.get_za3lpa$(i), target);
        }
        if (this.numInstances === this.maxInstances) {
          break;
        }
      }
      if (!this.bounds.isEmpty) {
        this.tmpVec_hx22mo$_0.set_czzhiu$(mesh.meshData.bounds.size).scale_mx4ult$(0.5);
        this.bounds.expand_czzhiu$(this.tmpVec_hx22mo$_0);
      }
    }
     else {
      var a = this.instances.size;
      var b = this.maxInstances;
      tmp$_1 = Math_0.min(a, b);
      for (var i_0 = 0; i_0 < tmp$_1; i_0++) {
        this.putInstance_uo5pze$(this.instances.get_za3lpa$(i_0), target);
      }
    }
  };
  InstancedMesh$Instances.prototype.isIncludeInstance_fkvpwf$ = function (instance, localPos, cam, ctx) {
    ctx.mvpState.modelMatrix.transform_w1lst9$(this.tmpVec_hx22mo$_0);
    return cam.isInFrustum_2qa7tb$(this.tmpVec_hx22mo$_0, instance.radius);
  };
  InstancedMesh$Instances.prototype.putInstance_uo5pze$ = function (instance, target) {
    if (this.numInstances < this.maxInstances) {
      instance.putInstanceAttributes_he122g$(target);
      this.numInstances = this.numInstances + 1 | 0;
    }
     else {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Discarding instance: max instance count reached');
      }
    }
  };
  InstancedMesh$Instances.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Instances',
    interfaces: []
  };
  function InstancedMesh$SimpleInstances(maxInstances) {
    InstancedMesh$Instances.call(this, maxInstances);
  }
  InstancedMesh$SimpleInstances.prototype.addInstance_d4zu6j$ = function (modelMat) {
    var $receiver = this.instances;
    var element = new InstancedMesh$Instance(modelMat);
    $receiver.add_11rb$(element);
  };
  InstancedMesh$SimpleInstances.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SimpleInstances',
    interfaces: [InstancedMesh$Instances]
  };
  function InstancedMesh$Companion() {
    InstancedMesh$Companion_instance = this;
    var $receiver = new Attribute('attrib_model_insts_0', AttributeType$VEC_4F_getInstance());
    $receiver.glslSrcName = 'attrib_model_insts';
    $receiver.locationOffset = 0;
    $receiver.divisor = 1;
    this.MODEL_INSTANCES_0 = $receiver;
    var $receiver_0 = new Attribute('attrib_model_insts_1', AttributeType$VEC_4F_getInstance());
    $receiver_0.glslSrcName = 'attrib_model_insts';
    $receiver_0.locationOffset = 1;
    $receiver_0.divisor = 1;
    this.MODEL_INSTANCES_1 = $receiver_0;
    var $receiver_1 = new Attribute('attrib_model_insts_2', AttributeType$VEC_4F_getInstance());
    $receiver_1.glslSrcName = 'attrib_model_insts';
    $receiver_1.locationOffset = 2;
    $receiver_1.divisor = 1;
    this.MODEL_INSTANCES_2 = $receiver_1;
    var $receiver_2 = new Attribute('attrib_model_insts_3', AttributeType$VEC_4F_getInstance());
    $receiver_2.glslSrcName = 'attrib_model_insts';
    $receiver_2.locationOffset = 3;
    $receiver_2.divisor = 1;
    this.MODEL_INSTANCES_3 = $receiver_2;
    this.MODEL_INSTANCES = listOf([this.MODEL_INSTANCES_0, this.MODEL_INSTANCES_1, this.MODEL_INSTANCES_2, this.MODEL_INSTANCES_3]);
  }
  InstancedMesh$Companion.prototype.makeAttributeList_j0mu7e$ = function (customAttribs) {
    var attribs = mutableListOf([this.MODEL_INSTANCES_0, this.MODEL_INSTANCES_1, this.MODEL_INSTANCES_2, this.MODEL_INSTANCES_3]);
    addAll_0(attribs, customAttribs);
    return attribs;
  };
  InstancedMesh$Companion.prototype.identityInstance = function () {
    var $receiver = new InstancedMesh$SimpleInstances(1);
    $receiver.addInstance_d4zu6j$((new Mat4f()).setIdentity());
    return $receiver;
  };
  InstancedMesh$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var InstancedMesh$Companion_instance = null;
  function InstancedMesh$Companion_getInstance() {
    if (InstancedMesh$Companion_instance === null) {
      new InstancedMesh$Companion();
    }
    return InstancedMesh$Companion_instance;
  }
  InstancedMesh.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InstancedMesh',
    interfaces: [Mesh]
  };
  function Lighting(scene) {
    this.scene = scene;
    this.primaryLight = new DirectionalLight();
    this.shadowMap_g6ilv9$_0 = null;
    this.isDefaultShadowMap_0 = false;
    this.scene.onPreRender.add_11rb$(Lighting_init$lambda(this));
    this.scene.onDispose.add_11rb$(Lighting_init$lambda_0(this));
  }
  Object.defineProperty(Lighting.prototype, 'shadowMap', {
    get: function () {
      return this.shadowMap_g6ilv9$_0;
    },
    set: function (value) {
      if (this.shadowMap_g6ilv9$_0 != null) {
        this.scene.dispose_ipew3$(ensureNotNull(this.shadowMap_g6ilv9$_0));
      }
      this.shadowMap_g6ilv9$_0 = value;
    }
  });
  Lighting.prototype.useDefaultShadowMap_aemszp$ = function (ctx) {
    this.isDefaultShadowMap_0 = true;
    this.shadowMap = ctx.renderingHints.shadowPreset.createShadowMap_nqmrbr$(ctx.renderingHints);
  };
  Lighting.prototype.useCustomShadowMap_2x728q$ = function (customShadowMap) {
    this.isDefaultShadowMap_0 = false;
    this.shadowMap = customShadowMap;
  };
  Lighting.prototype.disableShadowMap = function () {
    this.isDefaultShadowMap_0 = false;
    this.shadowMap = null;
  };
  Lighting.prototype.onRenderingHintsChanged_aemszp$ = function (ctx) {
    if (this.isDefaultShadowMap_0) {
      this.useDefaultShadowMap_aemszp$(ctx);
    }
  };
  function Lighting_init$lambda(this$Lighting) {
    return function ($receiver, ctx) {
      var tmp$;
      (tmp$ = this$Lighting.shadowMap) != null ? (tmp$.renderShadowMap_x4tdlw$($receiver, ctx), Unit) : null;
      return Unit;
    };
  }
  function Lighting_init$lambda_0(this$Lighting) {
    return function ($receiver, ctx) {
      var tmp$;
      (tmp$ = this$Lighting.shadowMap) != null ? (tmp$.dispose_aemszp$(ctx), Unit) : null;
      return Unit;
    };
  }
  Lighting.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Lighting',
    interfaces: []
  };
  function Light() {
    this.color = MutableColor_init_0(Color$Companion_getInstance().WHITE);
  }
  Light.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Light',
    interfaces: []
  };
  function DirectionalLight() {
    Light.call(this);
    this.direction = new MutableVec3f(1.0, 1.0, 1.0);
  }
  DirectionalLight.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DirectionalLight',
    interfaces: [Light]
  };
  function mesh$lambda(closure$attributes) {
    return function ($receiver) {
      var tmp$, tmp$_0;
      if (closure$attributes.contains_11rb$(Attribute.Companion.NORMALS)) {
        tmp$ = LightModel.PHONG_LIGHTING;
      }
       else {
        tmp$ = LightModel.NO_LIGHTING;
      }
      $receiver.lightModel = tmp$;
      if (closure$attributes.contains_11rb$(Attribute.Companion.TEXTURE_COORDS))
        tmp$_0 = ColorModel.TEXTURE_COLOR;
      else if (closure$attributes.contains_11rb$(Attribute.Companion.COLORS))
        tmp$_0 = ColorModel.VERTEX_COLOR;
      else
        tmp$_0 = ColorModel.STATIC_COLOR;
      $receiver.colorModel = tmp$_0;
      return Unit;
    };
  }
  var mesh = defineInlineFunction('kool.de.fabmax.kool.scene.mesh_ki35ir$', wrapFunction(function () {
    var Attribute = _.de.fabmax.kool.shading.Attribute;
    var mutableSetOf = Kotlin.kotlin.collections.mutableSetOf_i5x0yv$;
    var MeshData_init = _.de.fabmax.kool.scene.MeshData;
    var Mesh_init = _.de.fabmax.kool.scene.Mesh;
    var LightModel = _.de.fabmax.kool.shading.LightModel;
    var ColorModel = _.de.fabmax.kool.shading.ColorModel;
    var Unit = Kotlin.kotlin.Unit;
    var basicShader = _.de.fabmax.kool.shading.basicShader_5qtd3o$;
    function mesh$lambda(closure$attributes) {
      return function ($receiver) {
        var tmp$, tmp$_0;
        if (closure$attributes.contains_11rb$(Attribute.Companion.NORMALS)) {
          tmp$ = LightModel.PHONG_LIGHTING;
        }
         else {
          tmp$ = LightModel.NO_LIGHTING;
        }
        $receiver.lightModel = tmp$;
        if (closure$attributes.contains_11rb$(Attribute.Companion.TEXTURE_COORDS))
          tmp$_0 = ColorModel.TEXTURE_COLOR;
        else if (closure$attributes.contains_11rb$(Attribute.Companion.COLORS))
          tmp$_0 = ColorModel.VERTEX_COLOR;
        else
          tmp$_0 = ColorModel.STATIC_COLOR;
        $receiver.colorModel = tmp$_0;
        return Unit;
      };
    }
    return function (withNormals, withColors, withTexCoords, name, block) {
      if (name === void 0)
        name = null;
      var attributes = mutableSetOf([Attribute.Companion.POSITIONS]);
      if (withNormals) {
        var element = Attribute.Companion.NORMALS;
        attributes.add_11rb$(element);
      }
      if (withColors) {
        var element_0 = Attribute.Companion.COLORS;
        attributes.add_11rb$(element_0);
      }
      if (withTexCoords) {
        var element_1 = Attribute.Companion.TEXTURE_COORDS;
        attributes.add_11rb$(element_1);
      }
      var mesh = new Mesh_init(new MeshData_init(attributes), name);
      mesh.shader = basicShader(void 0, mesh$lambda(attributes));
      block(mesh);
      mesh.generateGeometry();
      return mesh;
    };
  }));
  var mesh_0 = defineInlineFunction('kool.de.fabmax.kool.scene.mesh_ajiltw$', wrapFunction(function () {
    var MeshData_init = _.de.fabmax.kool.scene.MeshData;
    var Mesh_init = _.de.fabmax.kool.scene.Mesh;
    var Attribute = _.de.fabmax.kool.shading.Attribute;
    var LightModel = _.de.fabmax.kool.shading.LightModel;
    var ColorModel = _.de.fabmax.kool.shading.ColorModel;
    var Unit = Kotlin.kotlin.Unit;
    var basicShader = _.de.fabmax.kool.shading.basicShader_5qtd3o$;
    function mesh$lambda(closure$attributes) {
      return function ($receiver) {
        var tmp$, tmp$_0;
        if (closure$attributes.contains_11rb$(Attribute.Companion.NORMALS)) {
          tmp$ = LightModel.PHONG_LIGHTING;
        }
         else {
          tmp$ = LightModel.NO_LIGHTING;
        }
        $receiver.lightModel = tmp$;
        if (closure$attributes.contains_11rb$(Attribute.Companion.TEXTURE_COORDS))
          tmp$_0 = ColorModel.TEXTURE_COLOR;
        else if (closure$attributes.contains_11rb$(Attribute.Companion.COLORS))
          tmp$_0 = ColorModel.VERTEX_COLOR;
        else
          tmp$_0 = ColorModel.STATIC_COLOR;
        $receiver.colorModel = tmp$_0;
        return Unit;
      };
    }
    return function (attributes, name, block) {
      if (name === void 0)
        name = null;
      var mesh = new Mesh_init(new MeshData_init(attributes), name);
      mesh.shader = basicShader(void 0, mesh$lambda(attributes));
      block(mesh);
      mesh.generateGeometry();
      return mesh;
    };
  }));
  function colorMesh(name, generate) {
    if (name === void 0)
      name = null;
    var attributes = setOf([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().NORMALS, Attribute$Companion_getInstance().COLORS]);
    var mesh = new Mesh(new MeshData(attributes), name);
    mesh.shader = basicShader(void 0, mesh$lambda(attributes));
    generate(mesh);
    mesh.generateGeometry();
    return mesh;
  }
  function textMesh$lambda($receiver) {
    $receiver.lightModel = LightModel$NO_LIGHTING_getInstance();
    return Unit;
  }
  function textMesh(font, name, generate) {
    if (name === void 0)
      name = null;
    var attributes = setOf([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().NORMALS, Attribute$Companion_getInstance().COLORS, Attribute$Companion_getInstance().TEXTURE_COORDS]);
    var mesh = new Mesh(new MeshData(attributes), name);
    mesh.shader = basicShader(void 0, mesh$lambda(attributes));
    generate(mesh);
    mesh.generateGeometry();
    var text = mesh;
    text.shader = fontShader(font, textMesh$lambda);
    return text;
  }
  function textureMesh(name, isNormalMapped, generate) {
    if (name === void 0)
      name = null;
    if (isNormalMapped === void 0)
      isNormalMapped = false;
    var attributes = mutableSetOf([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().NORMALS, Attribute$Companion_getInstance().TEXTURE_COORDS]);
    if (isNormalMapped) {
      var element = Attribute$Companion_getInstance().TANGENTS;
      attributes.add_11rb$(element);
    }
    var mesh = new Mesh(new MeshData(attributes), name);
    mesh.shader = basicShader(void 0, mesh$lambda(attributes));
    generate(mesh);
    mesh.generateGeometry();
    var mesh_0 = mesh;
    if (isNormalMapped) {
      mesh_0.meshData.generateTangents();
    }
    return mesh_0;
  }
  function CullMethod(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function CullMethod_initFields() {
    CullMethod_initFields = function () {
    };
    CullMethod$DEFAULT_instance = new CullMethod('DEFAULT', 0);
    CullMethod$CULL_BACK_FACES_instance = new CullMethod('CULL_BACK_FACES', 1);
    CullMethod$CULL_FRONT_FACES_instance = new CullMethod('CULL_FRONT_FACES', 2);
    CullMethod$NO_CULLING_instance = new CullMethod('NO_CULLING', 3);
  }
  var CullMethod$DEFAULT_instance;
  function CullMethod$DEFAULT_getInstance() {
    CullMethod_initFields();
    return CullMethod$DEFAULT_instance;
  }
  var CullMethod$CULL_BACK_FACES_instance;
  function CullMethod$CULL_BACK_FACES_getInstance() {
    CullMethod_initFields();
    return CullMethod$CULL_BACK_FACES_instance;
  }
  var CullMethod$CULL_FRONT_FACES_instance;
  function CullMethod$CULL_FRONT_FACES_getInstance() {
    CullMethod_initFields();
    return CullMethod$CULL_FRONT_FACES_instance;
  }
  var CullMethod$NO_CULLING_instance;
  function CullMethod$NO_CULLING_getInstance() {
    CullMethod_initFields();
    return CullMethod$NO_CULLING_instance;
  }
  CullMethod.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CullMethod',
    interfaces: [Enum]
  };
  function CullMethod$values() {
    return [CullMethod$DEFAULT_getInstance(), CullMethod$CULL_BACK_FACES_getInstance(), CullMethod$CULL_FRONT_FACES_getInstance(), CullMethod$NO_CULLING_getInstance()];
  }
  CullMethod.values = CullMethod$values;
  function CullMethod$valueOf(name) {
    switch (name) {
      case 'DEFAULT':
        return CullMethod$DEFAULT_getInstance();
      case 'CULL_BACK_FACES':
        return CullMethod$CULL_BACK_FACES_getInstance();
      case 'CULL_FRONT_FACES':
        return CullMethod$CULL_FRONT_FACES_getInstance();
      case 'NO_CULLING':
        return CullMethod$NO_CULLING_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.scene.CullMethod.' + name);
    }
  }
  CullMethod.valueOf_61zpoe$ = CullMethod$valueOf;
  function Mesh(meshData, name) {
    if (name === void 0)
      name = null;
    Node.call(this, name);
    this.meshData = meshData;
    this.shader = null;
    this.cullMethod = CullMethod$DEFAULT_getInstance();
    this.rayTest = MeshRayTest$Companion_getInstance().boundsTest();
    this.meshData.incrementReferenceCount();
  }
  Object.defineProperty(Mesh.prototype, 'generator', {
    get: function () {
      return this.meshData.generator;
    },
    set: function (value) {
      this.meshData.generator = value;
    }
  });
  Object.defineProperty(Mesh.prototype, 'bounds', {
    get: function () {
      return this.meshData.bounds;
    }
  });
  Mesh.prototype.generateGeometry = function () {
    this.meshData.generateGeometry();
  };
  Mesh.prototype.getAttributeBinder_mczodr$ = function (attrib) {
    return this.meshData.attributeBinders.get_11rb$(attrib);
  };
  Mesh.prototype.rayTest_jljx4v$ = function (test) {
    this.rayTest.rayTest_jljx4v$(test);
  };
  Mesh.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$;
    Node.prototype.dispose_aemszp$.call(this, ctx);
    this.meshData.dispose_aemszp$(ctx);
    (tmp$ = this.shader) != null ? (tmp$.dispose_aemszp$(ctx), Unit) : null;
  };
  Mesh.prototype.render_aemszp$ = function (ctx) {
    var tmp$;
    Node.prototype.render_aemszp$.call(this, ctx);
    var shader = this.shader;
    if (!this.isRendered || shader == null || (!ctx.isDepthTest && ctx.renderPass === RenderPass$SHADOW_getInstance())) {
      return;
    }
    if (this.meshData.checkBuffers_aemszp$(ctx)) {
      this.rayTest.onMeshDataChanged_f1jspk$(this);
    }
    ctx.shaderMgr.bindShader_c0ina6$(shader, this, ctx);
    if ((tmp$ = ctx.shaderMgr.boundShader) != null) {
      var tmp$_0;
      tmp$.bindMesh_sbx4mf$(this, ctx);
      if (this.cullMethod !== CullMethod$DEFAULT_getInstance()) {
        ctx.pushAttributes();
        switch (this.cullMethod.name) {
          case 'CULL_BACK_FACES':
            ctx.isCullFace = true;
            ctx.cullFace = 1029;
            break;
          case 'CULL_FRONT_FACES':
            ctx.isCullFace = true;
            ctx.cullFace = 1028;
            break;
          default:ctx.isCullFace = false;
            break;
        }
        ctx.applyAttributes();
      }
      (tmp$_0 = this.meshData.indexBuffer) != null ? (tmp$_0.bind_aemszp$(ctx), Unit) : null;
      this.drawElements_aemszp$(ctx);
      tmp$.unbindMesh_aemszp$(ctx);
      if (this.cullMethod !== CullMethod$DEFAULT_getInstance()) {
        ctx.popAttributes();
      }
    }
  };
  Mesh.prototype.drawElements_aemszp$ = function (ctx) {
    glDrawElements(this.meshData.primitiveType, this.meshData.numIndices, this.meshData.indexType, 0);
  };
  Mesh.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Mesh',
    interfaces: [Node]
  };
  function Comparator$ObjectLiteral_4(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_4.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_4.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_4 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function MeshData(vertexAttributes) {
    this.vertexAttributes = vertexAttributes;
    this.vertexList = new IndexedVertexList(this.vertexAttributes);
    this.bounds = new BoundingBox();
    this.generator = null;
    this.referenceCount_0 = 0;
    this.usage = 35044;
    this.indexType = 5125;
    this.primitiveType = 4;
    this.dataBufferF = null;
    this.dataBufferI = null;
    this.indexBuffer = null;
    this.isRebuildBoundsOnSync = false;
    this.isSyncRequired = false;
    this.isBatchUpdate_ubntbn$_0 = false;
    this.vertexIt_0 = this.vertexList.get_za3lpa$(0);
    this.attributeBinders = LinkedHashMap_init();
  }
  Object.defineProperty(MeshData.prototype, 'numIndices', {
    get: function () {
      return this.vertexList.indices.position;
    }
  });
  Object.defineProperty(MeshData.prototype, 'numVertices', {
    get: function () {
      return this.vertexList.size;
    }
  });
  Object.defineProperty(MeshData.prototype, 'isBatchUpdate', {
    get: function () {
      return this.isBatchUpdate_ubntbn$_0;
    },
    set: function (value) {
      this.isBatchUpdate_ubntbn$_0 = value;
    }
  });
  MeshData.prototype.hasAttribute_mczodr$ = function (attribute) {
    return this.vertexAttributes.contains_11rb$(attribute);
  };
  MeshData.prototype.generateGeometry = function () {
    var gen = this.generator;
    if (gen != null) {
      var wasBatchUpdate = this.isBatchUpdate;
      this.isBatchUpdate = true;
      this.clear();
      gen(new MeshBuilder(this));
      this.isSyncRequired = true;
      this.isBatchUpdate = wasBatchUpdate;
      if (false) {
        this.rebuildBounds();
      }
    }
  };
  MeshData.prototype.generateNormals = function () {
    var tmp$, tmp$_0, tmp$_1;
    if (!this.vertexAttributes.contains_11rb$(Attribute$Companion_getInstance().NORMALS)) {
      return;
    }
    if (this.primitiveType !== 4) {
      throw KoolException_init('Normal generation is only supported for triangle meshes');
    }
    var v0 = this.get_za3lpa$(0);
    var v1 = this.get_za3lpa$(1);
    var v2 = this.get_za3lpa$(2);
    var e1 = MutableVec3f_init();
    var e2 = MutableVec3f_init();
    var nrm = MutableVec3f_init();
    tmp$ = this.numVertices;
    for (var i = 0; i < tmp$; i++) {
      v0.index = i;
      v0.normal.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    }
    tmp$_0 = this.numIndices;
    for (var i_0 = 0; i_0 < tmp$_0; i_0 += 3) {
      v0.index = this.vertexList.indices.get_za3lpa$(i_0);
      v1.index = this.vertexList.indices.get_za3lpa$(i_0 + 1 | 0);
      v2.index = this.vertexList.indices.get_za3lpa$(i_0 + 2 | 0);
      if (v0.index > this.vertexList.size || v1.index > this.vertexList.size || v2.index > this.vertexList.size) {
        var $this = package$util.Log;
        var level = Log$Level.ERROR;
        var tag = Kotlin.getKClassFromExpression(this).simpleName;
        if (level.level >= $this.level.level) {
          $this.printer(level, tag, 'index to large ' + v0.index + ', ' + v1.index + ', ' + v2.index + ', sz: ' + this.vertexList.size);
        }
      }
      v1.position.subtract_2gj7b4$(v0.position, e1).norm();
      v2.position.subtract_2gj7b4$(v0.position, e2).norm();
      var a = triArea(v0.position, v1.position, v2.position);
      e1.cross_2gj7b4$(e2, nrm).norm().scale_mx4ult$(a);
      if (isNaN_0(nrm.x) || isNaN_0(nrm.y) || isNaN_0(nrm.z)) {
        var $this_0 = package$util.Log;
        var level_0 = Log$Level.WARN;
        var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_0.level >= $this_0.level.level) {
          $this_0.printer(level_0, tag_0, 'degenerated triangle');
        }
      }
       else {
        v0.normal.plusAssign_czzhiu$(nrm);
        v1.normal.plusAssign_czzhiu$(nrm);
        v2.normal.plusAssign_czzhiu$(nrm);
      }
    }
    tmp$_1 = this.numVertices;
    for (var i_1 = 0; i_1 < tmp$_1; i_1++) {
      v0.index = i_1;
      v0.normal.norm();
    }
  };
  MeshData.prototype.generateTangents = function () {
    var tmp$, tmp$_0, tmp$_1;
    if (!this.vertexAttributes.contains_11rb$(Attribute$Companion_getInstance().TANGENTS)) {
      return;
    }
    if (this.primitiveType !== 4) {
      throw KoolException_init('Normal generation is only supported for triangle meshes');
    }
    var v0 = this.get_za3lpa$(0);
    var v1 = this.get_za3lpa$(1);
    var v2 = this.get_za3lpa$(2);
    var e1 = MutableVec3f_init();
    var e2 = MutableVec3f_init();
    var tan = MutableVec3f_init();
    tmp$ = this.numVertices;
    for (var i = 0; i < tmp$; i++) {
      v0.index = i;
      v0.tangent.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    }
    tmp$_0 = this.numIndices;
    for (var i_0 = 0; i_0 < tmp$_0; i_0 += 3) {
      v0.index = this.vertexList.indices.get_za3lpa$(i_0);
      v1.index = this.vertexList.indices.get_za3lpa$(i_0 + 1 | 0);
      v2.index = this.vertexList.indices.get_za3lpa$(i_0 + 2 | 0);
      v1.position.subtract_2gj7b4$(v0.position, e1);
      v2.position.subtract_2gj7b4$(v0.position, e2);
      var du1 = v1.texCoord.x - v0.texCoord.x;
      var dv1 = v1.texCoord.y - v0.texCoord.y;
      var du2 = v2.texCoord.x - v0.texCoord.x;
      var dv2 = v2.texCoord.y - v0.texCoord.y;
      var f = 1.0 / (du1 * dv2 - du2 * dv1);
      if (isNaN_0(f)) {
        var $this = package$util.Log;
        var level = Log$Level.WARN;
        var tag = Kotlin.getKClassFromExpression(this).simpleName;
        if (level.level >= $this.level.level) {
          $this.printer(level, tag, 'degenerated triangle');
        }
      }
       else {
        tan.x = f * (dv2 * e1.x - dv1 * e2.x);
        tan.y = f * (dv2 * e1.y - dv1 * e2.y);
        tan.z = f * (dv2 * e1.z - dv1 * e2.z);
        v0.tangent.plusAssign_czzhiu$(tan);
        v1.tangent.plusAssign_czzhiu$(tan);
        v2.tangent.plusAssign_czzhiu$(tan);
      }
    }
    tmp$_1 = this.numVertices;
    for (var i_1 = 0; i_1 < tmp$_1; i_1++) {
      v0.index = i_1;
      if (v0.normal.sqrLength() === 0.0) {
        var $this_0 = package$util.Log;
        var level_0 = Log$Level.WARN;
        var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_0.level >= $this_0.level.level) {
          $this_0.printer(level_0, tag_0, 'singular normal');
        }
        v0.normal.set_czzhiu$(Vec3f$Companion_getInstance().Y_AXIS);
      }
      if (v0.tangent.sqrLength() !== 0.0) {
        v0.tangent.norm();
      }
       else {
        var $this_1 = package$util.Log;
        var level_1 = Log$Level.WARN;
        var tag_1 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_1.level >= $this_1.level.level) {
          $this_1.printer(level_1, tag_1, 'singular tangent');
        }
        v0.normal.set_czzhiu$(Vec3f$Companion_getInstance().X_AXIS);
      }
    }
  };
  function MeshData$joinCloseVertices$lambda$lambda(closure$v, closure$replaceIndcs) {
    return function (it) {
      return it.index === closure$v.index || closure$replaceIndcs.keys.contains_11rb$(it.index);
    };
  }
  function MeshData$joinCloseVertices$lambda$lambda_0(it) {
    return -it.index | 0;
  }
  MeshData.prototype.joinCloseVertices_mx4ult$ = function (eps) {
    if (eps === void 0)
      eps = FUZZY_EQ_F;
    var wasBatchUpdate = this.isBatchUpdate;
    this.isBatchUpdate = true;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12;
    var verts = ArrayList_init_0();
    tmp$ = this.numVertices;
    for (var i = 0; i < tmp$; i++) {
      var element = this.get_za3lpa$(i);
      verts.add_11rb$(element);
    }
    var tree = pointKdTree(verts);
    var trav = new InRadiusTraverser();
    var removeVerts = ArrayList_init_0();
    var replaceIndcs = LinkedHashMap_init();
    var requiresRebuildNormals = false;
    tmp$_0 = verts.iterator();
    while (tmp$_0.hasNext()) {
      var v = tmp$_0.next();
      if (!removeVerts.contains_11rb$(v)) {
        trav.setup_2qa7tb$(v, eps).traverse_m6hlto$(tree);
        removeAll(trav.result, MeshData$joinCloseVertices$lambda$lambda(v, replaceIndcs));
        if (!trav.result.isEmpty()) {
          tmp$_1 = trav.result.iterator();
          while (tmp$_1.hasNext()) {
            var j = tmp$_1.next();
            v.position.plusAssign_czzhiu$(j.position);
            v.normal.plusAssign_czzhiu$(j.normal);
            removeVerts.add_11rb$(j);
            var key = j.index;
            var value = v.index;
            replaceIndcs.put_xwzc9p$(key, value);
          }
          v.position.scale_mx4ult$(1.0 / (1.0 + trav.result.size));
          if (this.hasAttribute_mczodr$(Attribute$Companion_getInstance().NORMALS)) {
            v.normal.scale_mx4ult$(1.0 / (1.0 + trav.result.size));
            var tmp$_13 = requiresRebuildNormals;
            if (!tmp$_13) {
              var $receiver = v.normal.length();
              var eps_0;
              eps_0 = package$math.FUZZY_EQ_F;
              tmp$_13 = Math_0.abs($receiver) <= eps_0;
            }
            requiresRebuildNormals = tmp$_13;
            if (!requiresRebuildNormals) {
              v.normal.norm();
            }
          }
        }
      }
    }
    var $this = package$util.Log;
    var level = Log$Level.DEBUG;
    var tag = Kotlin.getKClassFromExpression(this).simpleName;
    if (level.level >= $this.level.level) {
      $this.printer(level, tag, 'Found ' + removeVerts.size + ' duplicate positions (of ' + this.numVertices + ' vertices)');
    }
    tmp$_2 = sortedWith(removeVerts, new Comparator$ObjectLiteral_4(compareBy$lambda_4(MeshData$joinCloseVertices$lambda$lambda_0))).iterator();
    while (tmp$_2.hasNext()) {
      var r = tmp$_2.next();
      tmp$_3 = Kotlin.imul(r.index, this.vertexList.vertexSizeI);
      tmp$_4 = this.vertexList.dataI.position - this.vertexList.vertexSizeI | 0;
      for (var i_0 = tmp$_3; i_0 < tmp$_4; i_0++) {
        this.vertexList.dataI.set_vux9f0$(i_0, this.vertexList.dataI.get_za3lpa$(i_0 + this.vertexList.vertexSizeI | 0));
      }
      tmp$_5 = this.vertexList.dataI;
      tmp$_5.position = tmp$_5.position - this.vertexList.vertexSizeI | 0;
      tmp$_6 = this.vertexList.dataI;
      tmp$_6.limit = tmp$_6.limit - this.vertexList.vertexSizeI | 0;
      tmp$_7 = Kotlin.imul(r.index, this.vertexList.vertexSizeF);
      tmp$_8 = this.vertexList.dataF.position - this.vertexList.vertexSizeF | 0;
      for (var i_1 = tmp$_7; i_1 < tmp$_8; i_1++) {
        this.vertexList.dataF.set_24o109$(i_1, this.vertexList.dataF.get_za3lpa$(i_1 + this.vertexList.vertexSizeF | 0));
      }
      tmp$_9 = this.vertexList.dataF;
      tmp$_9.position = tmp$_9.position - this.vertexList.vertexSizeF | 0;
      tmp$_10 = this.vertexList.dataF;
      tmp$_10.limit = tmp$_10.limit - this.vertexList.vertexSizeF | 0;
      tmp$_11 = this.vertexList.indices.position;
      for (var i_2 = 0; i_2 < tmp$_11; i_2++) {
        if (this.vertexList.indices.get_za3lpa$(i_2) === r.index) {
          this.vertexList.indices.set_vux9f0$(i_2, ensureNotNull(replaceIndcs.get_11rb$(r.index)));
        }
         else if (this.vertexList.indices.get_za3lpa$(i_2) > r.index) {
          var tmp$_14;
          tmp$_14 = this.vertexList.indices;
          tmp$_14.set_vux9f0$(i_2, tmp$_14.get_za3lpa$(i_2) - 1 | 0);
        }
      }
    }
    tmp$_12 = this.vertexList;
    tmp$_12.size = tmp$_12.size - removeVerts.size | 0;
    if (requiresRebuildNormals) {
      var $this_0 = package$util.Log;
      var level_0 = Log$Level.DEBUG;
      var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
      if (level_0.level >= $this_0.level.level) {
        $this_0.printer(level_0, tag_0, 'Normal reconstruction required');
      }
      this.generateNormals();
    }
    var $this_1 = package$util.Log;
    var level_1 = Log$Level.DEBUG;
    var tag_1 = Kotlin.getKClassFromExpression(this).simpleName;
    if (level_1.level >= $this_1.level.level) {
      $this_1.printer(level_1, tag_1, 'Removed ' + removeVerts.size + ' duplicate vertices');
    }
    this.isSyncRequired = true;
    this.isBatchUpdate = wasBatchUpdate;
    if (false) {
      this.rebuildBounds();
    }
  };
  MeshData.prototype.batchUpdate_xfg6n4$ = defineInlineFunction('kool.de.fabmax.kool.scene.MeshData.batchUpdate_xfg6n4$', function (rebuildBounds, block) {
    if (rebuildBounds === void 0)
      rebuildBounds = false;
    var wasBatchUpdate = this.isBatchUpdate;
    this.isBatchUpdate = true;
    block(this);
    this.isSyncRequired = true;
    this.isBatchUpdate = wasBatchUpdate;
    if (rebuildBounds) {
      this.rebuildBounds();
    }
  });
  MeshData.prototype.addVertex_hvwyd1$ = defineInlineFunction('kool.de.fabmax.kool.scene.MeshData.addVertex_hvwyd1$', function (block) {
    this.isSyncRequired = true;
    var $this = this.vertexList;
    var updateBounds = this.bounds;
    var tmp$, tmp$_0, tmp$_1;
    $this.checkBufferSizes_za3lpa$();
    tmp$ = $this.vertexSizeF;
    for (var i = 1; i <= tmp$; i++) {
      $this.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_0 = $this.vertexSizeI;
    for (var i_0 = 1; i_0 <= tmp$_0; i_0++) {
      $this.dataI.plusAssign_za3lpa$(0);
    }
    $this.vertexIt.index = (tmp$_1 = $this.size, $this.size = tmp$_1 + 1 | 0, tmp$_1);
    block($this.vertexIt);
    updateBounds != null ? updateBounds.add_czzhiu$($this.vertexIt.position) : null;
    return $this.size - 1 | 0;
  });
  MeshData.prototype.addVertex_lv7vxo$ = function (position, normal, color, texCoord) {
    if (normal === void 0)
      normal = null;
    if (color === void 0)
      color = null;
    if (texCoord === void 0)
      texCoord = null;
    this.isSyncRequired = true;
    this.bounds.add_czzhiu$(position);
    return this.vertexList.addVertex_lv7vxo$(position, normal, color, texCoord);
  };
  MeshData.prototype.addMeshData_3w6cym$ = function (other) {
    this.vertexList.addFrom_r7nl2o$(other.vertexList);
    this.bounds.add_ea4od8$(other.bounds);
    this.isSyncRequired = true;
  };
  MeshData.prototype.addIndex_za3lpa$ = function (idx) {
    this.vertexList.addIndex_za3lpa$(idx);
    this.isSyncRequired = true;
  };
  MeshData.prototype.addTriIndices_qt1dr2$ = function (i0, i1, i2) {
    this.vertexList.addIndex_za3lpa$(i0);
    this.vertexList.addIndex_za3lpa$(i1);
    this.vertexList.addIndex_za3lpa$(i2);
    this.isSyncRequired = true;
  };
  MeshData.prototype.addIndices_pmhfmb$ = function (indices) {
    this.vertexList.addIndices_q5rwfd$(indices);
    this.isSyncRequired = true;
  };
  MeshData.prototype.addIndices_pqoyrt$ = function (indices) {
    this.vertexList.addIndices_pqoyrt$(indices);
    this.isSyncRequired = true;
  };
  MeshData.prototype.clear = function () {
    this.vertexList.clear();
    this.bounds.clear();
    this.isSyncRequired = true;
  };
  MeshData.prototype.rebuildBounds = function () {
    var tmp$;
    this.bounds.clear();
    tmp$ = this.numVertices;
    for (var i = 0; i < tmp$; i++) {
      this.vertexIt_0.index = i;
      this.bounds.add_czzhiu$(this.vertexIt_0.position);
    }
  };
  MeshData.prototype.get_za3lpa$ = function (i) {
    return this.vertexList.get_za3lpa$(i);
  };
  MeshData.prototype.incrementReferenceCount = function () {
    this.referenceCount_0 = this.referenceCount_0 + 1 | 0;
  };
  MeshData.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$, tmp$_0, tmp$_1;
    if ((this.referenceCount_0 = this.referenceCount_0 - 1 | 0, this.referenceCount_0) === 0) {
      (tmp$ = this.indexBuffer) != null ? (tmp$.delete_aemszp$(ctx), Unit) : null;
      (tmp$_0 = this.dataBufferF) != null ? (tmp$_0.delete_aemszp$(ctx), Unit) : null;
      (tmp$_1 = this.dataBufferI) != null ? (tmp$_1.delete_aemszp$(ctx), Unit) : null;
      this.indexBuffer = null;
      this.dataBufferF = null;
      this.dataBufferI = null;
      this.attributeBinders.clear();
    }
  };
  MeshData.prototype.checkBuffers_aemszp$ = function (ctx) {
    var tmp$, tmp$_0, tmp$_1;
    if (this.indexBuffer == null) {
      this.indexBuffer = BufferResource$Companion_getInstance().create_2shagh$(34963, ctx);
    }
    var hasIntData = false;
    if (this.dataBufferF == null) {
      this.dataBufferF = BufferResource$Companion_getInstance().create_2shagh$(34962, ctx);
      tmp$ = this.vertexAttributes.iterator();
      while (tmp$.hasNext()) {
        var vertexAttrib = tmp$.next();
        if (vertexAttrib.type.isInt) {
          hasIntData = true;
        }
         else {
          var $receiver = this.attributeBinders;
          var value = new VboBinder(ensureNotNull(this.dataBufferF), vertexAttrib.type.size, this.vertexList.strideBytesF, ensureNotNull(this.vertexList.attributeOffsets.get_11rb$(vertexAttrib)), vertexAttrib.type.glType);
          $receiver.put_xwzc9p$(vertexAttrib, value);
        }
      }
    }
    if (hasIntData && this.dataBufferI == null) {
      this.dataBufferI = BufferResource$Companion_getInstance().create_2shagh$(34962, ctx);
      tmp$_0 = this.vertexAttributes.iterator();
      while (tmp$_0.hasNext()) {
        var vertexAttrib_0 = tmp$_0.next();
        if (vertexAttrib_0.type.isInt) {
          var $receiver_0 = this.attributeBinders;
          var value_0 = new VboBinder(ensureNotNull(this.dataBufferI), vertexAttrib_0.type.size, this.vertexList.strideBytesI, ensureNotNull(this.vertexList.attributeOffsets.get_11rb$(vertexAttrib_0)), vertexAttrib_0.type.glType);
          $receiver_0.put_xwzc9p$(vertexAttrib_0, value_0);
        }
      }
    }
    if (this.isSyncRequired && !this.isBatchUpdate) {
      var tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
      if (!this.isBatchUpdate) {
        if (this.isRebuildBoundsOnSync) {
          this.rebuildBounds();
        }
        if (!ctx.glCapabilities.uint32Indices) {
          var uint16Buffer = createUint16Buffer(this.numIndices);
          tmp$_2 = this.vertexList.indices.position - 1 | 0;
          for (var i = 0; i <= tmp$_2; i++) {
            uint16Buffer.put_mq22fl$(toShort(this.vertexList.indices.get_za3lpa$(i)));
          }
          this.indexType = 5123;
          (tmp$_3 = this.indexBuffer) != null ? (tmp$_3.setData_34zp6t$(uint16Buffer, this.usage, ctx), Unit) : null;
        }
         else {
          this.indexType = 5125;
          (tmp$_4 = this.indexBuffer) != null ? (tmp$_4.setData_5h48zj$(this.vertexList.indices, this.usage, ctx), Unit) : null;
        }
        (tmp$_5 = this.dataBufferF) != null ? (tmp$_5.setData_wcsk4b$(this.vertexList.dataF, this.usage, ctx), Unit) : null;
        (tmp$_6 = this.dataBufferI) != null ? (tmp$_6.setData_5h48zj$(this.vertexList.dataI, this.usage, ctx), Unit) : null;
        this.isSyncRequired = false;
      }
      tmp$_1 = true;
    }
     else {
      tmp$_1 = false;
    }
    return tmp$_1;
  };
  MeshData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MeshData',
    interfaces: [Disposable]
  };
  function MeshData_init(vertexAttributes, $this) {
    $this = $this || Object.create(MeshData.prototype);
    MeshData.call($this, toHashSet(vertexAttributes));
    return $this;
  }
  function MeshRayTest() {
    MeshRayTest$Companion_getInstance();
  }
  MeshRayTest.prototype.onMeshDataChanged_f1jspk$ = function (mesh) {
  };
  function MeshRayTest$Companion() {
    MeshRayTest$Companion_instance = this;
  }
  function MeshRayTest$Companion$nopTest$ObjectLiteral() {
  }
  MeshRayTest$Companion$nopTest$ObjectLiteral.prototype.rayTest_jljx4v$ = function (test) {
  };
  MeshRayTest$Companion$nopTest$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [MeshRayTest]
  };
  MeshRayTest$Companion.prototype.nopTest = function () {
    return new MeshRayTest$Companion$nopTest$ObjectLiteral();
  };
  function MeshRayTest$Companion$boundsTest$ObjectLiteral() {
    this.mesh = null;
  }
  MeshRayTest$Companion$boundsTest$ObjectLiteral.prototype.onMeshDataChanged_f1jspk$ = function (mesh) {
    this.mesh = mesh;
  };
  MeshRayTest$Companion$boundsTest$ObjectLiteral.prototype.rayTest_jljx4v$ = function (test) {
    var tmp$;
    tmp$ = this.mesh;
    if (tmp$ == null) {
      return;
    }
    var mesh = tmp$;
    var distSqr = mesh.bounds.hitDistanceSqr_nvyeur$(test.ray);
    if (distSqr < kotlin_js_internal_FloatCompanionObject.MAX_VALUE && distSqr <= test.hitDistanceSqr) {
      test.setHit_vfk0k2$(mesh, Math_0.sqrt(distSqr));
    }
  };
  MeshRayTest$Companion$boundsTest$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [MeshRayTest]
  };
  MeshRayTest$Companion.prototype.boundsTest = function () {
    return new MeshRayTest$Companion$boundsTest$ObjectLiteral();
  };
  function MeshRayTest$Companion$geometryTest$ObjectLiteral(closure$mesh) {
    this.closure$mesh = closure$mesh;
    this.triangleTree = null;
    this.rayTraverser = new TriangleHitTraverser();
  }
  MeshRayTest$Companion$geometryTest$ObjectLiteral.prototype.onMeshDataChanged_f1jspk$ = function (mesh) {
    this.triangleTree = triangleKdTree_0(Triangle$Companion_getInstance().getTriangles_3w6cym$(mesh.meshData));
  };
  MeshRayTest$Companion$geometryTest$ObjectLiteral.prototype.rayTest_jljx4v$ = function (test) {
    var tmp$;
    this.rayTraverser.setup_nvyeur$(test.ray);
    if ((tmp$ = this.triangleTree) != null) {
      this.rayTraverser.traverse_m6hlto$(tmp$);
    }
    if (this.rayTraverser.distanceSqr < test.hitDistanceSqr) {
      test.setHit_vfk0k2$(this.closure$mesh, this.rayTraverser.distance);
    }
  };
  MeshRayTest$Companion$geometryTest$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [MeshRayTest]
  };
  function MeshRayTest$Companion$geometryTest$ObjectLiteral_0(closure$mesh) {
    this.closure$mesh = closure$mesh;
    this.edgeTree = null;
    this.rayTraverser = new NearestEdgeToRayTraverser();
  }
  MeshRayTest$Companion$geometryTest$ObjectLiteral_0.prototype.onMeshDataChanged_f1jspk$ = function (mesh) {
    this.edgeTree = edgeKdTree(Edge$Companion_getInstance().getEdges_3w6cym$(mesh.meshData));
  };
  MeshRayTest$Companion$geometryTest$ObjectLiteral_0.prototype.rayTest_jljx4v$ = function (test) {
    var tmp$;
    this.rayTraverser.setup_nvyeur$(test.ray);
    if ((tmp$ = this.edgeTree) != null) {
      this.rayTraverser.traverse_m6hlto$(tmp$);
    }
    if (this.rayTraverser.distanceSqr < test.hitDistanceSqr) {
      test.setHit_vfk0k2$(this.closure$mesh, this.rayTraverser.distance);
    }
  };
  MeshRayTest$Companion$geometryTest$ObjectLiteral_0.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [MeshRayTest]
  };
  MeshRayTest$Companion.prototype.geometryTest_f1jspk$ = function (mesh) {
    var tmp$;
    switch (mesh.meshData.primitiveType) {
      case 4:
        tmp$ = new MeshRayTest$Companion$geometryTest$ObjectLiteral(mesh);
        break;
      case 1:
        tmp$ = new MeshRayTest$Companion$geometryTest$ObjectLiteral_0(mesh);
        break;
      default:throw IllegalArgumentException_init('Mesh primitive type must be either GL_TRIANGLES or GL_LINES');
    }
    return tmp$;
  };
  MeshRayTest$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MeshRayTest$Companion_instance = null;
  function MeshRayTest$Companion_getInstance() {
    if (MeshRayTest$Companion_instance === null) {
      new MeshRayTest$Companion();
    }
    return MeshRayTest$Companion_instance;
  }
  MeshRayTest.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'MeshRayTest',
    interfaces: []
  };
  function Node(name) {
    if (name === void 0)
      name = null;
    this.name = name;
    this.onPreRender = ArrayList_init_0();
    this.onRender = ArrayList_init_0();
    this.onPostRender = ArrayList_init_0();
    this.onDispose = ArrayList_init_0();
    this.onHoverEnter = ArrayList_init_0();
    this.onHover = ArrayList_init_0();
    this.onHoverExit = ArrayList_init_0();
    this.tags = new Tags();
    this.bounds_ba5obo$_0 = new BoundingBox();
    this.globalRadius_3g00fw$_0 = 0.0;
    this.globalCenterMut = MutableVec3f_init();
    this.globalExtentMut = MutableVec3f_init();
    this.parent_302581$_0 = null;
    this.scene_lkcnox$_0 = null;
    this.isVisible_mqrc8j$_0 = true;
    this.isCastingShadow = true;
    this.isPickable_b77vbo$_0 = true;
    this.isFrustumChecked_un4x7a$_0 = true;
    this.isRendered = true;
  }
  Object.defineProperty(Node.prototype, 'bounds', {
    get: function () {
      return this.bounds_ba5obo$_0;
    }
  });
  Object.defineProperty(Node.prototype, 'globalCenter', {
    get: function () {
      return this.globalCenterMut;
    }
  });
  Object.defineProperty(Node.prototype, 'globalRadius', {
    get: function () {
      return this.globalRadius_3g00fw$_0;
    },
    set: function (globalRadius) {
      this.globalRadius_3g00fw$_0 = globalRadius;
    }
  });
  Object.defineProperty(Node.prototype, 'parent', {
    get: function () {
      return this.parent_302581$_0;
    },
    set: function (value) {
      if (value !== this.parent_302581$_0) {
        this.onParentChanged_etw0z0$(this.parent_302581$_0, value);
        this.parent_302581$_0 = value;
        var tmp$;
        var p = this.parent;
        while (p != null && !(p == null || Kotlin.isType(p, Scene))) {
          p = p.parent;
        }
        this.scene = (tmp$ = p) == null || Kotlin.isType(tmp$, Scene) ? tmp$ : throwCCE();
      }
    }
  });
  Object.defineProperty(Node.prototype, 'scene', {
    get: function () {
      return this.scene_lkcnox$_0;
    },
    set: function (value) {
      if (value !== this.scene_lkcnox$_0) {
        this.onSceneChanged_9srkog$(this.scene_lkcnox$_0, value);
        this.scene_lkcnox$_0 = value;
      }
    }
  });
  Object.defineProperty(Node.prototype, 'isVisible', {
    get: function () {
      return this.isVisible_mqrc8j$_0;
    },
    set: function (isVisible) {
      this.isVisible_mqrc8j$_0 = isVisible;
    }
  });
  Object.defineProperty(Node.prototype, 'isPickable', {
    get: function () {
      return this.isPickable_b77vbo$_0;
    },
    set: function (isPickable) {
      this.isPickable_b77vbo$_0 = isPickable;
    }
  });
  Object.defineProperty(Node.prototype, 'isFrustumChecked', {
    get: function () {
      return this.isFrustumChecked_un4x7a$_0;
    },
    set: function (isFrustumChecked) {
      this.isFrustumChecked_un4x7a$_0 = isFrustumChecked;
    }
  });
  Node.prototype.preRender_aemszp$ = function (ctx) {
    var tmp$;
    tmp$ = this.onPreRender;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.onPreRender.get_za3lpa$(i)(this, ctx);
    }
    this.globalCenterMut.set_czzhiu$(this.bounds.center);
    this.globalExtentMut.set_czzhiu$(this.bounds.max);
    ctx.mvpState.modelMatrix.transform_w1lst9$(this.globalCenterMut);
    ctx.mvpState.modelMatrix.transform_w1lst9$(this.globalExtentMut);
    this.globalRadius = this.globalCenter.distance_czzhiu$(this.globalExtentMut);
  };
  Node.prototype.render_aemszp$ = function (ctx) {
    var tmp$;
    this.isRendered = this.checkIsVisible_aemszp$(ctx);
    if (this.isRendered) {
      if (!this.onRender.isEmpty()) {
        tmp$ = this.onRender;
        for (var i = 0; i !== tmp$.size; ++i) {
          this.onRender.get_za3lpa$(i)(this, ctx);
        }
      }
    }
  };
  Node.prototype.postRender_aemszp$ = function (ctx) {
    var tmp$;
    tmp$ = this.onPostRender;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.onPostRender.get_za3lpa$(i)(this, ctx);
    }
  };
  Node.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$;
    tmp$ = this.onDispose;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.onDispose.get_za3lpa$(i)(this, ctx);
    }
  };
  Node.prototype.toGlobalCoords_w1lst9$$default = function (vec, w) {
    var tmp$;
    (tmp$ = this.parent) != null ? tmp$.toGlobalCoords_w1lst9$(vec, w) : null;
    return vec;
  };
  Node.prototype.toGlobalCoords_w1lst9$ = function (vec, w, callback$default) {
    if (w === void 0)
      w = 1.0;
    return callback$default ? callback$default(vec, w) : this.toGlobalCoords_w1lst9$$default(vec, w);
  };
  Node.prototype.toLocalCoords_w1lst9$$default = function (vec, w) {
    var tmp$;
    (tmp$ = this.parent) != null ? tmp$.toLocalCoords_w1lst9$(vec, w) : null;
    return vec;
  };
  Node.prototype.toLocalCoords_w1lst9$ = function (vec, w, callback$default) {
    if (w === void 0)
      w = 1.0;
    return callback$default ? callback$default(vec, w) : this.toLocalCoords_w1lst9$$default(vec, w);
  };
  Node.prototype.rayTest_jljx4v$ = function (test) {
  };
  Node.prototype.get_61zpoe$ = function (name) {
    if (equals(name, this.name)) {
      return this;
    }
    return null;
  };
  Node.prototype.checkIsVisible_aemszp$ = function (ctx) {
    var tmp$, tmp$_0, tmp$_1;
    if (!this.isVisible) {
      return false;
    }
     else if (this.isFrustumChecked && !this.bounds.isEmpty) {
      return (tmp$_1 = (tmp$_0 = (tmp$ = this.scene) != null ? tmp$.camera : null) != null ? tmp$_0.isInFrustum_f1kmr1$(this) : null) != null ? tmp$_1 : true;
    }
    return true;
  };
  Node.prototype.findParentOfType_287e2$ = defineInlineFunction('kool.de.fabmax.kool.scene.Node.findParentOfType_287e2$', wrapFunction(function () {
    var throwCCE = Kotlin.throwCCE;
    return function (T_0, isT) {
      var tmp$;
      var p = this.parent;
      while (p != null && !isT(p)) {
        p = p.parent;
      }
      return isT(tmp$ = p) ? tmp$ : throwCCE();
    };
  }));
  Node.prototype.onSceneChanged_9srkog$ = function (oldScene, newScene) {
  };
  Node.prototype.onParentChanged_etw0z0$ = function (oldParent, newParent) {
  };
  Node.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Node',
    interfaces: [Disposable]
  };
  var scene = defineInlineFunction('kool.de.fabmax.kool.scene.scene_13di2z$', wrapFunction(function () {
    var Scene_init = _.de.fabmax.kool.scene.Scene;
    return function (name, block) {
      if (name === void 0)
        name = null;
      var $receiver = new Scene_init(name);
      block($receiver);
      return $receiver;
    };
  }));
  function Scene(name) {
    if (name === void 0)
      name = null;
    Group.call(this, name);
    this.onRenderScene = ArrayList_init_0();
    this.camera = new PerspectiveCamera();
    this.lighting = new Lighting(this);
    this.viewport_1xny3r$_0 = new KoolContext$Viewport(0, 0, 0, 0);
    this.clearMask = 16640;
    this.isPickingEnabled = true;
    this.rayTest_odjp91$_0 = new RayTest();
    this.hoverNode_ab2f3d$_0 = null;
    this.dragPtrs_mbcqtw$_0 = ArrayList_init_0();
    this.dragHandlers_ipew8g$_0 = ArrayList_init_0();
    this.disposables_mcwga4$_0 = ArrayList_init_0();
    this.scene = this;
  }
  Object.defineProperty(Scene.prototype, 'isFrustumChecked', {
    get: function () {
      return false;
    },
    set: function (value) {
    }
  });
  Object.defineProperty(Scene.prototype, 'viewport', {
    get: function () {
      return this.viewport_1xny3r$_0;
    },
    set: function (viewport) {
      this.viewport_1xny3r$_0 = viewport;
    }
  });
  Scene.prototype.renderScene_aemszp$ = function (ctx) {
    var tmp$;
    tmp$ = this.onRenderScene;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.onRenderScene.get_za3lpa$(i)(this, ctx);
    }
    this.viewport = ctx.viewport;
    this.camera.updateCamera_aemszp$(ctx);
    this.preRender_aemszp$(ctx);
    if (this.clearMask !== 0) {
      glClear(this.clearMask);
    }
    this.render_aemszp$(ctx);
    this.postRender_aemszp$(ctx);
  };
  Scene.prototype.processInput_aemszp$ = function (ctx) {
    this.handleInput_gqm22e$_0(ctx);
  };
  Scene.prototype.onRenderingHintsChanged_aemszp$ = function (ctx) {
    this.lighting.onRenderingHintsChanged_aemszp$(ctx);
  };
  Scene.prototype.preRender_aemszp$ = function (ctx) {
    var tmp$;
    tmp$ = this.disposables_mcwga4$_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.disposables_mcwga4$_0.get_za3lpa$(i).dispose_aemszp$(ctx);
    }
    this.disposables_mcwga4$_0.clear();
    Group.prototype.preRender_aemszp$.call(this, ctx);
  };
  Scene.prototype.dispose_ipew3$ = function (disposable) {
    this.disposables_mcwga4$_0.add_11rb$(disposable);
  };
  Scene.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$;
    tmp$ = this.disposables_mcwga4$_0.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.dispose_aemszp$(ctx);
    }
    this.disposables_mcwga4$_0.clear();
    Group.prototype.dispose_aemszp$.call(this, ctx);
  };
  Scene.prototype.registerDragHandler_y44tw7$ = function (handler) {
    if (!this.dragHandlers_ipew8g$_0.contains_11rb$(handler)) {
      this.dragHandlers_ipew8g$_0.add_11rb$(handler);
    }
  };
  Scene.prototype.removeDragHandler_y44tw7$ = function (handler) {
    this.dragHandlers_ipew8g$_0.remove_11rb$(handler);
  };
  Scene.prototype.computeRay_wswg9$ = function (pointer, ctx, result) {
    return this.camera.computePickRay_9t2ms2$(result, pointer, this.viewport, ctx);
  };
  Scene.prototype.handleInput_gqm22e$_0 = function (ctx) {
    var tmp$, tmp$_0, tmp$_1;
    var hovered = null;
    var prevHovered = this.hoverNode_ab2f3d$_0;
    var ptr = ctx.inputMgr.pointerState.primaryPointer;
    if (!this.isPickingEnabled || !ptr.isValid || ptr.isConsumed_za3lpa$()) {
      return;
    }
    if (ptr.isInViewport_n4xpoe$(this.viewport, ctx) && this.camera.initRayTes_xfyfmo$(this.rayTest_odjp91$_0, ptr, this.viewport, ctx)) {
      this.rayTest_jljx4v$(this.rayTest_odjp91$_0);
      if (this.rayTest_odjp91$_0.isHit) {
        hovered = this.rayTest_odjp91$_0.hitNode;
      }
    }
    if (!equals(prevHovered, hovered)) {
      if (prevHovered != null) {
        tmp$ = prevHovered.onHoverExit;
        for (var i = 0; i !== tmp$.size; ++i) {
          prevHovered.onHoverExit.get_za3lpa$(i)(prevHovered, ptr, this.rayTest_odjp91$_0, ctx);
        }
      }
      if (hovered != null) {
        tmp$_0 = hovered.onHoverEnter;
        for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
          hovered.onHoverEnter.get_za3lpa$(i_0)(hovered, ptr, this.rayTest_odjp91$_0, ctx);
        }
      }
      this.hoverNode_ab2f3d$_0 = hovered;
    }
    if (hovered != null && equals(prevHovered, hovered)) {
      tmp$_1 = hovered.onHover;
      for (var i_1 = 0; i_1 !== tmp$_1.size; ++i_1) {
        hovered.onHover.get_za3lpa$(i_1)(hovered, ptr, this.rayTest_odjp91$_0, ctx);
      }
    }
    this.handleDrag_dsfjhm$_0(ctx);
  };
  Scene.prototype.handleDrag_dsfjhm$_0 = function (ctx) {
    var tmp$, tmp$_0;
    this.dragPtrs_mbcqtw$_0.clear();
    tmp$ = ctx.inputMgr.pointerState.pointers;
    for (var i = 0; i !== tmp$.length; ++i) {
      var ptr = ctx.inputMgr.pointerState.pointers[i];
      if (ptr.isValid && ptr.isInViewport_n4xpoe$(this.viewport, ctx) && (ptr.buttonMask !== 0 || ptr.buttonEventMask !== 0 || ptr.deltaScroll !== 0.0)) {
        this.dragPtrs_mbcqtw$_0.add_11rb$(ptr);
      }
    }
    tmp$_0 = reversed(get_indices(this.dragHandlers_ipew8g$_0)).iterator();
    while (tmp$_0.hasNext()) {
      var i_0 = tmp$_0.next();
      this.dragHandlers_ipew8g$_0.get_za3lpa$(i_0).handleDrag_urvnay$(this.dragPtrs_mbcqtw$_0, this, ctx);
    }
  };
  function Scene$DragHandler() {
  }
  Scene$DragHandler.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'DragHandler',
    interfaces: []
  };
  Scene.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Scene',
    interfaces: [Group]
  };
  function mesh$lambda_0(closure$attributes) {
    return function ($receiver) {
      var tmp$, tmp$_0;
      if (closure$attributes.contains_11rb$(Attribute.Companion.NORMALS)) {
        tmp$ = LightModel.PHONG_LIGHTING;
      }
       else {
        tmp$ = LightModel.NO_LIGHTING;
      }
      $receiver.lightModel = tmp$;
      if (closure$attributes.contains_11rb$(Attribute.Companion.TEXTURE_COORDS))
        tmp$_0 = ColorModel.TEXTURE_COLOR;
      else if (closure$attributes.contains_11rb$(Attribute.Companion.COLORS))
        tmp$_0 = ColorModel.VERTEX_COLOR;
      else
        tmp$_0 = ColorModel.STATIC_COLOR;
      $receiver.colorModel = tmp$_0;
      return Unit;
    };
  }
  function Skybox(camera, environmentMap) {
    Scene.call(this);
    this.environmentMap = environmentMap;
    this.camera = new Skybox$SkyboxCamera(camera);
    this.clearMask = 0;
    var attributes = setOf_0(Attribute$Companion_getInstance().POSITIONS);
    var mesh = new Mesh(new MeshData(attributes), 'skybox');
    mesh.shader = basicShader(void 0, mesh$lambda_0(attributes));
    mesh.isFrustumChecked = false;
    mesh.generator = Skybox_init$lambda$lambda;
    mesh.shader = new Skybox$SkyboxShader(this.environmentMap);
    mesh.cullMethod = CullMethod$CULL_FRONT_FACES_getInstance();
    mesh.generateGeometry();
    this.unaryPlus_uv0sim$(mesh);
  }
  function Skybox$SkyboxCamera(mainCam) {
    Camera.call(this);
    this.mainCam = mainCam;
  }
  Skybox$SkyboxCamera.prototype.updateViewMatrix = function () {
    this.view.set_d4zu6j$(this.mainCam.view);
  };
  Skybox$SkyboxCamera.prototype.updateProjectionMatrix = function () {
    this.proj.set_d4zu6j$(this.mainCam.proj);
  };
  Skybox$SkyboxCamera.prototype.computeFrustumPlane_jwr40o$ = function (z, result) {
  };
  Skybox$SkyboxCamera.prototype.isInFrustum_2qa7tb$ = function (globalCenter, globalRadius) {
    return true;
  };
  Skybox$SkyboxCamera.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SkyboxCamera',
    interfaces: [Camera]
  };
  function Skybox$SkyboxShader(environmentMap) {
    var $receiver = new ShaderProps();
    $receiver.colorModel = ColorModel$CUSTOM_COLOR_getInstance();
    $receiver.lightModel = LightModel$NO_LIGHTING_getInstance();
    $receiver.environmentMap = environmentMap;
    BasicShader.call(this, $receiver);
    this.projMatrix_0 = this.addUniform_1ybs2r$(new UniformMatrix4('uProjMatrix'));
    var $receiver_0 = this.generator.customUniforms;
    var element = this.projMatrix_0;
    $receiver_0.add_11rb$(element);
    var $receiver_1 = this.generator.injectors;
    var element_0 = new Skybox$Skybox$SkyboxShader_init$ObjectLiteral(this);
    $receiver_1.add_11rb$(element_0);
  }
  Skybox$SkyboxShader.prototype.onMatrixUpdate_aemszp$ = function (ctx) {
    this.projMatrix_0.value = ctx.mvpState.projMatrixBuffer;
    this.projMatrix_0.bind_aemszp$(ctx);
    BasicShader.prototype.onMatrixUpdate_aemszp$.call(this, ctx);
  };
  function Skybox$Skybox$SkyboxShader_init$ObjectLiteral(this$SkyboxShader) {
    this.this$SkyboxShader = this$SkyboxShader;
  }
  Skybox$Skybox$SkyboxShader_init$ObjectLiteral.prototype.vsAfterInput_kv1jfs$ = function (shaderProps, node, text, ctx) {
    text.append_gw00v9$(this.this$SkyboxShader.generator.vsOut + ' vec3 texCoord;' + '\n');
  };
  Skybox$Skybox$SkyboxShader_init$ObjectLiteral.prototype.vsAfterProj_kv1jfs$ = function (shaderProps, node, text, ctx) {
    text.append_gw00v9$('texCoord = ' + Attribute$Companion_getInstance().POSITIONS + ';' + '\n');
    text.append_gw00v9$('vec4 pos = uProjMatrix * mat4(mat3(' + GlslGenerator$Companion_getInstance().U_VIEW_MATRIX + ')) * vec4(' + Attribute$Companion_getInstance().POSITIONS + ', 1.0);' + '\n');
    text.append_gw00v9$('gl_Position = pos.xyww;\n');
  };
  Skybox$Skybox$SkyboxShader_init$ObjectLiteral.prototype.fsAfterInput_kv1jfs$ = function (shaderProps, node, text, ctx) {
    text.append_gw00v9$(this.this$SkyboxShader.generator.fsIn + ' vec3 texCoord;' + '\n');
    text.append_gw00v9$('uniform samplerCube uEnvironmentMap;\n');
  };
  Skybox$Skybox$SkyboxShader_init$ObjectLiteral.prototype.fsAfterSampling_kv1jfs$ = function (shaderProps, node, text, ctx) {
    text.append_gw00v9$(this.this$SkyboxShader.generator.fsOutBody + ' = texture(' + GlslGenerator$Companion_getInstance().U_ENVIRONMENT_MAP + ', texCoord);' + '\n');
  };
  Skybox$Skybox$SkyboxShader_init$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [GlslGenerator$GlslInjector]
  };
  Skybox$SkyboxShader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SkyboxShader',
    interfaces: [BasicShader]
  };
  function Skybox_init$lambda$lambda($receiver) {
    var $receiver_0 = $receiver.cubeProps.defaults();
    $receiver_0.size.set_y2kzbl$(1.0, 1.0, 1.0);
    $receiver_0.centerOrigin();
    $receiver.cube_lhbb6w$($receiver.cubeProps);
    return Unit;
  }
  Skybox.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Skybox',
    interfaces: [Scene]
  };
  function sphericalInputTransform(name, block) {
    if (name === void 0)
      name = null;
    var sit = new SphericalInputTransform(name);
    block(sit);
    return sit;
  }
  function defaultCamTransform$lambda(this$defaultCamTransform) {
    return function ($receiver) {
      $receiver.setMouseRotation_dleff0$(20.0, -30.0);
      $receiver.unaryPlus_uv0sim$(this$defaultCamTransform.camera);
      return Unit;
    };
  }
  function defaultCamTransform($receiver) {
    $receiver.unaryPlus_uv0sim$(sphericalInputTransform(void 0, defaultCamTransform$lambda($receiver)));
  }
  function SphericalInputTransform(name) {
    if (name === void 0)
      name = null;
    TransformGroup.call(this, name);
    this.leftDragMethod = SphericalInputTransform$DragMethod$ROTATE_getInstance();
    this.middleDragMethod = SphericalInputTransform$DragMethod$NONE_getInstance();
    this.rightDragMethod = SphericalInputTransform$DragMethod$PAN_getInstance();
    this.zoomMethod = SphericalInputTransform$ZoomMethod$ZOOM_TRANSLATE_getInstance();
    this.verticalAxis = Vec3f$Companion_getInstance().Y_AXIS;
    this.horizontalAxis = Vec3f$Companion_getInstance().X_AXIS;
    this.minHorizontalRot = -90.0;
    this.maxHorizontalRot = 90.0;
    this.translation = MutableVec3f_init();
    this.verticalRotation = 0.0;
    this.horizontalRotation = 0.0;
    this.zoom_q2oenn$_0 = 10.0;
    this.isKeepingStandardTransform = false;
    this.invertRotX = false;
    this.invertRotY = false;
    this.minZoom = 1.0;
    this.maxZoom = 100.0;
    this.translationBounds = null;
    this.panMethod = new CameraOrthogonalPan();
    this.vertRotAnimator = new SpringDamperFloat(0.0);
    this.horiRotAnimator = new SpringDamperFloat(0.0);
    this.zoomAnimator = new SpringDamperFloat(this.zoom);
    this.prevButtonMask_tpqbjl$_0 = 0;
    this.dragMethod_dbmj85$_0 = SphericalInputTransform$DragMethod$NONE_getInstance();
    this.dragStart_48qwuy$_0 = false;
    this.deltaPos_c9l5fg$_0 = MutableVec2f_init();
    this.deltaScroll_4ldocx$_0 = 0.0;
    this.ptrPos_e3vj7e$_0 = MutableVec2f_init();
    this.panPlane_nfvt5t$_0 = new Plane();
    this.pointerHitStart_kpvvnc$_0 = MutableVec3f_init();
    this.pointerHit_wr4hnu$_0 = MutableVec3f_init();
    this.tmpVec1_mu7x28$_0 = MutableVec3f_init();
    this.tmpVec2_mu7x33$_0 = MutableVec3f_init();
    this.mouseTransform_xgc6g7$_0 = new Mat4f();
    this.mouseTransformInv_b94dfu$_0 = new Mat4f();
    this.smoothness_e1amor$_0 = 0.0;
    this.smoothness = 0.5;
    this.panPlane_nfvt5t$_0.p.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.panPlane_nfvt5t$_0.n.set_czzhiu$(Vec3f$Companion_getInstance().Y_AXIS);
    this.onPreRender.add_11rb$(SphericalInputTransform_init$lambda(this));
  }
  Object.defineProperty(SphericalInputTransform.prototype, 'zoom', {
    get: function () {
      return this.zoom_q2oenn$_0;
    },
    set: function (value) {
      var min = this.minZoom;
      var max = this.maxZoom;
      var clamp$result;
      if (value < min) {
        clamp$result = min;
      }
       else if (value > max) {
        clamp$result = max;
      }
       else {
        clamp$result = value;
      }
      this.zoom_q2oenn$_0 = clamp$result;
    }
  });
  Object.defineProperty(SphericalInputTransform.prototype, 'smoothness', {
    get: function () {
      return this.smoothness_e1amor$_0;
    },
    set: function (value) {
      var tmp$;
      this.smoothness_e1amor$_0 = value;
      var eps;
      eps = package$math.FUZZY_EQ_F;
      if (!(Math_0.abs(value) <= eps)) {
        tmp$ = 50.0 / value;
      }
       else {
        tmp$ = 0.0;
      }
      var stiffness = tmp$;
      this.vertRotAnimator.stiffness = stiffness;
      this.horiRotAnimator.stiffness = stiffness;
      this.zoomAnimator.stiffness = stiffness;
    }
  });
  SphericalInputTransform.prototype.setMouseRotation_dleff0$ = function (vertical, horizontal) {
    this.vertRotAnimator.set_mx4ult$(vertical);
    this.horiRotAnimator.set_mx4ult$(horizontal);
    this.verticalRotation = vertical;
    this.horizontalRotation = horizontal;
  };
  SphericalInputTransform.prototype.setMouseTranslation_y2kzbl$ = function (x, y, z) {
    this.translation.set_y2kzbl$(x, y, z);
  };
  SphericalInputTransform.prototype.resetZoom_mx4ult$ = function (newZoom) {
    this.zoom = newZoom;
    this.zoomAnimator.set_mx4ult$(this.zoom);
  };
  SphericalInputTransform.prototype.updateTransform = function () {
    var tmp$;
    (tmp$ = this.translationBounds) != null ? (tmp$.clampToBounds_5s4mqq$(this.translation), Unit) : null;
    if (this.isKeepingStandardTransform) {
      this.mouseTransform_xgc6g7$_0.invert_8kv2li$(this.mouseTransformInv_b94dfu$_0);
      this.mul_d4zu6j$(this.mouseTransformInv_b94dfu$_0);
    }
    var z = this.zoomAnimator.actual;
    var vr = this.vertRotAnimator.actual;
    var hr = this.horiRotAnimator.actual;
    this.mouseTransform_xgc6g7$_0.setIdentity();
    this.mouseTransform_xgc6g7$_0.translate_y2kzbl$(this.translation.x, this.translation.y, this.translation.z);
    this.mouseTransform_xgc6g7$_0.scale_y2kzbl$(z, z, z);
    this.mouseTransform_xgc6g7$_0.rotate_ad55pp$(vr, this.verticalAxis);
    this.mouseTransform_xgc6g7$_0.rotate_ad55pp$(hr, this.horizontalAxis);
    if (this.isKeepingStandardTransform) {
      this.mul_d4zu6j$(this.mouseTransform_xgc6g7$_0);
    }
     else {
      this.set_d4zu6j$(this.mouseTransform_xgc6g7$_0);
    }
  };
  SphericalInputTransform.prototype.doCamTransform_hnzr7n$_0 = function (ctx) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    tmp$ = this.scene;
    if (tmp$ == null) {
      return;
    }
    var scene = tmp$;
    if (this.panMethod.computePanPoint_9h8rqb$(this.pointerHit_wr4hnu$_0, scene, this.ptrPos_e3vj7e$_0, ctx)) {
      if (this.dragStart_48qwuy$_0) {
        this.dragStart_48qwuy$_0 = false;
        this.pointerHitStart_kpvvnc$_0.set_czzhiu$(this.pointerHit_wr4hnu$_0);
        this.stopSmoothMotion_qs2eoq$_0();
      }
       else if (this.dragMethod_dbmj85$_0 === SphericalInputTransform$DragMethod$PAN_getInstance()) {
        var $receiver = 1 - this.smoothness;
        var clamp$result;
        if ($receiver < 0.1) {
          clamp$result = 0.1;
        }
         else if ($receiver > 1.0) {
          clamp$result = 1.0;
        }
         else {
          clamp$result = $receiver;
        }
        var s = clamp$result;
        this.tmpVec1_mu7x28$_0.set_czzhiu$(this.pointerHitStart_kpvvnc$_0).subtract_czzhiu$(this.pointerHit_wr4hnu$_0).scale_mx4ult$(s);
        (tmp$_0 = this.parent) != null ? tmp$_0.toLocalCoords_w1lst9$(this.tmpVec1_mu7x28$_0, 0.0) : null;
        var tLen = this.tmpVec1_mu7x28$_0.length();
        if (tLen > scene.camera.globalRange * 0.5) {
          this.tmpVec1_mu7x28$_0.scale_mx4ult$(scene.camera.globalRange * 0.5 / tLen);
        }
        this.translation.add_czzhiu$(this.tmpVec1_mu7x28$_0);
      }
    }
     else {
      this.pointerHit_wr4hnu$_0.set_czzhiu$(scene.camera.globalLookAt);
    }
    var $receiver_0 = this.deltaScroll_4ldocx$_0;
    var eps;
    eps = package$math.FUZZY_EQ_F;
    if (!(Math_0.abs($receiver_0) <= eps)) {
      this.zoom = this.zoom * (1.0 - this.deltaScroll_4ldocx$_0 / 10.0);
      this.deltaScroll_4ldocx$_0 = 0.0;
    }
    if (this.dragMethod_dbmj85$_0 === SphericalInputTransform$DragMethod$ROTATE_getInstance()) {
      tmp$_3 = this.verticalRotation;
      tmp$_2 = this.deltaPos_c9l5fg$_0.x / 3;
      if (this.invertRotX) {
        tmp$_1 = -1.0;
      }
       else {
        tmp$_1 = 1.0;
      }
      this.verticalRotation = tmp$_3 - tmp$_2 * tmp$_1;
      tmp$_6 = this.horizontalRotation;
      tmp$_5 = this.deltaPos_c9l5fg$_0.y / 3;
      if (this.invertRotY) {
        tmp$_4 = -1.0;
      }
       else {
        tmp$_4 = 1.0;
      }
      this.horizontalRotation = tmp$_6 - tmp$_5 * tmp$_4;
      var $receiver_1 = this.horizontalRotation;
      var min = this.minHorizontalRot;
      var max = this.maxHorizontalRot;
      var clamp$result_0;
      if ($receiver_1 < min) {
        clamp$result_0 = min;
      }
       else if ($receiver_1 > max) {
        clamp$result_0 = max;
      }
       else {
        clamp$result_0 = $receiver_1;
      }
      this.horizontalRotation = clamp$result_0;
      this.deltaPos_c9l5fg$_0.set_czzhjp$(Vec2f$Companion_getInstance().ZERO);
    }
    this.vertRotAnimator.desired = this.verticalRotation;
    this.horiRotAnimator.desired = this.horizontalRotation;
    this.zoomAnimator.desired = this.zoom;
    var oldZ = this.zoomAnimator.actual;
    var z = this.zoomAnimator.animate_mx4ult$(ctx.deltaT);
    var eps_0;
    eps_0 = package$math.FUZZY_EQ_F;
    var $receiver_2 = oldZ - z;
    if (!(Math_0.abs($receiver_2) <= eps_0) && this.zoomMethod === SphericalInputTransform$ZoomMethod$ZOOM_TRANSLATE_getInstance()) {
      this.computeZoomTranslationPerspective_sqm467$(scene, oldZ, z);
    }
    this.vertRotAnimator.animate_mx4ult$(ctx.deltaT);
    this.horiRotAnimator.animate_mx4ult$(ctx.deltaT);
    this.updateTransform();
  };
  SphericalInputTransform.prototype.computeZoomTranslationPerspective_sqm467$ = function (scene, oldZoom, newZoom) {
    var tmp$;
    scene.camera.globalPos.subtract_2gj7b4$(this.pointerHit_wr4hnu$_0, this.tmpVec1_mu7x28$_0).scale_mx4ult$(newZoom / oldZoom).add_czzhiu$(this.pointerHit_wr4hnu$_0);
    scene.camera.globalPos.subtract_2gj7b4$(scene.camera.globalLookAt, this.tmpVec2_mu7x33$_0).scale_mx4ult$(newZoom / oldZoom).add_czzhiu$(scene.camera.globalLookAt);
    this.tmpVec1_mu7x28$_0.subtract_czzhiu$(this.tmpVec2_mu7x33$_0);
    (tmp$ = this.parent) != null ? tmp$.toLocalCoords_w1lst9$(this.tmpVec1_mu7x28$_0, 0.0) : null;
    this.translation.add_czzhiu$(this.tmpVec1_mu7x28$_0);
  };
  SphericalInputTransform.prototype.stopSmoothMotion_qs2eoq$_0 = function () {
    this.vertRotAnimator.set_mx4ult$(this.vertRotAnimator.actual);
    this.horiRotAnimator.set_mx4ult$(this.horiRotAnimator.actual);
    this.zoomAnimator.set_mx4ult$(this.zoomAnimator.actual);
    this.verticalRotation = this.vertRotAnimator.actual;
    this.horizontalRotation = this.horiRotAnimator.actual;
    this.zoom = this.zoomAnimator.actual;
  };
  SphericalInputTransform.prototype.onSceneChanged_9srkog$ = function (oldScene, newScene) {
    TransformGroup.prototype.onSceneChanged_9srkog$.call(this, oldScene, newScene);
    oldScene != null ? (oldScene.removeDragHandler_y44tw7$(this), Unit) : null;
    newScene != null ? (newScene.registerDragHandler_y44tw7$(this), Unit) : null;
  };
  SphericalInputTransform.prototype.handleDrag_urvnay$ = function (dragPtrs, scene, ctx) {
    var tmp$;
    if (!dragPtrs.isEmpty() && !dragPtrs.get_za3lpa$(0).isConsumed_za3lpa$() && dragPtrs.get_za3lpa$(0).isInViewport_n4xpoe$(scene.viewport, ctx)) {
      if (dragPtrs.get_za3lpa$(0).buttonEventMask !== 0 || dragPtrs.get_za3lpa$(0).buttonMask !== this.prevButtonMask_tpqbjl$_0) {
        if (dragPtrs.get_za3lpa$(0).isLeftButtonDown)
          tmp$ = this.leftDragMethod;
        else if (dragPtrs.get_za3lpa$(0).isRightButtonDown)
          tmp$ = this.rightDragMethod;
        else if (dragPtrs.get_za3lpa$(0).isMiddleButtonDown)
          tmp$ = this.middleDragMethod;
        else
          tmp$ = SphericalInputTransform$DragMethod$NONE_getInstance();
        this.dragMethod_dbmj85$_0 = tmp$;
        this.dragStart_48qwuy$_0 = this.dragMethod_dbmj85$_0 !== SphericalInputTransform$DragMethod$NONE_getInstance();
      }
      this.prevButtonMask_tpqbjl$_0 = dragPtrs.get_za3lpa$(0).buttonMask;
      this.ptrPos_e3vj7e$_0.set_dleff0$(dragPtrs.get_za3lpa$(0).x, dragPtrs.get_za3lpa$(0).y);
      this.deltaPos_c9l5fg$_0.set_dleff0$(dragPtrs.get_za3lpa$(0).deltaX, dragPtrs.get_za3lpa$(0).deltaY);
      this.deltaScroll_4ldocx$_0 = dragPtrs.get_za3lpa$(0).deltaScroll;
      dragPtrs.get_za3lpa$(0).consume_za3lpa$();
    }
     else {
      this.deltaPos_c9l5fg$_0.set_czzhjp$(Vec2f$Companion_getInstance().ZERO);
      this.deltaScroll_4ldocx$_0 = 0.0;
    }
  };
  function SphericalInputTransform$DragMethod(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function SphericalInputTransform$DragMethod_initFields() {
    SphericalInputTransform$DragMethod_initFields = function () {
    };
    SphericalInputTransform$DragMethod$NONE_instance = new SphericalInputTransform$DragMethod('NONE', 0);
    SphericalInputTransform$DragMethod$ROTATE_instance = new SphericalInputTransform$DragMethod('ROTATE', 1);
    SphericalInputTransform$DragMethod$PAN_instance = new SphericalInputTransform$DragMethod('PAN', 2);
  }
  var SphericalInputTransform$DragMethod$NONE_instance;
  function SphericalInputTransform$DragMethod$NONE_getInstance() {
    SphericalInputTransform$DragMethod_initFields();
    return SphericalInputTransform$DragMethod$NONE_instance;
  }
  var SphericalInputTransform$DragMethod$ROTATE_instance;
  function SphericalInputTransform$DragMethod$ROTATE_getInstance() {
    SphericalInputTransform$DragMethod_initFields();
    return SphericalInputTransform$DragMethod$ROTATE_instance;
  }
  var SphericalInputTransform$DragMethod$PAN_instance;
  function SphericalInputTransform$DragMethod$PAN_getInstance() {
    SphericalInputTransform$DragMethod_initFields();
    return SphericalInputTransform$DragMethod$PAN_instance;
  }
  SphericalInputTransform$DragMethod.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DragMethod',
    interfaces: [Enum]
  };
  function SphericalInputTransform$DragMethod$values() {
    return [SphericalInputTransform$DragMethod$NONE_getInstance(), SphericalInputTransform$DragMethod$ROTATE_getInstance(), SphericalInputTransform$DragMethod$PAN_getInstance()];
  }
  SphericalInputTransform$DragMethod.values = SphericalInputTransform$DragMethod$values;
  function SphericalInputTransform$DragMethod$valueOf(name) {
    switch (name) {
      case 'NONE':
        return SphericalInputTransform$DragMethod$NONE_getInstance();
      case 'ROTATE':
        return SphericalInputTransform$DragMethod$ROTATE_getInstance();
      case 'PAN':
        return SphericalInputTransform$DragMethod$PAN_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.scene.SphericalInputTransform.DragMethod.' + name);
    }
  }
  SphericalInputTransform$DragMethod.valueOf_61zpoe$ = SphericalInputTransform$DragMethod$valueOf;
  function SphericalInputTransform$ZoomMethod(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function SphericalInputTransform$ZoomMethod_initFields() {
    SphericalInputTransform$ZoomMethod_initFields = function () {
    };
    SphericalInputTransform$ZoomMethod$ZOOM_CENTER_instance = new SphericalInputTransform$ZoomMethod('ZOOM_CENTER', 0);
    SphericalInputTransform$ZoomMethod$ZOOM_TRANSLATE_instance = new SphericalInputTransform$ZoomMethod('ZOOM_TRANSLATE', 1);
  }
  var SphericalInputTransform$ZoomMethod$ZOOM_CENTER_instance;
  function SphericalInputTransform$ZoomMethod$ZOOM_CENTER_getInstance() {
    SphericalInputTransform$ZoomMethod_initFields();
    return SphericalInputTransform$ZoomMethod$ZOOM_CENTER_instance;
  }
  var SphericalInputTransform$ZoomMethod$ZOOM_TRANSLATE_instance;
  function SphericalInputTransform$ZoomMethod$ZOOM_TRANSLATE_getInstance() {
    SphericalInputTransform$ZoomMethod_initFields();
    return SphericalInputTransform$ZoomMethod$ZOOM_TRANSLATE_instance;
  }
  SphericalInputTransform$ZoomMethod.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ZoomMethod',
    interfaces: [Enum]
  };
  function SphericalInputTransform$ZoomMethod$values() {
    return [SphericalInputTransform$ZoomMethod$ZOOM_CENTER_getInstance(), SphericalInputTransform$ZoomMethod$ZOOM_TRANSLATE_getInstance()];
  }
  SphericalInputTransform$ZoomMethod.values = SphericalInputTransform$ZoomMethod$values;
  function SphericalInputTransform$ZoomMethod$valueOf(name) {
    switch (name) {
      case 'ZOOM_CENTER':
        return SphericalInputTransform$ZoomMethod$ZOOM_CENTER_getInstance();
      case 'ZOOM_TRANSLATE':
        return SphericalInputTransform$ZoomMethod$ZOOM_TRANSLATE_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.scene.SphericalInputTransform.ZoomMethod.' + name);
    }
  }
  SphericalInputTransform$ZoomMethod.valueOf_61zpoe$ = SphericalInputTransform$ZoomMethod$valueOf;
  function SphericalInputTransform_init$lambda(this$SphericalInputTransform) {
    return function ($receiver, ctx) {
      this$SphericalInputTransform.doCamTransform_hnzr7n$_0(ctx);
      return Unit;
    };
  }
  SphericalInputTransform.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SphericalInputTransform',
    interfaces: [Scene$DragHandler, TransformGroup]
  };
  function PanBase() {
  }
  PanBase.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PanBase',
    interfaces: []
  };
  function CameraOrthogonalPan() {
    PanBase.call(this);
    this.panPlane = new Plane();
    this.pointerRay_0 = new Ray();
  }
  CameraOrthogonalPan.prototype.computePanPoint_9h8rqb$ = function (result, scene, ptrPos, ctx) {
    this.panPlane.p.set_czzhiu$(scene.camera.globalLookAt);
    this.panPlane.n.set_czzhiu$(scene.camera.globalLookDir);
    return scene.camera.computePickRay_evt2sh$(this.pointerRay_0, ptrPos.x, ptrPos.y, scene.viewport, ctx) && this.panPlane.intersectionPoint_m2314x$(result, this.pointerRay_0);
  };
  CameraOrthogonalPan.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CameraOrthogonalPan',
    interfaces: [PanBase]
  };
  function FixedPlanePan(planeNormal) {
    PanBase.call(this);
    this.panPlane = new Plane();
    this.pointerRay_0 = new Ray();
    this.panPlane.n.set_czzhiu$(planeNormal);
  }
  FixedPlanePan.prototype.computePanPoint_9h8rqb$ = function (result, scene, ptrPos, ctx) {
    this.panPlane.p.set_czzhiu$(scene.camera.globalLookAt);
    return scene.camera.computePickRay_evt2sh$(this.pointerRay_0, ptrPos.x, ptrPos.y, scene.viewport, ctx) && this.panPlane.intersectionPoint_m2314x$(result, this.pointerRay_0);
  };
  FixedPlanePan.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FixedPlanePan',
    interfaces: [PanBase]
  };
  function xPlanePan() {
    return new FixedPlanePan(Vec3f$Companion_getInstance().X_AXIS);
  }
  function yPlanePan() {
    return new FixedPlanePan(Vec3f$Companion_getInstance().Y_AXIS);
  }
  function zPlanePan() {
    return new FixedPlanePan(Vec3f$Companion_getInstance().Z_AXIS);
  }
  function Tags(tags) {
    if (tags === void 0) {
      tags = LinkedHashMap_init();
    }
    this.tags_0 = tags;
  }
  Tags.prototype.addTag_61zpoe$ = function (tag) {
    var splitIdx = indexOf(tag, 61);
    if (splitIdx >= 0) {
      var key = substring(tag, new IntRange(0, splitIdx - 1 | 0));
      var startIndex = splitIdx + 1 | 0;
      var value = tag.substring(startIndex);
      this.set_4w9ihe$(key, value);
    }
     else {
      this.set_4w9ihe$(tag, null);
    }
  };
  Tags.prototype.set_4w9ihe$ = function (key, value) {
    this.put_xwzc9p$(key, value != null ? value.toString() : null);
  };
  Tags.prototype.plusAssign_61zpoe$ = function (tag) {
    this.addTag_61zpoe$(tag);
  };
  Tags.prototype.hasTag_jyasbz$ = function (tag, value) {
    if (value === void 0)
      value = null;
    return this.containsKey_11rb$(tag) && equals(this.get_11rb$(tag), value);
  };
  Tags.prototype.getBoolean_ivxn3r$ = function (tag, default_0) {
    var tmp$;
    var value = this.get_11rb$(tag);
    if (value == null) {
      tmp$ = default_0;
    }
     else {
      try {
        tmp$ = toBoolean(value);
      }
       catch (e) {
        if (Kotlin.isType(e, Exception)) {
          tmp$ = default_0;
        }
         else
          throw e;
      }
    }
    return tmp$;
  };
  Tags.prototype.getInt_bm4lxs$ = function (tag, default_0) {
    var tmp$;
    var value = this.get_11rb$(tag);
    if (value == null) {
      tmp$ = default_0;
    }
     else {
      try {
        tmp$ = toInt(value);
      }
       catch (e) {
        if (Kotlin.isType(e, Exception)) {
          tmp$ = default_0;
        }
         else
          throw e;
      }
    }
    return tmp$;
  };
  Tags.prototype.getFloat_9sobi5$ = function (tag, default_0) {
    var tmp$;
    var value = this.get_11rb$(tag);
    if (value == null) {
      tmp$ = default_0;
    }
     else {
      try {
        tmp$ = toDouble(value);
      }
       catch (e) {
        if (Kotlin.isType(e, Exception)) {
          tmp$ = default_0;
        }
         else
          throw e;
      }
    }
    return tmp$;
  };
  Tags.prototype.getDouble_io5o9c$ = function (tag, default_0) {
    var tmp$;
    var value = this.get_11rb$(tag);
    if (value == null) {
      tmp$ = default_0;
    }
     else {
      try {
        tmp$ = toDouble(value);
      }
       catch (e) {
        if (Kotlin.isType(e, Exception)) {
          tmp$ = default_0;
        }
         else
          throw e;
      }
    }
    return tmp$;
  };
  Tags.prototype.getTyped_pt3pci$ = defineInlineFunction('kool.de.fabmax.kool.scene.Tags.getTyped_pt3pci$', wrapFunction(function () {
    var Exception = Kotlin.kotlin.Exception;
    return function (tag, default_0, mapper) {
      var tmp$;
      var value = this.get_11rb$(tag);
      if (value == null) {
        tmp$ = default_0;
      }
       else {
        try {
          tmp$ = mapper(value);
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            tmp$ = default_0;
          }
           else
            throw e;
        }
      }
      return tmp$;
    };
  }));
  Tags.prototype.toString = function () {
    var str = StringBuilder_init();
    var destination = ArrayList_init(this.size);
    var tmp$;
    tmp$ = this.entries.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0 = destination.add_11rb$;
      var k = item.key;
      var v = item.value;
      tmp$_0.call(destination, v != null ? k + '=' + toString(v) : k);
    }
    joinTo(destination, str, void 0, '[', ']');
    return str.toString();
  };
  Object.defineProperty(Tags.prototype, 'entries', {
    get: function () {
      return this.tags_0.entries;
    }
  });
  Object.defineProperty(Tags.prototype, 'keys', {
    get: function () {
      return this.tags_0.keys;
    }
  });
  Object.defineProperty(Tags.prototype, 'size', {
    get: function () {
      return this.tags_0.size;
    }
  });
  Object.defineProperty(Tags.prototype, 'values', {
    get: function () {
      return this.tags_0.values;
    }
  });
  Tags.prototype.clear = function () {
    return this.tags_0.clear();
  };
  Tags.prototype.containsKey_11rb$ = function (key) {
    return this.tags_0.containsKey_11rb$(key);
  };
  Tags.prototype.containsValue_11rc$ = function (value) {
    return this.tags_0.containsValue_11rc$(value);
  };
  Tags.prototype.get_11rb$ = function (key) {
    return this.tags_0.get_11rb$(key);
  };
  Tags.prototype.isEmpty = function () {
    return this.tags_0.isEmpty();
  };
  Tags.prototype.put_xwzc9p$ = function (key, value) {
    return this.tags_0.put_xwzc9p$(key, value);
  };
  Tags.prototype.putAll_a2k3zr$ = function (from) {
    return this.tags_0.putAll_a2k3zr$(from);
  };
  Tags.prototype.remove_11rb$ = function (key) {
    return this.tags_0.remove_11rb$(key);
  };
  Tags.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Tags',
    interfaces: [MutableMap]
  };
  function transformGroup(name, block) {
    if (name === void 0)
      name = null;
    var tg = new TransformGroup(name);
    block(tg);
    return tg;
  }
  function TransformGroup(name) {
    if (name === void 0)
      name = null;
    Group.call(this, name);
    this.transform = new Mat4f();
    this.invTransform = new Mat4f();
    this.isIdentity = false;
    this.isDirty = false;
    this.tmpTransformVec_xv9rzf$_0 = MutableVec3f_init();
    this.tmpBounds_m1h34u$_0 = new BoundingBox();
    this.setIdentity();
  }
  TransformGroup.prototype.checkInverse = function () {
    if (this.isDirty) {
      this.transform.invert_8kv2li$(this.invTransform);
      this.isDirty = false;
    }
  };
  TransformGroup.prototype.setDirty = function () {
    this.isDirty = true;
    this.isIdentity = false;
  };
  TransformGroup.prototype.preRender_aemszp$ = function (ctx) {
    var wasIdentity = this.isIdentity;
    if (!wasIdentity) {
      ctx.mvpState.modelMatrix.push();
      ctx.mvpState.modelMatrix.mul_d4zu6j$(this.transform);
      ctx.mvpState.update_aemszp$(ctx);
    }
    Group.prototype.preRender_aemszp$.call(this, ctx);
    if (!this.bounds.isEmpty && !wasIdentity) {
      this.tmpBounds_m1h34u$_0.clear();
      this.tmpBounds_m1h34u$_0.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_xv9rzf$_0.set_y2kzbl$(this.bounds.min.x, this.bounds.min.y, this.bounds.min.z), 1.0));
      this.tmpBounds_m1h34u$_0.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_xv9rzf$_0.set_y2kzbl$(this.bounds.min.x, this.bounds.min.y, this.bounds.max.z), 1.0));
      this.tmpBounds_m1h34u$_0.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_xv9rzf$_0.set_y2kzbl$(this.bounds.min.x, this.bounds.max.y, this.bounds.min.z), 1.0));
      this.tmpBounds_m1h34u$_0.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_xv9rzf$_0.set_y2kzbl$(this.bounds.min.x, this.bounds.max.y, this.bounds.max.z), 1.0));
      this.tmpBounds_m1h34u$_0.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_xv9rzf$_0.set_y2kzbl$(this.bounds.max.x, this.bounds.min.y, this.bounds.min.z), 1.0));
      this.tmpBounds_m1h34u$_0.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_xv9rzf$_0.set_y2kzbl$(this.bounds.max.x, this.bounds.min.y, this.bounds.max.z), 1.0));
      this.tmpBounds_m1h34u$_0.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_xv9rzf$_0.set_y2kzbl$(this.bounds.max.x, this.bounds.max.y, this.bounds.min.z), 1.0));
      this.tmpBounds_m1h34u$_0.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_xv9rzf$_0.set_y2kzbl$(this.bounds.max.x, this.bounds.max.y, this.bounds.max.z), 1.0));
      this.bounds.set_ea4od8$(this.tmpBounds_m1h34u$_0);
    }
    if (!wasIdentity) {
      ctx.mvpState.modelMatrix.pop();
      ctx.mvpState.update_aemszp$(ctx);
    }
  };
  TransformGroup.prototype.render_aemszp$ = function (ctx) {
    if (this.isVisible) {
      var wasIdentity = this.isIdentity;
      if (!wasIdentity) {
        ctx.mvpState.modelMatrix.push();
        ctx.mvpState.modelMatrix.mul_d4zu6j$(this.transform);
        ctx.mvpState.update_aemszp$(ctx);
      }
      Group.prototype.render_aemszp$.call(this, ctx);
      if (!wasIdentity) {
        ctx.mvpState.modelMatrix.pop();
        ctx.mvpState.update_aemszp$(ctx);
      }
    }
  };
  TransformGroup.prototype.toGlobalCoords_w1lst9$$default = function (vec, w) {
    if (!this.isIdentity) {
      this.transform.transform_w1lst9$(vec, w);
    }
    return this.toGlobalCoords_w1lst9$(vec, w, Group.prototype.toGlobalCoords_w1lst9$$default.bind(this));
  };
  TransformGroup.prototype.toLocalCoords_w1lst9$$default = function (vec, w) {
    this.toLocalCoords_w1lst9$(vec, w, Group.prototype.toLocalCoords_w1lst9$$default.bind(this));
    if (!this.isIdentity) {
      this.checkInverse();
      this.invTransform.transform_w1lst9$(vec, w);
    }
    return vec;
  };
  TransformGroup.prototype.rayTest_jljx4v$ = function (test) {
    if (!this.isIdentity) {
      this.checkInverse();
      test.transformBy_d4zu6j$(this.invTransform);
    }
    Group.prototype.rayTest_jljx4v$.call(this, test);
    if (!this.isIdentity) {
      test.transformBy_d4zu6j$(this.transform);
    }
  };
  TransformGroup.prototype.getTransform_d4zu6j$ = function (result) {
    return result.set_d4zu6j$(this.transform);
  };
  TransformGroup.prototype.getInverseTransform_d4zu6j$ = function (result) {
    this.checkInverse();
    return result.set_d4zu6j$(this.invTransform);
  };
  TransformGroup.prototype.translate_czzhiu$ = function (t) {
    return this.translate_y2kzbl$(t.x, t.y, t.z);
  };
  TransformGroup.prototype.translate_y2kzbl$ = function (tx, ty, tz) {
    this.transform.translate_y2kzbl$(tx, ty, tz);
    this.setDirty();
    return this;
  };
  TransformGroup.prototype.rotate_ad55pp$ = function (angleDeg, axis) {
    return this.rotate_7b5o5w$(angleDeg, axis.x, axis.y, axis.z);
  };
  TransformGroup.prototype.rotate_7b5o5w$ = function (angleDeg, axX, axY, axZ) {
    this.transform.rotate_7b5o5w$(angleDeg, axX, axY, axZ);
    this.setDirty();
    return this;
  };
  TransformGroup.prototype.scale_y2kzbl$ = function (sx, sy, sz) {
    this.transform.scale_y2kzbl$(sx, sy, sz);
    this.setDirty();
    return this;
  };
  TransformGroup.prototype.mul_d4zu6j$ = function (mat) {
    this.transform.mul_d4zu6j$(mat);
    this.setDirty();
    return this;
  };
  TransformGroup.prototype.set_d4zu6j$ = function (mat) {
    this.transform.set_d4zu6j$(mat);
    this.setDirty();
    return this;
  };
  TransformGroup.prototype.setIdentity = function () {
    this.transform.setIdentity();
    this.invTransform.setIdentity();
    this.isDirty = false;
    this.isIdentity = true;
    return this;
  };
  TransformGroup.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TransformGroup',
    interfaces: [Group]
  };
  function Button(name, root) {
    Label.call(this, name, root);
    this.onClick = ArrayList_init_0();
    this.textColorHovered = new ThemeOrCustomProp(Color$Companion_getInstance().WHITE);
    this.isPressed_xi0anj$_0 = false;
    this.isHovered_k6sd62$_0 = false;
    this.ptrDownPos = MutableVec2f_init();
    this.textAlignment = new Gravity(Alignment$CENTER_getInstance(), Alignment$CENTER_getInstance());
    this.onHoverEnter.add_11rb$(Button_init$lambda(this));
    this.onHoverExit.add_11rb$(Button_init$lambda_0(this));
    this.onHover.add_11rb$(Button_init$lambda_1(this));
  }
  Object.defineProperty(Button.prototype, 'isPressed', {
    get: function () {
      return this.isPressed_xi0anj$_0;
    },
    set: function (isPressed) {
      this.isPressed_xi0anj$_0 = isPressed;
    }
  });
  Object.defineProperty(Button.prototype, 'isHovered', {
    get: function () {
      return this.isHovered_k6sd62$_0;
    },
    set: function (isHovered) {
      this.isHovered_k6sd62$_0 = isHovered;
    }
  });
  Button.prototype.fireOnClick_kjsf19$ = function (ptr, rt, ctx) {
    var tmp$;
    tmp$ = this.onClick;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.onClick.get_za3lpa$(i)(this, ptr, rt, ctx);
    }
  };
  Button.prototype.setThemeProps_aemszp$ = function (ctx) {
    Label.prototype.setThemeProps_aemszp$.call(this, ctx);
    this.textColorHovered.setTheme_11rb$(this.root.theme.accentColor);
  };
  Button.prototype.createThemeUi_aemszp$ = function (ctx) {
    return this.root.theme.newButtonUi_t4rm0v$(this);
  };
  function Button_init$lambda(this$Button) {
    return function ($receiver, f, f_0, f_1) {
      this$Button.isHovered = true;
      return Unit;
    };
  }
  function Button_init$lambda_0(this$Button) {
    return function ($receiver, f, f_0, f_1) {
      this$Button.isHovered = false;
      this$Button.isPressed = false;
      return Unit;
    };
  }
  function Button_init$lambda_1(this$Button) {
    return function ($receiver, ptr, rt, ctx) {
      if (ptr.isLeftButtonEvent) {
        if (ptr.isLeftButtonDown) {
          this$Button.ptrDownPos.set_dleff0$(rt.hitPositionLocal.x - this$Button.componentBounds.min.x, rt.hitPositionLocal.y - this$Button.componentBounds.min.y);
          this$Button.isPressed = true;
        }
         else if (this$Button.isPressed) {
          this$Button.isPressed = false;
          this$Button.ptrDownPos.x = this$Button.ptrDownPos.x - (rt.hitPositionLocal.x - this$Button.componentBounds.min.x);
          this$Button.ptrDownPos.y = this$Button.ptrDownPos.y - (rt.hitPositionLocal.y - this$Button.componentBounds.min.y);
          if (this$Button.ptrDownPos.length() < dp_0(this$Button, 5.0)) {
            this$Button.fireOnClick_kjsf19$(ptr, rt, ctx);
          }
        }
      }
      return Unit;
    };
  }
  Button.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Button',
    interfaces: [Label]
  };
  function ButtonUi(button, baseUi) {
    LabelUi.call(this, button, baseUi);
    this.button = button;
    this.hoverAnimator = new LinearAnimator(new InterpolatedFloat(0.0, 1.0));
    this.colorWeightStd = 1.0;
    this.colorWeightHovered = 0.0;
    this.hoverEnterListener = ButtonUi$hoverEnterListener$lambda(this);
    this.hoverExitListener = ButtonUi$hoverExitListener$lambda(this);
  }
  function ButtonUi$createUi$lambda(this$ButtonUi) {
    return function (v) {
      this$ButtonUi.colorWeightHovered = v;
      this$ButtonUi.colorWeightStd = 1.0 - v;
      this$ButtonUi.button.requestUiUpdate();
      return Unit;
    };
  }
  ButtonUi.prototype.createUi_aemszp$ = function (ctx) {
    LabelUi.prototype.createUi_aemszp$.call(this, ctx);
    this.hoverAnimator.speed = 0.0;
    this.hoverAnimator.value.onUpdate = ButtonUi$createUi$lambda(this);
    var $receiver = this.button.onHoverEnter;
    var element = this.hoverEnterListener;
    $receiver.add_11rb$(element);
    var $receiver_0 = this.button.onHoverExit;
    var element_0 = this.hoverExitListener;
    $receiver_0.add_11rb$(element_0);
  };
  ButtonUi.prototype.updateTextColor = function () {
    this.textColor.clear();
    this.textColor.add_y83vuj$(this.button.textColor.apply(), this.colorWeightStd);
    this.textColor.add_y83vuj$(this.button.textColorHovered.apply(), this.colorWeightHovered);
  };
  ButtonUi.prototype.dispose_aemszp$ = function (ctx) {
    LabelUi.prototype.dispose_aemszp$.call(this, ctx);
    var $receiver = this.button.onHoverEnter;
    var element = this.hoverEnterListener;
    $receiver.remove_11rb$(element);
    var $receiver_0 = this.button.onHoverExit;
    var element_0 = this.hoverExitListener;
    $receiver_0.remove_11rb$(element_0);
  };
  ButtonUi.prototype.onRender_aemszp$ = function (ctx) {
    LabelUi.prototype.onRender_aemszp$.call(this, ctx);
    this.hoverAnimator.tick_aemszp$(ctx);
  };
  function ButtonUi$hoverEnterListener$lambda(this$ButtonUi) {
    return function ($receiver, f, f_0, f_1) {
      this$ButtonUi.hoverAnimator.duration = 0.1;
      this$ButtonUi.hoverAnimator.speed = 1.0;
      return Unit;
    };
  }
  function ButtonUi$hoverExitListener$lambda(this$ButtonUi) {
    return function ($receiver, f, f_0, f_1) {
      this$ButtonUi.hoverAnimator.duration = 0.2;
      this$ButtonUi.hoverAnimator.speed = -1.0;
      return Unit;
    };
  }
  ButtonUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ButtonUi',
    interfaces: [LabelUi]
  };
  function ComponentUi() {
  }
  ComponentUi.prototype.updateComponentAlpha = function () {
  };
  ComponentUi.prototype.createUi_aemszp$ = function (ctx) {
  };
  ComponentUi.prototype.updateUi_aemszp$ = function (ctx) {
  };
  ComponentUi.prototype.onRender_aemszp$ = function (ctx) {
  };
  ComponentUi.prototype.dispose_aemszp$ = function (ctx) {
  };
  ComponentUi.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ComponentUi',
    interfaces: [Disposable]
  };
  function BlankComponentUi() {
  }
  BlankComponentUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlankComponentUi',
    interfaces: [ComponentUi]
  };
  function SimpleComponentUi(component) {
    this.component = component;
    this.shader = null;
    this.meshData = MeshData_init([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().NORMALS, Attribute$Companion_getInstance().COLORS, Attribute$Companion_getInstance().TEXTURE_COORDS]);
    this.meshBuilder = new MeshBuilder(this.meshData);
    this.mesh = new Mesh(this.meshData);
    this.color = new ThemeOrCustomProp(Color$Companion_getInstance().BLACK.withAlpha_mx4ult$(0.5));
  }
  SimpleComponentUi.prototype.updateComponentAlpha = function () {
    var tmp$;
    (tmp$ = this.shader) != null ? (tmp$.alpha = this.component.alpha) : null;
  };
  SimpleComponentUi.prototype.createUi_aemszp$ = function (ctx) {
    var tmp$, tmp$_0;
    this.color.setTheme_11rb$(this.component.root.theme.backgroundColor).apply();
    this.shader = this.createShader_aemszp$(ctx);
    (tmp$_0 = (tmp$ = this.shader) != null ? tmp$.staticColor : null) != null ? tmp$_0.set_czzhhz$(this.color.prop) : null;
    this.mesh.shader = this.shader;
    this.component.addNode_xtids1$(this.mesh, 0);
  };
  SimpleComponentUi.prototype.dispose_aemszp$ = function (ctx) {
    this.component.minusAssign_f1kmr1$(this.mesh);
    this.mesh.dispose_aemszp$(ctx);
  };
  SimpleComponentUi.prototype.updateUi_aemszp$ = function (ctx) {
    var tmp$, tmp$_0;
    this.color.setTheme_11rb$(this.component.root.theme.backgroundColor).apply();
    (tmp$_0 = (tmp$ = this.shader) != null ? tmp$.staticColor : null) != null ? tmp$_0.set_czzhhz$(this.color.prop) : null;
    this.component.setupBuilder_84rojv$(this.meshBuilder);
    this.meshBuilder.color = this.color.prop;
    var $this = this.meshBuilder;
    var $receiver = $this.rectProps.defaults();
    $receiver.size.set_dleff0$(this.component.width, this.component.height);
    $receiver.fullTexCoords();
    $this.rect_e5k3t5$($this.rectProps);
  };
  function SimpleComponentUi$createShader$lambda(this$SimpleComponentUi) {
    return function ($receiver) {
      $receiver.lightModel = this$SimpleComponentUi.component.root.shaderLightModel;
      $receiver.colorModel = ColorModel$STATIC_COLOR_getInstance();
      $receiver.isAlpha = true;
      $receiver.clipMethod = new LocalPlaneClip(6);
      return Unit;
    };
  }
  SimpleComponentUi.prototype.createShader_aemszp$ = function (ctx) {
    return basicShader(void 0, SimpleComponentUi$createShader$lambda(this));
  };
  SimpleComponentUi.prototype.onRender_aemszp$ = function (ctx) {
    var tmp$;
    (tmp$ = this.shader) != null ? (setDrawBounds(tmp$, this.component.drawBounds), Unit) : null;
  };
  SimpleComponentUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SimpleComponentUi',
    interfaces: [ComponentUi]
  };
  function BlurredComponentUi(component) {
    SimpleComponentUi.call(this, component);
  }
  function BlurredComponentUi$createShader$lambda(this$BlurredComponentUi) {
    return function ($receiver) {
      $receiver.lightModel = this$BlurredComponentUi.component.root.shaderLightModel;
      $receiver.colorModel = ColorModel$STATIC_COLOR_getInstance();
      $receiver.isAlpha = true;
      $receiver.clipMethod = new LocalPlaneClip(6);
      return Unit;
    };
  }
  BlurredComponentUi.prototype.createShader_aemszp$ = function (ctx) {
    var $receiver = blurShader(BlurredComponentUi$createShader$lambda(this));
    $receiver.blurHelper = this.component.root.createBlurHelper();
    return $receiver;
  };
  BlurredComponentUi.prototype.updateUi_aemszp$ = function (ctx) {
    SimpleComponentUi.prototype.updateUi_aemszp$.call(this, ctx);
    var bs = this.shader;
    if (Kotlin.isType(bs, BlurShader)) {
      bs.colorMix = bs.staticColor.w;
      bs.staticColor.w = 1.0;
    }
  };
  BlurredComponentUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlurredComponentUi',
    interfaces: [SimpleComponentUi]
  };
  function setDrawBounds($receiver, drawBounds) {
    var tmp$, tmp$_0;
    if (Kotlin.isType($receiver, BasicShader)) {
      if ((tmp$_0 = Kotlin.isType(tmp$ = $receiver.clipMethod, LocalPlaneClip) ? tmp$ : null) != null) {
        if (tmp$_0.numPlanes === 6) {
          tmp$_0.planes.get_za3lpa$(0).set_2qa7tb$(Vec3f$Companion_getInstance().X_AXIS, drawBounds.min.x);
          tmp$_0.planes.get_za3lpa$(1).set_2qa7tb$(Vec3f$Companion_getInstance().NEG_X_AXIS, -drawBounds.max.x);
          tmp$_0.planes.get_za3lpa$(2).set_2qa7tb$(Vec3f$Companion_getInstance().Y_AXIS, drawBounds.min.y);
          tmp$_0.planes.get_za3lpa$(3).set_2qa7tb$(Vec3f$Companion_getInstance().NEG_Y_AXIS, -drawBounds.max.y);
          tmp$_0.planes.get_za3lpa$(4).set_2qa7tb$(Vec3f$Companion_getInstance().Z_AXIS, drawBounds.min.z);
          tmp$_0.planes.get_za3lpa$(5).set_2qa7tb$(Vec3f$Companion_getInstance().NEG_Z_AXIS, -drawBounds.max.z);
        }
      }
    }
  }
  function DrawerMenu(width, title, name, root) {
    UiContainer.call(this, name, root);
    this.menuAnimator_0 = new CosAnimator(new InterpolatedFloat(0.0, 1.0));
    this.menuButton_8be2vx$_2ldp8u$_0 = this.menuButton_8be2vx$_2ldp8u$_0;
    this.initFont_0 = true;
    this.menuAnimator_0.duration = 0.25;
    this.menuAnimator_0.speed = -1.0;
    this.menuAnimator_0.value.onUpdate = DrawerMenu_init$lambda(this);
    this.layoutSpec.setOrigin_4ujscr$(zero(), zero(), zero());
    this.layoutSpec.setSize_4ujscr$(width, pcs(100.0, true), full());
    this.alpha = 0.0;
    if (title != null) {
      this.unaryPlus_uv0sim$(root.label_tokfmu$('title', DrawerMenu_init$lambda$lambda$lambda(title, root, this)));
      this.unaryPlus_uv0sim$(root.component_qphi6d$('divider', DrawerMenu_init$lambda$lambda$lambda_0(root)));
    }
    root.toggleButton_6j87po$(name + '-menuButton', DrawerMenu_init$lambda$lambda(this));
  }
  Object.defineProperty(DrawerMenu.prototype, 'menuButton_8be2vx$', {
    get: function () {
      if (this.menuButton_8be2vx$_2ldp8u$_0 == null)
        return throwUPAE('menuButton');
      return this.menuButton_8be2vx$_2ldp8u$_0;
    },
    set: function (menuButton) {
      this.menuButton_8be2vx$_2ldp8u$_0 = menuButton;
    }
  });
  Object.defineProperty(DrawerMenu.prototype, 'isOpen', {
    get: function () {
      return this.menuButton_8be2vx$.isEnabled;
    },
    set: function (value) {
      this.menuButton_8be2vx$.isEnabled = value;
    }
  });
  function DrawerMenu$MenuButtonUi($outer, tb) {
    this.$outer = $outer;
    ToggleButtonUi.call(this, tb, new BlankComponentUi());
  }
  function DrawerMenu$MenuButtonUi$createUi$lambda(this$MenuButtonUi, this$DrawerMenu) {
    return function ($receiver) {
      this$DrawerMenu.menuAnimator_0.speed = this$MenuButtonUi.tb.isEnabled ? 1.0 : -1.0;
      return Unit;
    };
  }
  function DrawerMenu$MenuButtonUi$createUi$lambda_0(this$MenuButtonUi) {
    return function ($receiver) {
      $receiver.colorModel = ColorModel$VERTEX_COLOR_getInstance();
      $receiver.lightModel = this$MenuButtonUi.tb.root.shaderLightModel;
      return Unit;
    };
  }
  DrawerMenu$MenuButtonUi.prototype.createUi_aemszp$ = function (ctx) {
    ToggleButtonUi.prototype.createUi_aemszp$.call(this, ctx);
    this.knobAnimator.duration = 0.5;
    this.knobAnimator.value.onUpdate;
    var $receiver = this.tb.onStateChange;
    var element = DrawerMenu$MenuButtonUi$createUi$lambda(this, this.$outer);
    $receiver.add_11rb$(element);
    this.mesh.shader = basicShader(void 0, DrawerMenu$MenuButtonUi$createUi$lambda_0(this));
  };
  DrawerMenu$MenuButtonUi.prototype.onRender_aemszp$ = function (ctx) {
    ToggleButtonUi.prototype.onRender_aemszp$.call(this, ctx);
    this.$outer.menuAnimator_0.tick_aemszp$(ctx);
  };
  DrawerMenu$MenuButtonUi.prototype.updateUi_aemszp$ = function (ctx) {
    var hw = this.tb.width * 0.5;
    var hh = this.tb.height * 0.18;
    var hx = -hw / 2.0;
    var ph = dp_0(this.tb, 2.5);
    this.updateTextColor();
    this.tb.setupBuilder_84rojv$(this.meshBuilder);
    var $receiver = this.meshBuilder;
    $receiver.color = new Color(0.0, 0.0, 0.0, 0.0);
    var $receiver_0 = $receiver.circleProps.defaults();
    var a = this.tb.width;
    var b = this.tb.height;
    $receiver_0.radius = Math_0.min(a, b) / 2.0;
    $receiver_0.center.set_y2kzbl$(this.tb.width / 2.0, this.tb.height / 2.0, -4.0);
    $receiver_0.steps = 30;
    $receiver.circle_59f34t$($receiver.circleProps);
    var tx = this.knobAnimator.value.value * -hw * 0.1;
    var w = hw - this.knobAnimator.value.value * hw * 0.4;
    $receiver.color = this.textColor;
    $receiver.translate_y2kzbl$(this.tb.width / 2.0, this.tb.height / 2.0, 0.0);
    $receiver.rotate_ad55pp$(180.0 - this.knobAnimator.value.value * 180.0, Vec3f$Companion_getInstance().Z_AXIS);
    $receiver.transform.push();
    $receiver.translate_y2kzbl$(tx, hh, 0.0);
    $receiver.rotate_ad55pp$(this.knobAnimator.value.value * 45.0, Vec3f$Companion_getInstance().Z_AXIS);
    var $receiver_1 = $receiver.rectProps.defaults();
    $receiver_1.origin.set_y2kzbl$(hx, -ph / 2.0, 0.0);
    $receiver_1.size.set_dleff0$(w, ph);
    $receiver.rect_e5k3t5$($receiver.rectProps);
    $receiver.transform.pop();
    var $receiver_2 = $receiver.rectProps.defaults();
    $receiver_2.origin.set_y2kzbl$(hx, -ph / 2.0, 0.0);
    $receiver_2.size.set_dleff0$(hw, ph);
    $receiver.rect_e5k3t5$($receiver.rectProps);
    $receiver.transform.push();
    $receiver.translate_y2kzbl$(tx, -hh, 0.0);
    $receiver.rotate_ad55pp$(this.knobAnimator.value.value * -45.0, Vec3f$Companion_getInstance().Z_AXIS);
    var $receiver_3 = $receiver.rectProps.defaults();
    $receiver_3.origin.set_y2kzbl$(hx, -ph / 2.0, 0.0);
    $receiver_3.size.set_dleff0$(w, ph);
    $receiver.rect_e5k3t5$($receiver.rectProps);
    $receiver.transform.pop();
  };
  DrawerMenu$MenuButtonUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MenuButtonUi',
    interfaces: [ToggleButtonUi]
  };
  function DrawerMenu_init$lambda(this$DrawerMenu) {
    return function (v) {
      this$DrawerMenu.setScrollOffset_y2kzbl$(dp_0(this$DrawerMenu, 40.0) * (1.0 - v), 0.0, 0.0);
      this$DrawerMenu.alpha = v;
      return Unit;
    };
  }
  function DrawerMenu_init$lambda$lambda$lambda$lambda(this$, this$_0) {
    return function ($receiver, ctx) {
      if (this$.initFont_0) {
        this$.initFont_0 = false;
        this$_0.font.setCustom_11rb$(titleFont(this$_0, ctx));
      }
      return Unit;
    };
  }
  function DrawerMenu_init$lambda$lambda$lambda(closure$title, this$, this$_0) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(-50.0, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(pcs(100.0, true), dps(40.0, true), full());
      $receiver.textAlignment = new Gravity(Alignment$CENTER_getInstance(), Alignment$CENTER_getInstance());
      $receiver.text = closure$title;
      $receiver.textColor.setCustom_11rb$(this$.theme.accentColor);
      var $receiver_0 = $receiver.onPreRender;
      var element = DrawerMenu_init$lambda$lambda$lambda$lambda(this$_0, $receiver);
      $receiver_0.add_11rb$(element);
      return Unit;
    };
  }
  function DrawerMenu_init$lambda$lambda$lambda_0(this$) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(pcs(5.0), dps(-58.0, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(pcs(90.0), dps(1.0, true), full());
      var bg = new SimpleComponentUi($receiver);
      bg.color.setCustom_11rb$(this$.theme.accentColor);
      $receiver.ui.setCustom_11rb$(bg);
      return Unit;
    };
  }
  function DrawerMenu_init$lambda$lambda(this$DrawerMenu) {
    return function ($receiver) {
      this$DrawerMenu.menuButton_8be2vx$ = $receiver;
      $receiver.ui.setCustom_11rb$(new DrawerMenu$MenuButtonUi(this$DrawerMenu, $receiver));
      $receiver.layoutSpec.setOrigin_4ujscr$(dps(10.0, true), dps(-50.0, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(40.0, true), dps(40.0, true), full());
      return Unit;
    };
  }
  DrawerMenu.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DrawerMenu',
    interfaces: [UiContainer]
  };
  function Label(name, root) {
    UiComponent.call(this, name, root);
    this.text_qvo458$_0 = name;
    this.textAlignment_ux8xbn$_0 = new Gravity(Alignment$START_getInstance(), Alignment$CENTER_getInstance());
    this.font = new ThemeOrCustomProp(null);
    this.textColor = new ThemeOrCustomProp(Color$Companion_getInstance().WHITE);
  }
  Object.defineProperty(Label.prototype, 'text', {
    get: function () {
      return this.text_qvo458$_0;
    },
    set: function (value) {
      if (!equals(value, this.text_qvo458$_0)) {
        this.text_qvo458$_0 = value;
        this.requestUiUpdate();
      }
    }
  });
  Object.defineProperty(Label.prototype, 'textAlignment', {
    get: function () {
      return this.textAlignment_ux8xbn$_0;
    },
    set: function (value) {
      if (!(value != null ? value.equals(this.textAlignment_ux8xbn$_0) : null)) {
        this.textAlignment_ux8xbn$_0 = value;
        this.requestUiUpdate();
      }
    }
  });
  Label.prototype.setThemeProps_aemszp$ = function (ctx) {
    UiComponent.prototype.setThemeProps_aemszp$.call(this, ctx);
    this.font.setTheme_11rb$(standardFont(this, ctx));
    this.textColor.setTheme_11rb$(this.root.theme.foregroundColor);
  };
  Label.prototype.createThemeUi_aemszp$ = function (ctx) {
    return this.root.theme.newLabelUi_wviu0r$(this);
  };
  Label.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Label',
    interfaces: [UiComponent]
  };
  function LabelUi(label, baseUi) {
    this.label = label;
    this.baseUi_tctiu8$_0 = baseUi;
    this.meshData = MeshData_init([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().NORMALS, Attribute$Companion_getInstance().COLORS, Attribute$Companion_getInstance().TEXTURE_COORDS]);
    this.meshBuilder = new MeshBuilder(this.meshData);
    this.mesh = new Mesh(this.meshData);
    this.font = this.label.font.prop;
    this.textColor = MutableColor_init();
    this.textStartX = 0.0;
    this.textWidth = 0.0;
    this.textBaseline = 0.0;
  }
  LabelUi.prototype.updateComponentAlpha = function () {
    this.baseUi_tctiu8$_0.updateComponentAlpha();
    var shader = this.mesh.shader;
    if (Kotlin.isType(shader, BasicShader)) {
      shader.alpha = this.label.alpha;
    }
  };
  function LabelUi$createUi$lambda(this$LabelUi) {
    return function ($receiver) {
      $receiver.lightModel = this$LabelUi.label.root.shaderLightModel;
      $receiver.colorModel = ColorModel$VERTEX_COLOR_getInstance();
      $receiver.isAlpha = true;
      $receiver.clipMethod = new LocalPlaneClip(6);
      return Unit;
    };
  }
  LabelUi.prototype.createUi_aemszp$ = function (ctx) {
    this.baseUi_tctiu8$_0.createUi_aemszp$(ctx);
    this.mesh.shader = fontShader(void 0, LabelUi$createUi$lambda(this));
    this.label.plusAssign_f1kmr1$(this.mesh);
  };
  LabelUi.prototype.updateUi_aemszp$ = function (ctx) {
    var tmp$;
    this.baseUi_tctiu8$_0.updateUi_aemszp$(ctx);
    if (!this.label.font.isUpdate && this.label.font.prop == null) {
      this.label.font.setCustom_11rb$(Font$Companion_getInstance().defaultFont_aemszp$(ctx));
    }
    if (this.label.font.isUpdate) {
      (tmp$ = this.label.font.prop) != null ? (tmp$.dispose_aemszp$(ctx), Unit) : null;
      this.font = this.label.font.apply();
    }
    var shader = this.mesh.shader;
    if (Kotlin.isType(shader, BasicShader)) {
      shader.texture = this.font;
    }
    this.label.setupBuilder_84rojv$(this.meshBuilder);
    this.updateTextColor();
    this.computeTextMetrics();
    this.renderText_aemszp$(ctx);
  };
  LabelUi.prototype.onRender_aemszp$ = function (ctx) {
    var tmp$;
    (tmp$ = this.mesh.shader) != null ? (setDrawBounds(tmp$, this.label.drawBounds), Unit) : null;
    this.baseUi_tctiu8$_0.onRender_aemszp$(ctx);
  };
  LabelUi.prototype.dispose_aemszp$ = function (ctx) {
    this.baseUi_tctiu8$_0.dispose_aemszp$(ctx);
    this.label.minusAssign_f1kmr1$(this.mesh);
    this.mesh.dispose_aemszp$(ctx);
  };
  LabelUi.prototype.computeTextMetrics = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    this.textWidth = (tmp$_0 = (tmp$ = this.font) != null ? tmp$.textWidth_61zpoe$(this.label.text) : null) != null ? tmp$_0 : 0.0;
    switch (this.label.textAlignment.xAlignment.name) {
      case 'START':
        tmp$_1 = this.label.padding.left.toUnits_dleff0$(this.label.width, this.label.dpi);
        break;
      case 'CENTER':
        tmp$_1 = (this.label.width - this.textWidth) / 2.0;
        break;
      case 'END':
        tmp$_1 = this.label.width - this.textWidth - this.label.padding.right.toUnits_dleff0$(this.label.width, this.label.dpi);
        break;
      default:tmp$_1 = Kotlin.noWhenBranchMatched();
        break;
    }
    this.textStartX = tmp$_1;
    switch (this.label.textAlignment.yAlignment.name) {
      case 'START':
        tmp$_6 = this.label.height - this.label.padding.top.toUnits_dleff0$(this.label.width, this.label.dpi) - ((tmp$_3 = (tmp$_2 = this.font) != null ? tmp$_2.normHeight : null) != null ? tmp$_3 : 0.0);
        break;
      case 'CENTER':
        tmp$_6 = (this.label.height - ((tmp$_5 = (tmp$_4 = this.font) != null ? tmp$_4.normHeight : null) != null ? tmp$_5 : 0.0)) / 2.0;
        break;
      case 'END':
        tmp$_6 = this.label.padding.bottom.toUnits_dleff0$(this.label.height, this.label.dpi);
        break;
      default:tmp$_6 = Kotlin.noWhenBranchMatched();
        break;
    }
    this.textBaseline = tmp$_6;
  };
  LabelUi.prototype.renderText_aemszp$ = function (ctx) {
    this.meshBuilder.color = this.textColor;
    var fnt = this.font;
    if (fnt != null) {
      var $this = this.meshBuilder;
      var tmp$;
      var tmp$_0;
      if ((tmp$ = $this.textProps) != null)
        tmp$_0 = tmp$;
      else {
        var $receiver = new TextProps(fnt);
        $this.textProps = $receiver;
        tmp$_0 = $receiver;
      }
      var props = tmp$_0;
      props.defaults();
      props.font = fnt;
      props.origin.set_y2kzbl$(this.textStartX, this.textBaseline, dp_0(this.label, 0.1));
      props.text = this.label.text;
      $this.text_lis6zk$(props);
    }
  };
  LabelUi.prototype.updateTextColor = function () {
    this.textColor.set_d7aj7k$(this.label.textColor.apply());
  };
  LabelUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LabelUi',
    interfaces: [ComponentUi]
  };
  function LayoutSpec() {
    this.width = uns(0.0);
    this.height = uns(0.0);
    this.depth = uns(0.0);
    this.x = uns(0.0);
    this.y = uns(0.0);
    this.z = uns(0.0);
  }
  LayoutSpec.prototype.setOrigin_4ujscr$ = function (x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
  };
  LayoutSpec.prototype.setSize_4ujscr$ = function (width, height, depth) {
    this.width = width;
    this.height = height;
    this.depth = depth;
  };
  LayoutSpec.prototype.set_m6ih2k$ = function (other) {
    this.width = other.width;
    this.height = other.height;
    this.depth = other.depth;
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
  };
  LayoutSpec.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LayoutSpec',
    interfaces: []
  };
  function SizeUnit(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function SizeUnit_initFields() {
    SizeUnit_initFields = function () {
    };
    SizeUnit$UN_instance = new SizeUnit('UN', 0);
    SizeUnit$DP_instance = new SizeUnit('DP', 1);
    SizeUnit$MM_instance = new SizeUnit('MM', 2);
    SizeUnit$PC_instance = new SizeUnit('PC', 3);
  }
  var SizeUnit$UN_instance;
  function SizeUnit$UN_getInstance() {
    SizeUnit_initFields();
    return SizeUnit$UN_instance;
  }
  var SizeUnit$DP_instance;
  function SizeUnit$DP_getInstance() {
    SizeUnit_initFields();
    return SizeUnit$DP_instance;
  }
  var SizeUnit$MM_instance;
  function SizeUnit$MM_getInstance() {
    SizeUnit_initFields();
    return SizeUnit$MM_instance;
  }
  var SizeUnit$PC_instance;
  function SizeUnit$PC_getInstance() {
    SizeUnit_initFields();
    return SizeUnit$PC_instance;
  }
  SizeUnit.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SizeUnit',
    interfaces: [Enum]
  };
  function SizeUnit$values() {
    return [SizeUnit$UN_getInstance(), SizeUnit$DP_getInstance(), SizeUnit$MM_getInstance(), SizeUnit$PC_getInstance()];
  }
  SizeUnit.values = SizeUnit$values;
  function SizeUnit$valueOf(name) {
    switch (name) {
      case 'UN':
        return SizeUnit$UN_getInstance();
      case 'DP':
        return SizeUnit$DP_getInstance();
      case 'MM':
        return SizeUnit$MM_getInstance();
      case 'PC':
        return SizeUnit$PC_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.scene.ui.SizeUnit.' + name);
    }
  }
  SizeUnit.valueOf_61zpoe$ = SizeUnit$valueOf;
  function zero() {
    return new SizeSpec(0.0, SizeUnit$UN_getInstance());
  }
  function full() {
    return new SizeSpec(100.0, SizeUnit$PC_getInstance());
  }
  function uns(value, roundToUnit) {
    if (roundToUnit === void 0)
      roundToUnit = true;
    return new SizeSpec(value, SizeUnit$UN_getInstance(), roundToUnit);
  }
  function dps(value, roundToUnit) {
    if (roundToUnit === void 0)
      roundToUnit = true;
    return new SizeSpec(value, SizeUnit$DP_getInstance(), roundToUnit);
  }
  function mms(value, roundToUnit) {
    if (roundToUnit === void 0)
      roundToUnit = true;
    return new SizeSpec(value, SizeUnit$MM_getInstance(), roundToUnit);
  }
  function pcs(value, roundToUnit) {
    if (roundToUnit === void 0)
      roundToUnit = true;
    return new SizeSpec(value, SizeUnit$PC_getInstance(), roundToUnit);
  }
  function pc(pc, size) {
    return size * pc / 100.0;
  }
  function dp(dp, dpi) {
    return dp * dpi / 96.0;
  }
  function mm(mm, dpi) {
    return mm * dpi / 25.4;
  }
  function pcW($receiver, pc_0) {
    return pc(pc_0, $receiver.width);
  }
  function pcH($receiver, pc_0) {
    return pc(pc_0, $receiver.height);
  }
  function pcD($receiver, pc_0) {
    return pc(pc_0, $receiver.depth);
  }
  function dp_0($receiver, pc) {
    return dp(pc, $receiver.dpi);
  }
  function mm_0($receiver, pc) {
    return mm(pc, $receiver.dpi);
  }
  function pcR(pc, size) {
    return round(size * pc / 100.0);
  }
  function dpR(dp, dpi) {
    return round(dp * dpi / 96.0);
  }
  function mmR(mm, dpi) {
    return round(mm * dpi / 25.4);
  }
  function pcWR($receiver, pc) {
    return pcR(pc, $receiver.width);
  }
  function pcHR($receiver, pc) {
    return pcR(pc, $receiver.height);
  }
  function pcDR($receiver, pc) {
    return pcR(pc, $receiver.depth);
  }
  function dpR_0($receiver, pc) {
    return dpR(pc, $receiver.dpi);
  }
  function mmR_0($receiver, pc) {
    return mmR(pc, $receiver.dpi);
  }
  function SizeSpec(value, unit, roundToUnit) {
    if (roundToUnit === void 0)
      roundToUnit = true;
    this.value = value;
    this.unit = unit;
    this.roundToUnit = roundToUnit;
  }
  SizeSpec.prototype.toUnits_dleff0$ = function (size, dpi) {
    var tmp$;
    if (this.roundToUnit) {
      switch (this.unit.name) {
        case 'UN':
          tmp$ = round(this.value);
          break;
        case 'DP':
          tmp$ = dpR(this.value, dpi);
          break;
        case 'MM':
          tmp$ = mmR(this.value, dpi);
          break;
        case 'PC':
          tmp$ = pcR(this.value, size);
          break;
        default:tmp$ = Kotlin.noWhenBranchMatched();
          break;
      }
    }
     else {
      switch (this.unit.name) {
        case 'UN':
          tmp$ = this.value;
          break;
        case 'DP':
          tmp$ = dp(this.value, dpi);
          break;
        case 'MM':
          tmp$ = mm(this.value, dpi);
          break;
        case 'PC':
          tmp$ = pc(this.value, size);
          break;
        default:tmp$ = Kotlin.noWhenBranchMatched();
          break;
      }
    }
    return tmp$;
  };
  SizeSpec.prototype.plus_m986jv$ = function (size) {
    return new CombSizeSpec(this, size, true);
  };
  SizeSpec.prototype.minus_m986jv$ = function (size) {
    return new CombSizeSpec(this, size, false);
  };
  SizeSpec.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!Kotlin.isType(other, SizeSpec))
      return false;
    if (this.value !== other.value)
      return false;
    if (this.unit !== other.unit)
      return false;
    if (this.roundToUnit !== other.roundToUnit)
      return false;
    return true;
  };
  SizeSpec.prototype.hashCode = function () {
    var result = hashCode(this.value);
    result = (31 * result | 0) + this.unit.hashCode() | 0;
    result = (31 * result | 0) + hashCode(this.roundToUnit) | 0;
    return result;
  };
  SizeSpec.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SizeSpec',
    interfaces: []
  };
  function CombSizeSpec(left, right, add) {
    SizeSpec.call(this, 0.0, SizeUnit$UN_getInstance());
    this.left = left;
    this.right = right;
    this.add = add;
  }
  CombSizeSpec.prototype.toUnits_dleff0$ = function (size, dpi) {
    var leftUns = this.left.toUnits_dleff0$(size, dpi);
    var rightUns = this.right.toUnits_dleff0$(size, dpi);
    if (this.add) {
      return leftUns + rightUns;
    }
     else {
      return leftUns - rightUns;
    }
  };
  CombSizeSpec.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CombSizeSpec',
    interfaces: [SizeSpec]
  };
  function Margin(top, bottom, left, right) {
    this.top = top;
    this.bottom = bottom;
    this.left = left;
    this.right = right;
  }
  Margin.prototype.set_m986jv$ = function (all) {
    this.set_107250$(all, all, all, all);
  };
  Margin.prototype.set_107250$ = function (top, bottom, left, right) {
    this.top = top;
    this.bottom = bottom;
    this.left = left;
    this.right = right;
  };
  Margin.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Margin',
    interfaces: []
  };
  Margin.prototype.component1 = function () {
    return this.top;
  };
  Margin.prototype.component2 = function () {
    return this.bottom;
  };
  Margin.prototype.component3 = function () {
    return this.left;
  };
  Margin.prototype.component4 = function () {
    return this.right;
  };
  Margin.prototype.copy_107250$ = function (top, bottom, left, right) {
    return new Margin(top === void 0 ? this.top : top, bottom === void 0 ? this.bottom : bottom, left === void 0 ? this.left : left, right === void 0 ? this.right : right);
  };
  Margin.prototype.toString = function () {
    return 'Margin(top=' + Kotlin.toString(this.top) + (', bottom=' + Kotlin.toString(this.bottom)) + (', left=' + Kotlin.toString(this.left)) + (', right=' + Kotlin.toString(this.right)) + ')';
  };
  Margin.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.top) | 0;
    result = result * 31 + Kotlin.hashCode(this.bottom) | 0;
    result = result * 31 + Kotlin.hashCode(this.left) | 0;
    result = result * 31 + Kotlin.hashCode(this.right) | 0;
    return result;
  };
  Margin.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.top, other.top) && Kotlin.equals(this.bottom, other.bottom) && Kotlin.equals(this.left, other.left) && Kotlin.equals(this.right, other.right)))));
  };
  function Gravity(xAlignment, yAlignment) {
    this.xAlignment = xAlignment;
    this.yAlignment = yAlignment;
  }
  Gravity.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Gravity',
    interfaces: []
  };
  Gravity.prototype.component1 = function () {
    return this.xAlignment;
  };
  Gravity.prototype.component2 = function () {
    return this.yAlignment;
  };
  Gravity.prototype.copy_9pkgn0$ = function (xAlignment, yAlignment) {
    return new Gravity(xAlignment === void 0 ? this.xAlignment : xAlignment, yAlignment === void 0 ? this.yAlignment : yAlignment);
  };
  Gravity.prototype.toString = function () {
    return 'Gravity(xAlignment=' + Kotlin.toString(this.xAlignment) + (', yAlignment=' + Kotlin.toString(this.yAlignment)) + ')';
  };
  Gravity.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.xAlignment) | 0;
    result = result * 31 + Kotlin.hashCode(this.yAlignment) | 0;
    return result;
  };
  Gravity.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.xAlignment, other.xAlignment) && Kotlin.equals(this.yAlignment, other.yAlignment)))));
  };
  function Alignment(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Alignment_initFields() {
    Alignment_initFields = function () {
    };
    Alignment$START_instance = new Alignment('START', 0);
    Alignment$CENTER_instance = new Alignment('CENTER', 1);
    Alignment$END_instance = new Alignment('END', 2);
  }
  var Alignment$START_instance;
  function Alignment$START_getInstance() {
    Alignment_initFields();
    return Alignment$START_instance;
  }
  var Alignment$CENTER_instance;
  function Alignment$CENTER_getInstance() {
    Alignment_initFields();
    return Alignment$CENTER_instance;
  }
  var Alignment$END_instance;
  function Alignment$END_getInstance() {
    Alignment_initFields();
    return Alignment$END_instance;
  }
  Alignment.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Alignment',
    interfaces: [Enum]
  };
  function Alignment$values() {
    return [Alignment$START_getInstance(), Alignment$CENTER_getInstance(), Alignment$END_getInstance()];
  }
  Alignment.values = Alignment$values;
  function Alignment$valueOf(name) {
    switch (name) {
      case 'START':
        return Alignment$START_getInstance();
      case 'CENTER':
        return Alignment$CENTER_getInstance();
      case 'END':
        return Alignment$END_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.scene.ui.Alignment.' + name);
    }
  }
  Alignment.valueOf_61zpoe$ = Alignment$valueOf;
  function ScrollHandler(scrollTarget, name) {
    if (name === void 0)
      name = toString(scrollTarget.name) + '-scroll';
    UiComponent.call(this, name, scrollTarget.root);
    this.scrollTarget = scrollTarget;
    this.trackColor = Color$Companion_getInstance().GRAY.withAlpha_mx4ult$(0.2);
    this.handleColor = Color$Companion_getInstance().GRAY.withAlpha_mx4ult$(0.75);
    this.verticalTrackBounds = new BoundingBox();
    this.verticalHandleBounds = new BoundingBox();
    this.horizontalTrackBounds = new BoundingBox();
    this.horizontalHandleBounds = new BoundingBox();
    this.scrollPosY_ted4vc$_0 = new SpringDamperFloat(0.0);
    this.scrollPosYGuard_vhhi7b$_0 = new SpringDamperFloat(0.0);
    this.pickRay_m6hrch$_0 = new Ray();
    this.padding.set_m986jv$(dps(3.0));
    this.layoutSpec.setOrigin_4ujscr$(zero(), zero(), zero());
    this.layoutSpec.setSize_4ujscr$(this.scrollTarget.layoutSpec.width, this.scrollTarget.layoutSpec.height, this.scrollTarget.layoutSpec.depth);
    this.scrollPosY_ted4vc$_0.stiffness = 300.0;
    this.scrollPosYGuard_vhhi7b$_0.stiffness = 500.0;
  }
  ScrollHandler.prototype.onSceneChanged_9srkog$ = function (oldScene, newScene) {
    UiComponent.prototype.onSceneChanged_9srkog$.call(this, oldScene, newScene);
    oldScene != null ? (oldScene.removeDragHandler_y44tw7$(this), Unit) : null;
    newScene != null ? (newScene.registerDragHandler_y44tw7$(this), Unit) : null;
  };
  ScrollHandler.prototype.createThemeUi_aemszp$ = function (ctx) {
    return this.root.theme.newScrollHandlerUi_dz938y$(this);
  };
  ScrollHandler.prototype.setDrawBoundsFromWrappedComponentBounds_hf6scw$ = function (parentContainer, ctx) {
    this.drawBounds.set_ea4od8$(this.scrollTarget.drawBounds);
    this.bounds.set_ea4od8$(this.drawBounds);
  };
  ScrollHandler.prototype.handleDrag_urvnay$ = function (dragPtrs, scene, ctx) {
    if (this.alpha === 0.0) {
      return;
    }
    if (!dragPtrs.isEmpty() && !dragPtrs.get_za3lpa$(0).isConsumed_za3lpa$() && this.computeLocalPickRay_wswg9$(dragPtrs.get_za3lpa$(0), ctx, this.pickRay_m6hrch$_0) && this.bounds.hitDistanceSqr_nvyeur$(this.pickRay_m6hrch$_0) < kotlin_js_internal_FloatCompanionObject.MAX_VALUE) {
      this.scrollPosY_ted4vc$_0.desired = this.scrollPosY_ted4vc$_0.desired + dragPtrs.get_za3lpa$(0).deltaScroll * 50;
      dragPtrs.get_za3lpa$(0).consume_za3lpa$();
    }
    var max = 0.0;
    if (this.scrollPosY_ted4vc$_0.desired > max) {
      if (this.scrollPosY_ted4vc$_0.desired > this.scrollPosYGuard_vhhi7b$_0.actual) {
        this.scrollPosYGuard_vhhi7b$_0.actual = this.scrollPosY_ted4vc$_0.desired;
      }
      this.scrollPosYGuard_vhhi7b$_0.desired = max;
      this.scrollPosY_ted4vc$_0.desired = this.scrollPosYGuard_vhhi7b$_0.animate_mx4ult$(ctx.deltaT);
    }
    var min = this.scrollTarget.drawBounds.size.y - this.scrollTarget.contentBounds.size.y;
    if (this.scrollPosY_ted4vc$_0.desired < min) {
      if (this.scrollPosY_ted4vc$_0.desired < this.scrollPosYGuard_vhhi7b$_0.actual) {
        this.scrollPosYGuard_vhhi7b$_0.actual = this.scrollPosY_ted4vc$_0.desired;
      }
      this.scrollPosYGuard_vhhi7b$_0.desired = min;
      this.scrollPosY_ted4vc$_0.desired = this.scrollPosYGuard_vhhi7b$_0.animate_mx4ult$(ctx.deltaT);
    }
    this.scrollPosY_ted4vc$_0.animate_mx4ult$(ctx.deltaT);
    var a = this.scrollTarget.scrollOffset.y;
    var b = this.scrollPosY_ted4vc$_0.actual;
    var eps;
    eps = package$math.FUZZY_EQ_F;
    var $receiver = a - b;
    if (!(Math_0.abs($receiver) <= eps)) {
      this.scrollTarget.setScrollOffset_y2kzbl$(0.0, this.scrollPosY_ted4vc$_0.actual, 0.0);
    }
  };
  ScrollHandler.prototype.rayTest_jljx4v$ = function (test) {
    if (this.alpha !== 0.0) {
      var a = this.verticalTrackBounds.hitDistanceSqr_nvyeur$(test.ray);
      var b = this.horizontalTrackBounds.hitDistanceSqr_nvyeur$(test.ray);
      var distSqr = Math_0.min(a, b);
      if (distSqr < kotlin_js_internal_FloatCompanionObject.MAX_VALUE && distSqr <= test.hitDistanceSqr) {
        test.setHit_vfk0k2$(this, Math_0.sqrt(distSqr));
      }
    }
  };
  ScrollHandler.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ScrollHandler',
    interfaces: [Scene$DragHandler, UiComponent]
  };
  function ScrollHandlerUi(scrollHandler) {
    this.scrollHandler = scrollHandler;
    this.meshData = MeshData_init([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().NORMALS, Attribute$Companion_getInstance().COLORS]);
    this.meshBuilder = new MeshBuilder(this.meshData);
    this.mesh = new Mesh(this.meshData);
  }
  ScrollHandlerUi.prototype.updateComponentAlpha = function () {
    var shader = this.mesh.shader;
    if (Kotlin.isType(shader, BasicShader)) {
      shader.alpha = this.scrollHandler.alpha;
    }
  };
  function ScrollHandlerUi$createUi$lambda(this$ScrollHandlerUi) {
    return function ($receiver) {
      $receiver.lightModel = this$ScrollHandlerUi.scrollHandler.root.shaderLightModel;
      $receiver.colorModel = ColorModel$VERTEX_COLOR_getInstance();
      $receiver.isAlpha = true;
      $receiver.clipMethod = new LocalPlaneClip(6);
      return Unit;
    };
  }
  ScrollHandlerUi.prototype.createUi_aemszp$ = function (ctx) {
    this.mesh.shader = basicShader(void 0, ScrollHandlerUi$createUi$lambda(this));
    this.scrollHandler.plusAssign_f1kmr1$(this.mesh);
  };
  ScrollHandlerUi.prototype.updateUi_aemszp$ = function (ctx) {
    this.meshBuilder.clear();
    this.meshBuilder.identity();
    this.computeTrackBounds();
    this.drawVerticalBar();
    this.drawHorizontalBar();
  };
  ScrollHandlerUi.prototype.computeTrackBounds = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var target = this.scrollHandler.scrollTarget;
    var showVertBar = target.drawBounds.size.y < target.contentBounds.size.y;
    var showHoriBar = target.drawBounds.size.x < target.contentBounds.size.x;
    var width = target.drawBounds.size.x;
    var height = target.drawBounds.size.y;
    var paddingT = this.scrollHandler.padding.top.toUnits_dleff0$(height, this.scrollHandler.dpi);
    var paddingB = this.scrollHandler.padding.bottom.toUnits_dleff0$(height, this.scrollHandler.dpi);
    var paddingL = this.scrollHandler.padding.left.toUnits_dleff0$(width, this.scrollHandler.dpi);
    var paddingR = this.scrollHandler.padding.right.toUnits_dleff0$(width, this.scrollHandler.dpi);
    var trackW = dp_0(this.scrollHandler, 6.0);
    var trackZ = dp_0(this.scrollHandler, 0.1);
    var handleZ = dp_0(this.scrollHandler, 0.25);
    if (showVertBar) {
      var x = width - paddingR - trackW;
      tmp$_0 = this.scrollHandler.padding.bottom.toUnits_dleff0$(height, this.scrollHandler.dpi);
      if (showHoriBar) {
        tmp$ = trackW + paddingR;
      }
       else {
        tmp$ = 0.0;
      }
      var y = tmp$_0 + tmp$;
      var w = trackW;
      if (showHoriBar) {
        tmp$_1 = trackW + paddingR;
      }
       else {
        tmp$_1 = 0.0;
      }
      var h = height - paddingT - paddingB - tmp$_1;
      this.scrollHandler.verticalTrackBounds.set_w8lrqs$(x, y, trackZ, x + w, y + h, trackZ).move_czzhiu$(target.drawBounds.min);
      var handleH = target.drawBounds.size.y / target.contentBounds.size.y * h;
      var min = dp_0(this.scrollHandler, 12.0);
      var clamp$result;
      if (handleH < min) {
        clamp$result = min;
      }
       else if (handleH > h) {
        clamp$result = h;
      }
       else {
        clamp$result = handleH;
      }
      var handleHClamped = clamp$result;
      var $receiver = handleHClamped - handleH;
      var clamp$result_0;
      if ($receiver < 0.0) {
        clamp$result_0 = 0.0;
      }
       else if ($receiver > h) {
        clamp$result_0 = h;
      }
       else {
        clamp$result_0 = $receiver;
      }
      var trackHMod = h - clamp$result_0;
      var handleY = (target.drawBounds.min.y - target.contentBounds.min.y) / target.contentBounds.size.y * trackHMod + y;
      var max = y + h - handleHClamped;
      var clamp$result_1;
      if (handleY < y) {
        clamp$result_1 = y;
      }
       else if (handleY > max) {
        clamp$result_1 = max;
      }
       else {
        clamp$result_1 = handleY;
      }
      var handleYClamped = clamp$result_1;
      this.scrollHandler.verticalHandleBounds.set_w8lrqs$(x, handleYClamped, handleZ, x + w, handleYClamped + handleHClamped, handleZ).move_czzhiu$(target.drawBounds.min);
    }
     else {
      this.scrollHandler.verticalTrackBounds.clear();
      this.scrollHandler.verticalHandleBounds.clear();
    }
    if (showHoriBar) {
      var x_0 = paddingL;
      var y_0 = paddingB;
      tmp$_3 = this.scrollHandler.width - paddingL - paddingR;
      if (showVertBar) {
        tmp$_2 = trackW + paddingR;
      }
       else {
        tmp$_2 = 0.0;
      }
      var w_0 = tmp$_3 - tmp$_2;
      var h_0 = trackW;
      this.scrollHandler.horizontalTrackBounds.set_w8lrqs$(x_0, y_0, trackZ, x_0 + w_0, y_0 + h_0, trackZ).move_czzhiu$(target.drawBounds.min);
      var handleW = target.drawBounds.size.x / target.contentBounds.size.x * w_0;
      var min_0 = dp_0(this.scrollHandler, 12.0);
      var clamp$result_2;
      if (handleW < min_0) {
        clamp$result_2 = min_0;
      }
       else if (handleW > w_0) {
        clamp$result_2 = w_0;
      }
       else {
        clamp$result_2 = handleW;
      }
      var handleWClamped = clamp$result_2;
      var $receiver_0 = handleWClamped - handleW;
      var clamp$result_3;
      if ($receiver_0 < 0.0) {
        clamp$result_3 = 0.0;
      }
       else if ($receiver_0 > w_0) {
        clamp$result_3 = w_0;
      }
       else {
        clamp$result_3 = $receiver_0;
      }
      var trackWMod = w_0 - clamp$result_3;
      var handleX = (target.drawBounds.min.x - target.contentBounds.min.x) / target.contentBounds.size.x * trackWMod + x_0;
      var max_0 = x_0 + w_0 - handleWClamped;
      var clamp$result_4;
      if (handleX < x_0) {
        clamp$result_4 = x_0;
      }
       else if (handleX > max_0) {
        clamp$result_4 = max_0;
      }
       else {
        clamp$result_4 = handleX;
      }
      var handleXClamped = clamp$result_4;
      this.scrollHandler.horizontalHandleBounds.set_w8lrqs$(handleXClamped, y_0, handleZ, handleXClamped + handleWClamped, y_0 + h_0, handleZ).move_czzhiu$(target.drawBounds.min);
    }
     else {
      this.scrollHandler.horizontalTrackBounds.clear();
      this.scrollHandler.horizontalHandleBounds.clear();
    }
  };
  ScrollHandlerUi.prototype.drawVerticalBar = function () {
    this.drawDefaultBar_xyh9j8$_0(this.scrollHandler.verticalTrackBounds, this.scrollHandler.verticalHandleBounds);
  };
  ScrollHandlerUi.prototype.drawHorizontalBar = function () {
    this.drawDefaultBar_xyh9j8$_0(this.scrollHandler.horizontalTrackBounds, this.scrollHandler.horizontalHandleBounds);
  };
  ScrollHandlerUi.prototype.drawDefaultBar_xyh9j8$_0 = function (track, handle) {
    if (!track.isEmpty) {
      this.meshBuilder.color = this.scrollHandler.trackColor;
      var $this = this.meshBuilder;
      var $receiver = $this.rectProps.defaults();
      $receiver.origin.set_y2kzbl$(track.min.x, track.min.y, track.min.z);
      $receiver.size.set_dleff0$(track.size.x, track.size.y);
      var a = track.size.x;
      var b = track.size.y;
      $receiver.cornerRadius = Math_0.min(a, b) / 2.0;
      $receiver.cornerSteps = 4;
      $this.rect_e5k3t5$($this.rectProps);
    }
    if (!handle.isEmpty) {
      this.meshBuilder.color = this.scrollHandler.handleColor;
      var $this_0 = this.meshBuilder;
      var $receiver_0 = $this_0.rectProps.defaults();
      $receiver_0.origin.set_y2kzbl$(handle.min.x, handle.min.y, handle.min.z);
      $receiver_0.size.set_dleff0$(handle.size.x, handle.size.y);
      var a_0 = handle.size.x;
      var b_0 = handle.size.y;
      $receiver_0.cornerRadius = Math_0.min(a_0, b_0) / 2.0;
      $receiver_0.cornerSteps = 4;
      $this_0.rect_e5k3t5$($this_0.rectProps);
    }
  };
  ScrollHandlerUi.prototype.onRender_aemszp$ = function (ctx) {
    var tmp$;
    (tmp$ = this.mesh.shader) != null ? (setDrawBounds(tmp$, this.scrollHandler.scrollTarget.drawBounds), Unit) : null;
  };
  ScrollHandlerUi.prototype.dispose_aemszp$ = function (ctx) {
    this.scrollHandler.minusAssign_f1kmr1$(this.mesh);
    this.mesh.dispose_aemszp$(ctx);
  };
  ScrollHandlerUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ScrollHandlerUi',
    interfaces: [ComponentUi]
  };
  function Slider(name, min, max, value, root) {
    UiComponent.call(this, name, root);
    this.onValueChanged = ArrayList_init_0();
    this.trackColor = Color$Companion_getInstance().GRAY;
    this.trackColorHighlighted = new ThemeOrCustomProp(Color$Companion_getInstance().LIGHT_GRAY);
    this.knobColor = new ThemeOrCustomProp(Color$Companion_getInstance().WHITE);
    this.trackWidth = 0.0;
    this.knobSize = 0.0;
    this.knobPosition = MutableVec2f_init();
    this.min_c38r2y$_0 = min;
    this.max_c38wrw$_0 = max;
    this.value_ymubdz$_0 = value;
    this.pickRay_0 = new Ray();
    this.hitPlane_0 = new Plane();
    this.hitPos_0 = MutableVec3f_init();
    this.initHitPos_0 = MutableVec3f_init();
    this.startDrag_0 = false;
    this.startDragValue_0 = 0.0;
    this.hitPlane_0.n.set_czzhiu$(Vec3f$Companion_getInstance().Z_AXIS);
    this.onHover.add_11rb$(Slider_init$lambda(this));
  }
  Object.defineProperty(Slider.prototype, 'min', {
    get: function () {
      return this.min_c38r2y$_0;
    },
    set: function (value) {
      if (value !== this.min_c38r2y$_0) {
        this.min_c38r2y$_0 = value;
        this.requestUiUpdate();
      }
    }
  });
  Object.defineProperty(Slider.prototype, 'max', {
    get: function () {
      return this.max_c38wrw$_0;
    },
    set: function (value) {
      if (value !== this.max_c38wrw$_0) {
        this.max_c38wrw$_0 = value;
        this.requestUiUpdate();
      }
    }
  });
  Object.defineProperty(Slider.prototype, 'value', {
    get: function () {
      return this.value_ymubdz$_0;
    },
    set: function (value) {
      var tmp$;
      if (value !== this.value_ymubdz$_0) {
        var min = this.min;
        var max = this.max;
        var clamp$result;
        if (value < min) {
          clamp$result = min;
        }
         else if (value > max) {
          clamp$result = max;
        }
         else {
          clamp$result = value;
        }
        this.value_ymubdz$_0 = clamp$result;
        this.requestUiUpdate();
        tmp$ = this.onValueChanged;
        for (var i = 0; i !== tmp$.size; ++i) {
          this.onValueChanged.get_za3lpa$(i)(this, this.value_ymubdz$_0);
        }
      }
    }
  });
  Slider.prototype.setValue_y2kzbl$ = function (min, max, value) {
    this.min = min;
    this.max = max;
    this.value = value;
  };
  Slider.prototype.isOverKnob_0 = function (x, y) {
    var dx = x - this.knobPosition.x;
    var dy = y - this.knobPosition.y;
    return dx * dx + dy * dy < this.knobSize * this.knobSize;
  };
  Slider.prototype.handleDrag_urvnay$ = function (dragPtrs, scene, ctx) {
    if (dragPtrs.size === 1 && !dragPtrs.get_za3lpa$(0).isConsumed_za3lpa$() && dragPtrs.get_za3lpa$(0).isLeftButtonDown && this.computeLocalPickRay_wswg9$(dragPtrs.get_za3lpa$(0), ctx, this.pickRay_0)) {
      if (this.hitPlane_0.intersectionPoint_m2314x$(this.hitPos_0, this.pickRay_0)) {
        if (this.startDrag_0) {
          this.startDrag_0 = false;
          this.initHitPos_0.set_czzhiu$(this.hitPos_0);
          this.startDragValue_0 = this.value;
        }
        var deltaX = this.hitPos_0.x - this.initHitPos_0.x;
        this.value = this.startDragValue_0 + deltaX / this.trackWidth * (this.max - this.min);
      }
      dragPtrs.get_za3lpa$(0).consume_za3lpa$();
    }
     else {
      scene.removeDragHandler_y44tw7$(this);
    }
  };
  Slider.prototype.setThemeProps_aemszp$ = function (ctx) {
    UiComponent.prototype.setThemeProps_aemszp$.call(this, ctx);
    this.knobColor.setTheme_11rb$(this.root.theme.accentColor);
    this.trackColorHighlighted.setTheme_11rb$(MutableColor_init().add_y83vuj$(this.root.theme.accentColor, 0.4));
  };
  Slider.prototype.createThemeUi_aemszp$ = function (ctx) {
    return this.root.theme.newSliderUi_l85jm8$(this);
  };
  function Slider_init$lambda(this$Slider) {
    return function ($receiver, ptr, rt, f) {
      var tmp$;
      var ptX = rt.hitPositionLocal.x - this$Slider.componentBounds.min.x;
      var ptY = rt.hitPositionLocal.y - this$Slider.componentBounds.min.y;
      if (ptr.isLeftButtonEvent && ptr.isLeftButtonDown && this$Slider.isOverKnob_0(ptX, ptY)) {
        (tmp$ = $receiver.scene) != null ? (tmp$.registerDragHandler_y44tw7$(this$Slider), Unit) : null;
        this$Slider.startDrag_0 = true;
      }
      return Unit;
    };
  }
  Slider.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Slider',
    interfaces: [Scene$DragHandler, UiComponent]
  };
  function SliderUi(slider, baseUi) {
    this.slider = slider;
    this.baseUi = baseUi;
    this.meshData = MeshData_init([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().NORMALS, Attribute$Companion_getInstance().COLORS, Attribute$Companion_getInstance().TEXTURE_COORDS]);
    this.meshBuilder = new MeshBuilder(this.meshData);
    this.mesh = new Mesh(this.meshData);
  }
  SliderUi.prototype.updateComponentAlpha = function () {
    this.baseUi.updateComponentAlpha();
    var shader = this.mesh.shader;
    if (Kotlin.isType(shader, BasicShader)) {
      shader.alpha = this.slider.alpha;
    }
  };
  function SliderUi$createUi$lambda($receiver) {
    $receiver.lightModel = LightModel$PHONG_LIGHTING_getInstance();
    $receiver.colorModel = ColorModel$VERTEX_COLOR_getInstance();
    $receiver.isAlpha = true;
    $receiver.clipMethod = new LocalPlaneClip(6);
    return Unit;
  }
  SliderUi.prototype.createUi_aemszp$ = function (ctx) {
    this.baseUi.createUi_aemszp$(ctx);
    this.mesh.shader = basicShader(void 0, SliderUi$createUi$lambda);
    this.slider.plusAssign_f1kmr1$(this.mesh);
  };
  SliderUi.prototype.dispose_aemszp$ = function (ctx) {
    this.baseUi.dispose_aemszp$(ctx);
    this.mesh.dispose_aemszp$(ctx);
    this.slider.minusAssign_f1kmr1$(this.mesh);
  };
  SliderUi.prototype.updateUi_aemszp$ = function (ctx) {
    this.baseUi.updateUi_aemszp$(ctx);
    this.slider.knobSize = dp_0(this.slider, 10.0);
    var trackH = dp_0(this.slider, 6.0);
    var x = this.slider.padding.left.toUnits_dleff0$(this.slider.width, this.slider.dpi) + this.slider.knobSize;
    var y = (this.slider.height - trackH) / 2;
    var p = (this.slider.value - this.slider.min) / (this.slider.max - this.slider.min);
    this.slider.trackWidth = this.slider.width - x - this.slider.knobSize - this.slider.padding.right.toUnits_dleff0$(this.slider.width, this.slider.dpi);
    this.slider.knobPosition.set_dleff0$(x + this.slider.trackWidth * p, this.slider.height / 2.0);
    this.slider.setupBuilder_84rojv$(this.meshBuilder);
    if (this.slider.value > this.slider.min) {
      this.meshBuilder.color = this.slider.trackColorHighlighted.apply();
      var $this = this.meshBuilder;
      var $receiver = $this.rectProps.defaults();
      $receiver.origin.set_y2kzbl$(x, y, dp_0(this.slider, 0.1));
      $receiver.size.set_dleff0$(this.slider.knobPosition.x - x + trackH, trackH);
      $receiver.cornerRadius = trackH / 2.0;
      $receiver.cornerSteps = 4;
      $this.rect_e5k3t5$($this.rectProps);
    }
    if (this.slider.value < this.slider.max) {
      this.meshBuilder.color = this.slider.trackColor;
      var $this_0 = this.meshBuilder;
      var $receiver_0 = $this_0.rectProps.defaults();
      $receiver_0.origin.set_y2kzbl$(this.slider.knobPosition.x - trackH, y, dp_0(this.slider, 0.1));
      $receiver_0.size.set_dleff0$(this.slider.trackWidth - this.slider.knobPosition.x + x + trackH, trackH);
      $receiver_0.cornerRadius = trackH / 2.0;
      $receiver_0.cornerSteps = 4;
      $this_0.rect_e5k3t5$($this_0.rectProps);
    }
    this.meshBuilder.color = this.slider.knobColor.apply();
    var $this_1 = this.meshBuilder;
    var $receiver_1 = $this_1.circleProps.defaults();
    $receiver_1.center.set_y2kzbl$(this.slider.knobPosition.x, this.slider.knobPosition.y, dp_0(this.slider, 0.2));
    $receiver_1.radius = this.slider.knobSize;
    $receiver_1.steps = 30;
    $this_1.circle_59f34t$($this_1.circleProps);
  };
  SliderUi.prototype.onRender_aemszp$ = function (ctx) {
    var tmp$;
    (tmp$ = this.mesh.shader) != null ? (setDrawBounds(tmp$, this.slider.drawBounds), Unit) : null;
    this.baseUi.onRender_aemszp$(ctx);
  };
  SliderUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SliderUi',
    interfaces: [ComponentUi]
  };
  function TextField(name, root) {
    Label.call(this, name, root);
    this.editText = new EditableText();
    this.onPreRender.add_11rb$(TextField_init$lambda(this));
  }
  TextField.prototype.createThemeUi_aemszp$ = function (ctx) {
    return this.root.theme.newTextFieldUi_p39bdq$(this);
  };
  function TextField_init$lambda(this$TextField) {
    return function ($receiver, ctx) {
      var tmp$;
      if (!ctx.inputMgr.keyEvents.isEmpty()) {
        tmp$ = ctx.inputMgr.keyEvents.iterator();
        while (tmp$.hasNext()) {
          var e = tmp$.next();
          if (e.isCharTyped) {
            this$TextField.editText.charTyped_s8itvh$(unboxChar(e.typedChar));
          }
           else if (e.isPressed) {
            switch (e.keyCode) {
              case -17:
                this$TextField.editText.backspace();
                break;
              case -19:
                this$TextField.editText.deleteSelection();
                break;
              case -25:
                if (e.isCtrlDown) {
                  this$TextField.editText.moveCaret_fzusl$(3, e.isShiftDown);
                }
                 else {
                  this$TextField.editText.moveCaret_fzusl$(1, e.isShiftDown);
                }

                break;
              case -26:
                if (e.isCtrlDown) {
                  this$TextField.editText.moveCaret_fzusl$(4, e.isShiftDown);
                }
                 else {
                  this$TextField.editText.moveCaret_fzusl$(2, e.isShiftDown);
                }

                break;
              case -21:
                this$TextField.editText.moveCaret_fzusl$(5, e.isShiftDown);
                break;
              case -22:
                this$TextField.editText.moveCaret_fzusl$(6, e.isShiftDown);
                break;
            }
          }
        }
        this$TextField.text = this$TextField.editText.toString();
      }
      return Unit;
    };
  }
  TextField.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextField',
    interfaces: [Label]
  };
  function TextFieldUi(textField, baseUi) {
    LabelUi.call(this, textField, baseUi);
    this.textField = textField;
    this.caretAlphaAnimator_mmbcs$_0 = new CosAnimator(new InterpolatedFloat(0.0, 1.0));
    this.caretColor_qpd03i$_0 = MutableColor_init();
    this.caretDrawPos_hkh11t$_0 = new InterpolatedFloat(0.0, 0.0);
    this.caretPosAnimator_3ucebe$_0 = new LinearAnimator(this.caretDrawPos_hkh11t$_0);
    this.caretAlphaAnimator_mmbcs$_0.duration = 0.5;
    this.caretAlphaAnimator_mmbcs$_0.repeating = Animator$Companion_getInstance().REPEAT_TOGGLE_DIR;
    this.caretPosAnimator_3ucebe$_0.duration = 0.1;
  }
  TextFieldUi.prototype.onRender_aemszp$ = function (ctx) {
    this.textField.requestUiUpdate();
    LabelUi.prototype.onRender_aemszp$.call(this, ctx);
  };
  TextFieldUi.prototype.renderText_aemszp$ = function (ctx) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    var x1 = this.label.padding.left.toUnits_dleff0$(this.label.width, this.label.dpi);
    var x2 = this.label.width - this.label.padding.right.toUnits_dleff0$(this.label.width, this.label.dpi);
    var y = this.textBaseline - ((tmp$_1 = (tmp$_0 = (tmp$ = this.font) != null ? tmp$.fontProps : null) != null ? tmp$_0.sizeUnits : null) != null ? tmp$_1 : 0.0) * 0.2;
    var caretX = {v: this.textStartX};
    var selectionX = {v: this.textStartX};
    if (this.textField.editText.caretPosition > 0 || this.textField.editText.selectionStart > 0) {
      var a = this.textField.editText.caretPosition;
      var b = this.textField.editText.selectionStart;
      tmp$_2 = Math_0.max(a, b) - 1 | 0;
      for (var i = 0; i <= tmp$_2; i++) {
        var w = (tmp$_4 = (tmp$_3 = this.font) != null ? tmp$_3.charWidth_s8itvh$(unboxChar(this.textField.editText.get_za3lpa$(i))) : null) != null ? tmp$_4 : 0.0;
        if (i < this.textField.editText.caretPosition) {
          caretX.v += w;
        }
        if (i < this.textField.editText.selectionStart) {
          selectionX.v += w;
        }
      }
    }
    if (caretX.v !== this.caretDrawPos_hkh11t$_0.to) {
      this.caretDrawPos_hkh11t$_0.from = this.caretDrawPos_hkh11t$_0.value;
      this.caretDrawPos_hkh11t$_0.to = caretX.v;
      this.caretPosAnimator_3ucebe$_0.progress = 0.0;
      this.caretPosAnimator_3ucebe$_0.speed = 1.0;
    }
    caretX.v = this.caretPosAnimator_3ucebe$_0.tick_aemszp$(ctx);
    var $this = this.meshBuilder;
    $this.transform.push();
    var tmp$_5, tmp$_6, tmp$_7;
    $this.translate_y2kzbl$(0.0, 0.0, dp_0(this.label, 0.1));
    this.meshBuilder.color = this.label.root.theme.accentColor;
    this.meshBuilder.line_s2l86p$(x1, y, x2, y, dp_0(this.label, 1.5));
    if (this.textField.editText.selectionStart !== this.textField.editText.caretPosition) {
      this.caretColor_qpd03i$_0.set_d7aj7k$(this.label.root.theme.accentColor);
      this.caretColor_qpd03i$_0.a = 0.4;
      this.meshBuilder.color = this.caretColor_qpd03i$_0;
      var $this_0 = this.meshBuilder;
      var $receiver = $this_0.rectProps.defaults();
      var tmp$_8, tmp$_9, tmp$_10;
      $receiver.origin.set_y2kzbl$(caretX.v, y, 0.0);
      $receiver.size.set_dleff0$(selectionX.v - caretX.v, ((tmp$_10 = (tmp$_9 = (tmp$_8 = this.font) != null ? tmp$_8.fontProps : null) != null ? tmp$_9.sizeUnits : null) != null ? tmp$_10 : 0.0) * 1.2);
      $this_0.rect_e5k3t5$($this_0.rectProps);
    }
    this.caretColor_qpd03i$_0.set_d7aj7k$(this.label.root.theme.accentColor);
    this.caretColor_qpd03i$_0.a = this.caretAlphaAnimator_mmbcs$_0.tick_aemszp$(ctx);
    this.meshBuilder.color = this.caretColor_qpd03i$_0;
    this.meshBuilder.line_s2l86p$(caretX.v, y, caretX.v, this.textBaseline + ((tmp$_7 = (tmp$_6 = (tmp$_5 = this.font) != null ? tmp$_5.fontProps : null) != null ? tmp$_6.sizeUnits : null) != null ? tmp$_7 : 0.0), dp_0(this.label, 1.5));
    $this.transform.pop();
    LabelUi.prototype.renderText_aemszp$.call(this, ctx);
  };
  TextFieldUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextFieldUi',
    interfaces: [LabelUi]
  };
  function EditableText(txt) {
    EditableText$Companion_getInstance();
    if (txt === void 0)
      txt = '';
    this.text_x0rs8x$_0 = txt;
    this.caretPosition_lco9r8$_0 = 0;
    this.selectionStart_trwhxy$_0 = 0;
  }
  Object.defineProperty(EditableText.prototype, 'text', {
    get: function () {
      return this.text_x0rs8x$_0;
    },
    set: function (value) {
      if (this.caretPosition > value.length) {
        this.caretPosition = value.length;
      }
      if (this.selectionStart > value.length) {
        this.selectionStart = value.length;
      }
      this.text_x0rs8x$_0 = value;
    }
  });
  Object.defineProperty(EditableText.prototype, 'caretPosition', {
    get: function () {
      return this.caretPosition_lco9r8$_0;
    },
    set: function (value) {
      var max = this.text.length;
      var clamp$result;
      if (value < 0) {
        clamp$result = 0;
      }
       else if (value > max) {
        clamp$result = max;
      }
       else {
        clamp$result = value;
      }
      this.caretPosition_lco9r8$_0 = clamp$result;
    }
  });
  Object.defineProperty(EditableText.prototype, 'selectionStart', {
    get: function () {
      return this.selectionStart_trwhxy$_0;
    },
    set: function (value) {
      var max = this.text.length;
      var clamp$result;
      if (value < 0) {
        clamp$result = 0;
      }
       else if (value > max) {
        clamp$result = max;
      }
       else {
        clamp$result = value;
      }
      this.selectionStart_trwhxy$_0 = clamp$result;
    }
  });
  EditableText.prototype.charTyped_s8itvh$ = function (c) {
    this.replaceSelection_61zpoe$(String.fromCharCode(c));
  };
  EditableText.prototype.moveCaret_fzusl$ = function (mode, selection) {
    switch (mode) {
      case 1:
        this.caretPosition = this.caretPosition - 1 | 0;
        break;
      case 2:
        this.caretPosition = this.caretPosition + 1 | 0;
        break;
      case 5:
        this.caretPosition = 0;
        break;
      case 6:
        this.caretPosition = this.text.length;
        break;
      case 3:
        this.moveWordLeft_0();
        break;
      case 4:
        this.moveWordRight_0();
        break;
    }
    if (!selection) {
      this.selectionStart = this.caretPosition;
    }
  };
  EditableText.prototype.moveWordLeft_0 = function () {
    if (this.caretPosition > 0) {
      var $receiver = this.text;
      var endIndex = this.caretPosition;
      var idx = lastIndexOf($receiver.substring(0, endIndex), 32);
      if (idx < 0) {
        this.caretPosition = 0;
      }
       else {
        this.caretPosition = idx;
      }
    }
  };
  EditableText.prototype.moveWordRight_0 = function () {
    if (this.caretPosition < this.text.length) {
      var idx = indexOf(this.text, 32, this.caretPosition);
      if (idx < 0) {
        this.caretPosition = this.text.length;
      }
       else {
        this.caretPosition = idx + 1 | 0;
      }
    }
  };
  EditableText.prototype.backspace = function () {
    if (this.selectionStart !== this.caretPosition) {
      this.replaceSelection_61zpoe$('');
    }
     else if (this.caretPosition > 0) {
      this.selectionStart = (this.caretPosition = this.caretPosition - 1 | 0, this.caretPosition);
      var $receiver = this.text;
      var endIndex = this.caretPosition;
      var tmp$ = $receiver.substring(0, endIndex);
      var $receiver_0 = this.text;
      var startIndex = this.caretPosition + 1 | 0;
      this.text = tmp$ + $receiver_0.substring(startIndex);
    }
  };
  EditableText.prototype.deleteSelection = function () {
    if (this.selectionStart !== this.caretPosition) {
      this.replaceSelection_61zpoe$('');
    }
     else if (this.caretPosition < this.text.length) {
      var $receiver = this.text;
      var endIndex = this.caretPosition;
      var tmp$ = $receiver.substring(0, endIndex);
      var $receiver_0 = this.text;
      var startIndex = this.caretPosition + 1 | 0;
      this.text = tmp$ + $receiver_0.substring(startIndex);
    }
  };
  EditableText.prototype.replaceSelection_61zpoe$ = function (string) {
    var a = this.selectionStart;
    var b = this.caretPosition;
    var start = Math_0.min(a, b);
    var a_0 = this.selectionStart;
    var b_0 = this.caretPosition;
    var end = Math_0.max(a_0, b_0);
    this.text = this.text.substring(0, start) + string + this.text.substring(end);
    var a_1 = this.selectionStart;
    var b_1 = this.caretPosition;
    this.caretPosition = Math_0.min(a_1, b_1) + string.length | 0;
    this.selectionStart = this.caretPosition;
  };
  EditableText.prototype.get_za3lpa$ = function (index) {
    return toBoxedChar(this.text.charCodeAt(index));
  };
  EditableText.prototype.toString = function () {
    return this.text;
  };
  function EditableText$Companion() {
    EditableText$Companion_instance = this;
    this.MOVE_LEFT = 1;
    this.MOVE_RIGHT = 2;
    this.MOVE_WORD_LEFT = 3;
    this.MOVE_WORD_RIGHT = 4;
    this.MOVE_START = 5;
    this.MOVE_END = 6;
  }
  EditableText$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var EditableText$Companion_instance = null;
  function EditableText$Companion_getInstance() {
    if (EditableText$Companion_instance === null) {
      new EditableText$Companion();
    }
    return EditableText$Companion_instance;
  }
  EditableText.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EditableText',
    interfaces: []
  };
  function ToggleButton(name, root, initState) {
    if (initState === void 0)
      initState = false;
    Button.call(this, name, root);
    this.onStateChange = ArrayList_init_0();
    this.knobColorOn = Color$Companion_getInstance().WHITE;
    this.knobColorOff = Color$Companion_getInstance().LIGHT_GRAY;
    this.trackColor = Color$Companion_getInstance().GRAY;
    this.isEnabled_gffhto$_0 = initState;
    this.textAlignment = new Gravity(Alignment$START_getInstance(), Alignment$CENTER_getInstance());
  }
  Object.defineProperty(ToggleButton.prototype, 'isEnabled', {
    get: function () {
      return this.isEnabled_gffhto$_0;
    },
    set: function (value) {
      if (value !== this.isEnabled_gffhto$_0) {
        this.isEnabled_gffhto$_0 = value;
        this.fireStateChanged();
      }
    }
  });
  ToggleButton.prototype.fireStateChanged = function () {
    var tmp$;
    tmp$ = this.onStateChange;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.onStateChange.get_za3lpa$(i)(this);
    }
  };
  ToggleButton.prototype.fireOnClick_kjsf19$ = function (ptr, rt, ctx) {
    this.isEnabled = !this.isEnabled;
    Button.prototype.fireOnClick_kjsf19$.call(this, ptr, rt, ctx);
  };
  ToggleButton.prototype.setThemeProps_aemszp$ = function (ctx) {
    Button.prototype.setThemeProps_aemszp$.call(this, ctx);
    this.knobColorOn = this.root.theme.accentColor;
  };
  ToggleButton.prototype.createThemeUi_aemszp$ = function (ctx) {
    return this.root.theme.newToggleButtonUi_r83hfv$(this);
  };
  ToggleButton.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ToggleButton',
    interfaces: [Button]
  };
  function ToggleButtonUi(tb, baseUi) {
    ButtonUi.call(this, tb, baseUi);
    this.tb = tb;
    this.knobAnimator = new CosAnimator(new InterpolatedFloat(0.0, 1.0));
    this.knobColor = MutableColor_init();
    this.stateChangedListener = ToggleButtonUi$stateChangedListener$lambda(this);
  }
  function ToggleButtonUi$createUi$lambda(this$ToggleButtonUi) {
    return function (it) {
      this$ToggleButtonUi.tb.requestUiUpdate();
      return Unit;
    };
  }
  ToggleButtonUi.prototype.createUi_aemszp$ = function (ctx) {
    var tmp$, tmp$_0;
    ButtonUi.prototype.createUi_aemszp$.call(this, ctx);
    this.knobAnimator.speed = 0.0;
    this.knobAnimator.duration = 0.15;
    tmp$_0 = this.knobAnimator.value;
    if (this.tb.isEnabled) {
      tmp$ = 1.0;
    }
     else {
      tmp$ = 0.0;
    }
    tmp$_0.value = tmp$;
    this.knobAnimator.value.onUpdate = ToggleButtonUi$createUi$lambda(this);
    var $receiver = this.tb.onStateChange;
    var element = this.stateChangedListener;
    $receiver.add_11rb$(element);
  };
  ToggleButtonUi.prototype.dispose_aemszp$ = function (ctx) {
    ButtonUi.prototype.dispose_aemszp$.call(this, ctx);
    var $receiver = this.tb.onStateChange;
    var element = this.stateChangedListener;
    $receiver.remove_11rb$(element);
  };
  ToggleButtonUi.prototype.updateUi_aemszp$ = function (ctx) {
    ButtonUi.prototype.updateUi_aemszp$.call(this, ctx);
    var paddingR = this.tb.padding.right.toUnits_dleff0$(this.tb.width, this.tb.dpi);
    var trackW = dp_0(this.tb, 24.0);
    var trackH = dp_0(this.tb, 6.0);
    var knobR = dp_0(this.tb, 10.0);
    var x = this.tb.width - paddingR - trackW - knobR;
    var y = (this.tb.height - trackH) / 2.0;
    this.meshBuilder.color = this.tb.trackColor;
    var $this = this.meshBuilder;
    var $receiver = $this.rectProps.defaults();
    $receiver.origin.set_y2kzbl$(x, y, dp_0(this.tb, 0.1));
    $receiver.size.set_dleff0$(trackW, trackH);
    $receiver.cornerRadius = trackH / 2.0;
    $receiver.cornerSteps = 4;
    $this.rect_e5k3t5$($this.rectProps);
    var anim = this.knobAnimator.value.value;
    this.knobColor.clear();
    this.knobColor.add_y83vuj$(this.tb.knobColorOff, 1.0 - anim);
    this.knobColor.add_y83vuj$(this.tb.knobColorOn, anim);
    this.meshBuilder.color = this.knobColor;
    var $this_0 = this.meshBuilder;
    var $receiver_0 = $this_0.circleProps.defaults();
    $receiver_0.center.set_y2kzbl$(x + trackW * anim, y + trackH / 2.0, dp_0(this.tb, 0.2));
    $receiver_0.radius = knobR;
    $receiver_0.steps = 30;
    $this_0.circle_59f34t$($this_0.circleProps);
  };
  ToggleButtonUi.prototype.onRender_aemszp$ = function (ctx) {
    ButtonUi.prototype.onRender_aemszp$.call(this, ctx);
    this.knobAnimator.tick_aemszp$(ctx);
  };
  function ToggleButtonUi$stateChangedListener$lambda(this$ToggleButtonUi) {
    return function ($receiver) {
      if ($receiver.isEnabled) {
        this$ToggleButtonUi.knobAnimator.speed = 1.0;
      }
       else {
        this$ToggleButtonUi.knobAnimator.speed = -1.0;
      }
      return Unit;
    };
  }
  ToggleButtonUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ToggleButtonUi',
    interfaces: [ButtonUi]
  };
  function UiComponent(name, root) {
    TransformGroup.call(this, name);
    this.root = root;
    this.componentBounds = new BoundingBox();
    this.drawBounds = new BoundingBox();
    this.layoutSpec = new LayoutSpec();
    this.padding_iyk9nn$_0 = new Margin(dps(16.0), dps(16.0), dps(16.0), dps(16.0));
    this.ui = new ThemeOrCustomProp(new BlankComponentUi());
    this.alpha_e9jtsg$_0 = 1.0;
    this.isThemeUpdate_yv706e$_0 = true;
    this.isUiUpdate_l4k16n$_0 = true;
    this.onHoverEnter.add_11rb$(UiComponent_init$lambda);
    this.onHoverExit.add_11rb$(UiComponent_init$lambda_0);
    this.onHover.add_11rb$(UiComponent_init$lambda_1);
  }
  Object.defineProperty(UiComponent.prototype, 'posX', {
    get: function () {
      return this.componentBounds.min.x;
    }
  });
  Object.defineProperty(UiComponent.prototype, 'posY', {
    get: function () {
      return this.componentBounds.min.y;
    }
  });
  Object.defineProperty(UiComponent.prototype, 'posZ', {
    get: function () {
      return this.componentBounds.min.z;
    }
  });
  Object.defineProperty(UiComponent.prototype, 'width', {
    get: function () {
      return this.componentBounds.size.x;
    }
  });
  Object.defineProperty(UiComponent.prototype, 'height', {
    get: function () {
      return this.componentBounds.size.y;
    }
  });
  Object.defineProperty(UiComponent.prototype, 'depth', {
    get: function () {
      return this.componentBounds.size.z;
    }
  });
  Object.defineProperty(UiComponent.prototype, 'padding', {
    get: function () {
      return this.padding_iyk9nn$_0;
    },
    set: function (value) {
      var tmp$;
      if (!((tmp$ = this.padding_iyk9nn$_0) != null ? tmp$.equals(value) : null)) {
        this.padding_iyk9nn$_0 = value;
        this.isUiUpdate_l4k16n$_0 = true;
      }
    }
  });
  Object.defineProperty(UiComponent.prototype, 'alpha', {
    get: function () {
      return this.alpha_e9jtsg$_0;
    },
    set: function (value) {
      if (this.alpha_e9jtsg$_0 !== value) {
        this.alpha_e9jtsg$_0 = value;
        this.updateComponentAlpha();
      }
    }
  });
  Object.defineProperty(UiComponent.prototype, 'dpi', {
    get: function () {
      return this.root.uiDpi;
    }
  });
  UiComponent.prototype.onParentChanged_etw0z0$ = function (oldParent, newParent) {
    if (Kotlin.isType(newParent, UiComponent)) {
      this.alpha = newParent.alpha;
    }
    TransformGroup.prototype.onParentChanged_etw0z0$.call(this, oldParent, newParent);
  };
  UiComponent.prototype.setupBuilder_84rojv$ = function (builder) {
    builder.clear();
    builder.identity();
    builder.translate_czzhiu$(this.componentBounds.min);
  };
  UiComponent.prototype.requestThemeUpdate = function () {
    this.isThemeUpdate_yv706e$_0 = true;
  };
  UiComponent.prototype.requestUiUpdate = function () {
    this.isUiUpdate_l4k16n$_0 = true;
  };
  UiComponent.prototype.updateComponentAlpha = function () {
    this.ui.prop.updateComponentAlpha();
  };
  UiComponent.prototype.updateUi_aemszp$ = function (ctx) {
    this.ui.prop.updateUi_aemszp$(ctx);
  };
  UiComponent.prototype.updateTheme_aemszp$ = function (ctx) {
    this.ui.prop.dispose_aemszp$(ctx);
    this.ui.setTheme_11rb$(this.createThemeUi_aemszp$(ctx)).apply();
    this.setThemeProps_aemszp$(ctx);
    this.ui.prop.createUi_aemszp$(ctx);
    this.ui.prop.updateComponentAlpha();
    this.requestUiUpdate();
  };
  UiComponent.prototype.update_aemszp$ = function (ctx) {
    var tmp$;
    if (this.isThemeUpdate_yv706e$_0) {
      this.isThemeUpdate_yv706e$_0 = false;
      this.updateTheme_aemszp$(ctx);
    }
    if (this.isUiUpdate_l4k16n$_0) {
      this.isUiUpdate_l4k16n$_0 = false;
      this.updateUi_aemszp$(ctx);
    }
    this.setDrawBoundsFromWrappedComponentBounds_hf6scw$(Kotlin.isType(tmp$ = this.parent, UiContainer) ? tmp$ : null, ctx);
  };
  UiComponent.prototype.setDrawBoundsFromWrappedComponentBounds_hf6scw$ = function (parentContainer, ctx) {
    if (parentContainer != null) {
      var a = this.componentBounds.min.x;
      var b = parentContainer.drawBounds.min.x;
      var bndMinX = Math_0.max(a, b);
      var a_0 = this.componentBounds.min.y;
      var b_0 = parentContainer.drawBounds.min.y;
      var bndMinY = Math_0.max(a_0, b_0);
      var a_1 = this.componentBounds.min.z;
      var b_1 = parentContainer.drawBounds.min.z;
      var bndMinZ = Math_0.max(a_1, b_1);
      var a_2 = this.componentBounds.max.x;
      var b_2 = parentContainer.drawBounds.max.x;
      var bndMaxX = Math_0.min(a_2, b_2);
      var a_3 = this.componentBounds.max.y;
      var b_3 = parentContainer.drawBounds.max.y;
      var bndMaxY = Math_0.min(a_3, b_3);
      var a_4 = this.componentBounds.max.z;
      var b_4 = parentContainer.drawBounds.max.z;
      var bndMaxZ = Math_0.min(a_4, b_4);
      if (bndMinX >= bndMaxX || bndMinY >= bndMaxY || bndMinZ >= bndMaxZ) {
        this.drawBounds.clear();
      }
       else {
        this.drawBounds.set_w8lrqs$(bndMinX, bndMinY, bndMinZ, bndMaxX, bndMaxY, bndMaxZ);
      }
    }
     else {
      this.drawBounds.set_ea4od8$(this.componentBounds);
    }
    this.bounds.set_ea4od8$(this.drawBounds);
  };
  UiComponent.prototype.setLocalBounds = function () {
    this.bounds.set_ea4od8$(this.drawBounds);
  };
  UiComponent.prototype.setThemeProps_aemszp$ = function (ctx) {
  };
  UiComponent.prototype.createThemeUi_aemszp$ = function (ctx) {
    return this.root.theme.componentUi(this);
  };
  UiComponent.prototype.render_aemszp$ = function (ctx) {
    if (this.isVisible && this.alpha > 0.0 && !this.bounds.isEmpty) {
      this.ui.prop.onRender_aemszp$(ctx);
      TransformGroup.prototype.render_aemszp$.call(this, ctx);
    }
  };
  UiComponent.prototype.doLayout_sq5703$ = function (layoutBounds, ctx) {
    var tmp$;
    if (!this.componentBounds.isFuzzyEqual_ea4od8$(layoutBounds)) {
      this.componentBounds.set_ea4od8$(layoutBounds);
      this.requestUiUpdate();
    }
    this.setDrawBoundsFromWrappedComponentBounds_hf6scw$(Kotlin.isType(tmp$ = this.parent, UiContainer) ? tmp$ : null, ctx);
  };
  UiComponent.prototype.rayTest_jljx4v$ = function (test) {
    if (this.alpha !== 0.0) {
      var hitNode = test.hitNode;
      TransformGroup.prototype.rayTest_jljx4v$.call(this, test);
      if (hitNode !== test.hitNode && !Kotlin.isType(test.hitNode, UiComponent)) {
        test.setHit_ulhqnp$(this, test.hitPosition);
      }
    }
  };
  UiComponent.prototype.computeLocalPickRay_wswg9$ = function (pointer, ctx, result) {
    var tmp$, tmp$_0;
    var success = (tmp$_0 = (tmp$ = this.scene) != null ? tmp$.computeRay_wswg9$(pointer, ctx, result) : null) != null ? tmp$_0 : false;
    if (success) {
      this.toLocalCoords_w1lst9$(result.origin);
      this.toLocalCoords_w1lst9$(result.direction, 0.0).norm();
    }
    return success;
  };
  function UiComponent_init$lambda($receiver, ptr, rt, ctx) {
    var tmp$, tmp$_0;
    var p = Kotlin.isType(tmp$ = $receiver.parent, UiComponent) ? tmp$ : null;
    if (p != null) {
      tmp$_0 = p.onHoverEnter;
      for (var i = 0; i !== tmp$_0.size; ++i) {
        p.onHoverEnter.get_za3lpa$(i)(p, ptr, rt, ctx);
      }
    }
    return Unit;
  }
  function UiComponent_init$lambda_0($receiver, ptr, rt, ctx) {
    var tmp$, tmp$_0;
    var p = Kotlin.isType(tmp$ = $receiver.parent, UiComponent) ? tmp$ : null;
    if (p != null) {
      tmp$_0 = p.onHoverExit;
      for (var i = 0; i !== tmp$_0.size; ++i) {
        p.onHoverExit.get_za3lpa$(i)(p, ptr, rt, ctx);
      }
    }
    return Unit;
  }
  function UiComponent_init$lambda_1($receiver, ptr, rt, ctx) {
    var tmp$, tmp$_0;
    var p = Kotlin.isType(tmp$ = $receiver.parent, UiComponent) ? tmp$ : null;
    if (p != null) {
      tmp$_0 = p.onHover;
      for (var i = 0; i !== tmp$_0.size; ++i) {
        p.onHover.get_za3lpa$(i)(p, ptr, rt, ctx);
      }
    }
    return Unit;
  }
  UiComponent.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UiComponent',
    interfaces: [TransformGroup]
  };
  function UiContainer(name, root) {
    UiComponent.call(this, name, root);
    this.posInParent = MutableVec3f_init();
    this.contentScale = 1.0;
    this.customTransform = UiContainer$customTransform$lambda;
    this.scrollOffsetMut = MutableVec3f_init();
    this.isScrollDirty = true;
    this.childComponents_65igag$_0 = ArrayList_init_0();
    this.scrollHandler_xer21f$_0 = null;
    this.tmpChildBounds_j2uogg$_0 = new BoundingBox();
    this.tmpVec1_md9h9y$_0 = MutableVec3f_init();
    this.tmpVec2_md9hat$_0 = MutableVec3f_init();
  }
  Object.defineProperty(UiContainer.prototype, 'contentBounds', {
    get: function () {
      return this.childrenBounds;
    }
  });
  Object.defineProperty(UiContainer.prototype, 'scrollOffset', {
    get: function () {
      return this.scrollOffsetMut;
    }
  });
  UiContainer.prototype.updateTheme_aemszp$ = function (ctx) {
    var tmp$;
    UiComponent.prototype.updateTheme_aemszp$.call(this, ctx);
    tmp$ = this.childComponents_65igag$_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.childComponents_65igag$_0.get_za3lpa$(i).requestThemeUpdate();
    }
  };
  UiContainer.prototype.updateComponentAlpha = function () {
    var tmp$;
    UiComponent.prototype.updateComponentAlpha.call(this);
    tmp$ = this.childComponents_65igag$_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.childComponents_65igag$_0.get_za3lpa$(i).alpha = this.alpha;
    }
  };
  UiContainer.prototype.update_aemszp$ = function (ctx) {
    var tmp$, tmp$_0;
    if (this.isScrollDirty) {
      this.isScrollDirty = false;
      (tmp$ = this.scrollHandler_xer21f$_0) != null ? (tmp$.requestUiUpdate(), Unit) : null;
      this.updateTransform();
    }
    UiComponent.prototype.update_aemszp$.call(this, ctx);
    tmp$_0 = this.childComponents_65igag$_0;
    for (var i = 0; i !== tmp$_0.size; ++i) {
      this.childComponents_65igag$_0.get_za3lpa$(i).update_aemszp$(ctx);
    }
  };
  UiContainer.prototype.doLayout_sq5703$ = function (layoutBounds, ctx) {
    var tmp$;
    this.applyBounds_sq5703$(layoutBounds, ctx);
    this.contentBounds.clear();
    tmp$ = this.childComponents_65igag$_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      var child = this.childComponents_65igag$_0.get_za3lpa$(i);
      this.computeChildLayoutBounds_q1axsv$(this.tmpChildBounds_j2uogg$_0, child, ctx);
      this.contentBounds.add_ea4od8$(this.tmpChildBounds_j2uogg$_0);
      child.doLayout_sq5703$(this.tmpChildBounds_j2uogg$_0, ctx);
    }
  };
  UiContainer.prototype.createThemeUi_aemszp$ = function (ctx) {
    return this.root.theme.containerUi(this);
  };
  UiContainer.prototype.setDrawBoundsFromWrappedComponentBounds_hf6scw$ = function (parentContainer, ctx) {
    UiComponent.prototype.setDrawBoundsFromWrappedComponentBounds_hf6scw$.call(this, parentContainer, ctx);
    if (!this.drawBounds.isEmpty) {
      this.drawBounds.move_czzhiu$(this.scrollOffset);
      this.syncNodeBounds_aemszp$(ctx);
    }
     else {
      this.bounds.clear();
    }
  };
  UiContainer.prototype.setLocalBounds = function () {
    var tmp$;
    this.childrenBounds.clear();
    tmp$ = this.childComponents_65igag$_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.childrenBounds.add_ea4od8$(this.childComponents_65igag$_0.get_za3lpa$(i).componentBounds);
    }
    this.bounds.set_ea4od8$(this.childrenBounds);
  };
  UiContainer.prototype.applyBounds_sq5703$ = function (bounds, ctx) {
    if (!bounds.size.isFuzzyEqual_2qa7tb$(this.componentBounds.size) || !bounds.min.isFuzzyEqual_2qa7tb$(this.posInParent)) {
      this.posInParent.set_czzhiu$(bounds.min);
      this.updateTransform();
      this.componentBounds.set_4lfkt4$(Vec3f$Companion_getInstance().ZERO, bounds.size);
      this.drawBounds.set_ea4od8$(this.componentBounds);
      this.syncNodeBounds_aemszp$(ctx);
      this.requestUiUpdate();
    }
  };
  UiContainer.prototype.syncNodeBounds_aemszp$ = function (ctx) {
    this.tmpVec1_md9h9y$_0.set_czzhiu$(this.drawBounds.min);
    this.tmpVec2_md9hat$_0.set_czzhiu$(this.drawBounds.max);
    this.transform.transform_w1lst9$(this.tmpVec1_md9h9y$_0);
    this.transform.transform_w1lst9$(this.tmpVec2_md9hat$_0);
    this.bounds.set_4lfkt4$(this.tmpVec1_md9h9y$_0, this.tmpVec2_md9hat$_0);
  };
  UiContainer.prototype.updateTransform = function () {
    this.customTransform(this.setIdentity().scale_y2kzbl$(this.contentScale, this.contentScale, this.contentScale).translate_czzhiu$(this.posInParent).translate_y2kzbl$(-this.scrollOffsetMut.x, -this.scrollOffsetMut.y, -this.scrollOffsetMut.z));
  };
  UiContainer.prototype.computeChildLayoutBounds_q1axsv$ = function (result, child, ctx) {
    var x = child.layoutSpec.x.toUnits_dleff0$(this.componentBounds.size.x, this.dpi);
    var y = child.layoutSpec.y.toUnits_dleff0$(this.componentBounds.size.y, this.dpi);
    var z = child.layoutSpec.z.toUnits_dleff0$(this.componentBounds.size.z, this.dpi);
    var w = child.layoutSpec.width.toUnits_dleff0$(this.componentBounds.size.x, this.dpi);
    var h = child.layoutSpec.height.toUnits_dleff0$(this.componentBounds.size.y, this.dpi);
    var d = child.layoutSpec.depth.toUnits_dleff0$(this.componentBounds.size.z, this.dpi);
    if (x < 0) {
      x += this.width;
    }
    if (y < 0) {
      y += this.height;
    }
    if (z < 0) {
      z += this.depth;
    }
    result.set_w8lrqs$(x, y, z, x + w, y + h, z + d);
  };
  UiContainer.prototype.setScrollOffset_czzhiu$ = function (offset) {
    this.setScrollOffset_y2kzbl$(offset.x, offset.y, offset.z);
  };
  UiContainer.prototype.setScrollOffset_y2kzbl$ = function (offX, offY, offZ) {
    this.scrollOffsetMut.set_y2kzbl$(offX, offY, offZ);
    this.isScrollDirty = true;
  };
  UiContainer.prototype.addNode_xtids1$$default = function (node, index) {
    var tmp$;
    if (!this.children.isEmpty() && index < 0 && Kotlin.isType(last(this.children), ScrollHandler)) {
      tmp$ = get_lastIndex(this.children);
    }
     else {
      tmp$ = index;
    }
    var idx = tmp$;
    this.addNode_xtids1$(node, idx, UiComponent.prototype.addNode_xtids1$$default.bind(this));
    if (Kotlin.isType(node, UiComponent)) {
      this.childComponents_65igag$_0.add_11rb$(node);
      if (Kotlin.isType(node, ScrollHandler)) {
        this.scrollHandler_xer21f$_0 = node;
      }
    }
  };
  UiContainer.prototype.removeNode_f1kmr1$ = function (node) {
    if (Kotlin.isType(node, UiComponent)) {
      this.childComponents_65igag$_0.remove_11rb$(node);
      if (equals(node, this.scrollHandler_xer21f$_0)) {
        this.scrollHandler_xer21f$_0 = null;
      }
    }
    return UiComponent.prototype.removeNode_f1kmr1$.call(this, node);
  };
  UiContainer.prototype.removeAllChildren = function () {
    UiComponent.prototype.removeAllChildren.call(this);
    this.childComponents_65igag$_0.clear();
    this.scrollHandler_xer21f$_0 = null;
  };
  function UiContainer$customTransform$lambda($receiver) {
    return Unit;
  }
  UiContainer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UiContainer',
    interfaces: [UiComponent]
  };
  function embeddedUi(width, height, contentHeight, dpi, block) {
    if (dpi === void 0)
      dpi = 300.0;
    var ui = new UiRoot(dpi);
    ui.contentHeight = contentHeight;
    ui.globalWidth = width;
    ui.globalHeight = height;
    block(ui);
    return ui;
  }
  function uiScene$lambda$lambda(closure$block) {
    return function ($receiver) {
      $receiver.isFillViewport = true;
      closure$block($receiver);
      return Unit;
    };
  }
  function uiScene(dpi, name, overlay, block) {
    if (dpi === void 0)
      dpi = 96.0;
    if (name === void 0)
      name = null;
    if (overlay === void 0)
      overlay = true;
    var $receiver = new Scene(name);
    var $receiver_0 = new OrthographicCamera();
    $receiver_0.isClipToViewport = true;
    $receiver_0.near = -1000.0;
    $receiver_0.far = 1000.0;
    $receiver.camera = $receiver_0;
    if (overlay) {
      $receiver.clearMask = 256;
    }
    $receiver.unaryPlus_uv0sim$(embeddedUi(1.0, 1.0, null, dpi, uiScene$lambda$lambda(block)));
    return $receiver;
  }
  function UiRoot(uiDpi, name) {
    if (name === void 0)
      name = 'UiRoot';
    Node.call(this, name);
    this.uiDpi = uiDpi;
    this.globalWidth_rlfw80$_0 = 1.0;
    this.globalHeight_5sxs8p$_0 = 1.0;
    this.globalDepth_ijlk77$_0 = 1.0;
    this.isFillViewport_fr53nm$_0 = false;
    this.theme_208sxy$_0 = UiTheme$Companion_getInstance().DARK;
    this.shaderLightModel = LightModel$NO_LIGHTING_getInstance();
    this.content = new UiContainer(name + '-content', this);
    this.contentHeight_17xsyl$_0 = null;
    this.blurHelper_0 = null;
    this.isLayoutNeeded_0 = true;
    this.content.parent = this;
    this.content.layoutSpec.setSize_4ujscr$(pcs(100.0), pcs(100.0), pcs(100.0));
  }
  Object.defineProperty(UiRoot.prototype, 'globalWidth', {
    get: function () {
      return this.globalWidth_rlfw80$_0;
    },
    set: function (value) {
      if (value !== this.globalWidth_rlfw80$_0) {
        this.globalWidth_rlfw80$_0 = value;
        this.isLayoutNeeded_0 = true;
      }
    }
  });
  Object.defineProperty(UiRoot.prototype, 'globalHeight', {
    get: function () {
      return this.globalHeight_5sxs8p$_0;
    },
    set: function (value) {
      if (value !== this.globalHeight_5sxs8p$_0) {
        this.globalHeight_5sxs8p$_0 = value;
        this.isLayoutNeeded_0 = true;
      }
    }
  });
  Object.defineProperty(UiRoot.prototype, 'globalDepth', {
    get: function () {
      return this.globalDepth_ijlk77$_0;
    },
    set: function (value) {
      if (value !== this.globalDepth_ijlk77$_0) {
        this.globalDepth_ijlk77$_0 = value;
        this.isLayoutNeeded_0 = true;
      }
    }
  });
  Object.defineProperty(UiRoot.prototype, 'isFillViewport', {
    get: function () {
      return this.isFillViewport_fr53nm$_0;
    },
    set: function (value) {
      if (value !== this.isFillViewport_fr53nm$_0) {
        this.isFillViewport_fr53nm$_0 = value;
        this.isLayoutNeeded_0 = true;
      }
    }
  });
  Object.defineProperty(UiRoot.prototype, 'theme', {
    get: function () {
      return this.theme_208sxy$_0;
    },
    set: function (value) {
      if (!equals(value, this.theme_208sxy$_0)) {
        this.theme_208sxy$_0 = value;
        this.content.requestThemeUpdate();
      }
    }
  });
  Object.defineProperty(UiRoot.prototype, 'contentHeight', {
    get: function () {
      return this.contentHeight_17xsyl$_0;
    },
    set: function (value) {
      this.contentHeight_17xsyl$_0 = value;
      this.isLayoutNeeded_0 = true;
    }
  });
  Object.defineProperty(UiRoot.prototype, 'bounds', {
    get: function () {
      return this.content.bounds;
    }
  });
  UiRoot.prototype.onSceneChanged_9srkog$ = function (oldScene, newScene) {
    Node.prototype.onSceneChanged_9srkog$.call(this, oldScene, newScene);
    this.content.scene = newScene;
  };
  UiRoot.prototype.createBlurHelper = function () {
    var tmp$;
    var helper = (tmp$ = this.blurHelper_0) != null ? tmp$ : new BlurredBackgroundHelper();
    if (this.blurHelper_0 == null) {
      this.blurHelper_0 = helper;
    }
    return helper;
  };
  UiRoot.prototype.setGlobalSize_y2kzbl$ = function (width, height, depth) {
    this.isFillViewport = false;
    this.globalWidth = width;
    this.globalHeight = height;
    this.globalDepth = depth;
  };
  UiRoot.prototype.requestLayout = function () {
    this.isLayoutNeeded_0 = true;
  };
  UiRoot.prototype.preRender_aemszp$ = function (ctx) {
    var tmp$, tmp$_0;
    tmp$_0 = (tmp$ = this.scene) != null ? tmp$.viewport : null;
    if (tmp$_0 == null) {
      return;
    }
    var viewport = tmp$_0;
    if (this.isFillViewport && (this.globalWidth !== viewport.width || this.globalHeight !== viewport.height)) {
      this.globalWidth = viewport.width;
      this.globalHeight = viewport.height;
    }
    if (this.isLayoutNeeded_0) {
      this.isLayoutNeeded_0 = false;
      var contentScale = 1.0;
      var ch = this.contentHeight;
      if (ch != null) {
        contentScale = 1.0 / (ch.toUnits_dleff0$(this.globalHeight, this.uiDpi) / this.globalHeight);
      }
      var contentBounds = (new BoundingBox()).set_w8lrqs$(0.0, 0.0, 0.0, this.globalWidth / contentScale, this.globalHeight / contentScale, this.globalDepth / contentScale);
      this.content.contentScale = contentScale;
      this.content.doLayout_sq5703$(contentBounds, ctx);
    }
    this.content.preRender_aemszp$(ctx);
    Node.prototype.preRender_aemszp$.call(this, ctx);
    this.content.update_aemszp$(ctx);
  };
  UiRoot.prototype.render_aemszp$ = function (ctx) {
    var tmp$;
    (tmp$ = this.blurHelper_0) != null ? (tmp$.updateDistortionTexture_hp84kc$(this, ctx, this.bounds), Unit) : null;
    ctx.pushAttributes();
    ctx.isCullFace = false;
    ctx.applyAttributes();
    Node.prototype.render_aemszp$.call(this, ctx);
    this.content.render_aemszp$(ctx);
    ctx.popAttributes();
  };
  UiRoot.prototype.postRender_aemszp$ = function (ctx) {
    this.content.postRender_aemszp$(ctx);
    Node.prototype.postRender_aemszp$.call(this, ctx);
  };
  UiRoot.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$;
    Node.prototype.dispose_aemszp$.call(this, ctx);
    this.content.dispose_aemszp$(ctx);
    (tmp$ = this.blurHelper_0) != null ? (tmp$.dispose_aemszp$(ctx), Unit) : null;
  };
  UiRoot.prototype.rayTest_jljx4v$ = function (test) {
    Node.prototype.rayTest_jljx4v$.call(this, test);
    this.content.rayTest_jljx4v$(test);
  };
  UiRoot.prototype.unaryPlus_uv0sim$ = function ($receiver) {
    this.content.addNode_xtids1$($receiver);
  };
  UiRoot.prototype.unaryPlus_63m4fk$ = function ($receiver) {
    this.content.addNode_xtids1$($receiver);
    this.content.addNode_xtids1$($receiver.menuButton_8be2vx$);
  };
  UiRoot.prototype.component_qphi6d$ = function (name, block) {
    var $receiver = new UiComponent(name, this);
    block($receiver);
    return $receiver;
  };
  UiRoot.prototype.container_t34sov$ = function (name, block) {
    var $receiver = new UiContainer(name, this);
    block($receiver);
    return $receiver;
  };
  UiRoot.prototype.drawerMenu_enmky4$ = function (name, title, width, block) {
    if (title === void 0)
      title = null;
    if (width === void 0)
      width = dps(250.0, true);
    var $receiver = new DrawerMenu(width, title, name, this);
    block($receiver);
    return $receiver;
  };
  UiRoot.prototype.button_9zrh0o$ = function (name, block) {
    var $receiver = new Button(name, this);
    block($receiver);
    return $receiver;
  };
  UiRoot.prototype.label_tokfmu$ = function (name, block) {
    var $receiver = new Label(name, this);
    block($receiver);
    return $receiver;
  };
  UiRoot.prototype.slider_87iqh3$ = function (name, block) {
    return this.slider_91a1dk$(name, 0.0, 100.0, 50.0, block);
  };
  UiRoot.prototype.slider_91a1dk$ = function (name, min, max, value, block) {
    var $receiver = new Slider(name, min, max, value, this);
    block($receiver);
    return $receiver;
  };
  UiRoot.prototype.textField_peizi7$ = function (name, block) {
    var $receiver = new TextField(name, this);
    block($receiver);
    return $receiver;
  };
  UiRoot.prototype.toggleButton_6j87po$ = function (name, block) {
    var $receiver = new ToggleButton(name, this);
    block($receiver);
    return $receiver;
  };
  UiRoot.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UiRoot',
    interfaces: [Node]
  };
  function UiTheme() {
    UiTheme$Companion_getInstance();
    this.backgroundColor_yt8dmb$_0 = Color$Companion_getInstance().BLACK;
    this.foregroundColor_sxfy5a$_0 = Color$Companion_getInstance().WHITE;
    this.accentColor_2rzgrt$_0 = Color$Companion_getInstance().LIME;
    this.standardFontProps_v4eg6a$_0 = new FontProps(Font$Companion_getInstance().SYSTEM_FONT, 20.0);
    this.titleFontProps_idgbxl$_0 = new FontProps(Font$Companion_getInstance().SYSTEM_FONT, 28.0);
    this.componentUi_rare29$_0 = getCallableRef('BlurredComponentUi', function (component) {
      return new BlurredComponentUi(component);
    });
    this.containerUi_233tf$_0 = UiTheme$containerUi$lambda;
    this.buttonUi_667cek$_0 = getCallableRef('ButtonUi', function (button, baseUi) {
      return new ButtonUi(button, baseUi);
    });
    this.labelUi_9aobqe$_0 = getCallableRef('LabelUi', function (label, baseUi) {
      return new LabelUi(label, baseUi);
    });
    this.scrollHandlerUi_k8xkq9$_0 = getCallableRef('ScrollHandlerUi', function (scrollHandler) {
      return new ScrollHandlerUi(scrollHandler);
    });
    this.sliderUi_76d1mr$_0 = getCallableRef('SliderUi', function (slider, baseUi) {
      return new SliderUi(slider, baseUi);
    });
    this.textFieldUi_fr4mch$_0 = getCallableRef('TextFieldUi', function (textField, baseUi) {
      return new TextFieldUi(textField, baseUi);
    });
    this.toggleButtonUi_2tk5m0$_0 = getCallableRef('ToggleButtonUi', function (tb, baseUi) {
      return new ToggleButtonUi(tb, baseUi);
    });
  }
  Object.defineProperty(UiTheme.prototype, 'backgroundColor', {
    get: function () {
      return this.backgroundColor_yt8dmb$_0;
    },
    set: function (backgroundColor) {
      this.backgroundColor_yt8dmb$_0 = backgroundColor;
    }
  });
  Object.defineProperty(UiTheme.prototype, 'foregroundColor', {
    get: function () {
      return this.foregroundColor_sxfy5a$_0;
    },
    set: function (foregroundColor) {
      this.foregroundColor_sxfy5a$_0 = foregroundColor;
    }
  });
  Object.defineProperty(UiTheme.prototype, 'accentColor', {
    get: function () {
      return this.accentColor_2rzgrt$_0;
    },
    set: function (accentColor) {
      this.accentColor_2rzgrt$_0 = accentColor;
    }
  });
  UiTheme.prototype.standardFont_oei9ky$ = function (uiDpi, ctx) {
    return uiFont(this.standardFontProps.family, this.standardFontProps.sizePts, uiDpi, ctx, this.standardFontProps.style, this.standardFontProps.chars);
  };
  Object.defineProperty(UiTheme.prototype, 'standardFontProps', {
    get: function () {
      return this.standardFontProps_v4eg6a$_0;
    },
    set: function (standardFontProps) {
      this.standardFontProps_v4eg6a$_0 = standardFontProps;
    }
  });
  UiTheme.prototype.titleFont_oei9ky$ = function (uiDpi, ctx) {
    return uiFont(this.titleFontProps.family, this.titleFontProps.sizePts, uiDpi, ctx, this.titleFontProps.style, this.titleFontProps.chars);
  };
  Object.defineProperty(UiTheme.prototype, 'titleFontProps', {
    get: function () {
      return this.titleFontProps_idgbxl$_0;
    },
    set: function (titleFontProps) {
      this.titleFontProps_idgbxl$_0 = titleFontProps;
    }
  });
  UiTheme.prototype.newComponentUi_gzmg0q$ = function (c) {
    return this.componentUi(c);
  };
  Object.defineProperty(UiTheme.prototype, 'componentUi', {
    get: function () {
      return this.componentUi_rare29$_0;
    },
    set: function (componentUi) {
      this.componentUi_rare29$_0 = componentUi;
    }
  });
  UiTheme.prototype.newContainerUi_xcf31a$ = function (c) {
    return this.containerUi(c);
  };
  Object.defineProperty(UiTheme.prototype, 'containerUi', {
    get: function () {
      return this.containerUi_233tf$_0;
    },
    set: function (containerUi) {
      this.containerUi_233tf$_0 = containerUi;
    }
  });
  UiTheme.prototype.newButtonUi_t4rm0v$ = function (c) {
    return this.buttonUi(c, this.newComponentUi_gzmg0q$(c));
  };
  Object.defineProperty(UiTheme.prototype, 'buttonUi', {
    get: function () {
      return this.buttonUi_667cek$_0;
    },
    set: function (buttonUi) {
      this.buttonUi_667cek$_0 = buttonUi;
    }
  });
  UiTheme.prototype.newLabelUi_wviu0r$ = function (c) {
    return this.labelUi(c, this.newComponentUi_gzmg0q$(c));
  };
  Object.defineProperty(UiTheme.prototype, 'labelUi', {
    get: function () {
      return this.labelUi_9aobqe$_0;
    },
    set: function (labelUi) {
      this.labelUi_9aobqe$_0 = labelUi;
    }
  });
  UiTheme.prototype.newScrollHandlerUi_dz938y$ = function (c) {
    return this.scrollHandlerUi(c);
  };
  Object.defineProperty(UiTheme.prototype, 'scrollHandlerUi', {
    get: function () {
      return this.scrollHandlerUi_k8xkq9$_0;
    },
    set: function (scrollHandlerUi) {
      this.scrollHandlerUi_k8xkq9$_0 = scrollHandlerUi;
    }
  });
  UiTheme.prototype.newSliderUi_l85jm8$ = function (c) {
    return this.sliderUi(c, this.newComponentUi_gzmg0q$(c));
  };
  Object.defineProperty(UiTheme.prototype, 'sliderUi', {
    get: function () {
      return this.sliderUi_76d1mr$_0;
    },
    set: function (sliderUi) {
      this.sliderUi_76d1mr$_0 = sliderUi;
    }
  });
  UiTheme.prototype.newTextFieldUi_p39bdq$ = function (c) {
    return this.textFieldUi(c, this.newComponentUi_gzmg0q$(c));
  };
  Object.defineProperty(UiTheme.prototype, 'textFieldUi', {
    get: function () {
      return this.textFieldUi_fr4mch$_0;
    },
    set: function (textFieldUi) {
      this.textFieldUi_fr4mch$_0 = textFieldUi;
    }
  });
  UiTheme.prototype.newToggleButtonUi_r83hfv$ = function (c) {
    return this.toggleButtonUi(c, this.newComponentUi_gzmg0q$(c));
  };
  Object.defineProperty(UiTheme.prototype, 'toggleButtonUi', {
    get: function () {
      return this.toggleButtonUi_2tk5m0$_0;
    },
    set: function (toggleButtonUi) {
      this.toggleButtonUi_2tk5m0$_0 = toggleButtonUi;
    }
  });
  function UiTheme$Companion() {
    UiTheme$Companion_instance = this;
    this.DARK = theme(void 0, UiTheme$Companion$DARK$lambda);
    this.DARK_SIMPLE = theme(this.DARK, UiTheme$Companion$DARK_SIMPLE$lambda);
    this.LIGHT = theme(void 0, UiTheme$Companion$LIGHT$lambda);
    this.LIGHT_SIMPLE = theme(this.LIGHT, UiTheme$Companion$LIGHT_SIMPLE$lambda);
  }
  function UiTheme$Companion$DARK$lambda($receiver) {
    $receiver.backgroundColor_d7aj7k$(Color$Companion_getInstance().fromHex_61zpoe$('00141980'));
    $receiver.foregroundColor_d7aj7k$(Color$Companion_getInstance().WHITE);
    $receiver.accentColor_d7aj7k$(Color$Companion_getInstance().LIME);
    return Unit;
  }
  function UiTheme$Companion$DARK_SIMPLE$lambda($receiver) {
    $receiver.componentUi_mloaa0$(getCallableRef('SimpleComponentUi', function (component) {
      return new SimpleComponentUi(component);
    }));
    return Unit;
  }
  function UiTheme$Companion$LIGHT$lambda($receiver) {
    $receiver.backgroundColor_d7aj7k$(Color$Companion_getInstance().WHITE.withAlpha_mx4ult$(0.6));
    $receiver.foregroundColor_d7aj7k$(Color$Companion_getInstance().fromHex_61zpoe$('3E2723'));
    $receiver.accentColor_d7aj7k$(Color$Companion_getInstance().fromHex_61zpoe$('BF360C'));
    return Unit;
  }
  function UiTheme$Companion$LIGHT_SIMPLE$lambda($receiver) {
    $receiver.componentUi_mloaa0$(getCallableRef('SimpleComponentUi', function (component) {
      return new SimpleComponentUi(component);
    }));
    return Unit;
  }
  UiTheme$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var UiTheme$Companion_instance = null;
  function UiTheme$Companion_getInstance() {
    if (UiTheme$Companion_instance === null) {
      new UiTheme$Companion();
    }
    return UiTheme$Companion_instance;
  }
  function UiTheme$containerUi$lambda(it) {
    return new BlankComponentUi();
  }
  UiTheme.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UiTheme',
    interfaces: []
  };
  function standardFont($receiver, ctx) {
    return $receiver.root.theme.standardFont_oei9ky$($receiver.dpi, ctx);
  }
  function titleFont($receiver, ctx) {
    return $receiver.root.theme.titleFont_oei9ky$($receiver.dpi, ctx);
  }
  function theme(base, block) {
    if (base === void 0)
      base = null;
    var builder = new ThemeBuilder(base);
    block(builder);
    return builder;
  }
  function ThemeBuilder(base) {
    UiTheme.call(this);
    if (base != null) {
      this.backgroundColor = base.backgroundColor;
      this.foregroundColor = base.foregroundColor;
      this.accentColor = base.accentColor;
      this.standardFontProps = base.standardFontProps;
      this.titleFontProps = base.titleFontProps;
      this.componentUi = base.componentUi;
      this.containerUi = base.containerUi;
      this.buttonUi = base.buttonUi;
      this.labelUi = base.labelUi;
      this.scrollHandlerUi = base.scrollHandlerUi;
      this.sliderUi = base.sliderUi;
      this.textFieldUi = base.textFieldUi;
      this.toggleButtonUi = base.toggleButtonUi;
    }
  }
  ThemeBuilder.prototype.backgroundColor_d7aj7k$ = function (bgColor) {
    this.backgroundColor = bgColor;
  };
  ThemeBuilder.prototype.foregroundColor_d7aj7k$ = function (fgColor) {
    this.foregroundColor = fgColor;
  };
  ThemeBuilder.prototype.accentColor_d7aj7k$ = function (fgColor) {
    this.accentColor = fgColor;
  };
  ThemeBuilder.prototype.standardFont_ttufcy$ = function (props) {
    this.standardFontProps = props;
  };
  ThemeBuilder.prototype.titleFont_ttufcy$ = function (props) {
    this.titleFontProps = props;
  };
  ThemeBuilder.prototype.componentUi_mloaa0$ = function (fab) {
    this.componentUi = fab;
  };
  ThemeBuilder.prototype.containerUi_2t3ptw$ = function (fab) {
    this.containerUi = fab;
  };
  ThemeBuilder.prototype.buttonUi_layl6g$ = function (fab) {
    this.buttonUi = fab;
  };
  ThemeBuilder.prototype.labelUi_zicoma$ = function (fab) {
    this.labelUi = fab;
  };
  ThemeBuilder.prototype.scrollHandlerUi_4p1ygc$ = function (fab) {
    this.scrollHandlerUi = fab;
  };
  ThemeBuilder.prototype.sliderUi_artm94$ = function (fab) {
    this.sliderUi = fab;
  };
  ThemeBuilder.prototype.textFieldUi_5ax6ok$ = function (fab) {
    this.textFieldUi = fab;
  };
  ThemeBuilder.prototype.toggleButtonUi_50ge0o$ = function (fab) {
    this.toggleButtonUi = fab;
  };
  ThemeBuilder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ThemeBuilder',
    interfaces: [UiTheme]
  };
  function ThemeOrCustomProp(initVal) {
    this.prop_5ushja$_0 = initVal;
    this.themeVal_jacv1h$_0 = initVal;
    this.isThemeSet_n9zltm$_0 = false;
    this.customVal_5f7u1l$_0 = initVal;
    this.isCustom_s2c3c2$_0 = false;
  }
  Object.defineProperty(ThemeOrCustomProp.prototype, 'prop', {
    get: function () {
      return this.prop_5ushja$_0;
    },
    set: function (prop) {
      this.prop_5ushja$_0 = prop;
    }
  });
  Object.defineProperty(ThemeOrCustomProp.prototype, 'themeVal', {
    get: function () {
      return this.themeVal_jacv1h$_0;
    },
    set: function (themeVal) {
      this.themeVal_jacv1h$_0 = themeVal;
    }
  });
  Object.defineProperty(ThemeOrCustomProp.prototype, 'isThemeSet', {
    get: function () {
      return this.isThemeSet_n9zltm$_0;
    },
    set: function (isThemeSet) {
      this.isThemeSet_n9zltm$_0 = isThemeSet;
    }
  });
  Object.defineProperty(ThemeOrCustomProp.prototype, 'customVal', {
    get: function () {
      return this.customVal_5f7u1l$_0;
    },
    set: function (customVal) {
      this.customVal_5f7u1l$_0 = customVal;
    }
  });
  Object.defineProperty(ThemeOrCustomProp.prototype, 'isCustom', {
    get: function () {
      return this.isCustom_s2c3c2$_0;
    },
    set: function (isCustom) {
      this.isCustom_s2c3c2$_0 = isCustom;
    }
  });
  Object.defineProperty(ThemeOrCustomProp.prototype, 'isUpdate', {
    get: function () {
      return this.isCustom && !equals(this.prop, this.customVal) || (!this.isCustom && this.isThemeSet && !equals(this.prop, this.themeVal));
    }
  });
  ThemeOrCustomProp.prototype.setTheme_11rb$ = function (themeVal) {
    this.themeVal = themeVal;
    this.isThemeSet = true;
    return this;
  };
  ThemeOrCustomProp.prototype.setCustom_11rb$ = function (customVal) {
    this.customVal = customVal;
    this.isCustom = true;
    return this;
  };
  ThemeOrCustomProp.prototype.clearCustom = function () {
    this.isCustom = false;
  };
  ThemeOrCustomProp.prototype.apply = function () {
    if (this.isCustom) {
      this.prop = this.customVal;
    }
     else if (this.isThemeSet) {
      this.prop = this.themeVal;
    }
    return this.prop;
  };
  ThemeOrCustomProp.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ThemeOrCustomProp',
    interfaces: []
  };
  function ShaderManager() {
    SharedResManager.call(this);
    this.boundShader_u35sjq$_0 = null;
  }
  Object.defineProperty(ShaderManager.prototype, 'boundShader', {
    get: function () {
      return this.boundShader_u35sjq$_0;
    },
    set: function (boundShader) {
      this.boundShader_u35sjq$_0 = boundShader;
    }
  });
  ShaderManager.prototype.onNewFrame_aemszp$ = function (ctx) {
    this.clearShader_aemszp$(ctx);
  };
  ShaderManager.prototype.clearShader_aemszp$ = function (ctx) {
    ctx.checkIsGlThread();
    if (this.boundShader != null) {
      glUseProgram(null);
      this.boundShader = null;
    }
  };
  ShaderManager.prototype.bindShader_c0ina6$ = function (shader, toNode, ctx) {
    var tmp$, tmp$_0, tmp$_1;
    if (!shader.isValid) {
      shader.onLoad_x4tdlw$(toNode, ctx);
    }
    if (!shader.isBound_aemszp$(ctx)) {
      if (!equals((tmp$ = shader.res) != null ? tmp$.glRef : null, (tmp$_1 = (tmp$_0 = this.boundShader) != null ? tmp$_0.res : null) != null ? tmp$_1.glRef : null)) {
        glUseProgram(shader.res);
      }
      this.boundShader = shader;
      shader.onBind_x4tdlw$(toNode, ctx);
    }
  };
  ShaderManager.prototype.onRenderingHintsChanged_cwprtu$ = function (ctx) {
    this.deleteAllResources_aemszp$(ctx);
  };
  ShaderManager.prototype.createShader_2ouvod$ = function (source, ctx) {
    return this.addReference_pl4ufq$(source, ctx);
  };
  ShaderManager.prototype.deleteShader_495nfo$ = function (shader, ctx) {
    var res = shader.res;
    if (res != null) {
      this.removeReference_pl4ufq$(shader.source, ctx);
    }
  };
  ShaderManager.prototype.createResource_pl4ufq$ = function (key, ctx) {
    var vertShader = ShaderResource$Companion_getInstance().createVertexShader_aemszp$(ctx);
    vertShader.shaderSource_vvp3il$(key.vertexSrc, ctx);
    if (!vertShader.compile_aemszp$(ctx)) {
      var log = vertShader.getInfoLog_aemszp$(ctx);
      vertShader.delete_aemszp$(ctx);
      var $this = package$util.Log;
      var level = Log$Level.ERROR;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Vertex shader compilation failed: ' + log);
      }
      var $this_0 = package$util.Log;
      var level_0 = Log$Level.ERROR;
      var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
      if (level_0.level >= $this_0.level.level) {
        $this_0.printer(level_0, tag_0, 'Shader source: ' + '\n' + key.vertexSrc);
      }
      throw KoolException_init('Vertex shader compilation failed: ' + log);
    }
    var fragShader = ShaderResource$Companion_getInstance().createFragmentShader_aemszp$(ctx);
    fragShader.shaderSource_vvp3il$(key.fragmentSrc, ctx);
    if (!fragShader.compile_aemszp$(ctx)) {
      var log_0 = fragShader.getInfoLog_aemszp$(ctx);
      fragShader.delete_aemszp$(ctx);
      var $this_1 = package$util.Log;
      var level_1 = Log$Level.ERROR;
      var tag_1 = Kotlin.getKClassFromExpression(this).simpleName;
      if (level_1.level >= $this_1.level.level) {
        $this_1.printer(level_1, tag_1, 'Fragment shader compilation failed: ' + log_0);
      }
      var $this_2 = package$util.Log;
      var level_2 = Log$Level.ERROR;
      var tag_2 = Kotlin.getKClassFromExpression(this).simpleName;
      if (level_2.level >= $this_2.level.level) {
        $this_2.printer(level_2, tag_2, 'Shader source: ' + '\n' + key.fragmentSrc);
      }
      throw KoolException_init('Fragment shader compilation failed: ' + log_0);
    }
    var geomShader = null;
    if (key.geometrySrc.length > 0) {
      geomShader = ShaderResource$Companion_getInstance().createGeometryShader_aemszp$(ctx);
      geomShader.shaderSource_vvp3il$(key.geometrySrc, ctx);
      if (!fragShader.compile_aemszp$(ctx)) {
        var log_1 = geomShader.getInfoLog_aemszp$(ctx);
        geomShader.delete_aemszp$(ctx);
        var $this_3 = package$util.Log;
        var level_3 = Log$Level.ERROR;
        var tag_3 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_3.level >= $this_3.level.level) {
          $this_3.printer(level_3, tag_3, 'Geometry shader compilation failed: ' + log_1);
        }
        var $this_4 = package$util.Log;
        var level_4 = Log$Level.ERROR;
        var tag_4 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_4.level >= $this_4.level.level) {
          $this_4.printer(level_4, tag_4, 'Shader source: ' + '\n' + key.geometrySrc);
        }
        throw KoolException_init('Geometry shader compilation failed: ' + log_1);
      }
    }
    var prog = ProgramResource$Companion_getInstance().create_aemszp$(ctx);
    prog.attachShader_55k08u$(vertShader, ctx);
    prog.attachShader_55k08u$(fragShader, ctx);
    if (geomShader != null) {
      prog.attachShader_55k08u$(geomShader, ctx);
    }
    var success = prog.link_aemszp$(ctx);
    vertShader.delete_aemszp$(ctx);
    fragShader.delete_aemszp$(ctx);
    geomShader != null ? (geomShader.delete_aemszp$(ctx), Unit) : null;
    if (!success) {
      var log_2 = prog.getInfoLog_aemszp$(ctx);
      prog.delete_aemszp$(ctx);
      var $this_5 = package$util.Log;
      var level_5 = Log$Level.ERROR;
      var tag_5 = Kotlin.getKClassFromExpression(this).simpleName;
      if (level_5.level >= $this_5.level.level) {
        $this_5.printer(level_5, tag_5, 'Shader linkage failed: ' + log_2);
      }
      throw KoolException_init('Shader linkage failed: ' + log_2);
    }
    return prog;
  };
  ShaderManager.prototype.deleteResource_5nn3pu$ = function (key, res, ctx) {
    res.delete_aemszp$(ctx);
  };
  ShaderManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShaderManager',
    interfaces: [SharedResManager]
  };
  function AttributeType(name, ordinal, size, isInt, glType, glslTypeName) {
    Enum.call(this);
    this.size = size;
    this.isInt = isInt;
    this.glType = glType;
    this.glslTypeName = glslTypeName;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function AttributeType_initFields() {
    AttributeType_initFields = function () {
    };
    AttributeType$FLOAT_instance = new AttributeType('FLOAT', 0, 1, false, 5126, 'float');
    AttributeType$VEC_2F_instance = new AttributeType('VEC_2F', 1, 2, false, 5126, 'vec2');
    AttributeType$VEC_3F_instance = new AttributeType('VEC_3F', 2, 3, false, 5126, 'vec3');
    AttributeType$VEC_4F_instance = new AttributeType('VEC_4F', 3, 4, false, 5126, 'vec4');
    AttributeType$COLOR_4F_instance = new AttributeType('COLOR_4F', 4, 4, false, 5126, 'vec4');
    AttributeType$INT_instance = new AttributeType('INT', 5, 1, true, 5124, 'int');
    AttributeType$VEC_2I_instance = new AttributeType('VEC_2I', 6, 2, true, 5124, 'ivec2');
    AttributeType$VEC_3I_instance = new AttributeType('VEC_3I', 7, 3, true, 5124, 'ivec3');
    AttributeType$VEC_4I_instance = new AttributeType('VEC_4I', 8, 4, true, 5124, 'ivec4');
  }
  var AttributeType$FLOAT_instance;
  function AttributeType$FLOAT_getInstance() {
    AttributeType_initFields();
    return AttributeType$FLOAT_instance;
  }
  var AttributeType$VEC_2F_instance;
  function AttributeType$VEC_2F_getInstance() {
    AttributeType_initFields();
    return AttributeType$VEC_2F_instance;
  }
  var AttributeType$VEC_3F_instance;
  function AttributeType$VEC_3F_getInstance() {
    AttributeType_initFields();
    return AttributeType$VEC_3F_instance;
  }
  var AttributeType$VEC_4F_instance;
  function AttributeType$VEC_4F_getInstance() {
    AttributeType_initFields();
    return AttributeType$VEC_4F_instance;
  }
  var AttributeType$COLOR_4F_instance;
  function AttributeType$COLOR_4F_getInstance() {
    AttributeType_initFields();
    return AttributeType$COLOR_4F_instance;
  }
  var AttributeType$INT_instance;
  function AttributeType$INT_getInstance() {
    AttributeType_initFields();
    return AttributeType$INT_instance;
  }
  var AttributeType$VEC_2I_instance;
  function AttributeType$VEC_2I_getInstance() {
    AttributeType_initFields();
    return AttributeType$VEC_2I_instance;
  }
  var AttributeType$VEC_3I_instance;
  function AttributeType$VEC_3I_getInstance() {
    AttributeType_initFields();
    return AttributeType$VEC_3I_instance;
  }
  var AttributeType$VEC_4I_instance;
  function AttributeType$VEC_4I_getInstance() {
    AttributeType_initFields();
    return AttributeType$VEC_4I_instance;
  }
  AttributeType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AttributeType',
    interfaces: [Enum]
  };
  function AttributeType$values() {
    return [AttributeType$FLOAT_getInstance(), AttributeType$VEC_2F_getInstance(), AttributeType$VEC_3F_getInstance(), AttributeType$VEC_4F_getInstance(), AttributeType$COLOR_4F_getInstance(), AttributeType$INT_getInstance(), AttributeType$VEC_2I_getInstance(), AttributeType$VEC_3I_getInstance(), AttributeType$VEC_4I_getInstance()];
  }
  AttributeType.values = AttributeType$values;
  function AttributeType$valueOf(name) {
    switch (name) {
      case 'FLOAT':
        return AttributeType$FLOAT_getInstance();
      case 'VEC_2F':
        return AttributeType$VEC_2F_getInstance();
      case 'VEC_3F':
        return AttributeType$VEC_3F_getInstance();
      case 'VEC_4F':
        return AttributeType$VEC_4F_getInstance();
      case 'COLOR_4F':
        return AttributeType$COLOR_4F_getInstance();
      case 'INT':
        return AttributeType$INT_getInstance();
      case 'VEC_2I':
        return AttributeType$VEC_2I_getInstance();
      case 'VEC_3I':
        return AttributeType$VEC_3I_getInstance();
      case 'VEC_4I':
        return AttributeType$VEC_4I_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.shading.AttributeType.' + name);
    }
  }
  AttributeType.valueOf_61zpoe$ = AttributeType$valueOf;
  function Attribute(name, type) {
    Attribute$Companion_getInstance();
    this.name = name;
    this.type = type;
    this.glslSrcName = this.name;
    this.locationOffset = 0;
    this.divisor = 0;
  }
  Attribute.prototype.toString = function () {
    return this.name;
  };
  function Attribute$Companion() {
    Attribute$Companion_instance = this;
    this.POSITIONS = new Attribute('attrib_positions', AttributeType$VEC_3F_getInstance());
    this.NORMALS = new Attribute('attrib_normals', AttributeType$VEC_3F_getInstance());
    this.TANGENTS = new Attribute('attrib_tangents', AttributeType$VEC_3F_getInstance());
    this.TEXTURE_COORDS = new Attribute('attrib_texture_coords', AttributeType$VEC_2F_getInstance());
    this.COLORS = new Attribute('attrib_colors', AttributeType$COLOR_4F_getInstance());
  }
  Attribute$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Attribute$Companion_instance = null;
  function Attribute$Companion_getInstance() {
    if (Attribute$Companion_instance === null) {
      new Attribute$Companion();
    }
    return Attribute$Companion_instance;
  }
  Attribute.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Attribute',
    interfaces: []
  };
  Attribute.prototype.component1 = function () {
    return this.name;
  };
  Attribute.prototype.component2 = function () {
    return this.type;
  };
  Attribute.prototype.copy_giwn2h$ = function (name, type) {
    return new Attribute(name === void 0 ? this.name : name, type === void 0 ? this.type : type);
  };
  Attribute.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.type) | 0;
    return result;
  };
  Attribute.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.type, other.type)))));
  };
  function basicShader(injector, propsInit) {
    if (injector === void 0)
      injector = null;
    var gen = new GlslGenerator();
    if (injector != null) {
      gen.injectors.add_11rb$(injector);
    }
    var $receiver = new ShaderProps();
    propsInit($receiver);
    return new BasicShader($receiver, gen);
  }
  function BasicShader(props, generator) {
    if (generator === void 0)
      generator = new GlslGenerator();
    Shader.call(this);
    this.props = props;
    this.generator = generator;
    this.uMvpMatrix = this.addUniform_1ybs2r$(new UniformMatrix4(GlslGenerator$Companion_getInstance().U_MVP_MATRIX));
    this.uModelMatrix = this.addUniform_1ybs2r$(new UniformMatrix4(GlslGenerator$Companion_getInstance().U_MODEL_MATRIX));
    this.uViewMatrix = this.addUniform_1ybs2r$(new UniformMatrix4(GlslGenerator$Companion_getInstance().U_VIEW_MATRIX));
    this.uProjMatrix = this.addUniform_1ybs2r$(new UniformMatrix4(GlslGenerator$Companion_getInstance().U_PROJ_MATRIX));
    this.uLightColor = this.addUniform_1ybs2r$(new Uniform3f(GlslGenerator$Companion_getInstance().U_LIGHT_COLOR));
    this.uLightDirection = this.addUniform_1ybs2r$(new Uniform3f(GlslGenerator$Companion_getInstance().U_LIGHT_DIRECTION));
    this.uCamPosition = this.addUniform_1ybs2r$(new Uniform3f(GlslGenerator$Companion_getInstance().U_CAMERA_POSITION));
    this.uShininess = this.addUniform_1ybs2r$(new Uniform1f(GlslGenerator$Companion_getInstance().U_SHININESS));
    this.uSpecularIntensity = this.addUniform_1ybs2r$(new Uniform1f(GlslGenerator$Companion_getInstance().U_SPECULAR_INTENSITY));
    this.uReflectivity = this.addUniform_1ybs2r$(new Uniform1f(GlslGenerator$Companion_getInstance().U_REFLECTIVENESS));
    this.uStaticColor = this.addUniform_1ybs2r$(new Uniform4f(GlslGenerator$Companion_getInstance().U_STATIC_COLOR));
    this.uTexture = this.addUniform_1ybs2r$(new UniformTexture2D(GlslGenerator$Companion_getInstance().U_TEXTURE_0));
    this.uNormalMap = this.addUniform_1ybs2r$(new UniformTexture2D(GlslGenerator$Companion_getInstance().U_NORMAL_MAP_0));
    this.uEnvironmentMap = this.addUniform_1ybs2r$(new UniformTextureCubeMap(GlslGenerator$Companion_getInstance().U_ENVIRONMENT_MAP));
    this.uAlpha = this.addUniform_1ybs2r$(new Uniform1f(GlslGenerator$Companion_getInstance().U_ALPHA));
    this.uSaturation = this.addUniform_1ybs2r$(new Uniform1f(GlslGenerator$Companion_getInstance().U_SATURATION));
    this.uFogColor = this.addUniform_1ybs2r$(new Uniform4f(GlslGenerator$Companion_getInstance().U_FOG_COLOR));
    this.uFogRange = this.addUniform_1ybs2r$(new Uniform1f(GlslGenerator$Companion_getInstance().U_FOG_RANGE));
    this.uBones = this.addUniform_1ybs2r$(new UniformMatrix4(GlslGenerator$Companion_getInstance().U_BONES));
    this.uShadowMvp = this.addUniform_1ybs2r$(new UniformMatrix4(GlslGenerator$Companion_getInstance().U_SHADOW_MVP));
    this.uShadowTexSz = this.addUniform_1ybs2r$(new Uniform1iv(GlslGenerator$Companion_getInstance().U_SHADOW_TEX_SZ));
    this.uClipSpaceFarZ = this.addUniform_1ybs2r$(new Uniform1fv(GlslGenerator$Companion_getInstance().U_CLIP_SPACE_FAR_Z));
    this.uShadowTex = ArrayList_init_0();
    this.clipMethod = this.props.clipMethod;
    var tmp$;
    this.shininess = this.props.shininess;
    this.specularIntensity = this.props.specularIntensity;
    this.reflectivity = this.props.reflectivity;
    this.staticColor.set_czzhhz$(this.props.staticColor);
    this.texture = this.props.texture;
    this.normalMap = this.props.normalMap;
    this.environmentMap = this.props.environmentMap;
    this.alpha = this.props.alpha;
    this.saturation = this.props.saturation;
    tmp$ = this.clipMethod.getUniforms().iterator();
    while (tmp$.hasNext()) {
      var uniform = tmp$.next();
      this.addUniform_xb83l5$(uniform);
      this.generator.customUniforms.add_11rb$(uniform);
    }
    var $receiver = this.generator.injectors;
    var element = this.clipMethod;
    $receiver.add_11rb$(element);
  }
  Object.defineProperty(BasicShader.prototype, 'shininess', {
    get: function () {
      return this.uShininess.value[0];
    },
    set: function (value) {
      this.uShininess.value[0] = value;
    }
  });
  Object.defineProperty(BasicShader.prototype, 'specularIntensity', {
    get: function () {
      return this.uSpecularIntensity.value[0];
    },
    set: function (value) {
      this.uSpecularIntensity.value[0] = value;
    }
  });
  Object.defineProperty(BasicShader.prototype, 'reflectivity', {
    get: function () {
      return this.uReflectivity.value[0];
    },
    set: function (value) {
      this.uReflectivity.value[0] = value;
    }
  });
  Object.defineProperty(BasicShader.prototype, 'staticColor', {
    get: function () {
      return this.uStaticColor.value;
    },
    set: function (value) {
      this.uStaticColor.value.set_czzhhz$(value);
    }
  });
  Object.defineProperty(BasicShader.prototype, 'texture', {
    get: function () {
      return this.uTexture.value;
    },
    set: function (value) {
      this.uTexture.value = value;
    }
  });
  Object.defineProperty(BasicShader.prototype, 'normalMap', {
    get: function () {
      return this.uNormalMap.value;
    },
    set: function (value) {
      this.uNormalMap.value = value;
    }
  });
  Object.defineProperty(BasicShader.prototype, 'environmentMap', {
    get: function () {
      return this.uEnvironmentMap.value;
    },
    set: function (value) {
      this.uEnvironmentMap.value = value;
    }
  });
  Object.defineProperty(BasicShader.prototype, 'alpha', {
    get: function () {
      return this.uAlpha.value[0];
    },
    set: function (value) {
      this.uAlpha.value[0] = value;
    }
  });
  Object.defineProperty(BasicShader.prototype, 'saturation', {
    get: function () {
      return this.uSaturation.value[0];
    },
    set: function (value) {
      this.uSaturation.value[0] = value;
    }
  });
  Object.defineProperty(BasicShader.prototype, 'bones', {
    get: function () {
      return this.uBones.value;
    },
    set: function (value) {
      this.uBones.value = value;
    }
  });
  BasicShader.prototype.generate_x4tdlw$ = function (node, ctx) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var shadowMap = (tmp$_0 = (tmp$ = node.scene) != null ? tmp$.lighting : null) != null ? tmp$_0.shadowMap : null;
    this.uShadowTexSz.setSize_za3lpa$((tmp$_1 = shadowMap != null ? shadowMap.numMaps : null) != null ? tmp$_1 : 0);
    this.uClipSpaceFarZ.setSize_za3lpa$((tmp$_2 = shadowMap != null ? shadowMap.numMaps : null) != null ? tmp$_2 : 0);
    this.uShadowTex.clear();
    if (shadowMap != null) {
      this.uShadowMvp.value = shadowMap.shadowMvp;
      tmp$_3 = shadowMap.numMaps;
      for (var i = 0; i < tmp$_3; i++) {
        var shadowTex = this.addUniform_1ybs2r$(new UniformTexture2D(GlslGenerator$Companion_getInstance().U_SHADOW_TEX + '_' + i));
        this.uShadowTex.add_11rb$(shadowTex);
        shadowTex.value = shadowMap.getShadowMap_za3lpa$(i);
        this.uShadowTexSz.value[i] = shadowMap.getShadowMapSize_za3lpa$(i);
      }
    }
    this.source = this.generator.generate_4v27xu$(this.props, node, ctx);
    this.attributes.clear();
    this.attributes.add_11rb$(Attribute$Companion_getInstance().POSITIONS);
    this.attributes.add_11rb$(Attribute$Companion_getInstance().NORMALS);
    this.attributes.add_11rb$(Attribute$Companion_getInstance().TEXTURE_COORDS);
    this.attributes.add_11rb$(Attribute$Companion_getInstance().COLORS);
    if (this.props.isNormalMapped) {
      this.attributes.add_11rb$(Attribute$Companion_getInstance().TANGENTS);
    }
    if (this.props.numBones > 0 && ctx.glCapabilities.shaderIntAttribs) {
      this.attributes.add_11rb$(Armature$Companion_getInstance().BONE_INDICES);
      this.attributes.add_11rb$(Armature$Companion_getInstance().BONE_WEIGHTS);
    }
    if (this.props.isInstanced) {
      this.attributes.add_11rb$(InstancedMesh$Companion_getInstance().MODEL_INSTANCES_0);
      this.attributes.add_11rb$(InstancedMesh$Companion_getInstance().MODEL_INSTANCES_1);
      this.attributes.add_11rb$(InstancedMesh$Companion_getInstance().MODEL_INSTANCES_2);
      this.attributes.add_11rb$(InstancedMesh$Companion_getInstance().MODEL_INSTANCES_3);
    }
    addAll(this.attributes, this.generator.customAttributes);
  };
  BasicShader.prototype.onBind_x4tdlw$ = function (node, ctx) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    this.onMatrixUpdate_aemszp$(ctx);
    this.uFogColor.bind_aemszp$(ctx);
    this.uFogRange.bind_aemszp$(ctx);
    this.uSaturation.bind_aemszp$(ctx);
    this.uAlpha.bind_aemszp$(ctx);
    this.uShininess.bind_aemszp$(ctx);
    this.uSpecularIntensity.bind_aemszp$(ctx);
    this.uReflectivity.bind_aemszp$(ctx);
    this.uStaticColor.bind_aemszp$(ctx);
    this.uTexture.bind_aemszp$(ctx);
    this.uNormalMap.bind_aemszp$(ctx);
    this.uEnvironmentMap.bind_aemszp$(ctx);
    this.uBones.bind_aemszp$(ctx);
    var shadowMap = (tmp$_0 = (tmp$ = node.scene) != null ? tmp$.lighting : null) != null ? tmp$_0.shadowMap : null;
    if (ctx.glCapabilities.depthTextures && shadowMap != null) {
      if (ctx.renderPass === RenderPass$SHADOW_getInstance()) {
        tmp$_1 = shadowMap.numMaps;
        for (var i = 0; i < tmp$_1; i++) {
          this.uShadowTex.get_za3lpa$(i).value = null;
          this.uShadowTex.get_za3lpa$(i).bind_aemszp$(ctx);
        }
      }
       else {
        tmp$_2 = shadowMap.numMaps;
        for (var i_0 = 0; i_0 < tmp$_2; i_0++) {
          this.uClipSpaceFarZ.value[i_0] = shadowMap.getClipSpaceFarZ_za3lpa$(i_0);
          this.uShadowTex.get_za3lpa$(i_0).value = shadowMap.getShadowMap_za3lpa$(i_0);
          this.uShadowTex.get_za3lpa$(i_0).bind_aemszp$(ctx);
        }
        this.uShadowMvp.bind_aemszp$(ctx);
        this.uShadowTexSz.bind_aemszp$(ctx);
        this.uClipSpaceFarZ.bind_aemszp$(ctx);
      }
    }
    this.clipMethod.onBind_x4tdlw$(node, ctx);
  };
  BasicShader.prototype.onMatrixUpdate_aemszp$ = function (ctx) {
    this.uMvpMatrix.value = ctx.mvpState.mvpMatrixBuffer;
    this.uMvpMatrix.bind_aemszp$(ctx);
    this.uModelMatrix.value = ctx.mvpState.modelMatrixBuffer;
    this.uModelMatrix.bind_aemszp$(ctx);
    this.uViewMatrix.value = ctx.mvpState.viewMatrixBuffer;
    this.uViewMatrix.bind_aemszp$(ctx);
    this.uProjMatrix.value = ctx.mvpState.projMatrixBuffer;
    this.uProjMatrix.bind_aemszp$(ctx);
  };
  BasicShader.prototype.bindMesh_sbx4mf$ = function (mesh, ctx) {
    var scene = ensureNotNull(mesh.scene);
    this.uCamPosition.value.set_czzhiu$(scene.camera.globalPos);
    this.uCamPosition.bind_aemszp$(ctx);
    var lighting = scene.lighting;
    this.uLightDirection.value.set_czzhiu$(lighting.primaryLight.direction);
    this.uLightDirection.bind_aemszp$(ctx);
    this.uLightColor.value.set_y2kzbl$(lighting.primaryLight.color.r, lighting.primaryLight.color.g, lighting.primaryLight.color.b);
    this.uLightColor.bind_aemszp$(ctx);
    Shader.prototype.bindMesh_sbx4mf$.call(this, mesh, ctx);
  };
  BasicShader.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$, tmp$_0;
    Shader.prototype.dispose_aemszp$.call(this, ctx);
    (tmp$ = this.texture) != null ? (tmp$.dispose_aemszp$(ctx), Unit) : null;
    (tmp$_0 = this.normalMap) != null ? (tmp$_0.dispose_aemszp$(ctx), Unit) : null;
  };
  BasicShader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BasicShader',
    interfaces: [Shader]
  };
  function basicPointShader(propsInit) {
    var $receiver = new ShaderProps();
    propsInit($receiver);
    return new BasicPointShader($receiver, new GlslGenerator());
  }
  function BasicPointShader(props, generator) {
    BasicPointShader$Companion_getInstance();
    BasicShader.call(this, props, generator);
    this.uPointSz = this.addUniform_1ybs2r$(new Uniform1f(BasicPointShader$Companion_getInstance().U_POINT_SIZE));
    var $receiver = generator.customUniforms;
    var element = this.uPointSz;
    $receiver.add_11rb$(element);
    var $receiver_0 = generator.injectors;
    var element_0 = new BasicPointShader_init$ObjectLiteral();
    $receiver_0.add_11rb$(element_0);
    this.pointSize = 1.0;
  }
  function BasicPointShader$Companion() {
    BasicPointShader$Companion_instance = this;
    this.U_POINT_SIZE = 'uPointSz';
  }
  BasicPointShader$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var BasicPointShader$Companion_instance = null;
  function BasicPointShader$Companion_getInstance() {
    if (BasicPointShader$Companion_instance === null) {
      new BasicPointShader$Companion();
    }
    return BasicPointShader$Companion_instance;
  }
  Object.defineProperty(BasicPointShader.prototype, 'pointSize', {
    get: function () {
      return this.uPointSz.value[0];
    },
    set: function (value) {
      this.uPointSz.value[0] = value;
    }
  });
  BasicPointShader.prototype.onBind_x4tdlw$ = function (node, ctx) {
    BasicShader.prototype.onBind_x4tdlw$.call(this, node, ctx);
    this.uPointSz.bind_aemszp$(ctx);
  };
  function BasicPointShader_init$ObjectLiteral() {
  }
  BasicPointShader_init$ObjectLiteral.prototype.vsAfterProj_kv1jfs$ = function (shaderProps, node, text, ctx) {
    text.append_gw00v9$('gl_PointSize = uPointSz;\n');
  };
  BasicPointShader_init$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [GlslGenerator$GlslInjector]
  };
  BasicPointShader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BasicPointShader',
    interfaces: [BasicShader]
  };
  function blurShader$lambda($receiver) {
    return Unit;
  }
  function blurShader(propsInit) {
    if (propsInit === void 0)
      propsInit = blurShader$lambda;
    var $receiver = new ShaderProps();
    propsInit($receiver);
    return new BlurShader($receiver, new GlslGenerator());
  }
  function BlurShader(props, generator) {
    BasicShader.call(this, props, generator);
    this.uBlurTex_0 = this.addUniform_1ybs2r$(new UniformTexture2D('uBlurTexture'));
    this.uColorMix_0 = this.addUniform_1ybs2r$(new Uniform1f('uColorMix'));
    this.uTexPos_0 = this.addUniform_1ybs2r$(new Uniform2f('uTexPos'));
    this.uTexSz_0 = this.addUniform_1ybs2r$(new Uniform2f('uTexSz'));
    this.blurHelper = null;
    this.colorMix = 0.0;
    var $receiver = generator.customUniforms;
    var element = this.uBlurTex_0;
    $receiver.add_11rb$(element);
    var $receiver_0 = generator.customUniforms;
    var element_0 = this.uColorMix_0;
    $receiver_0.add_11rb$(element_0);
    var $receiver_1 = generator.customUniforms;
    var element_1 = this.uTexPos_0;
    $receiver_1.add_11rb$(element_1);
    var $receiver_2 = generator.customUniforms;
    var element_2 = this.uTexSz_0;
    $receiver_2.add_11rb$(element_2);
    var $receiver_3 = generator.injectors;
    var element_3 = new BlurShader_init$ObjectLiteral();
    $receiver_3.add_11rb$(element_3);
  }
  Object.defineProperty(BlurShader.prototype, 'colorMix', {
    get: function () {
      return this.uColorMix_0.value[0];
    },
    set: function (value) {
      this.uColorMix_0.value[0] = value;
    }
  });
  BlurShader.prototype.onBind_x4tdlw$ = function (node, ctx) {
    BasicShader.prototype.onBind_x4tdlw$.call(this, node, ctx);
    var helper = this.blurHelper;
    if (helper != null) {
      helper.isInUse_8be2vx$ = true;
      this.uBlurTex_0.value = helper.outputTexture;
      this.uTexPos_0.value.set_dleff0$(helper.capturedScrX, helper.capturedScrY);
      this.uTexSz_0.value.set_dleff0$(helper.capturedScrW, helper.capturedScrH);
    }
    this.uBlurTex_0.bind_aemszp$(ctx);
    this.uColorMix_0.bind_aemszp$(ctx);
    this.uTexPos_0.bind_aemszp$(ctx);
    this.uTexSz_0.bind_aemszp$(ctx);
  };
  function BlurShader_init$ObjectLiteral() {
  }
  BlurShader_init$ObjectLiteral.prototype.fsAfterSampling_kv1jfs$ = function (shaderProps, node, text, ctx) {
    text.append_gw00v9$('vec2 blurSamplePos = vec2((gl_FragCoord.x - uTexPos.x) / uTexSz.x, ').append_gw00v9$('1.0 - (gl_FragCoord.y - uTexPos.y) / uTexSz.y);\n').append_gw00v9$(ctx.glCapabilities.glslDialect.fragColorBody + ' = ' + ctx.glCapabilities.glslDialect.texSampler + '(').append_gw00v9$('uBlurTexture, blurSamplePos) * (1.0 - uColorMix) + ').append_gw00v9$(ctx.glCapabilities.glslDialect.fragColorBody + ' * uColorMix;' + '\n');
  };
  BlurShader_init$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [GlslGenerator$GlslInjector]
  };
  BlurShader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlurShader',
    interfaces: [BasicShader]
  };
  function BlurredBackgroundHelper(texSize, blurMethod) {
    if (texSize === void 0)
      texSize = 256;
    if (blurMethod === void 0)
      blurMethod = BlurredBackgroundHelper$BlurMethod$BLUR_13_TAP_getInstance();
    this.texSize_0 = texSize;
    this.blurMethod_0 = blurMethod;
    this.tmpRes_0 = MutableVec3f_init();
    this.tmpVec_0 = MutableVec3f_init();
    this.texBounds_0 = new BoundingBox();
    this.copyTex_0 = null;
    this.copyTexData_0 = new BlurredBackgroundHelper$BlurredBgTextureData();
    this.texMesh_0 = null;
    this.texMeshFlipped_0 = null;
    this.blurFb1_0 = (new Framebuffer(this.texSize_0, this.texSize_0)).withColor();
    this.blurFb2_0 = (new Framebuffer(this.texSize_0, this.texSize_0)).withColor();
    this.blurX_0 = null;
    this.blurY_0 = null;
    this.isForceUpdateTex = false;
    this.isInUse_8be2vx$ = true;
    this.numPasses = 2;
    var id = UniqueId_getInstance().nextId();
    var texProps = new TextureProps('DistortedBackground-' + id.toString(), 9729, 9729, 33071, 33071, 0);
    this.copyTex_0 = new Texture(texProps, BlurredBackgroundHelper_init$lambda(this));
    this.texMesh_0 = textureMesh(void 0, void 0, BlurredBackgroundHelper_init$lambda_0);
    this.texMeshFlipped_0 = textureMesh(void 0, void 0, BlurredBackgroundHelper_init$lambda_1);
  }
  function BlurredBackgroundHelper$BlurMethod(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function BlurredBackgroundHelper$BlurMethod_initFields() {
    BlurredBackgroundHelper$BlurMethod_initFields = function () {
    };
    BlurredBackgroundHelper$BlurMethod$BLUR_9_TAP_instance = new BlurredBackgroundHelper$BlurMethod('BLUR_9_TAP', 0);
    BlurredBackgroundHelper$BlurMethod$BLUR_13_TAP_instance = new BlurredBackgroundHelper$BlurMethod('BLUR_13_TAP', 1);
  }
  var BlurredBackgroundHelper$BlurMethod$BLUR_9_TAP_instance;
  function BlurredBackgroundHelper$BlurMethod$BLUR_9_TAP_getInstance() {
    BlurredBackgroundHelper$BlurMethod_initFields();
    return BlurredBackgroundHelper$BlurMethod$BLUR_9_TAP_instance;
  }
  var BlurredBackgroundHelper$BlurMethod$BLUR_13_TAP_instance;
  function BlurredBackgroundHelper$BlurMethod$BLUR_13_TAP_getInstance() {
    BlurredBackgroundHelper$BlurMethod_initFields();
    return BlurredBackgroundHelper$BlurMethod$BLUR_13_TAP_instance;
  }
  BlurredBackgroundHelper$BlurMethod.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlurMethod',
    interfaces: [Enum]
  };
  function BlurredBackgroundHelper$BlurMethod$values() {
    return [BlurredBackgroundHelper$BlurMethod$BLUR_9_TAP_getInstance(), BlurredBackgroundHelper$BlurMethod$BLUR_13_TAP_getInstance()];
  }
  BlurredBackgroundHelper$BlurMethod.values = BlurredBackgroundHelper$BlurMethod$values;
  function BlurredBackgroundHelper$BlurMethod$valueOf(name) {
    switch (name) {
      case 'BLUR_9_TAP':
        return BlurredBackgroundHelper$BlurMethod$BLUR_9_TAP_getInstance();
      case 'BLUR_13_TAP':
        return BlurredBackgroundHelper$BlurMethod$BLUR_13_TAP_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.shading.BlurredBackgroundHelper.BlurMethod.' + name);
    }
  }
  BlurredBackgroundHelper$BlurMethod.valueOf_61zpoe$ = BlurredBackgroundHelper$BlurMethod$valueOf;
  Object.defineProperty(BlurredBackgroundHelper.prototype, 'outputTexture', {
    get: function () {
      return this.blurFb2_0.colorAttachment;
    }
  });
  Object.defineProperty(BlurredBackgroundHelper.prototype, 'capturedScrX', {
    get: function () {
      return this.copyTexData_0.x;
    }
  });
  Object.defineProperty(BlurredBackgroundHelper.prototype, 'capturedScrY', {
    get: function () {
      return this.copyTexData_0.y;
    }
  });
  Object.defineProperty(BlurredBackgroundHelper.prototype, 'capturedScrW', {
    get: function () {
      return this.copyTexData_0.width;
    }
  });
  Object.defineProperty(BlurredBackgroundHelper.prototype, 'capturedScrH', {
    get: function () {
      return this.copyTexData_0.height;
    }
  });
  BlurredBackgroundHelper.prototype.updateDistortionTexture_hp84kc$ = function (node, ctx, bounds) {
    if (bounds === void 0)
      bounds = node.bounds;
    var tmp$, tmp$_0, tmp$_1;
    if (!this.isInUse_8be2vx$ || this.isForceUpdateTex || ctx.renderPass !== RenderPass$SCREEN_getInstance()) {
      return;
    }
    this.isInUse_8be2vx$ = false;
    tmp$_0 = (tmp$ = node.scene) != null ? tmp$.camera : null;
    if (tmp$_0 == null) {
      return;
    }
    var cam = tmp$_0;
    this.texBounds_0.clear();
    this.addToTexBounds_0(cam, node, bounds.min.x, bounds.min.y, bounds.min.z, ctx);
    this.addToTexBounds_0(cam, node, bounds.min.x, bounds.min.y, bounds.max.z, ctx);
    this.addToTexBounds_0(cam, node, bounds.min.x, bounds.max.y, bounds.min.z, ctx);
    this.addToTexBounds_0(cam, node, bounds.min.x, bounds.max.y, bounds.max.z, ctx);
    this.addToTexBounds_0(cam, node, bounds.max.x, bounds.min.y, bounds.min.z, ctx);
    this.addToTexBounds_0(cam, node, bounds.max.x, bounds.min.y, bounds.max.z, ctx);
    this.addToTexBounds_0(cam, node, bounds.max.x, bounds.max.y, bounds.min.z, ctx);
    this.addToTexBounds_0(cam, node, bounds.max.x, bounds.max.y, bounds.max.z, ctx);
    var a = numberToInt(this.texBounds_0.min.x);
    var minScrX = Math_0.max(a, 0);
    var a_0 = numberToInt(this.texBounds_0.max.x);
    var b = ctx.windowWidth - 1 | 0;
    var maxScrX = Math_0.min(a_0, b);
    var a_1 = ctx.windowHeight - numberToInt(this.texBounds_0.max.y) | 0;
    var minScrY = Math_0.max(a_1, 0);
    var a_2 = ctx.windowHeight - numberToInt(this.texBounds_0.min.y) | 0;
    var b_0 = ctx.windowHeight - 1 | 0;
    var maxScrY = Math_0.min(a_2, b_0);
    var a_3 = maxScrX - minScrX | 0;
    var sizeX = Math_0.max(a_3, 16);
    var a_4 = maxScrY - minScrY | 0;
    var sizeY = Math_0.max(a_4, 16);
    if (maxScrX > 0 && minScrX < ctx.windowWidth && maxScrY > 0 && minScrY < ctx.windowHeight && this.texBounds_0.min.z < 1 && this.texBounds_0.max.z > 0) {
      if (sizeX > sizeY) {
        var a_5 = sizeX;
        var b_1 = ctx.windowHeight - 1 | 0;
        sizeY = Math_0.min(a_5, b_1);
        if ((minScrY + sizeY | 0) >= ctx.windowHeight) {
          minScrY = ctx.windowHeight - sizeY - 1 | 0;
        }
      }
       else if (sizeY > sizeX) {
        var a_6 = sizeY;
        var b_2 = ctx.windowWidth - 1 | 0;
        sizeX = Math_0.min(a_6, b_2);
        if ((minScrX + sizeX | 0) >= ctx.windowWidth) {
          minScrX = ctx.windowWidth - sizeX - 1 | 0;
        }
      }
      (tmp$_1 = this.copyTex_0.res) != null ? (tmp$_1.isLoaded = false) : null;
      this.copyTexData_0.x = minScrX;
      this.copyTexData_0.y = minScrY;
      this.copyTexData_0.setCopyWidth_za3lpa$(sizeX);
      this.copyTexData_0.setCopyHeight_za3lpa$(sizeY);
      this.doBlurring_0(ctx);
    }
  };
  BlurredBackgroundHelper.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$, tmp$_0;
    this.blurFb1_0.dispose_aemszp$(ctx);
    this.blurFb2_0.dispose_aemszp$(ctx);
    (tmp$ = this.blurX_0) != null ? (tmp$.dispose_aemszp$(ctx), Unit) : null;
    (tmp$_0 = this.blurY_0) != null ? (tmp$_0.dispose_aemszp$(ctx), Unit) : null;
    this.copyTex_0.dispose_aemszp$(ctx);
    this.texMesh_0.dispose_aemszp$(ctx);
    this.texMeshFlipped_0.dispose_aemszp$(ctx);
  };
  BlurredBackgroundHelper.prototype.doBlurring_0 = function (ctx) {
    var tmp$, tmp$_0, tmp$_1;
    ctx.textureMgr.bindTexture_xyx3x4$(this.copyTex_0, ctx);
    var tmp$_2;
    if ((tmp$ = this.blurX_0) != null)
      tmp$_2 = tmp$;
    else {
      var $receiver = new BlurredBackgroundHelper$BlurQuadShader(this.blurMethod_0);
      $receiver.uTexture.value = this.copyTex_0;
      $receiver.uDirection.value.set_dleff0$(1.0 / this.texSize_0, 0.0);
      this.blurX_0 = $receiver;
      tmp$_2 = $receiver;
    }
    var blrX = tmp$_2;
    var tmp$_3;
    if ((tmp$_0 = this.blurY_0) != null)
      tmp$_3 = tmp$_0;
    else {
      var $receiver_0 = new BlurredBackgroundHelper$BlurQuadShader(this.blurMethod_0);
      $receiver_0.uTexture.value = this.blurFb1_0.colorAttachment;
      $receiver_0.uDirection.value.set_dleff0$(0.0, 1.0 / this.texSize_0);
      this.blurY_0 = $receiver_0;
      tmp$_3 = $receiver_0;
    }
    var blrY = tmp$_3;
    ctx.pushAttributes();
    ctx.clearColor = Color$Companion_getInstance().BLACK;
    ctx.applyAttributes();
    ctx.shaderMgr.clearShader_aemszp$(ctx);
    ctx.mvpState.pushMatrices();
    ctx.mvpState.projMatrix.setIdentity();
    ctx.mvpState.viewMatrix.setIdentity();
    ctx.mvpState.modelMatrix.setIdentity();
    ctx.mvpState.update_aemszp$(ctx);
    blrX.uTexture.value = this.copyTex_0;
    this.renderFb_0(this.blurFb1_0, this.texMeshFlipped_0, blrX, ctx);
    this.renderFb_0(this.blurFb2_0, this.texMesh_0, blrY, ctx);
    blrX.uTexture.value = this.blurFb2_0.colorAttachment;
    tmp$_1 = this.numPasses;
    for (var i = 1; i < tmp$_1; i++) {
      this.renderFb_0(this.blurFb1_0, this.texMesh_0, blrX, ctx);
      this.renderFb_0(this.blurFb2_0, this.texMesh_0, blrY, ctx);
    }
    ctx.mvpState.popMatrices();
    ctx.mvpState.update_aemszp$(ctx);
    ctx.popAttributes();
  };
  BlurredBackgroundHelper.prototype.renderFb_0 = function (fb, mesh, shader, ctx) {
    fb.bind_aemszp$(ctx);
    glClear(16384);
    mesh.shader = shader;
    mesh.render_aemszp$(ctx);
    fb.unbind_aemszp$(ctx);
  };
  BlurredBackgroundHelper.prototype.addToTexBounds_0 = function (cam, node, x, y, z, ctx) {
    this.tmpVec_0.set_y2kzbl$(x, y, z);
    node.toGlobalCoords_w1lst9$(this.tmpVec_0);
    cam.projectScreen_dr5ppi$(this.tmpVec_0, ensureNotNull(node.scene).viewport, ctx, this.tmpRes_0);
    this.texBounds_0.add_czzhiu$(this.tmpRes_0);
  };
  function BlurredBackgroundHelper$BlurredBgTextureData() {
    TextureData.call(this);
    this.x = 0;
    this.y = 0;
  }
  Object.defineProperty(BlurredBackgroundHelper$BlurredBgTextureData.prototype, 'isAvailable', {
    get: function () {
      return true;
    }
  });
  BlurredBackgroundHelper$BlurredBgTextureData.prototype.setCopyWidth_za3lpa$ = function (value) {
    this.width = value;
  };
  BlurredBackgroundHelper$BlurredBgTextureData.prototype.setCopyHeight_za3lpa$ = function (value) {
    this.height = value;
  };
  BlurredBackgroundHelper$BlurredBgTextureData.prototype.onLoad_2jsdat$ = function (texture, target, ctx) {
    glCopyTexImage2D(target, 0, 6407, this.x, this.y, this.width, this.height, 0);
  };
  BlurredBackgroundHelper$BlurredBgTextureData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlurredBgTextureData',
    interfaces: [TextureData]
  };
  function BlurredBackgroundHelper$BlurQuadShader(blurMethod) {
    Shader.call(this);
    this.blurMethod_0 = blurMethod;
    this.uTexture = this.addUniform_1ybs2r$(new UniformTexture2D('uTexture'));
    this.uDirection = this.addUniform_1ybs2r$(new Uniform2f('uDirection'));
  }
  BlurredBackgroundHelper$BlurQuadShader.prototype.generate_x4tdlw$ = function (node, ctx) {
    this.attributes.add_11rb$(Attribute$Companion_getInstance().POSITIONS);
    this.attributes.add_11rb$(Attribute$Companion_getInstance().TEXTURE_COORDS);
    var vs = ctx.glCapabilities.glslDialect.version + '\n' + (ctx.glCapabilities.glslDialect.vsIn + ' vec3 ' + Attribute$Companion_getInstance().POSITIONS.name + ';' + '\n') + (ctx.glCapabilities.glslDialect.vsIn + ' vec2 ' + Attribute$Companion_getInstance().TEXTURE_COORDS.name + ';' + '\n') + (ctx.glCapabilities.glslDialect.vsOut + ' vec2 vTexCoord;' + '\n') + 'void main() {\n' + ('  gl_Position = vec4(' + Attribute$Companion_getInstance().POSITIONS.name + ', 1.0);' + '\n') + ('  vTexCoord = ' + Attribute$Companion_getInstance().TEXTURE_COORDS.name + ';' + '\n') + '}';
    var fs;
    var fragColor = ctx.glCapabilities.glslDialect.fragColorBody;
    var sampler = ctx.glCapabilities.glslDialect.texSampler;
    if (this.blurMethod_0 === BlurredBackgroundHelper$BlurMethod$BLUR_9_TAP_getInstance()) {
      fs = ctx.glCapabilities.glslDialect.version + '\n' + 'precision mediump float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform vec2 uDirection;\n' + 'uniform float uTexSize;\n' + (ctx.glCapabilities.glslDialect.fsIn + ' vec2 vTexCoord;') + (ctx.glCapabilities.glslDialect.fragColorHead + '\n') + 'void main() {\n' + '  vec2 off1 = vec2(1.3846153) * uDirection;\n' + '  vec2 off2 = vec2(3.2307692) * uDirection;\n' + ('  ' + fragColor + ' = ' + sampler + '(uTexture, vTexCoord) * 0.2270270;' + '\n') + ('  ' + fragColor + ' += ' + sampler + '(uTexture, vTexCoord + off1) * 0.3162162;' + '\n') + ('  ' + fragColor + ' += ' + sampler + '(uTexture, vTexCoord - off1) * 0.3162162;' + '\n') + ('  ' + fragColor + ' += ' + sampler + '(uTexture, vTexCoord + off2) * 0.0702702;' + '\n') + ('  ' + fragColor + ' += ' + sampler + '(uTexture, vTexCoord - off2) * 0.0702702;' + '\n') + ('  ' + fragColor + '.rgb *= ' + ctx.glCapabilities.glslDialect.fragColorBody + '.a;' + '\n') + '}';
    }
     else {
      fs = ctx.glCapabilities.glslDialect.version + '\n' + 'precision mediump float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform vec2 uDirection;\n' + 'uniform float uTexSize;\n' + (ctx.glCapabilities.glslDialect.fsIn + ' vec2 vTexCoord;') + (ctx.glCapabilities.glslDialect.fragColorHead + '\n') + 'void main() {\n' + '  vec2 off1 = vec2(1.4117647) * uDirection;\n' + '  vec2 off2 = vec2(3.2941176) * uDirection;\n' + '  vec2 off3 = vec2(5.1764705) * uDirection;\n' + ('  ' + fragColor + ' = ' + sampler + '(uTexture, vTexCoord) * 0.1968255;' + '\n') + ('  ' + fragColor + ' += ' + sampler + '(uTexture, vTexCoord + off1) * 0.2969069;' + '\n') + ('  ' + fragColor + ' += ' + sampler + '(uTexture, vTexCoord - off1) * 0.2969069;' + '\n') + ('  ' + fragColor + ' += ' + sampler + '(uTexture, vTexCoord + off2) * 0.0944703;' + '\n') + ('  ' + fragColor + ' += ' + sampler + '(uTexture, vTexCoord - off2) * 0.0944703;' + '\n') + ('  ' + fragColor + ' += ' + sampler + '(uTexture, vTexCoord - off3) * 0.0103813;' + '\n') + ('  ' + fragColor + ' += ' + sampler + '(uTexture, vTexCoord - off3) * 0.0103813;' + '\n') + ('  ' + fragColor + '.rgb *= ' + ctx.glCapabilities.glslDialect.fragColorBody + '.a;' + '\n') + '}';
    }
    this.source = Shader$Shader$Source_init(vs, fs);
  };
  BlurredBackgroundHelper$BlurQuadShader.prototype.onBind_x4tdlw$ = function (node, ctx) {
    this.uTexture.bind_aemszp$(ctx);
    this.uDirection.bind_aemszp$(ctx);
  };
  BlurredBackgroundHelper$BlurQuadShader.prototype.onMatrixUpdate_aemszp$ = function (ctx) {
  };
  BlurredBackgroundHelper$BlurQuadShader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlurQuadShader',
    interfaces: [Shader]
  };
  function BlurredBackgroundHelper_init$lambda(this$BlurredBackgroundHelper) {
    return function ($receiver, it) {
      return this$BlurredBackgroundHelper.copyTexData_0;
    };
  }
  function BlurredBackgroundHelper_init$lambda$lambda($receiver) {
    var $receiver_0 = $receiver.rectProps.defaults();
    $receiver_0.size.set_dleff0$(2.0, 2.0);
    $receiver_0.origin.set_y2kzbl$(-1.0, -1.0, 0.0);
    $receiver_0.fullTexCoords();
    $receiver.rect_e5k3t5$($receiver.rectProps);
    return Unit;
  }
  function BlurredBackgroundHelper_init$lambda_0($receiver) {
    $receiver.generator = BlurredBackgroundHelper_init$lambda$lambda;
    return Unit;
  }
  function BlurredBackgroundHelper_init$lambda$lambda_0($receiver) {
    var $receiver_0 = $receiver.rectProps.defaults();
    $receiver_0.size.set_dleff0$(2.0, 2.0);
    $receiver_0.origin.set_y2kzbl$(-1.0, -1.0, 0.0);
    $receiver_0.texCoordUpperLeft.set_dleff0$(0.0, 1.0);
    $receiver_0.texCoordUpperRight.set_dleff0$(1.0, 1.0);
    $receiver_0.texCoordLowerLeft.set_dleff0$(0.0, 0.0);
    $receiver_0.texCoordLowerRight.set_dleff0$(1.0, 0.0);
    $receiver.rect_e5k3t5$($receiver.rectProps);
    return Unit;
  }
  function BlurredBackgroundHelper_init$lambda_1($receiver) {
    $receiver.generator = BlurredBackgroundHelper_init$lambda$lambda_0;
    return Unit;
  }
  BlurredBackgroundHelper.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlurredBackgroundHelper',
    interfaces: [Disposable]
  };
  function ClipMethod() {
  }
  ClipMethod.prototype.getUniforms = function () {
    return emptyList();
  };
  ClipMethod.prototype.onBind_x4tdlw$ = function (node, ctx) {
  };
  ClipMethod.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ClipMethod',
    interfaces: [GlslGenerator$GlslInjector]
  };
  function NoClipping() {
    ClipMethod.call(this);
  }
  NoClipping.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NoClipping',
    interfaces: [ClipMethod]
  };
  function LocalClip() {
    ClipMethod.call(this);
  }
  LocalClip.prototype.vsAfterInput_kv1jfs$ = function (shaderProps, node, text, ctx) {
    text.append_gw00v9$(ctx.glCapabilities.glslDialect.vsOut + ' vec3 vClipPosLocal;' + '\n');
  };
  LocalClip.prototype.vsBeforeProj_kv1jfs$ = function (shaderProps, node, text, ctx) {
    text.append_gw00v9$('vClipPosLocal = position.xyz;\n');
  };
  LocalClip.prototype.fsAfterInput_kv1jfs$ = function (shaderProps, node, text, ctx) {
    text.append_gw00v9$(ctx.glCapabilities.glslDialect.fsIn + ' vec3 vClipPosLocal;' + '\n');
  };
  LocalClip.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LocalClip',
    interfaces: [ClipMethod]
  };
  function LocalPlaneClip(numPlanes) {
    LocalClip.call(this);
    this.numPlanes = numPlanes;
    this.uPlanes_0 = Uniform4fv_init('uClipPlanes', this.numPlanes);
  }
  Object.defineProperty(LocalPlaneClip.prototype, 'planes', {
    get: function () {
      return this.uPlanes_0.value;
    }
  });
  LocalPlaneClip.prototype.getUniforms = function () {
    return listOf_0(this.uPlanes_0);
  };
  LocalPlaneClip.prototype.fsBeforeSampling_kv1jfs$ = function (shaderProps, node, text, ctx) {
    var tmp$;
    text.append_gw00v9$('float minPlaneClipDist = 1.0;\n');
    tmp$ = this.numPlanes;
    for (var i = 0; i < tmp$; i++) {
      text.append_gw00v9$('minPlaneClipDist = min(minPlaneClipDist, dot(uClipPlanes[' + i + '].xyz, vClipPosLocal) - uClipPlanes[' + i + '].w);' + '\n');
    }
    text.append_gw00v9$('if (minPlaneClipDist < 0.0) { discard; }\n');
  };
  LocalPlaneClip.prototype.onBind_x4tdlw$ = function (node, ctx) {
    this.uPlanes_0.bind_aemszp$(ctx);
  };
  LocalPlaneClip.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LocalPlaneClip',
    interfaces: [LocalClip]
  };
  function LocalSphereClip() {
    LocalClip.call(this);
    this.uClipSphere_0 = new Uniform4f('uClipSphere');
    this.center = MutableVec3f_init();
    this.radius = 1.0;
  }
  LocalSphereClip.prototype.getUniforms = function () {
    return listOf_0(this.uClipSphere_0);
  };
  LocalSphereClip.prototype.fsBeforeSampling_kv1jfs$ = function (shaderProps, node, text, ctx) {
    text.append_gw00v9$('vec3 clipCenterDist = uClipSphere.xyz - vClipPosLocal;\n');
    text.append_gw00v9$('if (dot(clipCenterDist, clipCenterDist) > uClipSphere.w) { discard; }\n');
  };
  LocalSphereClip.prototype.onBind_x4tdlw$ = function (node, ctx) {
    this.uClipSphere_0.value.set_7b5o5w$(this.center.x, this.center.y, this.center.z, this.radius * this.radius);
    this.uClipSphere_0.bind_aemszp$(ctx);
  };
  LocalSphereClip.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LocalSphereClip',
    interfaces: [LocalClip]
  };
  function GlslGenerator() {
    GlslGenerator$Companion_getInstance();
    this.injectors = ArrayList_init_0();
    this.customUniforms = ArrayList_init_0();
    this.customAttributes = ArrayList_init_0();
    this.vsIn_5467de$_0 = this.vsIn_5467de$_0;
    this.vsOut_gj894f$_0 = this.vsOut_gj894f$_0;
    this.fsIn_4vdhvm$_0 = this.fsIn_4vdhvm$_0;
    this.fsOut_8yiatb$_0 = this.fsOut_8yiatb$_0;
    this.fsOutBody_rbmxbx$_0 = this.fsOutBody_rbmxbx$_0;
    this.texSampler_1a4zdf$_0 = this.texSampler_1a4zdf$_0;
  }
  function GlslGenerator$Companion() {
    GlslGenerator$Companion_instance = this;
    this.U_MVP_MATRIX = 'uMvpMatrix';
    this.U_MODEL_MATRIX = 'uModelMatrix';
    this.U_VIEW_MATRIX = 'uViewMatrix';
    this.U_PROJ_MATRIX = 'uProjMatrix';
    this.U_LIGHT_DIRECTION = 'uLightDirection';
    this.U_LIGHT_COLOR = 'uLightColor';
    this.U_SHININESS = 'uShininess';
    this.U_SPECULAR_INTENSITY = 'uSpecularIntensity';
    this.U_CAMERA_POSITION = 'uCameraPosition';
    this.U_FOG_COLOR = 'uFogColor';
    this.U_FOG_RANGE = 'uFogRange';
    this.U_TEXTURE_0 = 'uTexture0';
    this.U_STATIC_COLOR = 'uStaticColor';
    this.U_ALPHA = 'uAlpha';
    this.U_SATURATION = 'uSaturation';
    this.U_BONES = 'uBones';
    this.U_SHADOW_MVP = 'uShadowMvp';
    this.U_SHADOW_TEX = 'uShadowTex';
    this.U_SHADOW_TEX_SZ = 'uShadowTexSz';
    this.U_CLIP_SPACE_FAR_Z = 'uClipSpaceFarZ';
    this.U_NORMAL_MAP_0 = 'uNormalMap0';
    this.U_ENVIRONMENT_MAP = 'uEnvironmentMap';
    this.U_REFLECTIVENESS = 'uReflectivity';
    this.V_TEX_COORD = 'vTexCoord';
    this.V_EYE_DIRECTION = 'vEyeDirection_cameraspace';
    this.V_LIGHT_DIRECTION = 'vLightDirection_cameraspace';
    this.V_NORMAL = 'vNormal_cameraspace';
    this.V_NORMAL_WORLDSPACE = 'vNormalWorldspace';
    this.V_COLOR = 'vFragmentColor';
    this.V_DIFFUSE_LIGHT_COLOR = 'vDiffuseLightColor';
    this.V_SPECULAR_LIGHT_COLOR = 'vSpecularLightColor';
    this.V_POSITION_WORLDSPACE = 'vPositionWorldspace';
    this.V_POSITION_LIGHTSPACE = 'vPositionLightspace';
    this.V_POSITION_CLIPSPACE_Z = 'vPositionClipspaceZ';
    this.V_TANGENT = 'vTangent';
    this.L_VS_POSITION = 'position';
    this.L_FS_TEX_COORD = 'texUV';
    this.L_FS_TEX_COLOR = 'texColor';
    this.L_FS_VERTEX_COLOR = 'vertColor';
    this.L_FS_STATIC_COLOR = 'staticColor';
    this.L_FS_REFLECTIVITY = 'reflectivity';
  }
  GlslGenerator$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var GlslGenerator$Companion_instance = null;
  function GlslGenerator$Companion_getInstance() {
    if (GlslGenerator$Companion_instance === null) {
      new GlslGenerator$Companion();
    }
    return GlslGenerator$Companion_instance;
  }
  function GlslGenerator$GlslInjector() {
  }
  GlslGenerator$GlslInjector.prototype.vsHeader_kv1jfs$ = function (shaderProps, node, text, ctx) {
  };
  GlslGenerator$GlslInjector.prototype.vsAfterInput_kv1jfs$ = function (shaderProps, node, text, ctx) {
  };
  GlslGenerator$GlslInjector.prototype.vsBeforeProj_kv1jfs$ = function (shaderProps, node, text, ctx) {
  };
  GlslGenerator$GlslInjector.prototype.vsAfterProj_kv1jfs$ = function (shaderProps, node, text, ctx) {
  };
  GlslGenerator$GlslInjector.prototype.vsEnd_kv1jfs$ = function (shaderProps, node, text, ctx) {
  };
  GlslGenerator$GlslInjector.prototype.fsHeader_kv1jfs$ = function (shaderProps, node, text, ctx) {
  };
  GlslGenerator$GlslInjector.prototype.fsAfterInput_kv1jfs$ = function (shaderProps, node, text, ctx) {
  };
  GlslGenerator$GlslInjector.prototype.fsBeforeSampling_kv1jfs$ = function (shaderProps, node, text, ctx) {
  };
  GlslGenerator$GlslInjector.prototype.fsAfterSampling_kv1jfs$ = function (shaderProps, node, text, ctx) {
  };
  GlslGenerator$GlslInjector.prototype.fsAfterLighting_kv1jfs$ = function (shaderProps, node, text, ctx) {
  };
  GlslGenerator$GlslInjector.prototype.fsEnd_kv1jfs$ = function (shaderProps, node, text, ctx) {
  };
  GlslGenerator$GlslInjector.prototype.geomShader_kv1jfs$ = function (shaderProps, node, text, ctx) {
  };
  GlslGenerator$GlslInjector.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'GlslInjector',
    interfaces: []
  };
  Object.defineProperty(GlslGenerator.prototype, 'vsIn', {
    get: function () {
      if (this.vsIn_5467de$_0 == null)
        return throwUPAE('vsIn');
      return this.vsIn_5467de$_0;
    },
    set: function (vsIn) {
      this.vsIn_5467de$_0 = vsIn;
    }
  });
  Object.defineProperty(GlslGenerator.prototype, 'vsOut', {
    get: function () {
      if (this.vsOut_gj894f$_0 == null)
        return throwUPAE('vsOut');
      return this.vsOut_gj894f$_0;
    },
    set: function (vsOut) {
      this.vsOut_gj894f$_0 = vsOut;
    }
  });
  Object.defineProperty(GlslGenerator.prototype, 'fsIn', {
    get: function () {
      if (this.fsIn_4vdhvm$_0 == null)
        return throwUPAE('fsIn');
      return this.fsIn_4vdhvm$_0;
    },
    set: function (fsIn) {
      this.fsIn_4vdhvm$_0 = fsIn;
    }
  });
  Object.defineProperty(GlslGenerator.prototype, 'fsOut', {
    get: function () {
      if (this.fsOut_8yiatb$_0 == null)
        return throwUPAE('fsOut');
      return this.fsOut_8yiatb$_0;
    },
    set: function (fsOut) {
      this.fsOut_8yiatb$_0 = fsOut;
    }
  });
  Object.defineProperty(GlslGenerator.prototype, 'fsOutBody', {
    get: function () {
      if (this.fsOutBody_rbmxbx$_0 == null)
        return throwUPAE('fsOutBody');
      return this.fsOutBody_rbmxbx$_0;
    },
    set: function (fsOutBody) {
      this.fsOutBody_rbmxbx$_0 = fsOutBody;
    }
  });
  Object.defineProperty(GlslGenerator.prototype, 'texSampler', {
    get: function () {
      if (this.texSampler_1a4zdf$_0 == null)
        return throwUPAE('texSampler');
      return this.texSampler_1a4zdf$_0;
    },
    set: function (texSampler) {
      this.texSampler_1a4zdf$_0 = texSampler;
    }
  });
  GlslGenerator.prototype.generate_4v27xu$ = function (shaderProps, node, ctx) {
    this.vsIn = ctx.glCapabilities.glslDialect.vsIn;
    this.vsOut = ctx.glCapabilities.glslDialect.vsOut;
    this.fsIn = ctx.glCapabilities.glslDialect.fsIn;
    this.fsOut = ctx.glCapabilities.glslDialect.fragColorHead;
    this.fsOutBody = ctx.glCapabilities.glslDialect.fragColorBody;
    this.texSampler = ctx.glCapabilities.glslDialect.texSampler;
    return new Shader$Source(this.generateVertShader_lchxyh$_0(shaderProps, node, ctx), this.generateGeomShader_7agvf0$_0(shaderProps, node, ctx), this.generateFragShader_ms1zqi$_0(shaderProps, node, ctx));
  };
  GlslGenerator.prototype.generateVertShader_lchxyh$_0 = function (shaderProps, node, ctx) {
    var text = new StringBuilder(ctx.glCapabilities.glslDialect.version + '\n');
    var tmp$;
    tmp$ = this.injectors.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.vsHeader_kv1jfs$(shaderProps, node, text, ctx);
    }
    this.generateVertInputCode_921nlz$_0(shaderProps, node, text, ctx);
    this.generateVertBodyCode_x1mox5$_0(shaderProps, node, text, ctx);
    return text.toString();
  };
  GlslGenerator.prototype.generateFragShader_ms1zqi$_0 = function (shaderProps, node, ctx) {
    var text = new StringBuilder(ctx.glCapabilities.glslDialect.version + '\n');
    var tmp$;
    tmp$ = this.injectors.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.fsHeader_kv1jfs$(shaderProps, node, text, ctx);
    }
    this.generateFragInputCode_za72l4$_0(shaderProps, node, text, ctx);
    this.generateFragBodyCode_y9i40m$_0(shaderProps, node, text, ctx);
    return text.toString();
  };
  GlslGenerator.prototype.generateGeomShader_7agvf0$_0 = function (shaderProps, node, ctx) {
    var text = StringBuilder_init();
    var tmp$;
    tmp$ = this.injectors.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.geomShader_kv1jfs$(shaderProps, node, text, ctx);
    }
    var txt = text.toString();
    if (txt.length > 0 && !startsWith(txt, '#version')) {
      txt = ctx.glCapabilities.glslDialect.version + '\n' + txt;
    }
    return txt;
  };
  GlslGenerator.prototype.generateVertInputCode_921nlz$_0 = function (shaderProps, node, text, ctx) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    text.append_gw00v9$(this.vsIn + ' vec3 ' + Attribute$Companion_getInstance().POSITIONS.glslSrcName + ';' + '\n');
    text.append_gw00v9$('uniform mat4 uModelMatrix;\n');
    text.append_gw00v9$('uniform mat4 uViewMatrix;\n');
    text.append_gw00v9$('uniform mat4 uMvpMatrix;\n');
    if (shaderProps.isInstanced) {
      text.append_gw00v9$(this.vsIn + ' mat4 ' + InstancedMesh$Companion_getInstance().MODEL_INSTANCES_0.glslSrcName + ';' + '\n');
    }
    if (shaderProps.lightModel !== LightModel$NO_LIGHTING_getInstance()) {
      text.append_gw00v9$(this.vsIn + ' vec3 ' + Attribute$Companion_getInstance().NORMALS.glslSrcName + ';' + '\n');
      text.append_gw00v9$('uniform vec3 uLightDirection;\n');
      if (shaderProps.lightModel === LightModel$PHONG_LIGHTING_getInstance()) {
        text.append_gw00v9$(this.vsOut + ' vec3 ' + GlslGenerator$Companion_getInstance().V_EYE_DIRECTION + ';' + '\n');
        text.append_gw00v9$(this.vsOut + ' vec3 ' + GlslGenerator$Companion_getInstance().V_LIGHT_DIRECTION + ';' + '\n');
        text.append_gw00v9$(this.vsOut + ' vec3 ' + GlslGenerator$Companion_getInstance().V_NORMAL + ';' + '\n');
        if (shaderProps.isNormalMapped) {
          text.append_gw00v9$(this.vsIn + ' vec3 ' + Attribute$Companion_getInstance().TANGENTS.glslSrcName + ';' + '\n');
          text.append_gw00v9$(this.vsOut + ' vec3 ' + GlslGenerator$Companion_getInstance().V_TANGENT + ';' + '\n');
        }
      }
       else {
        text.append_gw00v9$('uniform vec3 uLightColor;\n');
        text.append_gw00v9$('uniform float uShininess;\n');
        text.append_gw00v9$('uniform float uSpecularIntensity;\n');
        text.append_gw00v9$(this.vsOut + ' vec3 ' + GlslGenerator$Companion_getInstance().V_DIFFUSE_LIGHT_COLOR + ';' + '\n');
        text.append_gw00v9$(this.vsOut + ' vec3 ' + GlslGenerator$Companion_getInstance().V_SPECULAR_LIGHT_COLOR + ';' + '\n');
      }
    }
    if (shaderProps.isTextureColor || shaderProps.isNormalMapped) {
      text.append_gw00v9$(this.vsIn + ' vec2 ' + Attribute$Companion_getInstance().TEXTURE_COORDS.glslSrcName + ';' + '\n');
      text.append_gw00v9$(this.vsOut + ' vec2 ' + GlslGenerator$Companion_getInstance().V_TEX_COORD + ';' + '\n');
    }
    if (shaderProps.isVertexColor) {
      text.append_gw00v9$(this.vsIn + ' vec4 ' + Attribute$Companion_getInstance().COLORS.glslSrcName + ';' + '\n');
      text.append_gw00v9$(this.vsOut + ' vec4 ' + GlslGenerator$Companion_getInstance().V_COLOR + ';' + '\n');
    }
    if (shaderProps.numBones > 0 && ctx.glCapabilities.shaderIntAttribs) {
      text.append_gw00v9$(this.vsIn + ' ivec4 ' + Armature$Companion_getInstance().BONE_INDICES.glslSrcName + ';' + '\n');
      text.append_gw00v9$(this.vsIn + ' vec4 ' + Armature$Companion_getInstance().BONE_WEIGHTS.glslSrcName + ';' + '\n');
      text.append_gw00v9$('uniform mat4 ' + GlslGenerator$Companion_getInstance().U_BONES + '[' + shaderProps.numBones + '];' + '\n');
    }
    var shadowMap = (tmp$_0 = (tmp$ = node.scene) != null ? tmp$.lighting : null) != null ? tmp$_0.shadowMap : null;
    if (shaderProps.isReceivingShadows && shadowMap != null) {
      text.append_gw00v9$('uniform mat4 ' + GlslGenerator$Companion_getInstance().U_SHADOW_MVP + '[' + shadowMap.numMaps + '];' + '\n');
      text.append_gw00v9$(this.vsOut + ' vec4 ' + GlslGenerator$Companion_getInstance().V_POSITION_LIGHTSPACE + '[' + shadowMap.numMaps + '];' + '\n');
      text.append_gw00v9$(this.vsOut + ' float ' + GlslGenerator$Companion_getInstance().V_POSITION_CLIPSPACE_Z + ';' + '\n');
    }
    var isFsNeedsWorldPos = shaderProps.fogModel !== FogModel$FOG_OFF_getInstance() || shaderProps.isEnvironmentMapped;
    if (isFsNeedsWorldPos) {
      text.append_gw00v9$(this.vsOut + ' vec3 ' + GlslGenerator$Companion_getInstance().V_POSITION_WORLDSPACE + ';' + '\n');
    }
    var isFsNeedsWorldNormal = shaderProps.isEnvironmentMapped;
    if (isFsNeedsWorldNormal) {
      text.append_gw00v9$(this.vsOut + ' vec3 ' + GlslGenerator$Companion_getInstance().V_NORMAL_WORLDSPACE + ';' + '\n');
    }
    tmp$_1 = this.customUniforms.iterator();
    while (tmp$_1.hasNext()) {
      var uniform = tmp$_1.next();
      text.append_gw00v9$('uniform ' + uniform.type + ' ' + uniform.name + ';' + '\n');
    }
    tmp$_2 = this.customAttributes.iterator();
    while (tmp$_2.hasNext()) {
      var attrib = tmp$_2.next();
      text.append_gw00v9$(this.vsIn + ' ' + attrib.type.glslTypeName + ' ' + attrib.glslSrcName + ';' + '\n');
    }
    var tmp$_3;
    tmp$_3 = this.injectors.iterator();
    while (tmp$_3.hasNext()) {
      var element = tmp$_3.next();
      element.vsAfterInput_kv1jfs$(shaderProps, node, text, ctx);
    }
  };
  GlslGenerator.prototype.generateVertBodyCode_x1mox5$_0 = function (shaderProps, node, text, ctx) {
    var tmp$, tmp$_0, tmp$_1;
    text.append_gw00v9$('\nvoid main() {\n');
    var mvpMat = GlslGenerator$Companion_getInstance().U_MVP_MATRIX;
    var modelMat = GlslGenerator$Companion_getInstance().U_MODEL_MATRIX;
    if (shaderProps.isInstanced) {
      mvpMat = 'mvpMatInst';
      text.append_gw00v9$('mat4 ' + mvpMat + ' = ' + GlslGenerator$Companion_getInstance().U_MVP_MATRIX + ' * ' + InstancedMesh$Companion_getInstance().MODEL_INSTANCES_0.glslSrcName + ';' + '\n');
      modelMat = 'modelMatInst';
      text.append_gw00v9$('mat4 ' + modelMat + ' = ' + GlslGenerator$Companion_getInstance().U_MODEL_MATRIX + ' * ' + InstancedMesh$Companion_getInstance().MODEL_INSTANCES_0.glslSrcName + ';' + '\n');
    }
    text.append_gw00v9$('vec4 ' + GlslGenerator$Companion_getInstance().L_VS_POSITION + ' = vec4(' + Attribute$Companion_getInstance().POSITIONS + ', 1.0);' + '\n');
    if (shaderProps.lightModel !== LightModel$NO_LIGHTING_getInstance()) {
      text.append_gw00v9$('vec4 normal = vec4(' + Attribute$Companion_getInstance().NORMALS + ', 0.0);' + '\n');
      if (shaderProps.isNormalMapped) {
        text.append_gw00v9$('vec4 tangent = vec4(' + Attribute$Companion_getInstance().TANGENTS + ', 0.0);' + '\n');
      }
    }
    var tmp$_2;
    tmp$_2 = this.injectors.iterator();
    while (tmp$_2.hasNext()) {
      var element = tmp$_2.next();
      element.vsBeforeProj_kv1jfs$(shaderProps, node, text, ctx);
    }
    if (shaderProps.numBones > 0 && ctx.glCapabilities.shaderIntAttribs) {
      text.append_gw00v9$('mat4 boneT = ' + GlslGenerator$Companion_getInstance().U_BONES + '[' + Armature$Companion_getInstance().BONE_INDICES + '[0]] * ' + Armature$Companion_getInstance().BONE_WEIGHTS + '[0];' + '\n');
      text.append_gw00v9$('boneT += ' + GlslGenerator$Companion_getInstance().U_BONES + '[' + Armature$Companion_getInstance().BONE_INDICES + '[1]] * ' + Armature$Companion_getInstance().BONE_WEIGHTS + '[1];' + '\n');
      text.append_gw00v9$('boneT += ' + GlslGenerator$Companion_getInstance().U_BONES + '[' + Armature$Companion_getInstance().BONE_INDICES + '[2]] * ' + Armature$Companion_getInstance().BONE_WEIGHTS + '[2];' + '\n');
      text.append_gw00v9$('boneT += ' + GlslGenerator$Companion_getInstance().U_BONES + '[' + Armature$Companion_getInstance().BONE_INDICES + '[3]] * ' + Armature$Companion_getInstance().BONE_WEIGHTS + '[3];' + '\n');
      text.append_gw00v9$('position = boneT * position;\n');
      if (shaderProps.lightModel !== LightModel$NO_LIGHTING_getInstance()) {
        text.append_gw00v9$('normal = boneT * normal;\n');
        if (shaderProps.isNormalMapped) {
          text.append_gw00v9$('tangent = boneT * tangent;\n');
        }
      }
    }
    text.append_gw00v9$('gl_Position = ' + mvpMat + ' * ' + GlslGenerator$Companion_getInstance().L_VS_POSITION + ';' + '\n');
    var tmp$_3;
    tmp$_3 = this.injectors.iterator();
    while (tmp$_3.hasNext()) {
      var element_0 = tmp$_3.next();
      element_0.vsAfterProj_kv1jfs$(shaderProps, node, text, ctx);
    }
    var shadowMap = (tmp$_0 = (tmp$ = node.scene) != null ? tmp$.lighting : null) != null ? tmp$_0.shadowMap : null;
    if (shaderProps.isReceivingShadows && shadowMap != null) {
      tmp$_1 = shadowMap.numMaps;
      for (var i = 0; i < tmp$_1; i++) {
        text.append_gw00v9$(GlslGenerator$Companion_getInstance().V_POSITION_LIGHTSPACE + '[' + i + '] = ' + GlslGenerator$Companion_getInstance().U_SHADOW_MVP + '[' + i + '] * (' + modelMat + ' * ' + GlslGenerator$Companion_getInstance().L_VS_POSITION + ');' + '\n');
      }
      text.append_gw00v9$('vPositionClipspaceZ = gl_Position.z;\n');
    }
    var isFsNeedsWorldPos = shaderProps.fogModel !== FogModel$FOG_OFF_getInstance() || shaderProps.isEnvironmentMapped;
    if (isFsNeedsWorldPos) {
      text.append_gw00v9$(GlslGenerator$Companion_getInstance().V_POSITION_WORLDSPACE + ' = (' + modelMat + ' * ' + GlslGenerator$Companion_getInstance().L_VS_POSITION + ').xyz;' + '\n');
    }
    var isFsNeedsWorldNormal = shaderProps.isEnvironmentMapped;
    if (isFsNeedsWorldNormal) {
      text.append_gw00v9$(GlslGenerator$Companion_getInstance().V_NORMAL_WORLDSPACE + ' = (' + modelMat + ' * normal).xyz;' + '\n');
    }
    if (shaderProps.isTextureColor || shaderProps.isNormalMapped) {
      text.append_gw00v9$(GlslGenerator$Companion_getInstance().V_TEX_COORD + ' = ' + Attribute$Companion_getInstance().TEXTURE_COORDS.glslSrcName + ';' + '\n');
    }
    if (shaderProps.isVertexColor) {
      text.append_gw00v9$(GlslGenerator$Companion_getInstance().V_COLOR + ' = ' + Attribute$Companion_getInstance().COLORS.glslSrcName + ';' + '\n');
    }
    if (shaderProps.lightModel === LightModel$PHONG_LIGHTING_getInstance()) {
      text.append_gw00v9$(GlslGenerator$Companion_getInstance().V_EYE_DIRECTION + ' = -(' + GlslGenerator$Companion_getInstance().U_VIEW_MATRIX + ' * (' + modelMat + ' * ' + GlslGenerator$Companion_getInstance().L_VS_POSITION + ')).xyz;' + '\n');
      text.append_gw00v9$('vLightDirection_cameraspace = (uViewMatrix * vec4(uLightDirection, 0.0)).xyz;\n');
      text.append_gw00v9$(GlslGenerator$Companion_getInstance().V_NORMAL + ' = (' + GlslGenerator$Companion_getInstance().U_VIEW_MATRIX + ' * (' + modelMat + ' * normal)).xyz;' + '\n');
      if (shaderProps.isNormalMapped) {
        text.append_gw00v9$(GlslGenerator$Companion_getInstance().V_TANGENT + ' = (' + GlslGenerator$Companion_getInstance().U_VIEW_MATRIX + ' * (' + modelMat + ' * tangent)).xyz;' + '\n');
      }
    }
     else if (shaderProps.lightModel === LightModel$GOURAUD_LIGHTING_getInstance()) {
      text.append_gw00v9$('vec3 e = normalize(-(' + GlslGenerator$Companion_getInstance().U_VIEW_MATRIX + ' * (' + modelMat + ' * ' + GlslGenerator$Companion_getInstance().L_VS_POSITION + ')).xyz);' + '\n');
      text.append_gw00v9$('vec3 l = normalize((uViewMatrix * vec4(uLightDirection, 0.0)).xyz);\n');
      text.append_gw00v9$('vec3 n = normalize((' + GlslGenerator$Companion_getInstance().U_VIEW_MATRIX + ' * (' + modelMat + ' * normal)).xyz);' + '\n');
      text.append_gw00v9$('float cosTheta = clamp(dot(n, l), 0.0, 1.0);\n');
      text.append_gw00v9$('vec3 r = reflect(-l, n);\n');
      text.append_gw00v9$('float cosAlpha = clamp(dot(e, r), 0.0, 1.0);\n');
      text.append_gw00v9$('vDiffuseLightColor = uLightColor * cosTheta;\n');
      text.append_gw00v9$('vSpecularLightColor = uLightColor * uSpecularIntensity * pow(cosAlpha, uShininess);\n');
    }
    var tmp$_4;
    tmp$_4 = this.injectors.iterator();
    while (tmp$_4.hasNext()) {
      var element_1 = tmp$_4.next();
      element_1.vsEnd_kv1jfs$(shaderProps, node, text, ctx);
    }
    text.append_gw00v9$('}\n');
  };
  GlslGenerator.prototype.generateFragInputCode_za72l4$_0 = function (shaderProps, node, text, ctx) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    text.append_gw00v9$('precision highp float;\n');
    text.append_gw00v9$('uniform mat4 uViewMatrix;\n');
    if (shaderProps.isAlpha) {
      text.append_gw00v9$('uniform float uAlpha;\n');
    }
    if (shaderProps.isSaturation) {
      text.append_gw00v9$('uniform float uSaturation;\n');
    }
    if (shaderProps.lightModel === LightModel$PHONG_LIGHTING_getInstance()) {
      text.append_gw00v9$('uniform vec3 uLightColor;\n');
      text.append_gw00v9$('uniform float uShininess;\n');
      text.append_gw00v9$('uniform float uSpecularIntensity;\n');
      text.append_gw00v9$(this.fsIn + ' vec3 ' + GlslGenerator$Companion_getInstance().V_EYE_DIRECTION + ';' + '\n');
      text.append_gw00v9$(this.fsIn + ' vec3 ' + GlslGenerator$Companion_getInstance().V_LIGHT_DIRECTION + ';' + '\n');
      text.append_gw00v9$(this.fsIn + ' vec3 ' + GlslGenerator$Companion_getInstance().V_NORMAL + ';' + '\n');
      if (shaderProps.isNormalMapped) {
        text.append_gw00v9$('uniform sampler2D uNormalMap0;\n');
        text.append_gw00v9$(this.fsIn + ' vec3 ' + GlslGenerator$Companion_getInstance().V_TANGENT + ';' + '\n');
      }
    }
     else if (shaderProps.lightModel === LightModel$GOURAUD_LIGHTING_getInstance()) {
      text.append_gw00v9$(this.fsIn + ' vec3 ' + GlslGenerator$Companion_getInstance().V_DIFFUSE_LIGHT_COLOR + ';' + '\n');
      text.append_gw00v9$(this.fsIn + ' vec3 ' + GlslGenerator$Companion_getInstance().V_SPECULAR_LIGHT_COLOR + ';' + '\n');
    }
    if (shaderProps.isTextureColor) {
      text.append_gw00v9$('uniform sampler2D uTexture0;\n');
      text.append_gw00v9$(this.fsIn + ' vec2 ' + GlslGenerator$Companion_getInstance().V_TEX_COORD + ';' + '\n');
    }
     else if (shaderProps.isNormalMapped) {
      text.append_gw00v9$(this.fsIn + ' vec2 ' + GlslGenerator$Companion_getInstance().V_TEX_COORD + ';' + '\n');
    }
    if (shaderProps.isVertexColor) {
      text.append_gw00v9$(this.fsIn + ' vec4 ' + GlslGenerator$Companion_getInstance().V_COLOR + ';' + '\n');
    }
    if (shaderProps.isStaticColor) {
      text.append_gw00v9$('uniform vec4 uStaticColor;\n');
    }
    var shadowMap = (tmp$_0 = (tmp$ = node.scene) != null ? tmp$.lighting : null) != null ? tmp$_0.shadowMap : null;
    if (shaderProps.isReceivingShadows && shadowMap != null) {
      text.append_gw00v9$(this.fsIn + ' vec4 ' + GlslGenerator$Companion_getInstance().V_POSITION_LIGHTSPACE + '[' + shadowMap.numMaps + '];' + '\n');
      text.append_gw00v9$(this.fsIn + ' float ' + GlslGenerator$Companion_getInstance().V_POSITION_CLIPSPACE_Z + ';' + '\n');
      tmp$_1 = shadowMap.numMaps;
      for (var i = 0; i < tmp$_1; i++) {
        text.append_gw00v9$('uniform sampler2D ' + GlslGenerator$Companion_getInstance().U_SHADOW_TEX + '_' + i + ';' + '\n');
      }
      text.append_gw00v9$('uniform int ' + GlslGenerator$Companion_getInstance().U_SHADOW_TEX_SZ + '[' + shadowMap.numMaps + '];' + '\n');
      text.append_gw00v9$('uniform float ' + GlslGenerator$Companion_getInstance().U_CLIP_SPACE_FAR_Z + '[' + shadowMap.numMaps + '];' + '\n');
    }
    var isFsNeedsWorldPos = shaderProps.fogModel !== FogModel$FOG_OFF_getInstance() || shaderProps.isEnvironmentMapped;
    if (isFsNeedsWorldPos) {
      text.append_gw00v9$(this.fsIn + ' vec3 ' + GlslGenerator$Companion_getInstance().V_POSITION_WORLDSPACE + ';' + '\n');
    }
    var isFsNeedsWorldNormal = shaderProps.isEnvironmentMapped;
    if (isFsNeedsWorldNormal) {
      text.append_gw00v9$(this.fsIn + ' vec3 ' + GlslGenerator$Companion_getInstance().V_NORMAL_WORLDSPACE + ';' + '\n' + '\n');
    }
    var isFsNeedsCamPos = shaderProps.fogModel !== FogModel$FOG_OFF_getInstance() || shaderProps.isEnvironmentMapped;
    if (isFsNeedsCamPos) {
      text.append_gw00v9$('uniform vec3 uCameraPosition;\n');
    }
    if (shaderProps.isEnvironmentMapped) {
      text.append_gw00v9$('uniform float uReflectivity;\n');
      text.append_gw00v9$('uniform samplerCube uEnvironmentMap;\n');
    }
    if (shaderProps.fogModel !== FogModel$FOG_OFF_getInstance()) {
      text.append_gw00v9$('uniform vec4 uFogColor;\n');
      text.append_gw00v9$('uniform float uFogRange;\n');
    }
    tmp$_2 = this.customUniforms.iterator();
    while (tmp$_2.hasNext()) {
      var uniform = tmp$_2.next();
      text.append_gw00v9$('uniform ' + uniform.type + ' ' + uniform.name + ';' + '\n');
    }
    text.append_gw00v9$(this.fsOut + '\n');
    var tmp$_3;
    tmp$_3 = this.injectors.iterator();
    while (tmp$_3.hasNext()) {
      var element = tmp$_3.next();
      element.fsAfterInput_kv1jfs$(shaderProps, node, text, ctx);
    }
  };
  function GlslGenerator$generateFragBodyCode$addSample(closure$text, this$GlslGenerator) {
    return function (x, y) {
      closure$text.append_gw00v9$('shadowMapDepth = ' + this$GlslGenerator.texSampler + '(shadowTex, projPos.xy + vec2(float(' + x + ') * off, float(' + y + ') * off)).x;' + '\n');
      closure$text.append_gw00v9$('factor += step(projPos.z + accLvl, shadowMapDepth);\n');
    };
  }
  GlslGenerator.prototype.generateFragBodyCode_y9i40m$_0 = function (shaderProps, node, text, ctx) {
    var tmp$, tmp$_0, tmp$_1;
    var shadowMap = (tmp$_0 = (tmp$ = node.scene) != null ? tmp$.lighting : null) != null ? tmp$_0.shadowMap : null;
    if (shaderProps.isReceivingShadows && shadowMap != null) {
      var addSample = GlslGenerator$generateFragBodyCode$addSample(text, this);
      text.append_gw00v9$('float calcShadowFactor(sampler2D shadowTex, vec3 projPos, float off, float accLvl) {\n');
      text.append_gw00v9$('  float factor = 0.0;\n');
      text.append_gw00v9$('  float shadowMapDepth = 0.0;\n');
      for (var y = -1; y <= 1; y++) {
        for (var x = -1; x <= 1; x++) {
          addSample(x, y);
        }
      }
      text.append_gw00v9$('  return factor / 9.0;\n');
      text.append_gw00v9$('}\n');
    }
    if (shaderProps.isNormalMapped) {
      text.append_gw00v9$('vec3 calcBumpedNormal() {\n');
      text.append_gw00v9$('  vec3 normal = normalize(vNormal_cameraspace);\n');
      text.append_gw00v9$('  vec3 tangent = normalize(vTangent);\n');
      text.append_gw00v9$('  tangent = normalize(tangent - dot(tangent, normal) * normal);\n');
      text.append_gw00v9$('  vec3 bitangent = cross(tangent, normal);\n');
      text.append_gw00v9$('  vec3 bumpMapNormal = ' + this.texSampler + '(' + GlslGenerator$Companion_getInstance().U_NORMAL_MAP_0 + ', ' + GlslGenerator$Companion_getInstance().V_TEX_COORD + ').xyz;' + '\n');
      text.append_gw00v9$('  bumpMapNormal = 2.0 * bumpMapNormal - vec3(1.0, 1.0, 1.0);\n');
      text.append_gw00v9$('  mat3 tbn = mat3(tangent, bitangent, normal);\n');
      text.append_gw00v9$('  return normalize(tbn * bumpMapNormal);\n');
      text.append_gw00v9$('}\n');
    }
    text.append_gw00v9$('\nvoid main() {\n');
    text.append_gw00v9$('float shadowFactor = 1.0;\n');
    if (shaderProps.isTextureColor) {
      text.append_gw00v9$('vec2 texUV = vTexCoord;\n');
    }
    if (shaderProps.isEnvironmentMapped) {
      text.append_gw00v9$('float reflectivity = uReflectivity;\n');
    }
    var tmp$_2;
    tmp$_2 = this.injectors.iterator();
    while (tmp$_2.hasNext()) {
      var element = tmp$_2.next();
      element.fsBeforeSampling_kv1jfs$(shaderProps, node, text, ctx);
    }
    if (shaderProps.isTextureColor) {
      text.append_gw00v9$('vec4 ' + GlslGenerator$Companion_getInstance().L_FS_TEX_COLOR + ' = ' + this.texSampler + '(' + GlslGenerator$Companion_getInstance().U_TEXTURE_0 + ', ' + GlslGenerator$Companion_getInstance().L_FS_TEX_COORD + ');' + '\n');
      if (!ctx.glCapabilities.premultipliedAlphaTextures) {
        text.append_gw00v9$('texColor.rgb *= texColor.a;\n');
      }
      text.append_gw00v9$(this.fsOutBody + ' = ' + GlslGenerator$Companion_getInstance().L_FS_TEX_COLOR + ';' + '\n');
    }
    if (shaderProps.isVertexColor) {
      text.append_gw00v9$('vec4 vertColor = vFragmentColor;\n');
      text.append_gw00v9$('vertColor.rgb *= vertColor.a;\n');
      text.append_gw00v9$(this.fsOutBody + ' = ' + GlslGenerator$Companion_getInstance().L_FS_VERTEX_COLOR + ';' + '\n');
    }
    if (shaderProps.isStaticColor) {
      text.append_gw00v9$('vec4 staticColor = uStaticColor;\n');
      text.append_gw00v9$('staticColor.rgb *= staticColor.a;\n');
      text.append_gw00v9$(this.fsOutBody + ' = ' + GlslGenerator$Companion_getInstance().L_FS_STATIC_COLOR + ';' + '\n');
    }
    var tmp$_3;
    tmp$_3 = this.injectors.iterator();
    while (tmp$_3.hasNext()) {
      var element_0 = tmp$_3.next();
      element_0.fsAfterSampling_kv1jfs$(shaderProps, node, text, ctx);
    }
    if (shaderProps.isDiscardTranslucent) {
      text.append_gw00v9$('if (' + this.fsOutBody + '.a == 0.0) { discard; }');
    }
    if (shaderProps.isReceivingShadows && shadowMap != null) {
      tmp$_1 = shadowMap.numMaps;
      for (var i = 0; i < tmp$_1; i++) {
        text.append_gw00v9$('if (' + GlslGenerator$Companion_getInstance().V_POSITION_CLIPSPACE_Z + ' <= ' + GlslGenerator$Companion_getInstance().U_CLIP_SPACE_FAR_Z + '[' + i + ']) {' + '\n');
        text.append_gw00v9$('  vec3 projPos = ' + GlslGenerator$Companion_getInstance().V_POSITION_LIGHTSPACE + '[' + i + '].xyz / ' + GlslGenerator$Companion_getInstance().V_POSITION_LIGHTSPACE + '[' + i + '].w;' + '\n');
        text.append_gw00v9$('  float off = 1.0 / float(' + GlslGenerator$Companion_getInstance().U_SHADOW_TEX_SZ + '[' + i + ']);' + '\n');
        text.append_gw00v9$('  shadowFactor = calcShadowFactor(' + GlslGenerator$Companion_getInstance().U_SHADOW_TEX + '_' + i + ', projPos, off, ' + shaderProps.shadowDepthOffset + ');' + '\n');
        text.append_gw00v9$('}\n');
        if (i < (shadowMap.numMaps - 1 | 0)) {
          text.append_gw00v9$('else ');
        }
      }
      text.append_gw00v9$(this.fsOutBody + '.rgb *= shadowFactor / 2.0 + 0.5;' + '\n');
    }
    if (shaderProps.lightModel !== LightModel$NO_LIGHTING_getInstance()) {
      if (shaderProps.lightModel === LightModel$PHONG_LIGHTING_getInstance()) {
        text.append_gw00v9$('vec3 e = normalize(vEyeDirection_cameraspace);\n');
        text.append_gw00v9$('vec3 l = normalize(vLightDirection_cameraspace);\n');
        if (shaderProps.isNormalMapped) {
          text.append_gw00v9$('vec3 n = calcBumpedNormal();\n');
        }
         else {
          text.append_gw00v9$('vec3 n = normalize(vNormal_cameraspace);\n');
        }
        if (!shaderProps.isTwoSidedLighting) {
          text.append_gw00v9$('float cosTheta = clamp(dot(n, l), 0.0, 1.0);\n');
        }
         else {
          text.append_gw00v9$('float cosTheta = abs(dot(n, l));\n');
        }
        text.append_gw00v9$('vec3 r = reflect(-l, n);\n');
        text.append_gw00v9$('float cosAlpha = clamp(dot(e, r), 0.0, 1.0);\n');
        text.append_gw00v9$('vec3 materialAmbientColor = ' + this.fsOutBody + '.rgb * ' + shaderProps.ambientColorBrightness + ';' + '\n');
        text.append_gw00v9$('vec3 materialDiffuseColor = ' + this.fsOutBody + '.rgb * ' + GlslGenerator$Companion_getInstance().U_LIGHT_COLOR + ' * cosTheta;' + '\n');
        text.append_gw00v9$('vec3 materialSpecularColor = ' + GlslGenerator$Companion_getInstance().U_LIGHT_COLOR + ' * ' + GlslGenerator$Companion_getInstance().U_SPECULAR_INTENSITY + ' * pow(cosAlpha, ' + GlslGenerator$Companion_getInstance().U_SHININESS + ') * ' + this.fsOutBody + '.a * shadowFactor;' + '\n');
      }
       else if (shaderProps.lightModel === LightModel$GOURAUD_LIGHTING_getInstance()) {
        text.append_gw00v9$('vec3 materialAmbientColor = ' + this.fsOutBody + '.rgb * ' + shaderProps.ambientColorBrightness + ';' + '\n');
        text.append_gw00v9$('vec3 materialDiffuseColor = ' + this.fsOutBody + '.rgb * ' + GlslGenerator$Companion_getInstance().V_DIFFUSE_LIGHT_COLOR + ';' + '\n');
        text.append_gw00v9$('vec3 materialSpecularColor = ' + GlslGenerator$Companion_getInstance().V_SPECULAR_LIGHT_COLOR + ' * ' + this.fsOutBody + '.a * shadowFactor;' + '\n');
      }
      text.append_gw00v9$(this.fsOutBody + '.rgb = materialAmbientColor + materialDiffuseColor + materialSpecularColor;' + '\n');
    }
    var tmp$_4;
    tmp$_4 = this.injectors.iterator();
    while (tmp$_4.hasNext()) {
      var element_1 = tmp$_4.next();
      element_1.fsAfterLighting_kv1jfs$(shaderProps, node, text, ctx);
    }
    if (shaderProps.isEnvironmentMapped) {
      text.append_gw00v9$('vec3 eyeDir = normalize(vPositionWorldspace - uCameraPosition);\n');
      text.append_gw00v9$('vec3 reflectedDir = reflect(eyeDir, normalize(vNormalWorldspace));\n');
      text.append_gw00v9$(this.fsOutBody + '.rgb = mix(' + this.fsOutBody + '.rgb , texture(' + GlslGenerator$Companion_getInstance().U_ENVIRONMENT_MAP + ', reflectedDir).rgb, ' + GlslGenerator$Companion_getInstance().L_FS_REFLECTIVITY + ');' + '\n');
    }
    if (shaderProps.fogModel !== FogModel$FOG_OFF_getInstance()) {
      text.append_gw00v9$('float d = 1.0 - clamp(length(uCameraPosition - vPositionWorldspace / uFogRange), 0.0, 1.0);\n');
      text.append_gw00v9$(this.fsOutBody + '.rgb = mix(' + GlslGenerator$Companion_getInstance().U_FOG_COLOR + '.rgb, ' + this.fsOutBody + '.rgb, d * d * ' + GlslGenerator$Companion_getInstance().U_FOG_COLOR + '.a);' + '\n');
    }
    if (shaderProps.isAlpha) {
      text.append_gw00v9$(this.fsOutBody + ' *= ' + GlslGenerator$Companion_getInstance().U_ALPHA + ';' + '\n');
    }
    if (shaderProps.isSaturation) {
      text.append_gw00v9$('float avgColor = (' + this.fsOutBody + '.r + ' + this.fsOutBody + '.g + ' + this.fsOutBody + '.b) * 0.333;' + '\n');
      text.append_gw00v9$(this.fsOutBody + '.rgb = mix(vec3(avgColor), ' + this.fsOutBody + '.rgb, ' + GlslGenerator$Companion_getInstance().U_SATURATION + ');' + '\n');
    }
    var tmp$_5;
    tmp$_5 = this.injectors.iterator();
    while (tmp$_5.hasNext()) {
      var element_2 = tmp$_5.next();
      element_2.fsEnd_kv1jfs$(shaderProps, node, text, ctx);
    }
    text.append_gw00v9$('}\n');
  };
  GlslGenerator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GlslGenerator',
    interfaces: []
  };
  function Shader() {
    GlObject.call(this);
    this.source_ow0gcj$_0 = new Shader$Source('', '', '');
    this.attributeLocations = ArrayList_init_0();
    this.attributes = LinkedHashSet_init();
    this.uniforms = LinkedHashMap_init();
  }
  Object.defineProperty(Shader.prototype, 'source', {
    get: function () {
      return this.source_ow0gcj$_0;
    },
    set: function (source) {
      this.source_ow0gcj$_0 = source;
    }
  });
  function Shader$Source(vertexSrc, geometrySrc, fragmentSrc) {
    this.vertexSrc = vertexSrc;
    this.geometrySrc = geometrySrc;
    this.fragmentSrc = fragmentSrc;
  }
  Shader$Source.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Source',
    interfaces: []
  };
  function Shader$Shader$Source_init(vertexSrc, fragmentSrc, $this) {
    $this = $this || Object.create(Shader$Source.prototype);
    Shader$Source.call($this, vertexSrc, '', fragmentSrc);
    return $this;
  }
  Shader$Source.prototype.component1 = function () {
    return this.vertexSrc;
  };
  Shader$Source.prototype.component2 = function () {
    return this.geometrySrc;
  };
  Shader$Source.prototype.component3 = function () {
    return this.fragmentSrc;
  };
  Shader$Source.prototype.copy_6hosri$ = function (vertexSrc, geometrySrc, fragmentSrc) {
    return new Shader$Source(vertexSrc === void 0 ? this.vertexSrc : vertexSrc, geometrySrc === void 0 ? this.geometrySrc : geometrySrc, fragmentSrc === void 0 ? this.fragmentSrc : fragmentSrc);
  };
  Shader$Source.prototype.toString = function () {
    return 'Source(vertexSrc=' + Kotlin.toString(this.vertexSrc) + (', geometrySrc=' + Kotlin.toString(this.geometrySrc)) + (', fragmentSrc=' + Kotlin.toString(this.fragmentSrc)) + ')';
  };
  Shader$Source.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.vertexSrc) | 0;
    result = result * 31 + Kotlin.hashCode(this.geometrySrc) | 0;
    result = result * 31 + Kotlin.hashCode(this.fragmentSrc) | 0;
    return result;
  };
  Shader$Source.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.vertexSrc, other.vertexSrc) && Kotlin.equals(this.geometrySrc, other.geometrySrc) && Kotlin.equals(this.fragmentSrc, other.fragmentSrc)))));
  };
  function Shader$AttributeLocation(descr, location) {
    this.descr = descr;
    this.location = location;
  }
  Shader$AttributeLocation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AttributeLocation',
    interfaces: []
  };
  Shader$AttributeLocation.prototype.component1 = function () {
    return this.descr;
  };
  Shader$AttributeLocation.prototype.component2 = function () {
    return this.location;
  };
  Shader$AttributeLocation.prototype.copy_myfgg1$ = function (descr, location) {
    return new Shader$AttributeLocation(descr === void 0 ? this.descr : descr, location === void 0 ? this.location : location);
  };
  Shader$AttributeLocation.prototype.toString = function () {
    return 'AttributeLocation(descr=' + Kotlin.toString(this.descr) + (', location=' + Kotlin.toString(this.location)) + ')';
  };
  Shader$AttributeLocation.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.descr) | 0;
    result = result * 31 + Kotlin.hashCode(this.location) | 0;
    return result;
  };
  Shader$AttributeLocation.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.descr, other.descr) && Kotlin.equals(this.location, other.location)))));
  };
  Shader.prototype.isBound_aemszp$ = function (ctx) {
    return ctx.shaderMgr.boundShader === this;
  };
  Shader.prototype.onLoad_x4tdlw$ = function (node, ctx) {
    var tmp$, tmp$_0;
    this.generate_x4tdlw$(node, ctx);
    this.res = ctx.shaderMgr.createShader_2ouvod$(this.source, ctx);
    this.attributeLocations.clear();
    tmp$ = this.attributes.iterator();
    while (tmp$.hasNext()) {
      var attrib = tmp$.next();
      this.enableAttribute_kkd4zf$_0(attrib, ctx);
    }
    tmp$_0 = this.uniforms.values.iterator();
    while (tmp$_0.hasNext()) {
      var uniform = tmp$_0.next();
      uniform.location = this.findUniformLocation_vvp3il$(uniform.name, ctx);
    }
  };
  Shader.prototype.findAttributeLocation_vvp3il$ = function (attribName, ctx) {
    var ref = this.res;
    return ref != null ? glGetAttribLocation(ref, attribName) : -1;
  };
  Shader.prototype.enableAttribute_kkd4zf$_0 = function (attribute, ctx) {
    var location = this.findAttributeLocation_vvp3il$(attribute.glslSrcName, ctx);
    if (location >= 0) {
      this.enableAttribute_20dp5u$_0(attribute, location + attribute.locationOffset | 0);
    }
    return location >= 0;
  };
  Shader.prototype.enableAttribute_20dp5u$_0 = function (attribute, location) {
    if (location >= 0) {
      this.attributeLocations.add_11rb$(new Shader$AttributeLocation(attribute, location));
    }
  };
  Shader.prototype.addUniform_1ybs2r$ = function (uniform) {
    var $receiver = this.uniforms;
    var key = uniform.name;
    $receiver.put_xwzc9p$(key, uniform);
    return uniform;
  };
  Shader.prototype.getUniform_7yby8k$ = defineInlineFunction('kool.de.fabmax.kool.shading.Shader.getUniform_7yby8k$', function (U_0, isU, name) {
    var tmp$;
    return isU(tmp$ = this.uniforms.get_11rb$(name)) ? tmp$ : null;
  });
  Shader.prototype.addUniform_xb83l5$ = function (uniform) {
    var $receiver = this.uniforms;
    var key = uniform.name;
    $receiver.put_xwzc9p$(key, uniform);
  };
  Shader.prototype.findUniformLocation_vvp3il$ = function (uniformName, ctx) {
    var ref = this.res;
    if (ref != null) {
      return glGetUniformLocation(ref, uniformName);
    }
     else {
      return null;
    }
  };
  Shader.prototype.bindMesh_sbx4mf$ = function (mesh, ctx) {
    var tmp$;
    tmp$ = this.attributeLocations;
    for (var i = 0; i !== tmp$.size; ++i) {
      var tmp$_0;
      var attrib = this.attributeLocations.get_za3lpa$(i);
      tmp$_0 = mesh.getAttributeBinder_mczodr$(attrib.descr);
      if (tmp$_0 == null) {
        throw KoolException_init('Mesh must supply an attribute binder for attribute ' + attrib.descr.name);
      }
      var binder = tmp$_0;
      glEnableVertexAttribArray(attrib.location);
      binder.bindAttribute_2shagh$(attrib.location, ctx);
      if (attrib.descr.divisor > 0) {
        glVertexAttribDivisor(attrib.location, attrib.descr.divisor);
      }
    }
  };
  Shader.prototype.unbindMesh_aemszp$ = function (ctx) {
    var tmp$;
    tmp$ = this.attributeLocations;
    for (var i = 0; i !== tmp$.size; ++i) {
      var attrib = this.attributeLocations.get_za3lpa$(i);
      if (attrib.descr.divisor > 0) {
        glVertexAttribDivisor(attrib.location, 0);
      }
      glDisableVertexAttribArray(attrib.location);
    }
  };
  Shader.prototype.dispose_aemszp$ = function (ctx) {
    if (this.isValid) {
      ctx.shaderMgr.deleteShader_495nfo$(this, ctx);
      this.res = null;
    }
  };
  Shader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Shader',
    interfaces: [GlObject]
  };
  function LightModel(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function LightModel_initFields() {
    LightModel_initFields = function () {
    };
    LightModel$PHONG_LIGHTING_instance = new LightModel('PHONG_LIGHTING', 0);
    LightModel$GOURAUD_LIGHTING_instance = new LightModel('GOURAUD_LIGHTING', 1);
    LightModel$NO_LIGHTING_instance = new LightModel('NO_LIGHTING', 2);
  }
  var LightModel$PHONG_LIGHTING_instance;
  function LightModel$PHONG_LIGHTING_getInstance() {
    LightModel_initFields();
    return LightModel$PHONG_LIGHTING_instance;
  }
  var LightModel$GOURAUD_LIGHTING_instance;
  function LightModel$GOURAUD_LIGHTING_getInstance() {
    LightModel_initFields();
    return LightModel$GOURAUD_LIGHTING_instance;
  }
  var LightModel$NO_LIGHTING_instance;
  function LightModel$NO_LIGHTING_getInstance() {
    LightModel_initFields();
    return LightModel$NO_LIGHTING_instance;
  }
  LightModel.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LightModel',
    interfaces: [Enum]
  };
  function LightModel$values() {
    return [LightModel$PHONG_LIGHTING_getInstance(), LightModel$GOURAUD_LIGHTING_getInstance(), LightModel$NO_LIGHTING_getInstance()];
  }
  LightModel.values = LightModel$values;
  function LightModel$valueOf(name) {
    switch (name) {
      case 'PHONG_LIGHTING':
        return LightModel$PHONG_LIGHTING_getInstance();
      case 'GOURAUD_LIGHTING':
        return LightModel$GOURAUD_LIGHTING_getInstance();
      case 'NO_LIGHTING':
        return LightModel$NO_LIGHTING_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.shading.LightModel.' + name);
    }
  }
  LightModel.valueOf_61zpoe$ = LightModel$valueOf;
  function ColorModel(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ColorModel_initFields() {
    ColorModel_initFields = function () {
    };
    ColorModel$VERTEX_COLOR_instance = new ColorModel('VERTEX_COLOR', 0);
    ColorModel$TEXTURE_COLOR_instance = new ColorModel('TEXTURE_COLOR', 1);
    ColorModel$STATIC_COLOR_instance = new ColorModel('STATIC_COLOR', 2);
    ColorModel$CUSTOM_COLOR_instance = new ColorModel('CUSTOM_COLOR', 3);
  }
  var ColorModel$VERTEX_COLOR_instance;
  function ColorModel$VERTEX_COLOR_getInstance() {
    ColorModel_initFields();
    return ColorModel$VERTEX_COLOR_instance;
  }
  var ColorModel$TEXTURE_COLOR_instance;
  function ColorModel$TEXTURE_COLOR_getInstance() {
    ColorModel_initFields();
    return ColorModel$TEXTURE_COLOR_instance;
  }
  var ColorModel$STATIC_COLOR_instance;
  function ColorModel$STATIC_COLOR_getInstance() {
    ColorModel_initFields();
    return ColorModel$STATIC_COLOR_instance;
  }
  var ColorModel$CUSTOM_COLOR_instance;
  function ColorModel$CUSTOM_COLOR_getInstance() {
    ColorModel_initFields();
    return ColorModel$CUSTOM_COLOR_instance;
  }
  ColorModel.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ColorModel',
    interfaces: [Enum]
  };
  function ColorModel$values() {
    return [ColorModel$VERTEX_COLOR_getInstance(), ColorModel$TEXTURE_COLOR_getInstance(), ColorModel$STATIC_COLOR_getInstance(), ColorModel$CUSTOM_COLOR_getInstance()];
  }
  ColorModel.values = ColorModel$values;
  function ColorModel$valueOf(name) {
    switch (name) {
      case 'VERTEX_COLOR':
        return ColorModel$VERTEX_COLOR_getInstance();
      case 'TEXTURE_COLOR':
        return ColorModel$TEXTURE_COLOR_getInstance();
      case 'STATIC_COLOR':
        return ColorModel$STATIC_COLOR_getInstance();
      case 'CUSTOM_COLOR':
        return ColorModel$CUSTOM_COLOR_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.shading.ColorModel.' + name);
    }
  }
  ColorModel.valueOf_61zpoe$ = ColorModel$valueOf;
  function FogModel(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function FogModel_initFields() {
    FogModel_initFields = function () {
    };
    FogModel$FOG_OFF_instance = new FogModel('FOG_OFF', 0);
    FogModel$FOG_ON_instance = new FogModel('FOG_ON', 1);
  }
  var FogModel$FOG_OFF_instance;
  function FogModel$FOG_OFF_getInstance() {
    FogModel_initFields();
    return FogModel$FOG_OFF_instance;
  }
  var FogModel$FOG_ON_instance;
  function FogModel$FOG_ON_getInstance() {
    FogModel_initFields();
    return FogModel$FOG_ON_instance;
  }
  FogModel.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FogModel',
    interfaces: [Enum]
  };
  function FogModel$values() {
    return [FogModel$FOG_OFF_getInstance(), FogModel$FOG_ON_getInstance()];
  }
  FogModel.values = FogModel$values;
  function FogModel$valueOf(name) {
    switch (name) {
      case 'FOG_OFF':
        return FogModel$FOG_OFF_getInstance();
      case 'FOG_ON':
        return FogModel$FOG_ON_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.shading.FogModel.' + name);
    }
  }
  FogModel.valueOf_61zpoe$ = FogModel$valueOf;
  function ShaderProps() {
    this.lightModel = LightModel$PHONG_LIGHTING_getInstance();
    this.colorModel_3v9dr8$_0 = ColorModel$STATIC_COLOR_getInstance();
    this.fogModel = FogModel$FOG_OFF_getInstance();
    this.clipMethod = new NoClipping();
    this.isVertexColor = false;
    this.isTextureColor = false;
    this.isStaticColor = true;
    this.isTwoSidedLighting = false;
    this.isAlpha = false;
    this.isSaturation = false;
    this.isDiscardTranslucent = false;
    this.numBones = 0;
    this.isInstanced = false;
    this.shadowDepthOffset = 5.0E-4;
    this.isReceivingShadows = false;
    this.isNormalMapped = false;
    this.isEnvironmentMapped = false;
    this.ambientColorBrightness = 0.42;
    this.shininess = 20.0;
    this.specularIntensity = 0.75;
    this.reflectivity = 0.5;
    this.staticColor = Color$Companion_getInstance().BLACK;
    this.alpha = 1.0;
    this.saturation = 1.0;
    this.texture = null;
    this.normalMap = null;
    this.environmentMap = null;
  }
  Object.defineProperty(ShaderProps.prototype, 'colorModel', {
    get: function () {
      return this.colorModel_3v9dr8$_0;
    },
    set: function (value) {
      this.colorModel_3v9dr8$_0 = value;
      switch (value.name) {
        case 'VERTEX_COLOR':
          this.isVertexColor = true;
          this.isTextureColor = false;
          this.isStaticColor = false;
          break;
        case 'TEXTURE_COLOR':
          this.isVertexColor = false;
          this.isTextureColor = true;
          this.isStaticColor = false;
          break;
        case 'STATIC_COLOR':
          this.isVertexColor = false;
          this.isTextureColor = false;
          this.isStaticColor = true;
          break;
        case 'CUSTOM_COLOR':
          this.isVertexColor = false;
          this.isTextureColor = false;
          this.isStaticColor = false;
          break;
      }
    }
  });
  ShaderProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShaderProps',
    interfaces: []
  };
  function Uniform(name, value) {
    this.name = name;
    this.value_xe1c$_0 = value;
    this.location = null;
  }
  Object.defineProperty(Uniform.prototype, 'value', {
    get: function () {
      return this.value_xe1c$_0;
    },
    set: function (value) {
      this.value_xe1c$_0 = value;
    }
  });
  Object.defineProperty(Uniform.prototype, 'isValid', {
    get: function () {
      return isValidUniformLocation(this.location);
    }
  });
  Uniform.prototype.bind_aemszp$ = function (ctx) {
    if (this.isValid) {
      this.doBind_aemszp$(ctx);
    }
  };
  Uniform.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform',
    interfaces: []
  };
  function UniformTexture2D(name) {
    Uniform.call(this, name, null);
    this.type_1l8eyg$_0 = 'sampler2D';
    this.value_l616rz$_0 = null;
  }
  Object.defineProperty(UniformTexture2D.prototype, 'type', {
    get: function () {
      return this.type_1l8eyg$_0;
    }
  });
  Object.defineProperty(UniformTexture2D.prototype, 'value', {
    get: function () {
      return this.value_l616rz$_0;
    },
    set: function (value) {
      this.value_l616rz$_0 = value;
    }
  });
  UniformTexture2D.prototype.doBind_aemszp$ = function (ctx) {
    var tex = this.value;
    if (tex != null) {
      var unit = ctx.textureMgr.bindTexture_xyx3x4$(tex, ctx);
      if (tex.isValid && ensureNotNull(tex.res).isLoaded) {
        glUniform1i(this.location, unit);
      }
    }
     else {
      glUniform1i(this.location, 0);
    }
  };
  UniformTexture2D.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UniformTexture2D',
    interfaces: [Uniform]
  };
  function UniformTexture2Dv(name, size) {
    var array = Array_0(size);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = null;
    }
    Uniform.call(this, name, array);
    this.type_7edzmq$_0 = 'sampler2D';
    this.texNames_0 = new Int32Array(size);
  }
  Object.defineProperty(UniformTexture2Dv.prototype, 'type', {
    get: function () {
      return this.type_7edzmq$_0;
    }
  });
  UniformTexture2Dv.prototype.doBind_aemszp$ = function (ctx) {
    var tmp$;
    tmp$ = this.value;
    for (var i = 0; i !== tmp$.length; ++i) {
      var tmp$_0;
      var tex = this.value[i];
      if (tex != null) {
        tmp$_0 = ctx.textureMgr.bindTexture_xyx3x4$(tex, ctx);
      }
       else {
        tmp$_0 = 0;
      }
      this.texNames_0[i] = tmp$_0;
    }
    glUniform1iv(this.location, this.texNames_0);
  };
  UniformTexture2Dv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UniformTexture2Dv',
    interfaces: [Uniform]
  };
  function UniformTextureCubeMap(name) {
    Uniform.call(this, name, null);
    this.type_f4ahq3$_0 = 'samplerCube';
    this.value_t3l3wk$_0 = null;
  }
  Object.defineProperty(UniformTextureCubeMap.prototype, 'type', {
    get: function () {
      return this.type_f4ahq3$_0;
    }
  });
  Object.defineProperty(UniformTextureCubeMap.prototype, 'value', {
    get: function () {
      return this.value_t3l3wk$_0;
    },
    set: function (value) {
      this.value_t3l3wk$_0 = value;
    }
  });
  UniformTextureCubeMap.prototype.doBind_aemszp$ = function (ctx) {
    var tex = this.value;
    if (tex != null) {
      var unit = ctx.textureMgr.bindTexture_xyx3x4$(tex, ctx);
      if (tex.isValid && ensureNotNull(tex.res).isLoaded) {
        glUniform1i(this.location, unit);
      }
    }
     else {
      glUniform1i(this.location, 0);
    }
  };
  UniformTextureCubeMap.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UniformTextureCubeMap',
    interfaces: [Uniform]
  };
  function Uniform1i(name) {
    Uniform.call(this, name, new Int32Array(1));
    this.type_cwd6wh$_0 = 'int';
  }
  Object.defineProperty(Uniform1i.prototype, 'type', {
    get: function () {
      return this.type_cwd6wh$_0;
    }
  });
  Uniform1i.prototype.doBind_aemszp$ = function (ctx) {
    glUniform1i(this.location, this.value[0]);
  };
  Uniform1i.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform1i',
    interfaces: [Uniform]
  };
  function Uniform1iv(name) {
    Uniform.call(this, name, new Int32Array(0));
    this.type_2txs21$_0 = 'int';
  }
  Object.defineProperty(Uniform1iv.prototype, 'type', {
    get: function () {
      return this.type_2txs21$_0;
    }
  });
  Uniform1iv.prototype.setSize_za3lpa$ = function (size) {
    if (size !== this.value.length) {
      this.value = new Int32Array(size);
    }
  };
  Uniform1iv.prototype.doBind_aemszp$ = function (ctx) {
    glUniform1iv(this.location, this.value);
  };
  Uniform1iv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform1iv',
    interfaces: [Uniform]
  };
  function Uniform1f(name) {
    Uniform.call(this, name, new Float32Array(1));
    this.type_v4tnrm$_0 = 'float';
  }
  Object.defineProperty(Uniform1f.prototype, 'type', {
    get: function () {
      return this.type_v4tnrm$_0;
    }
  });
  Uniform1f.prototype.doBind_aemszp$ = function (ctx) {
    glUniform1f(this.location, this.value[0]);
  };
  Uniform1f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform1f',
    interfaces: [Uniform]
  };
  function Uniform1fv(name) {
    Uniform.call(this, name, new Float32Array(0));
    this.type_cltl5g$_0 = 'float';
  }
  Object.defineProperty(Uniform1fv.prototype, 'type', {
    get: function () {
      return this.type_cltl5g$_0;
    }
  });
  Uniform1fv.prototype.setSize_za3lpa$ = function (size) {
    if (size !== this.value.length) {
      this.value = new Float32Array(size);
    }
  };
  Uniform1fv.prototype.doBind_aemszp$ = function (ctx) {
    glUniform1fv(this.location, this.value);
  };
  Uniform1fv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform1fv',
    interfaces: [Uniform]
  };
  function Uniform2f(name) {
    Uniform.call(this, name, MutableVec2f_init());
    this.type_2b76pf$_0 = 'vec2';
  }
  Object.defineProperty(Uniform2f.prototype, 'type', {
    get: function () {
      return this.type_2b76pf$_0;
    }
  });
  Uniform2f.prototype.doBind_aemszp$ = function (ctx) {
    glUniform2f(this.location, this.value.x, this.value.y);
  };
  Uniform2f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform2f',
    interfaces: [Uniform]
  };
  function Uniform2fv(name) {
    Uniform.call(this, name, emptyList());
    this.buffer_0 = null;
  }
  Object.defineProperty(Uniform2fv.prototype, 'type', {
    get: function () {
      return 'vec2[' + this.value.size + ']';
    }
  });
  Uniform2fv.prototype.setSize_za3lpa$ = function (size) {
    if (size !== this.value.size) {
      this.buffer_0 = createFloat32Buffer(size * 2 | 0);
      var list = ArrayList_init(size);
      for (var index = 0; index < size; index++) {
        list.add_11rb$(new Vec2fView(ensureNotNull(this.buffer_0), index * 2 | 0));
      }
      this.value = list;
    }
  };
  Uniform2fv.prototype.doBind_aemszp$ = function (ctx) {
    var buf = this.buffer_0;
    if (buf != null) {
      glUniform4fv(this.location, buf);
    }
  };
  Uniform2fv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform2fv',
    interfaces: [Uniform]
  };
  function Uniform2fv_init(name, size, $this) {
    $this = $this || Object.create(Uniform2fv.prototype);
    Uniform2fv.call($this, name);
    $this.setSize_za3lpa$(size);
    return $this;
  }
  function Uniform3f(name) {
    Uniform.call(this, name, MutableVec3f_init());
    this.type_qifacs$_0 = 'vec3';
  }
  Object.defineProperty(Uniform3f.prototype, 'type', {
    get: function () {
      return this.type_qifacs$_0;
    }
  });
  Uniform3f.prototype.doBind_aemszp$ = function (ctx) {
    glUniform3f(this.location, this.value.x, this.value.y, this.value.z);
  };
  Uniform3f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform3f',
    interfaces: [Uniform]
  };
  function Uniform3fv(name) {
    Uniform.call(this, name, emptyList());
    this.buffer_0 = null;
  }
  Object.defineProperty(Uniform3fv.prototype, 'type', {
    get: function () {
      return 'vec3[' + this.value.size + ']';
    }
  });
  Uniform3fv.prototype.setSize_za3lpa$ = function (size) {
    if (size !== this.value.size) {
      this.buffer_0 = createFloat32Buffer(size * 3 | 0);
      var list = ArrayList_init(size);
      for (var index = 0; index < size; index++) {
        list.add_11rb$(new Vec3fView(ensureNotNull(this.buffer_0), index * 3 | 0));
      }
      this.value = list;
    }
  };
  Uniform3fv.prototype.doBind_aemszp$ = function (ctx) {
    var buf = this.buffer_0;
    if (buf != null) {
      glUniform4fv(this.location, buf);
    }
  };
  Uniform3fv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform3fv',
    interfaces: [Uniform]
  };
  function Uniform3fv_init(name, size, $this) {
    $this = $this || Object.create(Uniform3fv.prototype);
    Uniform3fv.call($this, name);
    $this.setSize_za3lpa$(size);
    return $this;
  }
  function Uniform4f(name) {
    Uniform.call(this, name, MutableVec4f_init());
    this.type_fp2ak5$_0 = 'vec4';
  }
  Object.defineProperty(Uniform4f.prototype, 'type', {
    get: function () {
      return this.type_fp2ak5$_0;
    }
  });
  Uniform4f.prototype.doBind_aemszp$ = function (ctx) {
    glUniform4f(this.location, this.value.x, this.value.y, this.value.z, this.value.w);
  };
  Uniform4f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform4f',
    interfaces: [Uniform]
  };
  function Uniform4fv(name) {
    Uniform.call(this, name, emptyList());
    this.buffer_0 = null;
  }
  Object.defineProperty(Uniform4fv.prototype, 'type', {
    get: function () {
      return 'vec4[' + this.value.size + ']';
    }
  });
  Uniform4fv.prototype.setSize_za3lpa$ = function (size) {
    if (size !== this.value.size) {
      this.buffer_0 = createFloat32Buffer(size * 4 | 0);
      var list = ArrayList_init(size);
      for (var index = 0; index < size; index++) {
        list.add_11rb$(new Vec4fView(ensureNotNull(this.buffer_0), index * 4 | 0));
      }
      this.value = list;
    }
  };
  Uniform4fv.prototype.doBind_aemszp$ = function (ctx) {
    var buf = this.buffer_0;
    if (buf != null) {
      glUniform4fv(this.location, buf);
    }
  };
  Uniform4fv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform4fv',
    interfaces: [Uniform]
  };
  function Uniform4fv_init(name, size, $this) {
    $this = $this || Object.create(Uniform4fv.prototype);
    Uniform4fv.call($this, name);
    $this.setSize_za3lpa$(size);
    return $this;
  }
  function UniformMatrix4(name) {
    Uniform.call(this, name, null);
    this.type_abfjj6$_0 = 'mat4';
    this.value_z53m2d$_0 = null;
  }
  Object.defineProperty(UniformMatrix4.prototype, 'type', {
    get: function () {
      return this.type_abfjj6$_0;
    }
  });
  Object.defineProperty(UniformMatrix4.prototype, 'value', {
    get: function () {
      return this.value_z53m2d$_0;
    },
    set: function (value) {
      this.value_z53m2d$_0 = value;
    }
  });
  UniformMatrix4.prototype.doBind_aemszp$ = function (ctx) {
    var buf = this.value;
    if (buf != null) {
      glUniformMatrix4fv(this.location, false, buf);
    }
  };
  UniformMatrix4.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UniformMatrix4',
    interfaces: [Uniform]
  };
  function VboBinder(vbo, elemSize, strideBytes, offset, type) {
    if (offset === void 0)
      offset = 0;
    if (type === void 0)
      type = 5126;
    this.vbo = vbo;
    this.elemSize = elemSize;
    this.strideBytes = strideBytes;
    this.offset = offset;
    this.type = type;
  }
  VboBinder.prototype.bindAttribute_2shagh$ = function (target, ctx) {
    this.vbo.bind_aemszp$(ctx);
    if (this.type === 5124 || this.type === 5125) {
      glVertexAttribIPointer(target, this.elemSize, this.type, this.strideBytes, this.offset * 4 | 0);
    }
     else {
      glVertexAttribPointer(target, this.elemSize, this.type, false, this.strideBytes, this.offset * 4 | 0);
    }
  };
  VboBinder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VboBinder',
    interfaces: []
  };
  function SharedResManager() {
    this.resources = LinkedHashMap_init();
  }
  SharedResManager.prototype.addReference_pl4ufq$ = function (key, ctx) {
    var res = this.resources.get_11rb$(key);
    if (res == null) {
      res = new SharedResManager$SharedResource(this.createResource_pl4ufq$(key, ctx));
      var $receiver = this.resources;
      var value = res;
      $receiver.put_xwzc9p$(key, value);
    }
    res.refCount = res.refCount + 1 | 0;
    return res.resource;
  };
  SharedResManager.prototype.removeReference_pl4ufq$ = function (key, ctx) {
    var res = this.resources.get_11rb$(key);
    if (res != null) {
      if ((res.refCount = res.refCount - 1 | 0, res.refCount) === 0) {
        this.deleteResource_5nn3pu$(key, res.resource, ctx);
        this.resources.remove_11rb$(key);
      }
    }
  };
  SharedResManager.prototype.deleteAllResources_aemszp$ = function (ctx) {
    var tmp$;
    tmp$ = this.resources.entries.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var key = element.key;
      var sharedRes = element.value;
      this.deleteResource_5nn3pu$(key, sharedRes.resource, ctx);
      sharedRes.refCount = 0;
    }
    this.resources.clear();
  };
  function SharedResManager$SharedResource(resource) {
    this.resource = resource;
    this.refCount = 0;
  }
  SharedResManager$SharedResource.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SharedResource',
    interfaces: []
  };
  SharedResManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SharedResManager',
    interfaces: []
  };
  function defaultProps(id) {
    return TextureProps_init(id, 9729, 33071);
  }
  function defaultPropsRepeated(id) {
    return TextureProps_init(id, 9729, 10497);
  }
  function defaultPropsClamped(id) {
    return TextureProps_init(id, 9729, 10497);
  }
  function TextureProps(id, minFilter, magFilter, xWrapping, yWrapping, anisotropy, target) {
    TextureProps$Companion_getInstance();
    if (target === void 0)
      target = 3553;
    this.id = id;
    this.minFilter = minFilter;
    this.magFilter = magFilter;
    this.xWrapping = xWrapping;
    this.yWrapping = yWrapping;
    this.anisotropy = anisotropy;
    this.target = target;
  }
  function TextureProps$Companion() {
    TextureProps$Companion_instance = this;
    this.DEFAULT_MIN = 9987;
    this.DEFAULT_MAG = 9729;
    this.DEFAULT_X_WRAP = 33071;
    this.DEFAULT_Y_WRAP = 33071;
  }
  TextureProps$Companion.prototype.magFilter_0 = function (filter) {
    if (filter === 9728)
      return 9728;
    else
      return this.DEFAULT_MAG;
  };
  TextureProps$Companion.prototype.minFilter_0 = function (filter) {
    if (filter === 9728)
      return 9728;
    else
      return this.DEFAULT_MIN;
  };
  TextureProps$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TextureProps$Companion_instance = null;
  function TextureProps$Companion_getInstance() {
    if (TextureProps$Companion_instance === null) {
      new TextureProps$Companion();
    }
    return TextureProps$Companion_instance;
  }
  TextureProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextureProps',
    interfaces: []
  };
  function TextureProps_init(id, filter, wrapping, $this) {
    $this = $this || Object.create(TextureProps.prototype);
    TextureProps.call($this, id, TextureProps$Companion_getInstance().minFilter_0(filter), TextureProps$Companion_getInstance().magFilter_0(filter), wrapping, wrapping, 16);
    return $this;
  }
  function TextureProps_init_0(id, filter, wrapping, anisotropy, $this) {
    $this = $this || Object.create(TextureProps.prototype);
    TextureProps.call($this, id, TextureProps$Companion_getInstance().minFilter_0(filter), TextureProps$Companion_getInstance().magFilter_0(filter), wrapping, wrapping, anisotropy);
    return $this;
  }
  TextureProps.prototype.component1 = function () {
    return this.id;
  };
  TextureProps.prototype.component2 = function () {
    return this.minFilter;
  };
  TextureProps.prototype.component3 = function () {
    return this.magFilter;
  };
  TextureProps.prototype.component4 = function () {
    return this.xWrapping;
  };
  TextureProps.prototype.component5 = function () {
    return this.yWrapping;
  };
  TextureProps.prototype.component6 = function () {
    return this.anisotropy;
  };
  TextureProps.prototype.component7 = function () {
    return this.target;
  };
  TextureProps.prototype.copy_6fw3cu$ = function (id, minFilter, magFilter, xWrapping, yWrapping, anisotropy, target) {
    return new TextureProps(id === void 0 ? this.id : id, minFilter === void 0 ? this.minFilter : minFilter, magFilter === void 0 ? this.magFilter : magFilter, xWrapping === void 0 ? this.xWrapping : xWrapping, yWrapping === void 0 ? this.yWrapping : yWrapping, anisotropy === void 0 ? this.anisotropy : anisotropy, target === void 0 ? this.target : target);
  };
  TextureProps.prototype.toString = function () {
    return 'TextureProps(id=' + Kotlin.toString(this.id) + (', minFilter=' + Kotlin.toString(this.minFilter)) + (', magFilter=' + Kotlin.toString(this.magFilter)) + (', xWrapping=' + Kotlin.toString(this.xWrapping)) + (', yWrapping=' + Kotlin.toString(this.yWrapping)) + (', anisotropy=' + Kotlin.toString(this.anisotropy)) + (', target=' + Kotlin.toString(this.target)) + ')';
  };
  TextureProps.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.id) | 0;
    result = result * 31 + Kotlin.hashCode(this.minFilter) | 0;
    result = result * 31 + Kotlin.hashCode(this.magFilter) | 0;
    result = result * 31 + Kotlin.hashCode(this.xWrapping) | 0;
    result = result * 31 + Kotlin.hashCode(this.yWrapping) | 0;
    result = result * 31 + Kotlin.hashCode(this.anisotropy) | 0;
    result = result * 31 + Kotlin.hashCode(this.target) | 0;
    return result;
  };
  TextureProps.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.id, other.id) && Kotlin.equals(this.minFilter, other.minFilter) && Kotlin.equals(this.magFilter, other.magFilter) && Kotlin.equals(this.xWrapping, other.xWrapping) && Kotlin.equals(this.yWrapping, other.yWrapping) && Kotlin.equals(this.anisotropy, other.anisotropy) && Kotlin.equals(this.target, other.target)))));
  };
  function TextureData() {
    this.isAvailable_kzjj4d$_0 = false;
    this.width_de9922$_0 = 0;
    this.height_20fnnl$_0 = 0;
  }
  Object.defineProperty(TextureData.prototype, 'isAvailable', {
    get: function () {
      return this.isAvailable_kzjj4d$_0;
    }
  });
  Object.defineProperty(TextureData.prototype, 'width', {
    get: function () {
      return this.width_de9922$_0;
    },
    set: function (width) {
      this.width_de9922$_0 = width;
    }
  });
  Object.defineProperty(TextureData.prototype, 'height', {
    get: function () {
      return this.height_20fnnl$_0;
    },
    set: function (height) {
      this.height_20fnnl$_0 = height;
    }
  });
  TextureData.prototype.loadData_wmmari$ = function (texture, ctx) {
    this.onLoad_2jsdat$(texture, texture.props.target, ctx);
    if (texture.props.minFilter === 9987) {
      glGenerateMipmap(ensureNotNull(texture.res).target);
    }
  };
  TextureData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextureData',
    interfaces: []
  };
  function BufferedTextureData(buffer, width, height, format) {
    TextureData.call(this);
    this.buffer = buffer;
    this.format = format;
    this.width = width;
    this.height = height;
  }
  Object.defineProperty(BufferedTextureData.prototype, 'isAvailable', {
    get: function () {
      return true;
    }
  });
  BufferedTextureData.prototype.onLoad_2jsdat$ = function (texture, target, ctx) {
    var tmp$;
    tmp$ = texture.res;
    if (tmp$ == null) {
      throw KoolException_init("Texture wasn't created");
    }
    var res = tmp$;
    var limit = this.buffer.limit;
    var pos = this.buffer.position;
    this.buffer.flip();
    glTexImage2D(target, 0, this.format, this.width, this.height, 0, this.format, 5121, this.buffer);
    this.buffer.limit = limit;
    this.buffer.position = pos;
    ctx.memoryMgr.memoryAllocated_927jj9$(res, this.buffer.position);
  };
  BufferedTextureData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BufferedTextureData',
    interfaces: [TextureData]
  };
  function CubeMapTextureData(front, back, left, right, up, down) {
    TextureData.call(this);
    this.front = front;
    this.back = back;
    this.left = left;
    this.right = right;
    this.up = up;
    this.down = down;
  }
  Object.defineProperty(CubeMapTextureData.prototype, 'isAvailable', {
    get: function () {
      return this.front.isAvailable && this.back.isAvailable && this.left.isAvailable && this.right.isAvailable && this.up.isAvailable && this.down.isAvailable;
    }
  });
  CubeMapTextureData.prototype.onLoad_2jsdat$ = function (texture, target, ctx) {
    if (target !== 34067) {
      throw KoolException_init('CubeMapTextureData can only be bound to target GL_TEXTURE_CUBE_MAP');
    }
    this.front.onLoad_2jsdat$(texture, 34074, ctx);
    this.back.onLoad_2jsdat$(texture, 34073, ctx);
    this.left.onLoad_2jsdat$(texture, 34070, ctx);
    this.right.onLoad_2jsdat$(texture, 34069, ctx);
    this.up.onLoad_2jsdat$(texture, 34071, ctx);
    this.down.onLoad_2jsdat$(texture, 34072, ctx);
    glTexParameteri(34067, 32882, 33071);
  };
  CubeMapTextureData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CubeMapTextureData',
    interfaces: [TextureData]
  };
  function Texture(props, generator) {
    GlObject.call(this);
    this.props = props;
    this.generator = generator;
    this.width_uigb2o$_0 = 0;
    this.height_vdup1l$_0 = 0;
    this.delayLoading = false;
  }
  Object.defineProperty(Texture.prototype, 'width', {
    get: function () {
      return this.width_uigb2o$_0;
    },
    set: function (width) {
      this.width_uigb2o$_0 = width;
    }
  });
  Object.defineProperty(Texture.prototype, 'height', {
    get: function () {
      return this.height_vdup1l$_0;
    },
    set: function (height) {
      this.height_vdup1l$_0 = height;
    }
  });
  Texture.prototype.dispose_aemszp$ = function (ctx) {
    if (this.isValid) {
      ctx.textureMgr.deleteTexture_wmmari$(this, ctx);
      this.res = null;
    }
  };
  Texture.prototype.load_v0ofbf$ = function (texData, ctx) {
    var tmp$;
    if (!texData.isAvailable) {
      throw KoolException_init('Texture data is not available');
    }
    tmp$ = this.res;
    if (tmp$ == null) {
      throw KoolException_init("Texture wasn't created");
    }
    var res = tmp$;
    texData.loadData_wmmari$(this, ctx);
    this.width = texData.width;
    this.height = texData.height;
    glTexParameteri(res.target, 10241, this.props.minFilter);
    glTexParameteri(res.target, 10240, this.props.magFilter);
    glTexParameteri(res.target, 10242, this.props.xWrapping);
    glTexParameteri(res.target, 10243, this.props.yWrapping);
    if (this.props.anisotropy > 1 && ctx.glCapabilities.anisotropicTexFilterInfo.isSupported) {
      var a = numberToInt(ctx.glCapabilities.anisotropicTexFilterInfo.maxAnisotropy);
      var b = this.props.anisotropy;
      var anisotropy = Math_0.max(a, b);
      glTexParameteri(res.target, ctx.glCapabilities.anisotropicTexFilterInfo.TEXTURE_MAX_ANISOTROPY_EXT, anisotropy);
    }
    res.isLoaded = true;
  };
  Texture.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Texture',
    interfaces: [GlObject]
  };
  function CubeMapTexture(props, generator) {
    Texture.call(this, props, generator);
    if (props.target !== 34067) {
      throw KoolException_init('CubeMapTexture must be initialized with TextureProps.target = GL_TEXTURE_CUBE_MAP');
    }
  }
  CubeMapTexture.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CubeMapTexture',
    interfaces: [Texture]
  };
  function TextureManager() {
    SharedResManager.call(this);
    this.maxTextureLoadsPerFrame = 5;
    var array = Array_0(16);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = null;
    }
    this.boundTextures_0 = array;
    this.loadingTextures_0 = LinkedHashMap_init();
    this.activeTexUnit_0 = 0;
    this.allowedTexLoads_0 = this.maxTextureLoadsPerFrame;
  }
  TextureManager.prototype.onNewFrame_aemszp$ = function (ctx) {
    var tmp$;
    this.allowedTexLoads_0 = this.maxTextureLoadsPerFrame;
    if (this.boundTextures_0.length !== ctx.glCapabilities.maxTexUnits) {
      var array = Array_0(ctx.glCapabilities.maxTexUnits);
      var tmp$_0;
      tmp$_0 = array.length - 1 | 0;
      for (var i = 0; i <= tmp$_0; i++) {
        array[i] = null;
      }
      this.boundTextures_0 = array;
    }
    tmp$ = this.boundTextures_0;
    for (var i_0 = 0; i_0 !== tmp$.length; ++i_0) {
      var tex = this.boundTextures_0[i_0];
      if (tex != null) {
        glActiveTexture(33984 + i_0 | 0);
        glBindTexture(3553, null);
        tex.texUnit = -1;
        this.boundTextures_0[i_0] = null;
      }
    }
    this.activeTexUnit_0 = this.boundTextures_0.length - 1 | 0;
  };
  TextureManager.prototype.unbindTexture_s4qhl0$ = function (texture, ctx) {
    var tmp$;
    if (texture == null)
      return;
    if (texture.isValid) {
      tmp$ = texture.res;
      if (tmp$ == null) {
        throw KoolException_init('TextureResource is null although it was created');
      }
      var texRes = tmp$;
      if (texRes.texUnit >= 0) {
        this.activateTexUnit_0(texRes.texUnit);
        glBindTexture(3553, null);
        this.boundTextures_0[texRes.texUnit] = null;
        texRes.texUnit = -1;
      }
    }
  };
  TextureManager.prototype.bindTexture_xyx3x4$ = function (texture, ctx, makeActive) {
    if (makeActive === void 0)
      makeActive = false;
    var tmp$;
    if (!texture.isValid) {
      texture.res = this.addReference_pl4ufq$(texture.props, ctx);
    }
    tmp$ = texture.res;
    if (tmp$ == null) {
      throw KoolException_init('TextureResource is null although it was created');
    }
    var texRes = tmp$;
    if (texRes.texUnit < 0) {
      this.nextTexUnit_0();
      this.bindToActiveTexUnit_0(texture.res);
    }
     else if (makeActive) {
      this.activateTexUnit_0(texRes.texUnit);
    }
    if (!texRes.isLoaded) {
      this.loadTexture_0(texture, ctx);
    }
    return texRes.texUnit;
  };
  TextureManager.prototype.deleteTexture_wmmari$ = function (texture, ctx) {
    var res = texture.res;
    if (res != null) {
      this.removeReference_pl4ufq$(texture.props, ctx);
    }
  };
  TextureManager.prototype.nextTexUnit_0 = function () {
    this.activateTexUnit_0((this.activeTexUnit_0 + 1 | 0) % this.boundTextures_0.length);
  };
  TextureManager.prototype.activateTexUnit_0 = function (unit) {
    this.activeTexUnit_0 = unit;
    glActiveTexture(33984 + unit | 0);
  };
  TextureManager.prototype.bindToActiveTexUnit_0 = function (texRes) {
    var tmp$, tmp$_0;
    (tmp$ = this.boundTextures_0[this.activeTexUnit_0]) != null ? (tmp$.texUnit = -1) : null;
    var target = (tmp$_0 = texRes != null ? texRes.target : null) != null ? tmp$_0 : 3553;
    glBindTexture(target, texRes);
    texRes != null ? (texRes.texUnit = this.activeTexUnit_0) : null;
    this.boundTextures_0[this.activeTexUnit_0] = texRes;
  };
  TextureManager.prototype.loadTexture_0 = function (texture, ctx) {
    var tmp$;
    tmp$ = texture.res;
    if (tmp$ == null) {
      throw KoolException_init("Can't load a texture that wasn't created");
    }
    var res = tmp$;
    var data = this.loadingTextures_0.get_11rb$(texture.props.id);
    if (data == null) {
      data = texture.generator(texture, ctx);
      var $receiver = this.loadingTextures_0;
      var key = texture.props.id;
      var value = data;
      $receiver.put_xwzc9p$(key, value);
    }
    if (data.isAvailable && (!texture.delayLoading || this.allowedTexLoads_0 > 0)) {
      if (res.texUnit !== this.activeTexUnit_0) {
        this.activateTexUnit_0(ensureNotNull(texture.res).texUnit);
      }
      texture.load_v0ofbf$(data, ctx);
      this.loadingTextures_0.remove_11rb$(texture.props.id);
      this.allowedTexLoads_0 = this.allowedTexLoads_0 - 1 | 0;
    }
  };
  TextureManager.prototype.createResource_pl4ufq$ = function (key, ctx) {
    var texRes = TextureResource$Companion_getInstance().create_8057hp$(key, ctx);
    this.nextTexUnit_0();
    this.bindToActiveTexUnit_0(texRes);
    return texRes;
  };
  TextureManager.prototype.deleteResource_5nn3pu$ = function (key, res, ctx) {
    res.delete_aemszp$(ctx);
  };
  TextureManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextureManager',
    interfaces: [SharedResManager]
  };
  function Animator(value) {
    Animator$Companion_getInstance();
    this.value = value;
    this.duration = 1.0;
    this.speed = 1.0;
    this.repeating = Animator$Companion_getInstance().ONCE;
    this.progress = 0.0;
  }
  function Animator$Companion() {
    Animator$Companion_instance = this;
    this.ONCE = 1;
    this.REPEAT = 2;
    this.REPEAT_TOGGLE_DIR = 3;
  }
  Animator$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Animator$Companion_instance = null;
  function Animator$Companion_getInstance() {
    if (Animator$Companion_instance === null) {
      new Animator$Companion();
    }
    return Animator$Companion_instance;
  }
  Animator.prototype.tick_aemszp$ = function (ctx) {
    var $receiver = this.speed;
    var eps;
    eps = package$math.FUZZY_EQ_F;
    if (!(Math_0.abs($receiver) <= eps)) {
      this.progress += ctx.deltaT * this.speed / this.duration;
      if (this.progress >= 1.0 && this.speed > 0) {
        switch (this.repeating) {
          case 1:
            this.progress = 1.0;
            this.speed = 0.0;
            break;
          case 2:
            this.progress = 0.0;
            break;
          case 3:
            this.progress = 1.0;
            this.speed = -this.speed;
            break;
        }
      }
       else if (this.progress <= 0.0 && this.speed < 0) {
        switch (this.repeating) {
          case 1:
            this.progress = 0.0;
            this.speed = 0.0;
            break;
          case 2:
            this.progress = 1.0;
            break;
          case 3:
            this.progress = 0.0;
            this.speed = -this.speed;
            break;
        }
      }
      var $receiver_0 = this.progress;
      var clamp$result;
      if ($receiver_0 < 0.0) {
        clamp$result = 0.0;
      }
       else if ($receiver_0 > 1.0) {
        clamp$result = 1.0;
      }
       else {
        clamp$result = $receiver_0;
      }
      this.progress = clamp$result;
      this.value.interpolate_mx4ult$(this.interpolate_mx4ult$(this.progress));
    }
    return this.value.value;
  };
  Animator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Animator',
    interfaces: []
  };
  function LinearAnimator(value) {
    Animator.call(this, value);
  }
  LinearAnimator.prototype.interpolate_mx4ult$ = function (progress) {
    return progress;
  };
  LinearAnimator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LinearAnimator',
    interfaces: [Animator]
  };
  function CosAnimator(value) {
    Animator.call(this, value);
  }
  CosAnimator.prototype.interpolate_mx4ult$ = function (progress) {
    var x = progress * math.PI;
    return 0.5 - Math_0.cos(x) * 0.5;
  };
  CosAnimator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CosAnimator',
    interfaces: [Animator]
  };
  function InterpolatedValue(initial) {
    this.value = initial;
    this.onUpdate = null;
  }
  InterpolatedValue.prototype.interpolate_mx4ult$ = function (progress) {
    var tmp$;
    this.updateValue_mx4ult$(progress);
    (tmp$ = this.onUpdate) != null ? tmp$(this.value) : null;
  };
  InterpolatedValue.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InterpolatedValue',
    interfaces: []
  };
  function InterpolatedFloat(from, to) {
    InterpolatedValue.call(this, from);
    this.from = from;
    this.to = to;
  }
  InterpolatedFloat.prototype.updateValue_mx4ult$ = function (interpolationPos) {
    this.value = this.from + (this.to - this.from) * interpolationPos;
  };
  InterpolatedFloat.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InterpolatedFloat',
    interfaces: [InterpolatedValue]
  };
  function InterpolatedColor(from, to) {
    InterpolatedValue.call(this, MutableColor_init());
    this.from = from;
    this.to = to;
    this.value.set_d7aj7k$(this.from);
  }
  InterpolatedColor.prototype.updateValue_mx4ult$ = function (interpolationPos) {
    this.value.set_d7aj7k$(this.to).subtract_czzhhz$(this.from).scale_mx4ult$(interpolationPos).add_d7aj7k$(this.from);
  };
  InterpolatedColor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InterpolatedColor',
    interfaces: [InterpolatedValue]
  };
  function SpringDamperFloat(value) {
    this.desired = value;
    this.actual = value;
    this.speed_j0cmgy$_0 = 0.0;
    this.damping_0 = 0.0;
    this.stiffness_kq1inq$_0 = 0.0;
    this.stiffness = 100.0;
  }
  Object.defineProperty(SpringDamperFloat.prototype, 'speed', {
    get: function () {
      return this.speed_j0cmgy$_0;
    },
    set: function (speed) {
      this.speed_j0cmgy$_0 = speed;
    }
  });
  Object.defineProperty(SpringDamperFloat.prototype, 'stiffness', {
    get: function () {
      return this.stiffness_kq1inq$_0;
    },
    set: function (value) {
      this.stiffness_kq1inq$_0 = value;
      var x = this.stiffness;
      this.damping_0 = 2.0 * Math_0.sqrt(x);
    }
  });
  SpringDamperFloat.prototype.set_mx4ult$ = function (value) {
    this.desired = value;
    this.actual = value;
    this.speed = 0.0;
  };
  SpringDamperFloat.prototype.animate_mx4ult$ = function (deltaT) {
    if (this.stiffness === 0.0 || deltaT > 0.2) {
      this.actual = this.desired;
      return this.actual;
    }
    var t = 0.0;
    while (t < deltaT) {
      var b = deltaT - t;
      var dt = Math_0.min(0.05, b);
      t += dt + 0.001;
      var err = this.desired - this.actual;
      this.speed = this.speed + (err * this.stiffness - this.speed * this.damping_0) * dt;
      var delta = this.speed * dt;
      var $receiver = Math_0.abs(delta);
      var eps;
      eps = package$math.FUZZY_EQ_F;
      if (!(Math_0.abs($receiver) <= eps)) {
        this.actual += delta;
      }
       else {
        this.actual = this.desired;
      }
    }
    return this.actual;
  };
  SpringDamperFloat.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SpringDamperFloat',
    interfaces: []
  };
  function Comparator$ObjectLiteral_5(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_5.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_5.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_5 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function BillboardMesh(name) {
    BillboardMesh$Companion_getInstance();
    if (name === void 0)
      name = null;
    Mesh.call(this, MeshData_init([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().COLORS, Attribute$Companion_getInstance().TEXTURE_COORDS, BillboardMesh$Companion_getInstance().ATTR_EXTENTS, BillboardMesh$Companion_getInstance().ATTR_TEX_EXTENTS, BillboardMesh$Companion_getInstance().ATTR_ROTATION]), name);
    this.drawOrder = BillboardMesh$DrawOrder$AS_IS_getInstance();
    this.indexList_55a61b$_0 = ArrayList_init_0();
    this.billboardIt_w6i85x$_0 = new BillboardMesh$BillboardInstance(this);
    this.isWithGeometryShader_gmwcxa$_0 = true;
    this.meshData.primitiveType = 0;
    this.shader = billboardShader(BillboardMesh_init$lambda);
    this.isCastingShadow = false;
  }
  BillboardMesh.prototype.addQuad_mr3yw4$ = function (center, size, rotation, texCenter, texSize, color) {
    if (rotation === void 0)
      rotation = 0.0;
    if (texCenter === void 0)
      texCenter = BillboardMesh$Companion_getInstance().TEX_CENTER;
    if (texSize === void 0)
      texSize = BillboardMesh$Companion_getInstance().TEX_SIZE_FULL;
    if (color === void 0)
      color = Color$Companion_getInstance().WHITE;
    var idx = this.appendQuad_wnnros$_0();
    this.updateQuad_lszk0i$(idx, center, size, rotation, texCenter, texSize, color);
    this.addQuadIndex_za3lpa$(idx);
    if (this.drawOrder !== BillboardMesh$DrawOrder$AS_IS_getInstance()) {
      this.indexList_55a61b$_0.add_11rb$(idx);
    }
  };
  BillboardMesh.prototype.updateQuad_lszk0i$ = function (index, center, size, rotation, texCenter, texSize, color) {
    if (rotation === void 0)
      rotation = 0.0;
    if (texCenter === void 0)
      texCenter = BillboardMesh$Companion_getInstance().TEX_CENTER;
    if (texSize === void 0)
      texSize = BillboardMesh$Companion_getInstance().TEX_SIZE_FULL;
    if (color === void 0)
      color = Color$Companion_getInstance().WHITE;
    if (this.isWithGeometryShader_gmwcxa$_0) {
      this.billboardIt_w6i85x$_0.vertex.index = index;
      this.billboardIt_w6i85x$_0.vertex.position.set_czzhiu$(center);
      this.billboardIt_w6i85x$_0.vertex.texCoord.set_czzhjp$(texCenter);
      this.billboardIt_w6i85x$_0.vertex.color.set_d7aj7k$(color);
      this.billboardIt_w6i85x$_0.extents.set_dleff0$(size.x * 0.5, size.y * 0.5);
      this.billboardIt_w6i85x$_0.texExtents.set_dleff0$(texSize.x * 0.5, texSize.y * 0.5);
      this.billboardIt_w6i85x$_0.rotation.f = rotation * package$math.DEG_2_RAD;
    }
     else {
      for (var i = 0; i <= 3; i++) {
        this.billboardIt_w6i85x$_0.vertex.index = (index * 4 | 0) + i | 0;
        this.billboardIt_w6i85x$_0.vertex.position.set_czzhiu$(center);
        this.billboardIt_w6i85x$_0.vertex.texCoord.set_czzhjp$(texCenter);
        this.billboardIt_w6i85x$_0.vertex.color.set_d7aj7k$(color);
        this.billboardIt_w6i85x$_0.extents.set_dleff0$(size.x * 0.5, size.y * 0.5).mul_czzhjp$(BillboardMesh$Companion_getInstance().SZ_EXT_SIGNS_0.get_za3lpa$(i));
        this.billboardIt_w6i85x$_0.texExtents.set_dleff0$(texSize.x * 0.5, texSize.y * 0.5).mul_czzhjp$(BillboardMesh$Companion_getInstance().TEX_EXT_SIGNS_0.get_za3lpa$(i));
        this.billboardIt_w6i85x$_0.rotation.f = rotation * package$math.DEG_2_RAD;
      }
    }
    this.meshData.isSyncRequired = true;
  };
  BillboardMesh.prototype.clearIndices = function () {
    this.meshData.vertexList.indices.clear();
  };
  BillboardMesh.prototype.addQuadIndex_za3lpa$ = function (quadIdx) {
    if (this.isWithGeometryShader_gmwcxa$_0) {
      this.meshData.vertexList.addIndex_za3lpa$(quadIdx);
    }
     else {
      var idx = quadIdx * 4 | 0;
      this.meshData.vertexList.addIndex_za3lpa$(idx);
      this.meshData.vertexList.addIndex_za3lpa$(idx + 1 | 0);
      this.meshData.vertexList.addIndex_za3lpa$(idx + 2 | 0);
      this.meshData.vertexList.addIndex_za3lpa$(idx + 3 | 0);
      this.meshData.vertexList.addIndex_za3lpa$(idx + 2 | 0);
      this.meshData.vertexList.addIndex_za3lpa$(idx + 1 | 0);
    }
  };
  BillboardMesh.prototype.appendQuad_wnnros$_0 = function () {
    var tmp$;
    if (this.isWithGeometryShader_gmwcxa$_0) {
      var $this = this.meshData;
      $this.isSyncRequired = true;
      var $this_0 = $this.vertexList;
      var updateBounds = $this.bounds;
      var tmp$_0, tmp$_1, tmp$_2;
      $this_0.checkBufferSizes_za3lpa$();
      tmp$_0 = $this_0.vertexSizeF;
      for (var i = 1; i <= tmp$_0; i++) {
        $this_0.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_1 = $this_0.vertexSizeI;
      for (var i_0 = 1; i_0 <= tmp$_1; i_0++) {
        $this_0.dataI.plusAssign_za3lpa$(0);
      }
      $this_0.vertexIt.index = (tmp$_2 = $this_0.size, $this_0.size = tmp$_2 + 1 | 0, tmp$_2);
      updateBounds != null ? updateBounds.add_czzhiu$($this_0.vertexIt.position) : null;
      tmp$ = $this_0.size - 1 | 0;
    }
     else {
      var $this_1 = this.meshData;
      $this_1.isSyncRequired = true;
      var $this_2 = $this_1.vertexList;
      var updateBounds_0 = $this_1.bounds;
      var tmp$_3, tmp$_4, tmp$_5;
      $this_2.checkBufferSizes_za3lpa$();
      tmp$_3 = $this_2.vertexSizeF;
      for (var i_1 = 1; i_1 <= tmp$_3; i_1++) {
        $this_2.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_4 = $this_2.vertexSizeI;
      for (var i_2 = 1; i_2 <= tmp$_4; i_2++) {
        $this_2.dataI.plusAssign_za3lpa$(0);
      }
      $this_2.vertexIt.index = (tmp$_5 = $this_2.size, $this_2.size = tmp$_5 + 1 | 0, tmp$_5);
      updateBounds_0 != null ? updateBounds_0.add_czzhiu$($this_2.vertexIt.position) : null;
      var $this_3 = this.meshData;
      $this_3.isSyncRequired = true;
      var $this_4 = $this_3.vertexList;
      var updateBounds_1 = $this_3.bounds;
      var tmp$_6, tmp$_7, tmp$_8;
      $this_4.checkBufferSizes_za3lpa$();
      tmp$_6 = $this_4.vertexSizeF;
      for (var i_3 = 1; i_3 <= tmp$_6; i_3++) {
        $this_4.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_7 = $this_4.vertexSizeI;
      for (var i_4 = 1; i_4 <= tmp$_7; i_4++) {
        $this_4.dataI.plusAssign_za3lpa$(0);
      }
      $this_4.vertexIt.index = (tmp$_8 = $this_4.size, $this_4.size = tmp$_8 + 1 | 0, tmp$_8);
      updateBounds_1 != null ? updateBounds_1.add_czzhiu$($this_4.vertexIt.position) : null;
      var $this_5 = this.meshData;
      $this_5.isSyncRequired = true;
      var $this_6 = $this_5.vertexList;
      var updateBounds_2 = $this_5.bounds;
      var tmp$_9, tmp$_10, tmp$_11;
      $this_6.checkBufferSizes_za3lpa$();
      tmp$_9 = $this_6.vertexSizeF;
      for (var i_5 = 1; i_5 <= tmp$_9; i_5++) {
        $this_6.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_10 = $this_6.vertexSizeI;
      for (var i_6 = 1; i_6 <= tmp$_10; i_6++) {
        $this_6.dataI.plusAssign_za3lpa$(0);
      }
      $this_6.vertexIt.index = (tmp$_11 = $this_6.size, $this_6.size = tmp$_11 + 1 | 0, tmp$_11);
      updateBounds_2 != null ? updateBounds_2.add_czzhiu$($this_6.vertexIt.position) : null;
      var $this_7 = this.meshData;
      $this_7.isSyncRequired = true;
      var $this_8 = $this_7.vertexList;
      var updateBounds_3 = $this_7.bounds;
      var tmp$_12, tmp$_13, tmp$_14;
      $this_8.checkBufferSizes_za3lpa$();
      tmp$_12 = $this_8.vertexSizeF;
      for (var i_7 = 1; i_7 <= tmp$_12; i_7++) {
        $this_8.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_13 = $this_8.vertexSizeI;
      for (var i_8 = 1; i_8 <= tmp$_13; i_8++) {
        $this_8.dataI.plusAssign_za3lpa$(0);
      }
      $this_8.vertexIt.index = (tmp$_14 = $this_8.size, $this_8.size = tmp$_14 + 1 | 0, tmp$_14);
      updateBounds_3 != null ? updateBounds_3.add_czzhiu$($this_8.vertexIt.position) : null;
      tmp$ = ($this_8.size - 1 | 0) / 4 | 0;
    }
    return tmp$;
  };
  BillboardMesh.prototype.preRender_aemszp$ = function (ctx) {
    if (this.isWithGeometryShader_gmwcxa$_0 && !ctx.glCapabilities.geometryShader) {
      this.isWithGeometryShader_gmwcxa$_0 = false;
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Falling back to non-geometry-shader billboard mesh');
      }
      this.convertToQuadMesh_ibkkv7$_0();
    }
    if (this.drawOrder !== BillboardMesh$DrawOrder$AS_IS_getInstance()) {
      this.sortElems_pgt1t3$_0();
    }
    Mesh.prototype.preRender_aemszp$.call(this, ctx);
  };
  BillboardMesh.prototype.convertToQuadMesh_ibkkv7$_0 = function () {
    var tmp$;
    var tmpData = new MeshData(this.meshData.vertexAttributes);
    var $this = this.meshData.vertexList;
    var tmp$_0;
    tmp$_0 = $this.size;
    for (var i = 0; i < tmp$_0; i++) {
      $this.vertexIt.index = i;
      var ptVertex = $this.vertexIt;
      for (var i_0 = 0; i_0 <= 3; i_0++) {
        tmpData.isSyncRequired = true;
        var $this_0 = tmpData.vertexList;
        var updateBounds = tmpData.bounds;
        var tmp$_1, tmp$_2, tmp$_3;
        $this_0.checkBufferSizes_za3lpa$();
        tmp$_1 = $this_0.vertexSizeF;
        for (var i_1 = 1; i_1 <= tmp$_1; i_1++) {
          $this_0.dataF.plusAssign_mx4ult$(0.0);
        }
        tmp$_2 = $this_0.vertexSizeI;
        for (var i_2 = 1; i_2 <= tmp$_2; i_2++) {
          $this_0.dataI.plusAssign_za3lpa$(0);
        }
        $this_0.vertexIt.index = (tmp$_3 = $this_0.size, $this_0.size = tmp$_3 + 1 | 0, tmp$_3);
        var $receiver = $this_0.vertexIt;
        var tmp$_4, tmp$_5;
        $receiver.set_j5bz6$(ptVertex);
        (tmp$_4 = $receiver.getVec2fAttribute_mczodr$(BillboardMesh$Companion_getInstance().ATTR_EXTENTS)) != null ? tmp$_4.mul_czzhjp$(BillboardMesh$Companion_getInstance().SZ_EXT_SIGNS_0.get_za3lpa$(i_0)) : null;
        (tmp$_5 = $receiver.getVec2fAttribute_mczodr$(BillboardMesh$Companion_getInstance().ATTR_TEX_EXTENTS)) != null ? tmp$_5.mul_czzhjp$(BillboardMesh$Companion_getInstance().TEX_EXT_SIGNS_0.get_za3lpa$(i_0)) : null;
        updateBounds != null ? updateBounds.add_czzhiu$($this_0.vertexIt.position) : null;
      }
    }
    tmp$ = this.meshData.numIndices;
    for (var i_3 = 0; i_3 < tmp$; i_3++) {
      var idx = this.meshData.vertexList.indices.get_za3lpa$(i_3) * 4 | 0;
      tmpData.addIndex_za3lpa$(idx);
      tmpData.addIndex_za3lpa$(idx + 1 | 0);
      tmpData.addIndex_za3lpa$(idx + 2 | 0);
      tmpData.addIndex_za3lpa$(idx + 3 | 0);
      tmpData.addIndex_za3lpa$(idx + 2 | 0);
      tmpData.addIndex_za3lpa$(idx + 1 | 0);
    }
    this.meshData.vertexList.clear();
    this.meshData.vertexList.addFrom_r7nl2o$(tmpData.vertexList);
    this.meshData.primitiveType = 4;
  };
  function BillboardMesh$sortElems$lambda(closure$vertCnt, closure$v, closure$camPos, closure$s) {
    return function (idx) {
      closure$v.index = Kotlin.imul(idx, closure$vertCnt);
      return closure$v.position.sqrDistance_czzhiu$(closure$camPos) * closure$s;
    };
  }
  BillboardMesh.prototype.sortElems_pgt1t3$_0 = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    tmp$_1 = (tmp$_0 = (tmp$ = this.scene) != null ? tmp$.camera : null) != null ? tmp$_0.globalPos : null;
    if (tmp$_1 == null) {
      return;
    }
    var camPos = tmp$_1;
    if (this.isWithGeometryShader_gmwcxa$_0) {
      tmp$_2 = 1;
    }
     else {
      tmp$_2 = 4;
    }
    var vertCnt = tmp$_2;
    if (this.indexList_55a61b$_0.size !== (this.meshData.numVertices / vertCnt | 0)) {
      this.indexList_55a61b$_0.clear();
      addAll(this.indexList_55a61b$_0, until(0, this.meshData.numVertices / vertCnt | 0));
    }
    var s = this.drawOrder === BillboardMesh$DrawOrder$FAR_FIRST_getInstance() ? -1 : 1;
    var v = this.meshData.vertexList.vertexIt;
    var $receiver = this.indexList_55a61b$_0;
    if ($receiver.size > 1) {
      sortWith($receiver, new Comparator$ObjectLiteral_5(compareBy$lambda_5(BillboardMesh$sortElems$lambda(vertCnt, v, camPos, s))));
    }
    this.meshData.vertexList.indices.clear();
    tmp$_3 = this.indexList_55a61b$_0;
    for (var i = 0; i !== tmp$_3.size; ++i) {
      this.addQuadIndex_za3lpa$(this.indexList_55a61b$_0.get_za3lpa$(i));
    }
    this.meshData.isSyncRequired = true;
  };
  function BillboardMesh$BillboardInstance($outer) {
    this.$outer = $outer;
    this.vertex = this.$outer.meshData.vertexList.get_za3lpa$(0);
    this.rotation = ensureNotNull(this.vertex.getFloatAttribute_mczodr$(BillboardMesh$Companion_getInstance().ATTR_ROTATION));
    this.extents = ensureNotNull(this.vertex.getVec2fAttribute_mczodr$(BillboardMesh$Companion_getInstance().ATTR_EXTENTS));
    this.texExtents = ensureNotNull(this.vertex.getVec2fAttribute_mczodr$(BillboardMesh$Companion_getInstance().ATTR_TEX_EXTENTS));
  }
  BillboardMesh$BillboardInstance.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BillboardInstance',
    interfaces: []
  };
  function BillboardMesh$DrawOrder(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function BillboardMesh$DrawOrder_initFields() {
    BillboardMesh$DrawOrder_initFields = function () {
    };
    BillboardMesh$DrawOrder$AS_IS_instance = new BillboardMesh$DrawOrder('AS_IS', 0);
    BillboardMesh$DrawOrder$FAR_FIRST_instance = new BillboardMesh$DrawOrder('FAR_FIRST', 1);
    BillboardMesh$DrawOrder$NEAR_FIRST_instance = new BillboardMesh$DrawOrder('NEAR_FIRST', 2);
  }
  var BillboardMesh$DrawOrder$AS_IS_instance;
  function BillboardMesh$DrawOrder$AS_IS_getInstance() {
    BillboardMesh$DrawOrder_initFields();
    return BillboardMesh$DrawOrder$AS_IS_instance;
  }
  var BillboardMesh$DrawOrder$FAR_FIRST_instance;
  function BillboardMesh$DrawOrder$FAR_FIRST_getInstance() {
    BillboardMesh$DrawOrder_initFields();
    return BillboardMesh$DrawOrder$FAR_FIRST_instance;
  }
  var BillboardMesh$DrawOrder$NEAR_FIRST_instance;
  function BillboardMesh$DrawOrder$NEAR_FIRST_getInstance() {
    BillboardMesh$DrawOrder_initFields();
    return BillboardMesh$DrawOrder$NEAR_FIRST_instance;
  }
  BillboardMesh$DrawOrder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DrawOrder',
    interfaces: [Enum]
  };
  function BillboardMesh$DrawOrder$values() {
    return [BillboardMesh$DrawOrder$AS_IS_getInstance(), BillboardMesh$DrawOrder$FAR_FIRST_getInstance(), BillboardMesh$DrawOrder$NEAR_FIRST_getInstance()];
  }
  BillboardMesh$DrawOrder.values = BillboardMesh$DrawOrder$values;
  function BillboardMesh$DrawOrder$valueOf(name) {
    switch (name) {
      case 'AS_IS':
        return BillboardMesh$DrawOrder$AS_IS_getInstance();
      case 'FAR_FIRST':
        return BillboardMesh$DrawOrder$FAR_FIRST_getInstance();
      case 'NEAR_FIRST':
        return BillboardMesh$DrawOrder$NEAR_FIRST_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.util.BillboardMesh.DrawOrder.' + name);
    }
  }
  BillboardMesh$DrawOrder.valueOf_61zpoe$ = BillboardMesh$DrawOrder$valueOf;
  function BillboardMesh$Companion() {
    BillboardMesh$Companion_instance = this;
    this.ATTR_EXTENTS = new Attribute('aExtents', AttributeType$VEC_2F_getInstance());
    this.ATTR_TEX_EXTENTS = new Attribute('aTexExtents', AttributeType$VEC_2F_getInstance());
    this.ATTR_ROTATION = new Attribute('aRotation', AttributeType$FLOAT_getInstance());
    this.TEX_SIZE_FULL = new Vec2f(1.0, 1.0);
    this.TEX_CENTER = new Vec2f(0.5, 0.5);
    this.SZ_EXT_SIGNS_0 = listOf([new Vec2f(-1.0, -1.0), new Vec2f(1.0, -1.0), new Vec2f(-1.0, 1.0), new Vec2f(1.0, 1.0)]);
    this.TEX_EXT_SIGNS_0 = listOf([new Vec2f(-1.0, 1.0), new Vec2f(1.0, 1.0), new Vec2f(-1.0, -1.0), new Vec2f(1.0, -1.0)]);
  }
  BillboardMesh$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var BillboardMesh$Companion_instance = null;
  function BillboardMesh$Companion_getInstance() {
    if (BillboardMesh$Companion_instance === null) {
      new BillboardMesh$Companion();
    }
    return BillboardMesh$Companion_instance;
  }
  function BillboardMesh_init$lambda($receiver) {
    $receiver.colorModel = ColorModel$VERTEX_COLOR_getInstance();
    $receiver.lightModel = LightModel$NO_LIGHTING_getInstance();
    $receiver.isVertexColor = true;
    $receiver.isTextureColor = true;
    $receiver.isDiscardTranslucent = true;
    $receiver.isReceivingShadows = false;
    return Unit;
  }
  BillboardMesh.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BillboardMesh',
    interfaces: [Mesh]
  };
  function billboardShader$lambda($receiver) {
    return Unit;
  }
  function billboardShader(propsInit) {
    if (propsInit === void 0)
      propsInit = billboardShader$lambda;
    var props = new ShaderProps();
    propsInit(props);
    return new BillboardShader(props, new GlslGenerator());
  }
  function BillboardShader(props, generator) {
    BasicShader.call(this, props, generator);
    var $receiver = generator.customAttributes;
    var element = BillboardMesh$Companion_getInstance().ATTR_EXTENTS;
    $receiver.add_11rb$(element);
    var $receiver_0 = generator.customAttributes;
    var element_0 = BillboardMesh$Companion_getInstance().ATTR_TEX_EXTENTS;
    $receiver_0.add_11rb$(element_0);
    var $receiver_1 = generator.customAttributes;
    var element_1 = BillboardMesh$Companion_getInstance().ATTR_ROTATION;
    $receiver_1.add_11rb$(element_1);
    var $receiver_2 = generator.injectors;
    var element_2 = new BillboardShader_init$ObjectLiteral(this, generator);
    $receiver_2.add_11rb$(element_2);
  }
  BillboardShader.prototype.vsAfterInputGeom_0 = function (text) {
    text.append_gw00v9$('out vec2 vsSzExtents;\n');
    text.append_gw00v9$('out vec4 vsVertColor;\n');
    text.append_gw00v9$('out float vsRotation;\n');
    text.append_gw00v9$('out vec2 vsTexExtents;\nout vec2 vsCenterUv;\n');
  };
  function BillboardShader$vsEndGeom$lambda(it) {
    return contains(it, GlslGenerator$Companion_getInstance().V_TEX_COORD) || contains(it, GlslGenerator$Companion_getInstance().V_COLOR);
  }
  BillboardShader.prototype.vsEndGeom_0 = function (text) {
    var lines = toMutableList(split(text.toString(), Kotlin.charArrayOf(10)));
    removeAll(lines, BillboardShader$vsEndGeom$lambda);
    text.clear();
    var tmp$;
    tmp$ = lines.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      text.append_gw00v9$(element).append_s8itvh$(10);
    }
    text.append_gw00v9$('gl_Position = ' + GlslGenerator$Companion_getInstance().U_VIEW_MATRIX + ' * (' + GlslGenerator$Companion_getInstance().U_MODEL_MATRIX + ' * vec4(' + Attribute$Companion_getInstance().POSITIONS + ', 1.0));' + '\n');
    text.append_gw00v9$('vsSzExtents = ' + BillboardMesh$Companion_getInstance().ATTR_EXTENTS + ';' + '\n');
    text.append_gw00v9$('vsTexExtents = ' + BillboardMesh$Companion_getInstance().ATTR_TEX_EXTENTS + ';' + '\n');
    text.append_gw00v9$('vsVertColor = ' + Attribute$Companion_getInstance().COLORS + ';' + '\n');
    text.append_gw00v9$('vsCenterUv = ' + Attribute$Companion_getInstance().TEXTURE_COORDS + ';' + '\n');
    text.append_gw00v9$('vsRotation = ' + BillboardMesh$Companion_getInstance().ATTR_ROTATION + ';' + '\n');
  };
  BillboardShader.prototype.geomShaderGeom_0 = function (text) {
    text.append_gw00v9$(trimIndent('\n            layout (points) in;\n            layout (triangle_strip, max_vertices = 4) out;\n\n            in vec2 vsSzExtents[];\n            in vec2 vsTexExtents[];\n            in float vsRotation[];\n\n            in vec4 vsVertColor[];\n            out vec4 vFragmentColor;\n\n            in vec2 vsCenterUv[];\n            out vec2 vTexCoord;\n\n            uniform mat4 uProjMatrix;\n\n            void main() {\n                vFragmentColor = vsVertColor[0];\n\n                vec4 center = gl_in[0].gl_Position;\n                float rot = vsRotation[0];\n                vec2 ext = vsSzExtents[0];\n                vec4 rt = vec4(ext.x * cos(rot), ext.x * sin(rot), 0.0, 0.0);\n                vec4 up = vec4(ext.y * -sin(rot), ext.y * cos(rot), 0.0, 0.0);\n\n                gl_Position = uProjMatrix * (center - rt - up);\n                vTexCoord = vsCenterUv[0] + vec2(-vsTexExtents[0].x, vsTexExtents[0].y);\n                EmitVertex();\n                gl_Position = uProjMatrix * (center + rt - up);\n                vTexCoord = vsCenterUv[0] + vec2(vsTexExtents[0].x, vsTexExtents[0].y);\n                EmitVertex();\n                gl_Position = uProjMatrix * (center - rt + up);\n                vTexCoord = vsCenterUv[0] + vec2(-vsTexExtents[0].x, -vsTexExtents[0].y);\n                EmitVertex();\n                gl_Position = uProjMatrix * (center + rt + up);\n                vTexCoord = vsCenterUv[0] + vec2(vsTexExtents[0].x, -vsTexExtents[0].y);\n                EmitVertex();\n                EndPrimitive();\n            }\n        '));
  };
  BillboardShader.prototype.vsAfterInputQuad_0 = function (text) {
    text.append_gw00v9$('uniform mat4 uProjMatrix;\n');
  };
  BillboardShader.prototype.vsEndQuad_0 = function (text) {
    text.append_gw00v9$(trimIndent('\n' + '            float rot = ' + BillboardMesh$Companion_getInstance().ATTR_ROTATION + ';' + '\n' + '            vec2 ext = ' + BillboardMesh$Companion_getInstance().ATTR_EXTENTS + ';' + '\n' + '            vec4 rt = vec4(ext.x * cos(rot), ext.x * sin(rot), 0.0, 0.0);' + '\n' + '            vec4 up = vec4(ext.y * -sin(rot), ext.y * cos(rot), 0.0, 0.0);' + '\n' + '            vec4 center = ' + GlslGenerator$Companion_getInstance().U_VIEW_MATRIX + ' * (' + GlslGenerator$Companion_getInstance().U_MODEL_MATRIX + ' * vec4(' + Attribute$Companion_getInstance().POSITIONS + ', 1.0));' + '\n' + '            gl_Position = ' + GlslGenerator$Companion_getInstance().U_PROJ_MATRIX + ' * (center + rt + up);' + '\n' + '            ' + GlslGenerator$Companion_getInstance().V_TEX_COORD + ' += ' + BillboardMesh$Companion_getInstance().ATTR_TEX_EXTENTS + ';' + '\n' + '        ')).append_s8itvh$(10);
  };
  function BillboardShader_init$ObjectLiteral(this$BillboardShader, closure$generator) {
    this.this$BillboardShader = this$BillboardShader;
    this.closure$generator = closure$generator;
  }
  BillboardShader_init$ObjectLiteral.prototype.vsAfterInput_kv1jfs$ = function (shaderProps, node, text, ctx) {
    if (ctx.glCapabilities.geometryShader) {
      this.this$BillboardShader.vsAfterInputGeom_0(text);
    }
     else {
      this.this$BillboardShader.vsAfterInputQuad_0(text);
    }
  };
  BillboardShader_init$ObjectLiteral.prototype.vsEnd_kv1jfs$ = function (shaderProps, node, text, ctx) {
    if (ctx.glCapabilities.geometryShader) {
      this.this$BillboardShader.vsEndGeom_0(text);
    }
     else {
      this.this$BillboardShader.vsEndQuad_0(text);
    }
  };
  BillboardShader_init$ObjectLiteral.prototype.geomShader_kv1jfs$ = function (shaderProps, node, text, ctx) {
    if (ctx.glCapabilities.geometryShader) {
      this.this$BillboardShader.geomShaderGeom_0(text);
    }
  };
  BillboardShader_init$ObjectLiteral.prototype.fsAfterSampling_kv1jfs$ = function (shaderProps, node, text, ctx) {
    text.append_gw00v9$(this.closure$generator.fsOutBody + ' = ' + GlslGenerator$Companion_getInstance().L_FS_TEX_COLOR + ' * ' + GlslGenerator$Companion_getInstance().L_FS_VERTEX_COLOR + ';' + '\n');
  };
  BillboardShader_init$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [GlslGenerator$GlslInjector]
  };
  BillboardShader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BillboardShader',
    interfaces: [BasicShader]
  };
  function BoundingBox() {
    this.mutMin_0 = MutableVec3f_init();
    this.mutMax_0 = MutableVec3f_init();
    this.mutSize_0 = MutableVec3f_init();
    this.mutCenter_0 = MutableVec3f_init();
    this.isEmpty_xiuk4h$_0 = true;
    this.min = this.mutMin_0;
    this.max = this.mutMax_0;
    this.size = this.mutSize_0;
    this.center = this.mutCenter_0;
    this.isBatchUpdate_4nlnat$_0 = false;
  }
  Object.defineProperty(BoundingBox.prototype, 'isEmpty', {
    get: function () {
      return this.isEmpty_xiuk4h$_0;
    },
    set: function (isEmpty) {
      this.isEmpty_xiuk4h$_0 = isEmpty;
    }
  });
  Object.defineProperty(BoundingBox.prototype, 'isBatchUpdate', {
    get: function () {
      return this.isBatchUpdate_4nlnat$_0;
    },
    set: function (value) {
      this.isBatchUpdate_4nlnat$_0 = value;
      if (!value) {
        this.updateSizeAndCenter_0();
      }
    }
  });
  BoundingBox.prototype.updateSizeAndCenter_0 = function () {
    if (!this.isBatchUpdate) {
      this.mutMax_0.subtract_2gj7b4$(this.mutMin_0, this.mutSize_0);
      this.size.scale_749b8l$(0.5, this.mutCenter_0).add_czzhiu$(this.min);
    }
  };
  BoundingBox.prototype.addPoint_0 = function (point) {
    if (this.isEmpty) {
      this.mutMin_0.set_czzhiu$(point);
      this.mutMax_0.set_czzhiu$(point);
      this.isEmpty = false;
    }
     else {
      if (point.x < this.min.x) {
        this.mutMin_0.x = point.x;
      }
      if (point.y < this.min.y) {
        this.mutMin_0.y = point.y;
      }
      if (point.z < this.min.z) {
        this.mutMin_0.z = point.z;
      }
      if (point.x > this.max.x) {
        this.mutMax_0.x = point.x;
      }
      if (point.y > this.max.y) {
        this.mutMax_0.y = point.y;
      }
      if (point.z > this.max.z) {
        this.mutMax_0.z = point.z;
      }
    }
  };
  BoundingBox.prototype.batchUpdate_xanadp$ = defineInlineFunction('kool.de.fabmax.kool.util.BoundingBox.batchUpdate_xanadp$', function (block) {
    var wasBatchUpdate = this.isBatchUpdate;
    this.isBatchUpdate = true;
    block(this);
    this.isBatchUpdate = wasBatchUpdate;
  });
  BoundingBox.prototype.isFuzzyEqual_ea4od8$ = function (other) {
    return this.isEmpty === other.isEmpty && this.min.isFuzzyEqual_2qa7tb$(other.min) && this.max.isFuzzyEqual_2qa7tb$(other.max);
  };
  BoundingBox.prototype.clear = function () {
    this.isEmpty = true;
    this.mutMin_0.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.mutMax_0.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.updateSizeAndCenter_0();
    return this;
  };
  BoundingBox.prototype.add_czzhiu$ = function (point) {
    this.addPoint_0(point);
    this.updateSizeAndCenter_0();
    return this;
  };
  BoundingBox.prototype.add_uqk38n$ = function (points) {
    this.add_3y53ni$(points, get_indices(points));
    return this;
  };
  BoundingBox.prototype.add_3y53ni$ = function (points, range) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = range.first;
    tmp$_0 = range.last;
    tmp$_1 = range.step;
    for (var i = tmp$; i <= tmp$_0; i += tmp$_1) {
      this.addPoint_0(points.get_za3lpa$(i));
    }
    this.updateSizeAndCenter_0();
    return this;
  };
  BoundingBox.prototype.add_ea4od8$ = function (aabb) {
    if (!aabb.isEmpty) {
      this.addPoint_0(aabb.min);
      this.addPoint_0(aabb.max);
      this.updateSizeAndCenter_0();
    }
    return this;
  };
  BoundingBox.prototype.expand_czzhiu$ = function (e) {
    if (this.isEmpty) {
      throw KoolException_init('Empty BoundingBox cannot be expanded');
    }
    this.mutMin_0.minusAssign_czzhiu$(e);
    this.mutMax_0.plusAssign_czzhiu$(e);
    this.updateSizeAndCenter_0();
    return this;
  };
  BoundingBox.prototype.signedExpand_czzhiu$ = function (e) {
    if (this.isEmpty) {
      throw KoolException_init('Empty BoundingBox cannot be expanded');
    }
    if (e.x > 0)
      this.mutMax_0.x = this.mutMax_0.x + e.x;
    else
      this.mutMin_0.x = this.mutMin_0.x + e.x;
    if (e.y > 0)
      this.mutMax_0.y = this.mutMax_0.y + e.y;
    else
      this.mutMin_0.y = this.mutMin_0.y + e.y;
    if (e.z > 0)
      this.mutMax_0.z = this.mutMax_0.z + e.z;
    else
      this.mutMin_0.z = this.mutMin_0.z + e.z;
    this.updateSizeAndCenter_0();
    return this;
  };
  BoundingBox.prototype.set_ea4od8$ = function (other) {
    this.mutMin_0.set_czzhiu$(other.min);
    this.mutMax_0.set_czzhiu$(other.max);
    this.mutSize_0.set_czzhiu$(other.size);
    this.mutCenter_0.set_czzhiu$(other.center);
    this.isEmpty = other.isEmpty;
    return this;
  };
  BoundingBox.prototype.set_4lfkt4$ = function (min, max) {
    this.isEmpty = false;
    this.mutMin_0.set_czzhiu$(min);
    this.mutMax_0.set_czzhiu$(max);
    this.updateSizeAndCenter_0();
    return this;
  };
  BoundingBox.prototype.set_w8lrqs$ = function (minX, minY, minZ, maxX, maxY, maxZ) {
    this.isEmpty = false;
    this.mutMin_0.set_y2kzbl$(minX, minY, minZ);
    this.mutMax_0.set_y2kzbl$(maxX, maxY, maxZ);
    this.updateSizeAndCenter_0();
    return this;
  };
  BoundingBox.prototype.move_czzhiu$ = function (offset) {
    return this.move_y2kzbl$(offset.x, offset.y, offset.z);
  };
  BoundingBox.prototype.move_y2kzbl$ = function (x, y, z) {
    if (this.isEmpty) {
      throw KoolException_init('Empty BoundingBox cannot be moved');
    }
    this.mutMin_0.x = this.mutMin_0.x + x;
    this.mutMin_0.y = this.mutMin_0.y + y;
    this.mutMin_0.z = this.mutMin_0.z + z;
    this.mutMax_0.x = this.mutMax_0.x + x;
    this.mutMax_0.y = this.mutMax_0.y + y;
    this.mutMax_0.z = this.mutMax_0.z + z;
    this.mutCenter_0.x = this.mutCenter_0.x + x;
    this.mutCenter_0.y = this.mutCenter_0.y + y;
    this.mutCenter_0.z = this.mutCenter_0.z + z;
    return this;
  };
  BoundingBox.prototype.setMerged_hnxjto$ = function (aabb1, aabb2) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10;
    tmp$_0 = this.mutMin_0;
    if (aabb1.min.x < aabb2.min.x) {
      tmp$ = aabb1.min.x;
    }
     else {
      tmp$ = aabb2.min.x;
    }
    tmp$_0.x = tmp$;
    tmp$_2 = this.mutMin_0;
    if (aabb1.min.y < aabb2.min.y) {
      tmp$_1 = aabb1.min.y;
    }
     else {
      tmp$_1 = aabb2.min.y;
    }
    tmp$_2.y = tmp$_1;
    tmp$_4 = this.mutMin_0;
    if (aabb1.min.z < aabb2.min.z) {
      tmp$_3 = aabb1.min.z;
    }
     else {
      tmp$_3 = aabb2.min.z;
    }
    tmp$_4.z = tmp$_3;
    tmp$_6 = this.mutMax_0;
    if (aabb1.max.x > aabb2.max.x) {
      tmp$_5 = aabb1.max.x;
    }
     else {
      tmp$_5 = aabb2.max.x;
    }
    tmp$_6.x = tmp$_5;
    tmp$_8 = this.mutMax_0;
    if (aabb1.max.y > aabb2.max.y) {
      tmp$_7 = aabb1.max.y;
    }
     else {
      tmp$_7 = aabb2.max.y;
    }
    tmp$_8.y = tmp$_7;
    tmp$_10 = this.mutMax_0;
    if (aabb1.max.z > aabb2.max.z) {
      tmp$_9 = aabb1.max.z;
    }
     else {
      tmp$_9 = aabb2.max.z;
    }
    tmp$_10.z = tmp$_9;
    this.isEmpty = false;
    this.updateSizeAndCenter_0();
    return this;
  };
  BoundingBox.prototype.isIncluding_czzhiu$ = function (point) {
    return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;
  };
  BoundingBox.prototype.isIncluding_y2kzbl$ = function (x, y, z) {
    return x >= this.min.x && x <= this.max.x && y >= this.min.y && y <= this.max.y && z >= this.min.z && z <= this.max.z;
  };
  BoundingBox.prototype.isIncluding_ea4od8$ = function (aabb) {
    return this.isIncluding_czzhiu$(aabb.min) && this.isIncluding_czzhiu$(aabb.max);
  };
  BoundingBox.prototype.isIntersecting_ea4od8$ = function (aabb) {
    return this.min.x <= aabb.max.x && this.max.x >= aabb.min.x && this.min.y <= aabb.max.y && this.max.y >= aabb.min.y && this.min.z <= aabb.max.z && this.max.z >= aabb.min.z;
  };
  BoundingBox.prototype.clampToBounds_5s4mqq$ = function (point) {
    var $receiver = point.x;
    var min = this.min.x;
    var max = this.max.x;
    var clamp$result;
    if ($receiver < min) {
      clamp$result = min;
    }
     else if ($receiver > max) {
      clamp$result = max;
    }
     else {
      clamp$result = $receiver;
    }
    point.x = clamp$result;
    var $receiver_0 = point.y;
    var min_0 = this.min.y;
    var max_0 = this.max.y;
    var clamp$result_0;
    if ($receiver_0 < min_0) {
      clamp$result_0 = min_0;
    }
     else if ($receiver_0 > max_0) {
      clamp$result_0 = max_0;
    }
     else {
      clamp$result_0 = $receiver_0;
    }
    point.y = clamp$result_0;
    var $receiver_1 = point.z;
    var min_1 = this.min.z;
    var max_1 = this.max.z;
    var clamp$result_1;
    if ($receiver_1 < min_1) {
      clamp$result_1 = min_1;
    }
     else if ($receiver_1 > max_1) {
      clamp$result_1 = max_1;
    }
     else {
      clamp$result_1 = $receiver_1;
    }
    point.z = clamp$result_1;
  };
  BoundingBox.prototype.pointDistance_czzhiu$ = function (pt) {
    var x = this.pointDistanceSqr_czzhiu$(pt);
    return Math_0.sqrt(x);
  };
  BoundingBox.prototype.pointDistanceSqr_czzhiu$ = function (pt) {
    if (this.isIncluding_czzhiu$(pt)) {
      return 0.0;
    }
    var x = 0.0;
    var y = 0.0;
    var z = 0.0;
    var tmp = pt.x - this.min.x;
    if (tmp < 0) {
      x = tmp;
    }
     else {
      tmp = this.max.x - pt.x;
      if (tmp < 0) {
        x = tmp;
      }
    }
    tmp = pt.y - this.min.y;
    if (tmp < 0) {
      y = tmp;
    }
     else {
      tmp = this.max.y - pt.y;
      if (tmp < 0) {
        y = tmp;
      }
    }
    tmp = pt.z - this.min.z;
    if (tmp < 0) {
      z = tmp;
    }
     else {
      tmp = this.max.z - pt.z;
      if (tmp < 0) {
        z = tmp;
      }
    }
    return x * x + y * y + z * z;
  };
  BoundingBox.prototype.hitDistanceSqr_nvyeur$ = function (ray) {
    var tmin;
    var tmax;
    var tymin;
    var tymax;
    var tzmin;
    var tzmax;
    if (this.isEmpty) {
      return kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    }
    if (this.isIncluding_czzhiu$(ray.origin)) {
      return 0.0;
    }
    var div = 1.0 / ray.direction.x;
    if (div >= 0.0) {
      tmin = (this.min.x - ray.origin.x) * div;
      tmax = (this.max.x - ray.origin.x) * div;
    }
     else {
      tmin = (this.max.x - ray.origin.x) * div;
      tmax = (this.min.x - ray.origin.x) * div;
    }
    div = 1.0 / ray.direction.y;
    if (div >= 0.0) {
      tymin = (this.min.y - ray.origin.y) * div;
      tymax = (this.max.y - ray.origin.y) * div;
    }
     else {
      tymin = (this.max.y - ray.origin.y) * div;
      tymax = (this.min.y - ray.origin.y) * div;
    }
    if (tmin > tymax || tymin > tmax) {
      return kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    }
    if (tymin > tmin) {
      tmin = tymin;
    }
    if (tymax < tmax) {
      tmax = tymax;
    }
    div = 1.0 / ray.direction.z;
    if (div >= 0.0) {
      tzmin = (this.min.z - ray.origin.z) * div;
      tzmax = (this.max.z - ray.origin.z) * div;
    }
     else {
      tzmin = (this.max.z - ray.origin.z) * div;
      tzmax = (this.min.z - ray.origin.z) * div;
    }
    if (tmin > tzmax || tzmin > tmax) {
      return kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    }
    if (tzmin > tmin) {
      tmin = tzmin;
    }
    if (tmin > 0) {
      var comp = ray.direction.x * tmin;
      var dist = comp * comp;
      comp = ray.direction.y * tmin;
      dist += comp * comp;
      comp = ray.direction.z * tmin;
      dist += comp * comp;
      return dist / ray.direction.sqrLength();
    }
     else {
      return kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    }
  };
  BoundingBox.prototype.toString = function () {
    var tmp$;
    if (this.isEmpty) {
      tmp$ = '[empty]';
    }
     else {
      tmp$ = '[min=' + this.min + ', max=' + this.max + ']';
    }
    return tmp$;
  };
  BoundingBox.prototype.equals = function (other) {
    var tmp$, tmp$_0;
    if (this === other)
      return true;
    if (!Kotlin.isType(other, BoundingBox))
      return false;
    if (this.isEmpty !== other.isEmpty)
      return false;
    if (!((tmp$ = this.min) != null ? tmp$.equals(other.min) : null))
      return false;
    if (!((tmp$_0 = this.max) != null ? tmp$_0.equals(other.max) : null))
      return false;
    return true;
  };
  BoundingBox.prototype.hashCode = function () {
    var result = hashCode(this.isEmpty);
    result = (31 * result | 0) + this.min.hashCode() | 0;
    result = (31 * result | 0) + this.max.hashCode() | 0;
    return result;
  };
  BoundingBox.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BoundingBox',
    interfaces: []
  };
  function BoundingBox_init(min, max, $this) {
    $this = $this || Object.create(BoundingBox.prototype);
    BoundingBox.call($this);
    $this.set_4lfkt4$(min, max);
    return $this;
  }
  function Buffer() {
  }
  Buffer.prototype.removeAt_za3lpa$ = function (index) {
    if (this.position > index) {
      this.position = this.position - 1 | 0;
    }
    if (this.limit > index) {
      this.limit = this.limit - 1 | 0;
    }
  };
  Buffer.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Buffer',
    interfaces: []
  };
  function Uint8Buffer() {
  }
  Uint8Buffer.prototype.plusAssign_s8j3t7$ = function (value) {
    this.put_s8j3t7$(value);
  };
  Uint8Buffer.prototype.put_fqrh44$ = function (data) {
    return this.put_mj6st8$(data, 0, data.length);
  };
  Uint8Buffer.prototype.removeAt_za3lpa$ = function (index) {
    var tmp$;
    tmp$ = this.position;
    for (var i = index; i < tmp$; i++) {
      this.set_6t1wet$(i, this.get_za3lpa$(i + 1 | 0));
    }
    Buffer.prototype.removeAt_za3lpa$.call(this, index);
  };
  Uint8Buffer.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Uint8Buffer',
    interfaces: [Buffer]
  };
  function Uint16Buffer() {
  }
  Uint16Buffer.prototype.plusAssign_mq22fl$ = function (value) {
    this.put_mq22fl$(value);
  };
  Uint16Buffer.prototype.put_gmedm2$ = function (data) {
    return this.put_359eei$(data, 0, data.length);
  };
  Uint16Buffer.prototype.removeAt_za3lpa$ = function (index) {
    var tmp$;
    tmp$ = this.position;
    for (var i = index; i < tmp$; i++) {
      this.set_2bqt6h$(i, this.get_za3lpa$(i + 1 | 0));
    }
    Buffer.prototype.removeAt_za3lpa$.call(this, index);
  };
  Uint16Buffer.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Uint16Buffer',
    interfaces: [Buffer]
  };
  function Uint32Buffer() {
  }
  Uint32Buffer.prototype.plusAssign_za3lpa$ = function (value) {
    this.put_za3lpa$(value);
  };
  Uint32Buffer.prototype.put_q5rwfd$ = function (data) {
    return this.put_nd5v6f$(data, 0, data.length);
  };
  Uint32Buffer.prototype.removeAt_za3lpa$ = function (index) {
    var tmp$;
    tmp$ = this.position;
    for (var i = index; i < tmp$; i++) {
      this.set_vux9f0$(i, this.get_za3lpa$(i + 1 | 0));
    }
    Buffer.prototype.removeAt_za3lpa$.call(this, index);
  };
  Uint32Buffer.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Uint32Buffer',
    interfaces: [Buffer]
  };
  function Float32Buffer() {
  }
  Float32Buffer.prototype.plusAssign_mx4ult$ = function (value) {
    this.put_mx4ult$(value);
  };
  Float32Buffer.prototype.put_q3cr5i$ = function (data) {
    return this.put_kgymra$(data, 0, data.length);
  };
  Float32Buffer.prototype.removeAt_za3lpa$ = function (index) {
    var tmp$;
    tmp$ = this.position;
    for (var i = index; i < tmp$; i++) {
      this.set_24o109$(i, this.get_za3lpa$(i + 1 | 0));
    }
    Buffer.prototype.removeAt_za3lpa$.call(this, index);
  };
  Float32Buffer.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Float32Buffer',
    interfaces: [Buffer]
  };
  function Vec2fView(buf, offset) {
    MutableVec2f_init(this);
    this.buf_0 = buf;
    this.offset = offset;
  }
  Vec2fView.prototype.get_za3lpa$ = function (i) {
    return this.buf_0.get_za3lpa$(this.offset + i | 0);
  };
  Vec2fView.prototype.set_24o109$ = function (i, v) {
    this.buf_0.set_24o109$(this.offset + i | 0, v);
  };
  Vec2fView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec2fView',
    interfaces: [MutableVec2f]
  };
  function Vec3fView(buf, offset) {
    MutableVec3f_init(this);
    this.buf_0 = buf;
    this.offset = offset;
  }
  Vec3fView.prototype.get_za3lpa$ = function (i) {
    return this.buf_0.get_za3lpa$(this.offset + i | 0);
  };
  Vec3fView.prototype.set_24o109$ = function (i, v) {
    this.buf_0.set_24o109$(this.offset + i | 0, v);
  };
  Vec3fView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec3fView',
    interfaces: [MutableVec3f]
  };
  function Vec4fView(buf, offset) {
    MutableVec4f_init(this);
    this.buf_0 = buf;
    this.offset = offset;
  }
  Vec4fView.prototype.get_za3lpa$ = function (i) {
    return this.buf_0.get_za3lpa$(this.offset + i | 0);
  };
  Vec4fView.prototype.set_24o109$ = function (i, v) {
    this.buf_0.set_24o109$(this.offset + i | 0, v);
  };
  Vec4fView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec4fView',
    interfaces: [MutableVec4f]
  };
  function Color(r, g, b, a) {
    Color$Companion_getInstance();
    if (a === void 0)
      a = 1.0;
    Vec4f.call(this, r, g, b, a);
  }
  Object.defineProperty(Color.prototype, 'r', {
    get: function () {
      return this.get_za3lpa$(0);
    }
  });
  Object.defineProperty(Color.prototype, 'g', {
    get: function () {
      return this.get_za3lpa$(1);
    }
  });
  Object.defineProperty(Color.prototype, 'b', {
    get: function () {
      return this.get_za3lpa$(2);
    }
  });
  Object.defineProperty(Color.prototype, 'a', {
    get: function () {
      return this.get_za3lpa$(3);
    }
  });
  Color.prototype.mix_jpxij3$ = function (other, weight, result) {
    result.r = other.r * weight + this.r * (1.0 - weight);
    result.g = other.g * weight + this.g * (1.0 - weight);
    result.b = other.b * weight + this.b * (1.0 - weight);
    result.a = other.a * weight + this.a * (1.0 - weight);
    return result;
  };
  Color.prototype.withAlpha_mx4ult$ = function (alpha) {
    return new MutableColor(this.r, this.g, this.b, alpha);
  };
  function Color$Companion() {
    Color$Companion_instance = this;
    this.BLACK = new Color(0.0, 0.0, 0.0, 1.0);
    this.DARK_GRAY = new Color(0.25, 0.25, 0.25, 1.0);
    this.GRAY = new Color(0.5, 0.5, 0.5, 1.0);
    this.LIGHT_GRAY = new Color(0.75, 0.75, 0.75, 1.0);
    this.WHITE = new Color(1.0, 1.0, 1.0, 1.0);
    this.RED = new Color(1.0, 0.0, 0.0, 1.0);
    this.GREEN = new Color(0.0, 1.0, 0.0, 1.0);
    this.BLUE = new Color(0.0, 0.0, 1.0, 1.0);
    this.YELLOW = new Color(1.0, 1.0, 0.0, 1.0);
    this.CYAN = new Color(0.0, 1.0, 1.0, 1.0);
    this.MAGENTA = new Color(1.0, 0.0, 1.0, 1.0);
    this.ORANGE = new Color(1.0, 0.5, 0.0, 1.0);
    this.LIME = new Color(0.7, 1.0, 0.0, 1.0);
    this.LIGHT_RED = new Color(1.0, 0.5, 0.5, 1.0);
    this.LIGHT_GREEN = new Color(0.5, 1.0, 0.5, 1.0);
    this.LIGHT_BLUE = new Color(0.5, 0.5, 1.0, 1.0);
    this.LIGHT_YELLOW = new Color(1.0, 1.0, 0.5, 1.0);
    this.LIGHT_CYAN = new Color(0.5, 1.0, 1.0, 1.0);
    this.LIGHT_MAGENTA = new Color(1.0, 0.5, 1.0, 1.0);
    this.LIGHT_ORANGE = new Color(1.0, 0.75, 0.5, 1.0);
    this.DARK_RED = new Color(0.5, 0.0, 0.0, 1.0);
    this.DARK_GREEN = new Color(0.0, 0.5, 0.0, 1.0);
    this.DARK_BLUE = new Color(0.0, 0.0, 0.5, 1.0);
    this.DARK_YELLOW = new Color(0.5, 0.5, 0.0, 1.0);
    this.DARK_CYAN = new Color(0.0, 0.5, 0.5, 1.0);
    this.DARK_MAGENTA = new Color(0.5, 0.0, 0.5, 1.0);
    this.DARK_ORANGE = new Color(0.5, 0.25, 0.0, 1.0);
    this.MD_RED_50 = this.fromHex_61zpoe$('FFEBEE');
    this.MD_RED_100 = this.fromHex_61zpoe$('FFCDD2');
    this.MD_RED_200 = this.fromHex_61zpoe$('EF9A9A');
    this.MD_RED_300 = this.fromHex_61zpoe$('E57373');
    this.MD_RED_400 = this.fromHex_61zpoe$('EF5350');
    this.MD_RED_500 = this.fromHex_61zpoe$('F44336');
    this.MD_RED_600 = this.fromHex_61zpoe$('E53935');
    this.MD_RED_700 = this.fromHex_61zpoe$('D32F2F');
    this.MD_RED_800 = this.fromHex_61zpoe$('C62828');
    this.MD_RED_900 = this.fromHex_61zpoe$('B71C1C');
    this.MD_RED_A100 = this.fromHex_61zpoe$('FF8A80');
    this.MD_RED_A200 = this.fromHex_61zpoe$('FF5252');
    this.MD_RED_A400 = this.fromHex_61zpoe$('FF1744');
    this.MD_RED_A700 = this.fromHex_61zpoe$('D50000');
    this.MD_RED = this.MD_RED_500;
    this.MD_PINK_50 = this.fromHex_61zpoe$('FCE4EC');
    this.MD_PINK_100 = this.fromHex_61zpoe$('F8BBD0');
    this.MD_PINK_200 = this.fromHex_61zpoe$('F48FB1');
    this.MD_PINK_300 = this.fromHex_61zpoe$('F06292');
    this.MD_PINK_400 = this.fromHex_61zpoe$('EC407A');
    this.MD_PINK_500 = this.fromHex_61zpoe$('E91E63');
    this.MD_PINK_600 = this.fromHex_61zpoe$('D81B60');
    this.MD_PINK_700 = this.fromHex_61zpoe$('C2185B');
    this.MD_PINK_800 = this.fromHex_61zpoe$('AD1457');
    this.MD_PINK_900 = this.fromHex_61zpoe$('880E4F');
    this.MD_PINK_A100 = this.fromHex_61zpoe$('FF80AB');
    this.MD_PINK_A200 = this.fromHex_61zpoe$('FF4081');
    this.MD_PINK_A400 = this.fromHex_61zpoe$('F50057');
    this.MD_PINK_A700 = this.fromHex_61zpoe$('C51162');
    this.MD_PINK = this.MD_PINK_500;
    this.MD_PURPLE_50 = this.fromHex_61zpoe$('F3E5F5');
    this.MD_PURPLE_100 = this.fromHex_61zpoe$('E1BEE7');
    this.MD_PURPLE_200 = this.fromHex_61zpoe$('CE93D8');
    this.MD_PURPLE_300 = this.fromHex_61zpoe$('BA68C8');
    this.MD_PURPLE_400 = this.fromHex_61zpoe$('AB47BC');
    this.MD_PURPLE_500 = this.fromHex_61zpoe$('9C27B0');
    this.MD_PURPLE_600 = this.fromHex_61zpoe$('8E24AA');
    this.MD_PURPLE_700 = this.fromHex_61zpoe$('7B1FA2');
    this.MD_PURPLE_800 = this.fromHex_61zpoe$('6A1B9A');
    this.MD_PURPLE_900 = this.fromHex_61zpoe$('4A148C');
    this.MD_PURPLE_A100 = this.fromHex_61zpoe$('EA80FC');
    this.MD_PURPLE_A200 = this.fromHex_61zpoe$('E040FB');
    this.MD_PURPLE_A400 = this.fromHex_61zpoe$('D500F9');
    this.MD_PURPLE_A700 = this.fromHex_61zpoe$('AA00FF');
    this.MD_PURPLE = this.MD_PURPLE_500;
    this.MD_DEEP_PURPLE_50 = this.fromHex_61zpoe$('EDE7F6');
    this.MD_DEEP_PURPLE_100 = this.fromHex_61zpoe$('D1C4E9');
    this.MD_DEEP_PURPLE_200 = this.fromHex_61zpoe$('B39DDB');
    this.MD_DEEP_PURPLE_300 = this.fromHex_61zpoe$('9575CD');
    this.MD_DEEP_PURPLE_400 = this.fromHex_61zpoe$('7E57C2');
    this.MD_DEEP_PURPLE_500 = this.fromHex_61zpoe$('673AB7');
    this.MD_DEEP_PURPLE_600 = this.fromHex_61zpoe$('5E35B1');
    this.MD_DEEP_PURPLE_700 = this.fromHex_61zpoe$('512DA8');
    this.MD_DEEP_PURPLE_800 = this.fromHex_61zpoe$('4527A0');
    this.MD_DEEP_PURPLE_900 = this.fromHex_61zpoe$('311B92');
    this.MD_DEEP_PURPLE_A100 = this.fromHex_61zpoe$('B388FF');
    this.MD_DEEP_PURPLE_A200 = this.fromHex_61zpoe$('7C4DFF');
    this.MD_DEEP_PURPLE_A400 = this.fromHex_61zpoe$('651FFF');
    this.MD_DEEP_PURPLE_A700 = this.fromHex_61zpoe$('6200EA');
    this.MD_DEEP_PURPLE = this.MD_DEEP_PURPLE_500;
    this.MD_INDIGO_50 = this.fromHex_61zpoe$('E8EAF6');
    this.MD_INDIGO_100 = this.fromHex_61zpoe$('C5CAE9');
    this.MD_INDIGO_200 = this.fromHex_61zpoe$('9FA8DA');
    this.MD_INDIGO_300 = this.fromHex_61zpoe$('7986CB');
    this.MD_INDIGO_400 = this.fromHex_61zpoe$('5C6BC0');
    this.MD_INDIGO_500 = this.fromHex_61zpoe$('3F51B5');
    this.MD_INDIGO_600 = this.fromHex_61zpoe$('3949AB');
    this.MD_INDIGO_700 = this.fromHex_61zpoe$('303F9F');
    this.MD_INDIGO_800 = this.fromHex_61zpoe$('283593');
    this.MD_INDIGO_900 = this.fromHex_61zpoe$('1A237E');
    this.MD_INDIGO_A100 = this.fromHex_61zpoe$('8C9EFF');
    this.MD_INDIGO_A200 = this.fromHex_61zpoe$('536DFE');
    this.MD_INDIGO_A400 = this.fromHex_61zpoe$('3D5AFE');
    this.MD_INDIGO_A700 = this.fromHex_61zpoe$('304FFE');
    this.MD_INDIGO = this.MD_INDIGO_500;
    this.MD_BLUE_50 = this.fromHex_61zpoe$('E3F2FD');
    this.MD_BLUE_100 = this.fromHex_61zpoe$('BBDEFB');
    this.MD_BLUE_200 = this.fromHex_61zpoe$('90CAF9');
    this.MD_BLUE_300 = this.fromHex_61zpoe$('64B5F6');
    this.MD_BLUE_400 = this.fromHex_61zpoe$('42A5F5');
    this.MD_BLUE_500 = this.fromHex_61zpoe$('2196F3');
    this.MD_BLUE_600 = this.fromHex_61zpoe$('1E88E5');
    this.MD_BLUE_700 = this.fromHex_61zpoe$('1976D2');
    this.MD_BLUE_800 = this.fromHex_61zpoe$('1565C0');
    this.MD_BLUE_900 = this.fromHex_61zpoe$('0D47A1');
    this.MD_BLUE_A100 = this.fromHex_61zpoe$('82B1FF');
    this.MD_BLUE_A200 = this.fromHex_61zpoe$('448AFF');
    this.MD_BLUE_A400 = this.fromHex_61zpoe$('2979FF');
    this.MD_BLUE_A700 = this.fromHex_61zpoe$('2962FF');
    this.MD_BLUE = this.MD_BLUE_500;
    this.MD_LIGHT_BLUE_50 = this.fromHex_61zpoe$('E1F5FE');
    this.MD_LIGHT_BLUE_100 = this.fromHex_61zpoe$('B3E5FC');
    this.MD_LIGHT_BLUE_200 = this.fromHex_61zpoe$('81D4FA');
    this.MD_LIGHT_BLUE_300 = this.fromHex_61zpoe$('4FC3F7');
    this.MD_LIGHT_BLUE_400 = this.fromHex_61zpoe$('29B6F6');
    this.MD_LIGHT_BLUE_500 = this.fromHex_61zpoe$('03A9F4');
    this.MD_LIGHT_BLUE_600 = this.fromHex_61zpoe$('039BE5');
    this.MD_LIGHT_BLUE_700 = this.fromHex_61zpoe$('0288D1');
    this.MD_LIGHT_BLUE_800 = this.fromHex_61zpoe$('0277BD');
    this.MD_LIGHT_BLUE_900 = this.fromHex_61zpoe$('01579B');
    this.MD_LIGHT_BLUE_A100 = this.fromHex_61zpoe$('80D8FF');
    this.MD_LIGHT_BLUE_A200 = this.fromHex_61zpoe$('40C4FF');
    this.MD_LIGHT_BLUE_A400 = this.fromHex_61zpoe$('00B0FF');
    this.MD_LIGHT_BLUE_A700 = this.fromHex_61zpoe$('0091EA');
    this.MD_LIGHT_BLUE = this.MD_LIGHT_BLUE_500;
    this.MD_CYAN_50 = this.fromHex_61zpoe$('E0F7FA');
    this.MD_CYAN_100 = this.fromHex_61zpoe$('B2EBF2');
    this.MD_CYAN_200 = this.fromHex_61zpoe$('80DEEA');
    this.MD_CYAN_300 = this.fromHex_61zpoe$('4DD0E1');
    this.MD_CYAN_400 = this.fromHex_61zpoe$('26C6DA');
    this.MD_CYAN_500 = this.fromHex_61zpoe$('00BCD4');
    this.MD_CYAN_600 = this.fromHex_61zpoe$('00ACC1');
    this.MD_CYAN_700 = this.fromHex_61zpoe$('0097A7');
    this.MD_CYAN_800 = this.fromHex_61zpoe$('00838F');
    this.MD_CYAN_900 = this.fromHex_61zpoe$('006064');
    this.MD_CYAN_A100 = this.fromHex_61zpoe$('84FFFF');
    this.MD_CYAN_A200 = this.fromHex_61zpoe$('18FFFF');
    this.MD_CYAN_A400 = this.fromHex_61zpoe$('00E5FF');
    this.MD_CYAN_A700 = this.fromHex_61zpoe$('00B8D4');
    this.MD_CYAN = this.MD_CYAN_500;
    this.MD_TEAL_50 = this.fromHex_61zpoe$('E0F2F1');
    this.MD_TEAL_100 = this.fromHex_61zpoe$('B2DFDB');
    this.MD_TEAL_200 = this.fromHex_61zpoe$('80CBC4');
    this.MD_TEAL_300 = this.fromHex_61zpoe$('4DB6AC');
    this.MD_TEAL_400 = this.fromHex_61zpoe$('26A69A');
    this.MD_TEAL_500 = this.fromHex_61zpoe$('009688');
    this.MD_TEAL_600 = this.fromHex_61zpoe$('00897B');
    this.MD_TEAL_700 = this.fromHex_61zpoe$('00796B');
    this.MD_TEAL_800 = this.fromHex_61zpoe$('00695C');
    this.MD_TEAL_900 = this.fromHex_61zpoe$('004D40');
    this.MD_TEAL_A100 = this.fromHex_61zpoe$('A7FFEB');
    this.MD_TEAL_A200 = this.fromHex_61zpoe$('64FFDA');
    this.MD_TEAL_A400 = this.fromHex_61zpoe$('1DE9B6');
    this.MD_TEAL_A700 = this.fromHex_61zpoe$('00BFA5');
    this.MD_TEAL = this.MD_TEAL_500;
    this.MD_GREEN_50 = this.fromHex_61zpoe$('E8F5E9');
    this.MD_GREEN_100 = this.fromHex_61zpoe$('C8E6C9');
    this.MD_GREEN_200 = this.fromHex_61zpoe$('A5D6A7');
    this.MD_GREEN_300 = this.fromHex_61zpoe$('81C784');
    this.MD_GREEN_400 = this.fromHex_61zpoe$('66BB6A');
    this.MD_GREEN_500 = this.fromHex_61zpoe$('4CAF50');
    this.MD_GREEN_600 = this.fromHex_61zpoe$('43A047');
    this.MD_GREEN_700 = this.fromHex_61zpoe$('388E3C');
    this.MD_GREEN_800 = this.fromHex_61zpoe$('2E7D32');
    this.MD_GREEN_900 = this.fromHex_61zpoe$('1B5E20');
    this.MD_GREEN_A100 = this.fromHex_61zpoe$('B9F6CA');
    this.MD_GREEN_A200 = this.fromHex_61zpoe$('69F0AE');
    this.MD_GREEN_A400 = this.fromHex_61zpoe$('00E676');
    this.MD_GREEN_A700 = this.fromHex_61zpoe$('00C853');
    this.MD_GREEN = this.MD_GREEN_500;
    this.MD_LIGHT_GREEN_50 = this.fromHex_61zpoe$('F1F8E9');
    this.MD_LIGHT_GREEN_100 = this.fromHex_61zpoe$('DCEDC8');
    this.MD_LIGHT_GREEN_200 = this.fromHex_61zpoe$('C5E1A5');
    this.MD_LIGHT_GREEN_300 = this.fromHex_61zpoe$('AED581');
    this.MD_LIGHT_GREEN_400 = this.fromHex_61zpoe$('9CCC65');
    this.MD_LIGHT_GREEN_500 = this.fromHex_61zpoe$('8BC34A');
    this.MD_LIGHT_GREEN_600 = this.fromHex_61zpoe$('7CB342');
    this.MD_LIGHT_GREEN_700 = this.fromHex_61zpoe$('689F38');
    this.MD_LIGHT_GREEN_800 = this.fromHex_61zpoe$('558B2F');
    this.MD_LIGHT_GREEN_900 = this.fromHex_61zpoe$('33691E');
    this.MD_LIGHT_GREEN_A100 = this.fromHex_61zpoe$('CCFF90');
    this.MD_LIGHT_GREEN_A200 = this.fromHex_61zpoe$('B2FF59');
    this.MD_LIGHT_GREEN_A400 = this.fromHex_61zpoe$('76FF03');
    this.MD_LIGHT_GREEN_A700 = this.fromHex_61zpoe$('64DD17');
    this.MD_LIGHT_GREEN = this.MD_LIGHT_GREEN_500;
    this.MD_LIME_50 = this.fromHex_61zpoe$('F9FBE7');
    this.MD_LIME_100 = this.fromHex_61zpoe$('F0F4C3');
    this.MD_LIME_200 = this.fromHex_61zpoe$('E6EE9C');
    this.MD_LIME_300 = this.fromHex_61zpoe$('DCE775');
    this.MD_LIME_400 = this.fromHex_61zpoe$('D4E157');
    this.MD_LIME_500 = this.fromHex_61zpoe$('CDDC39');
    this.MD_LIME_600 = this.fromHex_61zpoe$('C0CA33');
    this.MD_LIME_700 = this.fromHex_61zpoe$('AFB42B');
    this.MD_LIME_800 = this.fromHex_61zpoe$('9E9D24');
    this.MD_LIME_900 = this.fromHex_61zpoe$('827717');
    this.MD_LIME_A100 = this.fromHex_61zpoe$('F4FF81');
    this.MD_LIME_A200 = this.fromHex_61zpoe$('EEFF41');
    this.MD_LIME_A400 = this.fromHex_61zpoe$('C6FF00');
    this.MD_LIME_A700 = this.fromHex_61zpoe$('AEEA00');
    this.MD_LIME = this.MD_LIME_500;
    this.MD_YELLOW_50 = this.fromHex_61zpoe$('FFFDE7');
    this.MD_YELLOW_100 = this.fromHex_61zpoe$('FFF9C4');
    this.MD_YELLOW_200 = this.fromHex_61zpoe$('FFF59D');
    this.MD_YELLOW_300 = this.fromHex_61zpoe$('FFF176');
    this.MD_YELLOW_400 = this.fromHex_61zpoe$('FFEE58');
    this.MD_YELLOW_500 = this.fromHex_61zpoe$('FFEB3B');
    this.MD_YELLOW_600 = this.fromHex_61zpoe$('FDD835');
    this.MD_YELLOW_700 = this.fromHex_61zpoe$('FBC02D');
    this.MD_YELLOW_800 = this.fromHex_61zpoe$('F9A825');
    this.MD_YELLOW_900 = this.fromHex_61zpoe$('F57F17');
    this.MD_YELLOW_A100 = this.fromHex_61zpoe$('FFFF8D');
    this.MD_YELLOW_A200 = this.fromHex_61zpoe$('FFFF00');
    this.MD_YELLOW_A400 = this.fromHex_61zpoe$('FFEA00');
    this.MD_YELLOW_A700 = this.fromHex_61zpoe$('FFD600');
    this.MD_YELLOW = this.MD_YELLOW_500;
    this.MD_AMBER_50 = this.fromHex_61zpoe$('FFF8E1');
    this.MD_AMBER_100 = this.fromHex_61zpoe$('FFECB3');
    this.MD_AMBER_200 = this.fromHex_61zpoe$('FFE082');
    this.MD_AMBER_300 = this.fromHex_61zpoe$('FFD54F');
    this.MD_AMBER_400 = this.fromHex_61zpoe$('FFCA28');
    this.MD_AMBER_500 = this.fromHex_61zpoe$('FFC107');
    this.MD_AMBER_600 = this.fromHex_61zpoe$('FFB300');
    this.MD_AMBER_700 = this.fromHex_61zpoe$('FFA000');
    this.MD_AMBER_800 = this.fromHex_61zpoe$('FF8F00');
    this.MD_AMBER_900 = this.fromHex_61zpoe$('FF6F00');
    this.MD_AMBER_A100 = this.fromHex_61zpoe$('FFE57F');
    this.MD_AMBER_A200 = this.fromHex_61zpoe$('FFD740');
    this.MD_AMBER_A400 = this.fromHex_61zpoe$('FFC400');
    this.MD_AMBER_A700 = this.fromHex_61zpoe$('FFAB00');
    this.MD_AMBER = this.MD_AMBER_500;
    this.MD_ORANGE_50 = this.fromHex_61zpoe$('FFF3E0');
    this.MD_ORANGE_100 = this.fromHex_61zpoe$('FFE0B2');
    this.MD_ORANGE_200 = this.fromHex_61zpoe$('FFCC80');
    this.MD_ORANGE_300 = this.fromHex_61zpoe$('FFB74D');
    this.MD_ORANGE_400 = this.fromHex_61zpoe$('FFA726');
    this.MD_ORANGE_500 = this.fromHex_61zpoe$('FF9800');
    this.MD_ORANGE_600 = this.fromHex_61zpoe$('FB8C00');
    this.MD_ORANGE_700 = this.fromHex_61zpoe$('F57C00');
    this.MD_ORANGE_800 = this.fromHex_61zpoe$('EF6C00');
    this.MD_ORANGE_900 = this.fromHex_61zpoe$('E65100');
    this.MD_ORANGE_A100 = this.fromHex_61zpoe$('FFD180');
    this.MD_ORANGE_A200 = this.fromHex_61zpoe$('FFAB40');
    this.MD_ORANGE_A400 = this.fromHex_61zpoe$('FF9100');
    this.MD_ORANGE_A700 = this.fromHex_61zpoe$('FF6D00');
    this.MD_ORANGE = this.MD_ORANGE_500;
    this.MD_DEEP_ORANGE_50 = this.fromHex_61zpoe$('FBE9E7');
    this.MD_DEEP_ORANGE_100 = this.fromHex_61zpoe$('FFCCBC');
    this.MD_DEEP_ORANGE_200 = this.fromHex_61zpoe$('FFAB91');
    this.MD_DEEP_ORANGE_300 = this.fromHex_61zpoe$('FF8A65');
    this.MD_DEEP_ORANGE_400 = this.fromHex_61zpoe$('FF7043');
    this.MD_DEEP_ORANGE_500 = this.fromHex_61zpoe$('FF5722');
    this.MD_DEEP_ORANGE_600 = this.fromHex_61zpoe$('F4511E');
    this.MD_DEEP_ORANGE_700 = this.fromHex_61zpoe$('E64A19');
    this.MD_DEEP_ORANGE_800 = this.fromHex_61zpoe$('D84315');
    this.MD_DEEP_ORANGE_900 = this.fromHex_61zpoe$('BF360C');
    this.MD_DEEP_ORANGE_A100 = this.fromHex_61zpoe$('FF9E80');
    this.MD_DEEP_ORANGE_A200 = this.fromHex_61zpoe$('FF6E40');
    this.MD_DEEP_ORANGE_A400 = this.fromHex_61zpoe$('FF3D00');
    this.MD_DEEP_ORANGE_A700 = this.fromHex_61zpoe$('DD2C00');
    this.MD_DEEP_ORANGE = this.MD_DEEP_ORANGE_500;
    this.MD_BROWN_50 = this.fromHex_61zpoe$('EFEBE9');
    this.MD_BROWN_100 = this.fromHex_61zpoe$('D7CCC8');
    this.MD_BROWN_200 = this.fromHex_61zpoe$('BCAAA4');
    this.MD_BROWN_300 = this.fromHex_61zpoe$('A1887F');
    this.MD_BROWN_400 = this.fromHex_61zpoe$('8D6E63');
    this.MD_BROWN_500 = this.fromHex_61zpoe$('795548');
    this.MD_BROWN_600 = this.fromHex_61zpoe$('6D4C41');
    this.MD_BROWN_700 = this.fromHex_61zpoe$('5D4037');
    this.MD_BROWN_800 = this.fromHex_61zpoe$('4E342E');
    this.MD_BROWN_900 = this.fromHex_61zpoe$('3E2723');
    this.MD_BROWN = this.MD_BROWN_500;
    this.MD_GREY_50 = this.fromHex_61zpoe$('FAFAFA');
    this.MD_GREY_100 = this.fromHex_61zpoe$('F5F5F5');
    this.MD_GREY_200 = this.fromHex_61zpoe$('EEEEEE');
    this.MD_GREY_300 = this.fromHex_61zpoe$('E0E0E0');
    this.MD_GREY_400 = this.fromHex_61zpoe$('BDBDBD');
    this.MD_GREY_500 = this.fromHex_61zpoe$('9E9E9E');
    this.MD_GREY_600 = this.fromHex_61zpoe$('757575');
    this.MD_GREY_700 = this.fromHex_61zpoe$('616161');
    this.MD_GREY_800 = this.fromHex_61zpoe$('424242');
    this.MD_GREY_900 = this.fromHex_61zpoe$('212121');
    this.MD_GREY = this.MD_GREY_500;
    this.MD_BLUE_GREY_50 = this.fromHex_61zpoe$('ECEFF1');
    this.MD_BLUE_GREY_100 = this.fromHex_61zpoe$('CFD8DC');
    this.MD_BLUE_GREY_200 = this.fromHex_61zpoe$('B0BEC5');
    this.MD_BLUE_GREY_300 = this.fromHex_61zpoe$('90A4AE');
    this.MD_BLUE_GREY_400 = this.fromHex_61zpoe$('78909C');
    this.MD_BLUE_GREY_500 = this.fromHex_61zpoe$('607D8B');
    this.MD_BLUE_GREY_600 = this.fromHex_61zpoe$('546E7A');
    this.MD_BLUE_GREY_700 = this.fromHex_61zpoe$('455A64');
    this.MD_BLUE_GREY_800 = this.fromHex_61zpoe$('37474F');
    this.MD_BLUE_GREY_900 = this.fromHex_61zpoe$('263238');
    this.MD_BLUE_GREY = this.MD_BLUE_GREY_500;
    this.MD_COLORS = listOf([this.MD_RED, this.MD_PINK, this.MD_PURPLE, this.MD_DEEP_PURPLE, this.MD_INDIGO, this.MD_BLUE, this.MD_LIGHT_BLUE, this.MD_CYAN, this.MD_TEAL, this.MD_GREEN, this.MD_LIGHT_GREEN, this.MD_LIME, this.MD_YELLOW, this.MD_AMBER, this.MD_ORANGE, this.MD_DEEP_ORANGE, this.MD_BROWN, this.MD_GREY, this.MD_BLUE_GREY]);
  }
  Color$Companion.prototype.fromHsv_7b5o5w$ = function (h, s, v, a) {
    var color = MutableColor_init();
    return color.setHsv_7b5o5w$(h, s, v, a);
  };
  Color$Companion.prototype.fromHex_61zpoe$ = function (hex) {
    if (hex.length === 0) {
      return Color$Companion_getInstance().BLACK;
    }
    var str = hex;
    if (str.charCodeAt(0) === 35) {
      str = str.substring(1);
    }
    var r = 0.0;
    var g = 0.0;
    var b = 0.0;
    var a = 1.0;
    if (str.length === 3) {
      var r4 = toInt_0(str.substring(0, 1), 16);
      var g4 = toInt_0(str.substring(1, 2), 16);
      var b4 = toInt_0(str.substring(2, 3), 16);
      r = (r4 | r4 << 4) / 255.0;
      g = (g4 | g4 << 4) / 255.0;
      b = (b4 | b4 << 4) / 255.0;
    }
     else if (str.length === 4) {
      var r4_0 = toInt_0(str.substring(0, 1), 16);
      var g4_0 = toInt_0(str.substring(1, 2), 16);
      var b4_0 = toInt_0(str.substring(2, 3), 16);
      var a4 = toInt_0(str.substring(2, 3), 16);
      r = (r4_0 | r4_0 << 4) / 255.0;
      g = (g4_0 | g4_0 << 4) / 255.0;
      b = (b4_0 | b4_0 << 4) / 255.0;
      a = (a4 | a4 << 4) / 255.0;
    }
     else if (str.length === 6) {
      r = toInt_0(str.substring(0, 2), 16) / 255.0;
      g = toInt_0(str.substring(2, 4), 16) / 255.0;
      b = toInt_0(str.substring(4, 6), 16) / 255.0;
    }
     else if (str.length === 8) {
      r = toInt_0(str.substring(0, 2), 16) / 255.0;
      g = toInt_0(str.substring(2, 4), 16) / 255.0;
      b = toInt_0(str.substring(4, 6), 16) / 255.0;
      a = toInt_0(str.substring(6, 8), 16) / 255.0;
    }
    return new Color(r, g, b, a);
  };
  Color$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Color$Companion_instance = null;
  function Color$Companion_getInstance() {
    if (Color$Companion_instance === null) {
      new Color$Companion();
    }
    return Color$Companion_instance;
  }
  Color.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Color',
    interfaces: [Vec4f]
  };
  function MutableColor(r, g, b, a) {
    Color.call(this, r, g, b, a);
  }
  Object.defineProperty(MutableColor.prototype, 'r', {
    get: function () {
      return this.get_za3lpa$(0);
    },
    set: function (value) {
      this.set_24o109$(0, value);
    }
  });
  Object.defineProperty(MutableColor.prototype, 'g', {
    get: function () {
      return this.get_za3lpa$(1);
    },
    set: function (value) {
      this.set_24o109$(1, value);
    }
  });
  Object.defineProperty(MutableColor.prototype, 'b', {
    get: function () {
      return this.get_za3lpa$(2);
    },
    set: function (value) {
      this.set_24o109$(2, value);
    }
  });
  Object.defineProperty(MutableColor.prototype, 'a', {
    get: function () {
      return this.get_za3lpa$(3);
    },
    set: function (value) {
      this.set_24o109$(3, value);
    }
  });
  MutableColor.prototype.add_d7aj7k$ = function (other) {
    this.r = this.r + other.r;
    this.g = this.g + other.g;
    this.b = this.b + other.b;
    this.a = this.a + other.a;
    return this;
  };
  MutableColor.prototype.add_y83vuj$ = function (other, weight) {
    this.r = this.r + other.r * weight;
    this.g = this.g + other.g * weight;
    this.b = this.b + other.b * weight;
    this.a = this.a + other.a * weight;
    return this;
  };
  MutableColor.prototype.subtract_czzhhz$ = function (other) {
    this.r = this.r - other.x;
    this.g = this.g - other.y;
    this.b = this.b - other.z;
    this.a = this.a - other.w;
    return this;
  };
  MutableColor.prototype.scale_mx4ult$ = function (factor) {
    this.r = this.r * factor;
    this.g = this.g * factor;
    this.b = this.b * factor;
    this.a = this.a * factor;
    return this;
  };
  MutableColor.prototype.scaleRgb_mx4ult$ = function (factor) {
    this.r = this.r * factor;
    this.g = this.g * factor;
    this.b = this.b * factor;
    return this;
  };
  MutableColor.prototype.clear = function () {
    this.set_7b5o5w$(0.0, 0.0, 0.0, 0.0);
    return this;
  };
  MutableColor.prototype.set_7b5o5w$ = function (r, g, b, a) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
    return this;
  };
  MutableColor.prototype.set_d7aj7k$ = function (other) {
    this.r = other.r;
    this.g = other.g;
    this.b = other.b;
    this.a = other.a;
    return this;
  };
  MutableColor.prototype.set_24o109$ = function (i, v) {
    this.fields[i] = v;
  };
  MutableColor.prototype.setHsv_7b5o5w$ = function (h, s, v, a) {
    var hue = h % 360.0;
    if (hue < 0) {
      hue += 360.0;
    }
    var hi = numberToInt(hue / 60.0);
    var f = hue / 60.0 - hi;
    var p = v * (1 - s);
    var q = v * (1 - s * f);
    var t = v * (1 - s * (1 - f));
    switch (hi) {
      case 1:
        this.set_7b5o5w$(q, v, p, a);
        break;
      case 2:
        this.set_7b5o5w$(p, v, t, a);
        break;
      case 3:
        this.set_7b5o5w$(p, q, v, a);
        break;
      case 4:
        this.set_7b5o5w$(t, p, v, a);
        break;
      case 5:
        this.set_7b5o5w$(v, p, q, a);
        break;
      default:this.set_7b5o5w$(v, t, p, a);
        break;
    }
    return this;
  };
  MutableColor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MutableColor',
    interfaces: [Color]
  };
  function MutableColor_init($this) {
    $this = $this || Object.create(MutableColor.prototype);
    MutableColor.call($this, 0.0, 0.0, 0.0, 1.0);
    return $this;
  }
  function MutableColor_init_0(color, $this) {
    $this = $this || Object.create(MutableColor.prototype);
    MutableColor.call($this, color.r, color.g, color.b, color.a);
    return $this;
  }
  function Comparator$ObjectLiteral_6(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_6.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_6.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_6 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function ColorGradient(colors, n) {
    ColorGradient$Companion_getInstance();
    if (n === void 0)
      n = 256;
    var array = Array_0(n);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = MutableColor_init();
    }
    this.gradient_0 = array;
    var tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (colors.length < 2) {
      throw KoolException_init('ColorGradient requires at least two colors');
    }
    if (colors.length > 1) {
      sortWith_0(colors, new Comparator$ObjectLiteral_6(compareBy$lambda_6(ColorGradient_init$lambda)));
    }
    var mi = first_0(colors).first;
    var mx = last_0(colors).first;
    var pi = 0;
    var p0 = colors[tmp$_0 = pi, pi = tmp$_0 + 1 | 0, tmp$_0];
    var p1 = colors[tmp$_1 = pi, pi = tmp$_1 + 1 | 0, tmp$_1];
    tmp$_2 = n;
    for (var i_0 = 0; i_0 < tmp$_2; i_0++) {
      var p = i_0 / (n - 1.0) * (mx - mi) + mi;
      while (p > p1.first) {
        p0 = p1;
        var a = (tmp$_3 = pi, pi = tmp$_3 + 1 | 0, tmp$_3);
        p1 = colors[Math_0.min(a, colors.length)];
      }
      var w0 = 1.0 - (p - p0.first) / (p1.first - p0.first);
      this.gradient_0[i_0].set_d7aj7k$(p0.second).scale_mx4ult$(w0).add_y83vuj$(p1.second, 1.0 - w0);
    }
  }
  ColorGradient.prototype.getColor_y2kzbl$ = function (value, min, max) {
    if (min === void 0)
      min = 0.0;
    if (max === void 0)
      max = 1.0;
    var tmp$ = this.gradient_0;
    var $receiver = numberToInt((value - min) / (max - min) * this.gradient_0.length);
    var max_0 = this.gradient_0.length - 1 | 0;
    var clamp$result;
    if ($receiver < 0) {
      clamp$result = 0;
    }
     else if ($receiver > max_0) {
      clamp$result = max_0;
    }
     else {
      clamp$result = $receiver;
    }
    return tmp$[clamp$result];
  };
  function ColorGradient$Companion() {
    ColorGradient$Companion_instance = this;
    this.DEFAULT_N = 256;
    this.JET = ColorGradient_init([Color$Companion_getInstance().BLUE, Color$Companion_getInstance().CYAN, Color$Companion_getInstance().GREEN, Color$Companion_getInstance().YELLOW, Color$Companion_getInstance().RED, Color$Companion_getInstance().MAGENTA]);
    this.JET_MD = ColorGradient_init([Color$Companion_getInstance().MD_BLUE, Color$Companion_getInstance().MD_CYAN, Color$Companion_getInstance().MD_GREEN, Color$Companion_getInstance().MD_YELLOW, Color$Companion_getInstance().MD_RED, Color$Companion_getInstance().MD_PURPLE]);
    this.RED_YELLOW_GREEN = ColorGradient_init([Color$Companion_getInstance().RED, Color$Companion_getInstance().YELLOW, Color$Companion_getInstance().GREEN]);
    this.RED_YELLOW_GREEN_MD = ColorGradient_init([Color$Companion_getInstance().MD_RED, Color$Companion_getInstance().MD_YELLOW, Color$Companion_getInstance().MD_GREEN]);
    this.RED_WHITE_BLUE = new ColorGradient([to(0.0, new Color(0.35, 0.0, 0.0, 1.0)), to(0.35, new Color(0.81, 0.39, 0.0, 1.0)), to(0.5, Color$Companion_getInstance().WHITE), to(0.75, new Color(0.0, 0.5, 1.0, 1.0)), to(1.0, new Color(0.0, 0.18, 0.47, 1.0))]);
    this.PLASMA = ColorGradient_init([new Color(0.0504, 0.0298, 0.528, 1.0), new Color(0.1324, 0.0223, 0.5633, 1.0), new Color(0.1934, 0.0184, 0.5903, 1.0), new Color(0.2546, 0.0139, 0.6154, 1.0), new Color(0.3062, 0.0089, 0.6337, 1.0), new Color(0.3564, 0.0038, 0.6478, 1.0), new Color(0.4055, 7.0E-4, 0.657, 1.0), new Color(0.4596, 0.0036, 0.6603, 1.0), new Color(0.5065, 0.0163, 0.6562, 1.0), new Color(0.5517, 0.0431, 0.6453, 1.0), new Color(0.595, 0.0772, 0.6279, 1.0), new Color(0.636, 0.1121, 0.6052, 1.0), new Color(0.6792, 0.1518, 0.5752, 1.0), new Color(0.7149, 0.1873, 0.5463, 1.0), new Color(0.7483, 0.2227, 0.5168, 1.0), new Color(0.7796, 0.2581, 0.4875, 1.0), new Color(0.8126, 0.2979, 0.4553, 1.0), new Color(0.8402, 0.3336, 0.4275, 1.0), new Color(0.8661, 0.3697, 0.4001, 1.0), new Color(0.8903, 0.4064, 0.3731, 1.0), new Color(0.9155, 0.4488, 0.3429, 1.0), new Color(0.9356, 0.4877, 0.316, 1.0), new Color(0.9534, 0.528, 0.2889, 1.0), new Color(0.9685, 0.5697, 0.2617, 1.0), new Color(0.9806, 0.613, 0.2346, 1.0), new Color(0.9899, 0.6638, 0.2049, 1.0), new Color(0.9941, 0.7107, 0.1801, 1.0), new Color(0.9939, 0.7593, 0.1591, 1.0), new Color(0.9886, 0.8096, 0.1454, 1.0), new Color(0.9763, 0.868, 0.1434, 1.0), new Color(0.9593, 0.9214, 0.1516, 1.0), new Color(0.94, 0.9752, 0.1313, 1.0)]);
    this.VIRIDIS = ColorGradient_init([new Color(0.267, 0.0049, 0.3294, 1.0), new Color(0.277, 0.0503, 0.3757, 1.0), new Color(0.2823, 0.095, 0.4173, 1.0), new Color(0.2826, 0.1409, 0.4575, 1.0), new Color(0.278, 0.1804, 0.4867, 1.0), new Color(0.2693, 0.2188, 0.5096, 1.0), new Color(0.2573, 0.2561, 0.5266, 1.0), new Color(0.2412, 0.2965, 0.5397, 1.0), new Color(0.2259, 0.3308, 0.5473, 1.0), new Color(0.2105, 0.3637, 0.5522, 1.0), new Color(0.1959, 0.3954, 0.5553, 1.0), new Color(0.1823, 0.4262, 0.5571, 1.0), new Color(0.1681, 0.46, 0.5581, 1.0), new Color(0.1563, 0.4896, 0.5579, 1.0), new Color(0.1448, 0.5191, 0.5566, 1.0), new Color(0.1337, 0.5485, 0.5535, 1.0), new Color(0.1235, 0.5817, 0.5474, 1.0), new Color(0.1194, 0.6111, 0.539, 1.0), new Color(0.1248, 0.6405, 0.5271, 1.0), new Color(0.1433, 0.6695, 0.5112, 1.0), new Color(0.1807, 0.7014, 0.4882, 1.0), new Color(0.2264, 0.7289, 0.4628, 1.0), new Color(0.2815, 0.7552, 0.4326, 1.0), new Color(0.3441, 0.78, 0.3974, 1.0), new Color(0.4129, 0.803, 0.3573, 1.0), new Color(0.4966, 0.8264, 0.3064, 1.0), new Color(0.5756, 0.8446, 0.2564, 1.0), new Color(0.6576, 0.8602, 0.2031, 1.0), new Color(0.7414, 0.8734, 0.1496, 1.0), new Color(0.8353, 0.886, 0.1026, 1.0), new Color(0.9162, 0.8961, 0.1007, 1.0), new Color(0.9932, 0.9062, 0.1439, 1.0)]);
  }
  ColorGradient$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ColorGradient$Companion_instance = null;
  function ColorGradient$Companion_getInstance() {
    if (ColorGradient$Companion_instance === null) {
      new ColorGradient$Companion();
    }
    return ColorGradient$Companion_instance;
  }
  function ColorGradient_init$lambda(it) {
    return it.first;
  }
  ColorGradient.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ColorGradient',
    interfaces: []
  };
  function ColorGradient_init(colors, n, $this) {
    if (n === void 0)
      n = 256;
    $this = $this || Object.create(ColorGradient.prototype);
    var array = Array_0(colors.length);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = to(i, colors[i]);
    }
    ColorGradient.call($this, array.slice(), n);
    return $this;
  }
  function Position(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Position_initFields() {
    Position_initFields = function () {
    };
    Position$UPPER_LEFT_instance = new Position('UPPER_LEFT', 0);
    Position$UPPER_RIGHT_instance = new Position('UPPER_RIGHT', 1);
    Position$LOWER_LEFT_instance = new Position('LOWER_LEFT', 2);
    Position$LOWER_RIGHT_instance = new Position('LOWER_RIGHT', 3);
  }
  var Position$UPPER_LEFT_instance;
  function Position$UPPER_LEFT_getInstance() {
    Position_initFields();
    return Position$UPPER_LEFT_instance;
  }
  var Position$UPPER_RIGHT_instance;
  function Position$UPPER_RIGHT_getInstance() {
    Position_initFields();
    return Position$UPPER_RIGHT_instance;
  }
  var Position$LOWER_LEFT_instance;
  function Position$LOWER_LEFT_getInstance() {
    Position_initFields();
    return Position$LOWER_LEFT_instance;
  }
  var Position$LOWER_RIGHT_instance;
  function Position$LOWER_RIGHT_getInstance() {
    Position_initFields();
    return Position$LOWER_RIGHT_instance;
  }
  Position.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Position',
    interfaces: [Enum]
  };
  function Position$values() {
    return [Position$UPPER_LEFT_getInstance(), Position$UPPER_RIGHT_getInstance(), Position$LOWER_LEFT_getInstance(), Position$LOWER_RIGHT_getInstance()];
  }
  Position.values = Position$values;
  function Position$valueOf(name) {
    switch (name) {
      case 'UPPER_LEFT':
        return Position$UPPER_LEFT_getInstance();
      case 'UPPER_RIGHT':
        return Position$UPPER_RIGHT_getInstance();
      case 'LOWER_LEFT':
        return Position$LOWER_LEFT_getInstance();
      case 'LOWER_RIGHT':
        return Position$LOWER_RIGHT_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.util.Position.' + name);
    }
  }
  Position.valueOf_61zpoe$ = Position$valueOf;
  function debugOverlay$lambda$lambda$lambda(it) {
    return new BlankComponentUi();
  }
  function debugOverlay$lambda$lambda($receiver) {
    $receiver.componentUi_mloaa0$(debugOverlay$lambda$lambda$lambda);
    $receiver.containerUi_2t3ptw$(getCallableRef('SimpleComponentUi', function (component) {
      return new SimpleComponentUi(component);
    }));
    $receiver.standardFont_ttufcy$(new FontProps(Font$Companion_getInstance().SYSTEM_FONT, 12.0));
    return Unit;
  }
  function debugOverlay$lambda$lambda$lambda$lambda(this$) {
    return function ($receiver, c) {
      this$.text = toString_1(c.fps, 1) + ' fps';
      return Unit;
    };
  }
  function debugOverlay$lambda$lambda$lambda_0(closure$width, closure$ctx) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(-37.0, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(closure$width, true), dps(37.0, true), full());
      $receiver.padding = new Margin(zero(), zero(), dps(4.0, true), dps(4.0, true));
      $receiver.textAlignment = new Gravity(Alignment$CENTER_getInstance(), Alignment$CENTER_getInstance());
      $receiver.text = '';
      $receiver.font.setCustom_11rb$(UiTheme$Companion_getInstance().DARK_SIMPLE.standardFont_oei9ky$($receiver.dpi, closure$ctx));
      $receiver.textColor.setCustom_11rb$($receiver.root.theme.accentColor);
      $receiver.onPreRender.add_11rb$(debugOverlay$lambda$lambda$lambda$lambda($receiver));
      return Unit;
    };
  }
  function debugOverlay$lambda$lambda$lambda_1(closure$yOri, closure$width, closure$ctx) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(closure$yOri.v, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(closure$width, true), dps(18.0, true), full());
      $receiver.padding = new Margin(zero(), zero(), dps(4.0, true), dps(4.0, true));
      $receiver.textAlignment = new Gravity(Alignment$END_getInstance(), Alignment$CENTER_getInstance());
      $receiver.text = closure$ctx.glCapabilities.glVersion.toString();
      return Unit;
    };
  }
  function debugOverlay$lambda$lambda$lambda$lambda_0(this$) {
    return function ($receiver, it) {
      this$.text = getMemoryInfo();
      return Unit;
    };
  }
  function debugOverlay$lambda$lambda$lambda_2(closure$yOri, closure$width) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(closure$yOri.v, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(closure$width, true), dps(18.0, true), full());
      $receiver.padding = new Margin(zero(), zero(), dps(4.0, true), dps(4.0, true));
      $receiver.textAlignment = new Gravity(Alignment$END_getInstance(), Alignment$CENTER_getInstance());
      $receiver.onPreRender.add_11rb$(debugOverlay$lambda$lambda$lambda$lambda_0($receiver));
      return Unit;
    };
  }
  function debugOverlay$lambda$lambda$lambda$lambda_1(closure$lastWndW, closure$lastWndH, this$) {
    return function ($receiver, c) {
      if (c.windowWidth !== closure$lastWndW.v || c.windowHeight !== closure$lastWndH.v) {
        closure$lastWndW.v = c.windowWidth;
        closure$lastWndH.v = c.windowHeight;
        this$.text = 'Viewport: ' + c.windowWidth + 'x' + c.windowHeight;
      }
      return Unit;
    };
  }
  function debugOverlay$lambda$lambda$lambda_3(closure$yOri, closure$width) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(closure$yOri.v, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(closure$width, true), dps(18.0, true), full());
      $receiver.padding = new Margin(zero(), zero(), dps(4.0, true), dps(4.0, true));
      $receiver.textAlignment = new Gravity(Alignment$END_getInstance(), Alignment$CENTER_getInstance());
      var lastWndW = {v: -1};
      var lastWndH = {v: -1};
      $receiver.onPreRender.add_11rb$(debugOverlay$lambda$lambda$lambda$lambda_1(lastWndW, lastWndH, $receiver));
      return Unit;
    };
  }
  function debugOverlay$lambda$lambda$lambda$lambda_2(closure$updateT, this$) {
    return function ($receiver, c) {
      closure$updateT.v -= c.deltaT;
      if (closure$updateT.v < 0) {
        closure$updateT.v += 1.0;
        var hh = '' + toString(numberToInt(c.time / 3600.0));
        if (hh.length === 1) {
          hh = '0' + hh;
        }
        var mm = '' + toString(numberToInt(c.time % 3600.0 / 60.0));
        if (mm.length === 1) {
          mm = '0' + mm;
        }
        var ss = '' + toString(numberToInt(c.time % 60.0));
        if (ss.length === 1) {
          ss = '0' + ss;
        }
        this$.text = 'Up: ' + hh + ':' + mm + '.' + ss;
      }
      return Unit;
    };
  }
  function debugOverlay$lambda$lambda$lambda_4(closure$yOri, closure$width) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(closure$yOri.v, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(closure$width, true), dps(18.0, true), full());
      $receiver.padding = new Margin(zero(), zero(), dps(4.0, true), dps(4.0, true));
      $receiver.textAlignment = new Gravity(Alignment$END_getInstance(), Alignment$CENTER_getInstance());
      $receiver.text = 'Up: 00:00.00';
      var updateT = {v: 1.0};
      $receiver.onPreRender.add_11rb$(debugOverlay$lambda$lambda$lambda$lambda_2(updateT, $receiver));
      return Unit;
    };
  }
  function debugOverlay$lambda$lambda$lambda$lambda_3(closure$last, closure$lastMem, this$) {
    return function ($receiver, c) {
      var num = c.memoryMgr.numTextures;
      var mem = c.memoryMgr.getTotalMemory_b1qrxn$(GlResource$Type$TEXTURE_getInstance());
      if (num !== closure$last.v || mem !== closure$lastMem.v) {
        closure$last.v = num;
        closure$lastMem.v = mem;
        this$.text = num.toString() + ' Textures: ' + toString_1(mem / (1024.0 * 1024.0), 1) + 'M';
      }
      return Unit;
    };
  }
  function debugOverlay$lambda$lambda$lambda_5(closure$yOri, closure$width) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(closure$yOri.v, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(closure$width, true), dps(18.0, true), full());
      $receiver.padding = new Margin(zero(), zero(), dps(4.0, true), dps(4.0, true));
      $receiver.textAlignment = new Gravity(Alignment$END_getInstance(), Alignment$CENTER_getInstance());
      var last = {v: -1};
      var lastMem = {v: -1.0};
      $receiver.onPreRender.add_11rb$(debugOverlay$lambda$lambda$lambda$lambda_3(last, lastMem, $receiver));
      return Unit;
    };
  }
  function debugOverlay$lambda$lambda$lambda$lambda_4(closure$last, closure$lastMem, this$) {
    return function ($receiver, c) {
      var num = c.memoryMgr.numBuffers;
      var mem = c.memoryMgr.getTotalMemory_b1qrxn$(GlResource$Type$BUFFER_getInstance());
      if (num !== closure$last.v || mem !== closure$lastMem.v) {
        closure$last.v = num;
        closure$lastMem.v = mem;
        this$.text = num.toString() + ' Buffers: ' + toString_1(mem / (1024.0 * 1024.0), 1) + 'M';
      }
      return Unit;
    };
  }
  function debugOverlay$lambda$lambda$lambda_6(closure$yOri, closure$width) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(closure$yOri.v, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(closure$width, true), dps(18.0, true), full());
      $receiver.padding = new Margin(zero(), zero(), dps(4.0, true), dps(4.0, true));
      $receiver.textAlignment = new Gravity(Alignment$END_getInstance(), Alignment$CENTER_getInstance());
      var last = {v: -1};
      var lastMem = {v: -1.0};
      $receiver.onPreRender.add_11rb$(debugOverlay$lambda$lambda$lambda$lambda_4(last, lastMem, $receiver));
      return Unit;
    };
  }
  function debugOverlay$lambda$lambda$lambda$lambda_5(closure$last, this$) {
    return function ($receiver, c) {
      var num = c.memoryMgr.numShaders;
      if (num !== closure$last.v) {
        closure$last.v = num;
        this$.text = num.toString() + ' Shaders';
      }
      return Unit;
    };
  }
  function debugOverlay$lambda$lambda$lambda_7(closure$yOri, closure$width) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(closure$yOri.v, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(closure$width, true), dps(18.0, true), full());
      $receiver.padding = new Margin(zero(), zero(), dps(4.0, true), dps(4.0, true));
      $receiver.textAlignment = new Gravity(Alignment$END_getInstance(), Alignment$CENTER_getInstance());
      var last = {v: -1};
      $receiver.onPreRender.add_11rb$(debugOverlay$lambda$lambda$lambda$lambda_5(last, $receiver));
      return Unit;
    };
  }
  function debugOverlay$lambda$lambda_0(closure$position, this$, closure$ctx) {
    return function ($receiver) {
      var tmp$;
      var hasMemInfo = !(getMemoryInfo().length === 0);
      if (hasMemInfo) {
        tmp$ = 168.0;
      }
       else {
        tmp$ = 150.0;
      }
      var height = tmp$;
      var width = 130.0;
      switch (closure$position.name) {
        case 'UPPER_LEFT':
          $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(-height, true), zero());
          break;
        case 'UPPER_RIGHT':
          $receiver.layoutSpec.setOrigin_4ujscr$(dps(-width, true), dps(-height, true), zero());
          break;
        case 'LOWER_LEFT':
          $receiver.layoutSpec.setOrigin_4ujscr$(zero(), zero(), zero());
          break;
        case 'LOWER_RIGHT':
          $receiver.layoutSpec.setOrigin_4ujscr$(dps(-width, true), zero(), zero());
          break;
      }
      $receiver.layoutSpec.setSize_4ujscr$(dps(width, true), dps(height, true), full());
      var $receiver_0 = new DeltaTGraph(this$);
      $receiver_0.layoutSpec.setOrigin_4ujscr$(zero(), dps(-40.0, true), zero());
      $receiver_0.layoutSpec.setSize_4ujscr$(dps(width, true), dps(40.0, true), full());
      $receiver.unaryPlus_uv0sim$($receiver_0);
      $receiver.unaryPlus_uv0sim$(this$.label_tokfmu$('lblFps', debugOverlay$lambda$lambda$lambda_0(width, closure$ctx)));
      var yOri = {v: -60.0};
      $receiver.unaryPlus_uv0sim$(this$.label_tokfmu$('lblVersion', debugOverlay$lambda$lambda$lambda_1(yOri, width, closure$ctx)));
      if (hasMemInfo) {
        yOri.v -= 18.0;
        $receiver.unaryPlus_uv0sim$(this$.label_tokfmu$('lblMemInfo', debugOverlay$lambda$lambda$lambda_2(yOri, width)));
      }
      yOri.v -= 18.0;
      $receiver.unaryPlus_uv0sim$(this$.label_tokfmu$('lblVpSize', debugOverlay$lambda$lambda$lambda_3(yOri, width)));
      yOri.v -= 18.0;
      $receiver.unaryPlus_uv0sim$(this$.label_tokfmu$('lblUpTime', debugOverlay$lambda$lambda$lambda_4(yOri, width)));
      yOri.v -= 18.0;
      $receiver.unaryPlus_uv0sim$(this$.label_tokfmu$('lblNumTextures', debugOverlay$lambda$lambda$lambda_5(yOri, width)));
      yOri.v -= 18.0;
      $receiver.unaryPlus_uv0sim$(this$.label_tokfmu$('lblNumBuffers', debugOverlay$lambda$lambda$lambda_6(yOri, width)));
      yOri.v -= 18.0;
      $receiver.unaryPlus_uv0sim$(this$.label_tokfmu$('lblNumShaders', debugOverlay$lambda$lambda$lambda_7(yOri, width)));
      return Unit;
    };
  }
  function debugOverlay$lambda(closure$position, closure$ctx) {
    return function ($receiver) {
      $receiver.theme = theme(UiTheme$Companion_getInstance().DARK, debugOverlay$lambda$lambda);
      $receiver.content.ui.setCustom_11rb$(new BlankComponentUi());
      $receiver.unaryPlus_uv0sim$($receiver.container_t34sov$('dbgPanel', debugOverlay$lambda$lambda_0(closure$position, $receiver, closure$ctx)));
      return Unit;
    };
  }
  function debugOverlay(ctx, position) {
    if (position === void 0)
      position = Position$UPPER_RIGHT_getInstance();
    var dbgOverlay = uiScene(ctx.screenDpi, 'debug-overlay', void 0, debugOverlay$lambda(position, ctx));
    dbgOverlay.isPickingEnabled = false;
    return dbgOverlay;
  }
  function DeltaTGraph(root) {
    UiComponent.call(this, 'deltaT', root);
    this.graphMesh = null;
    this.graphData = MeshData_init([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().COLORS]);
    this.graphBuilder = new MeshBuilder(this.graphData);
    this.graphVertex = this.graphData.get_za3lpa$(0);
    this.graphIdx = 0;
    this.prevDeltaT = 0.0;
    this.graphMesh = new Mesh(this.graphData);
    this.graphMesh.meshData.usage = 35048;
    this.graphMesh.shader = basicShader(void 0, DeltaTGraph_init$lambda);
  }
  DeltaTGraph.prototype.render_aemszp$ = function (ctx) {
    var color = Color$Companion_getInstance().WHITE;
    if (this.prevDeltaT > 0.05) {
      color = Color$Companion_getInstance().RED;
    }
     else if (this.prevDeltaT > 0.025) {
      color = Color$Companion_getInstance().YELLOW;
    }
    this.setCurrentBarColor_d7aj7k$(color);
    this.prevDeltaT = ctx.deltaT;
    this.graphIdx = (this.graphIdx + 4 | 0) % (numberToInt(this.width) * 4 | 0);
    this.graphVertex.index = this.graphIdx;
    var y0 = this.graphVertex.position.y;
    var a = ctx.deltaT * 250;
    var b = this.height;
    var h = Math_0.min(a, b);
    var tmp$;
    tmp$ = this.graphVertex;
    tmp$.index = tmp$.index + 1 | 0;
    this.graphVertex.position.y = y0 + h;
    var tmp$_0;
    tmp$_0 = this.graphVertex;
    tmp$_0.index = tmp$_0.index + 1 | 0;
    this.graphVertex.position.y = y0 + h;
    this.setCurrentBarColor_d7aj7k$(Color$Companion_getInstance().MAGENTA);
    this.graphData.isSyncRequired = true;
    UiComponent.prototype.render_aemszp$.call(this, ctx);
  };
  DeltaTGraph.prototype.setCurrentBarColor_d7aj7k$ = function (color) {
    this.graphVertex.index = this.graphIdx;
    for (var i = 0; i <= 3; i++) {
      this.graphVertex.index = this.graphIdx + i | 0;
      this.graphVertex.color.set_d7aj7k$(color);
    }
  };
  DeltaTGraph.prototype.updateUi_aemszp$ = function (ctx) {
    var tmp$;
    UiComponent.prototype.updateUi_aemszp$.call(this, ctx);
    this.setupBuilder_84rojv$(this.graphBuilder);
    this.graphBuilder.color = Color$Companion_getInstance().WHITE;
    tmp$ = numberToInt(this.width);
    for (var i = 1; i <= tmp$; i++) {
      this.graphBuilder.line_s2l86p$(i - 0.5, 0.0, i - 0.5, 1.0, 1.0);
    }
  };
  DeltaTGraph.prototype.updateTheme_aemszp$ = function (ctx) {
    UiComponent.prototype.updateTheme_aemszp$.call(this, ctx);
    this.minusAssign_f1kmr1$(this.graphMesh);
    this.plusAssign_f1kmr1$(this.graphMesh);
  };
  function DeltaTGraph_init$lambda($receiver) {
    $receiver.colorModel = ColorModel$VERTEX_COLOR_getInstance();
    $receiver.lightModel = LightModel$NO_LIGHTING_getInstance();
    return Unit;
  }
  DeltaTGraph.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DeltaTGraph',
    interfaces: [UiComponent]
  };
  function Disposable() {
  }
  Disposable.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Disposable',
    interfaces: []
  };
  function EnvironmentMapRenderer(mapSize) {
    if (mapSize === void 0)
      mapSize = 512;
    this.fboFt_0 = (new Framebuffer(mapSize, mapSize, 34071)).withDepth();
    this.fboBk_0 = (new Framebuffer(mapSize, mapSize, 34072)).withDepth();
    this.fboLt_0 = (new Framebuffer(mapSize, mapSize, 34070)).withDepth();
    this.fboRt_0 = (new Framebuffer(mapSize, mapSize, 34069)).withDepth();
    this.fboUp_0 = (new Framebuffer(mapSize, mapSize, 34073)).withDepth();
    this.fboDn_0 = (new Framebuffer(mapSize, mapSize, 34074)).withDepth();
    var $receiver = new PerspectiveCamera();
    $receiver.fovy = 90.0;
    this.envCam_0 = $receiver;
    this.environmentMap = null;
    var props = new TextureProps('env-map', 9729, 9729, 33071, 33071, 0, 34067);
    this.environmentMap = new CubeMapTexture(props, EnvironmentMapRenderer_init$lambda(mapSize));
    this.fboFt_0.colorAttachment = this.environmentMap;
    this.fboBk_0.colorAttachment = this.environmentMap;
    this.fboLt_0.colorAttachment = this.environmentMap;
    this.fboRt_0.colorAttachment = this.environmentMap;
    this.fboUp_0.colorAttachment = this.environmentMap;
    this.fboDn_0.colorAttachment = this.environmentMap;
  }
  Object.defineProperty(EnvironmentMapRenderer.prototype, 'origin', {
    get: function () {
      return this.envCam_0.position;
    }
  });
  EnvironmentMapRenderer.prototype.update_imm2b7$ = function (nodesToRender, ctx) {
    var tmp$;
    tmp$ = nodesToRender.get_za3lpa$(0).scene;
    if (tmp$ == null) {
      return;
    }
    var scene = tmp$;
    var camera = scene.camera;
    scene.camera = this.envCam_0;
    this.renderView_0(nodesToRender, this.fboFt_0, Vec3f$Companion_getInstance().Y_AXIS, Vec3f$Companion_getInstance().Z_AXIS, ctx);
    this.renderView_0(nodesToRender, this.fboBk_0, Vec3f$Companion_getInstance().NEG_Y_AXIS, Vec3f$Companion_getInstance().NEG_Z_AXIS, ctx);
    this.renderView_0(nodesToRender, this.fboLt_0, Vec3f$Companion_getInstance().NEG_X_AXIS, Vec3f$Companion_getInstance().NEG_Y_AXIS, ctx);
    this.renderView_0(nodesToRender, this.fboRt_0, Vec3f$Companion_getInstance().X_AXIS, Vec3f$Companion_getInstance().NEG_Y_AXIS, ctx);
    this.renderView_0(nodesToRender, this.fboUp_0, Vec3f$Companion_getInstance().Z_AXIS, Vec3f$Companion_getInstance().NEG_Y_AXIS, ctx);
    this.renderView_0(nodesToRender, this.fboDn_0, Vec3f$Companion_getInstance().NEG_Z_AXIS, Vec3f$Companion_getInstance().NEG_Y_AXIS, ctx);
    scene.camera = camera;
  };
  EnvironmentMapRenderer.prototype.renderView_0 = function (nodesToRender, target, dir, up, ctx) {
    target.bind_aemszp$(ctx);
    glClear(256);
    ctx.mvpState.pushMatrices();
    ctx.mvpState.modelMatrix.setIdentity();
    this.envCam_0.lookAt.set_czzhiu$(this.envCam_0.position).add_czzhiu$(dir);
    this.envCam_0.up.set_czzhiu$(up);
    this.envCam_0.updateCamera_aemszp$(ctx);
    for (var i = 0; i !== nodesToRender.size; ++i) {
      nodesToRender.get_za3lpa$(i).render_aemszp$(ctx);
    }
    ctx.mvpState.popMatrices();
    ctx.mvpState.update_aemszp$(ctx);
    target.unbind_aemszp$(ctx);
  };
  function EnvironmentMapRenderer_init$lambda(closure$mapSize) {
    return function ($receiver, it) {
      return new CubeMapTextureData(new FbColorTexData(closure$mapSize, closure$mapSize), new FbColorTexData(closure$mapSize, closure$mapSize), new FbColorTexData(closure$mapSize, closure$mapSize), new FbColorTexData(closure$mapSize, closure$mapSize), new FbColorTexData(closure$mapSize, closure$mapSize), new FbColorTexData(closure$mapSize, closure$mapSize));
    };
  }
  EnvironmentMapRenderer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EnvironmentMapRenderer',
    interfaces: []
  };
  function uiFont(family, sizeDp, uiDpi, ctx, style, chars) {
    if (style === void 0)
      style = 0;
    if (chars === void 0)
      chars = Font$Companion_getInstance().STD_CHARS;
    var pts = sizeDp * uiDpi / 96.0;
    return new Font(new FontProps(family, pts, style, pts, chars), ctx);
  }
  function fontShader$lambda($receiver) {
    return Unit;
  }
  function fontShader$ObjectLiteral() {
  }
  fontShader$ObjectLiteral.prototype.fsAfterSampling_kv1jfs$ = function (shaderProps, node, text, ctx) {
    text.append_gw00v9$(ctx.glCapabilities.glslDialect.fragColorBody + ' = ' + GlslGenerator$Companion_getInstance().L_FS_VERTEX_COLOR + ' * ' + GlslGenerator$Companion_getInstance().L_FS_TEX_COLOR + '.a;' + '\n');
  };
  fontShader$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [GlslGenerator$GlslInjector]
  };
  function fontShader(font, propsInit) {
    if (font === void 0)
      font = null;
    if (propsInit === void 0)
      propsInit = fontShader$lambda;
    var props = new ShaderProps();
    propsInit(props);
    props.isVertexColor = true;
    props.isTextureColor = true;
    props.isDiscardTranslucent = true;
    var generator = new GlslGenerator();
    var $receiver = generator.injectors;
    var element = new fontShader$ObjectLiteral();
    $receiver.add_11rb$(element);
    var shader = new BasicShader(props, generator);
    shader.texture = font;
    return shader;
  }
  function FontProps(family, sizePts, style, sizeUnits, chars) {
    if (style === void 0)
      style = 0;
    if (sizeUnits === void 0)
      sizeUnits = sizePts;
    if (chars === void 0)
      chars = Font$Companion_getInstance().STD_CHARS;
    this.family = family;
    this.sizePts = sizePts;
    this.style = style;
    this.sizeUnits = sizeUnits;
    this.chars = chars;
  }
  FontProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FontProps',
    interfaces: []
  };
  FontProps.prototype.component1 = function () {
    return this.family;
  };
  FontProps.prototype.component2 = function () {
    return this.sizePts;
  };
  FontProps.prototype.component3 = function () {
    return this.style;
  };
  FontProps.prototype.component4 = function () {
    return this.sizeUnits;
  };
  FontProps.prototype.component5 = function () {
    return this.chars;
  };
  FontProps.prototype.copy_ogezb0$ = function (family, sizePts, style, sizeUnits, chars) {
    return new FontProps(family === void 0 ? this.family : family, sizePts === void 0 ? this.sizePts : sizePts, style === void 0 ? this.style : style, sizeUnits === void 0 ? this.sizeUnits : sizeUnits, chars === void 0 ? this.chars : chars);
  };
  FontProps.prototype.toString = function () {
    return 'FontProps(family=' + Kotlin.toString(this.family) + (', sizePts=' + Kotlin.toString(this.sizePts)) + (', style=' + Kotlin.toString(this.style)) + (', sizeUnits=' + Kotlin.toString(this.sizeUnits)) + (', chars=' + Kotlin.toString(this.chars)) + ')';
  };
  FontProps.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.family) | 0;
    result = result * 31 + Kotlin.hashCode(this.sizePts) | 0;
    result = result * 31 + Kotlin.hashCode(this.style) | 0;
    result = result * 31 + Kotlin.hashCode(this.sizeUnits) | 0;
    result = result * 31 + Kotlin.hashCode(this.chars) | 0;
    return result;
  };
  FontProps.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.family, other.family) && Kotlin.equals(this.sizePts, other.sizePts) && Kotlin.equals(this.style, other.style) && Kotlin.equals(this.sizeUnits, other.sizeUnits) && Kotlin.equals(this.chars, other.chars)))));
  };
  function Font(fontProps, ctx) {
    Font$Companion_getInstance();
    Texture.call(this, defaultProps(fontProps.toString()), Font_init$lambda(fontProps));
    this.fontProps = fontProps;
    this.charMap = null;
    this.lineSpace = this.fontProps.sizeUnits * 1.2;
    this.normHeight = this.fontProps.sizeUnits * 0.7;
    this.charMap = Font$Companion_getInstance().getCharMap_0(this.fontProps, ctx);
  }
  Font.prototype.textWidth_61zpoe$ = function (string) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var width = 0.0;
    var maxWidth = 0.0;
    tmp$ = get_indices_1(string);
    tmp$_0 = tmp$.first;
    tmp$_1 = tmp$.last;
    tmp$_2 = tmp$.step;
    for (var i = tmp$_0; i <= tmp$_1; i += tmp$_2) {
      var c = string.charCodeAt(i);
      width += this.charWidth_s8itvh$(c);
      if (width > maxWidth) {
        maxWidth = width;
      }
      if (c === 10) {
        width = 0.0;
      }
    }
    return maxWidth;
  };
  Font.prototype.charWidth_s8itvh$ = function (char) {
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.charMap.get_11rb$(toBoxedChar(char))) != null ? tmp$.advance : null) != null ? tmp$_0 : 0.0;
  };
  Font.prototype.toString = function () {
    return 'Font(' + this.fontProps.family + ', ' + this.fontProps.sizePts + 'pts, ' + this.fontProps.style + ')';
  };
  function Font$Companion() {
    Font$Companion_instance = this;
    this.PLAIN = 0;
    this.BOLD = 1;
    this.ITALIC = 2;
    this.SYSTEM_FONT = '-apple-system, "Segoe UI", Roboto, Helvetica, Arial, sans-serif';
    this.STD_CHARS = null;
    this.DEFAULT_FONT_PROPS = null;
    this.charMaps_0 = LinkedHashMap_init();
    var str = '';
    for (var i = 32; i <= 126; i++) {
      str += String.fromCharCode(toChar(i));
    }
    str += '\xE4\xC4\xF6\xD6\xFC\xDC\xDF\xB0\xA9';
    this.STD_CHARS = str;
    this.DEFAULT_FONT_PROPS = new FontProps(this.SYSTEM_FONT, 12.0);
  }
  Font$Companion.prototype.defaultFont_aemszp$ = function (ctx) {
    return new Font(this.DEFAULT_FONT_PROPS, ctx);
  };
  Font$Companion.prototype.getCharMap_0 = function (fontProps, ctx) {
    var map = this.charMaps_0.get_11rb$(fontProps);
    if (map == null) {
      map = ctx.assetMgr.createCharMap_ttufcy$(fontProps);
      var $receiver = this.charMaps_0;
      var value = map;
      $receiver.put_xwzc9p$(fontProps, value);
    }
    return map;
  };
  Font$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Font$Companion_instance = null;
  function Font$Companion_getInstance() {
    if (Font$Companion_instance === null) {
      new Font$Companion();
    }
    return Font$Companion_instance;
  }
  function Font_init$lambda(closure$fontProps) {
    return function ($receiver, it) {
      return Font$Companion_getInstance().getCharMap_0(closure$fontProps, it).textureData;
    };
  }
  Font.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Font',
    interfaces: [Texture]
  };
  function CharMetrics() {
    this.width = 0.0;
    this.height = 0.0;
    this.xOffset = 0.0;
    this.yBaseline = 0.0;
    this.advance = 0.0;
    this.uvMin = MutableVec2f_init();
    this.uvMax = MutableVec2f_init();
  }
  CharMetrics.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CharMetrics',
    interfaces: []
  };
  function CharMap(textureData, map, fontProps) {
    this.textureData = textureData;
    this.map_0 = map;
    this.fontProps = fontProps;
  }
  Object.defineProperty(CharMap.prototype, 'entries', {
    get: function () {
      return this.map_0.entries;
    }
  });
  Object.defineProperty(CharMap.prototype, 'keys', {
    get: function () {
      return this.map_0.keys;
    }
  });
  Object.defineProperty(CharMap.prototype, 'size', {
    get: function () {
      return this.map_0.size;
    }
  });
  Object.defineProperty(CharMap.prototype, 'values', {
    get: function () {
      return this.map_0.values;
    }
  });
  CharMap.prototype.containsKey_11rb$ = function (key) {
    return this.map_0.containsKey_11rb$(key);
  };
  CharMap.prototype.containsValue_11rc$ = function (value) {
    return this.map_0.containsValue_11rc$(value);
  };
  CharMap.prototype.get_11rb$ = function (key) {
    return this.map_0.get_11rb$(key);
  };
  CharMap.prototype.isEmpty = function () {
    return this.map_0.isEmpty();
  };
  CharMap.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CharMap',
    interfaces: [Map]
  };
  function IndexedVertexList(vertexAttributes) {
    IndexedVertexList$Companion_getInstance();
    this.vertexSizeF = 0;
    this.strideBytesF = 0;
    this.vertexSizeI = 0;
    this.strideBytesI = 0;
    this.size = 0;
    this.dataF = null;
    this.dataI = null;
    this.indices = createUint32Buffer(IndexedVertexList$Companion_getInstance().INITIAL_SIZE_8be2vx$);
    this.attributeOffsets = null;
    this.vertexIt = null;
    var tmp$;
    var cntF = 0;
    var cntI = 0;
    var offsets = LinkedHashMap_init();
    tmp$ = vertexAttributes.iterator();
    while (tmp$.hasNext()) {
      var attrib = tmp$.next();
      if (attrib.type.isInt) {
        var value = cntI;
        offsets.put_xwzc9p$(attrib, value);
        cntI = cntI + attrib.type.size | 0;
      }
       else {
        var value_0 = cntF;
        offsets.put_xwzc9p$(attrib, value_0);
        cntF = cntF + attrib.type.size | 0;
      }
    }
    this.attributeOffsets = offsets;
    this.vertexSizeF = cntF;
    this.strideBytesF = this.vertexSizeF * 4 | 0;
    this.vertexSizeI = cntI;
    this.strideBytesI = this.vertexSizeI * 4 | 0;
    this.dataF = createFloat32Buffer(Kotlin.imul(cntF, IndexedVertexList$Companion_getInstance().INITIAL_SIZE_8be2vx$));
    this.dataI = createUint32Buffer(Kotlin.imul(cntI, IndexedVertexList$Companion_getInstance().INITIAL_SIZE_8be2vx$));
    this.vertexIt = new IndexedVertexList$Vertex(this, 0);
  }
  function IndexedVertexList$Companion() {
    IndexedVertexList$Companion_instance = this;
    this.INITIAL_SIZE_8be2vx$ = 1000;
    this.GROW_FACTOR_8be2vx$ = 2.0;
  }
  IndexedVertexList$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var IndexedVertexList$Companion_instance = null;
  function IndexedVertexList$Companion_getInstance() {
    if (IndexedVertexList$Companion_instance === null) {
      new IndexedVertexList$Companion();
    }
    return IndexedVertexList$Companion_instance;
  }
  Object.defineProperty(IndexedVertexList.prototype, 'lastIndex', {
    get: function () {
      return this.size - 1 | 0;
    }
  });
  IndexedVertexList.prototype.increaseDataSizeF_0 = function (newSize) {
    var newData = createFloat32Buffer(newSize);
    this.dataF.flip();
    newData.put_he122g$(this.dataF);
    this.dataF = newData;
  };
  IndexedVertexList.prototype.increaseDataSizeI_0 = function (newSize) {
    var newData = createUint32Buffer(newSize);
    this.dataI.flip();
    newData.put_7hqxcs$(this.dataI);
    this.dataI = newData;
  };
  IndexedVertexList.prototype.increaseIndicesSize_0 = function (newSize) {
    var newIdxs = createUint32Buffer(newSize);
    this.indices.flip();
    newIdxs.put_7hqxcs$(this.indices);
    this.indices = newIdxs;
  };
  IndexedVertexList.prototype.checkBufferSizes_za3lpa$ = function (reqSpace) {
    if (reqSpace === void 0)
      reqSpace = 1;
    if (this.dataF.remaining < Kotlin.imul(this.vertexSizeF, reqSpace)) {
      var a = numberToInt(round(this.dataF.capacity * IndexedVertexList$Companion_getInstance().GROW_FACTOR_8be2vx$));
      var b = Kotlin.imul(this.size + reqSpace | 0, this.vertexSizeF);
      this.increaseDataSizeF_0(Math_0.max(a, b));
    }
    if (this.dataI.remaining < Kotlin.imul(this.vertexSizeI, reqSpace)) {
      var a_0 = numberToInt(round(this.dataI.capacity * IndexedVertexList$Companion_getInstance().GROW_FACTOR_8be2vx$));
      var b_0 = Kotlin.imul(this.size + reqSpace | 0, this.vertexSizeI);
      this.increaseDataSizeI_0(Math_0.max(a_0, b_0));
    }
  };
  IndexedVertexList.prototype.checkIndexSize_za3lpa$ = function (reqSpace) {
    if (reqSpace === void 0)
      reqSpace = 1;
    if (this.indices.remaining < reqSpace) {
      var a = numberToInt(round(this.indices.capacity * IndexedVertexList$Companion_getInstance().GROW_FACTOR_8be2vx$));
      var b = this.size + reqSpace | 0;
      this.increaseIndicesSize_0(Math_0.max(a, b));
    }
  };
  IndexedVertexList.prototype.addVertex_z2do90$ = defineInlineFunction('kool.de.fabmax.kool.util.IndexedVertexList.addVertex_z2do90$', function (updateBounds, block) {
    if (updateBounds === void 0)
      updateBounds = null;
    var tmp$, tmp$_0, tmp$_1;
    this.checkBufferSizes_za3lpa$();
    tmp$ = this.vertexSizeF;
    for (var i = 1; i <= tmp$; i++) {
      this.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_0 = this.vertexSizeI;
    for (var i_0 = 1; i_0 <= tmp$_0; i_0++) {
      this.dataI.plusAssign_za3lpa$(0);
    }
    this.vertexIt.index = (tmp$_1 = this.size, this.size = tmp$_1 + 1 | 0, tmp$_1);
    block(this.vertexIt);
    updateBounds != null ? updateBounds.add_czzhiu$(this.vertexIt.position) : null;
    return this.size - 1 | 0;
  });
  IndexedVertexList.prototype.addFrom_r7nl2o$ = function (other) {
    var tmp$, tmp$_0;
    var baseIdx = this.size;
    this.checkBufferSizes_za3lpa$(other.size);
    tmp$ = other.size;
    for (var i = 0; i < tmp$; i++) {
      var tmp$_1, tmp$_2, tmp$_3;
      this.checkBufferSizes_za3lpa$();
      tmp$_1 = this.vertexSizeF;
      for (var i_0 = 1; i_0 <= tmp$_1; i_0++) {
        this.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_2 = this.vertexSizeI;
      for (var i_1 = 1; i_1 <= tmp$_2; i_1++) {
        this.dataI.plusAssign_za3lpa$(0);
      }
      this.vertexIt.index = (tmp$_3 = this.size, this.size = tmp$_3 + 1 | 0, tmp$_3);
      var $receiver = this.vertexIt;
      other.vertexIt.index = i;
      $receiver.set_j5bz6$(other.vertexIt);
      null != null ? null.add_czzhiu$(this.vertexIt.position) : null;
      this.size - 1 | 0;
    }
    this.checkIndexSize_za3lpa$(other.indices.position);
    tmp$_0 = other.indices.position;
    for (var i_2 = 0; i_2 < tmp$_0; i_2++) {
      this.addIndex_za3lpa$(baseIdx + other.indices.get_za3lpa$(i_2) | 0);
    }
  };
  IndexedVertexList.prototype.addVertex_lv7vxo$ = function (position, normal, color, texCoord) {
    if (normal === void 0)
      normal = null;
    if (color === void 0)
      color = null;
    if (texCoord === void 0)
      texCoord = null;
    var tmp$, tmp$_0, tmp$_1;
    this.checkBufferSizes_za3lpa$();
    tmp$ = this.vertexSizeF;
    for (var i = 1; i <= tmp$; i++) {
      this.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_0 = this.vertexSizeI;
    for (var i_0 = 1; i_0 <= tmp$_0; i_0++) {
      this.dataI.plusAssign_za3lpa$(0);
    }
    this.vertexIt.index = (tmp$_1 = this.size, this.size = tmp$_1 + 1 | 0, tmp$_1);
    var $receiver = this.vertexIt;
    $receiver.position.set_czzhiu$(position);
    if (normal != null) {
      $receiver.normal.set_czzhiu$(normal);
    }
    if (color != null) {
      $receiver.color.set_d7aj7k$(color);
    }
    if (texCoord != null) {
      $receiver.texCoord.set_czzhjp$(texCoord);
    }
    null != null ? null.add_czzhiu$(this.vertexIt.position) : null;
    return this.size - 1 | 0;
  };
  IndexedVertexList.prototype.addIndex_za3lpa$ = function (idx) {
    if (this.indices.remaining === 0) {
      this.checkIndexSize_za3lpa$();
    }
    this.indices.plusAssign_za3lpa$(idx);
  };
  IndexedVertexList.prototype.addIndices_q5rwfd$ = function (indices) {
    for (var idx = 0; idx !== indices.length; ++idx) {
      this.addIndex_za3lpa$(indices[idx]);
    }
  };
  IndexedVertexList.prototype.addIndices_pqoyrt$ = function (indices) {
    for (var idx = 0; idx !== indices.size; ++idx) {
      this.addIndex_za3lpa$(indices.get_za3lpa$(idx));
    }
  };
  IndexedVertexList.prototype.clear = function () {
    this.size = 0;
    this.dataF.position = 0;
    this.dataF.limit = this.dataF.capacity;
    this.dataI.position = 0;
    this.dataI.limit = this.dataI.capacity;
    this.indices.position = 0;
    this.indices.limit = this.indices.capacity;
  };
  IndexedVertexList.prototype.clearIndices = function () {
    this.indices.position = 0;
    this.indices.limit = this.indices.capacity;
  };
  IndexedVertexList.prototype.shrinkIndices_za3lpa$ = function (newSize) {
    if (newSize > this.indices.position) {
      throw KoolException_init('new size must be less (or equal) than old size');
    }
    this.indices.position = newSize;
    this.indices.limit = this.indices.capacity;
  };
  IndexedVertexList.prototype.shrinkVertices_za3lpa$ = function (newSize) {
    if (newSize > this.size) {
      throw KoolException_init('new size must be less (or equal) than old size');
    }
    this.size = newSize;
    this.dataF.position = Kotlin.imul(newSize, this.vertexSizeF);
    this.dataF.limit = this.dataF.capacity;
    this.dataI.position = Kotlin.imul(newSize, this.vertexSizeI);
    this.dataI.limit = this.dataI.capacity;
  };
  IndexedVertexList.prototype.get_za3lpa$ = function (i) {
    if (i < 0 || i >= (this.dataF.capacity / this.vertexSizeF | 0)) {
      throw KoolException_init('Vertex index out of bounds: ' + i);
    }
    return new IndexedVertexList$Vertex(this, i);
  };
  IndexedVertexList.prototype.forEach_hvwyd1$ = defineInlineFunction('kool.de.fabmax.kool.util.IndexedVertexList.forEach_hvwyd1$', function (block) {
    var tmp$;
    tmp$ = this.size;
    for (var i = 0; i < tmp$; i++) {
      this.vertexIt.index = i;
      block(this.vertexIt);
    }
  });
  function IndexedVertexList$Vertex($outer, index) {
    this.$outer = $outer;
    MutableVec3f_init(this);
    this.offsetF_0 = Kotlin.imul(index, this.$outer.vertexSizeF);
    this.offsetI_0 = Kotlin.imul(index, this.$outer.vertexSizeI);
    this.index_3yqnyk$_0 = index;
    this.position = null;
    this.normal = null;
    this.tangent = null;
    this.color = null;
    this.texCoord = null;
    this.attributeViews_0 = null;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    var attribViews = LinkedHashMap_init();
    this.attributeViews_0 = attribViews;
    tmp$ = this.$outer.attributeOffsets.entries.iterator();
    while (tmp$.hasNext()) {
      var offset = tmp$.next();
      switch (offset.key.type.name) {
        case 'FLOAT':
          var key = offset.key;
          var value = new IndexedVertexList$Vertex$FloatView(this, offset.value);
          attribViews.put_xwzc9p$(key, value);
          break;
        case 'VEC_2F':
          var key_0 = offset.key;
          var value_0 = new IndexedVertexList$Vertex$Vec2fView(this, offset.value);
          attribViews.put_xwzc9p$(key_0, value_0);
          break;
        case 'VEC_3F':
          var key_1 = offset.key;
          var value_1 = new IndexedVertexList$Vertex$Vec3fView(this, offset.value);
          attribViews.put_xwzc9p$(key_1, value_1);
          break;
        case 'VEC_4F':
          var key_2 = offset.key;
          var value_2 = new IndexedVertexList$Vertex$Vec4fView(this, offset.value);
          attribViews.put_xwzc9p$(key_2, value_2);
          break;
        case 'COLOR_4F':
          var key_3 = offset.key;
          var value_3 = new IndexedVertexList$Vertex$ColorView(this, offset.value);
          attribViews.put_xwzc9p$(key_3, value_3);
          break;
        case 'INT':
          var key_4 = offset.key;
          var value_4 = new IndexedVertexList$Vertex$IntView(this, offset.value);
          attribViews.put_xwzc9p$(key_4, value_4);
          break;
        case 'VEC_2I':
          var key_5 = offset.key;
          var value_5 = new IndexedVertexList$Vertex$Vec2iView(this, offset.value);
          attribViews.put_xwzc9p$(key_5, value_5);
          break;
        case 'VEC_3I':
          var key_6 = offset.key;
          var value_6 = new IndexedVertexList$Vertex$Vec3iView(this, offset.value);
          attribViews.put_xwzc9p$(key_6, value_6);
          break;
        case 'VEC_4I':
          var key_7 = offset.key;
          var value_7 = new IndexedVertexList$Vertex$Vec4iView(this, offset.value);
          attribViews.put_xwzc9p$(key_7, value_7);
          break;
      }
    }
    this.position = (tmp$_0 = this.getVec3fAttribute_mczodr$(Attribute$Companion_getInstance().POSITIONS)) != null ? tmp$_0 : new IndexedVertexList$Vertex$Vec3fView(this, -1);
    this.normal = (tmp$_1 = this.getVec3fAttribute_mczodr$(Attribute$Companion_getInstance().NORMALS)) != null ? tmp$_1 : new IndexedVertexList$Vertex$Vec3fView(this, -1);
    this.tangent = (tmp$_2 = this.getVec3fAttribute_mczodr$(Attribute$Companion_getInstance().TANGENTS)) != null ? tmp$_2 : new IndexedVertexList$Vertex$Vec3fView(this, -1);
    this.texCoord = (tmp$_3 = this.getVec2fAttribute_mczodr$(Attribute$Companion_getInstance().TEXTURE_COORDS)) != null ? tmp$_3 : new IndexedVertexList$Vertex$Vec2fView(this, -1);
    this.color = (tmp$_4 = this.getColorAttribute_mczodr$(Attribute$Companion_getInstance().COLORS)) != null ? tmp$_4 : new IndexedVertexList$Vertex$ColorView(this, -1);
  }
  Object.defineProperty(IndexedVertexList$Vertex.prototype, 'index', {
    get: function () {
      return this.index_3yqnyk$_0;
    },
    set: function (value) {
      this.index_3yqnyk$_0 = value;
      this.offsetF_0 = Kotlin.imul(value, this.$outer.vertexSizeF);
      this.offsetI_0 = Kotlin.imul(value, this.$outer.vertexSizeI);
    }
  });
  Object.defineProperty(IndexedVertexList$Vertex.prototype, 'x', {
    get: function () {
      return this.position.x;
    },
    set: function (value) {
      this.position.x = value;
    }
  });
  Object.defineProperty(IndexedVertexList$Vertex.prototype, 'y', {
    get: function () {
      return this.position.y;
    },
    set: function (value) {
      this.position.y = value;
    }
  });
  Object.defineProperty(IndexedVertexList$Vertex.prototype, 'z', {
    get: function () {
      return this.position.z;
    },
    set: function (value) {
      this.position.z = value;
    }
  });
  IndexedVertexList$Vertex.prototype.set_j5bz6$ = function (other) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8;
    tmp$ = this.attributeViews_0.keys.iterator();
    while (tmp$.hasNext()) {
      var attrib = tmp$.next();
      var view = other.attributeViews_0.get_11rb$(attrib);
      if (view != null) {
        if (Kotlin.isType(view, IndexedVertexList$Vertex$FloatView))
          (Kotlin.isType(tmp$_0 = this.attributeViews_0.get_11rb$(attrib), IndexedVertexList$Vertex$FloatView) ? tmp$_0 : throwCCE()).f = view.f;
        else if (Kotlin.isType(view, IndexedVertexList$Vertex$Vec2fView))
          (Kotlin.isType(tmp$_1 = this.attributeViews_0.get_11rb$(attrib), IndexedVertexList$Vertex$Vec2fView) ? tmp$_1 : throwCCE()).set_czzhjp$(view);
        else if (Kotlin.isType(view, IndexedVertexList$Vertex$Vec3fView))
          (Kotlin.isType(tmp$_2 = this.attributeViews_0.get_11rb$(attrib), IndexedVertexList$Vertex$Vec3fView) ? tmp$_2 : throwCCE()).set_czzhiu$(view);
        else if (Kotlin.isType(view, IndexedVertexList$Vertex$Vec4fView))
          (Kotlin.isType(tmp$_3 = this.attributeViews_0.get_11rb$(attrib), IndexedVertexList$Vertex$Vec4fView) ? tmp$_3 : throwCCE()).set_czzhhz$(view);
        else if (Kotlin.isType(view, IndexedVertexList$Vertex$ColorView))
          (Kotlin.isType(tmp$_4 = this.attributeViews_0.get_11rb$(attrib), IndexedVertexList$Vertex$ColorView) ? tmp$_4 : throwCCE()).set_d7aj7k$(view);
        else if (Kotlin.isType(view, IndexedVertexList$Vertex$IntView))
          (Kotlin.isType(tmp$_5 = this.attributeViews_0.get_11rb$(attrib), IndexedVertexList$Vertex$IntView) ? tmp$_5 : throwCCE()).i = view.i;
        else if (Kotlin.isType(view, IndexedVertexList$Vertex$Vec2iView))
          (Kotlin.isType(tmp$_6 = this.attributeViews_0.get_11rb$(attrib), IndexedVertexList$Vertex$Vec2iView) ? tmp$_6 : throwCCE()).set_c4i3fg$(view);
        else if (Kotlin.isType(view, IndexedVertexList$Vertex$Vec3iView))
          (Kotlin.isType(tmp$_7 = this.attributeViews_0.get_11rb$(attrib), IndexedVertexList$Vertex$Vec3iView) ? tmp$_7 : throwCCE()).set_bngh19$(view);
        else if (Kotlin.isType(view, IndexedVertexList$Vertex$Vec4iView))
          (Kotlin.isType(tmp$_8 = this.attributeViews_0.get_11rb$(attrib), IndexedVertexList$Vertex$Vec4iView) ? tmp$_8 : throwCCE()).set_b6eun2$(view);
      }
    }
  };
  IndexedVertexList$Vertex.prototype.getFloatAttribute_mczodr$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, IndexedVertexList$Vertex$FloatView) ? tmp$ : throwCCE();
  };
  IndexedVertexList$Vertex.prototype.getVec2fAttribute_mczodr$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, MutableVec2f) ? tmp$ : throwCCE();
  };
  IndexedVertexList$Vertex.prototype.getVec3fAttribute_mczodr$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, MutableVec3f) ? tmp$ : throwCCE();
  };
  IndexedVertexList$Vertex.prototype.getVec4fAttribute_mczodr$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, MutableVec4f) ? tmp$ : throwCCE();
  };
  IndexedVertexList$Vertex.prototype.getColorAttribute_mczodr$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, MutableColor) ? tmp$ : throwCCE();
  };
  IndexedVertexList$Vertex.prototype.getIntAttribute_mczodr$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, IndexedVertexList$Vertex$IntView) ? tmp$ : throwCCE();
  };
  IndexedVertexList$Vertex.prototype.getVec2iAttribute_mczodr$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, IndexedVertexList$Vertex$Vec2iView) ? tmp$ : throwCCE();
  };
  IndexedVertexList$Vertex.prototype.getVec3iAttribute_mczodr$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, IndexedVertexList$Vertex$Vec3iView) ? tmp$ : throwCCE();
  };
  IndexedVertexList$Vertex.prototype.getVec4iAttribute_mczodr$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, IndexedVertexList$Vertex$Vec4iView) ? tmp$ : throwCCE();
  };
  function IndexedVertexList$Vertex$FloatView($outer, attribOffset) {
    this.$outer = $outer;
    this.attribOffset_0 = attribOffset;
  }
  Object.defineProperty(IndexedVertexList$Vertex$FloatView.prototype, 'f', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0.0;
      }
       else {
        return this.$outer.$outer.dataF.get_za3lpa$(this.$outer.offsetF_0 + this.attribOffset_0 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.$outer.dataF.set_24o109$(this.$outer.offsetF_0 + this.attribOffset_0 | 0, value);
      }
    }
  });
  IndexedVertexList$Vertex$FloatView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FloatView',
    interfaces: []
  };
  function IndexedVertexList$Vertex$Vec2fView($outer, attribOffset) {
    this.$outer = $outer;
    MutableVec2f_init(this);
    this.attribOffset_0 = attribOffset;
  }
  IndexedVertexList$Vertex$Vec2fView.prototype.get_za3lpa$ = function (i) {
    var tmp$;
    if (this.attribOffset_0 >= 0 && (0 <= i && i <= 1)) {
      tmp$ = this.$outer.$outer.dataF.get_za3lpa$(this.$outer.offsetF_0 + this.attribOffset_0 + i | 0);
    }
     else {
      tmp$ = 0.0;
    }
    return tmp$;
  };
  IndexedVertexList$Vertex$Vec2fView.prototype.set_24o109$ = function (i, v) {
    if (this.attribOffset_0 >= 0 && (0 <= i && i <= 1)) {
      this.$outer.$outer.dataF.set_24o109$(this.$outer.offsetF_0 + this.attribOffset_0 + i | 0, v);
    }
  };
  IndexedVertexList$Vertex$Vec2fView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec2fView',
    interfaces: [MutableVec2f]
  };
  function IndexedVertexList$Vertex$Vec3fView($outer, attribOffset) {
    this.$outer = $outer;
    MutableVec3f_init(this);
    this.attribOffset = attribOffset;
  }
  IndexedVertexList$Vertex$Vec3fView.prototype.get_za3lpa$ = function (i) {
    var tmp$;
    if (this.attribOffset >= 0 && (0 <= i && i <= 2)) {
      tmp$ = this.$outer.$outer.dataF.get_za3lpa$(this.$outer.offsetF_0 + this.attribOffset + i | 0);
    }
     else {
      tmp$ = 0.0;
    }
    return tmp$;
  };
  IndexedVertexList$Vertex$Vec3fView.prototype.set_24o109$ = function (i, v) {
    if (this.attribOffset >= 0 && (0 <= i && i <= 2)) {
      this.$outer.$outer.dataF.set_24o109$(this.$outer.offsetF_0 + this.attribOffset + i | 0, v);
    }
  };
  IndexedVertexList$Vertex$Vec3fView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec3fView',
    interfaces: [MutableVec3f]
  };
  function IndexedVertexList$Vertex$Vec4fView($outer, attribOffset) {
    this.$outer = $outer;
    MutableVec4f_init(this);
    this.attribOffset = attribOffset;
  }
  IndexedVertexList$Vertex$Vec4fView.prototype.get_za3lpa$ = function (i) {
    var tmp$;
    if (this.attribOffset >= 0 && (0 <= i && i <= 3)) {
      tmp$ = this.$outer.$outer.dataF.get_za3lpa$(this.$outer.offsetF_0 + this.attribOffset + i | 0);
    }
     else {
      tmp$ = 0.0;
    }
    return tmp$;
  };
  IndexedVertexList$Vertex$Vec4fView.prototype.set_24o109$ = function (i, v) {
    if (this.attribOffset >= 0 && (0 <= i && i <= 3)) {
      this.$outer.$outer.dataF.set_24o109$(this.$outer.offsetF_0 + this.attribOffset + i | 0, v);
    }
  };
  IndexedVertexList$Vertex$Vec4fView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec4fView',
    interfaces: [MutableVec4f]
  };
  function IndexedVertexList$Vertex$ColorView($outer, attribOffset) {
    this.$outer = $outer;
    MutableColor_init(this);
    this.attribOffset = attribOffset;
  }
  IndexedVertexList$Vertex$ColorView.prototype.get_za3lpa$ = function (i) {
    var tmp$;
    if (this.attribOffset >= 0 && (0 <= i && i <= 3)) {
      tmp$ = this.$outer.$outer.dataF.get_za3lpa$(this.$outer.offsetF_0 + this.attribOffset + i | 0);
    }
     else {
      tmp$ = 0.0;
    }
    return tmp$;
  };
  IndexedVertexList$Vertex$ColorView.prototype.set_24o109$ = function (i, v) {
    if (this.attribOffset >= 0 && (0 <= i && i <= 3)) {
      this.$outer.$outer.dataF.set_24o109$(this.$outer.offsetF_0 + this.attribOffset + i | 0, v);
    }
  };
  IndexedVertexList$Vertex$ColorView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ColorView',
    interfaces: [MutableColor]
  };
  function IndexedVertexList$Vertex$IntView($outer, attribOffset) {
    this.$outer = $outer;
    this.attribOffset_0 = attribOffset;
  }
  Object.defineProperty(IndexedVertexList$Vertex$IntView.prototype, 'i', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      }
       else {
        return this.$outer.$outer.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.$outer.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 | 0, value);
      }
    }
  });
  IndexedVertexList$Vertex$IntView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IntView',
    interfaces: []
  };
  function IndexedVertexList$Vertex$Vec2iView($outer, attribOffset) {
    this.$outer = $outer;
    this.attribOffset_0 = attribOffset;
  }
  Object.defineProperty(IndexedVertexList$Vertex$Vec2iView.prototype, 'x', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      }
       else {
        return this.$outer.$outer.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.$outer.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 | 0, value);
      }
    }
  });
  Object.defineProperty(IndexedVertexList$Vertex$Vec2iView.prototype, 'y', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      }
       else {
        return this.$outer.$outer.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 + 1 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.$outer.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 + 1 | 0, value);
      }
    }
  });
  IndexedVertexList$Vertex$Vec2iView.prototype.set_vux9f0$ = function (x, y) {
    this.x = x;
    this.y = y;
  };
  IndexedVertexList$Vertex$Vec2iView.prototype.set_c4i3fg$ = function (other) {
    this.x = other.x;
    this.y = other.y;
  };
  IndexedVertexList$Vertex$Vec2iView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec2iView',
    interfaces: []
  };
  function IndexedVertexList$Vertex$Vec3iView($outer, attribOffset) {
    this.$outer = $outer;
    this.attribOffset_0 = attribOffset;
  }
  Object.defineProperty(IndexedVertexList$Vertex$Vec3iView.prototype, 'x', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      }
       else {
        return this.$outer.$outer.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.$outer.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 | 0, value);
      }
    }
  });
  Object.defineProperty(IndexedVertexList$Vertex$Vec3iView.prototype, 'y', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      }
       else {
        return this.$outer.$outer.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 + 1 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.$outer.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 + 1 | 0, value);
      }
    }
  });
  Object.defineProperty(IndexedVertexList$Vertex$Vec3iView.prototype, 'z', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      }
       else {
        return this.$outer.$outer.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 + 2 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.$outer.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 + 2 | 0, value);
      }
    }
  });
  IndexedVertexList$Vertex$Vec3iView.prototype.set_bngh19$ = function (other) {
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
  };
  IndexedVertexList$Vertex$Vec3iView.prototype.set_qt1dr2$ = function (x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
  };
  IndexedVertexList$Vertex$Vec3iView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec3iView',
    interfaces: []
  };
  function IndexedVertexList$Vertex$Vec4iView($outer, attribOffset) {
    this.$outer = $outer;
    this.attribOffset_0 = attribOffset;
  }
  Object.defineProperty(IndexedVertexList$Vertex$Vec4iView.prototype, 'x', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      }
       else {
        return this.$outer.$outer.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.$outer.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 | 0, value);
      }
    }
  });
  Object.defineProperty(IndexedVertexList$Vertex$Vec4iView.prototype, 'y', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      }
       else {
        return this.$outer.$outer.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 + 1 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.$outer.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 + 1 | 0, value);
      }
    }
  });
  Object.defineProperty(IndexedVertexList$Vertex$Vec4iView.prototype, 'z', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      }
       else {
        return this.$outer.$outer.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 + 2 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.$outer.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 + 2 | 0, value);
      }
    }
  });
  Object.defineProperty(IndexedVertexList$Vertex$Vec4iView.prototype, 'w', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      }
       else {
        return this.$outer.$outer.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 + 3 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.$outer.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 + 3 | 0, value);
      }
    }
  });
  IndexedVertexList$Vertex$Vec4iView.prototype.set_b6eun2$ = function (other) {
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
    this.w = other.w;
  };
  IndexedVertexList$Vertex$Vec4iView.prototype.set_tjonv8$ = function (x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
  };
  IndexedVertexList$Vertex$Vec4iView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec4iView',
    interfaces: []
  };
  IndexedVertexList$Vertex.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vertex',
    interfaces: [MutableVec3f]
  };
  IndexedVertexList.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IndexedVertexList',
    interfaces: []
  };
  function KdTree(items, itemAdapter, bucketSz) {
    if (bucketSz === void 0)
      bucketSz = 20;
    SpatialTree.call(this, itemAdapter);
    this.root_qv5wxo$_0 = null;
    var size = items.size;
    var init = getCallableRef('get', function ($receiver, index) {
      return $receiver.get_za3lpa$(index);
    }.bind(null, items));
    var list = ArrayList_init(size);
    for (var index = 0; index < size; index++) {
      list.add_11rb$(init(index));
    }
    this.items_0 = list;
    this.cmpX_0 = KdTree$cmpX$lambda(itemAdapter);
    this.cmpY_0 = KdTree$cmpY$lambda(itemAdapter);
    this.cmpZ_0 = KdTree$cmpZ$lambda(itemAdapter);
    this.root_qv5wxo$_0 = new KdTree$KdNode(this, get_indices(items), 0, bucketSz);
  }
  Object.defineProperty(KdTree.prototype, 'root', {
    get: function () {
      return this.root_qv5wxo$_0;
    }
  });
  Object.defineProperty(KdTree.prototype, 'size', {
    get: function () {
      return this.items_0.size;
    }
  });
  KdTree.prototype.contains_11rb$ = function (element) {
    return this.root.contains_uargzz$(element);
  };
  KdTree.prototype.containsAll_brywnq$ = function (elements) {
    var tmp$;
    tmp$ = elements.iterator();
    while (tmp$.hasNext()) {
      var elem = tmp$.next();
      if (!this.contains_11rb$(elem)) {
        return false;
      }
    }
    return true;
  };
  KdTree.prototype.isEmpty = function () {
    return this.items_0.isEmpty();
  };
  KdTree.prototype.iterator = function () {
    return this.items_0.iterator();
  };
  function KdTree$KdNode($outer, nodeRange, depth, bucketSz) {
    this.$outer = $outer;
    SpatialTree$Node.call(this, this.$outer, depth);
    this.nodeRange_rt7fdu$_0 = nodeRange;
    this.children_wv5otg$_0 = ArrayList_init_0();
    this.size_zddesm$_0 = 0;
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var tmpVec = MutableVec3f_init();
    this.size_zddesm$_0 = this.nodeRange.last - this.nodeRange.first + 1 | 0;
    var $this = this.bounds;
    this.$outer;
    var wasBatchUpdate = $this.isBatchUpdate;
    $this.isBatchUpdate = true;
    var this$KdTree = this.$outer;
    var tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    tmp$_3 = this.nodeRange;
    tmp$_4 = tmp$_3.first;
    tmp$_5 = tmp$_3.last;
    tmp$_6 = tmp$_3.step;
    for (var i = tmp$_4; i <= tmp$_5; i += tmp$_6) {
      var it = this.items.get_za3lpa$(i);
      $this.add_czzhiu$(this$KdTree.itemAdapter.getMin_hm1yd1$(it, tmpVec));
      $this.add_czzhiu$(this$KdTree.itemAdapter.getMax_hm1yd1$(it, tmpVec));
    }
    $this.isBatchUpdate = wasBatchUpdate;
    if ((this.nodeRange.last - this.nodeRange.first | 0) > bucketSz) {
      var cmp = this.$outer.cmpX_0;
      if (this.bounds.size.y > this.bounds.size.x && this.bounds.size.y > this.bounds.size.z) {
        cmp = this.$outer.cmpY_0;
      }
       else if (this.bounds.size.z > this.bounds.size.x && this.bounds.size.z > this.bounds.size.y) {
        cmp = this.$outer.cmpZ_0;
      }
      var k = this.nodeRange.first + ((this.nodeRange.last - this.nodeRange.first | 0) / 2 | 0) | 0;
      partition_0(this.$outer.items_0, this.nodeRange, k, cmp);
      this.children.add_11rb$(new KdTree$KdNode(this.$outer, new IntRange(this.nodeRange.first, k), depth + 1 | 0, bucketSz));
      this.children.add_11rb$(new KdTree$KdNode(this.$outer, new IntRange(k + 1 | 0, this.nodeRange.last), depth + 1 | 0, bucketSz));
    }
     else {
      tmp$ = this.nodeRange;
      tmp$_0 = tmp$.first;
      tmp$_1 = tmp$.last;
      tmp$_2 = tmp$.step;
      for (var i_0 = tmp$_0; i_0 <= tmp$_1; i_0 += tmp$_2) {
        this.$outer.itemAdapter.setNode_bc9457$(this.items.get_za3lpa$(i_0), this);
      }
    }
  }
  Object.defineProperty(KdTree$KdNode.prototype, 'nodeRange', {
    get: function () {
      return this.nodeRange_rt7fdu$_0;
    }
  });
  Object.defineProperty(KdTree$KdNode.prototype, 'children', {
    get: function () {
      return this.children_wv5otg$_0;
    }
  });
  Object.defineProperty(KdTree$KdNode.prototype, 'size', {
    get: function () {
      return this.size_zddesm$_0;
    }
  });
  Object.defineProperty(KdTree$KdNode.prototype, 'items', {
    get: function () {
      return this.$outer.items_0;
    }
  });
  KdTree$KdNode.prototype.contains_uargzz$ = function (item) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (this.isLeaf) {
      tmp$ = this.nodeRange;
      tmp$_0 = tmp$.first;
      tmp$_1 = tmp$.last;
      tmp$_2 = tmp$.step;
      for (var i = tmp$_0; i <= tmp$_1; i += tmp$_2) {
        if (equals(this.items.get_za3lpa$(i), item)) {
          return true;
        }
      }
      return false;
    }
     else {
      if (this.children.get_za3lpa$(0).bounds.isIncluding_y2kzbl$(this.$outer.itemAdapter.getMinX_trkh7z$(item), this.$outer.itemAdapter.getMinY_trkh7z$(item), this.$outer.itemAdapter.getMinZ_trkh7z$(item)))
        tmp$_3 = this.children.get_za3lpa$(0).contains_uargzz$(item);
      else if (this.children.get_za3lpa$(1).bounds.isIncluding_y2kzbl$(this.$outer.itemAdapter.getMinX_trkh7z$(item), this.$outer.itemAdapter.getMinY_trkh7z$(item), this.$outer.itemAdapter.getMinZ_trkh7z$(item)))
        tmp$_3 = this.children.get_za3lpa$(1).contains_uargzz$(item);
      else
        tmp$_3 = false;
      return tmp$_3;
    }
  };
  KdTree$KdNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KdNode',
    interfaces: [SpatialTree$Node]
  };
  function KdTree$cmpX$lambda(closure$itemAdapter) {
    return function (a, b) {
      return Kotlin.compareTo(closure$itemAdapter.getMinX_trkh7z$(a), closure$itemAdapter.getMinX_trkh7z$(b));
    };
  }
  function KdTree$cmpY$lambda(closure$itemAdapter) {
    return function (a, b) {
      return Kotlin.compareTo(closure$itemAdapter.getMinY_trkh7z$(a), closure$itemAdapter.getMinY_trkh7z$(b));
    };
  }
  function KdTree$cmpZ$lambda(closure$itemAdapter) {
    return function (a, b) {
      return Kotlin.compareTo(closure$itemAdapter.getMinZ_trkh7z$(a), closure$itemAdapter.getMinZ_trkh7z$(b));
    };
  }
  KdTree.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KdTree',
    interfaces: [SpatialTree]
  };
  function lineMesh(name, block) {
    if (name === void 0)
      name = null;
    var $receiver = new LineMesh(void 0, name);
    block($receiver);
    return $receiver;
  }
  function wireframeMesh(triMesh, lineColor) {
    if (lineColor === void 0)
      lineColor = null;
    var lines = new LineMesh();
    lines.addWireframe_tggg7d$(triMesh, lineColor);
    return lines;
  }
  function normalMesh(meshData, lineColor, len) {
    if (lineColor === void 0)
      lineColor = null;
    if (len === void 0)
      len = 1.0;
    var lines = new LineMesh();
    lines.addNormals_zfckia$(meshData, lineColor, len);
    return lines;
  }
  function LineMesh(data, name) {
    if (data === void 0)
      data = MeshData_init([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().COLORS]);
    if (name === void 0)
      name = null;
    Mesh.call(this, data, name);
    data.primitiveType = 1;
    this.rayTest = MeshRayTest$Companion_getInstance().nopTest();
    this.shader = basicShader(void 0, LineMesh_init$lambda);
    this.isXray = false;
    this.lineWidth = 1.0;
  }
  LineMesh.prototype.addLine_b8opkg$ = function (point0, color0, point1, color1) {
    var idx0 = {v: 0};
    var $this = this.meshData;
    var wasBatchUpdate = $this.isBatchUpdate;
    $this.isBatchUpdate = true;
    idx0.v = $this.addVertex_lv7vxo$(point0, null, color0, null);
    $this.addVertex_lv7vxo$(point1, null, color1, null);
    $this.addIndex_za3lpa$(idx0.v);
    $this.addIndex_za3lpa$(idx0.v + 1 | 0);
    $this.isSyncRequired = true;
    $this.isBatchUpdate = wasBatchUpdate;
    if (false) {
      $this.rebuildBounds();
    }
    return idx0.v;
  };
  LineMesh.prototype.addLineString_k3xgzo$ = function (lineString, color) {
    var tmp$;
    tmp$ = get_lastIndex(lineString);
    for (var i = 0; i < tmp$; i++) {
      this.addLine_b8opkg$(lineString.get_za3lpa$(i), color, lineString.get_za3lpa$(i + 1 | 0), color);
    }
  };
  LineMesh.prototype.addWireframe_tggg7d$ = function (triMesh, lineColor) {
    if (lineColor === void 0)
      lineColor = null;
    if (triMesh.primitiveType !== 4) {
      throw KoolException_init('Supplied mesh is not a triangle mesh: ' + triMesh.primitiveType);
    }
    var addedEdges = LinkedHashSet_init();
    var $this = this.meshData;
    var wasBatchUpdate = $this.isBatchUpdate;
    $this.isBatchUpdate = true;
    var tmp$, tmp$_0;
    var v = triMesh.get_za3lpa$(0);
    var startI = $this.numVertices;
    tmp$ = triMesh.numVertices;
    for (var i = 0; i < tmp$; i++) {
      v.index = i;
      var $this_0 = this.meshData;
      $this_0.isSyncRequired = true;
      var $this_1 = $this_0.vertexList;
      var updateBounds = $this_0.bounds;
      var tmp$_1, tmp$_2, tmp$_3;
      $this_1.checkBufferSizes_za3lpa$();
      tmp$_1 = $this_1.vertexSizeF;
      for (var i_0 = 1; i_0 <= tmp$_1; i_0++) {
        $this_1.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_2 = $this_1.vertexSizeI;
      for (var i_1 = 1; i_1 <= tmp$_2; i_1++) {
        $this_1.dataI.plusAssign_za3lpa$(0);
      }
      $this_1.vertexIt.index = (tmp$_3 = $this_1.size, $this_1.size = tmp$_3 + 1 | 0, tmp$_3);
      var $receiver = $this_1.vertexIt;
      $receiver.position.set_czzhiu$(v.position);
      $receiver.color.set_d7aj7k$(lineColor != null ? lineColor : v.color);
      updateBounds != null ? updateBounds.add_czzhiu$($this_1.vertexIt.position) : null;
    }
    tmp$_0 = triMesh.numIndices;
    for (var i_2 = 0; i_2 < tmp$_0; i_2 += 3) {
      var i1 = startI + triMesh.vertexList.indices.get_za3lpa$(i_2) | 0;
      var i2 = startI + triMesh.vertexList.indices.get_za3lpa$(i_2 + 1 | 0) | 0;
      var i3 = startI + triMesh.vertexList.indices.get_za3lpa$(i_2 + 2 | 0) | 0;
      var e1 = Kotlin.Long.fromInt(Math_0.min(i1, i2)).shiftLeft(32).or(Kotlin.Long.fromInt(Math_0.max(i1, i2)));
      var e2 = Kotlin.Long.fromInt(Math_0.min(i2, i3)).shiftLeft(32).or(Kotlin.Long.fromInt(Math_0.max(i2, i3)));
      var e3 = Kotlin.Long.fromInt(Math_0.min(i3, i1)).shiftLeft(32).or(Kotlin.Long.fromInt(Math_0.max(i3, i1)));
      if (!addedEdges.contains_11rb$(e1)) {
        this.meshData.addIndices_pmhfmb$(new Int32Array([i1, i2]));
        addedEdges.add_11rb$(e1);
      }
      if (!addedEdges.contains_11rb$(e2)) {
        this.meshData.addIndices_pmhfmb$(new Int32Array([i2, i3]));
        addedEdges.add_11rb$(e2);
      }
      if (!addedEdges.contains_11rb$(e3)) {
        this.meshData.addIndices_pmhfmb$(new Int32Array([i3, i1]));
        addedEdges.add_11rb$(e3);
      }
    }
    $this.isSyncRequired = true;
    $this.isBatchUpdate = wasBatchUpdate;
    if (false) {
      $this.rebuildBounds();
    }
  };
  LineMesh.prototype.addNormals_zfckia$ = function (meshData, lineColor, len) {
    if (lineColor === void 0)
      lineColor = null;
    if (len === void 0)
      len = 1.0;
    var wasBatchUpdate = meshData.isBatchUpdate;
    meshData.isBatchUpdate = true;
    var tmpN = MutableVec3f_init();
    var $this = meshData.vertexList;
    var tmp$;
    tmp$ = $this.size;
    for (var i = 0; i < tmp$; i++) {
      $this.vertexIt.index = i;
      var it = $this.vertexIt;
      tmpN.set_czzhiu$(it.normal).scale_mx4ult$(len).add_czzhiu$(it.position);
      var color = lineColor != null ? lineColor : it.color;
      this.addLine_b8opkg$(it.position, color, tmpN, color);
    }
    meshData.isSyncRequired = true;
    meshData.isBatchUpdate = wasBatchUpdate;
    if (false) {
      meshData.rebuildBounds();
    }
  };
  LineMesh.prototype.clear = function () {
    this.meshData.clear();
    this.bounds.clear();
  };
  LineMesh.prototype.addBoundingBox_j1pmtk$ = function (aabb, color) {
    var $this = this.meshData;
    var wasBatchUpdate = $this.isBatchUpdate;
    $this.isBatchUpdate = true;
    $this.isSyncRequired = true;
    var $this_0 = $this.vertexList;
    var updateBounds = $this.bounds;
    var tmp$, tmp$_0, tmp$_1;
    $this_0.checkBufferSizes_za3lpa$();
    tmp$ = $this_0.vertexSizeF;
    for (var i = 1; i <= tmp$; i++) {
      $this_0.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_0 = $this_0.vertexSizeI;
    for (var i_0 = 1; i_0 <= tmp$_0; i_0++) {
      $this_0.dataI.plusAssign_za3lpa$(0);
    }
    $this_0.vertexIt.index = (tmp$_1 = $this_0.size, $this_0.size = tmp$_1 + 1 | 0, tmp$_1);
    var $receiver = $this_0.vertexIt;
    $receiver.position.set_y2kzbl$(aabb.min.x, aabb.min.y, aabb.min.z);
    $receiver.color.set_d7aj7k$(color);
    updateBounds != null ? updateBounds.add_czzhiu$($this_0.vertexIt.position) : null;
    var i0 = $this_0.size - 1 | 0;
    $this.isSyncRequired = true;
    var $this_1 = $this.vertexList;
    var updateBounds_0 = $this.bounds;
    var tmp$_2, tmp$_3, tmp$_4;
    $this_1.checkBufferSizes_za3lpa$();
    tmp$_2 = $this_1.vertexSizeF;
    for (var i_1 = 1; i_1 <= tmp$_2; i_1++) {
      $this_1.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_3 = $this_1.vertexSizeI;
    for (var i_2 = 1; i_2 <= tmp$_3; i_2++) {
      $this_1.dataI.plusAssign_za3lpa$(0);
    }
    $this_1.vertexIt.index = (tmp$_4 = $this_1.size, $this_1.size = tmp$_4 + 1 | 0, tmp$_4);
    var $receiver_0 = $this_1.vertexIt;
    $receiver_0.position.set_y2kzbl$(aabb.min.x, aabb.min.y, aabb.max.z);
    $receiver_0.color.set_d7aj7k$(color);
    updateBounds_0 != null ? updateBounds_0.add_czzhiu$($this_1.vertexIt.position) : null;
    var i1 = $this_1.size - 1 | 0;
    $this.isSyncRequired = true;
    var $this_2 = $this.vertexList;
    var updateBounds_1 = $this.bounds;
    var tmp$_5, tmp$_6, tmp$_7;
    $this_2.checkBufferSizes_za3lpa$();
    tmp$_5 = $this_2.vertexSizeF;
    for (var i_3 = 1; i_3 <= tmp$_5; i_3++) {
      $this_2.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_6 = $this_2.vertexSizeI;
    for (var i_4 = 1; i_4 <= tmp$_6; i_4++) {
      $this_2.dataI.plusAssign_za3lpa$(0);
    }
    $this_2.vertexIt.index = (tmp$_7 = $this_2.size, $this_2.size = tmp$_7 + 1 | 0, tmp$_7);
    var $receiver_1 = $this_2.vertexIt;
    $receiver_1.position.set_y2kzbl$(aabb.min.x, aabb.max.y, aabb.max.z);
    $receiver_1.color.set_d7aj7k$(color);
    updateBounds_1 != null ? updateBounds_1.add_czzhiu$($this_2.vertexIt.position) : null;
    var i2 = $this_2.size - 1 | 0;
    $this.isSyncRequired = true;
    var $this_3 = $this.vertexList;
    var updateBounds_2 = $this.bounds;
    var tmp$_8, tmp$_9, tmp$_10;
    $this_3.checkBufferSizes_za3lpa$();
    tmp$_8 = $this_3.vertexSizeF;
    for (var i_5 = 1; i_5 <= tmp$_8; i_5++) {
      $this_3.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_9 = $this_3.vertexSizeI;
    for (var i_6 = 1; i_6 <= tmp$_9; i_6++) {
      $this_3.dataI.plusAssign_za3lpa$(0);
    }
    $this_3.vertexIt.index = (tmp$_10 = $this_3.size, $this_3.size = tmp$_10 + 1 | 0, tmp$_10);
    var $receiver_2 = $this_3.vertexIt;
    $receiver_2.position.set_y2kzbl$(aabb.min.x, aabb.max.y, aabb.min.z);
    $receiver_2.color.set_d7aj7k$(color);
    updateBounds_2 != null ? updateBounds_2.add_czzhiu$($this_3.vertexIt.position) : null;
    var i3 = $this_3.size - 1 | 0;
    $this.isSyncRequired = true;
    var $this_4 = $this.vertexList;
    var updateBounds_3 = $this.bounds;
    var tmp$_11, tmp$_12, tmp$_13;
    $this_4.checkBufferSizes_za3lpa$();
    tmp$_11 = $this_4.vertexSizeF;
    for (var i_7 = 1; i_7 <= tmp$_11; i_7++) {
      $this_4.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_12 = $this_4.vertexSizeI;
    for (var i_8 = 1; i_8 <= tmp$_12; i_8++) {
      $this_4.dataI.plusAssign_za3lpa$(0);
    }
    $this_4.vertexIt.index = (tmp$_13 = $this_4.size, $this_4.size = tmp$_13 + 1 | 0, tmp$_13);
    var $receiver_3 = $this_4.vertexIt;
    $receiver_3.position.set_y2kzbl$(aabb.max.x, aabb.min.y, aabb.min.z);
    $receiver_3.color.set_d7aj7k$(color);
    updateBounds_3 != null ? updateBounds_3.add_czzhiu$($this_4.vertexIt.position) : null;
    var i4 = $this_4.size - 1 | 0;
    $this.isSyncRequired = true;
    var $this_5 = $this.vertexList;
    var updateBounds_4 = $this.bounds;
    var tmp$_14, tmp$_15, tmp$_16;
    $this_5.checkBufferSizes_za3lpa$();
    tmp$_14 = $this_5.vertexSizeF;
    for (var i_9 = 1; i_9 <= tmp$_14; i_9++) {
      $this_5.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_15 = $this_5.vertexSizeI;
    for (var i_10 = 1; i_10 <= tmp$_15; i_10++) {
      $this_5.dataI.plusAssign_za3lpa$(0);
    }
    $this_5.vertexIt.index = (tmp$_16 = $this_5.size, $this_5.size = tmp$_16 + 1 | 0, tmp$_16);
    var $receiver_4 = $this_5.vertexIt;
    $receiver_4.position.set_y2kzbl$(aabb.max.x, aabb.min.y, aabb.max.z);
    $receiver_4.color.set_d7aj7k$(color);
    updateBounds_4 != null ? updateBounds_4.add_czzhiu$($this_5.vertexIt.position) : null;
    var i5 = $this_5.size - 1 | 0;
    $this.isSyncRequired = true;
    var $this_6 = $this.vertexList;
    var updateBounds_5 = $this.bounds;
    var tmp$_17, tmp$_18, tmp$_19;
    $this_6.checkBufferSizes_za3lpa$();
    tmp$_17 = $this_6.vertexSizeF;
    for (var i_11 = 1; i_11 <= tmp$_17; i_11++) {
      $this_6.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_18 = $this_6.vertexSizeI;
    for (var i_12 = 1; i_12 <= tmp$_18; i_12++) {
      $this_6.dataI.plusAssign_za3lpa$(0);
    }
    $this_6.vertexIt.index = (tmp$_19 = $this_6.size, $this_6.size = tmp$_19 + 1 | 0, tmp$_19);
    var $receiver_5 = $this_6.vertexIt;
    $receiver_5.position.set_y2kzbl$(aabb.max.x, aabb.max.y, aabb.max.z);
    $receiver_5.color.set_d7aj7k$(color);
    updateBounds_5 != null ? updateBounds_5.add_czzhiu$($this_6.vertexIt.position) : null;
    var i6 = $this_6.size - 1 | 0;
    $this.isSyncRequired = true;
    var $this_7 = $this.vertexList;
    var updateBounds_6 = $this.bounds;
    var tmp$_20, tmp$_21, tmp$_22;
    $this_7.checkBufferSizes_za3lpa$();
    tmp$_20 = $this_7.vertexSizeF;
    for (var i_13 = 1; i_13 <= tmp$_20; i_13++) {
      $this_7.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_21 = $this_7.vertexSizeI;
    for (var i_14 = 1; i_14 <= tmp$_21; i_14++) {
      $this_7.dataI.plusAssign_za3lpa$(0);
    }
    $this_7.vertexIt.index = (tmp$_22 = $this_7.size, $this_7.size = tmp$_22 + 1 | 0, tmp$_22);
    var $receiver_6 = $this_7.vertexIt;
    $receiver_6.position.set_y2kzbl$(aabb.max.x, aabb.max.y, aabb.min.z);
    $receiver_6.color.set_d7aj7k$(color);
    updateBounds_6 != null ? updateBounds_6.add_czzhiu$($this_7.vertexIt.position) : null;
    var i7 = $this_7.size - 1 | 0;
    $this.addIndices_pmhfmb$(new Int32Array([i0, i1, i1, i2, i2, i3, i3, i0, i4, i5, i5, i6, i6, i7, i7, i4, i0, i4, i1, i5, i2, i6, i3, i7]));
    $this.isSyncRequired = true;
    $this.isBatchUpdate = wasBatchUpdate;
    if (false) {
      $this.rebuildBounds();
    }
  };
  LineMesh.prototype.render_aemszp$ = function (ctx) {
    ctx.pushAttributes();
    ctx.lineWidth = this.lineWidth;
    if (this.isXray) {
      ctx.depthFunc = 519;
    }
    ctx.applyAttributes();
    Mesh.prototype.render_aemszp$.call(this, ctx);
    ctx.popAttributes();
  };
  function LineMesh_init$lambda($receiver) {
    $receiver.colorModel = ColorModel$VERTEX_COLOR_getInstance();
    $receiver.lightModel = LightModel$NO_LIGHTING_getInstance();
    return Unit;
  }
  LineMesh.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LineMesh',
    interfaces: [Mesh]
  };
  function LineString(points) {
    if (points === void 0) {
      points = ArrayList_init_0();
    }
    this.points_0 = points;
  }
  LineString.prototype.isSingular = function () {
    return this.size <= 1;
  };
  LineString.prototype.length = function () {
    var tmp$;
    var len = 0.0;
    tmp$ = get_lastIndex(this);
    for (var i = 0; i < tmp$; i++) {
      len += this.get_za3lpa$(i).distance_czzhiu$(this.get_za3lpa$(i + 1 | 0));
    }
    return len;
  };
  LineString.prototype.getLengthToIndex_za3lpa$ = function (index) {
    var len = 0.0;
    for (var i = 0; i < index; i++) {
      len += this.get_za3lpa$(i).distance_czzhiu$(this.get_za3lpa$(i + 1 | 0));
    }
    return len;
  };
  LineString.prototype.getLowerIndex_mx4ult$ = function (forDistance) {
    var tmp$;
    var d = forDistance;
    tmp$ = get_lastIndex(this);
    for (var i = 0; i < tmp$; i++) {
      d -= this.get_za3lpa$(i).distance_czzhiu$(this.get_za3lpa$(i + 1 | 0));
      if (d < 0) {
        return i;
      }
    }
    return get_lastIndex(this) - 1 | 0;
  };
  LineString.prototype.getNearestElement_mx4ult$ = function (forDistance) {
    var tmp$;
    var d = forDistance;
    tmp$ = get_lastIndex(this);
    for (var i = 0; i < tmp$; i++) {
      var l = this.get_za3lpa$(i).distance_czzhiu$(this.get_za3lpa$(i + 1 | 0));
      if (l > d) {
        return l > d * 2 ? this.get_za3lpa$(i) : this.get_za3lpa$(i + 1 | 0);
      }
      d -= l;
    }
    return last(this);
  };
  LineString.prototype.getNearestPoint_749b8l$ = function (forDistance, result) {
    var tmp$;
    if (forDistance < 0.0) {
      return result.set_czzhiu$(first(this));
    }
    var d = forDistance;
    tmp$ = get_lastIndex(this);
    for (var i = 0; i < tmp$; i++) {
      var l = this.get_za3lpa$(i).distance_czzhiu$(this.get_za3lpa$(i + 1 | 0));
      if (l > d) {
        return result.set_czzhiu$(this.get_za3lpa$(i + 1 | 0)).subtract_czzhiu$(this.get_za3lpa$(i)).scale_mx4ult$(d / l).add_czzhiu$(this.get_za3lpa$(i));
      }
      d -= l;
    }
    return result.set_czzhiu$(last(this));
  };
  LineString.prototype.getLowerIndex_swi9mk$ = function (forPoint, startIndex) {
    if (startIndex === void 0)
      startIndex = 0;
    var tmp$;
    var minDist = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    var bestI = startIndex;
    tmp$ = get_lastIndex(this);
    for (var i = 0; i < tmp$; i++) {
      var d = distanceToEdge_0(forPoint, this.get_za3lpa$(i), this.get_za3lpa$(i + 1 | 0));
      if (d < minDist) {
        minDist = d;
        bestI = i;
      }
    }
    return bestI;
  };
  LineString.prototype.getNearestElement_swi9mk$ = function (forPoint, startIndex) {
    if (startIndex === void 0)
      startIndex = 0;
    var i = this.getLowerIndex_swi9mk$(forPoint, startIndex);
    return this.get_za3lpa$(i).distance_czzhiu$(forPoint) < this.get_za3lpa$(i + 1 | 0).distance_czzhiu$(forPoint) ? this.get_za3lpa$(i) : this.get_za3lpa$(i + 1 | 0);
  };
  LineString.prototype.getNearestPoint_mxoo4y$ = function (forPoint, result, startIndex) {
    if (startIndex === void 0)
      startIndex = 0;
    var lowerI = this.getLowerIndex_swi9mk$(forPoint, startIndex);
    return nearestPointOnEdge_0(forPoint, this.get_za3lpa$(lowerI), this.get_za3lpa$(lowerI + 1 | 0), result);
  };
  Object.defineProperty(LineString.prototype, 'size', {
    get: function () {
      return this.points_0.size;
    }
  });
  LineString.prototype.add_11rb$ = function (element) {
    return this.points_0.add_11rb$(element);
  };
  LineString.prototype.add_wxm5ur$ = function (index, element) {
    return this.points_0.add_wxm5ur$(index, element);
  };
  LineString.prototype.addAll_u57x28$ = function (index, elements) {
    return this.points_0.addAll_u57x28$(index, elements);
  };
  LineString.prototype.addAll_brywnq$ = function (elements) {
    return this.points_0.addAll_brywnq$(elements);
  };
  LineString.prototype.clear = function () {
    return this.points_0.clear();
  };
  LineString.prototype.contains_11rb$ = function (element) {
    return this.points_0.contains_11rb$(element);
  };
  LineString.prototype.containsAll_brywnq$ = function (elements) {
    return this.points_0.containsAll_brywnq$(elements);
  };
  LineString.prototype.get_za3lpa$ = function (index) {
    return this.points_0.get_za3lpa$(index);
  };
  LineString.prototype.indexOf_11rb$ = function (element) {
    return this.points_0.indexOf_11rb$(element);
  };
  LineString.prototype.isEmpty = function () {
    return this.points_0.isEmpty();
  };
  LineString.prototype.iterator = function () {
    return this.points_0.iterator();
  };
  LineString.prototype.lastIndexOf_11rb$ = function (element) {
    return this.points_0.lastIndexOf_11rb$(element);
  };
  LineString.prototype.listIterator = function () {
    return this.points_0.listIterator();
  };
  LineString.prototype.listIterator_za3lpa$ = function (index) {
    return this.points_0.listIterator_za3lpa$(index);
  };
  LineString.prototype.remove_11rb$ = function (element) {
    return this.points_0.remove_11rb$(element);
  };
  LineString.prototype.removeAll_brywnq$ = function (elements) {
    return this.points_0.removeAll_brywnq$(elements);
  };
  LineString.prototype.removeAt_za3lpa$ = function (index) {
    return this.points_0.removeAt_za3lpa$(index);
  };
  LineString.prototype.retainAll_brywnq$ = function (elements) {
    return this.points_0.retainAll_brywnq$(elements);
  };
  LineString.prototype.set_wxm5ur$ = function (index, element) {
    return this.points_0.set_wxm5ur$(index, element);
  };
  LineString.prototype.subList_vux9f0$ = function (fromIndex, toIndex) {
    return this.points_0.subList_vux9f0$(fromIndex, toIndex);
  };
  LineString.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LineString',
    interfaces: [MutableList]
  };
  function Log() {
    Log_instance = this;
    this.DEFAULT_PRINTER = Log$DEFAULT_PRINTER$lambda;
    this.level = Log$Level$DEBUG_getInstance();
    this.printer = this.DEFAULT_PRINTER;
  }
  Log.prototype.tExt_jzryxz$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.tExt_jzryxz$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (src, message) {
      var level = Log$Level.TRACE;
      var tag = Kotlin.getKClassFromExpression(src).simpleName;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }
    };
  }));
  Log.prototype.t_fkbaij$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.t_fkbaij$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (tag, message) {
      var level = Log$Level.TRACE;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }
    };
  }));
  Log.prototype.dExt_jzryxz$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.dExt_jzryxz$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (src, message) {
      var level = Log$Level.DEBUG;
      var tag = Kotlin.getKClassFromExpression(src).simpleName;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }
    };
  }));
  Log.prototype.d_fkbaij$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.d_fkbaij$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (tag, message) {
      var level = Log$Level.DEBUG;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }
    };
  }));
  Log.prototype.iExt_jzryxz$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.iExt_jzryxz$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (src, message) {
      var level = Log$Level.INFO;
      var tag = Kotlin.getKClassFromExpression(src).simpleName;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }
    };
  }));
  Log.prototype.i_fkbaij$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.i_fkbaij$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (tag, message) {
      var level = Log$Level.INFO;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }
    };
  }));
  Log.prototype.wExt_jzryxz$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.wExt_jzryxz$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (src, message) {
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(src).simpleName;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }
    };
  }));
  Log.prototype.w_fkbaij$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.w_fkbaij$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (tag, message) {
      var level = Log$Level.WARN;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }
    };
  }));
  Log.prototype.eExt_jzryxz$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.eExt_jzryxz$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (src, message) {
      var level = Log$Level.ERROR;
      var tag = Kotlin.getKClassFromExpression(src).simpleName;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }
    };
  }));
  Log.prototype.e_fkbaij$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.e_fkbaij$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (tag, message) {
      var level = Log$Level.ERROR;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }
    };
  }));
  Log.prototype.logExt_askb8u$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.logExt_askb8u$', function (level, src, message) {
    var tag = Kotlin.getKClassFromExpression(src).simpleName;
    if (level.level >= this.level.level) {
      this.printer(level, tag, message());
    }
  });
  Log.prototype.log_f0yxhs$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.log_f0yxhs$', function (level, tag, message) {
    if (level.level >= this.level.level) {
      this.printer(level, tag, message());
    }
  });
  function Log$Level(name, ordinal, level, indicator) {
    Enum.call(this);
    this.level = level;
    this.indicator = toBoxedChar(indicator);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Log$Level_initFields() {
    Log$Level_initFields = function () {
    };
    Log$Level$TRACE_instance = new Log$Level('TRACE', 0, 0, 84);
    Log$Level$DEBUG_instance = new Log$Level('DEBUG', 1, 1, 68);
    Log$Level$INFO_instance = new Log$Level('INFO', 2, 2, 73);
    Log$Level$WARN_instance = new Log$Level('WARN', 3, 3, 87);
    Log$Level$ERROR_instance = new Log$Level('ERROR', 4, 4, 69);
    Log$Level$OFF_instance = new Log$Level('OFF', 5, 5, 120);
  }
  var Log$Level$TRACE_instance;
  function Log$Level$TRACE_getInstance() {
    Log$Level_initFields();
    return Log$Level$TRACE_instance;
  }
  var Log$Level$DEBUG_instance;
  function Log$Level$DEBUG_getInstance() {
    Log$Level_initFields();
    return Log$Level$DEBUG_instance;
  }
  var Log$Level$INFO_instance;
  function Log$Level$INFO_getInstance() {
    Log$Level_initFields();
    return Log$Level$INFO_instance;
  }
  var Log$Level$WARN_instance;
  function Log$Level$WARN_getInstance() {
    Log$Level_initFields();
    return Log$Level$WARN_instance;
  }
  var Log$Level$ERROR_instance;
  function Log$Level$ERROR_getInstance() {
    Log$Level_initFields();
    return Log$Level$ERROR_instance;
  }
  var Log$Level$OFF_instance;
  function Log$Level$OFF_getInstance() {
    Log$Level_initFields();
    return Log$Level$OFF_instance;
  }
  Log$Level.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Level',
    interfaces: [Enum]
  };
  function Log$Level$values() {
    return [Log$Level$TRACE_getInstance(), Log$Level$DEBUG_getInstance(), Log$Level$INFO_getInstance(), Log$Level$WARN_getInstance(), Log$Level$ERROR_getInstance(), Log$Level$OFF_getInstance()];
  }
  Log$Level.values = Log$Level$values;
  function Log$Level$valueOf(name) {
    switch (name) {
      case 'TRACE':
        return Log$Level$TRACE_getInstance();
      case 'DEBUG':
        return Log$Level$DEBUG_getInstance();
      case 'INFO':
        return Log$Level$INFO_getInstance();
      case 'WARN':
        return Log$Level$WARN_getInstance();
      case 'ERROR':
        return Log$Level$ERROR_getInstance();
      case 'OFF':
        return Log$Level$OFF_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.util.Log.Level.' + name);
    }
  }
  Log$Level.valueOf_61zpoe$ = Log$Level$valueOf;
  function Log$DEFAULT_PRINTER$lambda(lvl, tag, message) {
    println_0(String.fromCharCode(unboxChar(lvl.indicator)) + '/' + toString(tag) + ': ' + message);
    return Unit;
  }
  Log.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Log',
    interfaces: []
  };
  var Log_instance = null;
  function Log_getInstance() {
    if (Log_instance === null) {
      new Log();
    }
    return Log_instance;
  }
  var logT = defineInlineFunction('kool.de.fabmax.kool.util.logT_hbfas6$', wrapFunction(function () {
    var util = _.de.fabmax.kool.util;
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function ($receiver, message) {
      var $this = util.Log;
      var level = Log$Level.TRACE;
      var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message());
      }
    };
  }));
  var logD = defineInlineFunction('kool.de.fabmax.kool.util.logD_hbfas6$', wrapFunction(function () {
    var util = _.de.fabmax.kool.util;
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function ($receiver, message) {
      var $this = util.Log;
      var level = Log$Level.DEBUG;
      var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message());
      }
    };
  }));
  var logI = defineInlineFunction('kool.de.fabmax.kool.util.logI_hbfas6$', wrapFunction(function () {
    var util = _.de.fabmax.kool.util;
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function ($receiver, message) {
      var $this = util.Log;
      var level = Log$Level.INFO;
      var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message());
      }
    };
  }));
  var logW = defineInlineFunction('kool.de.fabmax.kool.util.logW_hbfas6$', wrapFunction(function () {
    var util = _.de.fabmax.kool.util;
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function ($receiver, message) {
      var $this = util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message());
      }
    };
  }));
  var logE = defineInlineFunction('kool.de.fabmax.kool.util.logE_hbfas6$', wrapFunction(function () {
    var util = _.de.fabmax.kool.util;
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function ($receiver, message) {
      var $this = util.Log;
      var level = Log$Level.ERROR;
      var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message());
      }
    };
  }));
  function MeshBuilder(meshData) {
    this.meshData = meshData;
    this.transform = new Mat4fStack();
    this.color = Color$Companion_getInstance().BLACK;
    this.vertexModFun = null;
    this.hasNormals_c51zdn$_0 = this.meshData.hasAttribute_mczodr$(Attribute$Companion_getInstance().NORMALS);
    this.tmpPos_5ud41y$_0 = MutableVec3f_init();
    this.tmpNrm_5ueby3$_0 = MutableVec3f_init();
    this.tmpUv_b9nk9x$_0 = MutableVec2f_init();
    this.circleProps = new CircleProps();
    this.cubeProps = new CubeProps();
    this.cylinderProps = new CylinderProps();
    this.gridProps = new GridProps();
    this.rectProps = new RectProps();
    this.sphereProps = new SphereProps();
    this.textProps = null;
  }
  MeshBuilder.prototype.vertex_n440gp$$default = function (pos, nrm, uv) {
    var $this = this.meshData;
    $this.isSyncRequired = true;
    var $this_0 = $this.vertexList;
    var updateBounds = $this.bounds;
    var tmp$, tmp$_0, tmp$_1;
    $this_0.checkBufferSizes_za3lpa$();
    tmp$ = $this_0.vertexSizeF;
    for (var i = 1; i <= tmp$; i++) {
      $this_0.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_0 = $this_0.vertexSizeI;
    for (var i_0 = 1; i_0 <= tmp$_0; i_0++) {
      $this_0.dataI.plusAssign_za3lpa$(0);
    }
    $this_0.vertexIt.index = (tmp$_1 = $this_0.size, $this_0.size = tmp$_1 + 1 | 0, tmp$_1);
    var $receiver = $this_0.vertexIt;
    var tmp$_2;
    $receiver.position.set_czzhiu$(pos);
    $receiver.normal.set_czzhiu$(nrm);
    $receiver.texCoord.set_czzhjp$(uv);
    $receiver.color.set_d7aj7k$(this.color);
    this.transform.transform_w1lst9$($receiver.position);
    if (this.hasNormals_c51zdn$_0 && $receiver.normal.sqrLength() !== 0.0) {
      this.transform.transform_w1lst9$($receiver.normal, 0.0);
      $receiver.normal.norm();
    }
    (tmp$_2 = this.vertexModFun) != null ? tmp$_2($receiver) : null;
    updateBounds != null ? updateBounds.add_czzhiu$($this_0.vertexIt.position) : null;
    return $this_0.size - 1 | 0;
  };
  MeshBuilder.prototype.vertex_n440gp$ = function (pos, nrm, uv, callback$default) {
    if (uv === void 0)
      uv = Vec2f$Companion_getInstance().ZERO;
    return callback$default ? callback$default(pos, nrm, uv) : this.vertex_n440gp$$default(pos, nrm, uv);
  };
  MeshBuilder.prototype.withTransform_v2sixm$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.withTransform_v2sixm$', function (block) {
    this.transform.push();
    block(this);
    this.transform.pop();
  });
  MeshBuilder.prototype.withColor_2f8443$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.withColor_2f8443$', function (color, block) {
    var c = this.color;
    if (color != null) {
      this.color = color;
    }
    block(this);
    this.color = c;
  });
  MeshBuilder.prototype.clear = function () {
    this.meshData.clear();
    this.identity();
  };
  MeshBuilder.prototype.identity = function () {
    return this.transform.setIdentity();
  };
  MeshBuilder.prototype.translate_czzhiu$ = function (t) {
    return this.transform.translate_y2kzbl$(t.x, t.y, t.z);
  };
  MeshBuilder.prototype.translate_y2kzbl$ = function (x, y, z) {
    return this.transform.translate_y2kzbl$(x, y, z);
  };
  MeshBuilder.prototype.rotate_ad55pp$ = function (angleDeg, axis) {
    return this.transform.rotate_ad55pp$(angleDeg, axis);
  };
  MeshBuilder.prototype.rotate_7b5o5w$ = function (angleDeg, axX, axY, axZ) {
    return this.transform.rotate_7b5o5w$(angleDeg, axX, axY, axZ);
  };
  MeshBuilder.prototype.scale_y2kzbl$ = function (x, y, z) {
    return this.transform.scale_y2kzbl$(x, y, z);
  };
  MeshBuilder.prototype.setCoordSystem_xq1mqt$ = function (origin, right, up, top) {
    if (top === void 0)
      top = null;
    var topV = top;
    if (topV == null) {
      topV = cross(right, up);
    }
    this.transform.setIdentity();
    this.transform.set_n0b4r3$(0, 0, right.x);
    this.transform.set_n0b4r3$(1, 0, right.y);
    this.transform.set_n0b4r3$(2, 0, right.z);
    this.transform.set_n0b4r3$(0, 1, up.x);
    this.transform.set_n0b4r3$(1, 1, up.y);
    this.transform.set_n0b4r3$(2, 1, up.z);
    this.transform.set_n0b4r3$(0, 2, topV.x);
    this.transform.set_n0b4r3$(1, 2, topV.y);
    this.transform.set_n0b4r3$(2, 2, topV.z);
    this.transform.set_n0b4r3$(0, 3, origin.x);
    this.transform.set_n0b4r3$(1, 3, origin.y);
    this.transform.set_n0b4r3$(2, 3, origin.z);
  };
  MeshBuilder.prototype.circle_5yji8k$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.circle_5yji8k$', function (props) {
    props(this.circleProps.defaults());
    this.circle_59f34t$(this.circleProps);
  });
  MeshBuilder.prototype.circle_59f34t$ = function (props) {
    var tmp$;
    var i1 = 0;
    var iCenter = this.vertex_n440gp$(props.center, Vec3f$Companion_getInstance().Z_AXIS, props.uvCenter);
    tmp$ = props.steps;
    for (var i = 0; i <= tmp$; i++) {
      var ang = (props.startDeg + props.sweepDeg * i / props.steps) * package$math.DEG_2_RAD;
      var cos = Math_0.cos(ang);
      var sin = Math_0.sin(ang);
      var px = props.center.x + props.radius * cos;
      var py = props.center.y + props.radius * sin;
      this.tmpUv_b9nk9x$_0.set_dleff0$(cos, -sin).scale_mx4ult$(props.uvRadius).add_czzhjp$(props.uvCenter);
      var idx = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(px, py, props.center.z), Vec3f$Companion_getInstance().Z_AXIS, this.tmpUv_b9nk9x$_0);
      if (i > 0) {
        this.meshData.addTriIndices_qt1dr2$(iCenter, i1, idx);
      }
      i1 = idx;
    }
  };
  MeshBuilder.prototype.sphere_ybunu9$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.sphere_ybunu9$', function (props) {
    props(this.sphereProps.defaults());
    this.sphere_mojs8w$(this.sphereProps);
  });
  MeshBuilder.prototype.sphere_mojs8w$ = function (props) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var a = props.steps / 2 | 0;
    var steps = Math_0.max(a, 4);
    var prevIndices = new Int32Array((steps * 2 | 0) + 1 | 0);
    var rowIndices = new Int32Array((steps * 2 | 0) + 1 | 0);
    var theta = math.PI * (steps - 1 | 0) / steps;
    var x = theta;
    var r = Math_0.sin(x) * props.radius;
    var x_0 = theta;
    var y = Math_0.cos(x_0) * props.radius;
    tmp$ = steps * 2 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var phi = math.PI * i / steps;
      var x_1 = -phi;
      var x_2 = Math_0.cos(x_1) * r;
      var x_3 = -phi;
      var z = Math_0.sin(x_3) * r;
      var uv = props.texCoordGenerator(theta, phi);
      rowIndices[i] = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(x_2, y, z).add_czzhiu$(props.center), this.tmpNrm_5ueby3$_0.set_y2kzbl$(x_2, y, z).scale_mx4ult$(1.0 / props.radius), uv);
      if (i > 0) {
        uv = props.texCoordGenerator(math.PI, phi);
        this.tmpPos_5ud41y$_0.set_y2kzbl$(props.center.x, props.center.y - props.radius, props.center.z);
        var iCenter = this.vertex_n440gp$(this.tmpPos_5ud41y$_0, Vec3f$Companion_getInstance().NEG_Y_AXIS, uv);
        this.meshData.addTriIndices_qt1dr2$(iCenter, rowIndices[i], rowIndices[i - 1 | 0]);
      }
    }
    tmp$_0 = steps - 1 | 0;
    for (var row = 2; row <= tmp$_0; row++) {
      var tmp = prevIndices;
      prevIndices = rowIndices;
      rowIndices = tmp;
      theta = math.PI * (steps - row | 0) / steps;
      var x_4 = theta;
      r = Math_0.sin(x_4) * props.radius;
      var x_5 = theta;
      y = Math_0.cos(x_5) * props.radius;
      tmp$_1 = steps * 2 | 0;
      for (var i_0 = 0; i_0 <= tmp$_1; i_0++) {
        var phi_0 = math.PI * i_0 / steps;
        var x_6 = -phi_0;
        var x_7 = Math_0.cos(x_6) * r;
        var x_8 = -phi_0;
        var z_0 = Math_0.sin(x_8) * r;
        var uv_0 = props.texCoordGenerator(theta, phi_0);
        rowIndices[i_0] = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(x_7, y, z_0).add_czzhiu$(props.center), this.tmpNrm_5ueby3$_0.set_y2kzbl$(x_7, y, z_0).scale_mx4ult$(1.0 / props.radius), uv_0);
        if (i_0 > 0) {
          this.meshData.addTriIndices_qt1dr2$(prevIndices[i_0 - 1 | 0], rowIndices[i_0], rowIndices[i_0 - 1 | 0]);
          this.meshData.addTriIndices_qt1dr2$(prevIndices[i_0 - 1 | 0], prevIndices[i_0], rowIndices[i_0]);
        }
      }
    }
    tmp$_2 = steps * 2 | 0;
    for (var i_1 = 1; i_1 <= tmp$_2; i_1++) {
      var uv_1 = props.texCoordGenerator(0.0, math.PI * i_1 / steps);
      var iCenter_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.center.x, props.center.y + props.radius, props.center.z), Vec3f$Companion_getInstance().Y_AXIS, uv_1);
      this.meshData.addTriIndices_qt1dr2$(iCenter_0, rowIndices[i_1 - 1 | 0], rowIndices[i_1]);
    }
  };
  MeshBuilder.prototype.rect_6h1xlk$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.rect_6h1xlk$', function (props) {
    props(this.rectProps.defaults());
    this.rect_e5k3t5$(this.rectProps);
  });
  MeshBuilder.prototype.rect_e5k3t5$ = function (props) {
    props.fixNegativeSize();
    if (props.cornerRadius === 0.0) {
      var i0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y, props.origin.z), Vec3f$Companion_getInstance().Z_AXIS, props.texCoordLowerLeft);
      var i1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y, props.origin.z), Vec3f$Companion_getInstance().Z_AXIS, props.texCoordLowerRight);
      var i2 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y + props.size.y, props.origin.z), Vec3f$Companion_getInstance().Z_AXIS, props.texCoordUpperRight);
      var i3 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y + props.size.y, props.origin.z), Vec3f$Companion_getInstance().Z_AXIS, props.texCoordUpperLeft);
      this.meshData.addTriIndices_qt1dr2$(i0, i1, i2);
      this.meshData.addTriIndices_qt1dr2$(i0, i2, i3);
    }
     else {
      var x = props.origin.x;
      var y = props.origin.y;
      var z = props.origin.z;
      var w = props.size.x;
      var h = props.size.y;
      var xI = x + props.cornerRadius;
      var yI = y + props.cornerRadius;
      var wI = w - props.cornerRadius * 2;
      var hI = h - props.cornerRadius * 2;
      var nrm = Vec3f$Companion_getInstance().Z_AXIS;
      var uI = (props.texCoordUpperRight.x - props.texCoordUpperLeft.x) * props.cornerRadius / w;
      var vI = (props.texCoordUpperRight.y - props.texCoordLowerRight.y) * props.cornerRadius / h;
      if (hI > 0) {
        var i0_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(x, yI, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(0.0, vI).add_czzhjp$(props.texCoordLowerLeft));
        var i1_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(x + w, yI, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(0.0, vI).add_czzhjp$(props.texCoordLowerRight));
        var i2_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(x + w, yI + hI, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(0.0, -vI).add_czzhjp$(props.texCoordUpperRight));
        var i3_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(x, yI + hI, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(0.0, -vI).add_czzhjp$(props.texCoordUpperLeft));
        this.meshData.addTriIndices_qt1dr2$(i0_0, i1_0, i2_0);
        this.meshData.addTriIndices_qt1dr2$(i0_0, i2_0, i3_0);
      }
      if (wI > 0) {
        var i0_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(xI, y, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(uI, 0.0).add_czzhjp$(props.texCoordLowerLeft));
        var i1_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(xI + wI, y, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(-uI, 0.0).add_czzhjp$(props.texCoordLowerRight));
        var i2_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(xI + wI, yI, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(-uI, vI).add_czzhjp$(props.texCoordLowerRight));
        var i3_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(xI, yI, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(uI, vI).add_czzhjp$(props.texCoordLowerLeft));
        this.meshData.addTriIndices_qt1dr2$(i0_1, i1_1, i2_1);
        this.meshData.addTriIndices_qt1dr2$(i0_1, i2_1, i3_1);
        i0_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(xI, yI + hI, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(uI, -vI).add_czzhjp$(props.texCoordUpperLeft));
        i1_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(xI + wI, yI + hI, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(-uI, -vI).add_czzhjp$(props.texCoordUpperRight));
        i2_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(xI + wI, y + h, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(-uI, 0.0).add_czzhjp$(props.texCoordUpperRight));
        i3_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(xI, y + h, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(uI, 0.0).add_czzhjp$(props.texCoordUpperLeft));
        this.meshData.addTriIndices_qt1dr2$(i0_1, i1_1, i2_1);
        this.meshData.addTriIndices_qt1dr2$(i0_1, i2_1, i3_1);
      }
      var $receiver = this.circleProps.defaults();
      $receiver.center.set_y2kzbl$(xI + wI, yI + hI, z);
      $receiver.startDeg = 0.0;
      $receiver.sweepDeg = 90.0;
      $receiver.radius = props.cornerRadius;
      $receiver.steps = props.cornerSteps;
      $receiver.uvCenter.set_dleff0$(-uI, -vI).add_czzhjp$(props.texCoordUpperRight);
      $receiver.uvRadius = uI;
      this.circle_59f34t$(this.circleProps);
      var $receiver_0 = this.circleProps.defaults();
      $receiver_0.center.set_y2kzbl$(xI, yI + hI, z);
      $receiver_0.startDeg = 90.0;
      $receiver_0.sweepDeg = 90.0;
      $receiver_0.radius = props.cornerRadius;
      $receiver_0.steps = props.cornerSteps;
      $receiver_0.uvCenter.set_dleff0$(uI, -vI).add_czzhjp$(props.texCoordUpperLeft);
      $receiver_0.uvRadius = uI;
      this.circle_59f34t$(this.circleProps);
      var $receiver_1 = this.circleProps.defaults();
      $receiver_1.center.set_y2kzbl$(xI, yI, z);
      $receiver_1.startDeg = 180.0;
      $receiver_1.sweepDeg = 90.0;
      $receiver_1.radius = props.cornerRadius;
      $receiver_1.steps = props.cornerSteps;
      $receiver_1.uvCenter.set_dleff0$(uI, vI).add_czzhjp$(props.texCoordLowerLeft);
      $receiver_1.uvRadius = uI;
      this.circle_59f34t$(this.circleProps);
      var $receiver_2 = this.circleProps.defaults();
      $receiver_2.center.set_y2kzbl$(xI + wI, yI, z);
      $receiver_2.startDeg = 270.0;
      $receiver_2.sweepDeg = 90.0;
      $receiver_2.radius = props.cornerRadius;
      $receiver_2.steps = props.cornerSteps;
      $receiver_2.uvCenter.set_dleff0$(-uI, vI).add_czzhjp$(props.texCoordLowerRight);
      $receiver_2.uvRadius = uI;
      this.circle_59f34t$(this.circleProps);
    }
  };
  MeshBuilder.prototype.line_uy9yj5$ = function (pt1, pt2, width) {
    this.line_s2l86p$(pt1.x, pt1.y, pt2.x, pt2.y, width);
  };
  MeshBuilder.prototype.line_s2l86p$ = function (x1, y1, x2, y2, width) {
    var dx = x2 - x1;
    var dy = y2 - y1;
    var x = dx * dx + dy * dy;
    var len = Math_0.sqrt(x);
    var addX = width * 0.25 * dx / len;
    var addY = width * 0.25 * dy / len;
    dx += addX + addX;
    dy += addY + addY;
    len += width * 0.5;
    var dxu = dx / len * width / 2;
    var dyu = dy / len * width / 2;
    var qx0 = x1 - addX + dyu;
    var qy0 = y1 - addY - dxu;
    var qx1 = x2 + addX + dyu;
    var qy1 = y2 + addY - dxu;
    var qx2 = x2 + addX - dyu;
    var qy2 = y2 + addY + dxu;
    var qx3 = x1 - addX - dyu;
    var qy3 = y1 - addY + dxu;
    var i0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(qx0, qy0, 0.0), Vec3f$Companion_getInstance().Z_AXIS);
    var i1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(qx1, qy1, 0.0), Vec3f$Companion_getInstance().Z_AXIS);
    var i2 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(qx2, qy2, 0.0), Vec3f$Companion_getInstance().Z_AXIS);
    var i3 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(qx3, qy3, 0.0), Vec3f$Companion_getInstance().Z_AXIS);
    this.meshData.addTriIndices_qt1dr2$(i0, i1, i2);
    this.meshData.addTriIndices_qt1dr2$(i0, i2, i3);
  };
  MeshBuilder.prototype.lineArc_b3rrsf$ = function (centerX, centerY, radius, startDeg, sweepDeg, width, resolution) {
    if (resolution === void 0)
      resolution = 3.0;
    var b = numberToInt(round(Math_0.abs(sweepDeg) / resolution));
    var steps = Math_0.max(1, b);
    var step = sweepDeg / steps;
    var startRad = startDeg * package$math.DEG_2_RAD;
    var stepRad = step * package$math.DEG_2_RAD;
    for (var i = 0; i < steps; i++) {
      var a0 = startRad + stepRad * i;
      var a1 = a0 + stepRad;
      var x0 = centerX + Math_0.cos(a0) * radius;
      var y0 = centerY + Math_0.sin(a0) * radius;
      var x1 = centerX + Math_0.cos(a1) * radius;
      var y1 = centerY + Math_0.sin(a1) * radius;
      this.line_s2l86p$(x0, y0, x1, y1, width);
    }
  };
  MeshBuilder.prototype.cube_xdlx95$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.cube_xdlx95$', function (props) {
    props(this.cubeProps.defaults());
    this.cube_lhbb6w$(this.cubeProps);
  });
  MeshBuilder.prototype.cube_lhbb6w$ = function (props) {
    props.fixNegativeSize();
    var color = props.frontColor;
    var c = this.color;
    if (color != null) {
      this.color = color;
    }
    var i0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().Z_AXIS);
    var i1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().Z_AXIS);
    var i2 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y + props.size.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().Z_AXIS);
    var i3 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y + props.size.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().Z_AXIS);
    this.meshData.addTriIndices_qt1dr2$(i0, i1, i2);
    this.meshData.addTriIndices_qt1dr2$(i0, i2, i3);
    this.color = c;
    var color_0 = props.rightColor;
    var c_0 = this.color;
    if (color_0 != null) {
      this.color = color_0;
    }
    var i0_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y, props.origin.z), Vec3f$Companion_getInstance().X_AXIS);
    var i1_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y + props.size.y, props.origin.z), Vec3f$Companion_getInstance().X_AXIS);
    var i2_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y + props.size.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().X_AXIS);
    var i3_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().X_AXIS);
    this.meshData.addTriIndices_qt1dr2$(i0_0, i1_0, i2_0);
    this.meshData.addTriIndices_qt1dr2$(i0_0, i2_0, i3_0);
    this.color = c_0;
    var color_1 = props.backColor;
    var c_1 = this.color;
    if (color_1 != null) {
      this.color = color_1;
    }
    var i0_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y + props.size.y, props.origin.z), Vec3f$Companion_getInstance().NEG_Z_AXIS);
    var i1_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y + props.size.y, props.origin.z), Vec3f$Companion_getInstance().NEG_Z_AXIS);
    var i2_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y, props.origin.z), Vec3f$Companion_getInstance().NEG_Z_AXIS);
    var i3_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y, props.origin.z), Vec3f$Companion_getInstance().NEG_Z_AXIS);
    this.meshData.addTriIndices_qt1dr2$(i0_1, i1_1, i2_1);
    this.meshData.addTriIndices_qt1dr2$(i0_1, i2_1, i3_1);
    this.color = c_1;
    var color_2 = props.leftColor;
    var c_2 = this.color;
    if (color_2 != null) {
      this.color = color_2;
    }
    var i0_2 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().NEG_X_AXIS);
    var i1_2 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y + props.size.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().NEG_X_AXIS);
    var i2_2 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y + props.size.y, props.origin.z), Vec3f$Companion_getInstance().NEG_X_AXIS);
    var i3_2 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y, props.origin.z), Vec3f$Companion_getInstance().NEG_X_AXIS);
    this.meshData.addTriIndices_qt1dr2$(i0_2, i1_2, i2_2);
    this.meshData.addTriIndices_qt1dr2$(i0_2, i2_2, i3_2);
    this.color = c_2;
    var color_3 = props.topColor;
    var c_3 = this.color;
    if (color_3 != null) {
      this.color = color_3;
    }
    var i0_3 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y + props.size.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().Y_AXIS);
    var i1_3 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y + props.size.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().Y_AXIS);
    var i2_3 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y + props.size.y, props.origin.z), Vec3f$Companion_getInstance().Y_AXIS);
    var i3_3 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y + props.size.y, props.origin.z), Vec3f$Companion_getInstance().Y_AXIS);
    this.meshData.addTriIndices_qt1dr2$(i0_3, i1_3, i2_3);
    this.meshData.addTriIndices_qt1dr2$(i0_3, i2_3, i3_3);
    this.color = c_3;
    var color_4 = props.bottomColor;
    var c_4 = this.color;
    if (color_4 != null) {
      this.color = color_4;
    }
    var i0_4 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y, props.origin.z), Vec3f$Companion_getInstance().NEG_Y_AXIS);
    var i1_4 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y, props.origin.z), Vec3f$Companion_getInstance().NEG_Y_AXIS);
    var i2_4 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().NEG_Y_AXIS);
    var i3_4 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().NEG_Y_AXIS);
    this.meshData.addTriIndices_qt1dr2$(i0_4, i1_4, i2_4);
    this.meshData.addTriIndices_qt1dr2$(i0_4, i2_4, i3_4);
    this.color = c_4;
  };
  MeshBuilder.prototype.cylinder_z0gg86$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.cylinder_z0gg86$', function (props) {
    props(this.cylinderProps.defaults());
    this.cylinder_tnt2h$(this.cylinderProps);
  });
  MeshBuilder.prototype.cylinder_tnt2h$ = function (props) {
    var tmp$;
    props.fixNegativeSize();
    if (props.bottomFill) {
      this.transform.push();
      this.translate_czzhiu$(props.origin);
      this.rotate_ad55pp$(90.0, Vec3f$Companion_getInstance().X_AXIS);
      var $receiver = this.circleProps.defaults();
      $receiver.steps = props.steps;
      $receiver.radius = props.bottomRadius;
      this.circle_59f34t$(this.circleProps);
      this.transform.pop();
    }
    if (props.topFill) {
      this.transform.push();
      this.translate_y2kzbl$(props.origin.x, props.origin.y + props.height, props.origin.z);
      this.rotate_ad55pp$(-90.0, Vec3f$Companion_getInstance().X_AXIS);
      var $receiver_0 = this.circleProps.defaults();
      $receiver_0.steps = props.steps;
      $receiver_0.radius = props.topRadius;
      this.circle_59f34t$(this.circleProps);
      this.transform.pop();
    }
    var dr = props.bottomRadius - props.topRadius;
    var x = dr * dr + props.height * props.height;
    var x_0 = dr / Math_0.sqrt(x);
    var nrmAng = 90.0 - Math_0.acos(x_0) * package$math.RAD_2_DEG;
    var i0 = 0;
    var i1 = 0;
    tmp$ = props.steps;
    for (var i = 0; i <= tmp$; i++) {
      var x_1 = i * math.PI * 2 / props.steps;
      var c = Math_0.cos(x_1);
      var x_2 = i * math.PI * 2 / props.steps;
      var s = Math_0.sin(x_2);
      var px2 = props.origin.x + props.bottomRadius * c;
      var pz2 = props.origin.z + props.bottomRadius * s;
      var px3 = props.origin.x + props.topRadius * c;
      var pz3 = props.origin.z + props.topRadius * s;
      this.tmpNrm_5ueby3$_0.set_y2kzbl$(c, 0.0, s).rotate_7b5o5w$(nrmAng, s, 0.0, c);
      var i2 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(px2, props.origin.y, pz2), this.tmpNrm_5ueby3$_0);
      var i3 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(px3, props.origin.y + props.height, pz3), this.tmpNrm_5ueby3$_0);
      if (i > 0) {
        this.meshData.addTriIndices_qt1dr2$(i0, i1, i2);
        this.meshData.addTriIndices_qt1dr2$(i1, i3, i2);
      }
      i0 = i2;
      i1 = i3;
    }
  };
  MeshBuilder.prototype.grid_vs3byi$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.grid_vs3byi$', function (props) {
    props(this.gridProps.defaults());
    this.grid_gtbnl3$(this.gridProps);
  });
  MeshBuilder.prototype.grid_gtbnl3$ = function (props) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var bx = -props.sizeX / 2;
    var by = -props.sizeY / 2;
    var sx = props.sizeX / props.stepsX;
    var sy = props.sizeY / props.stepsY;
    var nx = props.stepsX + 1 | 0;
    props.xDir.cross_2gj7b4$(props.yDir, this.tmpNrm_5ueby3$_0).norm();
    tmp$ = props.stepsY;
    for (var y = 0; y <= tmp$; y++) {
      tmp$_0 = props.stepsX;
      for (var x = 0; x <= tmp$_0; x++) {
        var px = bx + x * sx;
        var py = by + y * sy;
        var h = props.heightFun(x, y);
        this.tmpPos_5ud41y$_0.set_czzhiu$(props.center);
        this.tmpPos_5ud41y$_0.x = this.tmpPos_5ud41y$_0.x + (props.xDir.x * px + props.yDir.x * py + this.tmpNrm_5ueby3$_0.x * h);
        this.tmpPos_5ud41y$_0.y = this.tmpPos_5ud41y$_0.y + (props.xDir.y * px + props.yDir.y * py + this.tmpNrm_5ueby3$_0.y * h);
        this.tmpPos_5ud41y$_0.z = this.tmpPos_5ud41y$_0.z + (props.xDir.z * px + props.yDir.z * py + this.tmpNrm_5ueby3$_0.z * h);
        var idx = this.vertex_n440gp$(this.tmpPos_5ud41y$_0, Vec3f$Companion_getInstance().ZERO);
        if (x > 0 && y > 0) {
          if (x % 2 === y % 2) {
            this.meshData.addTriIndices_qt1dr2$(idx - nx - 1 | 0, idx, idx - 1 | 0);
            this.meshData.addTriIndices_qt1dr2$(idx - nx | 0, idx, idx - nx - 1 | 0);
          }
           else {
            this.meshData.addTriIndices_qt1dr2$(idx - nx | 0, idx, idx - 1 | 0);
            this.meshData.addTriIndices_qt1dr2$(idx - nx | 0, idx - 1 | 0, idx - nx - 1 | 0);
          }
        }
      }
    }
    var iTri = this.meshData.numIndices - (Kotlin.imul(props.stepsX, props.stepsY) * 6 | 0) | 0;
    var e1 = MutableVec3f_init();
    var e2 = MutableVec3f_init();
    var v1 = this.meshData.get_za3lpa$(0);
    var v2 = this.meshData.get_za3lpa$(0);
    var v3 = this.meshData.get_za3lpa$(0);
    tmp$_1 = this.meshData.numIndices;
    for (var i = iTri; i < tmp$_1; i += 3) {
      v1.index = this.meshData.vertexList.indices.get_za3lpa$(i);
      v2.index = this.meshData.vertexList.indices.get_za3lpa$(i + 1 | 0);
      v3.index = this.meshData.vertexList.indices.get_za3lpa$(i + 2 | 0);
      v2.position.subtract_2gj7b4$(v1.position, e1).norm();
      v3.position.subtract_2gj7b4$(v1.position, e2).norm();
      e1.cross_2gj7b4$(e2, this.tmpNrm_5ueby3$_0).norm();
      v1.normal.add_czzhiu$(this.tmpNrm_5ueby3$_0);
      v2.normal.add_czzhiu$(this.tmpNrm_5ueby3$_0);
      v3.normal.add_czzhiu$(this.tmpNrm_5ueby3$_0);
    }
    var iVert = this.meshData.numVertices - Kotlin.imul(props.stepsX + 1 | 0, props.stepsY + 1 | 0) | 0;
    tmp$_2 = this.meshData.numVertices;
    for (var i_0 = iVert; i_0 < tmp$_2; i_0++) {
      v1.index = i_0;
      v1.normal.norm();
    }
  };
  MeshBuilder.prototype.text_neimsr$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.text_neimsr$', wrapFunction(function () {
    var TextProps_init = _.de.fabmax.kool.util.TextProps;
    return function (font, block) {
      var tmp$;
      var tmp$_0;
      if ((tmp$ = this.textProps) != null)
        tmp$_0 = tmp$;
      else {
        var $receiver = new TextProps_init(font);
        this.textProps = $receiver;
        tmp$_0 = $receiver;
      }
      var props = tmp$_0;
      props.defaults();
      props.font = font;
      block(props);
      this.text_lis6zk$(props);
    };
  }));
  MeshBuilder.prototype.text_lis6zk$ = function (props) {
    this.transform.push();
    var tmp$;
    this.translate_czzhiu$(props.origin);
    var advanced = {v: 0.0};
    tmp$ = iterator(props.text);
    while (tmp$.hasNext()) {
      var c = unboxChar(tmp$.next());
      if (c === 10) {
        this.translate_y2kzbl$(0.0, -props.font.lineSpace, 0.0);
        advanced.v = 0.0;
      }
      var metrics = props.font.charMap.get_11rb$(c);
      if (metrics != null) {
        var $receiver = this.rectProps.defaults();
        $receiver.origin.set_y2kzbl$(advanced.v - metrics.xOffset, metrics.yBaseline - metrics.height, 0.0);
        $receiver.size.set_dleff0$(metrics.width, metrics.height);
        $receiver.texCoordUpperLeft.set_czzhjp$(metrics.uvMin);
        $receiver.texCoordUpperRight.set_dleff0$(metrics.uvMax.x, metrics.uvMin.y);
        $receiver.texCoordLowerLeft.set_dleff0$(metrics.uvMin.x, metrics.uvMax.y);
        $receiver.texCoordLowerRight.set_czzhjp$(metrics.uvMax);
        this.rect_e5k3t5$(this.rectProps);
        advanced.v += metrics.advance;
      }
    }
    this.transform.pop();
  };
  MeshBuilder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MeshBuilder',
    interfaces: []
  };
  function CircleProps() {
    this.radius = 1.0;
    this.steps = 20;
    this.center = MutableVec3f_init();
    this.startDeg = 0.0;
    this.sweepDeg = 360.0;
    this.uvCenter = MutableVec2f_init();
    this.uvRadius = 0.0;
  }
  CircleProps.prototype.defaults = function () {
    this.radius = 1.0;
    this.steps = 20;
    this.center.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.startDeg = 0.0;
    this.sweepDeg = 360.0;
    this.zeroTexCoords();
    return this;
  };
  CircleProps.prototype.zeroTexCoords = function () {
    this.uvCenter.set_czzhjp$(Vec2f$Companion_getInstance().ZERO);
    this.uvRadius = 0.0;
  };
  CircleProps.prototype.fullTexCoords = function () {
    this.uvCenter.set_dleff0$(0.5, 0.5);
    this.uvRadius = 0.5;
  };
  CircleProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CircleProps',
    interfaces: []
  };
  function GridProps() {
    GridProps$Companion_getInstance();
    this.center = MutableVec3f_init();
    this.xDir = MutableVec3f_init();
    this.yDir = MutableVec3f_init();
    this.sizeX = 0.0;
    this.sizeY = 0.0;
    this.stepsX = 0;
    this.stepsY = 0;
    this.heightFun = GridProps$Companion_getInstance().ZERO_HEIGHT;
    this.defaults();
  }
  GridProps.prototype.defaults = function () {
    this.center.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.xDir.set_czzhiu$(Vec3f$Companion_getInstance().X_AXIS);
    this.yDir.set_czzhiu$(Vec3f$Companion_getInstance().NEG_Z_AXIS);
    this.sizeX = 10.0;
    this.sizeY = 10.0;
    this.stepsX = 10;
    this.stepsY = 10;
    return this;
  };
  function GridProps$Companion() {
    GridProps$Companion_instance = this;
    this.ZERO_HEIGHT = GridProps$Companion$ZERO_HEIGHT$lambda;
  }
  function GridProps$Companion$ZERO_HEIGHT$lambda(f, f_0) {
    return 0.0;
  }
  GridProps$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var GridProps$Companion_instance = null;
  function GridProps$Companion_getInstance() {
    if (GridProps$Companion_instance === null) {
      new GridProps$Companion();
    }
    return GridProps$Companion_instance;
  }
  GridProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GridProps',
    interfaces: []
  };
  function SphereProps() {
    this.radius = 1.0;
    this.steps = 20;
    this.center = MutableVec3f_init();
    this.uv_0 = MutableVec2f_init();
    this.texCoordGenerator = SphereProps$texCoordGenerator$lambda(this);
  }
  SphereProps.prototype.defaultTexCoordGenerator_0 = function (theta, phi) {
    return this.uv_0.set_dleff0$(phi / (math.PI * 2.0), theta / math.PI);
  };
  function SphereProps$defaults$lambda(this$SphereProps) {
    return function (t, p) {
      return this$SphereProps.defaultTexCoordGenerator_0(t, p);
    };
  }
  SphereProps.prototype.defaults = function () {
    this.radius = 1.0;
    this.steps = 20;
    this.center.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.texCoordGenerator = SphereProps$defaults$lambda(this);
    return this;
  };
  function SphereProps$texCoordGenerator$lambda(this$SphereProps) {
    return function (t, p) {
      return this$SphereProps.defaultTexCoordGenerator_0(t, p);
    };
  }
  SphereProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SphereProps',
    interfaces: []
  };
  function RectProps() {
    this.cornerRadius = 0.0;
    this.cornerSteps = 8;
    this.origin = MutableVec3f_init();
    this.size = MutableVec2f_init();
    this.texCoordUpperLeft = MutableVec2f_init();
    this.texCoordUpperRight = MutableVec2f_init();
    this.texCoordLowerLeft = MutableVec2f_init();
    this.texCoordLowerRight = MutableVec2f_init();
  }
  Object.defineProperty(RectProps.prototype, 'width', {
    get: function () {
      return this.size.x;
    },
    set: function (value) {
      this.size.x = value;
    }
  });
  Object.defineProperty(RectProps.prototype, 'height', {
    get: function () {
      return this.size.y;
    },
    set: function (value) {
      this.size.y = value;
    }
  });
  RectProps.prototype.fixNegativeSize = function () {
    if (this.size.x < 0) {
      this.origin.x = this.origin.x + this.size.x;
      this.size.x = -this.size.x;
    }
    if (this.size.y < 0) {
      this.origin.y = this.origin.y + this.size.y;
      this.size.y = -this.size.y;
    }
  };
  RectProps.prototype.zeroTexCoords = function () {
    this.texCoordUpperLeft.set_czzhjp$(Vec2f$Companion_getInstance().ZERO);
    this.texCoordUpperRight.set_czzhjp$(Vec2f$Companion_getInstance().ZERO);
    this.texCoordLowerLeft.set_czzhjp$(Vec2f$Companion_getInstance().ZERO);
    this.texCoordLowerRight.set_czzhjp$(Vec2f$Companion_getInstance().ZERO);
  };
  RectProps.prototype.fullTexCoords = function () {
    this.texCoordUpperLeft.set_dleff0$(0.0, 0.0);
    this.texCoordUpperRight.set_dleff0$(1.0, 0.0);
    this.texCoordLowerLeft.set_dleff0$(0.0, 1.0);
    this.texCoordLowerRight.set_dleff0$(1.0, 1.0);
  };
  RectProps.prototype.defaults = function () {
    this.cornerRadius = 0.0;
    this.cornerSteps = 8;
    this.origin.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.size.set_dleff0$(1.0, 1.0);
    this.zeroTexCoords();
    return this;
  };
  RectProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RectProps',
    interfaces: []
  };
  function CubeProps() {
    this.origin = MutableVec3f_init();
    this.size = MutableVec3f_init();
    this.topColor = null;
    this.bottomColor = null;
    this.leftColor = null;
    this.rightColor = null;
    this.frontColor = null;
    this.backColor = null;
  }
  Object.defineProperty(CubeProps.prototype, 'width', {
    get: function () {
      return this.size.x;
    },
    set: function (value) {
      this.size.x = value;
    }
  });
  Object.defineProperty(CubeProps.prototype, 'height', {
    get: function () {
      return this.size.y;
    },
    set: function (value) {
      this.size.y = value;
    }
  });
  Object.defineProperty(CubeProps.prototype, 'depth', {
    get: function () {
      return this.size.z;
    },
    set: function (value) {
      this.size.z = value;
    }
  });
  CubeProps.prototype.fixNegativeSize = function () {
    if (this.size.x < 0) {
      this.origin.x = this.origin.x + this.size.x;
      this.size.x = -this.size.x;
    }
    if (this.size.y < 0) {
      this.origin.y = this.origin.y + this.size.y;
      this.size.y = -this.size.y;
    }
    if (this.size.z < 0) {
      this.origin.z = this.origin.z + this.size.z;
      this.size.z = -this.size.z;
    }
  };
  CubeProps.prototype.centerOrigin = function () {
    this.origin.x = this.origin.x - this.size.x / 2.0;
    this.origin.y = this.origin.y - this.size.y / 2.0;
    this.origin.z = this.origin.z - this.size.z / 2.0;
  };
  CubeProps.prototype.colorCube = function () {
    this.frontColor = Color$Companion_getInstance().RED;
    this.rightColor = Color$Companion_getInstance().GREEN;
    this.backColor = Color$Companion_getInstance().BLUE;
    this.leftColor = Color$Companion_getInstance().YELLOW;
    this.topColor = Color$Companion_getInstance().MAGENTA;
    this.bottomColor = Color$Companion_getInstance().CYAN;
  };
  CubeProps.prototype.defaults = function () {
    this.size.x = 1.0;
    this.size.y = 1.0;
    this.size.z = 1.0;
    this.origin.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.topColor = null;
    this.bottomColor = null;
    this.leftColor = null;
    this.rightColor = null;
    this.frontColor = null;
    this.backColor = null;
    return this;
  };
  CubeProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CubeProps',
    interfaces: []
  };
  function CylinderProps() {
    this.bottomRadius = 1.0;
    this.topRadius = 1.0;
    this.steps = 20;
    this.height = 1.0;
    this.topFill = true;
    this.bottomFill = true;
    this.origin = MutableVec3f_init();
  }
  CylinderProps.prototype.defaults = function () {
    this.bottomRadius = 1.0;
    this.topRadius = 1.0;
    this.steps = 20;
    this.height = 1.0;
    this.topFill = true;
    this.bottomFill = true;
    this.origin.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    return this;
  };
  CylinderProps.prototype.fixNegativeSize = function () {
    if (this.height < 0) {
      this.origin.y = this.origin.y + this.height;
      this.height = -this.height;
    }
  };
  CylinderProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CylinderProps',
    interfaces: []
  };
  function TextProps(font) {
    this.font = font;
    this.text = '';
    this.origin = MutableVec3f_init();
  }
  TextProps.prototype.defaults = function () {
    this.text = '';
    this.origin.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    return this;
  };
  TextProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextProps',
    interfaces: []
  };
  function ObjectRecycler(maxSize, factory) {
    ObjectRecycler$Companion_getInstance();
    this.maxSize_tysx8i$_0 = maxSize;
    this.factory_vv2li5$_0 = factory;
    this.recyclingStack_cbi09h$_0 = ArrayList_init_0();
  }
  ObjectRecycler.prototype.get = function () {
    if (!this.recyclingStack_cbi09h$_0.isEmpty()) {
      return this.recyclingStack_cbi09h$_0.removeAt_za3lpa$(get_lastIndex(this.recyclingStack_cbi09h$_0));
    }
     else {
      return this.factory_vv2li5$_0();
    }
  };
  ObjectRecycler.prototype.recycle_trkh7z$ = function (obj) {
    if (this.recyclingStack_cbi09h$_0.size < this.maxSize_tysx8i$_0) {
      this.recyclingStack_cbi09h$_0.add_11rb$(obj);
    }
     else {
      var $this = package$util.Log;
      var level = Log$Level.DEBUG;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Discarding recycled object ' + Kotlin.getKClassFromExpression(obj) + ', stack is full: ' + this.recyclingStack_cbi09h$_0.size);
      }
    }
    return this;
  };
  function ObjectRecycler$Companion() {
    ObjectRecycler$Companion_instance = this;
    this.DEFAULT_MAX_SIZE = 10000;
  }
  ObjectRecycler$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ObjectRecycler$Companion_instance = null;
  function ObjectRecycler$Companion_getInstance() {
    if (ObjectRecycler$Companion_instance === null) {
      new ObjectRecycler$Companion();
    }
    return ObjectRecycler$Companion_instance;
  }
  ObjectRecycler.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ObjectRecycler',
    interfaces: []
  };
  function ObjectRecycler_init(factory, $this) {
    $this = $this || Object.create(ObjectRecycler.prototype);
    ObjectRecycler.call($this, 10000, factory);
    return $this;
  }
  function ObjectPool(factory) {
    ObjectRecycler_init(factory, this);
    this.liveObjects_0 = ArrayList_init_0();
  }
  Object.defineProperty(ObjectPool.prototype, 'size', {
    get: function () {
      return this.liveObjects_0.size;
    }
  });
  ObjectPool.prototype.get_za3lpa$ = function (index) {
    return this.liveObjects_0.get_za3lpa$(index);
  };
  ObjectPool.prototype.get = function () {
    var obj = ObjectRecycler.prototype.get.call(this);
    this.liveObjects_0.add_11rb$(obj);
    return obj;
  };
  ObjectPool.prototype.recycle_trkh7z$ = function (obj) {
    this.liveObjects_0.remove_11rb$(obj);
    return ObjectRecycler.prototype.recycle_trkh7z$.call(this, obj);
  };
  ObjectPool.prototype.use_oh3mgy$ = defineInlineFunction('kool.de.fabmax.kool.util.ObjectPool.use_oh3mgy$', function (block) {
    var item = this.get();
    block(item);
    this.recycle_trkh7z$(item);
  });
  ObjectPool.prototype.recycleAll = function () {
    var tmp$;
    tmp$ = this.liveObjects_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      ObjectRecycler.prototype.recycle_trkh7z$.call(this, this.liveObjects_0.get_za3lpa$(i));
    }
    this.liveObjects_0.clear();
  };
  ObjectPool.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ObjectPool',
    interfaces: [ObjectRecycler]
  };
  function AutoRecycler(maxSize, factory) {
    if (maxSize === void 0)
      maxSize = 10000;
    ObjectRecycler.call(this, maxSize, factory);
    this.contextRecycler = ObjectRecycler_init(AutoRecycler$contextRecycler$lambda(this));
  }
  AutoRecycler.prototype.use_al8zmf$ = defineInlineFunction('kool.de.fabmax.kool.util.AutoRecycler.use_al8zmf$', function (block) {
    var ctx = this.contextRecycler.get();
    block(ctx, ctx.get());
    ctx.free();
    this.contextRecycler.recycle_trkh7z$(ctx);
  });
  function AutoRecycler$Context($outer) {
    this.$outer = $outer;
    this.liveObjects_0 = ArrayList_init_0();
  }
  AutoRecycler$Context.prototype.get = function () {
    var o = this.$outer.get();
    this.liveObjects_0.add_11rb$(o);
    return o;
  };
  AutoRecycler$Context.prototype.free = function () {
    var tmp$;
    tmp$ = this.liveObjects_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.$outer.recycle_trkh7z$(this.liveObjects_0.get_za3lpa$(i));
    }
    this.liveObjects_0.clear();
  };
  AutoRecycler$Context.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Context',
    interfaces: []
  };
  function AutoRecycler$contextRecycler$lambda(this$AutoRecycler) {
    return function () {
      return new AutoRecycler$Context(this$AutoRecycler);
    };
  }
  AutoRecycler.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AutoRecycler',
    interfaces: [ObjectRecycler]
  };
  function OcTree(itemAdapter, items, bounds, padding, bucketSz, accurateBounds) {
    OcTree$Companion_getInstance();
    if (items === void 0)
      items = emptyList();
    if (bounds === void 0)
      bounds = new BoundingBox();
    if (padding === void 0)
      padding = 0.1;
    if (bucketSz === void 0)
      bucketSz = 20;
    if (accurateBounds === void 0)
      accurateBounds = true;
    SpatialTree.call(this, itemAdapter);
    this.accurateBounds = accurateBounds;
    this.root_be3r27$_0 = null;
    this.emptyItems_0 = ArrayList_init_0();
    var tmpPt = MutableVec3f_init();
    if (!items.isEmpty()) {
      var $this = bounds;
      var wasBatchUpdate = $this.isBatchUpdate;
      $this.isBatchUpdate = true;
      var closure$items = items;
      var closure$bounds = bounds;
      for (var i = 0; i !== closure$items.size; ++i) {
        closure$bounds.add_czzhiu$(itemAdapter.getMin_hm1yd1$(closure$items.get_za3lpa$(i), tmpPt));
        closure$bounds.add_czzhiu$(itemAdapter.getMax_hm1yd1$(closure$items.get_za3lpa$(i), tmpPt));
      }
      $this.isBatchUpdate = wasBatchUpdate;
    }
    if (bounds.isEmpty) {
      throw KoolException_init('OcTree bounds are empty, specify bounds manually');
    }
    var tmp$ = bounds.size.x;
    var a = bounds.size.y;
    var b = bounds.size.z;
    var b_0 = Math_0.max(a, b);
    var edLen = Math_0.max(tmp$, b_0);
    var pad = edLen * padding;
    bounds.set_w8lrqs$(bounds.min.x - pad, bounds.min.y - pad, bounds.min.z - pad, bounds.min.x + edLen + pad * 2, bounds.min.y + edLen + pad * 2, bounds.min.z + edLen + pad * 2);
    this.root_be3r27$_0 = new OcTree$OcNode(this, bounds, 0, bucketSz);
    for (var i_0 = 0; i_0 !== items.size; ++i_0) {
      this.root.add_bzsob0$(items.get_za3lpa$(i_0));
    }
  }
  Object.defineProperty(OcTree.prototype, 'root', {
    get: function () {
      return this.root_be3r27$_0;
    }
  });
  Object.defineProperty(OcTree.prototype, 'size', {
    get: function () {
      return this.root.size;
    }
  });
  OcTree.prototype.add_11rb$ = function (element) {
    if (!this.root.nodeBounds.isIncluding_y2kzbl$(this.itemAdapter.getCenterX_trkh7z$(element), this.itemAdapter.getCenterY_trkh7z$(element), this.itemAdapter.getCenterZ_trkh7z$(element))) {
      var $this = package$util.Log;
      var level = Log$Level.ERROR;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Item not in tree bounds: (' + this.itemAdapter.getMinX_trkh7z$(element) + ', ' + this.itemAdapter.getMinY_trkh7z$(element) + ', ' + this.itemAdapter.getMinZ_trkh7z$(element) + '), bounds: ' + this.root.bounds);
      }
      return false;
    }
    this.root.add_bzsob0$(element);
    return true;
  };
  OcTree.prototype.remove_11rb$ = function (element) {
    var success = this.root.remove_4rla3$(element, true);
    if (!success) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Failed to remove: ' + element);
      }
      var it = this.iterator();
      while (it.hasNext()) {
        if (equals(it.next(), element)) {
          var $this_0 = package$util.Log;
          var level_0 = Log$Level.WARN;
          var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
          if (level_0.level >= $this_0.level.level) {
            $this_0.printer(level_0, tag_0, "Removed via brute force, did element change it's position?");
          }
          it.remove();
        }
      }
    }
    return success;
  };
  function OcTree$iterator$ObjectLiteral(this$OcTree) {
    this.elementIts = ArrayList_init_0();
    this.elemIt = null;
    var tmp$;
    this.collectElements_witnv0$(this$OcTree.root);
    if (!this.elementIts.isEmpty()) {
      tmp$ = this.elementIts.removeAt_za3lpa$(get_lastIndex(this.elementIts));
    }
     else {
      tmp$ = ArrayList_init_0().iterator();
    }
    this.elemIt = tmp$;
  }
  OcTree$iterator$ObjectLiteral.prototype.collectElements_witnv0$ = function (node) {
    var tmp$;
    if (node.isLeaf) {
      if (!node.items.isEmpty()) {
        var $receiver = this.elementIts;
        var element = node.items.iterator();
        $receiver.add_11rb$(element);
      }
    }
     else {
      tmp$ = node.children;
      for (var i = 0; i !== tmp$.size; ++i) {
        this.collectElements_witnv0$(node.children.get_za3lpa$(i));
      }
    }
  };
  OcTree$iterator$ObjectLiteral.prototype.hasNext = function () {
    if (this.elemIt.hasNext()) {
      return true;
    }
     else {
      while (!this.elementIts.isEmpty()) {
        this.elemIt = this.elementIts.removeAt_za3lpa$(get_lastIndex(this.elementIts));
        if (this.elemIt.hasNext()) {
          return true;
        }
      }
      return false;
    }
  };
  OcTree$iterator$ObjectLiteral.prototype.next = function () {
    return this.elemIt.next();
  };
  OcTree$iterator$ObjectLiteral.prototype.remove = function () {
    this.elemIt.remove();
  };
  OcTree$iterator$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [MutableIterator]
  };
  OcTree.prototype.iterator = function () {
    return new OcTree$iterator$ObjectLiteral(this);
  };
  OcTree.prototype.contains_11rb$ = function (element) {
    return this.root.contains_uargzz$(element);
  };
  OcTree.prototype.containsAll_brywnq$ = function (elements) {
    var tmp$;
    tmp$ = elements.iterator();
    while (tmp$.hasNext()) {
      var elem = tmp$.next();
      if (!this.contains_11rb$(elem)) {
        return false;
      }
    }
    return true;
  };
  OcTree.prototype.isEmpty = function () {
    return this.size === 0;
  };
  OcTree.prototype.addAll_brywnq$ = function (elements) {
    var tmp$;
    var anyAdded = false;
    tmp$ = elements.iterator();
    while (tmp$.hasNext()) {
      var elem = tmp$.next();
      anyAdded = anyAdded || this.add_11rb$(elem);
    }
    return anyAdded;
  };
  OcTree.prototype.clear = function () {
    this.root.clear_8be2vx$();
  };
  OcTree.prototype.removeAll_brywnq$ = function (elements) {
    var tmp$;
    var anyRemoved = false;
    tmp$ = elements.iterator();
    while (tmp$.hasNext()) {
      var elem = tmp$.next();
      anyRemoved = anyRemoved || this.remove_11rb$(elem);
    }
    return anyRemoved;
  };
  OcTree.prototype.retainAll_brywnq$ = function (elements) {
    var anyRemoved = false;
    var retainSet = LinkedHashSet_init();
    retainSet.addAll_brywnq$(elements);
    var it = this.iterator();
    while (it.hasNext()) {
      if (!retainSet.contains_11rb$(it.next())) {
        it.remove();
        anyRemoved = true;
      }
    }
    return anyRemoved;
  };
  function OcTree$OcNode($outer, nodeBounds, depth, bucketSz) {
    this.$outer = $outer;
    SpatialTree$Node.call(this, this.$outer, depth);
    this.nodeBounds = nodeBounds;
    this.bucketSz = bucketSz;
    this.size_yjj6gq$_0 = 0;
    this.children_oh99z0$_0 = ArrayList_init_0();
    this.tmpVec_0 = MutableVec3f_init();
    this.mutItems_0 = ArrayList_init_0();
    if (depth > 20) {
      throw KoolException_init('Octree is too deep');
    }
    if (!this.$outer.accurateBounds) {
      this.bounds.add_ea4od8$(this.nodeBounds);
    }
  }
  Object.defineProperty(OcTree$OcNode.prototype, 'size', {
    get: function () {
      return this.size_yjj6gq$_0;
    },
    set: function (size) {
      this.size_yjj6gq$_0 = size;
    }
  });
  Object.defineProperty(OcTree$OcNode.prototype, 'children', {
    get: function () {
      return this.children_oh99z0$_0;
    }
  });
  Object.defineProperty(OcTree$OcNode.prototype, 'items', {
    get: function () {
      return this.mutItems_0;
    }
  });
  Object.defineProperty(OcTree$OcNode.prototype, 'nodeRange', {
    get: function () {
      return get_indices(this.items);
    }
  });
  OcTree$OcNode.prototype.clear_8be2vx$ = function () {
    if (this.depth !== 0) {
      throw KoolException_init('clear() is only allowed for root node');
    }
    this.mutItems_0.clear();
    this.children.clear();
    this.size = 0;
    if (this.$outer.accurateBounds) {
      this.bounds.clear();
    }
  };
  OcTree$OcNode.prototype.add_bzsob0$ = function (item) {
    this.size = this.size + 1 | 0;
    if (this.isLeaf) {
      if (this.$outer.accurateBounds) {
        this.bounds.add_czzhiu$(this.$outer.itemAdapter.getMin_hm1yd1$(item, this.tmpVec_0));
        this.bounds.add_czzhiu$(this.$outer.itemAdapter.getMax_hm1yd1$(item, this.tmpVec_0));
      }
      if (this.mutItems_0.size < this.bucketSz || this.depth === 20) {
        this.mutItems_0.add_11rb$(item);
        this.$outer.itemAdapter.setNode_bc9457$(item, this);
      }
       else {
        this.split_0();
        this.children.get_za3lpa$(this.childIndexForItem_0(item)).add_bzsob0$(item);
      }
    }
     else {
      var child = this.children.get_za3lpa$(this.childIndexForItem_0(item));
      child.add_bzsob0$(item);
      if (this.$outer.accurateBounds) {
        this.bounds.add_ea4od8$(child.bounds);
      }
    }
  };
  OcTree$OcNode.prototype.remove_4rla3$ = function (item, canMerge) {
    var tmp$;
    if (this.isLeaf) {
      tmp$ = this.mutItems_0.remove_11rb$(item);
    }
     else {
      tmp$ = this.children.get_za3lpa$(this.childIndexForItem_0(item)).remove_4rla3$(item, canMerge);
    }
    var success = tmp$;
    if (success) {
      this.size = this.size - 1 | 0;
      if (!this.isLeaf && this.size < this.bucketSz && canMerge) {
        this.merge_0();
      }
      if (this.$outer.accurateBounds && this.isBorderItem_0(item)) {
        this.recomputeBounds_0();
      }
    }
    return success;
  };
  OcTree$OcNode.prototype.isBorderItem_0 = function (item) {
    this.$outer.itemAdapter.getMin_hm1yd1$(item, this.tmpVec_0);
    if (this.tmpVec_0.x <= this.bounds.min.x || this.tmpVec_0.y <= this.bounds.min.y || this.tmpVec_0.z <= this.bounds.min.z) {
      return true;
    }
    this.$outer.itemAdapter.getMax_hm1yd1$(item, this.tmpVec_0);
    if (this.tmpVec_0.x >= this.bounds.max.x || this.tmpVec_0.y >= this.bounds.max.y || this.tmpVec_0.z >= this.bounds.max.z) {
      return true;
    }
    return false;
  };
  OcTree$OcNode.prototype.recomputeBounds_0 = function () {
    var tmp$, tmp$_0;
    this.bounds.clear();
    if (this.isLeaf) {
      tmp$ = this.mutItems_0;
      for (var i = 0; i !== tmp$.size; ++i) {
        this.bounds.add_czzhiu$(this.$outer.itemAdapter.getMin_hm1yd1$(this.mutItems_0.get_za3lpa$(i), this.tmpVec_0));
        this.bounds.add_czzhiu$(this.$outer.itemAdapter.getMax_hm1yd1$(this.mutItems_0.get_za3lpa$(i), this.tmpVec_0));
      }
    }
     else {
      tmp$_0 = this.children;
      for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
        this.bounds.add_ea4od8$(this.children.get_za3lpa$(i_0).bounds);
      }
    }
  };
  OcTree$OcNode.prototype.contains_uargzz$ = function (item) {
    var tmp$;
    if (this.isLeaf) {
      tmp$ = this.mutItems_0.contains_11rb$(item);
    }
     else {
      tmp$ = this.children.get_za3lpa$(this.childIndexForItem_0(item)).contains_uargzz$(item);
    }
    return tmp$;
  };
  OcTree$OcNode.prototype.isInBounds_czzhiu$ = function (center) {
    return this.isInBounds_y2kzbl$(center.x, center.y, center.z);
  };
  OcTree$OcNode.prototype.isInBounds_y2kzbl$ = function (centerX, centerY, centerZ) {
    return centerX >= this.nodeBounds.min.x && centerX < this.nodeBounds.max.x && centerY >= this.nodeBounds.min.y && centerY < this.nodeBounds.max.y && centerZ >= this.nodeBounds.min.z && centerZ < this.nodeBounds.max.z;
  };
  OcTree$OcNode.prototype.split_0 = function () {
    var tmp$;
    var x0 = this.nodeBounds.min.x;
    var x1 = this.nodeBounds.center.x;
    var x2 = this.nodeBounds.max.x;
    var y0 = this.nodeBounds.min.y;
    var y1 = this.nodeBounds.center.y;
    var y2 = this.nodeBounds.max.y;
    var z0 = this.nodeBounds.min.z;
    var z1 = this.nodeBounds.center.z;
    var z2 = this.nodeBounds.max.z;
    var $receiver = this.children;
    var element = new OcTree$OcNode(this.$outer, BoundingBox_init(new Vec3f(x0, y0, z0), new Vec3f(x1, y1, z1)), this.depth + 1 | 0, this.bucketSz);
    $receiver.add_11rb$(element);
    var $receiver_0 = this.children;
    var element_0 = new OcTree$OcNode(this.$outer, BoundingBox_init(new Vec3f(x0, y0, z1), new Vec3f(x1, y1, z2)), this.depth + 1 | 0, this.bucketSz);
    $receiver_0.add_11rb$(element_0);
    var $receiver_1 = this.children;
    var element_1 = new OcTree$OcNode(this.$outer, BoundingBox_init(new Vec3f(x0, y1, z0), new Vec3f(x1, y2, z1)), this.depth + 1 | 0, this.bucketSz);
    $receiver_1.add_11rb$(element_1);
    var $receiver_2 = this.children;
    var element_2 = new OcTree$OcNode(this.$outer, BoundingBox_init(new Vec3f(x0, y1, z1), new Vec3f(x1, y2, z2)), this.depth + 1 | 0, this.bucketSz);
    $receiver_2.add_11rb$(element_2);
    var $receiver_3 = this.children;
    var element_3 = new OcTree$OcNode(this.$outer, BoundingBox_init(new Vec3f(x1, y0, z0), new Vec3f(x2, y1, z1)), this.depth + 1 | 0, this.bucketSz);
    $receiver_3.add_11rb$(element_3);
    var $receiver_4 = this.children;
    var element_4 = new OcTree$OcNode(this.$outer, BoundingBox_init(new Vec3f(x1, y0, z1), new Vec3f(x2, y1, z2)), this.depth + 1 | 0, this.bucketSz);
    $receiver_4.add_11rb$(element_4);
    var $receiver_5 = this.children;
    var element_5 = new OcTree$OcNode(this.$outer, BoundingBox_init(new Vec3f(x1, y1, z0), new Vec3f(x2, y2, z1)), this.depth + 1 | 0, this.bucketSz);
    $receiver_5.add_11rb$(element_5);
    var $receiver_6 = this.children;
    var element_6 = new OcTree$OcNode(this.$outer, BoundingBox_init(new Vec3f(x1, y1, z1), new Vec3f(x2, y2, z2)), this.depth + 1 | 0, this.bucketSz);
    $receiver_6.add_11rb$(element_6);
    tmp$ = this.mutItems_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.children.get_za3lpa$(this.childIndexForItem_0(this.mutItems_0.get_za3lpa$(i))).add_bzsob0$(this.mutItems_0.get_za3lpa$(i));
    }
    this.mutItems_0 = this.$outer.emptyItems_0;
  };
  OcTree$OcNode.prototype.merge_0 = function () {
    var tmp$;
    this.mutItems_0 = ArrayList_init_0();
    tmp$ = this.children;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.mutItems_0.addAll_brywnq$(this.children.get_za3lpa$(i).mutItems_0);
    }
    this.children.clear();
  };
  OcTree$OcNode.prototype.childIndexForItem_0 = function (item) {
    var tmp$, tmp$_0, tmp$_1;
    if (this.$outer.itemAdapter.getCenterX_trkh7z$(item) < this.nodeBounds.center.x) {
      tmp$ = 0;
    }
     else {
      tmp$ = 4;
    }
    if (this.$outer.itemAdapter.getCenterY_trkh7z$(item) < this.nodeBounds.center.y) {
      tmp$_0 = 0;
    }
     else {
      tmp$_0 = 2;
    }
    if (this.$outer.itemAdapter.getCenterZ_trkh7z$(item) < this.nodeBounds.center.z) {
      tmp$_1 = 0;
    }
     else {
      tmp$_1 = 1;
    }
    return tmp$ | tmp$_0 | tmp$_1;
  };
  OcTree$OcNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OcNode',
    interfaces: [SpatialTree$Node]
  };
  function OcTree$Companion() {
    OcTree$Companion_instance = this;
    this.MAX_DEPTH = 20;
  }
  OcTree$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var OcTree$Companion_instance = null;
  function OcTree$Companion_getInstance() {
    if (OcTree$Companion_instance === null) {
      new OcTree$Companion();
    }
    return OcTree$Companion_instance;
  }
  OcTree.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OcTree',
    interfaces: [MutableCollection, SpatialTree]
  };
  function Comparator$ObjectLiteral_7(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_7.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_7.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_7 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function ParticleSystem(particleTex, maxParticles, name) {
    ParticleSystem$Companion_getInstance();
    if (maxParticles === void 0)
      maxParticles = 10000;
    if (name === void 0)
      name = null;
    Node.call(this);
    this.maxParticles = maxParticles;
    this.mesh_0 = new BillboardMesh(name);
    var array = Array_0(this.maxParticles);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new ParticleSystem$Particle(this, i, ParticleSystem$Companion_getInstance().TYPE_DEAD_0);
    }
    this.particles_0 = array;
    this.sortedIndices_0 = ArrayList_init_0();
    this.numParticles_m4cuf7$_0 = 0;
    this.drawOrder = BillboardMesh$DrawOrder$FAR_FIRST_getInstance();
    this.isDepthMask = true;
    var tmp$_0;
    this.mesh_0.parent = this;
    this.mesh_0.drawOrder = BillboardMesh$DrawOrder$AS_IS_getInstance();
    this.mesh_0.meshData.usage = 35048;
    this.isFrustumChecked = false;
    this.mesh_0.isFrustumChecked = false;
    (Kotlin.isType(tmp$_0 = this.mesh_0.shader, BasicShader) ? tmp$_0 : throwCCE()).texture = particleTex;
    var $receiver = this.particles_0;
    var tmp$_1;
    for (tmp$_1 = 0; tmp$_1 !== $receiver.length; ++tmp$_1) {
      var element = $receiver[tmp$_1];
      this.mesh_0.addQuad_mr3yw4$(element.position, element.size);
    }
  }
  Object.defineProperty(ParticleSystem.prototype, 'numParticles', {
    get: function () {
      return this.numParticles_m4cuf7$_0;
    },
    set: function (numParticles) {
      this.numParticles_m4cuf7$_0 = numParticles;
    }
  });
  ParticleSystem.prototype.spawnParticle_1rs1w0$ = function (type) {
    var tmp$;
    if (this.numParticles === this.maxParticles) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Maximum number of particles reached');
      }
      return null;
    }
    var p = this.particles_0[tmp$ = this.numParticles, this.numParticles = tmp$ + 1 | 0, tmp$];
    p.replaceBy_1rs1w0$(type);
    return p;
  };
  ParticleSystem.prototype.onSceneChanged_9srkog$ = function (oldScene, newScene) {
    Node.prototype.onSceneChanged_9srkog$.call(this, oldScene, newScene);
    this.mesh_0.scene = newScene;
  };
  ParticleSystem.prototype.preRender_aemszp$ = function (ctx) {
    var tmp$;
    Node.prototype.preRender_aemszp$.call(this, ctx);
    tmp$ = this.numParticles;
    for (var i = 0; i < tmp$; i++) {
      this.update_0(this.particles_0[i], ctx);
    }
    if (this.drawOrder !== BillboardMesh$DrawOrder$AS_IS_getInstance()) {
      this.zSortParticles_0();
    }
    this.mesh_0.preRender_aemszp$(ctx);
  };
  ParticleSystem.prototype.render_aemszp$ = function (ctx) {
    Node.prototype.render_aemszp$.call(this, ctx);
    if (this.isRendered) {
      var restoreAttribs = false;
      if (this.isDepthMask !== ctx.isDepthMask) {
        ctx.pushAttributes();
        ctx.isDepthMask = this.isDepthMask;
        ctx.applyAttributes();
        restoreAttribs = true;
      }
      this.mesh_0.render_aemszp$(ctx);
      if (restoreAttribs) {
        ctx.popAttributes();
      }
    }
  };
  ParticleSystem.prototype.postRender_aemszp$ = function (ctx) {
    Node.prototype.postRender_aemszp$.call(this, ctx);
    this.mesh_0.postRender_aemszp$(ctx);
  };
  ParticleSystem.prototype.dispose_aemszp$ = function (ctx) {
    Node.prototype.dispose_aemszp$.call(this, ctx);
    this.mesh_0.dispose_aemszp$(ctx);
  };
  function ParticleSystem$zSortParticles$lambda(this$ParticleSystem, closure$camPos, closure$s) {
    return function (idx) {
      return this$ParticleSystem.particles_0[idx.listIndex].position.sqrDistance_czzhiu$(closure$camPos) * closure$s;
    };
  }
  ParticleSystem.prototype.zSortParticles_0 = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    tmp$_1 = (tmp$_0 = (tmp$ = this.scene) != null ? tmp$.camera : null) != null ? tmp$_0.globalPos : null;
    if (tmp$_1 == null) {
      return;
    }
    var camPos = tmp$_1;
    this.setupSortList_0();
    var s = this.drawOrder === BillboardMesh$DrawOrder$FAR_FIRST_getInstance() ? -1 : 1;
    var $receiver = this.sortedIndices_0;
    if ($receiver.size > 1) {
      sortWith($receiver, new Comparator$ObjectLiteral_7(compareBy$lambda_7(ParticleSystem$zSortParticles$lambda(this, camPos, s))));
    }
    this.mesh_0.clearIndices();
    tmp$_2 = this.sortedIndices_0;
    for (var i = 0; i !== tmp$_2.size; ++i) {
      var idx = this.sortedIndices_0.get_za3lpa$(i);
      this.mesh_0.addQuadIndex_za3lpa$(idx.meshIndex);
      this.particles_0[idx.listIndex].drawIndex_8be2vx$ = i;
    }
    this.mesh_0.meshData.isSyncRequired = true;
    tmp$_3 = this.numParticles;
    for (var i_0 = 0; i_0 < tmp$_3; i_0++) {
      var drawIdx = this.particles_0[i_0].drawIndex_8be2vx$;
      if (drawIdx !== i_0) {
        this.particles_0[i_0].swap_7b27wf$(this.particles_0[drawIdx]);
      }
    }
  };
  ParticleSystem.prototype.setupSortList_0 = function () {
    var tmp$, tmp$_0, tmp$_1;
    if (this.sortedIndices_0.size < this.numParticles) {
      tmp$ = this.numParticles - this.sortedIndices_0.size | 0;
      for (var i = 1; i <= tmp$; i++) {
        this.sortedIndices_0.add_11rb$(new ParticleSystem$ParticleIndex(0, 0));
      }
    }
     else if (this.sortedIndices_0.size > this.numParticles) {
      tmp$_0 = this.sortedIndices_0.size - this.numParticles | 0;
      for (var i_0 = 1; i_0 <= tmp$_0; i_0++) {
        this.sortedIndices_0.removeAt_za3lpa$(get_lastIndex(this.sortedIndices_0));
      }
    }
    tmp$_1 = this.numParticles;
    for (var i_1 = 0; i_1 < tmp$_1; i_1++) {
      this.sortedIndices_0.get_za3lpa$(i_1).listIndex = i_1;
      this.sortedIndices_0.get_za3lpa$(i_1).meshIndex = this.particles_0[i_1].meshIndex;
    }
  };
  ParticleSystem.prototype.update_0 = function ($receiver, ctx) {
    $receiver.type.update($receiver, ctx);
    $receiver.lifeTime += ctx.deltaT;
    $receiver.position.x = $receiver.position.x + $receiver.velocity.x * ctx.deltaT;
    $receiver.position.y = $receiver.position.y + $receiver.velocity.y * ctx.deltaT;
    $receiver.position.z = $receiver.position.z + $receiver.velocity.z * ctx.deltaT;
    $receiver.rotation += $receiver.angularVelocity * ctx.deltaT;
    this.mesh_0.updateQuad_lszk0i$($receiver.meshIndex, $receiver.position, $receiver.size, $receiver.rotation, $receiver.type.texCenter, $receiver.type.texSize, $receiver.color);
    if ($receiver.lifeTime > $receiver.type.maxLifeTime) {
      $receiver.die();
    }
  };
  function ParticleSystem$ParticleIndex(meshIndex, listIndex) {
    this.meshIndex = meshIndex;
    this.listIndex = listIndex;
  }
  ParticleSystem$ParticleIndex.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ParticleIndex',
    interfaces: []
  };
  ParticleSystem$ParticleIndex.prototype.component1 = function () {
    return this.meshIndex;
  };
  ParticleSystem$ParticleIndex.prototype.component2 = function () {
    return this.listIndex;
  };
  ParticleSystem$ParticleIndex.prototype.copy_vux9f0$ = function (meshIndex, listIndex) {
    return new ParticleSystem$ParticleIndex(meshIndex === void 0 ? this.meshIndex : meshIndex, listIndex === void 0 ? this.listIndex : listIndex);
  };
  ParticleSystem$ParticleIndex.prototype.toString = function () {
    return 'ParticleIndex(meshIndex=' + Kotlin.toString(this.meshIndex) + (', listIndex=' + Kotlin.toString(this.listIndex)) + ')';
  };
  ParticleSystem$ParticleIndex.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.meshIndex) | 0;
    result = result * 31 + Kotlin.hashCode(this.listIndex) | 0;
    return result;
  };
  ParticleSystem$ParticleIndex.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.meshIndex, other.meshIndex) && Kotlin.equals(this.listIndex, other.listIndex)))));
  };
  function ParticleSystem$Type(name, texCenter, texSize, maxLifeTime, init, update) {
    if (maxLifeTime === void 0)
      maxLifeTime = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    if (update === void 0)
      update = ParticleSystem$ParticleSystem$Type_init$lambda;
    this.name = name;
    this.texCenter = texCenter;
    this.texSize = texSize;
    this.maxLifeTime = maxLifeTime;
    this.init = init;
    this.update = update;
  }
  function ParticleSystem$ParticleSystem$Type_init$lambda($receiver, it) {
    return Unit;
  }
  ParticleSystem$Type.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Type',
    interfaces: []
  };
  ParticleSystem$Type.prototype.component1 = function () {
    return this.name;
  };
  ParticleSystem$Type.prototype.component2 = function () {
    return this.texCenter;
  };
  ParticleSystem$Type.prototype.component3 = function () {
    return this.texSize;
  };
  ParticleSystem$Type.prototype.component4 = function () {
    return this.maxLifeTime;
  };
  ParticleSystem$Type.prototype.component5 = function () {
    return this.init;
  };
  ParticleSystem$Type.prototype.component6 = function () {
    return this.update;
  };
  ParticleSystem$Type.prototype.copy_6s5un6$ = function (name, texCenter, texSize, maxLifeTime, init, update) {
    return new ParticleSystem$Type(name === void 0 ? this.name : name, texCenter === void 0 ? this.texCenter : texCenter, texSize === void 0 ? this.texSize : texSize, maxLifeTime === void 0 ? this.maxLifeTime : maxLifeTime, init === void 0 ? this.init : init, update === void 0 ? this.update : update);
  };
  ParticleSystem$Type.prototype.toString = function () {
    return 'Type(name=' + Kotlin.toString(this.name) + (', texCenter=' + Kotlin.toString(this.texCenter)) + (', texSize=' + Kotlin.toString(this.texSize)) + (', maxLifeTime=' + Kotlin.toString(this.maxLifeTime)) + (', init=' + Kotlin.toString(this.init)) + (', update=' + Kotlin.toString(this.update)) + ')';
  };
  ParticleSystem$Type.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.texCenter) | 0;
    result = result * 31 + Kotlin.hashCode(this.texSize) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxLifeTime) | 0;
    result = result * 31 + Kotlin.hashCode(this.init) | 0;
    result = result * 31 + Kotlin.hashCode(this.update) | 0;
    return result;
  };
  ParticleSystem$Type.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.texCenter, other.texCenter) && Kotlin.equals(this.texSize, other.texSize) && Kotlin.equals(this.maxLifeTime, other.maxLifeTime) && Kotlin.equals(this.init, other.init) && Kotlin.equals(this.update, other.update)))));
  };
  function ParticleSystem$Particle($outer, index, type) {
    this.$outer = $outer;
    this.type_admc1e$_0 = type;
    this.meshIndex_6bf8ux$_0 = index;
    this.drawIndex_8be2vx$ = 0;
    this.lifeTime = 0.0;
    this.position = MutableVec3f_init();
    this.size = MutableVec2f_init();
    this.rotation = 0.0;
    this.color = MutableColor_init_0(Color$Companion_getInstance().WHITE);
    this.velocity = MutableVec3f_init();
    this.angularVelocity = 0.0;
  }
  Object.defineProperty(ParticleSystem$Particle.prototype, 'type', {
    get: function () {
      return this.type_admc1e$_0;
    },
    set: function (type) {
      this.type_admc1e$_0 = type;
    }
  });
  Object.defineProperty(ParticleSystem$Particle.prototype, 'meshIndex', {
    get: function () {
      return this.meshIndex_6bf8ux$_0;
    },
    set: function (meshIndex) {
      this.meshIndex_6bf8ux$_0 = meshIndex;
    }
  });
  ParticleSystem$Particle.prototype.die = function () {
    var tmp$;
    this.replaceBy_1rs1w0$(ParticleSystem$Companion_getInstance().TYPE_DEAD_0);
    if (this.$outer.numParticles > 1) {
      this.swap_7b27wf$(this.$outer.particles_0[this.$outer.numParticles - 1 | 0]);
    }
    tmp$ = this.$outer.numParticles;
    this.$outer.numParticles = tmp$ - 1 | 0;
  };
  ParticleSystem$Particle.prototype.replaceBy_1rs1w0$ = function (newType) {
    this.type = newType;
    newType.init(this);
    this.$outer.mesh_0.updateQuad_lszk0i$(this.meshIndex, this.position, this.size, this.rotation, this.type.texCenter, this.type.texSize, this.color);
  };
  ParticleSystem$Particle.prototype.swap_7b27wf$ = function (other) {
    var $receiver = other.type;
    other.type = this.type;
    this.type = $receiver;
    var $receiver_0 = other.meshIndex;
    other.meshIndex = this.meshIndex;
    this.meshIndex = $receiver_0;
    var $receiver_1 = other.drawIndex_8be2vx$;
    other.drawIndex_8be2vx$ = this.drawIndex_8be2vx$;
    this.drawIndex_8be2vx$ = $receiver_1;
    var $receiver_2 = other.lifeTime;
    other.lifeTime = this.lifeTime;
    this.lifeTime = $receiver_2;
    this.swap_0(this.position, other.position);
    this.swap_1(this.size, other.size);
    var $receiver_3 = other.rotation;
    other.rotation = this.rotation;
    this.rotation = $receiver_3;
    this.swap_2(this.color, other.color);
    this.swap_0(this.velocity, other.velocity);
    var $receiver_4 = other.angularVelocity;
    other.angularVelocity = this.angularVelocity;
    this.angularVelocity = $receiver_4;
  };
  ParticleSystem$Particle.prototype.swap_1 = function ($receiver, other) {
    var $receiver_0 = other.x;
    other.x = $receiver.x;
    $receiver.x = $receiver_0;
    var $receiver_1 = other.y;
    other.y = $receiver.y;
    $receiver.y = $receiver_1;
  };
  ParticleSystem$Particle.prototype.swap_0 = function ($receiver, other) {
    var $receiver_0 = other.x;
    other.x = $receiver.x;
    $receiver.x = $receiver_0;
    var $receiver_1 = other.y;
    other.y = $receiver.y;
    $receiver.y = $receiver_1;
    var $receiver_2 = other.z;
    other.z = $receiver.z;
    $receiver.z = $receiver_2;
  };
  ParticleSystem$Particle.prototype.swap_2 = function ($receiver, other) {
    var $receiver_0 = other.r;
    other.r = $receiver.r;
    $receiver.r = $receiver_0;
    var $receiver_1 = other.g;
    other.g = $receiver.g;
    $receiver.g = $receiver_1;
    var $receiver_2 = other.b;
    other.b = $receiver.b;
    $receiver.b = $receiver_2;
    var $receiver_3 = other.a;
    other.a = $receiver.a;
    $receiver.a = $receiver_3;
  };
  ParticleSystem$Particle.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Particle',
    interfaces: []
  };
  function ParticleSystem$Companion() {
    ParticleSystem$Companion_instance = this;
    this.TYPE_DEAD_0 = new ParticleSystem$Type('dead', Vec2f$Companion_getInstance().ZERO, Vec2f$Companion_getInstance().ZERO, void 0, ParticleSystem$Companion$TYPE_DEAD$lambda);
  }
  function ParticleSystem$Companion$TYPE_DEAD$lambda($receiver) {
    $receiver.lifeTime = 0.0;
    $receiver.position.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    $receiver.size.set_czzhjp$(Vec2f$Companion_getInstance().ZERO);
    $receiver.rotation = 0.0;
    $receiver.color.set_d7aj7k$(Color$Companion_getInstance().WHITE);
    $receiver.velocity.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    $receiver.angularVelocity = 0.0;
    return Unit;
  }
  ParticleSystem$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ParticleSystem$Companion_instance = null;
  function ParticleSystem$Companion_getInstance() {
    if (ParticleSystem$Companion_instance === null) {
      new ParticleSystem$Companion();
    }
    return ParticleSystem$Companion_instance;
  }
  ParticleSystem.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ParticleSystem',
    interfaces: [Node]
  };
  function PerfTimer() {
    this.tStart_0 = 0.0;
    this.reset();
  }
  PerfTimer.prototype.reset = function () {
    this.tStart_0 = now();
  };
  PerfTimer.prototype.takeSecs = function () {
    return this.takeMs() / 1000.0;
  };
  PerfTimer.prototype.takeMs = function () {
    return now() - this.tStart_0;
  };
  PerfTimer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PerfTimer',
    interfaces: []
  };
  var timedMs = defineInlineFunction('kool.de.fabmax.kool.util.timedMs_9vqa9e$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    var now = _.de.fabmax.kool.now;
    var util = _.de.fabmax.kool.util;
    var toString = _.de.fabmax.kool.toString_j6vyb1$;
    return function (message, tag, level, block) {
      if (tag === void 0)
        tag = 'PerfTimer';
      if (level === void 0)
        level = Log$Level.INFO;
      var t = now();
      var ret = block();
      var $this = util.Log;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message + ' ' + toString(now() - t, 3) + ' ms');
      }
      return ret;
    };
  }));
  var timedMs_0 = defineInlineFunction('kool.de.fabmax.kool.util.timedMs_v0aq7q$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    var now = _.de.fabmax.kool.now;
    var util = _.de.fabmax.kool.util;
    var toString = _.de.fabmax.kool.toString_j6vyb1$;
    return function (message, tag, level, block) {
      if (tag === void 0)
        tag = 'PerfTimer';
      if (level === void 0)
        level = Log$Level.INFO;
      var t = now();
      var ret = block();
      var $this = util.Log;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message() + ' ' + toString(now() - t, 3) + ' ms');
      }
      return ret;
    };
  }));
  var timedMs_1 = defineInlineFunction('kool.de.fabmax.kool.util.timedMs_sky27l$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    var now = _.de.fabmax.kool.now;
    var util = _.de.fabmax.kool.util;
    var toString = _.de.fabmax.kool.toString_j6vyb1$;
    return function ($receiver, message, level, block) {
      if (level === void 0)
        level = Log$Level.INFO;
      var t = now();
      var ret = block();
      var $this = util.Log;
      var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message + ' ' + toString(now() - t, 3) + ' ms');
      }
      return ret;
    };
  }));
  var timedMs_2 = defineInlineFunction('kool.de.fabmax.kool.util.timedMs_780vyl$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    var now = _.de.fabmax.kool.now;
    var util = _.de.fabmax.kool.util;
    var toString = _.de.fabmax.kool.toString_j6vyb1$;
    return function ($receiver, message, level, block) {
      if (level === void 0)
        level = Log$Level.INFO;
      var t = now();
      var ret = block();
      var $this = util.Log;
      var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message() + ' ' + toString(now() - t, 3) + ' ms');
      }
      return ret;
    };
  }));
  function pointMesh(name, block) {
    if (name === void 0)
      name = null;
    var $receiver = new PointMesh(void 0, name);
    block($receiver);
    return $receiver;
  }
  function PointMesh(data, name) {
    if (data === void 0)
      data = MeshData_init([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().COLORS]);
    if (name === void 0)
      name = null;
    Mesh.call(this, data, name);
    data.primitiveType = 0;
    this.rayTest = MeshRayTest$Companion_getInstance().nopTest();
    this.shader = basicPointShader(PointMesh_init$lambda);
    this.isXray = false;
  }
  Object.defineProperty(PointMesh.prototype, 'pointSize', {
    get: function () {
      var tmp$;
      return (Kotlin.isType(tmp$ = this.shader, BasicPointShader) ? tmp$ : throwCCE()).pointSize;
    },
    set: function (value) {
      var tmp$;
      (Kotlin.isType(tmp$ = this.shader, BasicPointShader) ? tmp$ : throwCCE()).pointSize = value;
    }
  });
  PointMesh.prototype.addPoint_hvwyd1$ = function (block) {
    var $this = this.meshData;
    $this.isSyncRequired = true;
    var $this_0 = $this.vertexList;
    var updateBounds = $this.bounds;
    var tmp$, tmp$_0, tmp$_1;
    $this_0.checkBufferSizes_za3lpa$();
    tmp$ = $this_0.vertexSizeF;
    for (var i = 1; i <= tmp$; i++) {
      $this_0.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_0 = $this_0.vertexSizeI;
    for (var i_0 = 1; i_0 <= tmp$_0; i_0++) {
      $this_0.dataI.plusAssign_za3lpa$(0);
    }
    $this_0.vertexIt.index = (tmp$_1 = $this_0.size, $this_0.size = tmp$_1 + 1 | 0, tmp$_1);
    block($this_0.vertexIt);
    updateBounds != null ? updateBounds.add_czzhiu$($this_0.vertexIt.position) : null;
    var idx = $this_0.size - 1 | 0;
    this.meshData.addIndex_za3lpa$(idx);
    return idx;
  };
  PointMesh.prototype.addPoint_4sqmhu$ = function (position, color) {
    var idx = this.meshData.addVertex_lv7vxo$(position, null, color, null);
    this.meshData.addIndex_za3lpa$(idx);
    return idx;
  };
  PointMesh.prototype.clear = function () {
    this.meshData.clear();
    this.bounds.clear();
  };
  PointMesh.prototype.render_aemszp$ = function (ctx) {
    ctx.pushAttributes();
    if (this.isXray) {
      ctx.depthFunc = 519;
    }
    ctx.applyAttributes();
    Mesh.prototype.render_aemszp$.call(this, ctx);
    ctx.popAttributes();
  };
  function PointMesh_init$lambda($receiver) {
    $receiver.colorModel = ColorModel$VERTEX_COLOR_getInstance();
    $receiver.lightModel = LightModel$NO_LIGHTING_getInstance();
    return Unit;
  }
  PointMesh.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PointMesh',
    interfaces: [Mesh]
  };
  function Comparator$ObjectLiteral_8(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_8.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_8.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  function PriorityQueue(comparator) {
    if (comparator === void 0)
      comparator = null;
    this.comparator_0 = null;
    this.elements_0 = ArrayList_init_0();
    this.comparator_0 = comparator != null ? comparator : new Comparator$ObjectLiteral_8(PriorityQueue_init$lambda);
  }
  Object.defineProperty(PriorityQueue.prototype, 'size', {
    get: function () {
      return this.elements_0.size;
    }
  });
  PriorityQueue.prototype.clear = function () {
    this.elements_0.clear();
  };
  PriorityQueue.prototype.add_11rb$ = function (element) {
    this.elements_0.add_11rb$(element);
    this.swim_0(this.size - 1 | 0);
  };
  PriorityQueue.prototype.plusAssign_11rb$ = function (element) {
    this.add_11rb$(element);
  };
  PriorityQueue.prototype.peek = function () {
    if (this.size === 0) {
      throw NoSuchElementException_init();
    }
    return this.elements_0.get_za3lpa$(0);
  };
  PriorityQueue.prototype.poll = function () {
    if (this.size === 0) {
      throw NoSuchElementException_init();
    }
    var first = this.peek();
    this.swap_0(this.elements_0, 0, get_lastIndex(this.elements_0));
    this.elements_0.removeAt_za3lpa$(get_lastIndex(this.elements_0));
    this.sink_0(0);
    return first;
  };
  PriorityQueue.prototype.swim_0 = function (n) {
    var k = n + 1 | 0;
    while (k > 1 && this.greater_0((k / 2 | 0) - 1 | 0, k - 1 | 0)) {
      this.swap_0(this.elements_0, k - 1 | 0, (k / 2 | 0) - 1 | 0);
      k = k / 2 | 0;
    }
  };
  PriorityQueue.prototype.sink_0 = function (n) {
    var k = n + 1 | 0;
    while ((2 * k | 0) <= this.size) {
      var j = 2 * k | 0;
      if (j < this.size && this.greater_0(j - 1 | 0, j)) {
        j = j + 1 | 0;
      }
      if (!this.greater_0(k - 1 | 0, j - 1 | 0)) {
        break;
      }
      this.swap_0(this.elements_0, k - 1 | 0, j - 1 | 0);
      k = j;
    }
  };
  PriorityQueue.prototype.greater_0 = function (i, j) {
    return this.comparator_0.compare(this.elements_0.get_za3lpa$(i), this.elements_0.get_za3lpa$(j)) > 0;
  };
  PriorityQueue.prototype.isEmpty = function () {
    return this.elements_0.isEmpty();
  };
  PriorityQueue.prototype.contains_11rb$ = function (element) {
    return this.elements_0.contains_11rb$(element);
  };
  PriorityQueue.prototype.containsAll_brywnq$ = function (elements) {
    return this.elements_0.containsAll_brywnq$(elements);
  };
  function PriorityQueue$iterator$ObjectLiteral(this$PriorityQueue) {
    var $receiver = new PriorityQueue(this$PriorityQueue.comparator_0);
    $receiver.elements_0.addAll_brywnq$(this$PriorityQueue.elements_0);
    this.q = $receiver;
  }
  PriorityQueue$iterator$ObjectLiteral.prototype.hasNext = function () {
    return !this.q.isEmpty();
  };
  PriorityQueue$iterator$ObjectLiteral.prototype.next = function () {
    return this.q.poll();
  };
  PriorityQueue$iterator$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [Iterator]
  };
  PriorityQueue.prototype.iterator = function () {
    return new PriorityQueue$iterator$ObjectLiteral(this);
  };
  PriorityQueue.prototype.swap_0 = function ($receiver, a, b) {
    var $receiver_0 = $receiver.get_za3lpa$(b);
    $receiver.set_wxm5ur$(b, $receiver.get_za3lpa$(a));
    $receiver.set_wxm5ur$(a, $receiver_0);
  };
  function PriorityQueue_init$lambda(a, b) {
    var tmp$;
    return Kotlin.compareTo(Kotlin.isComparable(tmp$ = a) ? tmp$ : throwCCE(), b);
  }
  PriorityQueue.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PriorityQueue',
    interfaces: [Collection]
  };
  function Property(name, value, onChange) {
    this.name = name;
    this.onChange_0 = onChange;
    this.value_7dkhmp$_0 = value;
    this.valueChanged_5x454x$_0 = true;
  }
  Object.defineProperty(Property.prototype, 'value', {
    get: function () {
      return this.value_7dkhmp$_0;
    },
    set: function (value) {
      this.value_7dkhmp$_0 = value;
    }
  });
  Object.defineProperty(Property.prototype, 'clear', {
    get: function () {
      this.valueChanged = false;
      return this.value;
    }
  });
  Object.defineProperty(Property.prototype, 'valueChanged', {
    get: function () {
      return this.valueChanged_5x454x$_0;
    },
    set: function (valueChanged) {
      this.valueChanged_5x454x$_0 = valueChanged;
    }
  });
  Property.prototype.getValue_n5byny$ = function (thisRef, property) {
    return this.value;
  };
  Property.prototype.setValue_sq4zib$ = function (thisRef, property, value) {
    if (!equals(value, this.value)) {
      this.value = value;
      this.valueChanged = true;
    }
  };
  Property.prototype.copy_lshn67$ = function (other, maintainChangeFlag) {
    var tmp$, tmp$_0, tmp$_1;
    if (maintainChangeFlag) {
      tmp$ = other.valueChanged;
    }
     else {
      tmp$ = !equals(this.value, other.value);
    }
    this.valueChanged = tmp$;
    this.value = (tmp$_1 = (tmp$_0 = other.value) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : null) != null ? tmp$_1 : this.value;
  };
  Property.prototype.applyIfChanged = function () {
    if (this.valueChanged) {
      this.onChange_0(this);
    }
  };
  Property.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Property',
    interfaces: []
  };
  function AnimationData(name, duration, channels) {
    AnimationData$Companion_getInstance();
    this.name = name;
    this.duration = duration;
    this.channels = channels;
  }
  AnimationData.prototype.getAnimation_wev6wz$ = function (nodes) {
    var anim = new Animation(this.duration);
    var tmp$;
    tmp$ = this.channels.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var node = nodes.get_11rb$(element.name);
      if (node != null) {
        var $receiver = anim.channels;
        var element_0 = element.getNodeAnimation_dm1hwa$(node);
        $receiver.add_11rb$(element_0);
      }
    }
    return anim;
  };
  function AnimationData$Companion() {
    AnimationData$Companion_instance = this;
  }
  AnimationData$Companion.prototype.serializer = function () {
    return AnimationData$$serializer_getInstance();
  };
  AnimationData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AnimationData$Companion_instance = null;
  function AnimationData$Companion_getInstance() {
    if (AnimationData$Companion_instance === null) {
      new AnimationData$Companion();
    }
    return AnimationData$Companion_instance;
  }
  function AnimationData$$serializer() {
    this.descriptor_kleob2$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.AnimationData', this);
    this.descriptor.addElement_ivxn3r$('name', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(1));
    this.descriptor.addElement_ivxn3r$('duration', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(2));
    this.descriptor.addElement_ivxn3r$('channels', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(3));
    AnimationData$$serializer_instance = this;
  }
  Object.defineProperty(AnimationData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_kleob2$_0;
    }
  });
  AnimationData$$serializer.prototype.serialize_awe97i$ = function (encoder, obj) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeStringElement_bgm7zs$(this.descriptor, 0, obj.name);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 1, obj.duration);
    output.encodeSerializableElement_blecud$(this.descriptor, 2, new ArrayListSerializer(NodeAnimationData$$serializer_getInstance()), obj.channels);
    output.endStructure_qatsm0$(this.descriptor);
  };
  AnimationData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index, readAll = false;
    var bitMask0 = 0;
    var local0
    , local1
    , local2;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case -2:
          readAll = true;
        case 0:
          local0 = input.decodeStringElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          if (!readAll)
            break;
        case 1:
          local1 = input.decodeFloatElement_3zr2iy$(this.descriptor, 1);
          bitMask0 |= 2;
          if (!readAll)
            break;
        case 2:
          local2 = (bitMask0 & 4) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 2, new ArrayListSerializer(NodeAnimationData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 2, new ArrayListSerializer(NodeAnimationData$$serializer_getInstance()), local2);
          bitMask0 |= 4;
          if (!readAll)
            break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return AnimationData_init(bitMask0, local0, local1, local2, null);
  };
  AnimationData$$serializer.prototype.childSerializers = function () {
    return [internal.StringSerializer, internal.FloatSerializer, new ArrayListSerializer(NodeAnimationData$$serializer_getInstance())];
  };
  AnimationData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var AnimationData$$serializer_instance = null;
  function AnimationData$$serializer_getInstance() {
    if (AnimationData$$serializer_instance === null) {
      new AnimationData$$serializer();
    }
    return AnimationData$$serializer_instance;
  }
  function AnimationData_init(seen1, name, duration, channels, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(AnimationData.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('name');
    else
      $this.name = name;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('duration');
    else
      $this.duration = duration;
    if ((seen1 & 4) === 0)
      throw new MissingFieldException('channels');
    else
      $this.channels = channels;
    return $this;
  }
  AnimationData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AnimationData',
    interfaces: []
  };
  AnimationData.prototype.component1 = function () {
    return this.name;
  };
  AnimationData.prototype.component2 = function () {
    return this.duration;
  };
  AnimationData.prototype.component3 = function () {
    return this.channels;
  };
  AnimationData.prototype.copy_2yxch5$ = function (name, duration, channels) {
    return new AnimationData(name === void 0 ? this.name : name, duration === void 0 ? this.duration : duration, channels === void 0 ? this.channels : channels);
  };
  AnimationData.prototype.toString = function () {
    return 'AnimationData(name=' + Kotlin.toString(this.name) + (', duration=' + Kotlin.toString(this.duration)) + (', channels=' + Kotlin.toString(this.channels)) + ')';
  };
  AnimationData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.duration) | 0;
    result = result * 31 + Kotlin.hashCode(this.channels) | 0;
    return result;
  };
  AnimationData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.duration, other.duration) && Kotlin.equals(this.channels, other.channels)))));
  };
  function NodeAnimationData(name, positionKeys, rotationKeys, scalingKeys) {
    NodeAnimationData$Companion_getInstance();
    this.name = name;
    this.positionKeys = positionKeys;
    this.rotationKeys = rotationKeys;
    this.scalingKeys = scalingKeys;
  }
  NodeAnimationData.prototype.getNodeAnimation_dm1hwa$ = function (node) {
    var nodeAnim = new NodeAnimation(this.name, node);
    var tmp$;
    tmp$ = this.positionKeys.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var $receiver = nodeAnim.positionKeys;
      var element_0 = element.getPositionKey();
      $receiver.add_11rb$(element_0);
    }
    var tmp$_0;
    tmp$_0 = this.rotationKeys.iterator();
    while (tmp$_0.hasNext()) {
      var element_1 = tmp$_0.next();
      var $receiver_0 = nodeAnim.rotationKeys;
      var element_2 = element_1.getRotationKey();
      $receiver_0.add_11rb$(element_2);
    }
    var tmp$_1;
    tmp$_1 = this.scalingKeys.iterator();
    while (tmp$_1.hasNext()) {
      var element_3 = tmp$_1.next();
      var $receiver_1 = nodeAnim.scalingKeys;
      var element_4 = element_3.getScalingKey();
      $receiver_1.add_11rb$(element_4);
    }
    return nodeAnim;
  };
  function NodeAnimationData$Companion() {
    NodeAnimationData$Companion_instance = this;
  }
  NodeAnimationData$Companion.prototype.serializer = function () {
    return NodeAnimationData$$serializer_getInstance();
  };
  NodeAnimationData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var NodeAnimationData$Companion_instance = null;
  function NodeAnimationData$Companion_getInstance() {
    if (NodeAnimationData$Companion_instance === null) {
      new NodeAnimationData$Companion();
    }
    return NodeAnimationData$Companion_instance;
  }
  function NodeAnimationData$$serializer() {
    this.descriptor_iysw7k$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.NodeAnimationData', this);
    this.descriptor.addElement_ivxn3r$('name', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(1));
    this.descriptor.addElement_ivxn3r$('positionKeys', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(2));
    this.descriptor.addElement_ivxn3r$('rotationKeys', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(3));
    this.descriptor.addElement_ivxn3r$('scalingKeys', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(4));
    NodeAnimationData$$serializer_instance = this;
  }
  Object.defineProperty(NodeAnimationData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_iysw7k$_0;
    }
  });
  NodeAnimationData$$serializer.prototype.serialize_awe97i$ = function (encoder, obj) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeStringElement_bgm7zs$(this.descriptor, 0, obj.name);
    output.encodeSerializableElement_blecud$(this.descriptor, 1, new ArrayListSerializer(Vec3KeyData$$serializer_getInstance()), obj.positionKeys);
    output.encodeSerializableElement_blecud$(this.descriptor, 2, new ArrayListSerializer(Vec4KeyData$$serializer_getInstance()), obj.rotationKeys);
    output.encodeSerializableElement_blecud$(this.descriptor, 3, new ArrayListSerializer(Vec3KeyData$$serializer_getInstance()), obj.scalingKeys);
    output.endStructure_qatsm0$(this.descriptor);
  };
  NodeAnimationData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index, readAll = false;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case -2:
          readAll = true;
        case 0:
          local0 = input.decodeStringElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          if (!readAll)
            break;
        case 1:
          local1 = (bitMask0 & 2) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 1, new ArrayListSerializer(Vec3KeyData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 1, new ArrayListSerializer(Vec3KeyData$$serializer_getInstance()), local1);
          bitMask0 |= 2;
          if (!readAll)
            break;
        case 2:
          local2 = (bitMask0 & 4) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 2, new ArrayListSerializer(Vec4KeyData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 2, new ArrayListSerializer(Vec4KeyData$$serializer_getInstance()), local2);
          bitMask0 |= 4;
          if (!readAll)
            break;
        case 3:
          local3 = (bitMask0 & 8) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 3, new ArrayListSerializer(Vec3KeyData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 3, new ArrayListSerializer(Vec3KeyData$$serializer_getInstance()), local3);
          bitMask0 |= 8;
          if (!readAll)
            break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return NodeAnimationData_init(bitMask0, local0, local1, local2, local3, null);
  };
  NodeAnimationData$$serializer.prototype.childSerializers = function () {
    return [internal.StringSerializer, new ArrayListSerializer(Vec3KeyData$$serializer_getInstance()), new ArrayListSerializer(Vec4KeyData$$serializer_getInstance()), new ArrayListSerializer(Vec3KeyData$$serializer_getInstance())];
  };
  NodeAnimationData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var NodeAnimationData$$serializer_instance = null;
  function NodeAnimationData$$serializer_getInstance() {
    if (NodeAnimationData$$serializer_instance === null) {
      new NodeAnimationData$$serializer();
    }
    return NodeAnimationData$$serializer_instance;
  }
  function NodeAnimationData_init(seen1, name, positionKeys, rotationKeys, scalingKeys, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(NodeAnimationData.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('name');
    else
      $this.name = name;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('positionKeys');
    else
      $this.positionKeys = positionKeys;
    if ((seen1 & 4) === 0)
      throw new MissingFieldException('rotationKeys');
    else
      $this.rotationKeys = rotationKeys;
    if ((seen1 & 8) === 0)
      throw new MissingFieldException('scalingKeys');
    else
      $this.scalingKeys = scalingKeys;
    return $this;
  }
  NodeAnimationData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NodeAnimationData',
    interfaces: []
  };
  NodeAnimationData.prototype.component1 = function () {
    return this.name;
  };
  NodeAnimationData.prototype.component2 = function () {
    return this.positionKeys;
  };
  NodeAnimationData.prototype.component3 = function () {
    return this.rotationKeys;
  };
  NodeAnimationData.prototype.component4 = function () {
    return this.scalingKeys;
  };
  NodeAnimationData.prototype.copy_2njh0z$ = function (name, positionKeys, rotationKeys, scalingKeys) {
    return new NodeAnimationData(name === void 0 ? this.name : name, positionKeys === void 0 ? this.positionKeys : positionKeys, rotationKeys === void 0 ? this.rotationKeys : rotationKeys, scalingKeys === void 0 ? this.scalingKeys : scalingKeys);
  };
  NodeAnimationData.prototype.toString = function () {
    return 'NodeAnimationData(name=' + Kotlin.toString(this.name) + (', positionKeys=' + Kotlin.toString(this.positionKeys)) + (', rotationKeys=' + Kotlin.toString(this.rotationKeys)) + (', scalingKeys=' + Kotlin.toString(this.scalingKeys)) + ')';
  };
  NodeAnimationData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.positionKeys) | 0;
    result = result * 31 + Kotlin.hashCode(this.rotationKeys) | 0;
    result = result * 31 + Kotlin.hashCode(this.scalingKeys) | 0;
    return result;
  };
  NodeAnimationData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.positionKeys, other.positionKeys) && Kotlin.equals(this.rotationKeys, other.rotationKeys) && Kotlin.equals(this.scalingKeys, other.scalingKeys)))));
  };
  function Vec3KeyData(time, x, y, z) {
    Vec3KeyData$Companion_getInstance();
    this.time = time;
    this.x = x;
    this.y = y;
    this.z = z;
  }
  Vec3KeyData.prototype.getPositionKey = function () {
    return new PositionKey(this.time, new Vec3f(this.x, this.y, this.z));
  };
  Vec3KeyData.prototype.getScalingKey = function () {
    return new ScalingKey(this.time, new Vec3f(this.x, this.y, this.z));
  };
  function Vec3KeyData$Companion() {
    Vec3KeyData$Companion_instance = this;
  }
  Vec3KeyData$Companion.prototype.serializer = function () {
    return Vec3KeyData$$serializer_getInstance();
  };
  Vec3KeyData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vec3KeyData$Companion_instance = null;
  function Vec3KeyData$Companion_getInstance() {
    if (Vec3KeyData$Companion_instance === null) {
      new Vec3KeyData$Companion();
    }
    return Vec3KeyData$Companion_instance;
  }
  function Vec3KeyData$$serializer() {
    this.descriptor_e85keq$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.Vec3KeyData', this);
    this.descriptor.addElement_ivxn3r$('time', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(1));
    this.descriptor.addElement_ivxn3r$('x', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(2));
    this.descriptor.addElement_ivxn3r$('y', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(3));
    this.descriptor.addElement_ivxn3r$('z', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(4));
    Vec3KeyData$$serializer_instance = this;
  }
  Object.defineProperty(Vec3KeyData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_e85keq$_0;
    }
  });
  Vec3KeyData$$serializer.prototype.serialize_awe97i$ = function (encoder, obj) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 0, obj.time);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 1, obj.x);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 2, obj.y);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 3, obj.z);
    output.endStructure_qatsm0$(this.descriptor);
  };
  Vec3KeyData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index, readAll = false;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case -2:
          readAll = true;
        case 0:
          local0 = input.decodeFloatElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          if (!readAll)
            break;
        case 1:
          local1 = input.decodeFloatElement_3zr2iy$(this.descriptor, 1);
          bitMask0 |= 2;
          if (!readAll)
            break;
        case 2:
          local2 = input.decodeFloatElement_3zr2iy$(this.descriptor, 2);
          bitMask0 |= 4;
          if (!readAll)
            break;
        case 3:
          local3 = input.decodeFloatElement_3zr2iy$(this.descriptor, 3);
          bitMask0 |= 8;
          if (!readAll)
            break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return Vec3KeyData_init(bitMask0, local0, local1, local2, local3, null);
  };
  Vec3KeyData$$serializer.prototype.childSerializers = function () {
    return [internal.FloatSerializer, internal.FloatSerializer, internal.FloatSerializer, internal.FloatSerializer];
  };
  Vec3KeyData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var Vec3KeyData$$serializer_instance = null;
  function Vec3KeyData$$serializer_getInstance() {
    if (Vec3KeyData$$serializer_instance === null) {
      new Vec3KeyData$$serializer();
    }
    return Vec3KeyData$$serializer_instance;
  }
  function Vec3KeyData_init(seen1, time, x, y, z, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(Vec3KeyData.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('time');
    else
      $this.time = time;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('x');
    else
      $this.x = x;
    if ((seen1 & 4) === 0)
      throw new MissingFieldException('y');
    else
      $this.y = y;
    if ((seen1 & 8) === 0)
      throw new MissingFieldException('z');
    else
      $this.z = z;
    return $this;
  }
  Vec3KeyData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec3KeyData',
    interfaces: []
  };
  Vec3KeyData.prototype.component1 = function () {
    return this.time;
  };
  Vec3KeyData.prototype.component2 = function () {
    return this.x;
  };
  Vec3KeyData.prototype.component3 = function () {
    return this.y;
  };
  Vec3KeyData.prototype.component4 = function () {
    return this.z;
  };
  Vec3KeyData.prototype.copy_7b5o5w$ = function (time, x, y, z) {
    return new Vec3KeyData(time === void 0 ? this.time : time, x === void 0 ? this.x : x, y === void 0 ? this.y : y, z === void 0 ? this.z : z);
  };
  Vec3KeyData.prototype.toString = function () {
    return 'Vec3KeyData(time=' + Kotlin.toString(this.time) + (', x=' + Kotlin.toString(this.x)) + (', y=' + Kotlin.toString(this.y)) + (', z=' + Kotlin.toString(this.z)) + ')';
  };
  Vec3KeyData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.time) | 0;
    result = result * 31 + Kotlin.hashCode(this.x) | 0;
    result = result * 31 + Kotlin.hashCode(this.y) | 0;
    result = result * 31 + Kotlin.hashCode(this.z) | 0;
    return result;
  };
  Vec3KeyData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.time, other.time) && Kotlin.equals(this.x, other.x) && Kotlin.equals(this.y, other.y) && Kotlin.equals(this.z, other.z)))));
  };
  function Vec4KeyData(time, x, y, z, w) {
    Vec4KeyData$Companion_getInstance();
    this.time = time;
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
  }
  Vec4KeyData.prototype.getRotationKey = function () {
    return new RotationKey(this.time, new Vec4f(this.x, this.y, this.z, this.w));
  };
  function Vec4KeyData$Companion() {
    Vec4KeyData$Companion_instance = this;
  }
  Vec4KeyData$Companion.prototype.serializer = function () {
    return Vec4KeyData$$serializer_getInstance();
  };
  Vec4KeyData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vec4KeyData$Companion_instance = null;
  function Vec4KeyData$Companion_getInstance() {
    if (Vec4KeyData$Companion_instance === null) {
      new Vec4KeyData$Companion();
    }
    return Vec4KeyData$Companion_instance;
  }
  function Vec4KeyData$$serializer() {
    this.descriptor_nk6zil$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.Vec4KeyData', this);
    this.descriptor.addElement_ivxn3r$('time', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(1));
    this.descriptor.addElement_ivxn3r$('x', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(2));
    this.descriptor.addElement_ivxn3r$('y', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(3));
    this.descriptor.addElement_ivxn3r$('z', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(4));
    this.descriptor.addElement_ivxn3r$('w', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(5));
    Vec4KeyData$$serializer_instance = this;
  }
  Object.defineProperty(Vec4KeyData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_nk6zil$_0;
    }
  });
  Vec4KeyData$$serializer.prototype.serialize_awe97i$ = function (encoder, obj) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 0, obj.time);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 1, obj.x);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 2, obj.y);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 3, obj.z);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 4, obj.w);
    output.endStructure_qatsm0$(this.descriptor);
  };
  Vec4KeyData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index, readAll = false;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3
    , local4;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case -2:
          readAll = true;
        case 0:
          local0 = input.decodeFloatElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          if (!readAll)
            break;
        case 1:
          local1 = input.decodeFloatElement_3zr2iy$(this.descriptor, 1);
          bitMask0 |= 2;
          if (!readAll)
            break;
        case 2:
          local2 = input.decodeFloatElement_3zr2iy$(this.descriptor, 2);
          bitMask0 |= 4;
          if (!readAll)
            break;
        case 3:
          local3 = input.decodeFloatElement_3zr2iy$(this.descriptor, 3);
          bitMask0 |= 8;
          if (!readAll)
            break;
        case 4:
          local4 = input.decodeFloatElement_3zr2iy$(this.descriptor, 4);
          bitMask0 |= 16;
          if (!readAll)
            break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return Vec4KeyData_init(bitMask0, local0, local1, local2, local3, local4, null);
  };
  Vec4KeyData$$serializer.prototype.childSerializers = function () {
    return [internal.FloatSerializer, internal.FloatSerializer, internal.FloatSerializer, internal.FloatSerializer, internal.FloatSerializer];
  };
  Vec4KeyData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var Vec4KeyData$$serializer_instance = null;
  function Vec4KeyData$$serializer_getInstance() {
    if (Vec4KeyData$$serializer_instance === null) {
      new Vec4KeyData$$serializer();
    }
    return Vec4KeyData$$serializer_instance;
  }
  function Vec4KeyData_init(seen1, time, x, y, z, w, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(Vec4KeyData.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('time');
    else
      $this.time = time;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('x');
    else
      $this.x = x;
    if ((seen1 & 4) === 0)
      throw new MissingFieldException('y');
    else
      $this.y = y;
    if ((seen1 & 8) === 0)
      throw new MissingFieldException('z');
    else
      $this.z = z;
    if ((seen1 & 16) === 0)
      throw new MissingFieldException('w');
    else
      $this.w = w;
    return $this;
  }
  Vec4KeyData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec4KeyData',
    interfaces: []
  };
  Vec4KeyData.prototype.component1 = function () {
    return this.time;
  };
  Vec4KeyData.prototype.component2 = function () {
    return this.x;
  };
  Vec4KeyData.prototype.component3 = function () {
    return this.y;
  };
  Vec4KeyData.prototype.component4 = function () {
    return this.z;
  };
  Vec4KeyData.prototype.component5 = function () {
    return this.w;
  };
  Vec4KeyData.prototype.copy_s2l86p$ = function (time, x, y, z, w) {
    return new Vec4KeyData(time === void 0 ? this.time : time, x === void 0 ? this.x : x, y === void 0 ? this.y : y, z === void 0 ? this.z : z, w === void 0 ? this.w : w);
  };
  Vec4KeyData.prototype.toString = function () {
    return 'Vec4KeyData(time=' + Kotlin.toString(this.time) + (', x=' + Kotlin.toString(this.x)) + (', y=' + Kotlin.toString(this.y)) + (', z=' + Kotlin.toString(this.z)) + (', w=' + Kotlin.toString(this.w)) + ')';
  };
  Vec4KeyData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.time) | 0;
    result = result * 31 + Kotlin.hashCode(this.x) | 0;
    result = result * 31 + Kotlin.hashCode(this.y) | 0;
    result = result * 31 + Kotlin.hashCode(this.z) | 0;
    result = result * 31 + Kotlin.hashCode(this.w) | 0;
    return result;
  };
  Vec4KeyData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.time, other.time) && Kotlin.equals(this.x, other.x) && Kotlin.equals(this.y, other.y) && Kotlin.equals(this.z, other.z) && Kotlin.equals(this.w, other.w)))));
  };
  function BoneData(name, parent, children, offsetMatrix, vertexIds, vertexWeights) {
    BoneData$Companion_getInstance();
    if (children === void 0)
      children = emptyList();
    this.name = name;
    this.parent = parent;
    this.children = children;
    this.offsetMatrix = offsetMatrix;
    this.vertexIds = vertexIds;
    this.vertexWeights = vertexWeights;
  }
  function BoneData$Companion() {
    BoneData$Companion_instance = this;
  }
  BoneData$Companion.prototype.serializer = function () {
    return BoneData$$serializer_getInstance();
  };
  BoneData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var BoneData$Companion_instance = null;
  function BoneData$Companion_getInstance() {
    if (BoneData$Companion_instance === null) {
      new BoneData$Companion();
    }
    return BoneData$Companion_instance;
  }
  function BoneData$$serializer() {
    this.descriptor_kdtvdg$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.BoneData', this);
    this.descriptor.addElement_ivxn3r$('name', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(1));
    this.descriptor.addElement_ivxn3r$('parent', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(2));
    this.descriptor.addElement_ivxn3r$('children', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(3));
    this.descriptor.addElement_ivxn3r$('offsetMatrix', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(4));
    this.descriptor.addElement_ivxn3r$('vertexIds', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(5));
    this.descriptor.addElement_ivxn3r$('vertexWeights', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(6));
    BoneData$$serializer_instance = this;
  }
  Object.defineProperty(BoneData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_kdtvdg$_0;
    }
  });
  BoneData$$serializer.prototype.serialize_awe97i$ = function (encoder, obj) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeStringElement_bgm7zs$(this.descriptor, 0, obj.name);
    output.encodeStringElement_bgm7zs$(this.descriptor, 1, obj.parent);
    if (!equals(obj.children, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 2))
      output.encodeSerializableElement_blecud$(this.descriptor, 2, new ArrayListSerializer(internal.StringSerializer), obj.children);
    output.encodeSerializableElement_blecud$(this.descriptor, 3, new ArrayListSerializer(internal.FloatSerializer), obj.offsetMatrix);
    output.encodeSerializableElement_blecud$(this.descriptor, 4, new ArrayListSerializer(internal.IntSerializer), obj.vertexIds);
    output.encodeSerializableElement_blecud$(this.descriptor, 5, new ArrayListSerializer(internal.FloatSerializer), obj.vertexWeights);
    output.endStructure_qatsm0$(this.descriptor);
  };
  BoneData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index, readAll = false;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3
    , local4
    , local5;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case -2:
          readAll = true;
        case 0:
          local0 = input.decodeStringElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          if (!readAll)
            break;
        case 1:
          local1 = input.decodeStringElement_3zr2iy$(this.descriptor, 1);
          bitMask0 |= 2;
          if (!readAll)
            break;
        case 2:
          local2 = (bitMask0 & 4) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 2, new ArrayListSerializer(internal.StringSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 2, new ArrayListSerializer(internal.StringSerializer), local2);
          bitMask0 |= 4;
          if (!readAll)
            break;
        case 3:
          local3 = (bitMask0 & 8) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 3, new ArrayListSerializer(internal.FloatSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 3, new ArrayListSerializer(internal.FloatSerializer), local3);
          bitMask0 |= 8;
          if (!readAll)
            break;
        case 4:
          local4 = (bitMask0 & 16) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 4, new ArrayListSerializer(internal.IntSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 4, new ArrayListSerializer(internal.IntSerializer), local4);
          bitMask0 |= 16;
          if (!readAll)
            break;
        case 5:
          local5 = (bitMask0 & 32) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 5, new ArrayListSerializer(internal.FloatSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 5, new ArrayListSerializer(internal.FloatSerializer), local5);
          bitMask0 |= 32;
          if (!readAll)
            break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return BoneData_init(bitMask0, local0, local1, local2, local3, local4, local5, null);
  };
  BoneData$$serializer.prototype.childSerializers = function () {
    return [internal.StringSerializer, internal.StringSerializer, new ArrayListSerializer(internal.StringSerializer), new ArrayListSerializer(internal.FloatSerializer), new ArrayListSerializer(internal.IntSerializer), new ArrayListSerializer(internal.FloatSerializer)];
  };
  BoneData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var BoneData$$serializer_instance = null;
  function BoneData$$serializer_getInstance() {
    if (BoneData$$serializer_instance === null) {
      new BoneData$$serializer();
    }
    return BoneData$$serializer_instance;
  }
  function BoneData_init(seen1, name, parent, children, offsetMatrix, vertexIds, vertexWeights, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(BoneData.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('name');
    else
      $this.name = name;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('parent');
    else
      $this.parent = parent;
    if ((seen1 & 4) === 0)
      $this.children = emptyList();
    else
      $this.children = children;
    if ((seen1 & 8) === 0)
      throw new MissingFieldException('offsetMatrix');
    else
      $this.offsetMatrix = offsetMatrix;
    if ((seen1 & 16) === 0)
      throw new MissingFieldException('vertexIds');
    else
      $this.vertexIds = vertexIds;
    if ((seen1 & 32) === 0)
      throw new MissingFieldException('vertexWeights');
    else
      $this.vertexWeights = vertexWeights;
    return $this;
  }
  BoneData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BoneData',
    interfaces: []
  };
  BoneData.prototype.component1 = function () {
    return this.name;
  };
  BoneData.prototype.component2 = function () {
    return this.parent;
  };
  BoneData.prototype.component3 = function () {
    return this.children;
  };
  BoneData.prototype.component4 = function () {
    return this.offsetMatrix;
  };
  BoneData.prototype.component5 = function () {
    return this.vertexIds;
  };
  BoneData.prototype.component6 = function () {
    return this.vertexWeights;
  };
  BoneData.prototype.copy_n6d2h0$ = function (name, parent, children, offsetMatrix, vertexIds, vertexWeights) {
    return new BoneData(name === void 0 ? this.name : name, parent === void 0 ? this.parent : parent, children === void 0 ? this.children : children, offsetMatrix === void 0 ? this.offsetMatrix : offsetMatrix, vertexIds === void 0 ? this.vertexIds : vertexIds, vertexWeights === void 0 ? this.vertexWeights : vertexWeights);
  };
  BoneData.prototype.toString = function () {
    return 'BoneData(name=' + Kotlin.toString(this.name) + (', parent=' + Kotlin.toString(this.parent)) + (', children=' + Kotlin.toString(this.children)) + (', offsetMatrix=' + Kotlin.toString(this.offsetMatrix)) + (', vertexIds=' + Kotlin.toString(this.vertexIds)) + (', vertexWeights=' + Kotlin.toString(this.vertexWeights)) + ')';
  };
  BoneData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.parent) | 0;
    result = result * 31 + Kotlin.hashCode(this.children) | 0;
    result = result * 31 + Kotlin.hashCode(this.offsetMatrix) | 0;
    result = result * 31 + Kotlin.hashCode(this.vertexIds) | 0;
    result = result * 31 + Kotlin.hashCode(this.vertexWeights) | 0;
    return result;
  };
  BoneData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.parent, other.parent) && Kotlin.equals(this.children, other.children) && Kotlin.equals(this.offsetMatrix, other.offsetMatrix) && Kotlin.equals(this.vertexIds, other.vertexIds) && Kotlin.equals(this.vertexWeights, other.vertexWeights)))));
  };
  function MaterialData(name, ambientColor, diffuseColor, specularColor, emissiveColor, shininess, reflectivity) {
    MaterialData$Companion_getInstance();
    if (name === void 0)
      name = '';
    if (ambientColor === void 0)
      ambientColor = emptyList();
    if (diffuseColor === void 0)
      diffuseColor = emptyList();
    if (specularColor === void 0)
      specularColor = emptyList();
    if (emissiveColor === void 0)
      emissiveColor = emptyList();
    if (shininess === void 0)
      shininess = 10.0;
    if (reflectivity === void 0)
      reflectivity = 0.0;
    this.name = name;
    this.ambientColor = ambientColor;
    this.diffuseColor = diffuseColor;
    this.specularColor = specularColor;
    this.emissiveColor = emissiveColor;
    this.shininess = shininess;
    this.reflectivity = reflectivity;
  }
  MaterialData.prototype.getAmbientColor_b0h0gw$ = function (result) {
    if (result === void 0)
      result = MutableColor_init();
    return this.getColor_0(this.ambientColor, result);
  };
  MaterialData.prototype.getDiffuseColor_b0h0gw$ = function (result) {
    if (result === void 0)
      result = MutableColor_init();
    return this.getColor_0(this.diffuseColor, result);
  };
  MaterialData.prototype.getSpecularColor_b0h0gw$ = function (result) {
    if (result === void 0)
      result = MutableColor_init();
    return this.getColor_0(this.specularColor, result);
  };
  MaterialData.prototype.getEmissiveColor_b0h0gw$ = function (result) {
    if (result === void 0)
      result = MutableColor_init();
    return this.getColor_0(this.emissiveColor, result);
  };
  MaterialData.prototype.getColor_0 = function ($receiver, result) {
    if ($receiver.isEmpty())
      result.set_d7aj7k$(Color$Companion_getInstance().GRAY);
    else if ($receiver.size === 3)
      result.set_7b5o5w$($receiver.get_za3lpa$(0), $receiver.get_za3lpa$(1), $receiver.get_za3lpa$(2), 1.0);
    else if ($receiver.size === 4)
      result.set_7b5o5w$($receiver.get_za3lpa$(0), $receiver.get_za3lpa$(1), $receiver.get_za3lpa$(2), $receiver.get_za3lpa$(3));
    return result;
  };
  function MaterialData$Companion() {
    MaterialData$Companion_instance = this;
  }
  MaterialData$Companion.prototype.serializer = function () {
    return MaterialData$$serializer_getInstance();
  };
  MaterialData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MaterialData$Companion_instance = null;
  function MaterialData$Companion_getInstance() {
    if (MaterialData$Companion_instance === null) {
      new MaterialData$Companion();
    }
    return MaterialData$Companion_instance;
  }
  function MaterialData$$serializer() {
    this.descriptor_tygdqh$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.MaterialData', this);
    this.descriptor.addElement_ivxn3r$('name', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(1));
    this.descriptor.addElement_ivxn3r$('ambientColor', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(2));
    this.descriptor.addElement_ivxn3r$('diffuseColor', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(3));
    this.descriptor.addElement_ivxn3r$('specularColor', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(4));
    this.descriptor.addElement_ivxn3r$('emissiveColor', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(5));
    this.descriptor.addElement_ivxn3r$('shininess', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(6));
    this.descriptor.addElement_ivxn3r$('reflectivity', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(7));
    MaterialData$$serializer_instance = this;
  }
  Object.defineProperty(MaterialData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_tygdqh$_0;
    }
  });
  MaterialData$$serializer.prototype.serialize_awe97i$ = function (encoder, obj) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    if (!equals(obj.name, '') || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 0))
      output.encodeStringElement_bgm7zs$(this.descriptor, 0, obj.name);
    if (!equals(obj.ambientColor, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 1))
      output.encodeSerializableElement_blecud$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer), obj.ambientColor);
    if (!equals(obj.diffuseColor, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 2))
      output.encodeSerializableElement_blecud$(this.descriptor, 2, new ArrayListSerializer(internal.FloatSerializer), obj.diffuseColor);
    if (!equals(obj.specularColor, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 3))
      output.encodeSerializableElement_blecud$(this.descriptor, 3, new ArrayListSerializer(internal.FloatSerializer), obj.specularColor);
    if (!equals(obj.emissiveColor, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 4))
      output.encodeSerializableElement_blecud$(this.descriptor, 4, new ArrayListSerializer(internal.FloatSerializer), obj.emissiveColor);
    if (!equals(obj.shininess, 10.0) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 5))
      output.encodeFloatElement_t7qhdx$(this.descriptor, 5, obj.shininess);
    if (!equals(obj.reflectivity, 0.0) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 6))
      output.encodeFloatElement_t7qhdx$(this.descriptor, 6, obj.reflectivity);
    output.endStructure_qatsm0$(this.descriptor);
  };
  MaterialData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index, readAll = false;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3
    , local4
    , local5
    , local6;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case -2:
          readAll = true;
        case 0:
          local0 = input.decodeStringElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          if (!readAll)
            break;
        case 1:
          local1 = (bitMask0 & 2) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer), local1);
          bitMask0 |= 2;
          if (!readAll)
            break;
        case 2:
          local2 = (bitMask0 & 4) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 2, new ArrayListSerializer(internal.FloatSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 2, new ArrayListSerializer(internal.FloatSerializer), local2);
          bitMask0 |= 4;
          if (!readAll)
            break;
        case 3:
          local3 = (bitMask0 & 8) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 3, new ArrayListSerializer(internal.FloatSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 3, new ArrayListSerializer(internal.FloatSerializer), local3);
          bitMask0 |= 8;
          if (!readAll)
            break;
        case 4:
          local4 = (bitMask0 & 16) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 4, new ArrayListSerializer(internal.FloatSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 4, new ArrayListSerializer(internal.FloatSerializer), local4);
          bitMask0 |= 16;
          if (!readAll)
            break;
        case 5:
          local5 = input.decodeFloatElement_3zr2iy$(this.descriptor, 5);
          bitMask0 |= 32;
          if (!readAll)
            break;
        case 6:
          local6 = input.decodeFloatElement_3zr2iy$(this.descriptor, 6);
          bitMask0 |= 64;
          if (!readAll)
            break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return MaterialData_init(bitMask0, local0, local1, local2, local3, local4, local5, local6, null);
  };
  MaterialData$$serializer.prototype.childSerializers = function () {
    return [internal.StringSerializer, new ArrayListSerializer(internal.FloatSerializer), new ArrayListSerializer(internal.FloatSerializer), new ArrayListSerializer(internal.FloatSerializer), new ArrayListSerializer(internal.FloatSerializer), internal.FloatSerializer, internal.FloatSerializer];
  };
  MaterialData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var MaterialData$$serializer_instance = null;
  function MaterialData$$serializer_getInstance() {
    if (MaterialData$$serializer_instance === null) {
      new MaterialData$$serializer();
    }
    return MaterialData$$serializer_instance;
  }
  function MaterialData_init(seen1, name, ambientColor, diffuseColor, specularColor, emissiveColor, shininess, reflectivity, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(MaterialData.prototype);
    if ((seen1 & 1) === 0)
      $this.name = '';
    else
      $this.name = name;
    if ((seen1 & 2) === 0)
      $this.ambientColor = emptyList();
    else
      $this.ambientColor = ambientColor;
    if ((seen1 & 4) === 0)
      $this.diffuseColor = emptyList();
    else
      $this.diffuseColor = diffuseColor;
    if ((seen1 & 8) === 0)
      $this.specularColor = emptyList();
    else
      $this.specularColor = specularColor;
    if ((seen1 & 16) === 0)
      $this.emissiveColor = emptyList();
    else
      $this.emissiveColor = emissiveColor;
    if ((seen1 & 32) === 0)
      $this.shininess = 10.0;
    else
      $this.shininess = shininess;
    if ((seen1 & 64) === 0)
      $this.reflectivity = 0.0;
    else
      $this.reflectivity = reflectivity;
    return $this;
  }
  MaterialData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MaterialData',
    interfaces: []
  };
  MaterialData.prototype.component1 = function () {
    return this.name;
  };
  MaterialData.prototype.component2 = function () {
    return this.ambientColor;
  };
  MaterialData.prototype.component3 = function () {
    return this.diffuseColor;
  };
  MaterialData.prototype.component4 = function () {
    return this.specularColor;
  };
  MaterialData.prototype.component5 = function () {
    return this.emissiveColor;
  };
  MaterialData.prototype.component6 = function () {
    return this.shininess;
  };
  MaterialData.prototype.component7 = function () {
    return this.reflectivity;
  };
  MaterialData.prototype.copy_y5640y$ = function (name, ambientColor, diffuseColor, specularColor, emissiveColor, shininess, reflectivity) {
    return new MaterialData(name === void 0 ? this.name : name, ambientColor === void 0 ? this.ambientColor : ambientColor, diffuseColor === void 0 ? this.diffuseColor : diffuseColor, specularColor === void 0 ? this.specularColor : specularColor, emissiveColor === void 0 ? this.emissiveColor : emissiveColor, shininess === void 0 ? this.shininess : shininess, reflectivity === void 0 ? this.reflectivity : reflectivity);
  };
  MaterialData.prototype.toString = function () {
    return 'MaterialData(name=' + Kotlin.toString(this.name) + (', ambientColor=' + Kotlin.toString(this.ambientColor)) + (', diffuseColor=' + Kotlin.toString(this.diffuseColor)) + (', specularColor=' + Kotlin.toString(this.specularColor)) + (', emissiveColor=' + Kotlin.toString(this.emissiveColor)) + (', shininess=' + Kotlin.toString(this.shininess)) + (', reflectivity=' + Kotlin.toString(this.reflectivity)) + ')';
  };
  MaterialData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.ambientColor) | 0;
    result = result * 31 + Kotlin.hashCode(this.diffuseColor) | 0;
    result = result * 31 + Kotlin.hashCode(this.specularColor) | 0;
    result = result * 31 + Kotlin.hashCode(this.emissiveColor) | 0;
    result = result * 31 + Kotlin.hashCode(this.shininess) | 0;
    result = result * 31 + Kotlin.hashCode(this.reflectivity) | 0;
    return result;
  };
  MaterialData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.ambientColor, other.ambientColor) && Kotlin.equals(this.diffuseColor, other.diffuseColor) && Kotlin.equals(this.specularColor, other.specularColor) && Kotlin.equals(this.emissiveColor, other.emissiveColor) && Kotlin.equals(this.shininess, other.shininess) && Kotlin.equals(this.reflectivity, other.reflectivity)))));
  };
  function ModelData(version, name, meshes, lodRootNodes, materials) {
    ModelData$Companion_getInstance();
    if (name === void 0)
      name = '';
    if (materials === void 0)
      materials = emptyList();
    this.version = version;
    this.name = name;
    this.meshes = meshes;
    this.lodRootNodes = lodRootNodes;
    this.materials = materials;
  }
  function ModelData$toModel$lambda(it) {
    return (new TransformGroup(it.name)).set_d4zu6j$(it.getTransformMatrix_d4zu6j$());
  }
  function ModelData$toModel$lambda_0(this$ModelData) {
    return function (it) {
      return it.toMesh_8p8ifh$(this$ModelData);
    };
  }
  ModelData.prototype.toModel_za3lpa$ = function (lod) {
    if (lod === void 0)
      lod = 0;
    return this.toModel_9ydiig$(lod, ModelData$toModel$lambda, ModelData$toModel$lambda_0(this));
  };
  ModelData.prototype.toModel_9ydiig$ = function (lod, nodeMapper, meshMapper) {
    return this.toGroup_0(this.lodRootNodes.get_za3lpa$(lod), nodeMapper, meshMapper);
  };
  ModelData.prototype.toGroup_0 = function ($receiver, nodeMapper, meshMapper) {
    var tmp$, tmp$_0;
    var group = nodeMapper($receiver);
    tmp$ = $receiver.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      group.plusAssign_f1kmr1$(this.toGroup_0(child, nodeMapper, meshMapper));
    }
    tmp$_0 = $receiver.meshes.iterator();
    while (tmp$_0.hasNext()) {
      var meshIdx = tmp$_0.next();
      if (get_indices(this.meshes).contains_mef7kx$(meshIdx)) {
        var mesh = meshMapper(this.meshes.get_za3lpa$(meshIdx));
        if (mesh != null) {
          group.plusAssign_f1kmr1$(mesh);
        }
      }
       else {
        var $this = package$util.Log;
        var level = Log$Level.ERROR;
        var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
        if (level.level >= $this.level.level) {
          $this.printer(level, tag, 'Invalid mesh index: ' + meshIdx);
        }
      }
    }
    if (!$receiver.tags.isEmpty()) {
      var tmp$_1;
      tmp$_1 = $receiver.tags.iterator();
      while (tmp$_1.hasNext()) {
        var element = tmp$_1.next();
        group.tags.plusAssign_61zpoe$(element);
      }
    }
    return group;
  };
  function ModelData$Companion() {
    ModelData$Companion_instance = this;
    this.VERSION = 2;
  }
  ModelData$Companion.prototype.load_fqrh44$ = function (data) {
    var $receiver = ProtoBuf.Companion;
    var model = $receiver.load_dntfbn$(getOrDefault($receiver.context, getKClass(ModelData)), data);
    if (model.version !== 2) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Unsupported model version: ' + model.version + ' (should be ' + '2' + ')');
      }
    }
    return model;
  };
  ModelData$Companion.prototype.serializer = function () {
    return ModelData$$serializer_getInstance();
  };
  ModelData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ModelData$Companion_instance = null;
  function ModelData$Companion_getInstance() {
    if (ModelData$Companion_instance === null) {
      new ModelData$Companion();
    }
    return ModelData$Companion_instance;
  }
  function ModelData$$serializer() {
    this.descriptor_mny3o7$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.ModelData', this);
    this.descriptor.addElement_ivxn3r$('version', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(1));
    this.descriptor.addElement_ivxn3r$('name', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(5));
    this.descriptor.addElement_ivxn3r$('meshes', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(2));
    this.descriptor.addElement_ivxn3r$('lodRootNodes', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(3));
    this.descriptor.addElement_ivxn3r$('materials', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(4));
    ModelData$$serializer_instance = this;
  }
  Object.defineProperty(ModelData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_mny3o7$_0;
    }
  });
  ModelData$$serializer.prototype.serialize_awe97i$ = function (encoder, obj) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeIntElement_4wpqag$(this.descriptor, 0, obj.version);
    if (!equals(obj.name, '') || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 1))
      output.encodeStringElement_bgm7zs$(this.descriptor, 1, obj.name);
    output.encodeSerializableElement_blecud$(this.descriptor, 2, new ArrayListSerializer(ModelMeshData$$serializer_getInstance()), obj.meshes);
    output.encodeSerializableElement_blecud$(this.descriptor, 3, new ArrayListSerializer(ModelNodeData$$serializer_getInstance()), obj.lodRootNodes);
    if (!equals(obj.materials, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 4))
      output.encodeSerializableElement_blecud$(this.descriptor, 4, new ArrayListSerializer(MaterialData$$serializer_getInstance()), obj.materials);
    output.endStructure_qatsm0$(this.descriptor);
  };
  ModelData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index, readAll = false;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3
    , local4;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case -2:
          readAll = true;
        case 0:
          local0 = input.decodeIntElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          if (!readAll)
            break;
        case 1:
          local1 = input.decodeStringElement_3zr2iy$(this.descriptor, 1);
          bitMask0 |= 2;
          if (!readAll)
            break;
        case 2:
          local2 = (bitMask0 & 4) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 2, new ArrayListSerializer(ModelMeshData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 2, new ArrayListSerializer(ModelMeshData$$serializer_getInstance()), local2);
          bitMask0 |= 4;
          if (!readAll)
            break;
        case 3:
          local3 = (bitMask0 & 8) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 3, new ArrayListSerializer(ModelNodeData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 3, new ArrayListSerializer(ModelNodeData$$serializer_getInstance()), local3);
          bitMask0 |= 8;
          if (!readAll)
            break;
        case 4:
          local4 = (bitMask0 & 16) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 4, new ArrayListSerializer(MaterialData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 4, new ArrayListSerializer(MaterialData$$serializer_getInstance()), local4);
          bitMask0 |= 16;
          if (!readAll)
            break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return ModelData_init(bitMask0, local0, local1, local2, local3, local4, null);
  };
  ModelData$$serializer.prototype.childSerializers = function () {
    return [internal.IntSerializer, internal.StringSerializer, new ArrayListSerializer(ModelMeshData$$serializer_getInstance()), new ArrayListSerializer(ModelNodeData$$serializer_getInstance()), new ArrayListSerializer(MaterialData$$serializer_getInstance())];
  };
  ModelData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var ModelData$$serializer_instance = null;
  function ModelData$$serializer_getInstance() {
    if (ModelData$$serializer_instance === null) {
      new ModelData$$serializer();
    }
    return ModelData$$serializer_instance;
  }
  function ModelData_init(seen1, version, name, meshes, lodRootNodes, materials, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(ModelData.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('version');
    else
      $this.version = version;
    if ((seen1 & 2) === 0)
      $this.name = '';
    else
      $this.name = name;
    if ((seen1 & 4) === 0)
      throw new MissingFieldException('meshes');
    else
      $this.meshes = meshes;
    if ((seen1 & 8) === 0)
      throw new MissingFieldException('lodRootNodes');
    else
      $this.lodRootNodes = lodRootNodes;
    if ((seen1 & 16) === 0)
      $this.materials = emptyList();
    else
      $this.materials = materials;
    return $this;
  }
  ModelData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelData',
    interfaces: []
  };
  ModelData.prototype.component1 = function () {
    return this.version;
  };
  ModelData.prototype.component2 = function () {
    return this.name;
  };
  ModelData.prototype.component3 = function () {
    return this.meshes;
  };
  ModelData.prototype.component4 = function () {
    return this.lodRootNodes;
  };
  ModelData.prototype.component5 = function () {
    return this.materials;
  };
  ModelData.prototype.copy_1zs07a$ = function (version, name, meshes, lodRootNodes, materials) {
    return new ModelData(version === void 0 ? this.version : version, name === void 0 ? this.name : name, meshes === void 0 ? this.meshes : meshes, lodRootNodes === void 0 ? this.lodRootNodes : lodRootNodes, materials === void 0 ? this.materials : materials);
  };
  ModelData.prototype.toString = function () {
    return 'ModelData(version=' + Kotlin.toString(this.version) + (', name=' + Kotlin.toString(this.name)) + (', meshes=' + Kotlin.toString(this.meshes)) + (', lodRootNodes=' + Kotlin.toString(this.lodRootNodes)) + (', materials=' + Kotlin.toString(this.materials)) + ')';
  };
  ModelData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.version) | 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.meshes) | 0;
    result = result * 31 + Kotlin.hashCode(this.lodRootNodes) | 0;
    result = result * 31 + Kotlin.hashCode(this.materials) | 0;
    return result;
  };
  ModelData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.version, other.version) && Kotlin.equals(this.name, other.name) && Kotlin.equals(this.meshes, other.meshes) && Kotlin.equals(this.lodRootNodes, other.lodRootNodes) && Kotlin.equals(this.materials, other.materials)))));
  };
  function ModelNodeData(name, transform, children, meshes, tags) {
    ModelNodeData$Companion_getInstance();
    if (children === void 0)
      children = emptyList();
    if (meshes === void 0)
      meshes = emptyList();
    if (tags === void 0)
      tags = emptyList();
    this.name = name;
    this.transform = transform;
    this.children = children;
    this.meshes = meshes;
    this.tags = tags;
  }
  ModelNodeData.prototype.getTransformMatrix_d4zu6j$ = function (result) {
    if (result === void 0)
      result = new Mat4f();
    return result.set_hcyabg$(this.transform);
  };
  ModelNodeData.prototype.printNodeHierarchy_5d1dlw$ = function (model, indent) {
    if (indent === void 0)
      indent = '';
    println_0(indent + '+' + this.name);
    var tmp$;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.printNodeHierarchy_5d1dlw$(model, indent + '  ');
    }
    var tmp$_0;
    tmp$_0 = this.meshes.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      println_0(indent + '  -' + model.meshes.get_za3lpa$(element_0).name);
    }
  };
  ModelNodeData.prototype.countMeshesBelow = function () {
    var tmp$ = this.meshes.size;
    var tmp$_0;
    var sum = 0;
    tmp$_0 = this.children.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      sum = sum + element.countMeshesBelow() | 0;
    }
    return tmp$ + sum | 0;
  };
  function ModelNodeData$Companion() {
    ModelNodeData$Companion_instance = this;
  }
  ModelNodeData$Companion.prototype.serializer = function () {
    return ModelNodeData$$serializer_getInstance();
  };
  ModelNodeData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ModelNodeData$Companion_instance = null;
  function ModelNodeData$Companion_getInstance() {
    if (ModelNodeData$Companion_instance === null) {
      new ModelNodeData$Companion();
    }
    return ModelNodeData$Companion_instance;
  }
  function ModelNodeData$$serializer() {
    this.descriptor_q2xdmh$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.ModelNodeData', this);
    this.descriptor.addElement_ivxn3r$('name', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(1));
    this.descriptor.addElement_ivxn3r$('transform', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(2));
    this.descriptor.addElement_ivxn3r$('children', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(3));
    this.descriptor.addElement_ivxn3r$('meshes', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(4));
    this.descriptor.addElement_ivxn3r$('tags', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(5));
    ModelNodeData$$serializer_instance = this;
  }
  Object.defineProperty(ModelNodeData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_q2xdmh$_0;
    }
  });
  ModelNodeData$$serializer.prototype.serialize_awe97i$ = function (encoder, obj) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeStringElement_bgm7zs$(this.descriptor, 0, obj.name);
    output.encodeSerializableElement_blecud$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer), obj.transform);
    if (!equals(obj.children, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 2))
      output.encodeSerializableElement_blecud$(this.descriptor, 2, new ArrayListSerializer(ModelNodeData$$serializer_getInstance()), obj.children);
    if (!equals(obj.meshes, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 3))
      output.encodeSerializableElement_blecud$(this.descriptor, 3, new ArrayListSerializer(internal.IntSerializer), obj.meshes);
    if (!equals(obj.tags, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 4))
      output.encodeSerializableElement_blecud$(this.descriptor, 4, new ArrayListSerializer(internal.StringSerializer), obj.tags);
    output.endStructure_qatsm0$(this.descriptor);
  };
  ModelNodeData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index, readAll = false;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3
    , local4;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case -2:
          readAll = true;
        case 0:
          local0 = input.decodeStringElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          if (!readAll)
            break;
        case 1:
          local1 = (bitMask0 & 2) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer), local1);
          bitMask0 |= 2;
          if (!readAll)
            break;
        case 2:
          local2 = (bitMask0 & 4) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 2, new ArrayListSerializer(ModelNodeData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 2, new ArrayListSerializer(ModelNodeData$$serializer_getInstance()), local2);
          bitMask0 |= 4;
          if (!readAll)
            break;
        case 3:
          local3 = (bitMask0 & 8) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 3, new ArrayListSerializer(internal.IntSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 3, new ArrayListSerializer(internal.IntSerializer), local3);
          bitMask0 |= 8;
          if (!readAll)
            break;
        case 4:
          local4 = (bitMask0 & 16) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 4, new ArrayListSerializer(internal.StringSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 4, new ArrayListSerializer(internal.StringSerializer), local4);
          bitMask0 |= 16;
          if (!readAll)
            break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return ModelNodeData_init(bitMask0, local0, local1, local2, local3, local4, null);
  };
  ModelNodeData$$serializer.prototype.childSerializers = function () {
    return [internal.StringSerializer, new ArrayListSerializer(internal.FloatSerializer), new ArrayListSerializer(ModelNodeData$$serializer_getInstance()), new ArrayListSerializer(internal.IntSerializer), new ArrayListSerializer(internal.StringSerializer)];
  };
  ModelNodeData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var ModelNodeData$$serializer_instance = null;
  function ModelNodeData$$serializer_getInstance() {
    if (ModelNodeData$$serializer_instance === null) {
      new ModelNodeData$$serializer();
    }
    return ModelNodeData$$serializer_instance;
  }
  function ModelNodeData_init(seen1, name, transform, children, meshes, tags, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(ModelNodeData.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('name');
    else
      $this.name = name;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('transform');
    else
      $this.transform = transform;
    if ((seen1 & 4) === 0)
      $this.children = emptyList();
    else
      $this.children = children;
    if ((seen1 & 8) === 0)
      $this.meshes = emptyList();
    else
      $this.meshes = meshes;
    if ((seen1 & 16) === 0)
      $this.tags = emptyList();
    else
      $this.tags = tags;
    return $this;
  }
  ModelNodeData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelNodeData',
    interfaces: []
  };
  ModelNodeData.prototype.component1 = function () {
    return this.name;
  };
  ModelNodeData.prototype.component2 = function () {
    return this.transform;
  };
  ModelNodeData.prototype.component3 = function () {
    return this.children;
  };
  ModelNodeData.prototype.component4 = function () {
    return this.meshes;
  };
  ModelNodeData.prototype.component5 = function () {
    return this.tags;
  };
  ModelNodeData.prototype.copy_kwf40x$ = function (name, transform, children, meshes, tags) {
    return new ModelNodeData(name === void 0 ? this.name : name, transform === void 0 ? this.transform : transform, children === void 0 ? this.children : children, meshes === void 0 ? this.meshes : meshes, tags === void 0 ? this.tags : tags);
  };
  ModelNodeData.prototype.toString = function () {
    return 'ModelNodeData(name=' + Kotlin.toString(this.name) + (', transform=' + Kotlin.toString(this.transform)) + (', children=' + Kotlin.toString(this.children)) + (', meshes=' + Kotlin.toString(this.meshes)) + (', tags=' + Kotlin.toString(this.tags)) + ')';
  };
  ModelNodeData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.transform) | 0;
    result = result * 31 + Kotlin.hashCode(this.children) | 0;
    result = result * 31 + Kotlin.hashCode(this.meshes) | 0;
    result = result * 31 + Kotlin.hashCode(this.tags) | 0;
    return result;
  };
  ModelNodeData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.transform, other.transform) && Kotlin.equals(this.children, other.children) && Kotlin.equals(this.meshes, other.meshes) && Kotlin.equals(this.tags, other.tags)))));
  };
  function ModelMeshData(name, primitiveType, attributes, indices, armature, animations, material, tags, intAttributes) {
    ModelMeshData$Companion_getInstance();
    if (indices === void 0)
      indices = emptyList();
    if (armature === void 0)
      armature = emptyList();
    if (animations === void 0)
      animations = emptyList();
    if (material === void 0)
      material = -1;
    if (tags === void 0)
      tags = emptyList();
    if (intAttributes === void 0)
      intAttributes = emptyMap();
    this.name = name;
    this.primitiveType = primitiveType;
    this.attributes = attributes;
    this.indices = indices;
    this.armature = armature;
    this.animations = animations;
    this.material = material;
    this.tags = tags;
    this.intAttributes = intAttributes;
    this.numVertices_r5k7x2$_0 = 0;
    this.hasNormals_ijlhl3$_0 = false;
    this.hasTexCoords_7qmtnk$_0 = false;
    this.hasColors_l5uha7$_0 = false;
    this.hasTangents_bpmbxb$_0 = false;
    var tmp$, tmp$_0;
    tmp$ = this.attributes.get_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_POSITIONS);
    if (tmp$ == null) {
      throw KoolException_init('ModelMeshData does not contain positions');
    }
    this.numVertices = tmp$.size / 3 | 0;
    this.hasNormals = this.attributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_NORMALS) || this.intAttributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_NORMALS_OCT_COMPRESSED);
    this.hasTexCoords = this.attributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_TEXTURE_COORDS);
    this.hasColors = this.attributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_COLORS);
    this.hasTangents = this.attributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_TANGENTS);
    tmp$_0 = this.attributes.entries.iterator();
    while (tmp$_0.hasNext()) {
      var tmp$_1 = tmp$_0.next();
      var name_1 = tmp$_1.key;
      var attrib_0 = tmp$_1.value;
      if ((attrib_0.size / attrib_0.type.size | 0) !== this.numVertices) {
        throw KoolException_init('Mesh attribute ' + name_1 + ' has wrong value count: ' + attrib_0.size + ' (should be ' + Kotlin.imul(this.numVertices, attrib_0.type.size) + ', type: ' + attrib_0.type + ')');
      }
    }
  }
  Object.defineProperty(ModelMeshData.prototype, 'numVertices', {
    get: function () {
      return this.numVertices_r5k7x2$_0;
    },
    set: function (numVertices) {
      this.numVertices_r5k7x2$_0 = numVertices;
    }
  });
  Object.defineProperty(ModelMeshData.prototype, 'hasNormals', {
    get: function () {
      return this.hasNormals_ijlhl3$_0;
    },
    set: function (hasNormals) {
      this.hasNormals_ijlhl3$_0 = hasNormals;
    }
  });
  Object.defineProperty(ModelMeshData.prototype, 'hasTexCoords', {
    get: function () {
      return this.hasTexCoords_7qmtnk$_0;
    },
    set: function (hasTexCoords) {
      this.hasTexCoords_7qmtnk$_0 = hasTexCoords;
    }
  });
  Object.defineProperty(ModelMeshData.prototype, 'hasColors', {
    get: function () {
      return this.hasColors_l5uha7$_0;
    },
    set: function (hasColors) {
      this.hasColors_l5uha7$_0 = hasColors;
    }
  });
  Object.defineProperty(ModelMeshData.prototype, 'hasTangents', {
    get: function () {
      return this.hasTangents_bpmbxb$_0;
    },
    set: function (hasTangents) {
      this.hasTangents_bpmbxb$_0 = hasTangents;
    }
  });
  function ModelMeshData$toMesh$lambda(closure$model, this$ModelMeshData) {
    return function ($receiver) {
      $receiver.lightModel = LightModel$PHONG_LIGHTING_getInstance();
      $receiver.colorModel = ColorModel$STATIC_COLOR_getInstance();
      $receiver.staticColor = closure$model.materials.get_za3lpa$(this$ModelMeshData.material).getDiffuseColor_b0h0gw$();
      return Unit;
    };
  }
  ModelMeshData.prototype.toMesh_8p8ifh$ = function (model, generateNormals, generateTangents) {
    if (model === void 0)
      model = null;
    if (generateNormals === void 0)
      generateNormals = true;
    if (generateTangents === void 0)
      generateTangents = false;
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var attribs = mutableSetOf([Attribute$Companion_getInstance().POSITIONS]);
    if (this.hasNormals || generateNormals) {
      var element = Attribute$Companion_getInstance().NORMALS;
      attribs.add_11rb$(element);
    }
    if (this.hasTangents || generateTangents) {
      var element_0 = Attribute$Companion_getInstance().TANGENTS;
      attribs.add_11rb$(element_0);
    }
    if (this.hasColors) {
      var element_1 = Attribute$Companion_getInstance().COLORS;
      attribs.add_11rb$(element_1);
    }
    if (this.hasTexCoords) {
      var element_2 = Attribute$Companion_getInstance().TEXTURE_COORDS;
      attribs.add_11rb$(element_2);
    }
    var meshData = new MeshData(attribs);
    tmp$ = this.attributes.get_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_POSITIONS);
    if (tmp$ == null) {
      throw KoolException_init('Mesh has no positions');
    }
    var positions = tmp$;
    var normals = this.attributes.get_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_NORMALS);
    var texCoords = this.attributes.get_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_TEXTURE_COORDS);
    var colors = this.attributes.get_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_COLORS);
    var tangents = this.attributes.get_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_TANGENTS);
    var normalsOct = this.intAttributes.get_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_NORMALS_OCT_COMPRESSED);
    var octBits = this.getNormalOctBits_0();
    tmp$_0 = positions.size / 3 | 0;
    for (var i = 0; i < tmp$_0; i++) {
      meshData.isSyncRequired = true;
      var $this = meshData.vertexList;
      var updateBounds = meshData.bounds;
      var tmp$_3, tmp$_4, tmp$_5;
      $this.checkBufferSizes_za3lpa$();
      tmp$_3 = $this.vertexSizeF;
      for (var i_0 = 1; i_0 <= tmp$_3; i_0++) {
        $this.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_4 = $this.vertexSizeI;
      for (var i_1 = 1; i_1 <= tmp$_4; i_1++) {
        $this.dataI.plusAssign_za3lpa$(0);
      }
      $this.vertexIt.index = (tmp$_5 = $this.size, $this.size = tmp$_5 + 1 | 0, tmp$_5);
      var $receiver = $this.vertexIt;
      $receiver.position.set_y2kzbl$(positions.get_za3lpa$(i * 3 | 0), positions.get_za3lpa$((i * 3 | 0) + 1 | 0), positions.get_za3lpa$((i * 3 | 0) + 2 | 0));
      if (normals != null) {
        $receiver.normal.set_y2kzbl$(normals.get_za3lpa$(i * 3 | 0), normals.get_za3lpa$((i * 3 | 0) + 1 | 0), normals.get_za3lpa$((i * 3 | 0) + 2 | 0));
      }
       else if (normalsOct != null && octBits > 0) {
        NormalOctCoding_getInstance().decodeOctToNormal_rovr2w$(normalsOct.get_za3lpa$(i * 2 | 0), normalsOct.get_za3lpa$((i * 2 | 0) + 1 | 0), octBits, $receiver.normal);
      }
      if (texCoords != null) {
        $receiver.texCoord.set_dleff0$(texCoords.get_za3lpa$(i * 2 | 0), texCoords.get_za3lpa$((i * 2 | 0) + 1 | 0));
      }
      if (colors != null) {
        $receiver.color.set_7b5o5w$(colors.get_za3lpa$(i * 4 | 0), colors.get_za3lpa$((i * 4 | 0) + 1 | 0), colors.get_za3lpa$((i * 4 | 0) + 2 | 0), colors.get_za3lpa$((i * 4 | 0) + 3 | 0));
      }
      if (tangents != null) {
        $receiver.tangent.set_y2kzbl$(tangents.get_za3lpa$(i * 3 | 0), tangents.get_za3lpa$((i * 3 | 0) + 1 | 0), tangents.get_za3lpa$((i * 3 | 0) + 2 | 0));
      }
      updateBounds != null ? updateBounds.add_czzhiu$($this.vertexIt.position) : null;
    }
    if (this.indices.isEmpty()) {
      tmp$_1 = this.numVertices;
      for (var i_2 = 0; i_2 < tmp$_1; i_2++) {
        meshData.addIndex_za3lpa$(i_2);
      }
    }
     else {
      meshData.addIndices_pqoyrt$(this.indices);
    }
    if (!this.hasNormals && generateNormals) {
      meshData.generateNormals();
    }
    if (!this.hasTangents && generateTangents) {
      meshData.generateTangents();
    }
    if (!this.armature.isEmpty()) {
      tmp$_2 = this.buildAramature_0(meshData);
    }
     else {
      tmp$_2 = new Mesh(meshData, this.name);
    }
    var mesh = tmp$_2;
    if (model != null && get_indices(model.materials).contains_mef7kx$(this.material)) {
      mesh.shader = basicShader(void 0, ModelMeshData$toMesh$lambda(model, this));
    }
    if (!this.tags.isEmpty()) {
      var tmp$_6;
      tmp$_6 = this.tags.iterator();
      while (tmp$_6.hasNext()) {
        var element_3 = tmp$_6.next();
        mesh.tags.plusAssign_61zpoe$(element_3);
      }
    }
    return mesh;
  };
  ModelMeshData.prototype.getNormalOctBits_0 = function () {
    var octBitsKey = 'normalsOct=';
    var $receiver = this.tags;
    var firstOrNull$result;
    firstOrNull$break: do {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (startsWith(element, octBitsKey)) {
          firstOrNull$result = element;
          break firstOrNull$break;
        }
      }
      firstOrNull$result = null;
    }
     while (false);
    var octBitsTag = firstOrNull$result;
    if (octBitsTag != null) {
      var startIndex = octBitsKey.length;
      return toInt(octBitsTag.substring(startIndex));
    }
    return -1;
  };
  ModelMeshData.prototype.buildAramature_0 = function (meshData) {
    var mesh = new Armature(meshData, this.name);
    var tmp$;
    tmp$ = this.armature.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0;
      var bone = new Bone(element.name, element.vertexIds.size);
      var $receiver = mesh.bones;
      var key = bone.name;
      $receiver.put_xwzc9p$(key, bone);
      bone.offsetMatrix.set_hcyabg$(element.offsetMatrix);
      tmp$_0 = element.vertexIds;
      for (var i = 0; i !== tmp$_0.size; ++i) {
        bone.vertexIds[i] = element.vertexIds.get_za3lpa$(i);
        bone.vertexWeights[i] = element.vertexWeights.get_za3lpa$(i);
      }
    }
    var tmp$_1;
    tmp$_1 = this.armature.iterator();
    while (tmp$_1.hasNext()) {
      var element_0 = tmp$_1.next();
      var bone_0 = ensureNotNull(mesh.bones.get_11rb$(element_0.name));
      bone_0.parent = mesh.bones.get_11rb$(element_0.parent);
      if (bone_0.parent == null) {
        mesh.rootBones.add_11rb$(bone_0);
      }
      var tmp$_2;
      tmp$_2 = element_0.children.iterator();
      while (tmp$_2.hasNext()) {
        var element_1 = tmp$_2.next();
        var child = mesh.bones.get_11rb$(element_1);
        if (child != null) {
          bone_0.children.add_11rb$(child);
        }
      }
    }
    mesh.updateBones();
    var tmp$_3;
    tmp$_3 = this.animations.iterator();
    while (tmp$_3.hasNext()) {
      var element_2 = tmp$_3.next();
      mesh.addAnimation_z5ltv$(element_2.name, element_2.getAnimation_wev6wz$(mesh.bones));
    }
    return mesh;
  };
  function ModelMeshData$Companion() {
    ModelMeshData$Companion_instance = this;
    this.ATTRIB_POSITIONS = 'positions';
    this.ATTRIB_NORMALS = 'normals';
    this.ATTRIB_NORMALS_OCT_COMPRESSED = 'normalsOct';
    this.ATTRIB_TEXTURE_COORDS = 'textureCoords';
    this.ATTRIB_COLORS = 'colors';
    this.ATTRIB_TANGENTS = 'tangents';
  }
  ModelMeshData$Companion.prototype.serializer = function () {
    return ModelMeshData$$serializer_getInstance();
  };
  ModelMeshData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ModelMeshData$Companion_instance = null;
  function ModelMeshData$Companion_getInstance() {
    if (ModelMeshData$Companion_instance === null) {
      new ModelMeshData$Companion();
    }
    return ModelMeshData$Companion_instance;
  }
  function ModelMeshData$$serializer() {
    this.descriptor_wiyw64$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.ModelMeshData', this);
    this.descriptor.addElement_ivxn3r$('name', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(1));
    this.descriptor.addElement_ivxn3r$('primitiveType', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(2));
    this.descriptor.addElement_ivxn3r$('attributes', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(3));
    this.descriptor.addElement_ivxn3r$('indices', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(4));
    this.descriptor.addElement_ivxn3r$('armature', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(5));
    this.descriptor.addElement_ivxn3r$('animations', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(6));
    this.descriptor.addElement_ivxn3r$('material', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(7));
    this.descriptor.addElement_ivxn3r$('tags', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(8));
    this.descriptor.addElement_ivxn3r$('intAttributes', true);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(9));
    ModelMeshData$$serializer_instance = this;
  }
  Object.defineProperty(ModelMeshData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_wiyw64$_0;
    }
  });
  ModelMeshData$$serializer.prototype.serialize_awe97i$ = function (encoder, obj) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeStringElement_bgm7zs$(this.descriptor, 0, obj.name);
    output.encodeSerializableElement_blecud$(this.descriptor, 1, new EnumSerializer(getKClass(PrimitiveType)), obj.primitiveType);
    output.encodeSerializableElement_blecud$(this.descriptor, 2, new LinkedHashMapSerializer(internal.StringSerializer, AttributeList$$serializer_getInstance()), obj.attributes);
    if (!equals(obj.indices, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 3))
      output.encodeSerializableElement_blecud$(this.descriptor, 3, new ArrayListSerializer(internal.IntSerializer), obj.indices);
    if (!equals(obj.armature, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 4))
      output.encodeSerializableElement_blecud$(this.descriptor, 4, new ArrayListSerializer(BoneData$$serializer_getInstance()), obj.armature);
    if (!equals(obj.animations, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 5))
      output.encodeSerializableElement_blecud$(this.descriptor, 5, new ArrayListSerializer(AnimationData$$serializer_getInstance()), obj.animations);
    if (!equals(obj.material, -1) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 6))
      output.encodeIntElement_4wpqag$(this.descriptor, 6, obj.material);
    if (!equals(obj.tags, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 7))
      output.encodeSerializableElement_blecud$(this.descriptor, 7, new ArrayListSerializer(internal.StringSerializer), obj.tags);
    if (!equals(obj.intAttributes, emptyMap()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 8))
      output.encodeSerializableElement_blecud$(this.descriptor, 8, new LinkedHashMapSerializer(internal.StringSerializer, IntAttributeList$$serializer_getInstance()), obj.intAttributes);
    output.endStructure_qatsm0$(this.descriptor);
  };
  ModelMeshData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index, readAll = false;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3
    , local4
    , local5
    , local6
    , local7
    , local8;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case -2:
          readAll = true;
        case 0:
          local0 = input.decodeStringElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          if (!readAll)
            break;
        case 1:
          local1 = (bitMask0 & 2) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 1, new EnumSerializer(getKClass(PrimitiveType))) : input.updateSerializableElement_ehubvl$(this.descriptor, 1, new EnumSerializer(getKClass(PrimitiveType)), local1);
          bitMask0 |= 2;
          if (!readAll)
            break;
        case 2:
          local2 = (bitMask0 & 4) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 2, new LinkedHashMapSerializer(internal.StringSerializer, AttributeList$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 2, new LinkedHashMapSerializer(internal.StringSerializer, AttributeList$$serializer_getInstance()), local2);
          bitMask0 |= 4;
          if (!readAll)
            break;
        case 3:
          local3 = (bitMask0 & 8) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 3, new ArrayListSerializer(internal.IntSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 3, new ArrayListSerializer(internal.IntSerializer), local3);
          bitMask0 |= 8;
          if (!readAll)
            break;
        case 4:
          local4 = (bitMask0 & 16) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 4, new ArrayListSerializer(BoneData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 4, new ArrayListSerializer(BoneData$$serializer_getInstance()), local4);
          bitMask0 |= 16;
          if (!readAll)
            break;
        case 5:
          local5 = (bitMask0 & 32) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 5, new ArrayListSerializer(AnimationData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 5, new ArrayListSerializer(AnimationData$$serializer_getInstance()), local5);
          bitMask0 |= 32;
          if (!readAll)
            break;
        case 6:
          local6 = input.decodeIntElement_3zr2iy$(this.descriptor, 6);
          bitMask0 |= 64;
          if (!readAll)
            break;
        case 7:
          local7 = (bitMask0 & 128) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 7, new ArrayListSerializer(internal.StringSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 7, new ArrayListSerializer(internal.StringSerializer), local7);
          bitMask0 |= 128;
          if (!readAll)
            break;
        case 8:
          local8 = (bitMask0 & 256) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 8, new LinkedHashMapSerializer(internal.StringSerializer, IntAttributeList$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 8, new LinkedHashMapSerializer(internal.StringSerializer, IntAttributeList$$serializer_getInstance()), local8);
          bitMask0 |= 256;
          if (!readAll)
            break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return ModelMeshData_init(bitMask0, local0, local1, local2, local3, local4, local5, local6, local7, local8, null);
  };
  ModelMeshData$$serializer.prototype.childSerializers = function () {
    return [internal.StringSerializer, new EnumSerializer(getKClass(PrimitiveType)), new LinkedHashMapSerializer(internal.StringSerializer, AttributeList$$serializer_getInstance()), new ArrayListSerializer(internal.IntSerializer), new ArrayListSerializer(BoneData$$serializer_getInstance()), new ArrayListSerializer(AnimationData$$serializer_getInstance()), internal.IntSerializer, new ArrayListSerializer(internal.StringSerializer), new LinkedHashMapSerializer(internal.StringSerializer, IntAttributeList$$serializer_getInstance())];
  };
  ModelMeshData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var ModelMeshData$$serializer_instance = null;
  function ModelMeshData$$serializer_getInstance() {
    if (ModelMeshData$$serializer_instance === null) {
      new ModelMeshData$$serializer();
    }
    return ModelMeshData$$serializer_instance;
  }
  function ModelMeshData_init(seen1, name, primitiveType, attributes, indices, armature, animations, material, tags, intAttributes, serializationConstructorMarker) {
    var tmp$, tmp$_0;
    var $this = serializationConstructorMarker || Object.create(ModelMeshData.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('name');
    else
      $this.name = name;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('primitiveType');
    else
      $this.primitiveType = primitiveType;
    if ((seen1 & 4) === 0)
      throw new MissingFieldException('attributes');
    else
      $this.attributes = attributes;
    if ((seen1 & 8) === 0)
      $this.indices = emptyList();
    else
      $this.indices = indices;
    if ((seen1 & 16) === 0)
      $this.armature = emptyList();
    else
      $this.armature = armature;
    if ((seen1 & 32) === 0)
      $this.animations = emptyList();
    else
      $this.animations = animations;
    if ((seen1 & 64) === 0)
      $this.material = -1;
    else
      $this.material = material;
    if ((seen1 & 128) === 0)
      $this.tags = emptyList();
    else
      $this.tags = tags;
    if ((seen1 & 256) === 0)
      $this.intAttributes = emptyMap();
    else
      $this.intAttributes = intAttributes;
    $this.numVertices_r5k7x2$_0 = 0;
    $this.hasNormals_ijlhl3$_0 = false;
    $this.hasTexCoords_7qmtnk$_0 = false;
    $this.hasColors_l5uha7$_0 = false;
    $this.hasTangents_bpmbxb$_0 = false;
    tmp$ = $this.attributes.get_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_POSITIONS);
    if (tmp$ == null) {
      throw KoolException_init('ModelMeshData does not contain positions');
    }
    $this.numVertices = tmp$.size / 3 | 0;
    $this.hasNormals = $this.attributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_NORMALS) || $this.intAttributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_NORMALS_OCT_COMPRESSED);
    $this.hasTexCoords = $this.attributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_TEXTURE_COORDS);
    $this.hasColors = $this.attributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_COLORS);
    $this.hasTangents = $this.attributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_TANGENTS);
    tmp$_0 = $this.attributes.entries.iterator();
    while (tmp$_0.hasNext()) {
      var tmp$_1 = tmp$_0.next();
      var name_1 = tmp$_1.key;
      var attrib_0 = tmp$_1.value;
      if ((attrib_0.size / attrib_0.type.size | 0) !== $this.numVertices) {
        throw KoolException_init('Mesh attribute ' + name_1 + ' has wrong value count: ' + attrib_0.size + ' (should be ' + Kotlin.imul($this.numVertices, attrib_0.type.size) + ', type: ' + attrib_0.type + ')');
      }
    }
    return $this;
  }
  ModelMeshData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelMeshData',
    interfaces: []
  };
  ModelMeshData.prototype.component1 = function () {
    return this.name;
  };
  ModelMeshData.prototype.component2 = function () {
    return this.primitiveType;
  };
  ModelMeshData.prototype.component3 = function () {
    return this.attributes;
  };
  ModelMeshData.prototype.component4 = function () {
    return this.indices;
  };
  ModelMeshData.prototype.component5 = function () {
    return this.armature;
  };
  ModelMeshData.prototype.component6 = function () {
    return this.animations;
  };
  ModelMeshData.prototype.component7 = function () {
    return this.material;
  };
  ModelMeshData.prototype.component8 = function () {
    return this.tags;
  };
  ModelMeshData.prototype.component9 = function () {
    return this.intAttributes;
  };
  ModelMeshData.prototype.copy_cvuba5$ = function (name, primitiveType, attributes, indices, armature, animations, material, tags, intAttributes) {
    return new ModelMeshData(name === void 0 ? this.name : name, primitiveType === void 0 ? this.primitiveType : primitiveType, attributes === void 0 ? this.attributes : attributes, indices === void 0 ? this.indices : indices, armature === void 0 ? this.armature : armature, animations === void 0 ? this.animations : animations, material === void 0 ? this.material : material, tags === void 0 ? this.tags : tags, intAttributes === void 0 ? this.intAttributes : intAttributes);
  };
  ModelMeshData.prototype.toString = function () {
    return 'ModelMeshData(name=' + Kotlin.toString(this.name) + (', primitiveType=' + Kotlin.toString(this.primitiveType)) + (', attributes=' + Kotlin.toString(this.attributes)) + (', indices=' + Kotlin.toString(this.indices)) + (', armature=' + Kotlin.toString(this.armature)) + (', animations=' + Kotlin.toString(this.animations)) + (', material=' + Kotlin.toString(this.material)) + (', tags=' + Kotlin.toString(this.tags)) + (', intAttributes=' + Kotlin.toString(this.intAttributes)) + ')';
  };
  ModelMeshData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.primitiveType) | 0;
    result = result * 31 + Kotlin.hashCode(this.attributes) | 0;
    result = result * 31 + Kotlin.hashCode(this.indices) | 0;
    result = result * 31 + Kotlin.hashCode(this.armature) | 0;
    result = result * 31 + Kotlin.hashCode(this.animations) | 0;
    result = result * 31 + Kotlin.hashCode(this.material) | 0;
    result = result * 31 + Kotlin.hashCode(this.tags) | 0;
    result = result * 31 + Kotlin.hashCode(this.intAttributes) | 0;
    return result;
  };
  ModelMeshData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.primitiveType, other.primitiveType) && Kotlin.equals(this.attributes, other.attributes) && Kotlin.equals(this.indices, other.indices) && Kotlin.equals(this.armature, other.armature) && Kotlin.equals(this.animations, other.animations) && Kotlin.equals(this.material, other.material) && Kotlin.equals(this.tags, other.tags) && Kotlin.equals(this.intAttributes, other.intAttributes)))));
  };
  function PrimitiveType(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function PrimitiveType_initFields() {
    PrimitiveType_initFields = function () {
    };
    PrimitiveType$LINES_instance = new PrimitiveType('LINES', 0);
    PrimitiveType$POINTS_instance = new PrimitiveType('POINTS', 1);
    PrimitiveType$TRIANGLES_instance = new PrimitiveType('TRIANGLES', 2);
  }
  var PrimitiveType$LINES_instance;
  function PrimitiveType$LINES_getInstance() {
    PrimitiveType_initFields();
    return PrimitiveType$LINES_instance;
  }
  var PrimitiveType$POINTS_instance;
  function PrimitiveType$POINTS_getInstance() {
    PrimitiveType_initFields();
    return PrimitiveType$POINTS_instance;
  }
  var PrimitiveType$TRIANGLES_instance;
  function PrimitiveType$TRIANGLES_getInstance() {
    PrimitiveType_initFields();
    return PrimitiveType$TRIANGLES_instance;
  }
  PrimitiveType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PrimitiveType',
    interfaces: [Enum]
  };
  function PrimitiveType$values() {
    return [PrimitiveType$LINES_getInstance(), PrimitiveType$POINTS_getInstance(), PrimitiveType$TRIANGLES_getInstance()];
  }
  PrimitiveType.values = PrimitiveType$values;
  function PrimitiveType$valueOf(name) {
    switch (name) {
      case 'LINES':
        return PrimitiveType$LINES_getInstance();
      case 'POINTS':
        return PrimitiveType$POINTS_getInstance();
      case 'TRIANGLES':
        return PrimitiveType$TRIANGLES_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.util.serialization.PrimitiveType.' + name);
    }
  }
  PrimitiveType.valueOf_61zpoe$ = PrimitiveType$valueOf;
  function AttributeList(type, values) {
    AttributeList$Companion_getInstance();
    this.type = type;
    this.values = values;
    this.size = this.values.size;
  }
  AttributeList.prototype.get_za3lpa$ = function (i) {
    return this.values.get_za3lpa$(i);
  };
  function AttributeList$Companion() {
    AttributeList$Companion_instance = this;
  }
  AttributeList$Companion.prototype.serializer = function () {
    return AttributeList$$serializer_getInstance();
  };
  AttributeList$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AttributeList$Companion_instance = null;
  function AttributeList$Companion_getInstance() {
    if (AttributeList$Companion_instance === null) {
      new AttributeList$Companion();
    }
    return AttributeList$Companion_instance;
  }
  function AttributeList$$serializer() {
    this.descriptor_4nzata$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.AttributeList', this);
    this.descriptor.addElement_ivxn3r$('type', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(1));
    this.descriptor.addElement_ivxn3r$('values', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(2));
    AttributeList$$serializer_instance = this;
  }
  Object.defineProperty(AttributeList$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_4nzata$_0;
    }
  });
  AttributeList$$serializer.prototype.serialize_awe97i$ = function (encoder, obj) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeSerializableElement_blecud$(this.descriptor, 0, new EnumSerializer(getKClass(AttributeType)), obj.type);
    output.encodeSerializableElement_blecud$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer), obj.values);
    output.endStructure_qatsm0$(this.descriptor);
  };
  AttributeList$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index, readAll = false;
    var bitMask0 = 0;
    var local0
    , local1;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case -2:
          readAll = true;
        case 0:
          local0 = (bitMask0 & 1) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 0, new EnumSerializer(getKClass(AttributeType))) : input.updateSerializableElement_ehubvl$(this.descriptor, 0, new EnumSerializer(getKClass(AttributeType)), local0);
          bitMask0 |= 1;
          if (!readAll)
            break;
        case 1:
          local1 = (bitMask0 & 2) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer), local1);
          bitMask0 |= 2;
          if (!readAll)
            break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return AttributeList_init(bitMask0, local0, local1, null);
  };
  AttributeList$$serializer.prototype.childSerializers = function () {
    return [new EnumSerializer(getKClass(AttributeType)), new ArrayListSerializer(internal.FloatSerializer)];
  };
  AttributeList$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var AttributeList$$serializer_instance = null;
  function AttributeList$$serializer_getInstance() {
    if (AttributeList$$serializer_instance === null) {
      new AttributeList$$serializer();
    }
    return AttributeList$$serializer_instance;
  }
  function AttributeList_init(seen1, type, values, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(AttributeList.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('type');
    else
      $this.type = type;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('values');
    else
      $this.values = values;
    $this.size = $this.values.size;
    return $this;
  }
  AttributeList.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AttributeList',
    interfaces: []
  };
  AttributeList.prototype.component1 = function () {
    return this.type;
  };
  AttributeList.prototype.component2 = function () {
    return this.values;
  };
  AttributeList.prototype.copy_j00qf3$ = function (type, values) {
    return new AttributeList(type === void 0 ? this.type : type, values === void 0 ? this.values : values);
  };
  AttributeList.prototype.toString = function () {
    return 'AttributeList(type=' + Kotlin.toString(this.type) + (', values=' + Kotlin.toString(this.values)) + ')';
  };
  AttributeList.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.type) | 0;
    result = result * 31 + Kotlin.hashCode(this.values) | 0;
    return result;
  };
  AttributeList.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.type, other.type) && Kotlin.equals(this.values, other.values)))));
  };
  function IntAttributeList(type, values) {
    IntAttributeList$Companion_getInstance();
    this.type = type;
    this.values = values;
    this.size = this.values.size;
  }
  IntAttributeList.prototype.get_za3lpa$ = function (i) {
    return this.values.get_za3lpa$(i);
  };
  function IntAttributeList$Companion() {
    IntAttributeList$Companion_instance = this;
  }
  IntAttributeList$Companion.prototype.serializer = function () {
    return IntAttributeList$$serializer_getInstance();
  };
  IntAttributeList$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var IntAttributeList$Companion_instance = null;
  function IntAttributeList$Companion_getInstance() {
    if (IntAttributeList$Companion_instance === null) {
      new IntAttributeList$Companion();
    }
    return IntAttributeList$Companion_instance;
  }
  function IntAttributeList$$serializer() {
    this.descriptor_rw0mhb$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.IntAttributeList', this);
    this.descriptor.addElement_ivxn3r$('type', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(1));
    this.descriptor.addElement_ivxn3r$('values', false);
    this.descriptor.pushAnnotation_yj921w$(new SerialId(2));
    IntAttributeList$$serializer_instance = this;
  }
  Object.defineProperty(IntAttributeList$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_rw0mhb$_0;
    }
  });
  IntAttributeList$$serializer.prototype.serialize_awe97i$ = function (encoder, obj) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeSerializableElement_blecud$(this.descriptor, 0, new EnumSerializer(getKClass(AttributeType)), obj.type);
    output.encodeSerializableElement_blecud$(this.descriptor, 1, new ArrayListSerializer(internal.IntSerializer), obj.values);
    output.endStructure_qatsm0$(this.descriptor);
  };
  IntAttributeList$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index, readAll = false;
    var bitMask0 = 0;
    var local0
    , local1;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case -2:
          readAll = true;
        case 0:
          local0 = (bitMask0 & 1) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 0, new EnumSerializer(getKClass(AttributeType))) : input.updateSerializableElement_ehubvl$(this.descriptor, 0, new EnumSerializer(getKClass(AttributeType)), local0);
          bitMask0 |= 1;
          if (!readAll)
            break;
        case 1:
          local1 = (bitMask0 & 2) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 1, new ArrayListSerializer(internal.IntSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 1, new ArrayListSerializer(internal.IntSerializer), local1);
          bitMask0 |= 2;
          if (!readAll)
            break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return IntAttributeList_init(bitMask0, local0, local1, null);
  };
  IntAttributeList$$serializer.prototype.childSerializers = function () {
    return [new EnumSerializer(getKClass(AttributeType)), new ArrayListSerializer(internal.IntSerializer)];
  };
  IntAttributeList$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var IntAttributeList$$serializer_instance = null;
  function IntAttributeList$$serializer_getInstance() {
    if (IntAttributeList$$serializer_instance === null) {
      new IntAttributeList$$serializer();
    }
    return IntAttributeList$$serializer_instance;
  }
  function IntAttributeList_init(seen1, type, values, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(IntAttributeList.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('type');
    else
      $this.type = type;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('values');
    else
      $this.values = values;
    $this.size = $this.values.size;
    return $this;
  }
  IntAttributeList.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IntAttributeList',
    interfaces: []
  };
  IntAttributeList.prototype.component1 = function () {
    return this.type;
  };
  IntAttributeList.prototype.component2 = function () {
    return this.values;
  };
  IntAttributeList.prototype.copy_jcdwl0$ = function (type, values) {
    return new IntAttributeList(type === void 0 ? this.type : type, values === void 0 ? this.values : values);
  };
  IntAttributeList.prototype.toString = function () {
    return 'IntAttributeList(type=' + Kotlin.toString(this.type) + (', values=' + Kotlin.toString(this.values)) + ')';
  };
  IntAttributeList.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.type) | 0;
    result = result * 31 + Kotlin.hashCode(this.values) | 0;
    return result;
  };
  IntAttributeList.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.type, other.type) && Kotlin.equals(this.values, other.values)))));
  };
  function NormalOctCoding() {
    NormalOctCoding_instance = this;
    this.SIGN_PP_0 = new Vec2f(1.0, 1.0);
    this.SIGN_PN_0 = new Vec2f(1.0, -1.0);
    this.SIGN_NP_0 = new Vec2f(-1.0, 1.0);
    this.SIGN_NN_0 = new Vec2f(-1.0, -1.0);
  }
  NormalOctCoding.prototype.signNotZero_0 = function (x, y) {
    var tmp$;
    if (x >= 0.0 && y >= 0.0)
      tmp$ = this.SIGN_PP_0;
    else if (x >= 0.0 && y < 0.0)
      tmp$ = this.SIGN_PN_0;
    else if (x < 0.0 && y >= 0.0)
      tmp$ = this.SIGN_NP_0;
    else
      tmp$ = this.SIGN_NN_0;
    return tmp$;
  };
  NormalOctCoding.prototype.encodeNormalToOct_2gj7a9$ = function (normal, result) {
    var x = normal.x;
    var tmp$ = Math_0.abs(x);
    var x_0 = normal.y;
    var tmp$_0 = tmp$ + Math_0.abs(x_0);
    var x_1 = normal.z;
    var f = 1.0 / (tmp$_0 + Math_0.abs(x_1));
    result.set_dleff0$(normal.x * f, normal.y * f);
    if (normal.z <= 0.0) {
      var s = this.signNotZero_0(result.x, result.y);
      var x_2 = result.y;
      var x_3 = (1.0 - Math_0.abs(x_2)) * s.x;
      var x_4 = result.x;
      var y = (1.0 - Math_0.abs(x_4)) * s.y;
      result.set_dleff0$(x_3, y);
    }
    return result;
  };
  NormalOctCoding.prototype.decodeOctToNormal_rovr2w$ = function (x, y, bits, result) {
    var f = 1.0 / ((1 << bits) - 1 | 0);
    return NormalOctCoding_getInstance().decodeOctToNormal_4dxiiq$(x * f, y * f, result);
  };
  NormalOctCoding.prototype.decodeOctToNormal_q2ru9t$ = function (oct, result) {
    return NormalOctCoding_getInstance().decodeOctToNormal_4dxiiq$(oct.x, oct.y, result);
  };
  NormalOctCoding.prototype.decodeOctToNormal_4dxiiq$ = function (x, y, result) {
    result.set_y2kzbl$(x, y, 1.0 - Math_0.abs(x) - Math_0.abs(y));
    if (result.z < 0) {
      var s = this.signNotZero_0(result.x, result.y);
      var x_0 = result.y;
      var rx = (1.0 - Math_0.abs(x_0)) * s.x;
      var x_1 = result.x;
      var ry = (1.0 - Math_0.abs(x_1)) * s.y;
      result.x = rx;
      result.y = ry;
    }
    return result.norm();
  };
  NormalOctCoding.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'NormalOctCoding',
    interfaces: []
  };
  var NormalOctCoding_instance = null;
  function NormalOctCoding_getInstance() {
    if (NormalOctCoding_instance === null) {
      new NormalOctCoding();
    }
    return NormalOctCoding_instance;
  }
  function ShadowMap() {
  }
  ShadowMap.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ShadowMap',
    interfaces: [Disposable]
  };
  function SimpleShadowMap(near, far, texSize) {
    SimpleShadowMap$Companion_getInstance();
    if (near === void 0)
      near = 0.0;
    if (far === void 0)
      far = 100.0;
    if (texSize === void 0)
      texSize = SimpleShadowMap$Companion_getInstance().defaultMapSize;
    this.near = near;
    this.far = far;
    this.texSize_0 = texSize;
    this.numMaps_qs18qs$_0 = 1;
    this.shadowMvp_y8c606$_0 = createFloat32Buffer(16);
    this.depthCam_0 = new OrthographicCamera();
    this.depthMvpMat_0 = new Mat4f();
    this.depthView_0 = new Mat4f();
    this.nearPlane_0 = new FrustumPlane();
    this.farPlane_0 = new FrustumPlane();
    this.bounds_0 = new BoundingBox();
    this.tmpVec4_0 = MutableVec4f_init();
    this.fbo_0 = (new Framebuffer(this.texSize_0, this.texSize_0)).withDepth();
    this.clipSpaceFarZ_0 = 0.0;
    this.depthCam_0.isKeepAspectRatio = false;
  }
  Object.defineProperty(SimpleShadowMap.prototype, 'numMaps', {
    get: function () {
      return this.numMaps_qs18qs$_0;
    }
  });
  Object.defineProperty(SimpleShadowMap.prototype, 'shadowMvp', {
    get: function () {
      return this.shadowMvp_y8c606$_0;
    }
  });
  SimpleShadowMap.prototype.renderShadowMap_x4tdlw$ = function (nodeToRender, ctx) {
    var tmp$;
    if (!ctx.glCapabilities.depthTextures) {
      return;
    }
    tmp$ = nodeToRender.scene;
    if (tmp$ == null) {
      return;
    }
    var scene = tmp$;
    var camera = scene.camera;
    this.depthCam_0.position.set_czzhiu$(scene.lighting.primaryLight.direction);
    this.depthCam_0.lookAt.set_y2kzbl$(0.0, 0.0, 0.0);
    this.depthView_0.setLookAt_n440fu$(this.depthCam_0.position, this.depthCam_0.lookAt, this.depthCam_0.up);
    camera.computeFrustumPlane_jwr40o$(this.near, this.nearPlane_0);
    camera.computeFrustumPlane_jwr40o$(this.far, this.farPlane_0);
    this.clipSpaceFarZ_0 = camera.project_2gj7bz$(this.farPlane_0.upperLeft, this.tmpVec4_0).z;
    transform(this.depthView_0, this.nearPlane_0);
    transform(this.depthView_0, this.farPlane_0);
    setPlanes(this.bounds_0, this.nearPlane_0, this.farPlane_0);
    this.depthCam_0.left = this.bounds_0.min.x;
    this.depthCam_0.right = this.bounds_0.max.x;
    this.depthCam_0.bottom = this.bounds_0.min.y;
    this.depthCam_0.top = this.bounds_0.max.y;
    this.depthCam_0.near = -this.bounds_0.max.z - 10;
    this.depthCam_0.far = -this.bounds_0.min.z;
    this.fbo_0.bind_aemszp$(ctx);
    glClear(256);
    ctx.mvpState.pushMatrices();
    ctx.mvpState.projMatrix.setIdentity();
    ctx.mvpState.viewMatrix.setIdentity();
    ctx.mvpState.modelMatrix.setIdentity();
    this.depthCam_0.updateCamera_aemszp$(ctx);
    SimpleShadowMap$Companion_getInstance().BIAS_MATRIX_0.mul_93v2ma$(ctx.mvpState.mvpMatrix, this.depthMvpMat_0).toBuffer_he122g$(this.shadowMvp);
    var prevRenderPass = ctx.renderPass;
    ctx.renderPass = RenderPass$SHADOW_getInstance();
    scene.camera = this.depthCam_0;
    ctx.pushAttributes();
    ctx.cullFace = 1028;
    ctx.applyAttributes();
    nodeToRender.render_aemszp$(ctx);
    ctx.popAttributes();
    scene.camera = camera;
    ctx.renderPass = prevRenderPass;
    ctx.mvpState.popMatrices();
    ctx.mvpState.update_aemszp$(ctx);
    this.fbo_0.unbind_aemszp$(ctx);
    ctx.shaderMgr.clearShader_aemszp$(ctx);
  };
  SimpleShadowMap.prototype.dispose_aemszp$ = function (ctx) {
    this.fbo_0.dispose_aemszp$(ctx);
  };
  SimpleShadowMap.prototype.getShadowMapSize_za3lpa$ = function (map) {
    return this.texSize_0;
  };
  SimpleShadowMap.prototype.getShadowMap_za3lpa$ = function (map) {
    return this.fbo_0.depthAttachment;
  };
  SimpleShadowMap.prototype.getClipSpaceFarZ_za3lpa$ = function (map) {
    return this.clipSpaceFarZ_0;
  };
  function SimpleShadowMap$Companion() {
    SimpleShadowMap$Companion_instance = this;
    this.BIAS_MATRIX_0 = new Mat4f();
    this.defaultMapSize = 1024;
    this.BIAS_MATRIX_0.setIdentity();
    this.BIAS_MATRIX_0.translate_y2kzbl$(0.5, 0.5, 0.5);
    this.BIAS_MATRIX_0.scale_y2kzbl$(0.5, 0.5, 0.5);
  }
  SimpleShadowMap$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SimpleShadowMap$Companion_instance = null;
  function SimpleShadowMap$Companion_getInstance() {
    if (SimpleShadowMap$Companion_instance === null) {
      new SimpleShadowMap$Companion();
    }
    return SimpleShadowMap$Companion_instance;
  }
  SimpleShadowMap.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SimpleShadowMap',
    interfaces: [ShadowMap]
  };
  function CascadedShadowMap(subMaps) {
    CascadedShadowMap$Companion_getInstance();
    this.subMaps_0 = subMaps;
    this.shadowMvp_5xyj6w$_0 = createFloat32Buffer(16 * this.subMaps_0.length | 0);
  }
  Object.defineProperty(CascadedShadowMap.prototype, 'numMaps', {
    get: function () {
      return this.subMaps_0.length;
    }
  });
  Object.defineProperty(CascadedShadowMap.prototype, 'shadowMvp', {
    get: function () {
      return this.shadowMvp_5xyj6w$_0;
    }
  });
  CascadedShadowMap.prototype.renderShadowMap_x4tdlw$ = function (nodeToRender, ctx) {
    var tmp$;
    tmp$ = this.subMaps_0;
    for (var i = 0; i !== tmp$.length; ++i) {
      this.subMaps_0[i].renderShadowMap_x4tdlw$(nodeToRender, ctx);
      this.shadowMvp.put_he122g$(this.subMaps_0[i].shadowMvp);
    }
    this.shadowMvp.flip();
  };
  CascadedShadowMap.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$;
    tmp$ = this.subMaps_0;
    for (var i = 0; i !== tmp$.length; ++i) {
      this.subMaps_0[i].dispose_aemszp$(ctx);
    }
  };
  CascadedShadowMap.prototype.getShadowMapSize_za3lpa$ = function (map) {
    return this.subMaps_0[map].getShadowMapSize_za3lpa$(0);
  };
  CascadedShadowMap.prototype.getShadowMap_za3lpa$ = function (map) {
    return this.subMaps_0[map].getShadowMap_za3lpa$(0);
  };
  CascadedShadowMap.prototype.getClipSpaceFarZ_za3lpa$ = function (map) {
    return this.subMaps_0[map].getClipSpaceFarZ_za3lpa$(0);
  };
  function CascadedShadowMap$Companion() {
    CascadedShadowMap$Companion_instance = this;
  }
  CascadedShadowMap$Companion.prototype.defaultCascadedShadowMap3_vjorfl$ = function (range, texSize) {
    if (range === void 0)
      range = 100.0;
    if (texSize === void 0)
      texSize = SimpleShadowMap$Companion_getInstance().defaultMapSize;
    var subMaps = [new SimpleShadowMap(0.0, 0.1 * range, texSize), new SimpleShadowMap(0.1 * range, 0.3 * range, texSize), new SimpleShadowMap(0.3 * range, range, texSize)];
    return new CascadedShadowMap(subMaps);
  };
  CascadedShadowMap$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var CascadedShadowMap$Companion_instance = null;
  function CascadedShadowMap$Companion_getInstance() {
    if (CascadedShadowMap$Companion_instance === null) {
      new CascadedShadowMap$Companion();
    }
    return CascadedShadowMap$Companion_instance;
  }
  CascadedShadowMap.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CascadedShadowMap',
    interfaces: [ShadowMap]
  };
  function transform($receiver, plane) {
    $receiver.transform_w1lst9$(plane.upperLeft);
    $receiver.transform_w1lst9$(plane.upperRight);
    $receiver.transform_w1lst9$(plane.lowerLeft);
    $receiver.transform_w1lst9$(plane.lowerRight);
  }
  function setPlanes($receiver, near, far) {
    var wasBatchUpdate = $receiver.isBatchUpdate;
    $receiver.isBatchUpdate = true;
    $receiver.clear();
    $receiver.add_czzhiu$(near.upperLeft);
    $receiver.add_czzhiu$(near.upperRight);
    $receiver.add_czzhiu$(near.lowerLeft);
    $receiver.add_czzhiu$(near.lowerRight);
    $receiver.add_czzhiu$(far.upperLeft);
    $receiver.add_czzhiu$(far.upperRight);
    $receiver.add_czzhiu$(far.lowerLeft);
    $receiver.add_czzhiu$(far.lowerRight);
    $receiver.isBatchUpdate = wasBatchUpdate;
  }
  function pointKdTree(points, bucketSz) {
    if (bucketSz === void 0)
      bucketSz = 20;
    return new KdTree(points, Vec3fAdapter_getInstance(), bucketSz);
  }
  function pointOcTree(points, bounds, bucketSz) {
    if (points === void 0)
      points = emptyList();
    if (bounds === void 0)
      bounds = new BoundingBox();
    if (bucketSz === void 0)
      bucketSz = 20;
    return new OcTree(Vec3fAdapter_getInstance(), points, bounds, void 0, bucketSz);
  }
  function triangleKdTree(mesh, bucketSz) {
    if (bucketSz === void 0)
      bucketSz = 10;
    var tmp$;
    var triangles = ArrayList_init_0();
    var v = mesh.vertexList.get_za3lpa$(0);
    tmp$ = mesh.numIndices;
    for (var i = 0; i < tmp$; i += 3) {
      v.index = mesh.vertexList.indices.get_za3lpa$(i);
      var p0 = Vec3f_init_0(v);
      v.index = mesh.vertexList.indices.get_za3lpa$(i + 1 | 0);
      var p1 = Vec3f_init_0(v);
      v.index = mesh.vertexList.indices.get_za3lpa$(i + 2 | 0);
      var p2 = Vec3f_init_0(v);
      var element = new Triangle(p0, p1, p2);
      triangles.add_11rb$(element);
    }
    return triangleKdTree_0(triangles, bucketSz);
  }
  function triangleKdTree_0(triangles, bucketSz) {
    if (bucketSz === void 0)
      bucketSz = 10;
    return new KdTree(triangles, TriangleAdapter_getInstance(), bucketSz);
  }
  function triangleOcTree(triangles, bounds, bucketSz) {
    if (triangles === void 0)
      triangles = emptyList();
    if (bounds === void 0)
      bounds = new BoundingBox();
    if (bucketSz === void 0)
      bucketSz = 10;
    return new OcTree(TriangleAdapter_getInstance(), triangles, bounds, void 0, bucketSz);
  }
  function triangleOcTree_0(mesh, bucketSz) {
    if (bucketSz === void 0)
      bucketSz = 10;
    var tmp$;
    var triangles = ArrayList_init_0();
    var v = mesh.vertexList.get_za3lpa$(0);
    tmp$ = mesh.numIndices;
    for (var i = 0; i < tmp$; i += 3) {
      v.index = mesh.vertexList.indices.get_za3lpa$(i);
      var p0 = Vec3f_init_0(v);
      v.index = mesh.vertexList.indices.get_za3lpa$(i + 1 | 0);
      var p1 = Vec3f_init_0(v);
      v.index = mesh.vertexList.indices.get_za3lpa$(i + 2 | 0);
      var p2 = Vec3f_init_0(v);
      var element = new Triangle(p0, p1, p2);
      triangles.add_11rb$(element);
    }
    return triangleOcTree(triangles, mesh.bounds, bucketSz);
  }
  function edgeKdTree(edges, bucketSz) {
    if (bucketSz === void 0)
      bucketSz = 10;
    return new KdTree(edges, EdgeAdapter_getInstance(), bucketSz);
  }
  function edgeOcTree(triangles, bounds, bucketSz) {
    if (triangles === void 0)
      triangles = emptyList();
    if (bounds === void 0)
      bounds = new BoundingBox();
    if (bucketSz === void 0)
      bucketSz = 10;
    return new OcTree(EdgeAdapter_getInstance(), triangles, bounds, void 0, bucketSz);
  }
  function ItemAdapter() {
  }
  ItemAdapter.prototype.getCenterX_trkh7z$ = function (item) {
    return (this.getMinX_trkh7z$(item) + this.getMaxX_trkh7z$(item)) * 0.5;
  };
  ItemAdapter.prototype.getCenterY_trkh7z$ = function (item) {
    return (this.getMinY_trkh7z$(item) + this.getMaxY_trkh7z$(item)) * 0.5;
  };
  ItemAdapter.prototype.getCenterZ_trkh7z$ = function (item) {
    return (this.getMinZ_trkh7z$(item) + this.getMaxZ_trkh7z$(item)) * 0.5;
  };
  ItemAdapter.prototype.getSzX_trkh7z$ = function (item) {
    return this.getMaxX_trkh7z$(item) - this.getMinX_trkh7z$(item);
  };
  ItemAdapter.prototype.getSzY_trkh7z$ = function (item) {
    return this.getMaxY_trkh7z$(item) - this.getMinY_trkh7z$(item);
  };
  ItemAdapter.prototype.getSzZ_trkh7z$ = function (item) {
    return this.getMaxZ_trkh7z$(item) - this.getMinZ_trkh7z$(item);
  };
  ItemAdapter.prototype.getMin_hm1yd1$ = function (item, result) {
    return result.set_y2kzbl$(this.getMinX_trkh7z$(item), this.getMinY_trkh7z$(item), this.getMinZ_trkh7z$(item));
  };
  ItemAdapter.prototype.getMax_hm1yd1$ = function (item, result) {
    return result.set_y2kzbl$(this.getMaxX_trkh7z$(item), this.getMaxY_trkh7z$(item), this.getMaxZ_trkh7z$(item));
  };
  ItemAdapter.prototype.getCenter_hm1yd1$ = function (item, result) {
    return result.set_y2kzbl$(this.getCenterX_trkh7z$(item), this.getCenterY_trkh7z$(item), this.getCenterZ_trkh7z$(item));
  };
  ItemAdapter.prototype.setNode_bc9457$ = function (item, node) {
  };
  ItemAdapter.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ItemAdapter',
    interfaces: []
  };
  function Vec3fAdapter() {
    Vec3fAdapter_instance = this;
  }
  Vec3fAdapter.prototype.getMinX_trkh7z$ = function (item) {
    return item.x;
  };
  Vec3fAdapter.prototype.getMinY_trkh7z$ = function (item) {
    return item.y;
  };
  Vec3fAdapter.prototype.getMinZ_trkh7z$ = function (item) {
    return item.z;
  };
  Vec3fAdapter.prototype.getMaxX_trkh7z$ = function (item) {
    return item.x;
  };
  Vec3fAdapter.prototype.getMaxY_trkh7z$ = function (item) {
    return item.y;
  };
  Vec3fAdapter.prototype.getMaxZ_trkh7z$ = function (item) {
    return item.z;
  };
  Vec3fAdapter.prototype.getCenterX_trkh7z$ = function (item) {
    return item.x;
  };
  Vec3fAdapter.prototype.getCenterY_trkh7z$ = function (item) {
    return item.y;
  };
  Vec3fAdapter.prototype.getCenterZ_trkh7z$ = function (item) {
    return item.z;
  };
  Vec3fAdapter.prototype.getSzX_trkh7z$ = function (item) {
    return 0.0;
  };
  Vec3fAdapter.prototype.getSzY_trkh7z$ = function (item) {
    return 0.0;
  };
  Vec3fAdapter.prototype.getSzZ_trkh7z$ = function (item) {
    return 0.0;
  };
  Vec3fAdapter.prototype.getMin_hm1yd1$ = function (item, result) {
    return result.set_czzhiu$(item);
  };
  Vec3fAdapter.prototype.getCenter_hm1yd1$ = function (item, result) {
    return result.set_czzhiu$(item);
  };
  Vec3fAdapter.prototype.getMax_hm1yd1$ = function (item, result) {
    return result.set_czzhiu$(item);
  };
  Vec3fAdapter.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Vec3fAdapter',
    interfaces: [ItemAdapter]
  };
  var Vec3fAdapter_instance = null;
  function Vec3fAdapter_getInstance() {
    if (Vec3fAdapter_instance === null) {
      new Vec3fAdapter();
    }
    return Vec3fAdapter_instance;
  }
  function EdgeAdapter() {
    EdgeAdapter_instance = this;
  }
  EdgeAdapter.prototype.getMinX_trkh7z$ = function (item) {
    return item.minX;
  };
  EdgeAdapter.prototype.getMinY_trkh7z$ = function (item) {
    return item.minY;
  };
  EdgeAdapter.prototype.getMinZ_trkh7z$ = function (item) {
    return item.minZ;
  };
  EdgeAdapter.prototype.getMaxX_trkh7z$ = function (item) {
    return item.maxX;
  };
  EdgeAdapter.prototype.getMaxY_trkh7z$ = function (item) {
    return item.maxY;
  };
  EdgeAdapter.prototype.getMaxZ_trkh7z$ = function (item) {
    return item.maxZ;
  };
  EdgeAdapter.prototype.getMin_hm1yd1$ = function (item, result) {
    return result.set_y2kzbl$(item.minX, item.minY, item.minZ);
  };
  EdgeAdapter.prototype.getMax_hm1yd1$ = function (item, result) {
    return result.set_y2kzbl$(item.maxX, item.maxY, item.maxZ);
  };
  EdgeAdapter.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'EdgeAdapter',
    interfaces: [ItemAdapter]
  };
  var EdgeAdapter_instance = null;
  function EdgeAdapter_getInstance() {
    if (EdgeAdapter_instance === null) {
      new EdgeAdapter();
    }
    return EdgeAdapter_instance;
  }
  function TriangleAdapter() {
    TriangleAdapter_instance = this;
  }
  TriangleAdapter.prototype.getMinX_trkh7z$ = function (item) {
    return item.minX;
  };
  TriangleAdapter.prototype.getMinY_trkh7z$ = function (item) {
    return item.minY;
  };
  TriangleAdapter.prototype.getMinZ_trkh7z$ = function (item) {
    return item.minZ;
  };
  TriangleAdapter.prototype.getMaxX_trkh7z$ = function (item) {
    return item.maxX;
  };
  TriangleAdapter.prototype.getMaxY_trkh7z$ = function (item) {
    return item.maxY;
  };
  TriangleAdapter.prototype.getMaxZ_trkh7z$ = function (item) {
    return item.maxZ;
  };
  TriangleAdapter.prototype.getMin_hm1yd1$ = function (item, result) {
    return result.set_y2kzbl$(item.minX, item.minY, item.minZ);
  };
  TriangleAdapter.prototype.getMax_hm1yd1$ = function (item, result) {
    return result.set_y2kzbl$(item.maxX, item.maxY, item.maxZ);
  };
  TriangleAdapter.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'TriangleAdapter',
    interfaces: [ItemAdapter]
  };
  var TriangleAdapter_instance = null;
  function TriangleAdapter_getInstance() {
    if (TriangleAdapter_instance === null) {
      new TriangleAdapter();
    }
    return TriangleAdapter_instance;
  }
  function Edge(pt0, pt1) {
    Edge$Companion_getInstance();
    this.pt0 = pt0;
    this.pt1 = pt1;
    this.e = null;
    this.length = 0;
    this.minX = 0;
    this.minY = 0;
    this.minZ = 0;
    this.maxX = 0;
    this.maxY = 0;
    this.maxZ = 0;
    this.tmpVec_hbsawf$_0 = MutableVec3f_init();
    this.tmpResult_ve9atw$_0 = MutableVec3f_init();
    this.e = this.pt1.subtract_2gj7b4$(this.pt0, MutableVec3f_init()).norm();
    this.length = this.pt0.distance_czzhiu$(this.pt1);
    var a = this.pt0.x;
    var b = this.pt1.x;
    this.minX = Math_0.min(a, b);
    var a_0 = this.pt0.y;
    var b_0 = this.pt1.y;
    this.minY = Math_0.min(a_0, b_0);
    var a_1 = this.pt0.z;
    var b_1 = this.pt1.z;
    this.minZ = Math_0.min(a_1, b_1);
    var a_2 = this.pt0.x;
    var b_2 = this.pt1.x;
    this.maxX = Math_0.max(a_2, b_2);
    var a_3 = this.pt0.y;
    var b_3 = this.pt1.y;
    this.maxY = Math_0.max(a_3, b_3);
    var a_4 = this.pt0.z;
    var b_4 = this.pt1.z;
    this.maxZ = Math_0.max(a_4, b_4);
  }
  Edge.prototype.rayDistanceSqr_nvyeur$ = function (ray) {
    return ray.sqrDistanceToPoint_czzhiu$(this.nearestPointOnEdge_lplggz$(ray, this.tmpResult_ve9atw$_0));
  };
  Edge.prototype.nearestPointOnEdge_lplggz$ = function (ray, result) {
    var dot = this.e.times_czzhiu$(ray.direction);
    var n = 1.0 - dot * dot;
    var eps;
    eps = package$math.FUZZY_EQ_F;
    if (Math_0.abs(n) <= eps) {
      return result.set_czzhiu$(this.pt0.sqrDistance_czzhiu$(ray.origin) < this.pt1.sqrDistance_czzhiu$(ray.origin) ? this.pt0 : this.pt1);
    }
    ray.origin.subtract_2gj7b4$(this.pt0, this.tmpVec_hbsawf$_0);
    var a = this.tmpVec_hbsawf$_0.times_czzhiu$(this.e);
    var b = this.tmpVec_hbsawf$_0.times_czzhiu$(ray.direction);
    var l = (a - b * dot) / n;
    var tmp$;
    if (l > 0) {
      var tmp$_0 = this.e;
      var b_0 = this.length;
      tmp$ = tmp$_0.scale_749b8l$(Math_0.min(l, b_0), result).add_czzhiu$(this.pt0);
    }
     else
      tmp$ = result.set_czzhiu$(this.pt0);
    return tmp$;
  };
  function Edge$Companion() {
    Edge$Companion_instance = this;
  }
  Edge$Companion.prototype.getEdges_3w6cym$ = function (lineMeshData) {
    var tmp$;
    if (lineMeshData.primitiveType !== 1) {
      throw IllegalArgumentException_init('Supplied meshData must have primitiveType GL_LINES');
    }
    var edges = ArrayList_init_0();
    tmp$ = lineMeshData.numIndices;
    for (var i = 0; i < tmp$; i += 2) {
      var i0 = lineMeshData.vertexList.indices.get_za3lpa$(i);
      var i1 = lineMeshData.vertexList.indices.get_za3lpa$(i + 1 | 0);
      var $receiver = lineMeshData.vertexList.vertexIt;
      $receiver.index = i0;
      var p0 = Vec3f_init_0($receiver);
      var $receiver_0 = lineMeshData.vertexList.vertexIt;
      $receiver_0.index = i1;
      var p1 = Vec3f_init_0($receiver_0);
      var element = new Edge(p0, p1);
      edges.add_11rb$(element);
    }
    return edges;
  };
  Edge$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Edge$Companion_instance = null;
  function Edge$Companion_getInstance() {
    if (Edge$Companion_instance === null) {
      new Edge$Companion();
    }
    return Edge$Companion_instance;
  }
  Edge.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Edge',
    interfaces: []
  };
  function Triangle(pt0, pt1, pt2) {
    Triangle$Companion_getInstance();
    this.pt0 = pt0;
    this.pt1 = pt1;
    this.pt2 = pt2;
    this.e1 = null;
    this.e2 = null;
    this.minX = 0;
    this.minY = 0;
    this.minZ = 0;
    this.maxX = 0;
    this.maxY = 0;
    this.maxZ = 0;
    this.tmpS_2u2gaj$_0 = MutableVec3f_init();
    this.tmpP_2u2g7y$_0 = MutableVec3f_init();
    this.tmpQ_2u2g8t$_0 = MutableVec3f_init();
    this.e1 = this.pt1.subtract_2gj7b4$(this.pt0, MutableVec3f_init());
    this.e2 = this.pt2.subtract_2gj7b4$(this.pt0, MutableVec3f_init());
    var a = this.pt0.x;
    var b = this.pt1.x;
    var c = this.pt2.x;
    this.minX = Math_0.min(a, b, c);
    var a_0 = this.pt0.y;
    var b_0 = this.pt1.y;
    var c_0 = this.pt2.y;
    this.minY = Math_0.min(a_0, b_0, c_0);
    var a_1 = this.pt0.z;
    var b_1 = this.pt1.z;
    var c_1 = this.pt2.z;
    this.minZ = Math_0.min(a_1, b_1, c_1);
    var a_2 = this.pt0.x;
    var b_2 = this.pt1.x;
    var c_2 = this.pt2.x;
    this.maxX = Math_0.max(a_2, b_2, c_2);
    var a_3 = this.pt0.y;
    var b_3 = this.pt1.y;
    var c_3 = this.pt2.y;
    this.maxY = Math_0.max(a_3, b_3, c_3);
    var a_4 = this.pt0.z;
    var b_4 = this.pt1.z;
    var c_4 = this.pt2.z;
    this.maxZ = Math_0.max(a_4, b_4, c_4);
  }
  Triangle.prototype.hitDistance_nvyeur$ = function (ray) {
    ray.origin.subtract_2gj7b4$(this.pt0, this.tmpS_2u2gaj$_0);
    ray.direction.cross_2gj7b4$(this.e2, this.tmpP_2u2g7y$_0);
    this.tmpS_2u2gaj$_0.cross_2gj7b4$(this.e1, this.tmpQ_2u2g8t$_0);
    var f = 1.0 / this.tmpP_2u2g7y$_0.times_czzhiu$(this.e1);
    var t = f * this.tmpQ_2u2g8t$_0.times_czzhiu$(this.e2);
    var u = f * this.tmpP_2u2g7y$_0.times_czzhiu$(this.tmpS_2u2gaj$_0);
    var v = f * this.tmpQ_2u2g8t$_0.times_czzhiu$(ray.direction);
    return u >= 0.0 && v >= 0.0 && u + v <= 1.0 && t >= 0.0 ? t : kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
  };
  function Triangle$Companion() {
    Triangle$Companion_instance = this;
  }
  Triangle$Companion.prototype.getTriangles_3w6cym$ = function (meshData) {
    var tmp$;
    var triangles = ArrayList_init_0();
    tmp$ = meshData.numIndices;
    for (var i = 0; i < tmp$; i += 3) {
      var element = Triangle_init(meshData, i);
      triangles.add_11rb$(element);
    }
    return triangles;
  };
  Triangle$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Triangle$Companion_instance = null;
  function Triangle$Companion_getInstance() {
    if (Triangle$Companion_instance === null) {
      new Triangle$Companion();
    }
    return Triangle$Companion_instance;
  }
  Triangle.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Triangle',
    interfaces: []
  };
  function Triangle_init(data, idx0, $this) {
    $this = $this || Object.create(Triangle.prototype);
    var $receiver = MutableVec3f_init();
    data.vertexList.vertexIt.index = data.vertexList.indices.get_za3lpa$(idx0);
    $receiver.set_czzhiu$(data.vertexList.vertexIt.position);
    var $receiver_0 = MutableVec3f_init();
    data.vertexList.vertexIt.index = data.vertexList.indices.get_za3lpa$(idx0 + 1 | 0);
    $receiver_0.set_czzhiu$(data.vertexList.vertexIt.position);
    var $receiver_1 = MutableVec3f_init();
    data.vertexList.vertexIt.index = data.vertexList.indices.get_za3lpa$(idx0 + 2 | 0);
    $receiver_1.set_czzhiu$(data.vertexList.vertexIt.position);
    Triangle.call($this, $receiver, $receiver_0, $receiver_1);
    if (data.primitiveType !== 4) {
      throw IllegalArgumentException_init('Supplied meshData must have primitiveType GL_TRIANGLES');
    }
    return $this;
  }
  function SpatialTree(itemAdapter) {
    this.itemAdapter = itemAdapter;
    this.candidatesPool = new AutoRecycler(void 0, SpatialTree$candidatesPool$lambda);
  }
  SpatialTree.prototype.drawNodeBounds_acte6c$ = function (lineMesh) {
    this.root.drawNodeBounds_acte6c$(lineMesh);
  };
  function SpatialTree$Node($outer, depth) {
    this.$outer = $outer;
    this.depth = depth;
    this.bounds = new BoundingBox();
    this.traversalOrder = 0.0;
  }
  Object.defineProperty(SpatialTree$Node.prototype, 'isLeaf', {
    get: function () {
      return this.children.isEmpty();
    }
  });
  SpatialTree$Node.prototype.drawNodeBounds_acte6c$ = function (lineMesh) {
    var tmp$;
    var color = ColorGradient$Companion_getInstance().JET_MD.getColor_y2kzbl$(this.depth % 6.7 / 6.7);
    lineMesh.addBoundingBox_j1pmtk$(this.bounds, color);
    tmp$ = this.children;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.children.get_za3lpa$(i).drawNodeBounds_acte6c$(lineMesh);
    }
  };
  SpatialTree$Node.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Node',
    interfaces: []
  };
  function SpatialTree$candidatesPool$lambda() {
    return ArrayList_init_0();
  }
  SpatialTree.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SpatialTree',
    interfaces: [Collection]
  };
  function Comparator$ObjectLiteral_9(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_9.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_9.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_8 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function PointDistance() {
  }
  PointDistance.prototype.nodeSqrDistanceToPoint_m5117s$ = function (node, point) {
    return node.bounds.pointDistanceSqr_czzhiu$(point);
  };
  PointDistance.prototype.itemSqrDistanceToPoint_54x1zp$ = function (tree, item, point) {
    var dx = tree.itemAdapter.getCenterX_trkh7z$(item) - point.x;
    var dy = tree.itemAdapter.getCenterY_trkh7z$(item) - point.y;
    var dz = tree.itemAdapter.getCenterZ_trkh7z$(item) - point.z;
    return dx * dx + dy * dy + dz * dz;
  };
  PointDistance.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'PointDistance',
    interfaces: []
  };
  function BoundingSphereDistance() {
  }
  BoundingSphereDistance.prototype.itemSqrDistanceToPoint_54x1zp$ = function (tree, item, point) {
    var dx = tree.itemAdapter.getCenterX_trkh7z$(item) - point.x;
    var dy = tree.itemAdapter.getCenterY_trkh7z$(item) - point.y;
    var dz = tree.itemAdapter.getCenterZ_trkh7z$(item) - point.z;
    var rx = tree.itemAdapter.getSzX_trkh7z$(item) * 0.5;
    var ry = tree.itemAdapter.getSzY_trkh7z$(item) * 0.5;
    var rz = tree.itemAdapter.getSzZ_trkh7z$(item) * 0.5;
    var x = dx * dx + dy * dy + dz * dz;
    var tmp$ = Math_0.sqrt(x);
    var x_0 = rx * rx + ry * ry + rz * rz;
    var b = tmp$ - Math_0.sqrt(x_0);
    var d = Math_0.max(0.0, b);
    return d * d;
  };
  BoundingSphereDistance.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'BoundingSphereDistance',
    interfaces: [PointDistance]
  };
  function RayDistance() {
  }
  RayDistance.prototype.nodeSqrDistanceToRay_4lohg5$ = function (node, ray) {
    return node.bounds.hitDistanceSqr_nvyeur$(ray);
  };
  RayDistance.prototype.itemSqrDistanceToRay_t0er6w$ = function (tree, item, ray) {
    return ray.sqrDistanceToPoint_y2kzbl$(tree.itemAdapter.getCenterX_trkh7z$(item), tree.itemAdapter.getCenterY_trkh7z$(item), tree.itemAdapter.getCenterZ_trkh7z$(item));
  };
  RayDistance.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'RayDistance',
    interfaces: []
  };
  function SpatialTreeTraverser() {
  }
  SpatialTreeTraverser.prototype.traverse_m6hlto$ = function (tree) {
    this.traverseNode_h2y3v6$(tree, tree.root);
  };
  SpatialTreeTraverser.prototype.traverseNode_h2y3v6$ = function (tree, node) {
    if (node.isLeaf) {
      this.traverseLeaf_h2y3v6$(tree, node);
    }
     else {
      this.traverseChildren_h2y3v6$(tree, node);
    }
  };
  SpatialTreeTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SpatialTreeTraverser',
    interfaces: []
  };
  function CenterPointTraverser() {
    SpatialTreeTraverser.call(this);
    this.center = MutableVec3f_init();
    this.pointDistance = new CenterPointTraverser$pointDistance$ObjectLiteral();
  }
  CenterPointTraverser.prototype.setup_czzhiu$ = function (center) {
    this.center.set_czzhiu$(center);
  };
  function CenterPointTraverser$pointDistance$ObjectLiteral() {
  }
  CenterPointTraverser$pointDistance$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [PointDistance]
  };
  CenterPointTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CenterPointTraverser',
    interfaces: [SpatialTreeTraverser]
  };
  function InRadiusTraverser() {
    CenterPointTraverser.call(this);
    this.result = ArrayList_init_0();
    this.radius_45ks74$_0 = 1.0;
    this.radiusSqr = 1.0;
  }
  Object.defineProperty(InRadiusTraverser.prototype, 'radius', {
    get: function () {
      return this.radius_45ks74$_0;
    },
    set: function (radius) {
      this.radius_45ks74$_0 = radius;
    }
  });
  InRadiusTraverser.prototype.setup_2qa7tb$ = function (center, radius) {
    CenterPointTraverser.prototype.setup_czzhiu$.call(this, center);
    this.radius = radius;
    this.radiusSqr = radius * radius;
    return this;
  };
  InRadiusTraverser.prototype.traverse_m6hlto$ = function (tree) {
    this.result.clear();
    CenterPointTraverser.prototype.traverse_m6hlto$.call(this, tree);
  };
  InRadiusTraverser.prototype.traverseChildren_h2y3v6$ = function (tree, node) {
    var tmp$;
    tmp$ = node.children;
    for (var i = 0; i !== tmp$.size; ++i) {
      var child = node.children.get_za3lpa$(i);
      var dSqr = this.pointDistance.nodeSqrDistanceToPoint_m5117s$(child, this.center);
      if (dSqr < this.radiusSqr) {
        this.traverseNode_h2y3v6$(tree, child);
      }
    }
  };
  InRadiusTraverser.prototype.traverseLeaf_h2y3v6$ = function (tree, leaf) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$ = leaf.nodeRange;
    tmp$_0 = tmp$.first;
    tmp$_1 = tmp$.last;
    tmp$_2 = tmp$.step;
    for (var i = tmp$_0; i <= tmp$_1; i += tmp$_2) {
      var it = leaf.items.get_za3lpa$(i);
      if (this.pointDistance.itemSqrDistanceToPoint_54x1zp$(tree, it, this.center) < this.radiusSqr) {
        this.result.add_11rb$(it);
      }
    }
  };
  InRadiusTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InRadiusTraverser',
    interfaces: [CenterPointTraverser]
  };
  function BoundingSphereInRadiusTraverser() {
    InRadiusTraverser.call(this);
  }
  BoundingSphereInRadiusTraverser.prototype.traverseLeaf_h2y3v6$ = function (tree, leaf) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$ = leaf.nodeRange;
    tmp$_0 = tmp$.first;
    tmp$_1 = tmp$.last;
    tmp$_2 = tmp$.step;
    for (var i = tmp$_0; i <= tmp$_1; i += tmp$_2) {
      var it = leaf.items.get_za3lpa$(i);
      var rx = tree.itemAdapter.getSzX_trkh7z$(it) / 2;
      var ry = tree.itemAdapter.getSzY_trkh7z$(it) / 2;
      var rz = tree.itemAdapter.getSzZ_trkh7z$(it) / 2;
      var x = rx * rx + ry * ry + rz * rz;
      var itRadius = Math_0.sqrt(x);
      var x_0 = this.pointDistance.itemSqrDistanceToPoint_54x1zp$(tree, it, this.center);
      if (Math_0.sqrt(x_0) - itRadius < this.radius) {
        this.result.add_11rb$(it);
      }
    }
  };
  BoundingSphereInRadiusTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BoundingSphereInRadiusTraverser',
    interfaces: [InRadiusTraverser]
  };
  function KNearestTraverser() {
    KNearestTraverser$Companion_getInstance();
    CenterPointTraverser.call(this);
    this.k_lz5t59$_0 = 10;
    this.radiusSqr_9tgcx0$_0 = 9.9999998E17;
    this.result = ArrayList_init_0();
    this.maxDistance_1d7gth$_0 = 0.0;
    this.items_3hjtdu$_0 = new PriorityQueue(new Comparator$ObjectLiteral_9(compareBy$lambda_8(KNearestTraverser$items$lambda)));
    this.itemRecycler_b63bes$_0 = new ObjectPool(KNearestTraverser$itemRecycler$lambda);
    this.childLists_142w3h$_0 = new ChildNodesWithDistance(KNearestTraverser$childLists$lambda(this));
  }
  Object.defineProperty(KNearestTraverser.prototype, 'k', {
    get: function () {
      return this.k_lz5t59$_0;
    },
    set: function (k) {
      this.k_lz5t59$_0 = k;
    }
  });
  Object.defineProperty(KNearestTraverser.prototype, 'radiusSqr', {
    get: function () {
      return this.radiusSqr_9tgcx0$_0;
    },
    set: function (radiusSqr) {
      this.radiusSqr_9tgcx0$_0 = radiusSqr;
    }
  });
  Object.defineProperty(KNearestTraverser.prototype, 'maxDistance', {
    get: function () {
      return this.maxDistance_1d7gth$_0;
    },
    set: function (maxDistance) {
      this.maxDistance_1d7gth$_0 = maxDistance;
    }
  });
  KNearestTraverser.prototype.setup_w8bw21$$default = function (center, k, maxRadius) {
    CenterPointTraverser.prototype.setup_czzhiu$.call(this, center);
    this.k = k;
    this.radiusSqr = maxRadius * maxRadius;
    return this;
  };
  KNearestTraverser.prototype.setup_w8bw21$ = function (center, k, maxRadius, callback$default) {
    if (maxRadius === void 0)
      maxRadius = KNearestTraverser$Companion_getInstance().MAX_RADIUS;
    return callback$default ? callback$default(center, k, maxRadius) : this.setup_w8bw21$$default(center, k, maxRadius);
  };
  KNearestTraverser.prototype.traverse_m6hlto$ = function (tree) {
    CenterPointTraverser.prototype.traverse_m6hlto$.call(this, tree);
    this.result.clear();
    this.maxDistance = 0.0;
    if (!this.items_3hjtdu$_0.isEmpty()) {
      var x = this.items_3hjtdu$_0.peek().dSqr;
      this.maxDistance = Math_0.sqrt(x);
      while (!this.items_3hjtdu$_0.isEmpty()) {
        var $receiver = this.result;
        var element = this.items_3hjtdu$_0.poll().item;
        $receiver.add_11rb$(element);
      }
    }
    this.itemRecycler_b63bes$_0.recycleAll();
  };
  KNearestTraverser.prototype.traverseChildren_h2y3v6$ = function (tree, node) {
    var $this = this.childLists_142w3h$_0;
    var n = node.children.size;
    var $this_0 = $this.childListRecycler;
    var item = $this_0.get();
    var tmp$;
    if (item.size !== n) {
      if (item.size < n) {
        tmp$ = n - item.size | 0;
        for (var i = 1; i <= tmp$; i++) {
          var element = new ChildNodesWithDistance$Child($this, 0.0, null);
          item.add_11rb$(element);
        }
      }
       else {
        while (item.size > n) {
          item.removeAt_za3lpa$(get_lastIndex(item));
        }
      }
    }
    var tmp$_0, tmp$_1;
    tmp$_0 = node.children;
    for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
      item.get_za3lpa$(i_0).setChildNode_m31f86$(node.children.get_za3lpa$(i_0));
    }
    this.childLists_142w3h$_0.sortByDistance_ntxjn6$(item);
    tmp$_1 = node.children;
    for (var i_1 = 0; i_1 !== tmp$_1.size; ++i_1) {
      var tmp$_2;
      if (this.items_3hjtdu$_0.size < this.k) {
        tmp$_2 = this.radiusSqr;
      }
       else {
        tmp$_2 = this.items_3hjtdu$_0.peek().dSqr;
      }
      var maxDist = tmp$_2;
      var child = item.get_za3lpa$(i_1);
      if (child.dist < maxDist) {
        this.traverseNode_h2y3v6$(tree, ensureNotNull(child.node));
      }
       else {
        break;
      }
    }
    $this_0.recycle_trkh7z$(item);
  };
  KNearestTraverser.prototype.traverseLeaf_h2y3v6$ = function (tree, leaf) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$ = leaf.nodeRange;
    tmp$_0 = tmp$.first;
    tmp$_1 = tmp$.last;
    tmp$_2 = tmp$.step;
    for (var i = tmp$_0; i <= tmp$_1; i += tmp$_2) {
      var it = leaf.items.get_za3lpa$(i);
      var dSqr = this.pointDistance.itemSqrDistanceToPoint_54x1zp$(tree, it, this.center);
      if (dSqr < this.radiusSqr && (this.items_3hjtdu$_0.size < this.k || dSqr < this.items_3hjtdu$_0.peek().dSqr)) {
        this.insert_2aiobd$_0(it, dSqr);
      }
    }
  };
  KNearestTraverser.prototype.insert_2aiobd$_0 = function (value, dSqr) {
    var tmp$;
    if (this.items_3hjtdu$_0.size === this.k) {
      tmp$ = this.items_3hjtdu$_0.poll();
    }
     else {
      tmp$ = this.itemRecycler_b63bes$_0.get();
    }
    var insItem = tmp$;
    this.items_3hjtdu$_0.plusAssign_11rb$(insItem.set_mv9gn0$(value, dSqr));
  };
  function KNearestTraverser$Item() {
    this.item_zg5hxs$_0 = this.item_zg5hxs$_0;
    this.dSqr = 0.0;
  }
  Object.defineProperty(KNearestTraverser$Item.prototype, 'item', {
    get: function () {
      if (this.item_zg5hxs$_0 == null)
        return throwUPAE('item');
      return this.item_zg5hxs$_0;
    },
    set: function (item) {
      this.item_zg5hxs$_0 = item;
    }
  });
  KNearestTraverser$Item.prototype.set_mv9gn0$ = function (item, dSqr) {
    this.item = item;
    this.dSqr = dSqr;
    return this;
  };
  KNearestTraverser$Item.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Item',
    interfaces: []
  };
  function KNearestTraverser$Companion() {
    KNearestTraverser$Companion_instance = this;
    this.MAX_RADIUS = 1.8446743E19;
  }
  KNearestTraverser$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var KNearestTraverser$Companion_instance = null;
  function KNearestTraverser$Companion_getInstance() {
    if (KNearestTraverser$Companion_instance === null) {
      new KNearestTraverser$Companion();
    }
    return KNearestTraverser$Companion_instance;
  }
  function KNearestTraverser$items$lambda(it) {
    return it.dSqr;
  }
  function KNearestTraverser$itemRecycler$lambda() {
    return new KNearestTraverser$Item();
  }
  function KNearestTraverser$childLists$lambda(this$KNearestTraverser) {
    return function (it) {
      return this$KNearestTraverser.pointDistance.nodeSqrDistanceToPoint_m5117s$(it, this$KNearestTraverser.center);
    };
  }
  KNearestTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KNearestTraverser',
    interfaces: [CenterPointTraverser]
  };
  function NearestToRayTraverser() {
    SpatialTreeTraverser.call(this);
    this.ray = new Ray();
    this.nearest_pgibj6$_0 = null;
    this.distance_w4zyjn$_0 = 0.0;
    this.distanceSqr_n4v5rx$_0 = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    this.rayDistance = new NearestToRayTraverser$rayDistance$ObjectLiteral();
    this.childLists_pq2ts1$_0 = new ChildNodesWithDistance(NearestToRayTraverser$childLists$lambda(this));
  }
  Object.defineProperty(NearestToRayTraverser.prototype, 'nearest', {
    get: function () {
      return this.nearest_pgibj6$_0;
    },
    set: function (nearest) {
      this.nearest_pgibj6$_0 = nearest;
    }
  });
  Object.defineProperty(NearestToRayTraverser.prototype, 'distance', {
    get: function () {
      return this.distance_w4zyjn$_0;
    },
    set: function (distance) {
      this.distance_w4zyjn$_0 = distance;
    }
  });
  Object.defineProperty(NearestToRayTraverser.prototype, 'distanceSqr', {
    get: function () {
      return this.distanceSqr_n4v5rx$_0;
    },
    set: function (distanceSqr) {
      this.distanceSqr_n4v5rx$_0 = distanceSqr;
    }
  });
  NearestToRayTraverser.prototype.setup_nvyeur$ = function (ray) {
    this.ray.set_nvyeur$(ray);
    this.nearest = null;
    this.distanceSqr = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    return this;
  };
  NearestToRayTraverser.prototype.traverse_m6hlto$ = function (tree) {
    SpatialTreeTraverser.prototype.traverse_m6hlto$.call(this, tree);
    var tmp$;
    if (this.distanceSqr !== kotlin_js_internal_FloatCompanionObject.MAX_VALUE) {
      var x = this.distanceSqr;
      tmp$ = Math_0.sqrt(x);
    }
     else
      tmp$ = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    this.distance = tmp$;
  };
  NearestToRayTraverser.prototype.traverseChildren_h2y3v6$ = function (tree, node) {
    var $this = this.childLists_pq2ts1$_0;
    var n = node.children.size;
    var $this_0 = $this.childListRecycler;
    var item = $this_0.get();
    var tmp$;
    if (item.size !== n) {
      if (item.size < n) {
        tmp$ = n - item.size | 0;
        for (var i = 1; i <= tmp$; i++) {
          var element = new ChildNodesWithDistance$Child($this, 0.0, null);
          item.add_11rb$(element);
        }
      }
       else {
        while (item.size > n) {
          item.removeAt_za3lpa$(get_lastIndex(item));
        }
      }
    }
    var tmp$_0, tmp$_1;
    tmp$_0 = node.children;
    for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
      item.get_za3lpa$(i_0).setChildNode_m31f86$(node.children.get_za3lpa$(i_0));
    }
    this.childLists_pq2ts1$_0.sortByDistance_ntxjn6$(item);
    tmp$_1 = node.children;
    for (var i_1 = 0; i_1 !== tmp$_1.size; ++i_1) {
      var child = item.get_za3lpa$(i_1);
      if (child.dist < this.distanceSqr) {
        this.traverseNode_h2y3v6$(tree, ensureNotNull(child.node));
      }
       else {
        break;
      }
    }
    $this_0.recycle_trkh7z$(item);
  };
  NearestToRayTraverser.prototype.traverseLeaf_h2y3v6$ = function (tree, leaf) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$ = leaf.nodeRange;
    tmp$_0 = tmp$.first;
    tmp$_1 = tmp$.last;
    tmp$_2 = tmp$.step;
    for (var i = tmp$_0; i <= tmp$_1; i += tmp$_2) {
      var it = leaf.items.get_za3lpa$(i);
      var dSqr = this.rayDistance.itemSqrDistanceToRay_t0er6w$(tree, it, this.ray);
      if (dSqr < this.distanceSqr) {
        this.nearest = it;
        this.distanceSqr = dSqr;
      }
    }
  };
  function NearestToRayTraverser$rayDistance$ObjectLiteral() {
  }
  NearestToRayTraverser$rayDistance$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [RayDistance]
  };
  function NearestToRayTraverser$childLists$lambda(this$NearestToRayTraverser) {
    return function (it) {
      return this$NearestToRayTraverser.rayDistance.nodeSqrDistanceToRay_4lohg5$(it, this$NearestToRayTraverser.ray);
    };
  }
  NearestToRayTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NearestToRayTraverser',
    interfaces: [SpatialTreeTraverser]
  };
  function NearestEdgeToRayTraverser() {
    NearestToRayTraverser.call(this);
    this.rayDistance = new NearestEdgeToRayTraverser_init$ObjectLiteral();
  }
  function NearestEdgeToRayTraverser_init$ObjectLiteral() {
  }
  NearestEdgeToRayTraverser_init$ObjectLiteral.prototype.itemSqrDistanceToRay_t0er6w$ = function (tree, item, ray) {
    return item.rayDistanceSqr_nvyeur$(ray);
  };
  NearestEdgeToRayTraverser_init$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [RayDistance]
  };
  NearestEdgeToRayTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NearestEdgeToRayTraverser',
    interfaces: [NearestToRayTraverser]
  };
  function TriangleHitTraverser() {
    NearestToRayTraverser.call(this);
    this.hitPoint = MutableVec3f_init();
    this.rayDistance = new TriangleHitTraverser_init$ObjectLiteral();
  }
  Object.defineProperty(TriangleHitTraverser.prototype, 'isHit', {
    get: function () {
      return this.nearest != null;
    }
  });
  TriangleHitTraverser.prototype.setup_nvyeur$ = function (ray) {
    this.hitPoint.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    return NearestToRayTraverser.prototype.setup_nvyeur$.call(this, ray);
  };
  TriangleHitTraverser.prototype.traverse_m6hlto$ = function (tree) {
    NearestToRayTraverser.prototype.traverse_m6hlto$.call(this, tree);
    if (this.isHit) {
      this.hitPoint.set_czzhiu$(this.ray.direction).scale_mx4ult$(this.distance).add_czzhiu$(this.ray.origin);
    }
  };
  function TriangleHitTraverser_init$ObjectLiteral() {
  }
  TriangleHitTraverser_init$ObjectLiteral.prototype.itemSqrDistanceToRay_t0er6w$ = function (tree, item, ray) {
    var tmp$;
    var dist = item.hitDistance_nvyeur$(ray);
    if (dist < kotlin_js_internal_FloatCompanionObject.MAX_VALUE) {
      tmp$ = dist * dist;
    }
     else {
      return kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    }
    return tmp$;
  };
  TriangleHitTraverser_init$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [RayDistance]
  };
  TriangleHitTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TriangleHitTraverser',
    interfaces: [NearestToRayTraverser]
  };
  function ChildNodesWithDistance(childDist) {
    this.childDist = childDist;
    this.childListRecycler = new ObjectPool(ChildNodesWithDistance$childListRecycler$lambda);
    this.childComparator = new Comparator$ObjectLiteral_9(compareBy$lambda_8(ChildNodesWithDistance$childComparator$lambda));
  }
  ChildNodesWithDistance.prototype.use_5wl3jr$ = defineInlineFunction('kool.de.fabmax.kool.util.ChildNodesWithDistance.use_5wl3jr$', wrapFunction(function () {
    var ChildNodesWithDistance$ChildNodesWithDistance$Child_init = _.de.fabmax.kool.util.ChildNodesWithDistance.Child;
    var get_lastIndex = Kotlin.kotlin.collections.get_lastIndex_55thoc$;
    return function (n, block) {
      var $this = this.childListRecycler;
      var item = $this.get();
      var tmp$;
      if (item.size !== n) {
        if (item.size < n) {
          tmp$ = n - item.size | 0;
          for (var i = 1; i <= tmp$; i++) {
            var element = new ChildNodesWithDistance$ChildNodesWithDistance$Child_init(this, 0.0, null);
            item.add_11rb$(element);
          }
        }
         else {
          while (item.size > n) {
            item.removeAt_za3lpa$(get_lastIndex(item));
          }
        }
      }
      block(item);
      $this.recycle_trkh7z$(item);
    };
  }));
  ChildNodesWithDistance.prototype.sortByDistance_ntxjn6$ = function (childList) {
    sortWith(childList, this.childComparator);
  };
  function ChildNodesWithDistance$Child($outer, dist, node) {
    this.$outer = $outer;
    this.dist = dist;
    this.node = node;
  }
  ChildNodesWithDistance$Child.prototype.setChildNode_m31f86$ = function (node) {
    this.node = node;
    this.dist = this.$outer.childDist(node);
  };
  ChildNodesWithDistance$Child.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Child',
    interfaces: []
  };
  function ChildNodesWithDistance$childListRecycler$lambda() {
    return ArrayList_init_0();
  }
  function ChildNodesWithDistance$childComparator$lambda(it) {
    return it.dist;
  }
  ChildNodesWithDistance.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ChildNodesWithDistance',
    interfaces: []
  };
  function TouchGestureEvaluator() {
    TouchGestureEvaluator$Companion_getInstance();
    this.currentGesture_nrwzky$_0 = new TouchGestureEvaluator$Gesture();
    this.activePointers_ajelte$_0 = ArrayList_init_0();
    this.tmpVec1_vwccvm$_0 = MutableVec2f_init();
    this.tmpVec2_vwccwh$_0 = MutableVec2f_init();
    this.startPositions = LinkedHashMap_init();
    this.screenDpi = 96.0;
  }
  Object.defineProperty(TouchGestureEvaluator.prototype, 'currentGesture', {
    get: function () {
      return this.currentGesture_nrwzky$_0;
    },
    set: function (currentGesture) {
      this.currentGesture_nrwzky$_0 = currentGesture;
    }
  });
  TouchGestureEvaluator.prototype.evaluate_19cf9$ = function (pointerState, ctx) {
    this.screenDpi = ctx.screenDpi;
    pointerState.getActivePointers_j71cmr$(this.activePointers_ajelte$_0);
    if (this.activePointers_ajelte$_0.size > 1) {
      switch (this.currentGesture.type) {
        case 0:
          this.onGestureInit_mcn869$(this.activePointers_ajelte$_0);
          break;
        case -1:
          this.onDetermineGesture_mcn869$(this.activePointers_ajelte$_0);
          break;
        case 1:
          this.handleGesture_mcn869$(this.activePointers_ajelte$_0);
          break;
        case 2:
          this.handleGesture_mcn869$(this.activePointers_ajelte$_0);
          break;
      }
    }
     else {
      this.currentGesture.type = 0;
      this.startPositions.clear();
    }
  };
  TouchGestureEvaluator.prototype.onGestureInit_mcn869$ = function (pointers) {
    var tmp$;
    tmp$ = pointers.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var $receiver = this.startPositions;
      var key = element.id;
      var value = new Vec2f(element.x, element.y);
      $receiver.put_xwzc9p$(key, value);
    }
    this.currentGesture.type = -1;
  };
  function TouchGestureEvaluator$onDetermineGesture$lambda(closure$pointers) {
    return function (ptrId) {
      var $receiver = closure$pointers;
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (element.id === ptrId) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }
        }
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result == null;
    };
  }
  TouchGestureEvaluator.prototype.onDetermineGesture_mcn869$ = function (pointers) {
    removeAll_0(this.startPositions.keys, TouchGestureEvaluator$onDetermineGesture$lambda(pointers));
    var destination = ArrayList_init_0();
    var tmp$;
    tmp$ = pointers.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (!this.startPositions.containsKey_11rb$(element.id))
        destination.add_11rb$(element);
    }
    var tmp$_0;
    tmp$_0 = destination.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      var $receiver = this.startPositions;
      var key = element_0.id;
      var value = new Vec2f(element_0.x, element_0.y);
      $receiver.put_xwzc9p$(key, value);
    }
    if (this.isPinch_mcn869$(pointers))
      this.currentGesture.type = 1;
    else if (this.isTwoFingerDrag_mcn869$(pointers))
      this.currentGesture.type = 2;
  };
  TouchGestureEvaluator.prototype.isPinch_mcn869$ = function (pointers) {
    if (pointers.size === 2) {
      this.tmpVec1_vwccvm$_0.set_dleff0$(pointers.get_za3lpa$(0).x, pointers.get_za3lpa$(0).y).subtract_czzhjp$(ensureNotNull(this.startPositions.get_11rb$(pointers.get_za3lpa$(0).id)));
      this.tmpVec2_vwccwh$_0.set_dleff0$(pointers.get_za3lpa$(1).x, pointers.get_za3lpa$(1).y).subtract_czzhjp$(ensureNotNull(this.startPositions.get_11rb$(pointers.get_za3lpa$(1).id)));
      this.tmpVec1_vwccvm$_0.scale_mx4ult$(96.0 / this.screenDpi);
      this.tmpVec2_vwccwh$_0.scale_mx4ult$(96.0 / this.screenDpi);
      if (this.tmpVec1_vwccvm$_0.length() > 5.0 && this.tmpVec2_vwccwh$_0.length() > 5.0 && this.tmpVec1_vwccvm$_0.times_czzhjp$(this.tmpVec2_vwccwh$_0) < 0) {
        this.tmpVec1_vwccvm$_0.set_czzhjp$(ensureNotNull(this.startPositions.get_11rb$(pointers.get_za3lpa$(0).id)));
        this.tmpVec2_vwccwh$_0.set_czzhjp$(ensureNotNull(this.startPositions.get_11rb$(pointers.get_za3lpa$(1).id)));
        this.currentGesture.init_4s1jvi$(1, this.tmpVec1_vwccvm$_0, this.tmpVec2_vwccwh$_0, this.screenDpi);
        this.handleGesture_mcn869$(pointers);
        return true;
      }
    }
    return false;
  };
  TouchGestureEvaluator.prototype.isTwoFingerDrag_mcn869$ = function (pointers) {
    if (pointers.size === 2) {
      this.tmpVec1_vwccvm$_0.set_dleff0$(pointers.get_za3lpa$(0).x, pointers.get_za3lpa$(0).y).subtract_czzhjp$(ensureNotNull(this.startPositions.get_11rb$(pointers.get_za3lpa$(0).id)));
      this.tmpVec2_vwccwh$_0.set_dleff0$(pointers.get_za3lpa$(1).x, pointers.get_za3lpa$(1).y).subtract_czzhjp$(ensureNotNull(this.startPositions.get_11rb$(pointers.get_za3lpa$(1).id)));
      this.tmpVec1_vwccvm$_0.scale_mx4ult$(96.0 / this.screenDpi);
      this.tmpVec2_vwccwh$_0.scale_mx4ult$(96.0 / this.screenDpi);
      if (this.tmpVec1_vwccvm$_0.length() > 5.0 && this.tmpVec2_vwccwh$_0.length() > 5.0 && this.tmpVec1_vwccvm$_0.times_czzhjp$(this.tmpVec2_vwccwh$_0) > 0) {
        this.tmpVec1_vwccvm$_0.set_czzhjp$(ensureNotNull(this.startPositions.get_11rb$(pointers.get_za3lpa$(0).id)));
        this.tmpVec2_vwccwh$_0.set_czzhjp$(ensureNotNull(this.startPositions.get_11rb$(pointers.get_za3lpa$(1).id)));
        this.currentGesture.init_4s1jvi$(2, this.tmpVec1_vwccvm$_0, this.tmpVec2_vwccwh$_0, this.screenDpi);
        this.handleGesture_mcn869$(pointers);
        return true;
      }
    }
    return false;
  };
  TouchGestureEvaluator.prototype.handleGesture_mcn869$ = function (pointers) {
    if (pointers.size === 2) {
      this.tmpVec1_vwccvm$_0.set_dleff0$(pointers.get_za3lpa$(0).x, pointers.get_za3lpa$(0).y);
      this.tmpVec2_vwccwh$_0.set_dleff0$(pointers.get_za3lpa$(1).x, pointers.get_za3lpa$(1).y);
      this.currentGesture.update_enjys2$(this.tmpVec1_vwccvm$_0, this.tmpVec2_vwccwh$_0, this.screenDpi);
      pointers.get_za3lpa$(0).consume_za3lpa$();
      pointers.get_za3lpa$(1).consume_za3lpa$();
    }
     else {
      this.currentGesture.type = 0;
    }
  };
  function TouchGestureEvaluator$Companion() {
    TouchGestureEvaluator$Companion_instance = this;
    this.INVALID = 0;
    this.INDETERMINATE = -1;
    this.PINCH = 1;
    this.TWO_FINGER_DRAG = 2;
  }
  TouchGestureEvaluator$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TouchGestureEvaluator$Companion_instance = null;
  function TouchGestureEvaluator$Companion_getInstance() {
    if (TouchGestureEvaluator$Companion_instance === null) {
      new TouchGestureEvaluator$Companion();
    }
    return TouchGestureEvaluator$Companion_instance;
  }
  function TouchGestureEvaluator$Gesture() {
    this.centerStart = MutableVec2f_init();
    this.centerCurrent = MutableVec2f_init();
    this.centerShift = MutableVec2f_init();
    this.dCenter = MutableVec2f_init();
    this.pinchAmountStart = 0.0;
    this.pinchAmountCurrent = 0.0;
    this.dPinchAmount = 0.0;
    this.type = 0;
    this.numUpdates = 0;
  }
  Object.defineProperty(TouchGestureEvaluator$Gesture.prototype, 'pinchAmountRel', {
    get: function () {
      return (this.pinchAmountCurrent - this.pinchAmountStart) / this.pinchAmountStart + 1.0;
    }
  });
  TouchGestureEvaluator$Gesture.prototype.init_4s1jvi$ = function (type, ptr1, ptr2, dpi) {
    this.type = type;
    this.centerStart.set_czzhjp$(ptr1).add_czzhjp$(ptr2).scale_mx4ult$(0.5);
    this.centerCurrent.set_czzhjp$(this.centerStart);
    this.centerShift.set_czzhjp$(Vec2f$Companion_getInstance().ZERO);
    this.dCenter.set_czzhjp$(Vec2f$Companion_getInstance().ZERO);
    this.pinchAmountStart = ptr1.distance_czzhjp$(ptr2) * 96.0 / dpi;
    this.pinchAmountCurrent = this.pinchAmountStart;
    this.dPinchAmount = 0.0;
    this.numUpdates = 0;
  };
  TouchGestureEvaluator$Gesture.prototype.update_enjys2$ = function (ptr1, ptr2, dpi) {
    this.dCenter.set_czzhjp$(ptr1).add_czzhjp$(ptr2).scale_mx4ult$(0.5).subtract_czzhjp$(this.centerCurrent);
    this.centerCurrent.set_czzhjp$(ptr1).add_czzhjp$(ptr2).scale_mx4ult$(0.5);
    this.centerShift.set_czzhjp$(this.centerCurrent).subtract_czzhjp$(this.centerStart);
    var pinch = ptr1.distance_czzhjp$(ptr2) * 96.0 / dpi;
    this.dPinchAmount = pinch - this.pinchAmountCurrent;
    this.pinchAmountCurrent = pinch;
    this.numUpdates = this.numUpdates + 1 | 0;
  };
  TouchGestureEvaluator$Gesture.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Gesture',
    interfaces: []
  };
  TouchGestureEvaluator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TouchGestureEvaluator',
    interfaces: []
  };
  function TreeMap() {
    TreeMap$Companion_getInstance();
    this.cmp_ta02bd$_0 = TreeMap$cmp$lambda;
    this.root_g0oxgl$_0 = null;
    this.size_g153xi$_0 = 0;
  }
  Object.defineProperty(TreeMap.prototype, 'size', {
    get: function () {
      return this.size_g153xi$_0;
    },
    set: function (size) {
      this.size_g153xi$_0 = size;
    }
  });
  TreeMap.prototype.clear = function () {
    this.root_g0oxgl$_0 = null;
    this.size = 0;
  };
  TreeMap.prototype.isEmpty = function () {
    return this.size === 0;
  };
  TreeMap.prototype.firstEntry = function () {
    var p = this.root_g0oxgl$_0;
    if (p != null) {
      while ((p != null ? p.left : null) != null) {
        p = ensureNotNull(p.left);
      }
    }
    if (p == null) {
      throw NoSuchElementException_init();
    }
    return p;
  };
  TreeMap.prototype.firstValue = function () {
    return this.firstEntry().value;
  };
  TreeMap.prototype.firstKey = function () {
    return this.firstEntry().key;
  };
  TreeMap.prototype.lastEntry = function () {
    var p = this.root_g0oxgl$_0;
    if (p != null) {
      while ((p != null ? p.right : null) != null) {
        p = ensureNotNull(p.right);
      }
    }
    if (p == null) {
      throw NoSuchElementException_init();
    }
    return p;
  };
  TreeMap.prototype.lastValue = function () {
    return this.lastEntry().value;
  };
  TreeMap.prototype.lastKey = function () {
    return this.lastEntry().key;
  };
  TreeMap.prototype.put_xwzc9p$ = function (key, value) {
    var tmp$;
    if (this.root_g0oxgl$_0 == null) {
      this.root_g0oxgl$_0 = new TreeMap$MapEntry(this, key, value, null);
    }
     else {
      var t = this.root_g0oxgl$_0;
      var parent;
      do {
        parent = ensureNotNull(t);
        if (this.cmp_ta02bd$_0(key, t.key) < 0)
          tmp$ = t.left;
        else if (this.cmp_ta02bd$_0(key, t.key) > 0)
          tmp$ = t.right;
        else {
          return t.setValue_11rc$(value);
        }
        t = tmp$;
      }
       while (t != null);
      var e = new TreeMap$MapEntry(this, key, value, parent);
      if (this.cmp_ta02bd$_0(key, parent.key) < 0) {
        parent.left = e;
      }
       else {
        parent.right = e;
      }
      this.fixAfterInsertion_9avj2i$_0(e);
    }
    this.size = this.size + 1 | 0;
    return null;
  };
  TreeMap.prototype.remove_11rb$ = function (key) {
    var tmp$;
    var tmp$_0;
    if ((tmp$ = this.getEntry_iowdmk$_0(key)) != null) {
      var value = tmp$.value;
      this.deleteEntry_xb9s9j$_0(tmp$);
      tmp$_0 = value;
    }
     else
      tmp$_0 = null;
    return tmp$_0;
  };
  TreeMap.prototype.get_11rb$ = function (key) {
    var tmp$;
    return (tmp$ = this.getEntry_iowdmk$_0(key)) != null ? tmp$.value : null;
  };
  Object.defineProperty(TreeMap.prototype, 'entries', {
    get: function () {
      var tmp$;
      var entries = LinkedHashSet_init();
      if (!this.isEmpty()) {
        var e = (tmp$ = this.firstEntry()) == null || Kotlin.isType(tmp$, TreeMap$MapEntry) ? tmp$ : throwCCE();
        while (e != null) {
          var element = e;
          entries.add_11rb$(element);
          e = this.successor_78gl9k$_0(e);
        }
      }
      return entries;
    }
  });
  Object.defineProperty(TreeMap.prototype, 'keys', {
    get: function () {
      var tmp$;
      var keys = LinkedHashSet_init();
      if (!this.isEmpty()) {
        var e = (tmp$ = this.firstEntry()) == null || Kotlin.isType(tmp$, TreeMap$MapEntry) ? tmp$ : throwCCE();
        while (e != null) {
          var element = e.key;
          keys.add_11rb$(element);
          e = this.successor_78gl9k$_0(e);
        }
      }
      return keys;
    }
  });
  Object.defineProperty(TreeMap.prototype, 'values', {
    get: function () {
      var tmp$;
      var values = LinkedHashSet_init();
      if (!this.isEmpty()) {
        var e = (tmp$ = this.firstEntry()) == null || Kotlin.isType(tmp$, TreeMap$MapEntry) ? tmp$ : throwCCE();
        while (e != null) {
          var element = e.value;
          values.add_11rb$(element);
          e = this.successor_78gl9k$_0(e);
        }
      }
      return values;
    }
  });
  TreeMap.prototype.containsKey_11rb$ = function (key) {
    return this.getEntry_iowdmk$_0(key) != null;
  };
  TreeMap.prototype.containsValue_11rc$ = function (value) {
    return this.values.contains_11rb$(value);
  };
  TreeMap.prototype.putAll_a2k3zr$ = function (from) {
    var tmp$;
    tmp$ = from.entries.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      this.put_xwzc9p$(element.key, element.value);
    }
  };
  TreeMap.prototype.getEntry_iowdmk$_0 = function (key) {
    var tmp$;
    var p = this.root_g0oxgl$_0;
    while (p != null) {
      if (this.cmp_ta02bd$_0(key, p.key) < 0)
        tmp$ = p.left;
      else if (this.cmp_ta02bd$_0(key, p.key) > 0)
        tmp$ = p.right;
      else
        return p;
      p = tmp$;
    }
    return null;
  };
  TreeMap.prototype.deleteEntry_xb9s9j$_0 = function (entry) {
    var p = entry;
    this.size = this.size - 1 | 0;
    if (p.left != null && p.right != null) {
      var s = ensureNotNull(this.successor_78gl9k$_0(p));
      p.key = s.key;
      p.value = s.value;
      p = s;
    }
    var replacement = p.left != null ? p.left : p.right;
    if (replacement != null) {
      replacement.parent = p.parent;
      if (p.parent == null)
        this.root_g0oxgl$_0 = replacement;
      else if (p === ensureNotNull(p.parent).left)
        ensureNotNull(p.parent).left = replacement;
      else
        ensureNotNull(p.parent).right = replacement;
      p.left = null;
      p.right = null;
      p.parent = null;
      if (p.color === TreeMap$Companion_getInstance().BLACK_0) {
        this.fixAfterDeletion_6ssue5$_0(replacement);
      }
    }
     else if (p.parent == null) {
      this.root_g0oxgl$_0 = null;
    }
     else {
      if (p.color === TreeMap$Companion_getInstance().BLACK_0) {
        this.fixAfterDeletion_6ssue5$_0(p);
      }
      if (p.parent != null) {
        if (p === ensureNotNull(p.parent).left) {
          ensureNotNull(p.parent).left = null;
        }
         else if (p === ensureNotNull(p.parent).right) {
          ensureNotNull(p.parent).right = null;
        }
        p.parent = null;
      }
    }
  };
  TreeMap.prototype.fixAfterInsertion_9avj2i$_0 = function (entry) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20, tmp$_21, tmp$_22, tmp$_23;
    var x = entry;
    x != null ? (x.color = TreeMap$Companion_getInstance().RED_0) : null;
    while (x != null && !equals(x, this.root_g0oxgl$_0) && this.color_3jivvv$_0(x.parent) === TreeMap$Companion_getInstance().RED_0) {
      if (x.parent === ((tmp$_0 = (tmp$ = x.parent) != null ? tmp$.parent : null) != null ? tmp$_0.left : null)) {
        var y = (tmp$_2 = (tmp$_1 = x.parent) != null ? tmp$_1.parent : null) != null ? tmp$_2.right : null;
        if (this.color_3jivvv$_0(y) === TreeMap$Companion_getInstance().RED_0) {
          (tmp$_3 = x.parent) != null ? (tmp$_3.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          y != null ? (y.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          (tmp$_5 = (tmp$_4 = x.parent) != null ? tmp$_4.parent : null) != null ? (tmp$_5.color = TreeMap$Companion_getInstance().RED_0) : null;
          x = (tmp$_6 = x.parent) != null ? tmp$_6.parent : null;
        }
         else {
          if (x === ((tmp$_7 = x.parent) != null ? tmp$_7.right : null)) {
            x = x.parent;
            this.rotateLeft_xtlw1j$_0(x);
          }
          (tmp$_8 = x != null ? x.parent : null) != null ? (tmp$_8.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          (tmp$_10 = (tmp$_9 = x != null ? x.parent : null) != null ? tmp$_9.parent : null) != null ? (tmp$_10.color = TreeMap$Companion_getInstance().RED_0) : null;
          this.rotateRight_ltp9a$_0((tmp$_11 = x != null ? x.parent : null) != null ? tmp$_11.parent : null);
        }
      }
       else {
        var y_0 = (tmp$_13 = (tmp$_12 = x.parent) != null ? tmp$_12.parent : null) != null ? tmp$_13.left : null;
        if (this.color_3jivvv$_0(y_0) === TreeMap$Companion_getInstance().RED_0) {
          (tmp$_14 = x.parent) != null ? (tmp$_14.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          y_0 != null ? (y_0.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          (tmp$_16 = (tmp$_15 = x.parent) != null ? tmp$_15.parent : null) != null ? (tmp$_16.color = TreeMap$Companion_getInstance().RED_0) : null;
          x = (tmp$_17 = x.parent) != null ? tmp$_17.parent : null;
        }
         else {
          if (x === ((tmp$_18 = x.parent) != null ? tmp$_18.left : null)) {
            x = x.parent;
            this.rotateRight_ltp9a$_0(x);
          }
          (tmp$_19 = x != null ? x.parent : null) != null ? (tmp$_19.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          (tmp$_21 = (tmp$_20 = x != null ? x.parent : null) != null ? tmp$_20.parent : null) != null ? (tmp$_21.color = TreeMap$Companion_getInstance().RED_0) : null;
          this.rotateLeft_xtlw1j$_0((tmp$_22 = x != null ? x.parent : null) != null ? tmp$_22.parent : null);
        }
      }
    }
    (tmp$_23 = this.root_g0oxgl$_0) != null ? (tmp$_23.color = TreeMap$Companion_getInstance().BLACK_0) : null;
  };
  TreeMap.prototype.fixAfterDeletion_6ssue5$_0 = function (entry) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13;
    var x = entry;
    while (!equals(x, this.root_g0oxgl$_0) && x.color === TreeMap$Companion_getInstance().BLACK_0) {
      if (equals(x, (tmp$ = x.parent) != null ? tmp$.left : null)) {
        var sib = (tmp$_0 = x.parent) != null ? tmp$_0.right : null;
        if (this.color_3jivvv$_0(sib) === TreeMap$Companion_getInstance().RED_0) {
          sib != null ? (sib.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          (tmp$_1 = x.parent) != null ? (tmp$_1.color = TreeMap$Companion_getInstance().RED_0) : null;
          this.rotateLeft_xtlw1j$_0(x.parent);
          sib = (tmp$_2 = x.parent) != null ? tmp$_2.right : null;
        }
        if (this.color_3jivvv$_0(sib != null ? sib.left : null) === TreeMap$Companion_getInstance().BLACK_0 && this.color_3jivvv$_0(sib != null ? sib.right : null) === TreeMap$Companion_getInstance().BLACK_0) {
          sib != null ? (sib.color = TreeMap$Companion_getInstance().RED_0) : null;
          x = ensureNotNull(x.parent);
        }
         else {
          if (this.color_3jivvv$_0(sib != null ? sib.right : null) === TreeMap$Companion_getInstance().BLACK_0) {
            (tmp$_3 = sib != null ? sib.left : null) != null ? (tmp$_3.color = TreeMap$Companion_getInstance().BLACK_0) : null;
            sib != null ? (sib.color = TreeMap$Companion_getInstance().RED_0) : null;
            this.rotateRight_ltp9a$_0(sib);
            sib = (tmp$_4 = x.parent) != null ? tmp$_4.right : null;
          }
          sib != null ? (sib.color = this.color_3jivvv$_0(x.parent)) : null;
          (tmp$_5 = x.parent) != null ? (tmp$_5.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          (tmp$_6 = sib != null ? sib.right : null) != null ? (tmp$_6.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          this.rotateLeft_xtlw1j$_0(x.parent);
          x = ensureNotNull(this.root_g0oxgl$_0);
        }
      }
       else {
        var sib_0 = (tmp$_7 = x.parent) != null ? tmp$_7.left : null;
        if (this.color_3jivvv$_0(sib_0) === TreeMap$Companion_getInstance().RED_0) {
          sib_0 != null ? (sib_0.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          (tmp$_8 = sib_0 != null ? sib_0.parent : null) != null ? (tmp$_8.color = TreeMap$Companion_getInstance().RED_0) : null;
          this.rotateRight_ltp9a$_0(x.parent);
          sib_0 = (tmp$_9 = x.parent) != null ? tmp$_9.left : null;
        }
        if (this.color_3jivvv$_0(sib_0 != null ? sib_0.right : null) === TreeMap$Companion_getInstance().BLACK_0 && this.color_3jivvv$_0(sib_0 != null ? sib_0.left : null) === TreeMap$Companion_getInstance().BLACK_0) {
          sib_0 != null ? (sib_0.color = TreeMap$Companion_getInstance().RED_0) : null;
          x = ensureNotNull(x.parent);
        }
         else {
          if (this.color_3jivvv$_0(sib_0 != null ? sib_0.left : null) === TreeMap$Companion_getInstance().BLACK_0) {
            (tmp$_10 = sib_0 != null ? sib_0.right : null) != null ? (tmp$_10.color = TreeMap$Companion_getInstance().BLACK_0) : null;
            sib_0 != null ? (sib_0.color = TreeMap$Companion_getInstance().RED_0) : null;
            this.rotateLeft_xtlw1j$_0(sib_0);
            sib_0 = (tmp$_11 = x.parent) != null ? tmp$_11.left : null;
          }
          sib_0 != null ? (sib_0.color = this.color_3jivvv$_0(x.parent)) : null;
          (tmp$_12 = x.parent) != null ? (tmp$_12.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          (tmp$_13 = sib_0 != null ? sib_0.left : null) != null ? (tmp$_13.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          this.rotateRight_ltp9a$_0(x.parent);
          x = ensureNotNull(this.root_g0oxgl$_0);
        }
      }
    }
    x.color = TreeMap$Companion_getInstance().BLACK_0;
  };
  TreeMap.prototype.rotateLeft_xtlw1j$_0 = function (p) {
    var tmp$, tmp$_0, tmp$_1;
    if (p != null) {
      var r = p.right;
      p.right = r != null ? r.left : null;
      if ((r != null ? r.left : null) != null) {
        (tmp$ = r.left) != null ? (tmp$.parent = p) : null;
      }
      r != null ? (r.parent = p.parent) : null;
      if (p.parent == null)
        this.root_g0oxgl$_0 = r;
      else {
        var tmp$_2;
        if (((tmp$_2 = p.parent) != null ? tmp$_2.left : null) === p)
          (tmp$_0 = p.parent) != null ? (tmp$_0.left = r) : null;
        else
          (tmp$_1 = p.parent) != null ? (tmp$_1.right = r) : null;
      }
      r != null ? (r.left = p) : null;
      p.parent = r;
    }
  };
  TreeMap.prototype.rotateRight_ltp9a$_0 = function (p) {
    var tmp$, tmp$_0, tmp$_1;
    if (p != null) {
      var l = p.left;
      p.left = l != null ? l.right : null;
      if ((l != null ? l.right : null) != null) {
        (tmp$ = l.right) != null ? (tmp$.parent = p) : null;
      }
      l != null ? (l.parent = p.parent) : null;
      if (p.parent == null)
        this.root_g0oxgl$_0 = l;
      else {
        var tmp$_2;
        if (((tmp$_2 = p.parent) != null ? tmp$_2.right : null) === p)
          (tmp$_0 = p.parent) != null ? (tmp$_0.right = l) : null;
        else
          (tmp$_1 = p.parent) != null ? (tmp$_1.left = l) : null;
      }
      l != null ? (l.right = p) : null;
      p.parent = l;
    }
  };
  TreeMap.prototype.color_3jivvv$_0 = function ($receiver) {
    var tmp$;
    return (tmp$ = $receiver != null ? $receiver.color : null) != null ? tmp$ : TreeMap$Companion_getInstance().BLACK_0;
  };
  TreeMap.prototype.successor_78gl9k$_0 = function ($receiver) {
    var tmp$;
    if ($receiver == null)
      tmp$ = null;
    else if ($receiver.right != null) {
      var p = ensureNotNull($receiver.right);
      while (p.left != null) {
        p = ensureNotNull(p.left);
      }
      tmp$ = p;
    }
     else {
      var p_0 = $receiver.parent;
      var ch = $receiver;
      while (p_0 != null && equals(ch, p_0.right)) {
        ch = p_0;
        p_0 = p_0.parent;
      }
      tmp$ = p_0;
    }
    return tmp$;
  };
  TreeMap.prototype.predecessor_3j2kg5$_0 = function ($receiver) {
    var tmp$;
    if ($receiver == null)
      tmp$ = null;
    else if ($receiver.left != null) {
      var p = ensureNotNull($receiver.left);
      while (p.right != null) {
        p = ensureNotNull(p.right);
      }
      tmp$ = p;
    }
     else {
      var p_0 = $receiver.parent;
      var ch = $receiver;
      while (p_0 != null && equals(ch, p_0.left)) {
        ch = p_0;
        p_0 = p_0.parent;
      }
      tmp$ = p_0;
    }
    return tmp$;
  };
  function TreeMap$MapEntry($outer, key, value, parent) {
    this.$outer = $outer;
    this.parent = parent;
    this.key_qa5ejk$_0 = key;
    this.value_owqnua$_0 = value;
    this.left = null;
    this.right = null;
    this.color = TreeMap$Companion_getInstance().BLACK_0;
  }
  Object.defineProperty(TreeMap$MapEntry.prototype, 'key', {
    get: function () {
      return this.key_qa5ejk$_0;
    },
    set: function (key) {
      this.key_qa5ejk$_0 = key;
    }
  });
  Object.defineProperty(TreeMap$MapEntry.prototype, 'value', {
    get: function () {
      return this.value_owqnua$_0;
    },
    set: function (value) {
      this.value_owqnua$_0 = value;
    }
  });
  TreeMap$MapEntry.prototype.setValue_11rc$ = function (newValue) {
    var old = this.value;
    this.value = newValue;
    return old;
  };
  TreeMap$MapEntry.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MapEntry',
    interfaces: [MutableMap$MutableEntry]
  };
  function TreeMap$Companion() {
    TreeMap$Companion_instance = this;
    this.BLACK_0 = false;
    this.RED_0 = true;
  }
  TreeMap$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TreeMap$Companion_instance = null;
  function TreeMap$Companion_getInstance() {
    if (TreeMap$Companion_instance === null) {
      new TreeMap$Companion();
    }
    return TreeMap$Companion_instance;
  }
  function TreeMap$cmp$lambda(a, b) {
    var tmp$;
    return Kotlin.compareTo(Kotlin.isComparable(tmp$ = a) ? tmp$ : throwCCE(), b);
  }
  TreeMap.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TreeMap',
    interfaces: [MutableMap]
  };
  function UniqueId() {
    UniqueId_instance = this;
    this.nextId_0 = L1;
    this.idLock_0 = new Any();
  }
  UniqueId.prototype.nextId = function () {
    this.idLock_0;
    return this.nextId_0 = this.nextId_0.inc(), this.nextId_0;
  };
  UniqueId.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'UniqueId',
    interfaces: []
  };
  var UniqueId_instance = null;
  function UniqueId_getInstance() {
    if (UniqueId_instance === null) {
      new UniqueId();
    }
    return UniqueId_instance;
  }
  function glActiveTexture(texture) {
    JsImpl_getInstance().gl.activeTexture(texture);
  }
  function glAttachShader(program, shader) {
    var tmp$, tmp$_0;
    JsImpl_getInstance().gl.attachShader(Kotlin.isType(tmp$ = program.glRef, WebGLProgram) ? tmp$ : throwCCE(), Kotlin.isType(tmp$_0 = shader.glRef, WebGLShader) ? tmp$_0 : throwCCE());
  }
  function glBindBuffer(target, buffer) {
    var tmp$;
    JsImpl_getInstance().gl.bindBuffer(target, (tmp$ = buffer != null ? buffer.glRef : null) == null || Kotlin.isType(tmp$, WebGLBuffer) ? tmp$ : throwCCE());
  }
  function glBindFramebuffer(target, framebuffer) {
    var tmp$;
    JsImpl_getInstance().gl.bindFramebuffer(target, (tmp$ = framebuffer != null ? framebuffer.glRef : null) == null || Kotlin.isType(tmp$, WebGLFramebuffer) ? tmp$ : throwCCE());
  }
  function glBindRenderbuffer(target, renderbuffer) {
    var tmp$;
    JsImpl_getInstance().gl.bindRenderbuffer(target, (tmp$ = renderbuffer != null ? renderbuffer.glRef : null) == null || Kotlin.isType(tmp$, WebGLRenderbuffer) ? tmp$ : throwCCE());
  }
  function glBindTexture(target, texture) {
    var tmp$;
    JsImpl_getInstance().gl.bindTexture(target, (tmp$ = texture != null ? texture.glRef : null) == null || Kotlin.isType(tmp$, WebGLTexture) ? tmp$ : throwCCE());
  }
  function glBlendFunc(sfactor, dfactor) {
    JsImpl_getInstance().gl.blendFunc(sfactor, dfactor);
  }
  function glBufferData(target, data, usage) {
    var tmp$;
    JsImpl_getInstance().gl.bufferData(target, (Kotlin.isType(tmp$ = data, Uint8BufferImpl) ? tmp$ : throwCCE()).buffer, usage);
  }
  function glBufferData_0(target, data, usage) {
    var tmp$;
    JsImpl_getInstance().gl.bufferData(target, (Kotlin.isType(tmp$ = data, Uint16BufferImpl) ? tmp$ : throwCCE()).buffer, usage);
  }
  function glBufferData_1(target, data, usage) {
    var tmp$;
    JsImpl_getInstance().gl.bufferData(target, (Kotlin.isType(tmp$ = data, Uint32BufferImpl) ? tmp$ : throwCCE()).buffer, usage);
  }
  function glBufferData_2(target, data, usage) {
    var tmp$;
    JsImpl_getInstance().gl.bufferData(target, (Kotlin.isType(tmp$ = data, Float32BufferImpl) ? tmp$ : throwCCE()).buffer, usage);
  }
  function glCheckFramebufferStatus(target) {
    return JsImpl_getInstance().gl.checkFramebufferStatus(target);
  }
  function glClear(mask) {
    JsImpl_getInstance().gl.clear(mask);
  }
  function glClearColor(red, green, blue, alpha) {
    JsImpl_getInstance().gl.clearColor(red, green, blue, alpha);
  }
  function glCompileShader(shader) {
    var tmp$;
    JsImpl_getInstance().gl.compileShader(Kotlin.isType(tmp$ = shader.glRef, WebGLShader) ? tmp$ : throwCCE());
  }
  function glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) {
    JsImpl_getInstance().gl.copyTexImage2D(target, level, internalformat, x, y, width, height, border);
  }
  function glCreateBuffer() {
    return ensureNotNull(JsImpl_getInstance().gl.createBuffer());
  }
  function glCreateFramebuffer() {
    return ensureNotNull(JsImpl_getInstance().gl.createFramebuffer());
  }
  function glCreateRenderbuffer() {
    return ensureNotNull(JsImpl_getInstance().gl.createRenderbuffer());
  }
  function glCreateProgram() {
    return ensureNotNull(JsImpl_getInstance().gl.createProgram());
  }
  function glCreateShader(type) {
    return ensureNotNull(JsImpl_getInstance().gl.createShader(type));
  }
  function glCreateTexture() {
    return ensureNotNull(JsImpl_getInstance().gl.createTexture());
  }
  function glCullFace(mode) {
    JsImpl_getInstance().gl.cullFace(mode);
  }
  function glDeleteBuffer(buffer) {
    var tmp$;
    JsImpl_getInstance().gl.deleteBuffer(Kotlin.isType(tmp$ = buffer.glRef, WebGLBuffer) ? tmp$ : throwCCE());
  }
  function glDeleteFramebuffer(framebuffer) {
    var tmp$;
    JsImpl_getInstance().gl.deleteFramebuffer(Kotlin.isType(tmp$ = framebuffer.glRef, WebGLFramebuffer) ? tmp$ : throwCCE());
  }
  function glDeleteProgram(program) {
    var tmp$;
    JsImpl_getInstance().gl.deleteProgram(Kotlin.isType(tmp$ = program.glRef, WebGLProgram) ? tmp$ : throwCCE());
  }
  function glDeleteRenderbuffer(renderbuffer) {
    var tmp$;
    JsImpl_getInstance().gl.deleteRenderbuffer(Kotlin.isType(tmp$ = renderbuffer.glRef, WebGLRenderbuffer) ? tmp$ : throwCCE());
  }
  function glDeleteShader(shader) {
    var tmp$;
    JsImpl_getInstance().gl.deleteShader(Kotlin.isType(tmp$ = shader.glRef, WebGLShader) ? tmp$ : throwCCE());
  }
  function glDeleteTexture(texture) {
    var tmp$;
    JsImpl_getInstance().gl.deleteTexture(Kotlin.isType(tmp$ = texture.glRef, WebGLTexture) ? tmp$ : throwCCE());
  }
  function glDepthFunc(func) {
    JsImpl_getInstance().gl.depthFunc(func);
  }
  function glDepthMask(enabled) {
    JsImpl_getInstance().gl.depthMask(enabled);
  }
  function glDisable(cap) {
    JsImpl_getInstance().gl.disable(cap);
  }
  function glDisableVertexAttribArray(index) {
    JsImpl_getInstance().gl.disableVertexAttribArray(index);
  }
  function glDrawBuffer(buf) {
    var tmp$;
    if (JsImpl_getInstance().isWebGl2Context) {
      (Kotlin.isType(tmp$ = JsImpl_getInstance().gl, WebGL2RenderingContext) ? tmp$ : throwCCE()).drawBuffers(new Int32Array([buf]));
    }
     else {
      alert('Your browser does not support WebGL2');
      throw KoolException_init('This function requires WebGL2 support');
    }
  }
  function glDrawElements(mode, count, type, offset) {
    JsImpl_getInstance().gl.drawElements(mode, count, type, offset);
  }
  function glDrawElementsInstanced(mode, count, type, indicesOffset, instanceCount) {
    var tmp$;
    if (JsImpl_getInstance().isWebGl2Context) {
      (Kotlin.isType(tmp$ = JsImpl_getInstance().gl, WebGL2RenderingContext) ? tmp$ : throwCCE()).drawElementsInstanced(mode, count, type, indicesOffset, instanceCount);
    }
     else {
      alert('Your browser does not support WebGL2');
      throw KoolException_init('This function requires WebGL2 support');
    }
  }
  function glEnable(cap) {
    JsImpl_getInstance().gl.enable(cap);
  }
  function glEnableVertexAttribArray(index) {
    JsImpl_getInstance().gl.enableVertexAttribArray(index);
  }
  function glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
    var tmp$;
    JsImpl_getInstance().gl.framebufferRenderbuffer(target, attachment, renderbuffertarget, Kotlin.isType(tmp$ = renderbuffer.glRef, WebGLRenderbuffer) ? tmp$ : throwCCE());
  }
  function glFramebufferTexture2D(target, attachment, textarget, texture, level) {
    var tmp$;
    JsImpl_getInstance().gl.framebufferTexture2D(target, attachment, textarget, Kotlin.isType(tmp$ = texture.glRef, WebGLTexture) ? tmp$ : throwCCE(), level);
  }
  function glGenerateMipmap(target) {
    JsImpl_getInstance().gl.generateMipmap(target);
  }
  function glGetAttribLocation(program, name) {
    var tmp$;
    return JsImpl_getInstance().gl.getAttribLocation(Kotlin.isType(tmp$ = program.glRef, WebGLProgram) ? tmp$ : throwCCE(), name);
  }
  function glGetError() {
    return JsImpl_getInstance().gl.getError();
  }
  function glGetProgrami(program, pname) {
    var tmp$, tmp$_0, tmp$_1;
    var res = JsImpl_getInstance().gl.getProgramParameter(Kotlin.isType(tmp$ = program.glRef, WebGLProgram) ? tmp$ : throwCCE(), pname);
    if (pname === 35714) {
      if (typeof (tmp$_0 = res) === 'boolean' ? tmp$_0 : throwCCE()) {
        tmp$_1 = 1;
      }
       else {
        tmp$_1 = 0;
      }
      return tmp$_1;
    }
    return 0;
  }
  function glGetShaderi(shader, pname) {
    var tmp$, tmp$_0, tmp$_1;
    var res = JsImpl_getInstance().gl.getShaderParameter(Kotlin.isType(tmp$ = shader.glRef, WebGLShader) ? tmp$ : throwCCE(), pname);
    if (pname === 35713) {
      if (typeof (tmp$_0 = res) === 'boolean' ? tmp$_0 : throwCCE()) {
        tmp$_1 = 1;
      }
       else {
        tmp$_1 = 0;
      }
      return tmp$_1;
    }
    return 0;
  }
  function glGetProgramInfoLog(program) {
    var tmp$, tmp$_0;
    return (tmp$_0 = JsImpl_getInstance().gl.getProgramInfoLog(Kotlin.isType(tmp$ = program.glRef, WebGLProgram) ? tmp$ : throwCCE())) != null ? tmp$_0 : '';
  }
  function glGetShaderInfoLog(shader) {
    var tmp$, tmp$_0;
    return (tmp$_0 = JsImpl_getInstance().gl.getShaderInfoLog(Kotlin.isType(tmp$ = shader.glRef, WebGLShader) ? tmp$ : throwCCE())) != null ? tmp$_0 : '';
  }
  function glGetUniformLocation(program, name) {
    var tmp$;
    return JsImpl_getInstance().gl.getUniformLocation(Kotlin.isType(tmp$ = program.glRef, WebGLProgram) ? tmp$ : throwCCE(), name);
  }
  function glLineWidth(width) {
    JsImpl_getInstance().gl.lineWidth(width);
  }
  function glLinkProgram(program) {
    var tmp$;
    JsImpl_getInstance().gl.linkProgram(Kotlin.isType(tmp$ = program.glRef, WebGLProgram) ? tmp$ : throwCCE());
  }
  function glPointSize(size) {
  }
  function glReadBuffer(src) {
    var tmp$;
    if (JsImpl_getInstance().isWebGl2Context) {
      (Kotlin.isType(tmp$ = JsImpl_getInstance().gl, WebGL2RenderingContext) ? tmp$ : throwCCE()).readBuffer(src);
    }
     else {
      alert('Your browser does not support WebGL2');
      throw KoolException_init('This function requires WebGL2 support');
    }
  }
  function glRenderbufferStorage(target, internalformat, width, height) {
    JsImpl_getInstance().gl.renderbufferStorage(target, internalformat, width, height);
  }
  function glRenderbufferStorageMultisample(target, samples, internalformat, width, height) {
    var tmp$;
    if (JsImpl_getInstance().isWebGl2Context) {
      (Kotlin.isType(tmp$ = JsImpl_getInstance().gl, WebGL2RenderingContext) ? tmp$ : throwCCE()).renderbufferStorageMultisample(target, samples, internalformat, width, height);
    }
     else {
      alert('Your browser does not support WebGL2');
      throw KoolException_init('This function requires WebGL2 support');
    }
  }
  function glShaderSource(shader, source) {
    var tmp$;
    JsImpl_getInstance().gl.shaderSource(Kotlin.isType(tmp$ = shader.glRef, WebGLShader) ? tmp$ : throwCCE(), source);
  }
  function glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) {
    var tmp$, tmp$_0;
    JsImpl_getInstance().gl.texImage2D(target, level, internalformat, width, height, border, format, type, (tmp$_0 = (tmp$ = pixels) == null || Kotlin.isType(tmp$, Uint8BufferImpl) ? tmp$ : throwCCE()) != null ? tmp$_0.buffer : null);
  }
  function glTexImage2D_0(target, level, internalformat, format, type, pixels) {
    var tmp$;
    JsImpl_getInstance().gl.pixelStorei(WebGLRenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);
    JsImpl_getInstance().gl.texImage2D(target, level, internalformat, format, type, (tmp$ = pixels) == null || Kotlin.isType(tmp$, HTMLImageElement) ? tmp$ : throwCCE());
    JsImpl_getInstance().gl.pixelStorei(WebGLRenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);
  }
  function glTexParameteri(target, pname, param) {
    JsImpl_getInstance().gl.texParameteri(target, pname, param);
  }
  function glUniform1f(location, x) {
    var tmp$;
    JsImpl_getInstance().gl.uniform1f((tmp$ = location) == null || Kotlin.isType(tmp$, WebGLUniformLocation) ? tmp$ : throwCCE(), x);
  }
  function glUniform1fv(location, x) {
    var tmp$;
    var array = Array_0(x.length);
    var tmp$_0;
    tmp$_0 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_0; i++) {
      array[i] = x[i];
    }
    var tmp = array;
    JsImpl_getInstance().gl.uniform1fv((tmp$ = location) == null || Kotlin.isType(tmp$, WebGLUniformLocation) ? tmp$ : throwCCE(), tmp);
  }
  function glUniform1i(location, x) {
    var tmp$;
    JsImpl_getInstance().gl.uniform1i((tmp$ = location) == null || Kotlin.isType(tmp$, WebGLUniformLocation) ? tmp$ : throwCCE(), x);
  }
  function glUniform1iv(location, x) {
    var tmp$;
    var array = Array_0(x.length);
    var tmp$_0;
    tmp$_0 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_0; i++) {
      array[i] = x[i];
    }
    var tmp = array;
    JsImpl_getInstance().gl.uniform1iv((tmp$ = location) == null || Kotlin.isType(tmp$, WebGLUniformLocation) ? tmp$ : throwCCE(), tmp);
  }
  function glUniform2f(location, x, y) {
    var tmp$;
    JsImpl_getInstance().gl.uniform2f((tmp$ = location) == null || Kotlin.isType(tmp$, WebGLUniformLocation) ? tmp$ : throwCCE(), x, y);
  }
  function glUniform2fv(location, value) {
    var tmp$, tmp$_0;
    JsImpl_getInstance().gl.uniform2fv((tmp$ = location) == null || Kotlin.isType(tmp$, WebGLUniformLocation) ? tmp$ : throwCCE(), (Kotlin.isType(tmp$_0 = value, Float32BufferImpl) ? tmp$_0 : throwCCE()).buffer);
  }
  function glUniform3f(location, x, y, z) {
    var tmp$;
    JsImpl_getInstance().gl.uniform3f((tmp$ = location) == null || Kotlin.isType(tmp$, WebGLUniformLocation) ? tmp$ : throwCCE(), x, y, z);
  }
  function glUniform3fv(location, value) {
    var tmp$, tmp$_0;
    JsImpl_getInstance().gl.uniform3fv((tmp$ = location) == null || Kotlin.isType(tmp$, WebGLUniformLocation) ? tmp$ : throwCCE(), (Kotlin.isType(tmp$_0 = value, Float32BufferImpl) ? tmp$_0 : throwCCE()).buffer);
  }
  function glUniform4f(location, x, y, z, w) {
    var tmp$;
    JsImpl_getInstance().gl.uniform4f((tmp$ = location) == null || Kotlin.isType(tmp$, WebGLUniformLocation) ? tmp$ : throwCCE(), x, y, z, w);
  }
  function glUniform4fv(location, value) {
    var tmp$, tmp$_0;
    JsImpl_getInstance().gl.uniform4fv((tmp$ = location) == null || Kotlin.isType(tmp$, WebGLUniformLocation) ? tmp$ : throwCCE(), (Kotlin.isType(tmp$_0 = value, Float32BufferImpl) ? tmp$_0 : throwCCE()).buffer);
  }
  function glUniformMatrix4fv(location, transpose, value) {
    var tmp$, tmp$_0;
    JsImpl_getInstance().gl.uniformMatrix4fv((tmp$ = location) == null || Kotlin.isType(tmp$, WebGLUniformLocation) ? tmp$ : throwCCE(), transpose, (Kotlin.isType(tmp$_0 = value, Float32BufferImpl) ? tmp$_0 : throwCCE()).buffer);
  }
  function glUseProgram(program) {
    var tmp$;
    JsImpl_getInstance().gl.useProgram((tmp$ = program != null ? program.glRef : null) == null || Kotlin.isType(tmp$, WebGLProgram) ? tmp$ : throwCCE());
  }
  function glVertexAttribDivisor(index, divisor) {
    var tmp$;
    if (JsImpl_getInstance().isWebGl2Context) {
      (Kotlin.isType(tmp$ = JsImpl_getInstance().gl, WebGL2RenderingContext) ? tmp$ : throwCCE()).vertexAttribDivisor(index, divisor);
    }
     else {
      alert('Your browser does not support WebGL2');
      throw KoolException_init('This function requires WebGL2 support');
    }
  }
  function glVertexAttribPointer(index, size, type, normalized, stride, offset) {
    JsImpl_getInstance().gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
  }
  function glVertexAttribIPointer(index, size, type, stride, offset) {
    var tmp$;
    if (JsImpl_getInstance().isWebGl2Context) {
      (Kotlin.isType(tmp$ = JsImpl_getInstance().gl, WebGL2RenderingContext) ? tmp$ : throwCCE()).vertexAttribIPointer(index, size, type, stride, offset);
    }
     else {
      alert('Your browser does not support WebGL2');
      throw KoolException_init('This function requires WebGL2 support');
    }
  }
  function glViewport(x, y, width, height) {
    JsImpl_getInstance().gl.viewport(x, y, width, height);
  }
  function isValidUniformLocation(location) {
    return location != null && Kotlin.isType(location, WebGLUniformLocation);
  }
  function withWebGl2Ctx(block) {
    var tmp$;
    if (JsImpl_getInstance().isWebGl2Context) {
      block(Kotlin.isType(tmp$ = JsImpl_getInstance().gl, WebGL2RenderingContext) ? tmp$ : throwCCE());
    }
     else {
      alert('Your browser does not support WebGL2');
      throw KoolException_init('This function requires WebGL2 support');
    }
  }
  function createDefaultContext() {
    return createContext(new JsContext$InitProps());
  }
  function createContext(props) {
    return JsImpl_getInstance().createContext_s8od96$(props);
  }
  function now() {
    return performance.now();
  }
  function getMemoryInfo() {
    return '';
  }
  function toString_1($receiver, precision) {
    var clamp$result;
    if (precision < 0) {
      clamp$result = 0;
    }
     else if (precision > 12) {
      clamp$result = 12;
    }
     else {
      clamp$result = precision;
    }
    var p = clamp$result;
    if (p === 0) {
      return Kotlin.Long.fromNumber(round($receiver)).toString();
    }
    var shifted = Kotlin.Long.fromNumber(round($receiver * Math_0.pow(10.0, p)));
    var str = shifted.toString();
    var i = str.length - precision | 0;
    while (i < 1) {
      str = '0' + str;
      i = i + 1 | 0;
    }
    var tmp$ = substring(str, until(0, i)) + '.';
    var $receiver_0 = str;
    var startIndex = i;
    return tmp$ + $receiver_0.substring(startIndex);
  }
  var lock = defineInlineFunction('kool.de.fabmax.kool.lock_eocq09$', function (lock, block) {
    return block();
  });
  function JsImpl() {
    JsImpl_instance = this;
    this.isWebGl2Context = false;
    this.dpi = 0;
    this.ctx = null;
    var tmp$;
    var measure = document.getElementById('dpiMeasure');
    if (measure == null) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'dpiMeasure element not found, falling back to 96 dpi');
      }
      var $this_0 = package$util.Log;
      var level_0 = Log$Level.WARN;
      var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
      if (level_0.level >= $this_0.level.level) {
        $this_0.printer(level_0, tag_0, 'Add this hidden div to your html:');
      }
      var $this_1 = package$util.Log;
      var level_1 = Log$Level.WARN;
      var tag_1 = Kotlin.getKClassFromExpression(this).simpleName;
      if (level_1.level >= $this_1.level.level) {
        $this_1.printer(level_1, tag_1, '<div id="dpiMeasure" style="height: 1in; width: 1in; left: 100%; position: fixed; top: 100%;"><\/div>');
      }
      this.dpi = 96.0;
    }
     else {
      this.dpi = (Kotlin.isType(tmp$ = measure, HTMLDivElement) ? tmp$ : throwCCE()).offsetWidth;
    }
  }
  Object.defineProperty(JsImpl.prototype, 'gl', {
    get: function () {
      var tmp$, tmp$_0;
      tmp$_0 = (tmp$ = this.ctx) != null ? tmp$.gl_8be2vx$ : null;
      if (tmp$_0 == null) {
        throw KoolException_init('Platform.createContext() not called');
      }
      return tmp$_0;
    }
  });
  JsImpl.prototype.createContext_s8od96$ = function (props) {
    if (this.ctx != null) {
      throw KoolException_init('Context was already created (multi-context is currently not supported in js');
    }
    this.ctx = new JsContext(props);
    return ensureNotNull(this.ctx);
  };
  JsImpl.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'JsImpl',
    interfaces: []
  };
  var JsImpl_instance = null;
  function JsImpl_getInstance() {
    if (JsImpl_instance === null) {
      new JsImpl();
    }
    return JsImpl_instance;
  }
  function AudioGenerator(ctx, generatorFun) {
    this.audioCtx_0 = new (window.AudioContext || window.webkitAudioContext)();
    this.sampleRate = this.audioCtx_0.sampleRate;
    this.isPaused_z77g9l$_0 = false;
    this.source_0 = null;
    this.scriptNode_0 = null;
    this.analyserNode_0 = null;
    var tmp$;
    this.powerSpectrum_0 = Kotlin.isType(tmp$ = createFloat32Buffer(1), Float32BufferImpl) ? tmp$ : throwCCE();
    this.dt_0 = 1.0 / this.sampleRate;
    this.scriptNode_0 = this.audioCtx_0.createScriptProcessor(4096, 1, 1);
    var buffer = this.audioCtx_0.createBuffer(1, this.scriptNode_0.bufferSize, this.sampleRate);
    this.scriptNode_0.onaudioprocess = AudioGenerator_init$lambda(generatorFun, this);
    this.analyserNode_0 = null;
    this.source_0 = this.audioCtx_0.createBufferSource();
    this.source_0.buffer = buffer;
    this.source_0.loop = true;
    this.source_0.connect(this.scriptNode_0);
    this.scriptNode_0.connect(this.audioCtx_0.destination);
    this.source_0.start();
  }
  Object.defineProperty(AudioGenerator.prototype, 'isPaused', {
    get: function () {
      return this.isPaused_z77g9l$_0;
    },
    set: function (value) {
      if (this.isPaused_z77g9l$_0 !== value) {
        this.isPaused_z77g9l$_0 = value;
        if (value) {
          this.source_0.stop();
        }
         else {
          this.source_0.start();
        }
      }
    }
  });
  AudioGenerator.prototype.stop = function () {
    this.scriptNode_0.disconnect();
    this.source_0.loop = false;
    this.source_0.disconnect();
    this.source_0.stop();
  };
  AudioGenerator.prototype.enableFftComputation_za3lpa$ = function (nSamples) {
    var tmp$, tmp$_0;
    if (nSamples <= 0) {
      (tmp$ = this.analyserNode_0) != null ? tmp$.disconnect() : null;
      this.analyserNode_0 = null;
    }
     else {
      if (this.analyserNode_0 == null) {
        this.analyserNode_0 = this.audioCtx_0.createAnalyser();
        this.analyserNode_0.minDecibels = -90;
        this.analyserNode_0.maxDecibels = 0;
        this.analyserNode_0.smoothingTimeConstant = 0.5;
        this.scriptNode_0.connect(this.analyserNode_0);
      }
      this.analyserNode_0.fftSize = nSamples;
      this.powerSpectrum_0 = Kotlin.isType(tmp$_0 = createFloat32Buffer(this.analyserNode_0.frequencyBinCount), Float32BufferImpl) ? tmp$_0 : throwCCE();
    }
  };
  AudioGenerator.prototype.getPowerSpectrum = function () {
    this.analyserNode_0.getFloatFrequencyData(this.powerSpectrum_0.buffer);
    return this.powerSpectrum_0;
  };
  function AudioGenerator_init$lambda(closure$generatorFun, this$AudioGenerator) {
    return function (ev) {
      var tmp$;
      var outputBuffer = ev.outputBuffer;
      var data = outputBuffer.getChannelData(0);
      tmp$ = outputBuffer.length;
      for (var i = 0; i < tmp$; i++) {
        data[i] = closure$generatorFun(this$AudioGenerator, this$AudioGenerator.dt_0);
      }
      return Unit;
    };
  }
  AudioGenerator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AudioGenerator',
    interfaces: []
  };
  function loadPngS16ElevationMap(basePath, meta, assetMgr) {
    return new DelayedElevationMap(basePath, meta);
  }
  function DelayedElevationMap(basePath, meta) {
    this.meta_r4vgl6$_0 = meta;
    this.isAvailable_uzeklm$_0 = false;
    this.loadedHeightMap_0 = null;
    ElevationMapLoader$Companion_getInstance().instance.loadHeightMap_2u7zf8$(basePath + '/' + this.meta.name, DelayedElevationMap_init$lambda(this));
  }
  Object.defineProperty(DelayedElevationMap.prototype, 'meta', {
    get: function () {
      return this.meta_r4vgl6$_0;
    }
  });
  Object.defineProperty(DelayedElevationMap.prototype, 'west', {
    get: function () {
      return this.meta.west;
    }
  });
  Object.defineProperty(DelayedElevationMap.prototype, 'east', {
    get: function () {
      return this.meta.east;
    }
  });
  Object.defineProperty(DelayedElevationMap.prototype, 'south', {
    get: function () {
      return this.meta.south;
    }
  });
  Object.defineProperty(DelayedElevationMap.prototype, 'north', {
    get: function () {
      return this.meta.north;
    }
  });
  Object.defineProperty(DelayedElevationMap.prototype, 'isAvailable', {
    get: function () {
      return this.isAvailable_uzeklm$_0;
    },
    set: function (isAvailable) {
      this.isAvailable_uzeklm$_0 = isAvailable;
    }
  });
  DelayedElevationMap.prototype.getElevationAt_lu1900$ = function (lat, lon) {
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.loadedHeightMap_0) != null ? tmp$.getElevationAt_lu1900$(lat, lon) : null) != null ? tmp$_0 : 0.0;
  };
  DelayedElevationMap.prototype.getNormalAt_bwm9xi$ = function (lat, lon, result) {
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.loadedHeightMap_0) != null ? tmp$.getNormalAt_bwm9xi$(lat, lon, result) : null) != null ? tmp$_0 : result.set_czzhiu$(Vec3f$Companion_getInstance().Z_AXIS);
  };
  function DelayedElevationMap_init$lambda(this$DelayedElevationMap) {
    return function (data) {
      if (data != null) {
        this$DelayedElevationMap.loadedHeightMap_0 = new ElevationMapS16(data, this$DelayedElevationMap.meta);
      }
      this$DelayedElevationMap.isAvailable = true;
      return Unit;
    };
  }
  DelayedElevationMap.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DelayedElevationMap',
    interfaces: [BoundedElevationMap]
  };
  function ElevationMapLoader() {
    ElevationMapLoader$Companion_getInstance();
    var tmp$, tmp$_0;
    this.canvas_0 = Kotlin.isType(tmp$ = document.createElement('canvas'), HTMLCanvasElement) ? tmp$ : throwCCE();
    this.canvasCtx_0 = null;
    this.canvas_0.width = 900;
    this.canvas_0.height = 900;
    this.canvasCtx_0 = Kotlin.isType(tmp$_0 = this.canvas_0.getContext('2d'), CanvasRenderingContext2D) ? tmp$_0 : throwCCE();
  }
  function ElevationMapLoader$loadHeightMap$lambda(closure$onLoaded) {
    return function (f, f_0, f_1, f_2, f_3) {
      closure$onLoaded(null);
      return true;
    };
  }
  function ElevationMapLoader$loadHeightMap$lambda_0(this$ElevationMapLoader, closure$img, closure$onLoaded) {
    return function (it) {
      this$ElevationMapLoader.canvasCtx_0.drawImage(closure$img, 0.0, 0.0);
      var array = new Int16Array(810000);
      var data = this$ElevationMapLoader.canvasCtx_0.getImageData(0.0, 0.0, 900.0, 900.0).data;
      for (var i = 0; i < 3240000; i++) {
        var r = data[i * 4 | 0];
        var g = data[(i * 4 | 0) + 1 | 0];
        var h = toShort(r << 8 | g);
        array[i] = h;
      }
      closure$onLoaded(array);
      return true;
    };
  }
  ElevationMapLoader.prototype.loadHeightMap_2u7zf8$ = function (path, onLoaded) {
    var tmp$;
    var img = Kotlin.isType(tmp$ = document.createElement('img'), HTMLImageElement) ? tmp$ : throwCCE();
    img.src = path;
    img.crossOrigin = '';
    img.onerror = ElevationMapLoader$loadHeightMap$lambda(onLoaded);
    img.onload = ElevationMapLoader$loadHeightMap$lambda_0(this, img, onLoaded);
  };
  function ElevationMapLoader$Companion() {
    ElevationMapLoader$Companion_instance = this;
    this.MAP_WIDTH = 900;
    this.MAP_HEIGHT = 900;
    this.instance = new ElevationMapLoader();
  }
  ElevationMapLoader$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ElevationMapLoader$Companion_instance = null;
  function ElevationMapLoader$Companion_getInstance() {
    if (ElevationMapLoader$Companion_instance === null) {
      new ElevationMapLoader$Companion();
    }
    return ElevationMapLoader$Companion_instance;
  }
  ElevationMapLoader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ElevationMapLoader',
    interfaces: []
  };
  function FontMapGenerator(maxWidth, maxHeight) {
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    var tmp$, tmp$_0;
    this.canvas_0 = Kotlin.isType(tmp$ = document.createElement('canvas'), HTMLCanvasElement) ? tmp$ : throwCCE();
    this.canvasCtx_0 = null;
    this.canvas_0.width = this.maxWidth;
    this.canvas_0.height = this.maxHeight;
    this.canvasCtx_0 = Kotlin.isType(tmp$_0 = this.canvas_0.getContext('2d'), CanvasRenderingContext2D) ? tmp$_0 : throwCCE();
  }
  FontMapGenerator.prototype.createCharMap_ttufcy$ = function (fontProps) {
    var tmp$;
    this.canvasCtx_0.clearRect(0.0, 0.0, this.maxWidth, this.maxHeight);
    var style = 'lighter ';
    if ((fontProps.style & 1) !== 0) {
      style = 'bold ';
    }
    if ((fontProps.style & 2) !== 0) {
      style += 'italic ';
    }
    var metrics = LinkedHashMap_init();
    var texHeight = this.makeMap_0(fontProps, style, metrics);
    var data = this.canvasCtx_0.getImageData(0.0, 0.0, this.maxWidth, texHeight);
    var buffer = createUint8Buffer(Kotlin.imul(this.maxWidth, texHeight));
    tmp$ = buffer.capacity;
    for (var i = 0; i < tmp$; i++) {
      buffer.put_s8j3t7$(data.data[(i * 4 | 0) + 3 | 0]);
    }
    return new CharMap(new BufferedTextureData(buffer, this.maxWidth, texHeight, 6406), metrics, fontProps);
  };
  FontMapGenerator.prototype.makeMap_0 = function (fontProps, style, map) {
    var tmp$, tmp$_0;
    this.canvasCtx_0.font = style + fontProps.sizePts + 'px ' + fontProps.family;
    this.canvasCtx_0.fillStyle = '#ffffff';
    var padding = 3.0;
    var hab = round(fontProps.sizePts * 1.1);
    var hbb = round(fontProps.sizePts * 0.5);
    var height = round(fontProps.sizePts * 1.6);
    this.canvasCtx_0.beginPath();
    this.canvasCtx_0.moveTo(0.5, 0.0);
    this.canvasCtx_0.lineTo(0.5, 1.0);
    this.canvasCtx_0.stroke();
    var x = 1.0;
    var y = hab;
    tmp$ = iterator(fontProps.chars);
    while (tmp$.hasNext()) {
      var c = unboxChar(tmp$.next());
      if (c === 106) {
        x += fontProps.sizePts * 0.1;
      }
      var txt = String.fromCharCode(c);
      var charW = round(this.canvasCtx_0.measureText(txt).width);
      var paddedWidth = round(charW + padding * 2);
      if (x + paddedWidth > this.maxWidth) {
        x = 0.0;
        y += height + 10;
        if (y + hbb > this.maxHeight) {
          break;
        }
      }
      var widthPx = charW;
      var heightPx = height;
      var metrics = new CharMetrics();
      metrics.width = widthPx * fontProps.sizeUnits / fontProps.sizePts;
      metrics.height = heightPx * fontProps.sizeUnits / fontProps.sizePts;
      metrics.xOffset = 0.0;
      metrics.yBaseline = hab * fontProps.sizeUnits / fontProps.sizePts;
      metrics.advance = metrics.width;
      metrics.uvMin.set_dleff0$(x + padding, y - hab);
      metrics.uvMax.set_dleff0$(x + padding + widthPx, y - hab + heightPx);
      map.put_xwzc9p$(toBoxedChar(c), metrics);
      this.canvasCtx_0.fillText(txt, x + padding, y);
      x += paddedWidth;
    }
    var texW = this.maxWidth;
    var texH = this.nextPow2_0(y + hbb);
    tmp$_0 = map.values.iterator();
    while (tmp$_0.hasNext()) {
      var cm = tmp$_0.next();
      cm.uvMin.x = cm.uvMin.x / texW;
      cm.uvMin.y = cm.uvMin.y / texH;
      cm.uvMax.x = cm.uvMax.x / texW;
      cm.uvMax.y = cm.uvMax.y / texH;
    }
    return texH;
  };
  FontMapGenerator.prototype.nextPow2_0 = function (value) {
    var pow2 = 16;
    while (pow2 < value && pow2 < this.maxHeight) {
      pow2 = pow2 << 1;
    }
    return pow2;
  };
  FontMapGenerator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FontMapGenerator',
    interfaces: []
  };
  function ImageTextureData(image) {
    TextureData.call(this);
    this.image = image;
  }
  Object.defineProperty(ImageTextureData.prototype, 'isAvailable', {
    get: function () {
      return this.image.complete;
    }
  });
  ImageTextureData.prototype.onLoad_2jsdat$ = function (texture, target, ctx) {
    JsImpl_getInstance().gl.texImage2D(target, 0, 6408, 6408, 5121, this.image);
    this.width = this.image.width;
    this.height = this.image.height;
    var size = Kotlin.imul(this.width, this.height) * 4 | 0;
    ctx.memoryMgr.memoryAllocated_927jj9$(ensureNotNull(texture.res), size);
  };
  ImageTextureData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ImageTextureData',
    interfaces: [TextureData]
  };
  function JsAssetManager(assetsBaseDir) {
    JsAssetManager$Companion_getInstance();
    AssetManager.call(this, assetsBaseDir);
    this.pako_0 = require('pako_inflate.min');
    this.fontGenerator_0 = new FontMapGenerator(2048, 2048);
  }
  function Coroutine$loadLocalRaw_hl6yzt$($this, localRawRef_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$localRawRef = localRawRef_0;
  }
  Coroutine$loadLocalRaw_hl6yzt$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$loadLocalRaw_hl6yzt$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$loadLocalRaw_hl6yzt$.prototype.constructor = Coroutine$loadLocalRaw_hl6yzt$;
  Coroutine$loadLocalRaw_hl6yzt$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.loadRaw_0(this.local$localRawRef.url, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return new LoadedRawAsset(this.local$localRawRef, this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      }
       catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        }
         else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  JsAssetManager.prototype.loadLocalRaw_hl6yzt$ = function (localRawRef_0, continuation_0, suspended) {
    var instance = new Coroutine$loadLocalRaw_hl6yzt$(this, localRawRef_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$loadHttpRaw_ohmb7q$($this, httpRawRef_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$httpRawRef = httpRawRef_0;
  }
  Coroutine$loadHttpRaw_ohmb7q$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$loadHttpRaw_ohmb7q$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$loadHttpRaw_ohmb7q$.prototype.constructor = Coroutine$loadHttpRaw_ohmb7q$;
  Coroutine$loadHttpRaw_ohmb7q$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.loadRaw_0(this.local$httpRawRef.url, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return new LoadedRawAsset(this.local$httpRawRef, this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      }
       catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        }
         else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  JsAssetManager.prototype.loadHttpRaw_ohmb7q$ = function (httpRawRef_0, continuation_0, suspended) {
    var instance = new Coroutine$loadHttpRaw_ohmb7q$(this, httpRawRef_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  JsAssetManager.prototype.loadHttpTexture_nbaz3h$ = function (httpTextureRef, continuation) {
    return new LoadedTextureAsset(httpTextureRef, this.loadImage_0(httpTextureRef.url));
  };
  JsAssetManager.prototype.loadLocalTexture_68kns4$ = function (localTextureRef, continuation) {
    return new LoadedTextureAsset(localTextureRef, this.loadImage_0(localTextureRef.url));
  };
  function JsAssetManager$loadRaw$lambda(closure$req, closure$data) {
    return function (it) {
      var tmp$, tmp$_0;
      var array = new Uint8Array(Kotlin.isType(tmp$ = closure$req.response, ArrayBuffer) ? tmp$ : throwCCE());
      var bytes = new Int8Array(array.length);
      tmp$_0 = array.length;
      for (var i = 0; i < tmp$_0; i++) {
        bytes[i] = array[i];
      }
      return closure$data.complete_11rb$(bytes);
    };
  }
  function JsAssetManager$loadRaw$lambda_0(closure$data, closure$url, this$JsAssetManager) {
    return function (it) {
      closure$data.complete_11rb$(null);
      var $receiver = this$JsAssetManager;
      var $this = package$util.Log;
      var level = Log$Level.ERROR;
      var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Failed loading resource ' + closure$url + ': ' + it);
      }
      return Unit;
    };
  }
  JsAssetManager.prototype.loadRaw_0 = function (url, continuation) {
    var data = CompletableDeferred(this.job);
    var req = new XMLHttpRequest();
    req.responseType = 'arraybuffer';
    req.onload = JsAssetManager$loadRaw$lambda(req, data);
    req.onerror = JsAssetManager$loadRaw$lambda_0(data, url, this);
    req.open('GET', url);
    req.send();
    return data.await(continuation);
  };
  JsAssetManager.prototype.loadImage_0 = function (url) {
    var tmp$;
    var img = Kotlin.isType(tmp$ = document.createElement('img'), HTMLImageElement) ? tmp$ : throwCCE();
    var data = new ImageTextureData(img);
    img.crossOrigin = '';
    if ('decoding' in img) {
      img.decoding = 'async';
    }
    img.src = url;
    return data;
  };
  JsAssetManager.prototype.createCharMap_ttufcy$ = function (fontProps) {
    return this.fontGenerator_0.createCharMap_ttufcy$(fontProps);
  };
  JsAssetManager.prototype.inflate_fqrh44$ = function (zipData) {
    var tmp$;
    var uint8Data = new Uint8Array(zipData.length);
    for (var i = 0; i !== zipData.length; ++i) {
      uint8Data[i] = zipData[i];
    }
    var inflated = Kotlin.isType(tmp$ = this.pako_0.inflate(uint8Data), Uint8Array) ? tmp$ : throwCCE();
    var array = new Int8Array(inflated.length);
    var tmp$_0;
    tmp$_0 = array.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array[i_0] = inflated[i_0];
    }
    return array;
  };
  function JsAssetManager$Companion() {
    JsAssetManager$Companion_instance = this;
    this.MAX_GENERATED_TEX_WIDTH_0 = 2048;
    this.MAX_GENERATED_TEX_HEIGHT_0 = 2048;
  }
  JsAssetManager$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var JsAssetManager$Companion_instance = null;
  function JsAssetManager$Companion_getInstance() {
    if (JsAssetManager$Companion_instance === null) {
      new JsAssetManager$Companion();
    }
    return JsAssetManager$Companion_instance;
  }
  JsAssetManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'JsAssetManager',
    interfaces: [AssetManager]
  };
  function JsContext(props) {
    JsContext$Companion_getInstance();
    KoolContext.call(this);
    this.props = props;
    this.glCapabilities_4q43mj$_0 = null;
    this.assetMgr_z54vt4$_0 = new JsAssetManager(this.props.assetsBaseDir);
    this.windowWidth_7sdnb6$_0 = 0;
    this.windowHeight_xsf9ux$_0 = 0;
    this.canvas_8be2vx$ = null;
    this.gl_8be2vx$ = null;
    this.animationMillis_0 = 0.0;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    this.canvas_8be2vx$ = Kotlin.isType(tmp$ = document.getElementById(this.props.canvasName), HTMLCanvasElement) ? tmp$ : throwCCE();
    var webGlCtx = this.canvas_8be2vx$.getContext('webgl2');
    if (webGlCtx == null) {
      webGlCtx = this.canvas_8be2vx$.getContext('experimental-webgl2');
    }
    JsImpl_getInstance().isWebGl2Context = webGlCtx != null;
    var uint32Indices;
    var depthTextures;
    var maxTexUnits;
    var shaderIntAttribs = false;
    var depthComponentIntFormat = 6402;
    var depthFilterMethod = 9728;
    var anisotropicTexFilterInfo = AnisotropicTexFilterInfo$Companion_getInstance().NOT_SUPPORTED;
    var glslDialect = GlslDialect$Companion_getInstance().GLSL_DIALECT_100;
    var glVersion = new GlVersion('WebGL', 1, 0);
    if (webGlCtx != null) {
      this.gl_8be2vx$ = Kotlin.isType(tmp$_0 = webGlCtx, WebGL2RenderingContext) ? tmp$_0 : throwCCE();
      uint32Indices = true;
      depthTextures = true;
      shaderIntAttribs = true;
      depthComponentIntFormat = 33190;
      glslDialect = GlslDialect$Companion_getInstance().GLSL_DIALECT_300_ES;
      glVersion = new GlVersion('WebGL', 2, 0);
      maxTexUnits = this.gl_8be2vx$.getParameter(34930);
    }
     else {
      webGlCtx = this.canvas_8be2vx$.getContext('webgl');
      if (webGlCtx == null) {
        webGlCtx = this.canvas_8be2vx$.getContext('experimental-webgl');
      }
      if (webGlCtx == null) {
        alert('Unable to initialize WebGL. Your browser may not support it.');
      }
      this.gl_8be2vx$ = Kotlin.isType(tmp$_1 = webGlCtx, WebGLRenderingContext) ? tmp$_1 : throwCCE();
      uint32Indices = this.gl_8be2vx$.getExtension('OES_element_index_uint') != null;
      depthTextures = this.gl_8be2vx$.getExtension('WEBGL_depth_texture') != null;
      maxTexUnits = this.gl_8be2vx$.getParameter(34930);
    }
    var extAnisotropic = (tmp$_3 = (tmp$_2 = this.gl_8be2vx$.getExtension('EXT_texture_filter_anisotropic')) != null ? tmp$_2 : this.gl_8be2vx$.getExtension('MOZ_EXT_texture_filter_anisotropic')) != null ? tmp$_3 : this.gl_8be2vx$.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
    if (extAnisotropic != null) {
      var max = typeof (tmp$_4 = this.gl_8be2vx$.getParameter(extAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT)) === 'number' ? tmp$_4 : throwCCE();
      anisotropicTexFilterInfo = new AnisotropicTexFilterInfo(max, extAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT);
    }
    var geometryShader = false;
    var premultipliedAlphaTex = false;
    this.glCapabilities_4q43mj$_0 = new GlCapabilities(uint32Indices, shaderIntAttribs, maxTexUnits, premultipliedAlphaTex, depthTextures, depthComponentIntFormat, depthFilterMethod, anisotropicTexFilterInfo, geometryShader, glslDialect, glVersion);
    this.screenDpi = JsImpl_getInstance().dpi;
    this.windowWidth = this.canvas_8be2vx$.clientWidth;
    this.windowHeight = this.canvas_8be2vx$.clientHeight;
    this.canvas_8be2vx$.oncontextmenu = getCallableRef('preventDefault', function ($receiver) {
      return $receiver.preventDefault(), Unit;
    });
    this.canvas_8be2vx$.onmousemove = JsContext_init$lambda(this);
    this.canvas_8be2vx$.onmousedown = JsContext_init$lambda_0(this);
    this.canvas_8be2vx$.onmouseup = JsContext_init$lambda_1(this);
    this.canvas_8be2vx$.onmouseleave = JsContext_init$lambda_2(this);
    this.canvas_8be2vx$.onwheel = JsContext_init$lambda_3(this);
    this.canvas_8be2vx$.addEventListener('touchstart', JsContext_init$lambda_4(this), false);
    this.canvas_8be2vx$.addEventListener('touchend', JsContext_init$lambda_5(this), false);
    this.canvas_8be2vx$.addEventListener('touchcancel', JsContext_init$lambda_6(this), false);
    this.canvas_8be2vx$.addEventListener('touchmove', JsContext_init$lambda_7(this), false);
    document.onkeydown = JsContext_init$lambda_8(this);
    document.onkeyup = JsContext_init$lambda_9(this);
  }
  Object.defineProperty(JsContext.prototype, 'glCapabilities', {
    get: function () {
      return this.glCapabilities_4q43mj$_0;
    }
  });
  Object.defineProperty(JsContext.prototype, 'assetMgr', {
    get: function () {
      return this.assetMgr_z54vt4$_0;
    }
  });
  Object.defineProperty(JsContext.prototype, 'windowWidth', {
    get: function () {
      return this.windowWidth_7sdnb6$_0;
    },
    set: function (windowWidth) {
      this.windowWidth_7sdnb6$_0 = windowWidth;
    }
  });
  Object.defineProperty(JsContext.prototype, 'windowHeight', {
    get: function () {
      return this.windowHeight_xsf9ux$_0;
    },
    set: function (windowHeight) {
      this.windowHeight_xsf9ux$_0 = windowHeight;
    }
  });
  JsContext.prototype.handleKeyDown_0 = function (ev) {
    var code = this.translateKeyCode_0(ev.code);
    if (code !== 0) {
      var mods = 0;
      if (ev.altKey) {
        mods = mods | 4;
      }
      if (ev.ctrlKey) {
        mods = mods | 2;
      }
      if (ev.shiftKey) {
        mods = mods | 1;
      }
      if (ev.metaKey) {
        mods = mods | 8;
      }
      var event = 2;
      if (ev.repeat) {
        event = event | 4;
      }
      this.inputMgr.keyEvent_qt1dr2$(code, mods, event);
    }
    if (ev.key.length === 1) {
      this.inputMgr.charTyped_s8itvh$(ev.key.charCodeAt(0));
    }
    if (!this.props.excludedKeyCodes.contains_11rb$(ev.code)) {
      ev.preventDefault();
    }
  };
  JsContext.prototype.handleKeyUp_0 = function (ev) {
    var code = this.translateKeyCode_0(ev.code);
    if (code !== 0) {
      var mods = 0;
      if (ev.altKey) {
        mods = mods | 4;
      }
      if (ev.ctrlKey) {
        mods = mods | 2;
      }
      if (ev.shiftKey) {
        mods = mods | 1;
      }
      if (ev.metaKey) {
        mods = mods | 8;
      }
      this.inputMgr.keyEvent_qt1dr2$(code, mods, 1);
    }
    if (!this.props.excludedKeyCodes.contains_11rb$(ev.code)) {
      ev.preventDefault();
    }
  };
  JsContext.prototype.translateKeyCode_0 = function (code) {
    var tmp$;
    if (code.length === 4 && startsWith(code, 'Key')) {
      return code.charCodeAt(3) | 0;
    }
     else {
      return (tmp$ = JsContext$Companion_getInstance().KEY_CODE_MAP.get_11rb$(code)) != null ? tmp$ : 0;
    }
  };
  function JsContext$renderFrame$lambda(this$JsContext) {
    return function (t) {
      this$JsContext.renderFrame_0(t);
      return Unit;
    };
  }
  JsContext.prototype.renderFrame_0 = function (time) {
    var dt = (time - this.animationMillis_0) / 1000.0;
    this.animationMillis_0 = time;
    this.windowWidth = this.canvas_8be2vx$.clientWidth;
    this.windowHeight = this.canvas_8be2vx$.clientHeight;
    if (this.windowWidth !== this.canvas_8be2vx$.width || this.windowHeight !== this.canvas_8be2vx$.height) {
      this.canvas_8be2vx$.width = this.windowWidth;
      this.canvas_8be2vx$.height = this.windowHeight;
    }
    this.render_14dthe$(dt);
    this.gl_8be2vx$.finish();
    window.requestAnimationFrame(JsContext$renderFrame$lambda(this));
  };
  JsContext.prototype.openUrl_61zpoe$ = function (url) {
    window.open(url);
  };
  function JsContext$run$lambda(this$JsContext) {
    return function (t) {
      this$JsContext.renderFrame_0(t);
      return Unit;
    };
  }
  JsContext.prototype.run = function () {
    window.requestAnimationFrame(JsContext$run$lambda(this));
  };
  JsContext.prototype.destroy = function () {
  };
  JsContext.prototype.checkIsGlThread = function () {
  };
  function JsContext$InitProps() {
    this.canvasName = 'glCanvas';
    this.excludedKeyCodes = mutableSetOf(['F5']);
    this.assetsBaseDir = './assets';
  }
  JsContext$InitProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InitProps',
    interfaces: []
  };
  function JsContext$Companion() {
    JsContext$Companion_instance = this;
    this.KEY_CODE_MAP = mutableMapOf([to('ControlLeft', -1), to('ControlRight', -2), to('ShiftLeft', -3), to('ShiftRight', -4), to('AltLeft', -5), to('AltRight', -6), to('MetaLeft', -7), to('MetaRight', -8), to('Escape', -9), to('ContextMenu', -10), to('Enter', -11), to('NumpadEnter', -12), to('NumpadDivide', -13), to('NumpadMultiply', -14), to('NumpadAdd', -15), to('NumpadSubtract', -16), to('Backspace', -17), to('Tab', -18), to('Delete', -19), to('Insert', -20), to('Home', -21), to('End', -22), to('PageUp', -23), to('PageDown', -24), to('ArrowLeft', -25), to('ArrowRight', -26), to('ArrowUp', -27), to('ArrowDown', -28), to('F1', -29), to('F2', -30), to('F3', -31), to('F4', -32), to('F5', -33), to('F6', -34), to('F7', -35), to('F8', -36), to('F9', -37), to('F10', -38), to('F11', -39), to('F12', -40), to('Space', 32)]);
  }
  JsContext$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var JsContext$Companion_instance = null;
  function JsContext$Companion_getInstance() {
    if (JsContext$Companion_instance === null) {
      new JsContext$Companion();
    }
    return JsContext$Companion_instance;
  }
  function JsContext_init$lambda(this$JsContext) {
    return function (ev) {
      var bounds = this$JsContext.canvas_8be2vx$.getBoundingClientRect();
      var x = ev.clientX - bounds.left;
      var y = ev.clientY - bounds.top;
      this$JsContext.inputMgr.handleMouseMove_dleff0$(x, y);
      return Unit;
    };
  }
  function JsContext_init$lambda_0(this$JsContext) {
    return function (ev) {
      this$JsContext.inputMgr.handleMouseButtonStates_za3lpa$(ev.buttons);
      return Unit;
    };
  }
  function JsContext_init$lambda_1(this$JsContext) {
    return function (ev) {
      this$JsContext.inputMgr.handleMouseButtonStates_za3lpa$(ev.buttons);
      return Unit;
    };
  }
  function JsContext_init$lambda_2(this$JsContext) {
    return function (it) {
      this$JsContext.inputMgr.handleMouseExit();
      return Unit;
    };
  }
  function JsContext_init$lambda_3(this$JsContext) {
    return function (ev) {
      var ticks = -ev.deltaY / 3.0;
      if (ev.deltaMode === 0) {
        ticks /= 30.0;
      }
      this$JsContext.inputMgr.handleMouseScroll_mx4ult$(ticks);
      ev.preventDefault();
      return Unit;
    };
  }
  function JsContext_init$lambda_4(this$JsContext) {
    return function (ev) {
      var tmp$, tmp$_0;
      ev.preventDefault();
      var changedTouches = (Kotlin.isType(tmp$ = ev, TouchEvent) ? tmp$ : throwCCE()).changedTouches;
      tmp$_0 = changedTouches.length;
      for (var i = 0; i < tmp$_0; i++) {
        var touch = changedTouches.item(i);
        this$JsContext.inputMgr.handleTouchStart_nhq4am$(touch.identifier, get_elementX(touch), get_elementY(touch));
      }
      return Unit;
    };
  }
  function JsContext_init$lambda_5(this$JsContext) {
    return function (ev) {
      var tmp$, tmp$_0;
      ev.preventDefault();
      var changedTouches = (Kotlin.isType(tmp$ = ev, TouchEvent) ? tmp$ : throwCCE()).changedTouches;
      tmp$_0 = changedTouches.length;
      for (var i = 0; i < tmp$_0; i++) {
        var touch = changedTouches.item(i);
        this$JsContext.inputMgr.handleTouchEnd_za3lpa$(touch.identifier);
      }
      return Unit;
    };
  }
  function JsContext_init$lambda_6(this$JsContext) {
    return function (ev) {
      var tmp$, tmp$_0;
      ev.preventDefault();
      var changedTouches = (Kotlin.isType(tmp$ = ev, TouchEvent) ? tmp$ : throwCCE()).changedTouches;
      tmp$_0 = changedTouches.length;
      for (var i = 0; i < tmp$_0; i++) {
        var touch = changedTouches.item(i);
        this$JsContext.inputMgr.handleTouchCancel_za3lpa$(touch.identifier);
      }
      return Unit;
    };
  }
  function JsContext_init$lambda_7(this$JsContext) {
    return function (ev) {
      var tmp$, tmp$_0;
      ev.preventDefault();
      var changedTouches = (Kotlin.isType(tmp$ = ev, TouchEvent) ? tmp$ : throwCCE()).changedTouches;
      tmp$_0 = changedTouches.length;
      for (var i = 0; i < tmp$_0; i++) {
        var touch = changedTouches.item(i);
        this$JsContext.inputMgr.handleTouchMove_nhq4am$(touch.identifier, get_elementX(touch), get_elementY(touch));
      }
      return Unit;
    };
  }
  function JsContext_init$lambda_8(this$JsContext) {
    return function (ev) {
      this$JsContext.handleKeyDown_0(ev);
      return Unit;
    };
  }
  function JsContext_init$lambda_9(this$JsContext) {
    return function (ev) {
      this$JsContext.handleKeyUp_0(ev);
      return Unit;
    };
  }
  JsContext.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'JsContext',
    interfaces: [KoolContext]
  };
  function get_elementX($receiver) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    return $receiver.clientX - ((tmp$_2 = (tmp$_1 = (tmp$_0 = Kotlin.isType(tmp$ = $receiver.target, HTMLCanvasElement) ? tmp$ : null) != null ? tmp$_0.clientLeft : null) != null ? tmp$_1 : null) != null ? tmp$_2 : 0.0);
  }
  function get_elementY($receiver) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    return $receiver.clientY - ((tmp$_2 = (tmp$_1 = (tmp$_0 = Kotlin.isType(tmp$ = $receiver.target, HTMLCanvasElement) ? tmp$ : null) != null ? tmp$_0.clientTop : null) != null ? tmp$_1 : null) != null ? tmp$_2 : 0.0);
  }
  function GenericBuffer(capacity, create) {
    this.buffer = create();
    this.capacity_tfbtga$_0 = capacity;
    this.limit_wr5sjr$_0 = capacity;
    this.position_xkur2v$_0 = 0;
  }
  Object.defineProperty(GenericBuffer.prototype, 'capacity', {
    get: function () {
      return this.capacity_tfbtga$_0;
    }
  });
  Object.defineProperty(GenericBuffer.prototype, 'limit', {
    get: function () {
      return this.limit_wr5sjr$_0;
    },
    set: function (value) {
      if (value < 0 || value > this.capacity) {
        throw KoolException_init('Limit is out of bounds: ' + value + ' (capacity: ' + this.capacity + ')');
      }
      this.limit_wr5sjr$_0 = value;
      if (this.position > value) {
        this.position = value;
      }
    }
  });
  Object.defineProperty(GenericBuffer.prototype, 'position', {
    get: function () {
      return this.position_xkur2v$_0;
    },
    set: function (position) {
      this.position_xkur2v$_0 = position;
    }
  });
  Object.defineProperty(GenericBuffer.prototype, 'remaining', {
    get: function () {
      return this.limit - this.position | 0;
    }
  });
  GenericBuffer.prototype.flip = function () {
    this.limit = this.position;
    this.position = 0;
  };
  GenericBuffer.prototype.clear = function () {
    this.limit = this.capacity;
    this.position = 0;
  };
  GenericBuffer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GenericBuffer',
    interfaces: [Buffer]
  };
  function Uint8BufferImpl(capacity) {
    GenericBuffer.call(this, capacity, Uint8BufferImpl_init$lambda(capacity));
  }
  Uint8BufferImpl.prototype.get_za3lpa$ = function (i) {
    return this.buffer[i];
  };
  Uint8BufferImpl.prototype.set_6t1wet$ = function (i, value) {
    this.buffer[i] = value;
  };
  Uint8BufferImpl.prototype.put_mj6st8$ = function (data, offset, len) {
    var tmp$, tmp$_0;
    tmp$ = offset + len - 1 | 0;
    for (var i = offset; i <= tmp$; i++) {
      this.buffer[tmp$_0 = this.position, this.position = tmp$_0 + 1 | 0, tmp$_0] = data[i];
    }
    return this;
  };
  Uint8BufferImpl.prototype.put_s8j3t7$ = function (value) {
    var tmp$;
    this.buffer[tmp$ = this.position, this.position = tmp$ + 1 | 0, tmp$] = value;
    return this;
  };
  Uint8BufferImpl.prototype.put_ay2i3f$ = function (data) {
    var tmp$, tmp$_0;
    tmp$ = data.position;
    tmp$_0 = data.limit;
    for (var i = tmp$; i < tmp$_0; i++) {
      this.put_s8j3t7$(data.get_za3lpa$(i));
    }
    return this;
  };
  function Uint8BufferImpl_init$lambda(closure$capacity) {
    return function () {
      return new Uint8Array(closure$capacity);
    };
  }
  Uint8BufferImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uint8BufferImpl',
    interfaces: [GenericBuffer, Uint8Buffer]
  };
  function Uint16BufferImpl(capacity) {
    GenericBuffer.call(this, capacity, Uint16BufferImpl_init$lambda(capacity));
  }
  Uint16BufferImpl.prototype.get_za3lpa$ = function (i) {
    return this.buffer[i];
  };
  Uint16BufferImpl.prototype.set_2bqt6h$ = function (i, value) {
    this.buffer[i] = value;
  };
  Uint16BufferImpl.prototype.put_359eei$ = function (data, offset, len) {
    var tmp$, tmp$_0;
    tmp$ = offset + len - 1 | 0;
    for (var i = offset; i <= tmp$; i++) {
      this.buffer[tmp$_0 = this.position, this.position = tmp$_0 + 1 | 0, tmp$_0] = data[i];
    }
    return this;
  };
  Uint16BufferImpl.prototype.put_mq22fl$ = function (value) {
    var tmp$;
    this.buffer[tmp$ = this.position, this.position = tmp$ + 1 | 0, tmp$] = value;
    return this;
  };
  Uint16BufferImpl.prototype.put_8k344i$ = function (data) {
    var tmp$, tmp$_0;
    tmp$ = data.position;
    tmp$_0 = data.limit;
    for (var i = tmp$; i < tmp$_0; i++) {
      this.put_mq22fl$(data.get_za3lpa$(i));
    }
    return this;
  };
  function Uint16BufferImpl_init$lambda(closure$capacity) {
    return function () {
      return new Uint16Array(closure$capacity);
    };
  }
  Uint16BufferImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uint16BufferImpl',
    interfaces: [GenericBuffer, Uint16Buffer]
  };
  function Uint32BufferImpl(capacity) {
    GenericBuffer.call(this, capacity, Uint32BufferImpl_init$lambda(capacity));
  }
  Uint32BufferImpl.prototype.get_za3lpa$ = function (i) {
    return this.buffer[i];
  };
  Uint32BufferImpl.prototype.set_vux9f0$ = function (i, value) {
    this.buffer[i] = value;
  };
  Uint32BufferImpl.prototype.put_nd5v6f$ = function (data, offset, len) {
    var tmp$, tmp$_0;
    tmp$ = offset + len - 1 | 0;
    for (var i = offset; i <= tmp$; i++) {
      this.buffer[tmp$_0 = this.position, this.position = tmp$_0 + 1 | 0, tmp$_0] = data[i];
    }
    return this;
  };
  Uint32BufferImpl.prototype.put_za3lpa$ = function (value) {
    var tmp$;
    this.buffer[tmp$ = this.position, this.position = tmp$ + 1 | 0, tmp$] = value;
    return this;
  };
  Uint32BufferImpl.prototype.put_7hqxcs$ = function (data) {
    var tmp$, tmp$_0;
    tmp$ = data.position;
    tmp$_0 = data.limit;
    for (var i = tmp$; i < tmp$_0; i++) {
      this.put_za3lpa$(data.get_za3lpa$(i));
    }
    return this;
  };
  function Uint32BufferImpl_init$lambda(closure$capacity) {
    return function () {
      return new Uint32Array(closure$capacity);
    };
  }
  Uint32BufferImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uint32BufferImpl',
    interfaces: [GenericBuffer, Uint32Buffer]
  };
  function Float32BufferImpl(capacity) {
    GenericBuffer.call(this, capacity, Float32BufferImpl_init$lambda(capacity));
  }
  Float32BufferImpl.prototype.get_za3lpa$ = function (i) {
    return this.buffer[i];
  };
  Float32BufferImpl.prototype.set_24o109$ = function (i, value) {
    this.buffer[i] = value;
  };
  Float32BufferImpl.prototype.put_kgymra$ = function (data, offset, len) {
    var tmp$, tmp$_0;
    tmp$ = offset + len - 1 | 0;
    for (var i = offset; i <= tmp$; i++) {
      this.buffer[tmp$_0 = this.position, this.position = tmp$_0 + 1 | 0, tmp$_0] = data[i];
    }
    return this;
  };
  Float32BufferImpl.prototype.put_mx4ult$ = function (value) {
    var tmp$;
    this.buffer[tmp$ = this.position, this.position = tmp$ + 1 | 0, tmp$] = value;
    return this;
  };
  Float32BufferImpl.prototype.put_he122g$ = function (data) {
    var tmp$, tmp$_0;
    tmp$ = data.position;
    tmp$_0 = data.limit;
    for (var i = tmp$; i < tmp$_0; i++) {
      this.put_mx4ult$(data.get_za3lpa$(i));
    }
    return this;
  };
  function Float32BufferImpl_init$lambda(closure$capacity) {
    return function () {
      return new Float32Array(closure$capacity);
    };
  }
  Float32BufferImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Float32BufferImpl',
    interfaces: [GenericBuffer, Float32Buffer]
  };
  function createUint8Buffer(capacity) {
    return new Uint8BufferImpl(capacity);
  }
  function createUint16Buffer(capacity) {
    return new Uint16BufferImpl(capacity);
  }
  function createUint32Buffer(capacity) {
    return new Uint32BufferImpl(capacity);
  }
  function createFloat32Buffer(capacity) {
    return new Float32BufferImpl(capacity);
  }
  $$importsForInline$$['kotlinx-coroutines-core'] = $module$kotlinx_coroutines_core;
  $$importsForInline$$.kool = _;
  Object.defineProperty(AssetManager, 'Companion', {
    get: AssetManager$Companion_getInstance
  });
  var package$de = _.de || (_.de = {});
  var package$fabmax = package$de.fabmax || (package$de.fabmax = {});
  var package$kool = package$fabmax.kool || (package$fabmax.kool = {});
  package$kool.AssetManager = AssetManager;
  package$kool.AssetRef = AssetRef;
  package$kool.LocalRawAssetRef = LocalRawAssetRef;
  package$kool.HttpRawAssetRef = HttpRawAssetRef;
  package$kool.LocalTextureAssetRef = LocalTextureAssetRef;
  package$kool.HttpTextureAssetRef = HttpTextureAssetRef;
  package$kool.LoadedAsset = LoadedAsset;
  package$kool.LoadedRawAsset = LoadedRawAsset;
  package$kool.LoadedTextureAsset = LoadedTextureAsset;
  package$kool.assetTexture_ivxn3r$ = assetTexture;
  package$kool.assetTexture_4689t5$ = assetTexture_0;
  package$kool.assetTextureCubeMap_y2is7l$ = assetTextureCubeMap;
  var package$gl = package$kool.gl || (package$kool.gl = {});
  Object.defineProperty(package$gl, 'GL_ACTIVE_TEXTURE', {
    get: function () {
      return GL_ACTIVE_TEXTURE;
    }
  });
  Object.defineProperty(package$gl, 'GL_DEPTH_BUFFER_BIT', {
    get: function () {
      return GL_DEPTH_BUFFER_BIT;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_BUFFER_BIT', {
    get: function () {
      return GL_STENCIL_BUFFER_BIT;
    }
  });
  Object.defineProperty(package$gl, 'GL_COLOR_BUFFER_BIT', {
    get: function () {
      return GL_COLOR_BUFFER_BIT;
    }
  });
  Object.defineProperty(package$gl, 'GL_FALSE', {
    get: function () {
      return GL_FALSE;
    }
  });
  Object.defineProperty(package$gl, 'GL_TRUE', {
    get: function () {
      return GL_TRUE;
    }
  });
  Object.defineProperty(package$gl, 'GL_POINTS', {
    get: function () {
      return GL_POINTS;
    }
  });
  Object.defineProperty(package$gl, 'GL_LINES', {
    get: function () {
      return GL_LINES;
    }
  });
  Object.defineProperty(package$gl, 'GL_LINE_LOOP', {
    get: function () {
      return GL_LINE_LOOP;
    }
  });
  Object.defineProperty(package$gl, 'GL_LINE_STRIP', {
    get: function () {
      return GL_LINE_STRIP;
    }
  });
  Object.defineProperty(package$gl, 'GL_TRIANGLES', {
    get: function () {
      return GL_TRIANGLES;
    }
  });
  Object.defineProperty(package$gl, 'GL_TRIANGLE_STRIP', {
    get: function () {
      return GL_TRIANGLE_STRIP;
    }
  });
  Object.defineProperty(package$gl, 'GL_TRIANGLE_FAN', {
    get: function () {
      return GL_TRIANGLE_FAN;
    }
  });
  Object.defineProperty(package$gl, 'GL_ZERO', {
    get: function () {
      return GL_ZERO;
    }
  });
  Object.defineProperty(package$gl, 'GL_ONE', {
    get: function () {
      return GL_ONE;
    }
  });
  Object.defineProperty(package$gl, 'GL_SRC_COLOR', {
    get: function () {
      return GL_SRC_COLOR;
    }
  });
  Object.defineProperty(package$gl, 'GL_ONE_MINUS_SRC_COLOR', {
    get: function () {
      return GL_ONE_MINUS_SRC_COLOR;
    }
  });
  Object.defineProperty(package$gl, 'GL_SRC_ALPHA', {
    get: function () {
      return GL_SRC_ALPHA;
    }
  });
  Object.defineProperty(package$gl, 'GL_ONE_MINUS_SRC_ALPHA', {
    get: function () {
      return GL_ONE_MINUS_SRC_ALPHA;
    }
  });
  Object.defineProperty(package$gl, 'GL_DST_ALPHA', {
    get: function () {
      return GL_DST_ALPHA;
    }
  });
  Object.defineProperty(package$gl, 'GL_ONE_MINUS_DST_ALPHA', {
    get: function () {
      return GL_ONE_MINUS_DST_ALPHA;
    }
  });
  Object.defineProperty(package$gl, 'GL_DST_COLOR', {
    get: function () {
      return GL_DST_COLOR;
    }
  });
  Object.defineProperty(package$gl, 'GL_ONE_MINUS_DST_COLOR', {
    get: function () {
      return GL_ONE_MINUS_DST_COLOR;
    }
  });
  Object.defineProperty(package$gl, 'GL_SRC_ALPHA_SATURATE', {
    get: function () {
      return GL_SRC_ALPHA_SATURATE;
    }
  });
  Object.defineProperty(package$gl, 'GL_FUNC_ADD', {
    get: function () {
      return GL_FUNC_ADD;
    }
  });
  Object.defineProperty(package$gl, 'GL_BLEND_EQUATION', {
    get: function () {
      return GL_BLEND_EQUATION;
    }
  });
  Object.defineProperty(package$gl, 'GL_BLEND_EQUATION_RGB', {
    get: function () {
      return GL_BLEND_EQUATION_RGB;
    }
  });
  Object.defineProperty(package$gl, 'GL_BLEND_EQUATION_ALPHA', {
    get: function () {
      return GL_BLEND_EQUATION_ALPHA;
    }
  });
  Object.defineProperty(package$gl, 'GL_FUNC_SUBTRACT', {
    get: function () {
      return GL_FUNC_SUBTRACT;
    }
  });
  Object.defineProperty(package$gl, 'GL_FUNC_REVERSE_SUBTRACT', {
    get: function () {
      return GL_FUNC_REVERSE_SUBTRACT;
    }
  });
  Object.defineProperty(package$gl, 'GL_BLEND_DST_RGB', {
    get: function () {
      return GL_BLEND_DST_RGB;
    }
  });
  Object.defineProperty(package$gl, 'GL_BLEND_SRC_RGB', {
    get: function () {
      return GL_BLEND_SRC_RGB;
    }
  });
  Object.defineProperty(package$gl, 'GL_BLEND_DST_ALPHA', {
    get: function () {
      return GL_BLEND_DST_ALPHA;
    }
  });
  Object.defineProperty(package$gl, 'GL_BLEND_SRC_ALPHA', {
    get: function () {
      return GL_BLEND_SRC_ALPHA;
    }
  });
  Object.defineProperty(package$gl, 'GL_CONSTANT_COLOR', {
    get: function () {
      return GL_CONSTANT_COLOR;
    }
  });
  Object.defineProperty(package$gl, 'GL_ONE_MINUS_CONSTANT_COLOR', {
    get: function () {
      return GL_ONE_MINUS_CONSTANT_COLOR;
    }
  });
  Object.defineProperty(package$gl, 'GL_CONSTANT_ALPHA', {
    get: function () {
      return GL_CONSTANT_ALPHA;
    }
  });
  Object.defineProperty(package$gl, 'GL_ONE_MINUS_CONSTANT_ALPHA', {
    get: function () {
      return GL_ONE_MINUS_CONSTANT_ALPHA;
    }
  });
  Object.defineProperty(package$gl, 'GL_BLEND_COLOR', {
    get: function () {
      return GL_BLEND_COLOR;
    }
  });
  Object.defineProperty(package$gl, 'GL_ARRAY_BUFFER', {
    get: function () {
      return GL_ARRAY_BUFFER;
    }
  });
  Object.defineProperty(package$gl, 'GL_ELEMENT_ARRAY_BUFFER', {
    get: function () {
      return GL_ELEMENT_ARRAY_BUFFER;
    }
  });
  Object.defineProperty(package$gl, 'GL_ARRAY_BUFFER_BINDING', {
    get: function () {
      return GL_ARRAY_BUFFER_BINDING;
    }
  });
  Object.defineProperty(package$gl, 'GL_ELEMENT_ARRAY_BUFFER_BINDING', {
    get: function () {
      return GL_ELEMENT_ARRAY_BUFFER_BINDING;
    }
  });
  Object.defineProperty(package$gl, 'GL_STREAM_DRAW', {
    get: function () {
      return GL_STREAM_DRAW;
    }
  });
  Object.defineProperty(package$gl, 'GL_STATIC_DRAW', {
    get: function () {
      return GL_STATIC_DRAW;
    }
  });
  Object.defineProperty(package$gl, 'GL_DYNAMIC_DRAW', {
    get: function () {
      return GL_DYNAMIC_DRAW;
    }
  });
  Object.defineProperty(package$gl, 'GL_BUFFER_SIZE', {
    get: function () {
      return GL_BUFFER_SIZE;
    }
  });
  Object.defineProperty(package$gl, 'GL_BUFFER_USAGE', {
    get: function () {
      return GL_BUFFER_USAGE;
    }
  });
  Object.defineProperty(package$gl, 'GL_CURRENT_VERTEX_ATTRIB', {
    get: function () {
      return GL_CURRENT_VERTEX_ATTRIB;
    }
  });
  Object.defineProperty(package$gl, 'GL_FRONT', {
    get: function () {
      return GL_FRONT;
    }
  });
  Object.defineProperty(package$gl, 'GL_BACK', {
    get: function () {
      return GL_BACK;
    }
  });
  Object.defineProperty(package$gl, 'GL_FRONT_AND_BACK', {
    get: function () {
      return GL_FRONT_AND_BACK;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE_2D', {
    get: function () {
      return GL_TEXTURE_2D;
    }
  });
  Object.defineProperty(package$gl, 'GL_CULL_FACE', {
    get: function () {
      return GL_CULL_FACE;
    }
  });
  Object.defineProperty(package$gl, 'GL_BLEND', {
    get: function () {
      return GL_BLEND;
    }
  });
  Object.defineProperty(package$gl, 'GL_DITHER', {
    get: function () {
      return GL_DITHER;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_TEST', {
    get: function () {
      return GL_STENCIL_TEST;
    }
  });
  Object.defineProperty(package$gl, 'GL_DEPTH_TEST', {
    get: function () {
      return GL_DEPTH_TEST;
    }
  });
  Object.defineProperty(package$gl, 'GL_SCISSOR_TEST', {
    get: function () {
      return GL_SCISSOR_TEST;
    }
  });
  Object.defineProperty(package$gl, 'GL_POLYGON_OFFSET_FILL', {
    get: function () {
      return GL_POLYGON_OFFSET_FILL;
    }
  });
  Object.defineProperty(package$gl, 'GL_SAMPLE_ALPHA_TO_COVERAGE', {
    get: function () {
      return GL_SAMPLE_ALPHA_TO_COVERAGE;
    }
  });
  Object.defineProperty(package$gl, 'GL_SAMPLE_COVERAGE', {
    get: function () {
      return GL_SAMPLE_COVERAGE;
    }
  });
  Object.defineProperty(package$gl, 'GL_NO_ERROR', {
    get: function () {
      return GL_NO_ERROR;
    }
  });
  Object.defineProperty(package$gl, 'GL_INVALID_ENUM', {
    get: function () {
      return GL_INVALID_ENUM;
    }
  });
  Object.defineProperty(package$gl, 'GL_INVALID_VALUE', {
    get: function () {
      return GL_INVALID_VALUE;
    }
  });
  Object.defineProperty(package$gl, 'GL_INVALID_OPERATION', {
    get: function () {
      return GL_INVALID_OPERATION;
    }
  });
  Object.defineProperty(package$gl, 'GL_OUT_OF_MEMORY', {
    get: function () {
      return GL_OUT_OF_MEMORY;
    }
  });
  Object.defineProperty(package$gl, 'GL_CW', {
    get: function () {
      return GL_CW;
    }
  });
  Object.defineProperty(package$gl, 'GL_CCW', {
    get: function () {
      return GL_CCW;
    }
  });
  Object.defineProperty(package$gl, 'GL_LINE_WIDTH', {
    get: function () {
      return GL_LINE_WIDTH;
    }
  });
  Object.defineProperty(package$gl, 'GL_ALIASED_POINT_SIZE_RANGE', {
    get: function () {
      return GL_ALIASED_POINT_SIZE_RANGE;
    }
  });
  Object.defineProperty(package$gl, 'GL_ALIASED_LINE_WIDTH_RANGE', {
    get: function () {
      return GL_ALIASED_LINE_WIDTH_RANGE;
    }
  });
  Object.defineProperty(package$gl, 'GL_CULL_FACE_MODE', {
    get: function () {
      return GL_CULL_FACE_MODE;
    }
  });
  Object.defineProperty(package$gl, 'GL_FRONT_FACE', {
    get: function () {
      return GL_FRONT_FACE;
    }
  });
  Object.defineProperty(package$gl, 'GL_DEPTH_RANGE', {
    get: function () {
      return GL_DEPTH_RANGE;
    }
  });
  Object.defineProperty(package$gl, 'GL_DEPTH_WRITEMASK', {
    get: function () {
      return GL_DEPTH_WRITEMASK;
    }
  });
  Object.defineProperty(package$gl, 'GL_DEPTH_CLEAR_VALUE', {
    get: function () {
      return GL_DEPTH_CLEAR_VALUE;
    }
  });
  Object.defineProperty(package$gl, 'GL_DEPTH_FUNC', {
    get: function () {
      return GL_DEPTH_FUNC;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_CLEAR_VALUE', {
    get: function () {
      return GL_STENCIL_CLEAR_VALUE;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_FUNC', {
    get: function () {
      return GL_STENCIL_FUNC;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_FAIL', {
    get: function () {
      return GL_STENCIL_FAIL;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_PASS_DEPTH_FAIL', {
    get: function () {
      return GL_STENCIL_PASS_DEPTH_FAIL;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_PASS_DEPTH_PASS', {
    get: function () {
      return GL_STENCIL_PASS_DEPTH_PASS;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_REF', {
    get: function () {
      return GL_STENCIL_REF;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_VALUE_MASK', {
    get: function () {
      return GL_STENCIL_VALUE_MASK;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_WRITEMASK', {
    get: function () {
      return GL_STENCIL_WRITEMASK;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_BACK_FUNC', {
    get: function () {
      return GL_STENCIL_BACK_FUNC;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_BACK_FAIL', {
    get: function () {
      return GL_STENCIL_BACK_FAIL;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_BACK_PASS_DEPTH_FAIL', {
    get: function () {
      return GL_STENCIL_BACK_PASS_DEPTH_FAIL;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_BACK_PASS_DEPTH_PASS', {
    get: function () {
      return GL_STENCIL_BACK_PASS_DEPTH_PASS;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_BACK_REF', {
    get: function () {
      return GL_STENCIL_BACK_REF;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_BACK_VALUE_MASK', {
    get: function () {
      return GL_STENCIL_BACK_VALUE_MASK;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_BACK_WRITEMASK', {
    get: function () {
      return GL_STENCIL_BACK_WRITEMASK;
    }
  });
  Object.defineProperty(package$gl, 'GL_VIEWPORT', {
    get: function () {
      return GL_VIEWPORT;
    }
  });
  Object.defineProperty(package$gl, 'GL_SCISSOR_BOX', {
    get: function () {
      return GL_SCISSOR_BOX;
    }
  });
  Object.defineProperty(package$gl, 'GL_COLOR_CLEAR_VALUE', {
    get: function () {
      return GL_COLOR_CLEAR_VALUE;
    }
  });
  Object.defineProperty(package$gl, 'GL_COLOR_WRITEMASK', {
    get: function () {
      return GL_COLOR_WRITEMASK;
    }
  });
  Object.defineProperty(package$gl, 'GL_UNPACK_ALIGNMENT', {
    get: function () {
      return GL_UNPACK_ALIGNMENT;
    }
  });
  Object.defineProperty(package$gl, 'GL_PACK_ALIGNMENT', {
    get: function () {
      return GL_PACK_ALIGNMENT;
    }
  });
  Object.defineProperty(package$gl, 'GL_MAX_TEXTURE_SIZE', {
    get: function () {
      return GL_MAX_TEXTURE_SIZE;
    }
  });
  Object.defineProperty(package$gl, 'GL_MAX_VIEWPORT_DIMS', {
    get: function () {
      return GL_MAX_VIEWPORT_DIMS;
    }
  });
  Object.defineProperty(package$gl, 'GL_SUBPIXEL_BITS', {
    get: function () {
      return GL_SUBPIXEL_BITS;
    }
  });
  Object.defineProperty(package$gl, 'GL_RED_BITS', {
    get: function () {
      return GL_RED_BITS;
    }
  });
  Object.defineProperty(package$gl, 'GL_GREEN_BITS', {
    get: function () {
      return GL_GREEN_BITS;
    }
  });
  Object.defineProperty(package$gl, 'GL_BLUE_BITS', {
    get: function () {
      return GL_BLUE_BITS;
    }
  });
  Object.defineProperty(package$gl, 'GL_ALPHA_BITS', {
    get: function () {
      return GL_ALPHA_BITS;
    }
  });
  Object.defineProperty(package$gl, 'GL_DEPTH_BITS', {
    get: function () {
      return GL_DEPTH_BITS;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_BITS', {
    get: function () {
      return GL_STENCIL_BITS;
    }
  });
  Object.defineProperty(package$gl, 'GL_POLYGON_OFFSET_UNITS', {
    get: function () {
      return GL_POLYGON_OFFSET_UNITS;
    }
  });
  Object.defineProperty(package$gl, 'GL_POLYGON_OFFSET_FACTOR', {
    get: function () {
      return GL_POLYGON_OFFSET_FACTOR;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE_BINDING_2D', {
    get: function () {
      return GL_TEXTURE_BINDING_2D;
    }
  });
  Object.defineProperty(package$gl, 'GL_SAMPLE_BUFFERS', {
    get: function () {
      return GL_SAMPLE_BUFFERS;
    }
  });
  Object.defineProperty(package$gl, 'GL_SAMPLES', {
    get: function () {
      return GL_SAMPLES;
    }
  });
  Object.defineProperty(package$gl, 'GL_SAMPLE_COVERAGE_VALUE', {
    get: function () {
      return GL_SAMPLE_COVERAGE_VALUE;
    }
  });
  Object.defineProperty(package$gl, 'GL_SAMPLE_COVERAGE_INVERT', {
    get: function () {
      return GL_SAMPLE_COVERAGE_INVERT;
    }
  });
  Object.defineProperty(package$gl, 'GL_NUM_COMPRESSED_TEXTURE_FORMATS', {
    get: function () {
      return GL_NUM_COMPRESSED_TEXTURE_FORMATS;
    }
  });
  Object.defineProperty(package$gl, 'GL_COMPRESSED_TEXTURE_FORMATS', {
    get: function () {
      return GL_COMPRESSED_TEXTURE_FORMATS;
    }
  });
  Object.defineProperty(package$gl, 'GL_DONT_CARE', {
    get: function () {
      return GL_DONT_CARE;
    }
  });
  Object.defineProperty(package$gl, 'GL_FASTEST', {
    get: function () {
      return GL_FASTEST;
    }
  });
  Object.defineProperty(package$gl, 'GL_NICEST', {
    get: function () {
      return GL_NICEST;
    }
  });
  Object.defineProperty(package$gl, 'GL_GENERATE_MIPMAP_HINT', {
    get: function () {
      return GL_GENERATE_MIPMAP_HINT;
    }
  });
  Object.defineProperty(package$gl, 'GL_BYTE', {
    get: function () {
      return GL_BYTE;
    }
  });
  Object.defineProperty(package$gl, 'GL_UNSIGNED_BYTE', {
    get: function () {
      return GL_UNSIGNED_BYTE;
    }
  });
  Object.defineProperty(package$gl, 'GL_SHORT', {
    get: function () {
      return GL_SHORT;
    }
  });
  Object.defineProperty(package$gl, 'GL_UNSIGNED_SHORT', {
    get: function () {
      return GL_UNSIGNED_SHORT;
    }
  });
  Object.defineProperty(package$gl, 'GL_INT', {
    get: function () {
      return GL_INT;
    }
  });
  Object.defineProperty(package$gl, 'GL_UNSIGNED_INT', {
    get: function () {
      return GL_UNSIGNED_INT;
    }
  });
  Object.defineProperty(package$gl, 'GL_FLOAT', {
    get: function () {
      return GL_FLOAT;
    }
  });
  Object.defineProperty(package$gl, 'GL_FIXED', {
    get: function () {
      return GL_FIXED;
    }
  });
  Object.defineProperty(package$gl, 'GL_DEPTH_COMPONENT', {
    get: function () {
      return GL_DEPTH_COMPONENT;
    }
  });
  Object.defineProperty(package$gl, 'GL_DEPTH_COMPONENT24', {
    get: function () {
      return GL_DEPTH_COMPONENT24;
    }
  });
  Object.defineProperty(package$gl, 'GL_DEPTH_COMPONENT32F', {
    get: function () {
      return GL_DEPTH_COMPONENT32F;
    }
  });
  Object.defineProperty(package$gl, 'GL_ALPHA', {
    get: function () {
      return GL_ALPHA;
    }
  });
  Object.defineProperty(package$gl, 'GL_RGB', {
    get: function () {
      return GL_RGB;
    }
  });
  Object.defineProperty(package$gl, 'GL_RGBA', {
    get: function () {
      return GL_RGBA;
    }
  });
  Object.defineProperty(package$gl, 'GL_LUMINANCE', {
    get: function () {
      return GL_LUMINANCE;
    }
  });
  Object.defineProperty(package$gl, 'GL_LUMINANCE_ALPHA', {
    get: function () {
      return GL_LUMINANCE_ALPHA;
    }
  });
  Object.defineProperty(package$gl, 'GL_UNSIGNED_SHORT_4_4_4_4', {
    get: function () {
      return GL_UNSIGNED_SHORT_4_4_4_4;
    }
  });
  Object.defineProperty(package$gl, 'GL_UNSIGNED_SHORT_5_5_5_1', {
    get: function () {
      return GL_UNSIGNED_SHORT_5_5_5_1;
    }
  });
  Object.defineProperty(package$gl, 'GL_UNSIGNED_SHORT_5_6_5', {
    get: function () {
      return GL_UNSIGNED_SHORT_5_6_5;
    }
  });
  Object.defineProperty(package$gl, 'GL_FRAGMENT_SHADER', {
    get: function () {
      return GL_FRAGMENT_SHADER;
    }
  });
  Object.defineProperty(package$gl, 'GL_VERTEX_SHADER', {
    get: function () {
      return GL_VERTEX_SHADER;
    }
  });
  Object.defineProperty(package$gl, 'GL_GEOMETRY_SHADER', {
    get: function () {
      return GL_GEOMETRY_SHADER;
    }
  });
  Object.defineProperty(package$gl, 'GL_MAX_VERTEX_ATTRIBS', {
    get: function () {
      return GL_MAX_VERTEX_ATTRIBS;
    }
  });
  Object.defineProperty(package$gl, 'GL_MAX_VERTEX_UNIFORM_VECTORS', {
    get: function () {
      return GL_MAX_VERTEX_UNIFORM_VECTORS;
    }
  });
  Object.defineProperty(package$gl, 'GL_MAX_VARYING_VECTORS', {
    get: function () {
      return GL_MAX_VARYING_VECTORS;
    }
  });
  Object.defineProperty(package$gl, 'GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS', {
    get: function () {
      return GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS;
    }
  });
  Object.defineProperty(package$gl, 'GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS', {
    get: function () {
      return GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS;
    }
  });
  Object.defineProperty(package$gl, 'GL_MAX_TEXTURE_IMAGE_UNITS', {
    get: function () {
      return GL_MAX_TEXTURE_IMAGE_UNITS;
    }
  });
  Object.defineProperty(package$gl, 'GL_MAX_FRAGMENT_UNIFORM_VECTORS', {
    get: function () {
      return GL_MAX_FRAGMENT_UNIFORM_VECTORS;
    }
  });
  Object.defineProperty(package$gl, 'GL_SHADER_TYPE', {
    get: function () {
      return GL_SHADER_TYPE;
    }
  });
  Object.defineProperty(package$gl, 'GL_DELETE_STATUS', {
    get: function () {
      return GL_DELETE_STATUS;
    }
  });
  Object.defineProperty(package$gl, 'GL_LINK_STATUS', {
    get: function () {
      return GL_LINK_STATUS;
    }
  });
  Object.defineProperty(package$gl, 'GL_VALIDATE_STATUS', {
    get: function () {
      return GL_VALIDATE_STATUS;
    }
  });
  Object.defineProperty(package$gl, 'GL_ATTACHED_SHADERS', {
    get: function () {
      return GL_ATTACHED_SHADERS;
    }
  });
  Object.defineProperty(package$gl, 'GL_ACTIVE_UNIFORMS', {
    get: function () {
      return GL_ACTIVE_UNIFORMS;
    }
  });
  Object.defineProperty(package$gl, 'GL_ACTIVE_UNIFORM_MAX_LENGTH', {
    get: function () {
      return GL_ACTIVE_UNIFORM_MAX_LENGTH;
    }
  });
  Object.defineProperty(package$gl, 'GL_ACTIVE_ATTRIBUTES', {
    get: function () {
      return GL_ACTIVE_ATTRIBUTES;
    }
  });
  Object.defineProperty(package$gl, 'GL_ACTIVE_ATTRIBUTE_MAX_LENGTH', {
    get: function () {
      return GL_ACTIVE_ATTRIBUTE_MAX_LENGTH;
    }
  });
  Object.defineProperty(package$gl, 'GL_SHADING_LANGUAGE_VERSION', {
    get: function () {
      return GL_SHADING_LANGUAGE_VERSION;
    }
  });
  Object.defineProperty(package$gl, 'GL_CURRENT_PROGRAM', {
    get: function () {
      return GL_CURRENT_PROGRAM;
    }
  });
  Object.defineProperty(package$gl, 'GL_NEVER', {
    get: function () {
      return GL_NEVER;
    }
  });
  Object.defineProperty(package$gl, 'GL_LESS', {
    get: function () {
      return GL_LESS;
    }
  });
  Object.defineProperty(package$gl, 'GL_EQUAL', {
    get: function () {
      return GL_EQUAL;
    }
  });
  Object.defineProperty(package$gl, 'GL_LEQUAL', {
    get: function () {
      return GL_LEQUAL;
    }
  });
  Object.defineProperty(package$gl, 'GL_GREATER', {
    get: function () {
      return GL_GREATER;
    }
  });
  Object.defineProperty(package$gl, 'GL_NOTEQUAL', {
    get: function () {
      return GL_NOTEQUAL;
    }
  });
  Object.defineProperty(package$gl, 'GL_GEQUAL', {
    get: function () {
      return GL_GEQUAL;
    }
  });
  Object.defineProperty(package$gl, 'GL_ALWAYS', {
    get: function () {
      return GL_ALWAYS;
    }
  });
  Object.defineProperty(package$gl, 'GL_KEEP', {
    get: function () {
      return GL_KEEP;
    }
  });
  Object.defineProperty(package$gl, 'GL_REPLACE', {
    get: function () {
      return GL_REPLACE;
    }
  });
  Object.defineProperty(package$gl, 'GL_INCR', {
    get: function () {
      return GL_INCR;
    }
  });
  Object.defineProperty(package$gl, 'GL_DECR', {
    get: function () {
      return GL_DECR;
    }
  });
  Object.defineProperty(package$gl, 'GL_INVERT', {
    get: function () {
      return GL_INVERT;
    }
  });
  Object.defineProperty(package$gl, 'GL_INCR_WRAP', {
    get: function () {
      return GL_INCR_WRAP;
    }
  });
  Object.defineProperty(package$gl, 'GL_DECR_WRAP', {
    get: function () {
      return GL_DECR_WRAP;
    }
  });
  Object.defineProperty(package$gl, 'GL_VENDOR', {
    get: function () {
      return GL_VENDOR;
    }
  });
  Object.defineProperty(package$gl, 'GL_RENDERER', {
    get: function () {
      return GL_RENDERER;
    }
  });
  Object.defineProperty(package$gl, 'GL_VERSION', {
    get: function () {
      return GL_VERSION;
    }
  });
  Object.defineProperty(package$gl, 'GL_EXTENSIONS', {
    get: function () {
      return GL_EXTENSIONS;
    }
  });
  Object.defineProperty(package$gl, 'GL_NEAREST', {
    get: function () {
      return GL_NEAREST;
    }
  });
  Object.defineProperty(package$gl, 'GL_LINEAR', {
    get: function () {
      return GL_LINEAR;
    }
  });
  Object.defineProperty(package$gl, 'GL_NEAREST_MIPMAP_NEAREST', {
    get: function () {
      return GL_NEAREST_MIPMAP_NEAREST;
    }
  });
  Object.defineProperty(package$gl, 'GL_LINEAR_MIPMAP_NEAREST', {
    get: function () {
      return GL_LINEAR_MIPMAP_NEAREST;
    }
  });
  Object.defineProperty(package$gl, 'GL_NEAREST_MIPMAP_LINEAR', {
    get: function () {
      return GL_NEAREST_MIPMAP_LINEAR;
    }
  });
  Object.defineProperty(package$gl, 'GL_LINEAR_MIPMAP_LINEAR', {
    get: function () {
      return GL_LINEAR_MIPMAP_LINEAR;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE_MAG_FILTER', {
    get: function () {
      return GL_TEXTURE_MAG_FILTER;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE_MIN_FILTER', {
    get: function () {
      return GL_TEXTURE_MIN_FILTER;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE_WRAP_S', {
    get: function () {
      return GL_TEXTURE_WRAP_S;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE_WRAP_T', {
    get: function () {
      return GL_TEXTURE_WRAP_T;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE_WRAP_R', {
    get: function () {
      return GL_TEXTURE_WRAP_R;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE', {
    get: function () {
      return GL_TEXTURE;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE_CUBE_MAP', {
    get: function () {
      return GL_TEXTURE_CUBE_MAP;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE_BINDING_CUBE_MAP', {
    get: function () {
      return GL_TEXTURE_BINDING_CUBE_MAP;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE_CUBE_MAP_POSITIVE_X', {
    get: function () {
      return GL_TEXTURE_CUBE_MAP_POSITIVE_X;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE_CUBE_MAP_NEGATIVE_X', {
    get: function () {
      return GL_TEXTURE_CUBE_MAP_NEGATIVE_X;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE_CUBE_MAP_POSITIVE_Y', {
    get: function () {
      return GL_TEXTURE_CUBE_MAP_POSITIVE_Y;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE_CUBE_MAP_NEGATIVE_Y', {
    get: function () {
      return GL_TEXTURE_CUBE_MAP_NEGATIVE_Y;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE_CUBE_MAP_POSITIVE_Z', {
    get: function () {
      return GL_TEXTURE_CUBE_MAP_POSITIVE_Z;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE_CUBE_MAP_NEGATIVE_Z', {
    get: function () {
      return GL_TEXTURE_CUBE_MAP_NEGATIVE_Z;
    }
  });
  Object.defineProperty(package$gl, 'GL_MAX_CUBE_MAP_TEXTURE_SIZE', {
    get: function () {
      return GL_MAX_CUBE_MAP_TEXTURE_SIZE;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE0', {
    get: function () {
      return GL_TEXTURE0;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE1', {
    get: function () {
      return GL_TEXTURE1;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE2', {
    get: function () {
      return GL_TEXTURE2;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE3', {
    get: function () {
      return GL_TEXTURE3;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE4', {
    get: function () {
      return GL_TEXTURE4;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE5', {
    get: function () {
      return GL_TEXTURE5;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE6', {
    get: function () {
      return GL_TEXTURE6;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE7', {
    get: function () {
      return GL_TEXTURE7;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE8', {
    get: function () {
      return GL_TEXTURE8;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE9', {
    get: function () {
      return GL_TEXTURE9;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE10', {
    get: function () {
      return GL_TEXTURE10;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE11', {
    get: function () {
      return GL_TEXTURE11;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE12', {
    get: function () {
      return GL_TEXTURE12;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE13', {
    get: function () {
      return GL_TEXTURE13;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE14', {
    get: function () {
      return GL_TEXTURE14;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE15', {
    get: function () {
      return GL_TEXTURE15;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE16', {
    get: function () {
      return GL_TEXTURE16;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE17', {
    get: function () {
      return GL_TEXTURE17;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE18', {
    get: function () {
      return GL_TEXTURE18;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE19', {
    get: function () {
      return GL_TEXTURE19;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE20', {
    get: function () {
      return GL_TEXTURE20;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE21', {
    get: function () {
      return GL_TEXTURE21;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE22', {
    get: function () {
      return GL_TEXTURE22;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE23', {
    get: function () {
      return GL_TEXTURE23;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE24', {
    get: function () {
      return GL_TEXTURE24;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE25', {
    get: function () {
      return GL_TEXTURE25;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE26', {
    get: function () {
      return GL_TEXTURE26;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE27', {
    get: function () {
      return GL_TEXTURE27;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE28', {
    get: function () {
      return GL_TEXTURE28;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE29', {
    get: function () {
      return GL_TEXTURE29;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE30', {
    get: function () {
      return GL_TEXTURE30;
    }
  });
  Object.defineProperty(package$gl, 'GL_TEXTURE31', {
    get: function () {
      return GL_TEXTURE31;
    }
  });
  Object.defineProperty(package$gl, 'GL_REPEAT', {
    get: function () {
      return GL_REPEAT;
    }
  });
  Object.defineProperty(package$gl, 'GL_CLAMP_TO_EDGE', {
    get: function () {
      return GL_CLAMP_TO_EDGE;
    }
  });
  Object.defineProperty(package$gl, 'GL_MIRRORED_REPEAT', {
    get: function () {
      return GL_MIRRORED_REPEAT;
    }
  });
  Object.defineProperty(package$gl, 'GL_FLOAT_VEC2', {
    get: function () {
      return GL_FLOAT_VEC2;
    }
  });
  Object.defineProperty(package$gl, 'GL_FLOAT_VEC3', {
    get: function () {
      return GL_FLOAT_VEC3;
    }
  });
  Object.defineProperty(package$gl, 'GL_FLOAT_VEC4', {
    get: function () {
      return GL_FLOAT_VEC4;
    }
  });
  Object.defineProperty(package$gl, 'GL_INT_VEC2', {
    get: function () {
      return GL_INT_VEC2;
    }
  });
  Object.defineProperty(package$gl, 'GL_INT_VEC3', {
    get: function () {
      return GL_INT_VEC3;
    }
  });
  Object.defineProperty(package$gl, 'GL_INT_VEC4', {
    get: function () {
      return GL_INT_VEC4;
    }
  });
  Object.defineProperty(package$gl, 'GL_BOOL', {
    get: function () {
      return GL_BOOL;
    }
  });
  Object.defineProperty(package$gl, 'GL_BOOL_VEC2', {
    get: function () {
      return GL_BOOL_VEC2;
    }
  });
  Object.defineProperty(package$gl, 'GL_BOOL_VEC3', {
    get: function () {
      return GL_BOOL_VEC3;
    }
  });
  Object.defineProperty(package$gl, 'GL_BOOL_VEC4', {
    get: function () {
      return GL_BOOL_VEC4;
    }
  });
  Object.defineProperty(package$gl, 'GL_FLOAT_MAT2', {
    get: function () {
      return GL_FLOAT_MAT2;
    }
  });
  Object.defineProperty(package$gl, 'GL_FLOAT_MAT3', {
    get: function () {
      return GL_FLOAT_MAT3;
    }
  });
  Object.defineProperty(package$gl, 'GL_FLOAT_MAT4', {
    get: function () {
      return GL_FLOAT_MAT4;
    }
  });
  Object.defineProperty(package$gl, 'GL_SAMPLER_2D', {
    get: function () {
      return GL_SAMPLER_2D;
    }
  });
  Object.defineProperty(package$gl, 'GL_SAMPLER_CUBE', {
    get: function () {
      return GL_SAMPLER_CUBE;
    }
  });
  Object.defineProperty(package$gl, 'GL_VERTEX_ATTRIB_ARRAY_ENABLED', {
    get: function () {
      return GL_VERTEX_ATTRIB_ARRAY_ENABLED;
    }
  });
  Object.defineProperty(package$gl, 'GL_VERTEX_ATTRIB_ARRAY_SIZE', {
    get: function () {
      return GL_VERTEX_ATTRIB_ARRAY_SIZE;
    }
  });
  Object.defineProperty(package$gl, 'GL_VERTEX_ATTRIB_ARRAY_STRIDE', {
    get: function () {
      return GL_VERTEX_ATTRIB_ARRAY_STRIDE;
    }
  });
  Object.defineProperty(package$gl, 'GL_VERTEX_ATTRIB_ARRAY_TYPE', {
    get: function () {
      return GL_VERTEX_ATTRIB_ARRAY_TYPE;
    }
  });
  Object.defineProperty(package$gl, 'GL_VERTEX_ATTRIB_ARRAY_NORMALIZED', {
    get: function () {
      return GL_VERTEX_ATTRIB_ARRAY_NORMALIZED;
    }
  });
  Object.defineProperty(package$gl, 'GL_VERTEX_ATTRIB_ARRAY_POINTER', {
    get: function () {
      return GL_VERTEX_ATTRIB_ARRAY_POINTER;
    }
  });
  Object.defineProperty(package$gl, 'GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING', {
    get: function () {
      return GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
    }
  });
  Object.defineProperty(package$gl, 'GL_IMPLEMENTATION_COLOR_READ_TYPE', {
    get: function () {
      return GL_IMPLEMENTATION_COLOR_READ_TYPE;
    }
  });
  Object.defineProperty(package$gl, 'GL_IMPLEMENTATION_COLOR_READ_FORMAT', {
    get: function () {
      return GL_IMPLEMENTATION_COLOR_READ_FORMAT;
    }
  });
  Object.defineProperty(package$gl, 'GL_COMPILE_STATUS', {
    get: function () {
      return GL_COMPILE_STATUS;
    }
  });
  Object.defineProperty(package$gl, 'GL_INFO_LOG_LENGTH', {
    get: function () {
      return GL_INFO_LOG_LENGTH;
    }
  });
  Object.defineProperty(package$gl, 'GL_SHADER_SOURCE_LENGTH', {
    get: function () {
      return GL_SHADER_SOURCE_LENGTH;
    }
  });
  Object.defineProperty(package$gl, 'GL_SHADER_COMPILER', {
    get: function () {
      return GL_SHADER_COMPILER;
    }
  });
  Object.defineProperty(package$gl, 'GL_SHADER_BINARY_FORMATS', {
    get: function () {
      return GL_SHADER_BINARY_FORMATS;
    }
  });
  Object.defineProperty(package$gl, 'GL_NUM_SHADER_BINARY_FORMATS', {
    get: function () {
      return GL_NUM_SHADER_BINARY_FORMATS;
    }
  });
  Object.defineProperty(package$gl, 'GL_LOW_FLOAT', {
    get: function () {
      return GL_LOW_FLOAT;
    }
  });
  Object.defineProperty(package$gl, 'GL_MEDIUM_FLOAT', {
    get: function () {
      return GL_MEDIUM_FLOAT;
    }
  });
  Object.defineProperty(package$gl, 'GL_HIGH_FLOAT', {
    get: function () {
      return GL_HIGH_FLOAT;
    }
  });
  Object.defineProperty(package$gl, 'GL_LOW_INT', {
    get: function () {
      return GL_LOW_INT;
    }
  });
  Object.defineProperty(package$gl, 'GL_MEDIUM_INT', {
    get: function () {
      return GL_MEDIUM_INT;
    }
  });
  Object.defineProperty(package$gl, 'GL_HIGH_INT', {
    get: function () {
      return GL_HIGH_INT;
    }
  });
  Object.defineProperty(package$gl, 'GL_FRAMEBUFFER', {
    get: function () {
      return GL_FRAMEBUFFER;
    }
  });
  Object.defineProperty(package$gl, 'GL_RENDERBUFFER', {
    get: function () {
      return GL_RENDERBUFFER;
    }
  });
  Object.defineProperty(package$gl, 'GL_RGBA4', {
    get: function () {
      return GL_RGBA4;
    }
  });
  Object.defineProperty(package$gl, 'GL_RGB5_A1', {
    get: function () {
      return GL_RGB5_A1;
    }
  });
  Object.defineProperty(package$gl, 'GL_RGB565', {
    get: function () {
      return GL_RGB565;
    }
  });
  Object.defineProperty(package$gl, 'GL_DEPTH_COMPONENT16', {
    get: function () {
      return GL_DEPTH_COMPONENT16;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_INDEX8', {
    get: function () {
      return GL_STENCIL_INDEX8;
    }
  });
  Object.defineProperty(package$gl, 'GL_RENDERBUFFER_WIDTH', {
    get: function () {
      return GL_RENDERBUFFER_WIDTH;
    }
  });
  Object.defineProperty(package$gl, 'GL_RENDERBUFFER_HEIGHT', {
    get: function () {
      return GL_RENDERBUFFER_HEIGHT;
    }
  });
  Object.defineProperty(package$gl, 'GL_RENDERBUFFER_INTERNAL_FORMAT', {
    get: function () {
      return GL_RENDERBUFFER_INTERNAL_FORMAT;
    }
  });
  Object.defineProperty(package$gl, 'GL_RENDERBUFFER_RED_SIZE', {
    get: function () {
      return GL_RENDERBUFFER_RED_SIZE;
    }
  });
  Object.defineProperty(package$gl, 'GL_RENDERBUFFER_GREEN_SIZE', {
    get: function () {
      return GL_RENDERBUFFER_GREEN_SIZE;
    }
  });
  Object.defineProperty(package$gl, 'GL_RENDERBUFFER_BLUE_SIZE', {
    get: function () {
      return GL_RENDERBUFFER_BLUE_SIZE;
    }
  });
  Object.defineProperty(package$gl, 'GL_RENDERBUFFER_ALPHA_SIZE', {
    get: function () {
      return GL_RENDERBUFFER_ALPHA_SIZE;
    }
  });
  Object.defineProperty(package$gl, 'GL_RENDERBUFFER_DEPTH_SIZE', {
    get: function () {
      return GL_RENDERBUFFER_DEPTH_SIZE;
    }
  });
  Object.defineProperty(package$gl, 'GL_RENDERBUFFER_STENCIL_SIZE', {
    get: function () {
      return GL_RENDERBUFFER_STENCIL_SIZE;
    }
  });
  Object.defineProperty(package$gl, 'GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE', {
    get: function () {
      return GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
    }
  });
  Object.defineProperty(package$gl, 'GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME', {
    get: function () {
      return GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
    }
  });
  Object.defineProperty(package$gl, 'GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL', {
    get: function () {
      return GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
    }
  });
  Object.defineProperty(package$gl, 'GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE', {
    get: function () {
      return GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
    }
  });
  Object.defineProperty(package$gl, 'GL_COLOR_ATTACHMENT0', {
    get: function () {
      return GL_COLOR_ATTACHMENT0;
    }
  });
  Object.defineProperty(package$gl, 'GL_DEPTH_ATTACHMENT', {
    get: function () {
      return GL_DEPTH_ATTACHMENT;
    }
  });
  Object.defineProperty(package$gl, 'GL_STENCIL_ATTACHMENT', {
    get: function () {
      return GL_STENCIL_ATTACHMENT;
    }
  });
  Object.defineProperty(package$gl, 'GL_NONE', {
    get: function () {
      return GL_NONE;
    }
  });
  Object.defineProperty(package$gl, 'GL_FRAMEBUFFER_COMPLETE', {
    get: function () {
      return GL_FRAMEBUFFER_COMPLETE;
    }
  });
  Object.defineProperty(package$gl, 'GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT', {
    get: function () {
      return GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
    }
  });
  Object.defineProperty(package$gl, 'GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT', {
    get: function () {
      return GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
    }
  });
  Object.defineProperty(package$gl, 'GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS', {
    get: function () {
      return GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
    }
  });
  Object.defineProperty(package$gl, 'GL_FRAMEBUFFER_UNSUPPORTED', {
    get: function () {
      return GL_FRAMEBUFFER_UNSUPPORTED;
    }
  });
  Object.defineProperty(package$gl, 'GL_FRAMEBUFFER_BINDING', {
    get: function () {
      return GL_FRAMEBUFFER_BINDING;
    }
  });
  Object.defineProperty(package$gl, 'GL_RENDERBUFFER_BINDING', {
    get: function () {
      return GL_RENDERBUFFER_BINDING;
    }
  });
  Object.defineProperty(package$gl, 'GL_MAX_RENDERBUFFER_SIZE', {
    get: function () {
      return GL_MAX_RENDERBUFFER_SIZE;
    }
  });
  Object.defineProperty(package$gl, 'GL_INVALID_FRAMEBUFFER_OPERATION', {
    get: function () {
      return GL_INVALID_FRAMEBUFFER_OPERATION;
    }
  });
  Object.defineProperty(BufferResource, 'Companion', {
    get: BufferResource$Companion_getInstance
  });
  package$gl.BufferResource = BufferResource;
  package$gl.Framebuffer = Framebuffer;
  Object.defineProperty(FramebufferResource, 'Companion', {
    get: FramebufferResource$Companion_getInstance
  });
  package$gl.FramebufferResource = FramebufferResource;
  Object.defineProperty(FbColorTexData, 'Companion', {
    get: FbColorTexData$Companion_getInstance
  });
  package$gl.FbColorTexData = FbColorTexData;
  Object.defineProperty(FbDepthTexData, 'Companion', {
    get: FbDepthTexData$Companion_getInstance
  });
  package$gl.FbDepthTexData = FbDepthTexData;
  package$gl.GlObject = GlObject;
  Object.defineProperty(GlResource$Type, 'BUFFER', {
    get: GlResource$Type$BUFFER_getInstance
  });
  Object.defineProperty(GlResource$Type, 'FRAMEBUFFER', {
    get: GlResource$Type$FRAMEBUFFER_getInstance
  });
  Object.defineProperty(GlResource$Type, 'PROGRAM', {
    get: GlResource$Type$PROGRAM_getInstance
  });
  Object.defineProperty(GlResource$Type, 'RENDERBUFFER', {
    get: GlResource$Type$RENDERBUFFER_getInstance
  });
  Object.defineProperty(GlResource$Type, 'SHADER', {
    get: GlResource$Type$SHADER_getInstance
  });
  Object.defineProperty(GlResource$Type, 'TEXTURE', {
    get: GlResource$Type$TEXTURE_getInstance
  });
  GlResource.Type = GlResource$Type;
  package$gl.GlResource = GlResource;
  Object.defineProperty(ProgramResource, 'Companion', {
    get: ProgramResource$Companion_getInstance
  });
  package$gl.ProgramResource = ProgramResource;
  Object.defineProperty(RenderbufferResource, 'Companion', {
    get: RenderbufferResource$Companion_getInstance
  });
  package$gl.RenderbufferResource = RenderbufferResource;
  Object.defineProperty(ShaderResource, 'Companion', {
    get: ShaderResource$Companion_getInstance
  });
  package$gl.ShaderResource = ShaderResource;
  Object.defineProperty(TextureResource, 'Companion', {
    get: TextureResource$Companion_getInstance
  });
  package$gl.TextureResource = TextureResource;
  Object.defineProperty(GlCapabilities, 'Companion', {
    get: GlCapabilities$Companion_getInstance
  });
  package$kool.GlCapabilities = GlCapabilities;
  package$kool.GlVersion = GlVersion;
  Object.defineProperty(AnisotropicTexFilterInfo, 'Companion', {
    get: AnisotropicTexFilterInfo$Companion_getInstance
  });
  package$kool.AnisotropicTexFilterInfo = AnisotropicTexFilterInfo;
  Object.defineProperty(GlslDialect, 'Companion', {
    get: GlslDialect$Companion_getInstance
  });
  package$kool.GlslDialect = GlslDialect;
  InputManager.Pointer = InputManager$Pointer;
  Object.defineProperty(InputManager$BufferedPointerInput$UpdateState, 'STARTED', {
    get: InputManager$BufferedPointerInput$UpdateState$STARTED_getInstance
  });
  Object.defineProperty(InputManager$BufferedPointerInput$UpdateState, 'ACTIVE', {
    get: InputManager$BufferedPointerInput$UpdateState$ACTIVE_getInstance
  });
  Object.defineProperty(InputManager$BufferedPointerInput$UpdateState, 'ENDED_BEFORE_STARTED', {
    get: InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED_getInstance
  });
  Object.defineProperty(InputManager$BufferedPointerInput$UpdateState, 'ENDED_BEFORE_ACTIVE', {
    get: InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_getInstance
  });
  Object.defineProperty(InputManager$BufferedPointerInput$UpdateState, 'ENDED', {
    get: InputManager$BufferedPointerInput$UpdateState$ENDED_getInstance
  });
  Object.defineProperty(InputManager$BufferedPointerInput$UpdateState, 'INVALID', {
    get: InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance
  });
  InputManager$BufferedPointerInput.UpdateState = InputManager$BufferedPointerInput$UpdateState;
  InputManager.BufferedPointerInput = InputManager$BufferedPointerInput;
  InputManager.KeyEventListener = InputManager$KeyEventListener;
  InputManager.KeyEvent = InputManager$KeyEvent;
  InputManager.PointerState = InputManager$PointerState;
  Object.defineProperty(InputManager, 'Companion', {
    get: InputManager$Companion_getInstance
  });
  package$kool.InputManager = InputManager;
  KoolContext.Viewport = KoolContext$Viewport;
  package$kool.KoolContext = KoolContext;
  Object.defineProperty(RenderPass, 'SHADOW', {
    get: RenderPass$SHADOW_getInstance
  });
  Object.defineProperty(RenderPass, 'SCREEN', {
    get: RenderPass$SCREEN_getInstance
  });
  package$kool.RenderPass = RenderPass;
  package$kool.KoolException_init_61zpoe$ = KoolException_init;
  package$kool.KoolException = KoolException;
  var package$math = package$kool.math || (package$kool.math = {});
  package$math.BSpline = BSpline;
  package$math.BSplineVec2f = BSplineVec2f;
  package$math.BSplineVec3f = BSplineVec3f;
  Object.defineProperty(Mat3f, 'Companion', {
    get: Mat3f$Companion_getInstance
  });
  package$math.Mat3f = Mat3f;
  Object.defineProperty(Mat4d, 'Companion', {
    get: Mat4d$Companion_getInstance
  });
  package$math.Mat4d = Mat4d;
  Object.defineProperty(Mat4dStack, 'Companion', {
    get: Mat4dStack$Companion_getInstance
  });
  package$math.Mat4dStack = Mat4dStack;
  Object.defineProperty(Mat4f, 'Companion', {
    get: Mat4f$Companion_getInstance
  });
  package$math.Mat4f = Mat4f;
  Object.defineProperty(Mat4fStack, 'Companion', {
    get: Mat4fStack$Companion_getInstance
  });
  package$math.Mat4fStack = Mat4fStack;
  Object.defineProperty(package$math, 'DEG_2_RAD', {
    get: function () {
      return DEG_2_RAD;
    }
  });
  Object.defineProperty(package$math, 'RAD_2_DEG', {
    get: function () {
      return RAD_2_DEG;
    }
  });
  Object.defineProperty(package$math, 'FUZZY_EQ_F', {
    get: function () {
      return FUZZY_EQ_F;
    }
  });
  Object.defineProperty(package$math, 'FUZZY_EQ_D', {
    get: function () {
      return FUZZY_EQ_D;
    }
  });
  Object.defineProperty(package$math, 'FLT_EPSILON', {
    get: function () {
      return FLT_EPSILON;
    }
  });
  Object.defineProperty(package$math, 'SQRT_1_2', {
    get: function () {
      return SQRT_1_2;
    }
  });
  package$math.toDeg_81szk$ = toDeg;
  package$math.toRad_81szk$ = toRad;
  package$math.toDeg_yrwdxr$ = toDeg_0;
  package$math.toRad_yrwdxr$ = toRad_0;
  package$math.isFuzzyZero_yni7l$ = isFuzzyZero;
  package$math.isFuzzyEqual_y2kzbl$ = isFuzzyEqual;
  package$math.isFuzzyZero_38ydlf$ = isFuzzyZero_0;
  package$math.isFuzzyEqual_yvo9jy$ = isFuzzyEqual_0;
  package$math.clamp_e4yvb3$ = clamp;
  package$math.clamp_wj6e7o$ = clamp_0;
  package$math.clamp_nig4hr$ = clamp_1;
  package$math.triArea_n440fu$ = triArea;
  package$math.triAspectRatio_n440fu$ = triAspectRatio;
  package$math.barycentricWeights_qvgspy$ = barycentricWeights;
  package$math.partition_yk7sjr$ = partition;
  package$math.partition_iuu93u$ = partition_0;
  package$math.partition_sdyu2v$ = partition_1;
  package$math.partition_p3zpdg$ = partition_2;
  package$math.partition_6k0an1$ = partition_3;
  package$math.Plane = Plane;
  package$math.distanceToLine_f1pxpf$ = distanceToLine;
  package$math.sqrDistanceToLine_f1pxpf$ = sqrDistanceToLine;
  package$math.sqrDistancePointToLine_dthv57$ = sqrDistancePointToLine;
  package$math.nearestPointOnLine_lg9eux$ = nearestPointOnLine;
  package$math.distanceToRay_9gh5u0$ = distanceToRay;
  package$math.distanceToRay_f1pxpf$ = distanceToRay_0;
  package$math.sqrDistanceToRay_9gh5u0$ = sqrDistanceToRay;
  package$math.sqrDistanceToRay_f1pxpf$ = sqrDistanceToRay_0;
  package$math.sqrDistancePointToRay_dthv57$ = sqrDistancePointToRay;
  package$math.nearestPointOnRay_lg9eux$ = nearestPointOnRay;
  package$math.distanceToEdge_c0lrd2$ = distanceToEdge;
  package$math.sqrDistanceToEdge_c0lrd2$ = sqrDistanceToEdge;
  package$math.sqrDistancePointToEdge_pb7sfq$ = sqrDistancePointToEdge;
  package$math.nearestPointOnEdge_9o4vz9$ = nearestPointOnEdge;
  package$math.distanceToEdge_f1pxpf$ = distanceToEdge_0;
  package$math.sqrDistanceToEdge_f1pxpf$ = sqrDistanceToEdge_0;
  package$math.sqrDistancePointToEdge_dthv57$ = sqrDistancePointToEdge_0;
  package$math.nearestPointOnEdge_lg9eux$ = nearestPointOnEdge_0;
  package$math.PointDistribution = PointDistribution;
  package$math.CubicPointDistribution = CubicPointDistribution;
  package$math.SphericalPointDistribution = SphericalPointDistribution;
  Object.defineProperty(package$math, 'defaultRandomInstance', {
    get: function () {
      return defaultRandomInstance;
    }
  });
  package$math.randomI = randomI;
  package$math.randomI_vux9f0$ = randomI_0;
  package$math.randomI_n8acyv$ = randomI_1;
  package$math.randomD = randomD;
  package$math.randomD_lu1900$ = randomD_0;
  package$math.randomF = randomF;
  package$math.randomF_dleff0$ = randomF_0;
  package$math.Random = Random;
  package$math.Ray = Ray;
  package$math.RayTest = RayTest;
  Object.defineProperty(Vec2f, 'Companion', {
    get: Vec2f$Companion_getInstance
  });
  package$math.Vec2f_init_mx4ult$ = Vec2f_init;
  package$math.Vec2f_init_czzhjp$ = Vec2f_init_0;
  package$math.Vec2f = Vec2f;
  package$math.MutableVec2f_init = MutableVec2f_init;
  package$math.MutableVec2f_init_mx4ult$ = MutableVec2f_init_0;
  package$math.MutableVec2f_init_czzhjp$ = MutableVec2f_init_1;
  package$math.MutableVec2f = MutableVec2f;
  Object.defineProperty(Vec2d, 'Companion', {
    get: Vec2d$Companion_getInstance
  });
  package$math.Vec2d_init_14dthe$ = Vec2d_init;
  package$math.Vec2d_init_czzhjr$ = Vec2d_init_0;
  package$math.Vec2d = Vec2d;
  package$math.MutableVec2d_init = MutableVec2d_init;
  package$math.MutableVec2d_init_14dthe$ = MutableVec2d_init_0;
  package$math.MutableVec2d_init_czzhjr$ = MutableVec2d_init_1;
  package$math.MutableVec2d = MutableVec2d;
  Object.defineProperty(Vec3f, 'Companion', {
    get: Vec3f$Companion_getInstance
  });
  package$math.Vec3f_init_mx4ult$ = Vec3f_init;
  package$math.Vec3f_init_czzhiu$ = Vec3f_init_0;
  package$math.Vec3f = Vec3f;
  package$math.MutableVec3f_init = MutableVec3f_init;
  package$math.MutableVec3f_init_mx4ult$ = MutableVec3f_init_0;
  package$math.MutableVec3f_init_czzhiu$ = MutableVec3f_init_1;
  package$math.MutableVec3f = MutableVec3f;
  Object.defineProperty(Vec3d, 'Companion', {
    get: Vec3d$Companion_getInstance
  });
  package$math.Vec3d_init_14dthe$ = Vec3d_init;
  package$math.Vec3d_init_czzhiw$ = Vec3d_init_0;
  package$math.Vec3d = Vec3d;
  package$math.MutableVec3d_init = MutableVec3d_init;
  package$math.MutableVec3d_init_14dthe$ = MutableVec3d_init_0;
  package$math.MutableVec3d_init_czzhiw$ = MutableVec3d_init_1;
  package$math.MutableVec3d = MutableVec3d;
  Object.defineProperty(Vec4f, 'Companion', {
    get: Vec4f$Companion_getInstance
  });
  package$math.Vec4f_init_mx4ult$ = Vec4f_init;
  package$math.Vec4f_init_2qa7tb$ = Vec4f_init_0;
  package$math.Vec4f_init_czzhhz$ = Vec4f_init_1;
  package$math.Vec4f = Vec4f;
  package$math.MutableVec4f_init = MutableVec4f_init;
  package$math.MutableVec4f_init_mx4ult$ = MutableVec4f_init_0;
  package$math.MutableVec4f_init_2qa7tb$ = MutableVec4f_init_1;
  package$math.MutableVec4f_init_czzhhz$ = MutableVec4f_init_2;
  package$math.MutableVec4f = MutableVec4f;
  Object.defineProperty(Vec4d, 'Companion', {
    get: Vec4d$Companion_getInstance
  });
  package$math.Vec4d_init_14dthe$ = Vec4d_init;
  package$math.Vec4d_init_6nz8ey$ = Vec4d_init_0;
  package$math.Vec4d_init_czzhi1$ = Vec4d_init_1;
  package$math.Vec4d = Vec4d;
  package$math.MutableVec4d_init = MutableVec4d_init;
  package$math.MutableVec4d_init_14dthe$ = MutableVec4d_init_0;
  package$math.MutableVec4d_init_6nz8ey$ = MutableVec4d_init_1;
  package$math.MutableVec4d_init_czzhi1$ = MutableVec4d_init_2;
  package$math.MutableVec4d = MutableVec4d;
  package$math.add_drouu$ = add;
  package$math.add_4lfkt4$ = add_0;
  package$math.add_8t3gre$ = add_1;
  package$math.add_w6t53u$ = add_2;
  package$math.add_ymn0x0$ = add_3;
  package$math.add_uez4yq$ = add_4;
  package$math.subtract_drouu$ = subtract;
  package$math.subtract_4lfkt4$ = subtract_0;
  package$math.subtract_8t3gre$ = subtract_1;
  package$math.subtract_w6t53u$ = subtract_2;
  package$math.subtract_ymn0x0$ = subtract_3;
  package$math.subtract_uez4yq$ = subtract_4;
  package$math.scale_rnua8g$ = scale;
  package$math.scale_2qa7tb$ = scale_0;
  package$math.scale_m79ulu$ = scale_1;
  package$math.scale_f3xr3v$ = scale_2;
  package$math.scale_6nz8ey$ = scale_3;
  package$math.scale_1rza9z$ = scale_4;
  package$math.norm_czzhjp$ = norm;
  package$math.norm_czzhiu$ = norm_0;
  package$math.norm_czzhjr$ = norm_1;
  package$math.norm_czzhiw$ = norm_2;
  package$math.cross_4lfkt4$ = cross;
  package$math.cross_ymn0x0$ = cross_0;
  package$math.slerp_m26pjg$ = slerp;
  package$math.slerp_nr5s3x$ = slerp_0;
  package$kool.MemoryManager = MemoryManager;
  var package$modules = package$kool.modules || (package$kool.modules = {});
  var package$audio = package$modules.audio || (package$modules.audio = {});
  package$audio.LowPassFilter = LowPassFilter;
  package$audio.HighPassFilter = HighPassFilter;
  Object.defineProperty(MoodFilter, 'Companion', {
    get: MoodFilter$Companion_getInstance
  });
  package$audio.MoodFilter = MoodFilter;
  package$audio.HiHat = HiHat;
  package$audio.Kick = Kick;
  package$audio.Melody = Melody;
  package$audio.Oscillator = Oscillator;
  package$audio.Pad = Pad;
  Object.defineProperty(SampleNode, 'Companion', {
    get: SampleNode$Companion_getInstance
  });
  package$audio.SampleNode = SampleNode;
  package$audio.Shaker = Shaker;
  package$audio.Snare = Snare;
  Object.defineProperty(Wave, 'Companion', {
    get: Wave$Companion_getInstance
  });
  package$audio.Wave = Wave;
  var package$globe = package$modules.globe || (package$modules.globe = {});
  var package$elevation = package$globe.elevation || (package$globe.elevation = {});
  package$elevation.BoundedElevationMap = BoundedElevationMap;
  package$elevation.ElevationMapProvider = ElevationMapProvider;
  package$elevation.ElevationMap = ElevationMap;
  package$elevation.NullElevationMap = NullElevationMap;
  Object.defineProperty(ElevationMapMeta, 'Companion', {
    get: ElevationMapMeta$Companion_getInstance
  });
  Object.defineProperty(ElevationMapMeta, '$serializer', {
    get: ElevationMapMeta$$serializer_getInstance
  });
  package$elevation.ElevationMapMeta = ElevationMapMeta;
  Object.defineProperty(ElevationMapMetaHierarchy, 'Companion', {
    get: ElevationMapMetaHierarchy$Companion_getInstance
  });
  Object.defineProperty(ElevationMapMetaHierarchy, '$serializer', {
    get: ElevationMapMetaHierarchy$$serializer_getInstance
  });
  package$elevation.ElevationMapMetaHierarchy = ElevationMapMetaHierarchy;
  package$elevation.loadElevationMap_jn660e$ = loadElevationMap;
  package$elevation.ElevationMapHierarchy = ElevationMapHierarchy;
  Object.defineProperty(ElevationMapS16, 'Companion', {
    get: ElevationMapS16$Companion_getInstance
  });
  package$elevation.ElevationMapS16 = ElevationMapS16;
  Object.defineProperty(ElevationMapSet, 'Companion', {
    get: ElevationMapSet$Companion_getInstance
  });
  package$elevation.ElevationMapSet = ElevationMapSet;
  package$elevation.LoadedMapCache = LoadedMapCache;
  Object.defineProperty(Globe, 'Companion', {
    get: Globe$Companion_getInstance
  });
  package$globe.Globe = Globe;
  package$globe.GlobeCamHandler = GlobeCamHandler;
  package$globe.TileFrame = TileFrame;
  package$globe.TileManager = TileManager;
  TileMesh.AttributionInfo = TileMesh$AttributionInfo;
  Object.defineProperty(TileMesh, 'Companion', {
    get: TileMesh$Companion_getInstance
  });
  package$globe.TileMesh = TileMesh;
  package$globe.TileMeshGenerator = TileMeshGenerator;
  Object.defineProperty(GridTileMeshGenerator, 'Companion', {
    get: GridTileMeshGenerator$Companion_getInstance
  });
  package$globe.GridTileMeshGenerator = GridTileMeshGenerator;
  Object.defineProperty(TileName, 'Companion', {
    get: TileName$Companion_getInstance
  });
  package$globe.TileName = TileName;
  package$globe.TileShaderProvider = TileShaderProvider;
  package$globe.TileShader = TileShader;
  package$globe.TexImageTileShaderProvider = TexImageTileShaderProvider;
  package$globe.OsmTexImageTileShaderProvider = OsmTexImageTileShaderProvider;
  HalfEdgeMesh.EdgeHandler = HalfEdgeMesh$EdgeHandler;
  HalfEdgeMesh.HalfEdgeVertex = HalfEdgeMesh$HalfEdgeVertex;
  HalfEdgeMesh.HalfEdge = HalfEdgeMesh$HalfEdge;
  var package$mesh = package$modules.mesh || (package$modules.mesh = {});
  package$mesh.HalfEdgeMesh = HalfEdgeMesh;
  package$mesh.ListEdgeHandler = ListEdgeHandler;
  Object.defineProperty(MeshCutXy, 'Companion', {
    get: MeshCutXy$Companion_getInstance
  });
  package$mesh.MeshCutXy = MeshCutXy;
  Object.defineProperty(OcTreeEdgeHandler$Companion.prototype, 'HalfEdgeAdapter', {
    get: OcTreeEdgeHandler$Companion$HalfEdgeAdapter_getInstance
  });
  Object.defineProperty(OcTreeEdgeHandler, 'Companion', {
    get: OcTreeEdgeHandler$Companion_getInstance
  });
  package$mesh.OcTreeEdgeHandler_init_3w6cym$ = OcTreeEdgeHandler_init;
  package$mesh.OcTreeEdgeHandler = OcTreeEdgeHandler;
  var package$simplification = package$mesh.simplification || (package$mesh.simplification = {});
  package$simplification.CollapseStrategy = CollapseStrategy;
  package$simplification.defaultCollapseStrategy = defaultCollapseStrategy;
  package$simplification.ErrorQuadric = ErrorQuadric;
  package$simplification.simplify_8igdhs$ = simplify;
  package$simplification.simplify_hem9$ = simplify_0;
  package$simplification.MeshSimplifier = MeshSimplifier;
  package$simplification.TermCriterion = TermCriterion;
  package$simplification.terminateOnFaceCountRel_14dthe$ = terminateOnFaceCountRel;
  package$simplification.terminateOnFaceCountAbs_za3lpa$ = terminateOnFaceCountAbs;
  package$simplification.terminateOnError_14dthe$ = terminateOnError;
  var package$physics = package$modules.physics || (package$modules.physics = {});
  package$physics.Box = Box;
  package$physics.BoxMesh = BoxMesh;
  Object.defineProperty(MultiBoxMesh, 'Companion', {
    get: MultiBoxMesh$Companion_getInstance
  });
  package$physics.MultiBoxMesh = MultiBoxMesh;
  Object.defineProperty(BoxBoxCollision, 'Companion', {
    get: BoxBoxCollision$Companion_getInstance
  });
  var package$collision = package$physics.collision || (package$physics.collision = {});
  package$collision.BoxBoxCollision = BoxBoxCollision;
  var package$broadphase = package$collision.broadphase || (package$collision.broadphase = {});
  package$broadphase.BroadphaseInterface = BroadphaseInterface;
  package$broadphase.BroadphaseProxy = BroadphaseProxy;
  Object.defineProperty(Dbvt$DbvtNode, 'Companion', {
    get: Dbvt$DbvtNode$Companion_getInstance
  });
  Dbvt.DbvtNode = Dbvt$DbvtNode;
  Object.defineProperty(Dbvt, 'Companion', {
    get: Dbvt$Companion_getInstance
  });
  package$broadphase.Dbvt = Dbvt;
  package$broadphase.OverlappingPairCache = OverlappingPairCache;
  package$collision.Contact = Contact;
  package$collision.Contacts = Contacts;
  var package$dispatch = package$collision.dispatch || (package$collision.dispatch = {});
  package$dispatch.Dispatcher = Dispatcher;
  package$physics.CollisionWorld = CollisionWorld;
  var package$constraintSolver = package$physics.constraintSolver || (package$physics.constraintSolver = {});
  package$constraintSolver.ContactPoint = ContactPoint;
  Object.defineProperty(ContactSolverInfo, 'Companion', {
    get: ContactSolverInfo$Companion_getInstance
  });
  package$constraintSolver.ContactSolverInfo = ContactSolverInfo;
  package$constraintSolver.SequentialImpulseConstraintSolver = SequentialImpulseConstraintSolver;
  Object.defineProperty(SolverBody, 'Companion', {
    get: SolverBody$Companion_getInstance
  });
  package$constraintSolver.SolverBody = SolverBody;
  package$constraintSolver.SolverConstraint = SolverConstraint;
  package$constraintSolver.ContactConstraint = ContactConstraint;
  package$constraintSolver.FrictionConstraint = FrictionConstraint;
  package$constraintSolver.RollingFrictionConstraint = RollingFrictionConstraint;
  Object.defineProperty(RigidBody, 'Companion', {
    get: RigidBody$Companion_getInstance
  });
  package$physics.RigidBody = RigidBody;
  package$physics.staticBox_czzhiu$ = staticBox;
  package$physics.staticBox_y2kzbl$ = staticBox_0;
  package$physics.uniformMassBox_2qa7tb$ = uniformMassBox;
  package$physics.uniformMassBox_7b5o5w$ = uniformMassBox_0;
  package$kool.MvpState = MvpState;
  package$kool.toString_lcymw2$ = toString_0;
  package$kool.RenderingHints = RenderingHints;
  Object.defineProperty(ShadowPreset, 'SHADOW_OFF', {
    get: ShadowPreset$SHADOW_OFF_getInstance
  });
  Object.defineProperty(ShadowPreset, 'SHADOW_LOW', {
    get: ShadowPreset$SHADOW_LOW_getInstance
  });
  Object.defineProperty(ShadowPreset, 'SHADOW_MEDIUM', {
    get: ShadowPreset$SHADOW_MEDIUM_getInstance
  });
  Object.defineProperty(ShadowPreset, 'SHADOW_HIGH', {
    get: ShadowPreset$SHADOW_HIGH_getInstance
  });
  Object.defineProperty(ShadowPreset, 'SHADOW_ULTRA', {
    get: ShadowPreset$SHADOW_ULTRA_getInstance
  });
  package$kool.ShadowPreset = ShadowPreset;
  var package$scene = package$kool.scene || (package$kool.scene = {});
  var package$animation = package$scene.animation || (package$scene.animation = {});
  package$animation.Animation = Animation;
  Object.defineProperty(Armature, 'Companion', {
    get: Armature$Companion_getInstance
  });
  package$animation.Armature = Armature;
  package$animation.Bone = Bone;
  package$animation.AnimatedNode = AnimatedNode;
  package$animation.NodeAnimation = NodeAnimation;
  package$animation.AnimationKey = AnimationKey;
  package$animation.RotationKey = RotationKey;
  package$animation.PositionKey = PositionKey;
  package$animation.ScalingKey = ScalingKey;
  package$scene.Camera = Camera;
  package$scene.OrthographicCamera = OrthographicCamera;
  package$scene.PerspectiveCamera = PerspectiveCamera;
  package$scene.FrustumPlane = FrustumPlane;
  var package$doubleprec = package$scene.doubleprec || (package$scene.doubleprec = {});
  package$doubleprec.doublePrecisionTransform_qrflgl$ = doublePrecisionTransform;
  package$doubleprec.DoublePrecisionRoot = DoublePrecisionRoot;
  package$doubleprec.NodeDp = NodeDp;
  package$doubleprec.NodeProxy = NodeProxy;
  package$doubleprec.transformGroupDp_qrflgl$ = transformGroupDp;
  package$doubleprec.TransformGroupDp = TransformGroupDp;
  package$scene.group_2ylazs$ = group;
  package$scene.Group = Group;
  InstancedLodMesh.LodDesc = InstancedLodMesh$LodDesc;
  package$scene.InstancedLodMesh = InstancedLodMesh;
  package$scene.LodInstance = LodInstance;
  InstancedMesh.Instance = InstancedMesh$Instance;
  InstancedMesh.Instances = InstancedMesh$Instances;
  InstancedMesh.SimpleInstances = InstancedMesh$SimpleInstances;
  Object.defineProperty(InstancedMesh, 'Companion', {
    get: InstancedMesh$Companion_getInstance
  });
  package$scene.InstancedMesh = InstancedMesh;
  package$scene.Lighting = Lighting;
  package$scene.Light = Light;
  package$scene.DirectionalLight = DirectionalLight;
  var package$shading = package$kool.shading || (package$kool.shading = {});
  package$shading.Attribute = Attribute;
  package$scene.mesh_ajiltw$ = mesh_0;
  package$scene.mesh_ki35ir$ = mesh;
  package$shading.LightModel = LightModel;
  package$shading.ColorModel = ColorModel;
  package$shading.basicShader_5qtd3o$ = basicShader;
  package$scene.colorMesh_gp9ews$ = colorMesh;
  package$scene.textMesh_8mgi8m$ = textMesh;
  package$scene.textureMesh_pyaqjj$ = textureMesh;
  Object.defineProperty(CullMethod, 'DEFAULT', {
    get: CullMethod$DEFAULT_getInstance
  });
  Object.defineProperty(CullMethod, 'CULL_BACK_FACES', {
    get: CullMethod$CULL_BACK_FACES_getInstance
  });
  Object.defineProperty(CullMethod, 'CULL_FRONT_FACES', {
    get: CullMethod$CULL_FRONT_FACES_getInstance
  });
  Object.defineProperty(CullMethod, 'NO_CULLING', {
    get: CullMethod$NO_CULLING_getInstance
  });
  package$scene.CullMethod = CullMethod;
  package$scene.Mesh = Mesh;
  package$kool.lock_eocq09$ = lock;
  package$scene.MeshData_init_j0mu7e$ = MeshData_init;
  package$scene.MeshData = MeshData;
  Object.defineProperty(MeshRayTest, 'Companion', {
    get: MeshRayTest$Companion_getInstance
  });
  package$scene.MeshRayTest = MeshRayTest;
  package$scene.Node = Node;
  package$scene.scene_13di2z$ = scene;
  Scene.DragHandler = Scene$DragHandler;
  package$scene.Scene = Scene;
  package$scene.Skybox = Skybox;
  package$scene.sphericalInputTransform_6sxffc$ = sphericalInputTransform;
  package$scene.defaultCamTransform_v4keia$ = defaultCamTransform;
  Object.defineProperty(SphericalInputTransform$DragMethod, 'NONE', {
    get: SphericalInputTransform$DragMethod$NONE_getInstance
  });
  Object.defineProperty(SphericalInputTransform$DragMethod, 'ROTATE', {
    get: SphericalInputTransform$DragMethod$ROTATE_getInstance
  });
  Object.defineProperty(SphericalInputTransform$DragMethod, 'PAN', {
    get: SphericalInputTransform$DragMethod$PAN_getInstance
  });
  SphericalInputTransform.DragMethod = SphericalInputTransform$DragMethod;
  Object.defineProperty(SphericalInputTransform$ZoomMethod, 'ZOOM_CENTER', {
    get: SphericalInputTransform$ZoomMethod$ZOOM_CENTER_getInstance
  });
  Object.defineProperty(SphericalInputTransform$ZoomMethod, 'ZOOM_TRANSLATE', {
    get: SphericalInputTransform$ZoomMethod$ZOOM_TRANSLATE_getInstance
  });
  SphericalInputTransform.ZoomMethod = SphericalInputTransform$ZoomMethod;
  package$scene.SphericalInputTransform = SphericalInputTransform;
  package$scene.PanBase = PanBase;
  package$scene.CameraOrthogonalPan = CameraOrthogonalPan;
  package$scene.FixedPlanePan = FixedPlanePan;
  package$scene.xPlanePan = xPlanePan;
  package$scene.yPlanePan = yPlanePan;
  package$scene.zPlanePan = zPlanePan;
  package$scene.Tags = Tags;
  package$scene.transformGroup_zaezuq$ = transformGroup;
  package$scene.TransformGroup = TransformGroup;
  var package$ui = package$scene.ui || (package$scene.ui = {});
  package$ui.Button = Button;
  package$ui.ButtonUi = ButtonUi;
  package$ui.ComponentUi = ComponentUi;
  package$ui.BlankComponentUi = BlankComponentUi;
  package$ui.SimpleComponentUi = SimpleComponentUi;
  package$ui.BlurredComponentUi = BlurredComponentUi;
  package$ui.setDrawBounds_d4iy13$ = setDrawBounds;
  package$ui.DrawerMenu = DrawerMenu;
  package$ui.Label = Label;
  package$ui.LabelUi = LabelUi;
  package$ui.LayoutSpec = LayoutSpec;
  Object.defineProperty(SizeUnit, 'UN', {
    get: SizeUnit$UN_getInstance
  });
  Object.defineProperty(SizeUnit, 'DP', {
    get: SizeUnit$DP_getInstance
  });
  Object.defineProperty(SizeUnit, 'MM', {
    get: SizeUnit$MM_getInstance
  });
  Object.defineProperty(SizeUnit, 'PC', {
    get: SizeUnit$PC_getInstance
  });
  package$ui.SizeUnit = SizeUnit;
  package$ui.zero = zero;
  package$ui.full = full;
  package$ui.uns_8ca0d4$ = uns;
  package$ui.dps_8ca0d4$ = dps;
  package$ui.mms_8ca0d4$ = mms;
  package$ui.pcs_8ca0d4$ = pcs;
  package$ui.pc_dleff0$ = pc;
  package$ui.dp_dleff0$ = dp;
  package$ui.mm_dleff0$ = mm;
  package$ui.pcW_wl4j30$ = pcW;
  package$ui.pcH_wl4j30$ = pcH;
  package$ui.pcD_wl4j30$ = pcD;
  package$ui.dp_wl4j30$ = dp_0;
  package$ui.mm_wl4j30$ = mm_0;
  package$ui.pcR_dleff0$ = pcR;
  package$ui.dpR_dleff0$ = dpR;
  package$ui.mmR_dleff0$ = mmR;
  package$ui.pcWR_wl4j30$ = pcWR;
  package$ui.pcHR_wl4j30$ = pcHR;
  package$ui.pcDR_wl4j30$ = pcDR;
  package$ui.dpR_wl4j30$ = dpR_0;
  package$ui.mmR_wl4j30$ = mmR_0;
  package$ui.SizeSpec = SizeSpec;
  package$ui.Margin = Margin;
  package$ui.Gravity = Gravity;
  Object.defineProperty(Alignment, 'START', {
    get: Alignment$START_getInstance
  });
  Object.defineProperty(Alignment, 'CENTER', {
    get: Alignment$CENTER_getInstance
  });
  Object.defineProperty(Alignment, 'END', {
    get: Alignment$END_getInstance
  });
  package$ui.Alignment = Alignment;
  package$ui.ScrollHandler = ScrollHandler;
  package$ui.ScrollHandlerUi = ScrollHandlerUi;
  package$ui.Slider = Slider;
  package$ui.SliderUi = SliderUi;
  package$ui.TextField = TextField;
  package$ui.TextFieldUi = TextFieldUi;
  Object.defineProperty(EditableText, 'Companion', {
    get: EditableText$Companion_getInstance
  });
  package$ui.EditableText = EditableText;
  package$ui.ToggleButton = ToggleButton;
  package$ui.ToggleButtonUi = ToggleButtonUi;
  package$ui.UiComponent = UiComponent;
  package$ui.UiContainer = UiContainer;
  package$ui.embeddedUi_y4avn7$ = embeddedUi;
  package$ui.uiScene_m9o5w1$ = uiScene;
  package$ui.UiRoot = UiRoot;
  Object.defineProperty(UiTheme, 'Companion', {
    get: UiTheme$Companion_getInstance
  });
  package$ui.UiTheme = UiTheme;
  package$ui.standardFont_mt8j6u$ = standardFont;
  package$ui.titleFont_mt8j6u$ = titleFont;
  package$ui.theme_vvurn$ = theme;
  package$ui.ThemeBuilder = ThemeBuilder;
  package$ui.ThemeOrCustomProp = ThemeOrCustomProp;
  package$kool.ShaderManager = ShaderManager;
  Object.defineProperty(AttributeType, 'FLOAT', {
    get: AttributeType$FLOAT_getInstance
  });
  Object.defineProperty(AttributeType, 'VEC_2F', {
    get: AttributeType$VEC_2F_getInstance
  });
  Object.defineProperty(AttributeType, 'VEC_3F', {
    get: AttributeType$VEC_3F_getInstance
  });
  Object.defineProperty(AttributeType, 'VEC_4F', {
    get: AttributeType$VEC_4F_getInstance
  });
  Object.defineProperty(AttributeType, 'COLOR_4F', {
    get: AttributeType$COLOR_4F_getInstance
  });
  Object.defineProperty(AttributeType, 'INT', {
    get: AttributeType$INT_getInstance
  });
  Object.defineProperty(AttributeType, 'VEC_2I', {
    get: AttributeType$VEC_2I_getInstance
  });
  Object.defineProperty(AttributeType, 'VEC_3I', {
    get: AttributeType$VEC_3I_getInstance
  });
  Object.defineProperty(AttributeType, 'VEC_4I', {
    get: AttributeType$VEC_4I_getInstance
  });
  package$shading.AttributeType = AttributeType;
  Object.defineProperty(Attribute, 'Companion', {
    get: Attribute$Companion_getInstance
  });
  package$shading.BasicShader = BasicShader;
  package$shading.basicPointShader_n50u2h$ = basicPointShader;
  Object.defineProperty(BasicPointShader, 'Companion', {
    get: BasicPointShader$Companion_getInstance
  });
  package$shading.BasicPointShader = BasicPointShader;
  package$shading.blurShader_n50u2h$ = blurShader;
  package$shading.BlurShader = BlurShader;
  Object.defineProperty(BlurredBackgroundHelper$BlurMethod, 'BLUR_9_TAP', {
    get: BlurredBackgroundHelper$BlurMethod$BLUR_9_TAP_getInstance
  });
  Object.defineProperty(BlurredBackgroundHelper$BlurMethod, 'BLUR_13_TAP', {
    get: BlurredBackgroundHelper$BlurMethod$BLUR_13_TAP_getInstance
  });
  BlurredBackgroundHelper.BlurMethod = BlurredBackgroundHelper$BlurMethod;
  package$shading.BlurredBackgroundHelper = BlurredBackgroundHelper;
  package$shading.ClipMethod = ClipMethod;
  package$shading.NoClipping = NoClipping;
  package$shading.LocalClip = LocalClip;
  package$shading.LocalPlaneClip = LocalPlaneClip;
  package$shading.LocalSphereClip = LocalSphereClip;
  Object.defineProperty(GlslGenerator, 'Companion', {
    get: GlslGenerator$Companion_getInstance
  });
  GlslGenerator.GlslInjector = GlslGenerator$GlslInjector;
  package$shading.GlslGenerator = GlslGenerator;
  Shader.Source_init_puj7f4$ = Shader$Shader$Source_init;
  Shader.Source = Shader$Source;
  Shader.AttributeLocation = Shader$AttributeLocation;
  package$shading.Shader = Shader;
  Object.defineProperty(LightModel, 'PHONG_LIGHTING', {
    get: LightModel$PHONG_LIGHTING_getInstance
  });
  Object.defineProperty(LightModel, 'GOURAUD_LIGHTING', {
    get: LightModel$GOURAUD_LIGHTING_getInstance
  });
  Object.defineProperty(LightModel, 'NO_LIGHTING', {
    get: LightModel$NO_LIGHTING_getInstance
  });
  Object.defineProperty(ColorModel, 'VERTEX_COLOR', {
    get: ColorModel$VERTEX_COLOR_getInstance
  });
  Object.defineProperty(ColorModel, 'TEXTURE_COLOR', {
    get: ColorModel$TEXTURE_COLOR_getInstance
  });
  Object.defineProperty(ColorModel, 'STATIC_COLOR', {
    get: ColorModel$STATIC_COLOR_getInstance
  });
  Object.defineProperty(ColorModel, 'CUSTOM_COLOR', {
    get: ColorModel$CUSTOM_COLOR_getInstance
  });
  Object.defineProperty(FogModel, 'FOG_OFF', {
    get: FogModel$FOG_OFF_getInstance
  });
  Object.defineProperty(FogModel, 'FOG_ON', {
    get: FogModel$FOG_ON_getInstance
  });
  package$shading.FogModel = FogModel;
  package$shading.ShaderProps = ShaderProps;
  package$shading.Uniform = Uniform;
  package$shading.UniformTexture2D = UniformTexture2D;
  package$shading.UniformTexture2Dv = UniformTexture2Dv;
  package$shading.UniformTextureCubeMap = UniformTextureCubeMap;
  package$shading.Uniform1i = Uniform1i;
  package$shading.Uniform1iv = Uniform1iv;
  package$shading.Uniform1f = Uniform1f;
  package$shading.Uniform1fv = Uniform1fv;
  package$shading.Uniform2f = Uniform2f;
  package$shading.Uniform2fv_init_bm4lxs$ = Uniform2fv_init;
  package$shading.Uniform2fv = Uniform2fv;
  package$shading.Uniform3f = Uniform3f;
  package$shading.Uniform3fv_init_bm4lxs$ = Uniform3fv_init;
  package$shading.Uniform3fv = Uniform3fv;
  package$shading.Uniform4f = Uniform4f;
  package$shading.Uniform4fv_init_bm4lxs$ = Uniform4fv_init;
  package$shading.Uniform4fv = Uniform4fv;
  package$shading.UniformMatrix4 = UniformMatrix4;
  package$shading.VboBinder = VboBinder;
  SharedResManager.SharedResource = SharedResManager$SharedResource;
  package$kool.SharedResManager = SharedResManager;
  package$kool.defaultProps_61zpoe$ = defaultProps;
  package$kool.defaultPropsRepeated_61zpoe$ = defaultPropsRepeated;
  package$kool.defaultPropsClamped_61zpoe$ = defaultPropsClamped;
  Object.defineProperty(TextureProps, 'Companion', {
    get: TextureProps$Companion_getInstance
  });
  package$kool.TextureProps_init_3m52m6$ = TextureProps_init;
  package$kool.TextureProps_init_wfrsr4$ = TextureProps_init_0;
  package$kool.TextureProps = TextureProps;
  package$kool.TextureData = TextureData;
  package$kool.BufferedTextureData = BufferedTextureData;
  package$kool.CubeMapTextureData = CubeMapTextureData;
  package$kool.Texture = Texture;
  package$kool.CubeMapTexture = CubeMapTexture;
  package$kool.TextureManager = TextureManager;
  Object.defineProperty(Animator, 'Companion', {
    get: Animator$Companion_getInstance
  });
  var package$util = package$kool.util || (package$kool.util = {});
  package$util.Animator = Animator;
  package$util.LinearAnimator = LinearAnimator;
  package$util.CosAnimator = CosAnimator;
  package$util.InterpolatedValue = InterpolatedValue;
  package$util.InterpolatedFloat = InterpolatedFloat;
  package$util.InterpolatedColor = InterpolatedColor;
  package$util.SpringDamperFloat = SpringDamperFloat;
  Object.defineProperty(BillboardMesh$DrawOrder, 'AS_IS', {
    get: BillboardMesh$DrawOrder$AS_IS_getInstance
  });
  Object.defineProperty(BillboardMesh$DrawOrder, 'FAR_FIRST', {
    get: BillboardMesh$DrawOrder$FAR_FIRST_getInstance
  });
  Object.defineProperty(BillboardMesh$DrawOrder, 'NEAR_FIRST', {
    get: BillboardMesh$DrawOrder$NEAR_FIRST_getInstance
  });
  BillboardMesh.DrawOrder = BillboardMesh$DrawOrder;
  Object.defineProperty(BillboardMesh, 'Companion', {
    get: BillboardMesh$Companion_getInstance
  });
  package$util.BillboardMesh = BillboardMesh;
  package$util.billboardShader_n50u2h$ = billboardShader;
  package$util.BillboardShader = BillboardShader;
  package$util.BoundingBox_init_4lfkt4$ = BoundingBox_init;
  package$util.BoundingBox = BoundingBox;
  package$util.Buffer = Buffer;
  package$util.Uint8Buffer = Uint8Buffer;
  package$util.Uint16Buffer = Uint16Buffer;
  package$util.Uint32Buffer = Uint32Buffer;
  package$util.Float32Buffer = Float32Buffer;
  package$util.Vec2fView = Vec2fView;
  package$util.Vec3fView = Vec3fView;
  package$util.Vec4fView = Vec4fView;
  Object.defineProperty(Color, 'Companion', {
    get: Color$Companion_getInstance
  });
  package$util.Color = Color;
  package$util.MutableColor_init = MutableColor_init;
  package$util.MutableColor_init_d7aj7k$ = MutableColor_init_0;
  package$util.MutableColor = MutableColor;
  Object.defineProperty(ColorGradient, 'Companion', {
    get: ColorGradient$Companion_getInstance
  });
  package$util.ColorGradient_init_5tenyj$ = ColorGradient_init;
  package$util.ColorGradient = ColorGradient;
  Object.defineProperty(Position, 'UPPER_LEFT', {
    get: Position$UPPER_LEFT_getInstance
  });
  Object.defineProperty(Position, 'UPPER_RIGHT', {
    get: Position$UPPER_RIGHT_getInstance
  });
  Object.defineProperty(Position, 'LOWER_LEFT', {
    get: Position$LOWER_LEFT_getInstance
  });
  Object.defineProperty(Position, 'LOWER_RIGHT', {
    get: Position$LOWER_RIGHT_getInstance
  });
  package$util.Position = Position;
  package$util.debugOverlay_msaor1$ = debugOverlay;
  package$util.Disposable = Disposable;
  package$util.EnvironmentMapRenderer = EnvironmentMapRenderer;
  package$util.uiFont_a4r08d$ = uiFont;
  package$util.fontShader_s2xzqe$ = fontShader;
  package$util.FontProps = FontProps;
  Object.defineProperty(Font, 'Companion', {
    get: Font$Companion_getInstance
  });
  package$util.Font = Font;
  package$util.CharMetrics = CharMetrics;
  package$util.CharMap = CharMap;
  Object.defineProperty(IndexedVertexList, 'Companion', {
    get: IndexedVertexList$Companion_getInstance
  });
  IndexedVertexList$Vertex.FloatView = IndexedVertexList$Vertex$FloatView;
  IndexedVertexList$Vertex.IntView = IndexedVertexList$Vertex$IntView;
  IndexedVertexList$Vertex.Vec2iView = IndexedVertexList$Vertex$Vec2iView;
  IndexedVertexList$Vertex.Vec3iView = IndexedVertexList$Vertex$Vec3iView;
  IndexedVertexList$Vertex.Vec4iView = IndexedVertexList$Vertex$Vec4iView;
  IndexedVertexList.Vertex = IndexedVertexList$Vertex;
  package$util.IndexedVertexList = IndexedVertexList;
  KdTree.KdNode = KdTree$KdNode;
  package$util.KdTree = KdTree;
  package$util.lineMesh_6a24eg$ = lineMesh;
  package$util.wireframeMesh_tggg7d$ = wireframeMesh;
  package$util.normalMesh_zfckia$ = normalMesh;
  package$util.LineMesh = LineMesh;
  package$util.LineString = LineString;
  Log.prototype.Level = Log$Level;
  Object.defineProperty(Log$Level, 'TRACE', {
    get: Log$Level$TRACE_getInstance
  });
  Object.defineProperty(Log$Level, 'DEBUG', {
    get: Log$Level$DEBUG_getInstance
  });
  Object.defineProperty(Log$Level, 'INFO', {
    get: Log$Level$INFO_getInstance
  });
  Object.defineProperty(Log$Level, 'WARN', {
    get: Log$Level$WARN_getInstance
  });
  Object.defineProperty(Log$Level, 'ERROR', {
    get: Log$Level$ERROR_getInstance
  });
  Object.defineProperty(Log$Level, 'OFF', {
    get: Log$Level$OFF_getInstance
  });
  Object.defineProperty(package$util, 'Log', {
    get: Log_getInstance
  });
  package$util.logT_hbfas6$ = logT;
  package$util.logD_hbfas6$ = logD;
  package$util.logI_hbfas6$ = logI;
  package$util.logW_hbfas6$ = logW;
  package$util.logE_hbfas6$ = logE;
  package$util.MeshBuilder = MeshBuilder;
  package$util.CircleProps = CircleProps;
  Object.defineProperty(GridProps, 'Companion', {
    get: GridProps$Companion_getInstance
  });
  package$util.GridProps = GridProps;
  package$util.SphereProps = SphereProps;
  package$util.RectProps = RectProps;
  package$util.CubeProps = CubeProps;
  package$util.CylinderProps = CylinderProps;
  package$util.TextProps = TextProps;
  Object.defineProperty(ObjectRecycler, 'Companion', {
    get: ObjectRecycler$Companion_getInstance
  });
  package$util.ObjectRecycler_init_9ce4rd$ = ObjectRecycler_init;
  package$util.ObjectRecycler = ObjectRecycler;
  package$util.ObjectPool = ObjectPool;
  AutoRecycler.Context = AutoRecycler$Context;
  package$util.AutoRecycler = AutoRecycler;
  OcTree.OcNode = OcTree$OcNode;
  Object.defineProperty(OcTree, 'Companion', {
    get: OcTree$Companion_getInstance
  });
  package$util.OcTree = OcTree;
  ParticleSystem.Type = ParticleSystem$Type;
  ParticleSystem.Particle = ParticleSystem$Particle;
  Object.defineProperty(ParticleSystem, 'Companion', {
    get: ParticleSystem$Companion_getInstance
  });
  package$util.ParticleSystem = ParticleSystem;
  package$util.PerfTimer = PerfTimer;
  package$kool.now = now;
  package$kool.toString_j6vyb1$ = toString_1;
  package$util.timedMs_9vqa9e$ = timedMs;
  package$util.timedMs_v0aq7q$ = timedMs_0;
  package$util.timedMs_sky27l$ = timedMs_1;
  package$util.timedMs_780vyl$ = timedMs_2;
  package$util.pointMesh_h6khem$ = pointMesh;
  package$util.PointMesh = PointMesh;
  package$util.PriorityQueue = PriorityQueue;
  package$util.Property = Property;
  Object.defineProperty(AnimationData, 'Companion', {
    get: AnimationData$Companion_getInstance
  });
  Object.defineProperty(AnimationData, '$serializer', {
    get: AnimationData$$serializer_getInstance
  });
  var package$serialization = package$util.serialization || (package$util.serialization = {});
  package$serialization.AnimationData = AnimationData;
  Object.defineProperty(NodeAnimationData, 'Companion', {
    get: NodeAnimationData$Companion_getInstance
  });
  Object.defineProperty(NodeAnimationData, '$serializer', {
    get: NodeAnimationData$$serializer_getInstance
  });
  package$serialization.NodeAnimationData = NodeAnimationData;
  Object.defineProperty(Vec3KeyData, 'Companion', {
    get: Vec3KeyData$Companion_getInstance
  });
  Object.defineProperty(Vec3KeyData, '$serializer', {
    get: Vec3KeyData$$serializer_getInstance
  });
  package$serialization.Vec3KeyData = Vec3KeyData;
  Object.defineProperty(Vec4KeyData, 'Companion', {
    get: Vec4KeyData$Companion_getInstance
  });
  Object.defineProperty(Vec4KeyData, '$serializer', {
    get: Vec4KeyData$$serializer_getInstance
  });
  package$serialization.Vec4KeyData = Vec4KeyData;
  Object.defineProperty(BoneData, 'Companion', {
    get: BoneData$Companion_getInstance
  });
  Object.defineProperty(BoneData, '$serializer', {
    get: BoneData$$serializer_getInstance
  });
  package$serialization.BoneData = BoneData;
  Object.defineProperty(MaterialData, 'Companion', {
    get: MaterialData$Companion_getInstance
  });
  Object.defineProperty(MaterialData, '$serializer', {
    get: MaterialData$$serializer_getInstance
  });
  package$serialization.MaterialData = MaterialData;
  $$importsForInline$$['kotlinx-serialization-runtime-js'] = $module$kotlinx_serialization_runtime_js;
  Object.defineProperty(ModelData, 'Companion', {
    get: ModelData$Companion_getInstance
  });
  Object.defineProperty(ModelData, '$serializer', {
    get: ModelData$$serializer_getInstance
  });
  package$serialization.ModelData = ModelData;
  Object.defineProperty(ModelNodeData, 'Companion', {
    get: ModelNodeData$Companion_getInstance
  });
  Object.defineProperty(ModelNodeData, '$serializer', {
    get: ModelNodeData$$serializer_getInstance
  });
  package$serialization.ModelNodeData = ModelNodeData;
  Object.defineProperty(ModelMeshData, 'Companion', {
    get: ModelMeshData$Companion_getInstance
  });
  Object.defineProperty(ModelMeshData, '$serializer', {
    get: ModelMeshData$$serializer_getInstance
  });
  package$serialization.ModelMeshData = ModelMeshData;
  Object.defineProperty(PrimitiveType, 'LINES', {
    get: PrimitiveType$LINES_getInstance
  });
  Object.defineProperty(PrimitiveType, 'POINTS', {
    get: PrimitiveType$POINTS_getInstance
  });
  Object.defineProperty(PrimitiveType, 'TRIANGLES', {
    get: PrimitiveType$TRIANGLES_getInstance
  });
  package$serialization.PrimitiveType = PrimitiveType;
  Object.defineProperty(AttributeList, 'Companion', {
    get: AttributeList$Companion_getInstance
  });
  Object.defineProperty(AttributeList, '$serializer', {
    get: AttributeList$$serializer_getInstance
  });
  package$serialization.AttributeList = AttributeList;
  Object.defineProperty(IntAttributeList, 'Companion', {
    get: IntAttributeList$Companion_getInstance
  });
  Object.defineProperty(IntAttributeList, '$serializer', {
    get: IntAttributeList$$serializer_getInstance
  });
  package$serialization.IntAttributeList = IntAttributeList;
  Object.defineProperty(package$serialization, 'NormalOctCoding', {
    get: NormalOctCoding_getInstance
  });
  package$util.ShadowMap = ShadowMap;
  Object.defineProperty(SimpleShadowMap, 'Companion', {
    get: SimpleShadowMap$Companion_getInstance
  });
  package$util.SimpleShadowMap = SimpleShadowMap;
  Object.defineProperty(CascadedShadowMap, 'Companion', {
    get: CascadedShadowMap$Companion_getInstance
  });
  package$util.CascadedShadowMap = CascadedShadowMap;
  package$util.pointKdTree_ffk80x$ = pointKdTree;
  package$util.pointOcTree_aygcrt$ = pointOcTree;
  package$util.triangleKdTree_cneidw$ = triangleKdTree;
  package$util.triangleKdTree_4kw5be$ = triangleKdTree_0;
  package$util.triangleOcTree_8pbc9u$ = triangleOcTree;
  package$util.triangleOcTree_cneidw$ = triangleOcTree_0;
  package$util.edgeKdTree_dvmecb$ = edgeKdTree;
  package$util.edgeOcTree_oxvlct$ = edgeOcTree;
  package$util.ItemAdapter = ItemAdapter;
  Object.defineProperty(package$util, 'Vec3fAdapter', {
    get: Vec3fAdapter_getInstance
  });
  Object.defineProperty(package$util, 'EdgeAdapter', {
    get: EdgeAdapter_getInstance
  });
  Object.defineProperty(package$util, 'TriangleAdapter', {
    get: TriangleAdapter_getInstance
  });
  Object.defineProperty(Edge, 'Companion', {
    get: Edge$Companion_getInstance
  });
  package$util.Edge = Edge;
  Object.defineProperty(Triangle, 'Companion', {
    get: Triangle$Companion_getInstance
  });
  package$util.Triangle_init_cneidw$ = Triangle_init;
  package$util.Triangle = Triangle;
  SpatialTree.Node = SpatialTree$Node;
  package$util.SpatialTree = SpatialTree;
  package$util.PointDistance = PointDistance;
  package$util.BoundingSphereDistance = BoundingSphereDistance;
  package$util.RayDistance = RayDistance;
  package$util.SpatialTreeTraverser = SpatialTreeTraverser;
  package$util.CenterPointTraverser = CenterPointTraverser;
  package$util.InRadiusTraverser = InRadiusTraverser;
  package$util.BoundingSphereInRadiusTraverser = BoundingSphereInRadiusTraverser;
  Object.defineProperty(KNearestTraverser, 'Companion', {
    get: KNearestTraverser$Companion_getInstance
  });
  package$util.KNearestTraverser = KNearestTraverser;
  package$util.NearestToRayTraverser = NearestToRayTraverser;
  package$util.NearestEdgeToRayTraverser = NearestEdgeToRayTraverser;
  package$util.TriangleHitTraverser = TriangleHitTraverser;
  ChildNodesWithDistance.Child = ChildNodesWithDistance$Child;
  package$util.ChildNodesWithDistance = ChildNodesWithDistance;
  Object.defineProperty(TouchGestureEvaluator, 'Companion', {
    get: TouchGestureEvaluator$Companion_getInstance
  });
  TouchGestureEvaluator.Gesture = TouchGestureEvaluator$Gesture;
  package$util.TouchGestureEvaluator = TouchGestureEvaluator;
  Object.defineProperty(TreeMap, 'Companion', {
    get: TreeMap$Companion_getInstance
  });
  package$util.TreeMap = TreeMap;
  Object.defineProperty(package$util, 'UniqueId', {
    get: UniqueId_getInstance
  });
  package$gl.glActiveTexture_za3lpa$ = glActiveTexture;
  package$gl.glAttachShader_c10c6r$ = glAttachShader;
  package$gl.glBindBuffer_4ablaf$ = glBindBuffer;
  package$gl.glBindFramebuffer_7zhe8e$ = glBindFramebuffer;
  package$gl.glBindRenderbuffer_r7ndcf$ = glBindRenderbuffer;
  package$gl.glBindTexture_hhrqcg$ = glBindTexture;
  package$gl.glBlendFunc_vux9f0$ = glBlendFunc;
  package$gl.glBufferData_i0kgf1$ = glBufferData;
  package$gl.glBufferData_wta2e6$ = glBufferData_0;
  package$gl.glBufferData_57ow2w$ = glBufferData_1;
  package$gl.glBufferData_d9f8rk$ = glBufferData_2;
  package$gl.glCheckFramebufferStatus_za3lpa$ = glCheckFramebufferStatus;
  package$gl.glClear_za3lpa$ = glClear;
  package$gl.glClearColor_7b5o5w$ = glClearColor;
  package$gl.glCompileShader_4nv1hv$ = glCompileShader;
  package$gl.glCopyTexImage2D_wrdw30$ = glCopyTexImage2D;
  package$gl.glCreateBuffer = glCreateBuffer;
  package$gl.glCreateFramebuffer = glCreateFramebuffer;
  package$gl.glCreateRenderbuffer = glCreateRenderbuffer;
  package$gl.glCreateProgram = glCreateProgram;
  package$gl.glCreateShader_za3lpa$ = glCreateShader;
  package$gl.glCreateTexture = glCreateTexture;
  package$gl.glCullFace_za3lpa$ = glCullFace;
  package$gl.glDeleteBuffer_yyg71q$ = glDeleteBuffer;
  package$gl.glDeleteFramebuffer_e3u3vp$ = glDeleteFramebuffer;
  package$gl.glDeleteProgram_nzjype$ = glDeleteProgram;
  package$gl.glDeleteRenderbuffer_puextw$ = glDeleteRenderbuffer;
  package$gl.glDeleteShader_4nv1hv$ = glDeleteShader;
  package$gl.glDeleteTexture_r3jlzd$ = glDeleteTexture;
  package$gl.glDepthFunc_za3lpa$ = glDepthFunc;
  package$gl.glDepthMask_6taknv$ = glDepthMask;
  package$gl.glDisable_za3lpa$ = glDisable;
  package$gl.glDisableVertexAttribArray_za3lpa$ = glDisableVertexAttribArray;
  package$gl.glDrawBuffer_za3lpa$ = glDrawBuffer;
  package$gl.glDrawElements_tjonv8$ = glDrawElements;
  package$gl.glDrawElementsInstanced_4qozqa$ = glDrawElementsInstanced;
  package$gl.glEnable_za3lpa$ = glEnable;
  package$gl.glEnableVertexAttribArray_za3lpa$ = glEnableVertexAttribArray;
  package$gl.glFramebufferRenderbuffer_h0cs4y$ = glFramebufferRenderbuffer;
  package$gl.glFramebufferTexture2D_4b5mi7$ = glFramebufferTexture2D;
  package$gl.glGenerateMipmap_za3lpa$ = glGenerateMipmap;
  package$gl.glGetAttribLocation_xq0tfo$ = glGetAttribLocation;
  package$gl.glGetError = glGetError;
  package$gl.glGetProgrami_it7c4k$ = glGetProgrami;
  package$gl.glGetShaderi_dwrjj9$ = glGetShaderi;
  package$gl.glGetProgramInfoLog_nzjype$ = glGetProgramInfoLog;
  package$gl.glGetShaderInfoLog_4nv1hv$ = glGetShaderInfoLog;
  package$gl.glGetUniformLocation_xq0tfo$ = glGetUniformLocation;
  package$gl.glLineWidth_mx4ult$ = glLineWidth;
  package$gl.glLinkProgram_nzjype$ = glLinkProgram;
  package$gl.glPointSize_mx4ult$ = glPointSize;
  package$gl.glReadBuffer_za3lpa$ = glReadBuffer;
  package$gl.glRenderbufferStorage_tjonv8$ = glRenderbufferStorage;
  package$gl.glRenderbufferStorageMultisample_4qozqa$ = glRenderbufferStorageMultisample;
  package$gl.glShaderSource_24lj51$ = glShaderSource;
  package$gl.glTexImage2D_ffh0n8$ = glTexImage2D;
  package$gl.glTexImage2D_ikbj0q$ = glTexImage2D_0;
  package$gl.glTexParameteri_qt1dr2$ = glTexParameteri;
  package$gl.glUniform1f_s9wk91$ = glUniform1f;
  package$gl.glUniform1fv_oyoqla$ = glUniform1fv;
  package$gl.glUniform1i_cypnoy$ = glUniform1i;
  package$gl.glUniform1iv_d3jnx1$ = glUniform1iv;
  package$gl.glUniform2f_ig41i8$ = glUniform2f;
  package$gl.glUniform2fv_wogbp0$ = glUniform2fv;
  package$gl.glUniform3f_w792mz$ = glUniform3f;
  package$gl.glUniform3fv_wogbp0$ = glUniform3fv;
  package$gl.glUniform4f_eixcow$ = glUniform4f;
  package$gl.glUniform4fv_wogbp0$ = glUniform4fv;
  package$gl.glUniformMatrix4fv_ugl0b7$ = glUniformMatrix4fv;
  package$gl.glUseProgram_xb2c5p$ = glUseProgram;
  package$gl.glVertexAttribDivisor_vux9f0$ = glVertexAttribDivisor;
  package$gl.glVertexAttribPointer_owihk5$ = glVertexAttribPointer;
  package$gl.glVertexAttribIPointer_4qozqa$ = glVertexAttribIPointer;
  package$gl.glViewport_tjonv8$ = glViewport;
  package$gl.isValidUniformLocation_s8jyv4$ = isValidUniformLocation;
  package$kool.createDefaultContext = createDefaultContext;
  package$kool.createContext_s8od96$ = createContext;
  package$kool.getMemoryInfo = getMemoryInfo;
  Object.defineProperty(package$kool, 'JsImpl', {
    get: JsImpl_getInstance
  });
  package$audio.AudioGenerator = AudioGenerator;
  package$elevation.loadPngS16ElevationMap_jn660e$ = loadPngS16ElevationMap;
  var package$platform = package$kool.platform || (package$kool.platform = {});
  package$platform.FontMapGenerator = FontMapGenerator;
  package$platform.ImageTextureData = ImageTextureData;
  Object.defineProperty(JsAssetManager, 'Companion', {
    get: JsAssetManager$Companion_getInstance
  });
  package$platform.JsAssetManager = JsAssetManager;
  JsContext.InitProps = JsContext$InitProps;
  Object.defineProperty(JsContext, 'Companion', {
    get: JsContext$Companion_getInstance
  });
  package$platform.JsContext = JsContext;
  package$platform.get_elementX_wgrwqm$ = get_elementX;
  package$platform.get_elementY_wgrwqm$ = get_elementY;
  package$util.GenericBuffer = GenericBuffer;
  package$util.Uint8BufferImpl = Uint8BufferImpl;
  package$util.Uint16BufferImpl = Uint16BufferImpl;
  package$util.Uint32BufferImpl = Uint32BufferImpl;
  package$util.Float32BufferImpl = Float32BufferImpl;
  package$util.createUint8Buffer_za3lpa$ = createUint8Buffer;
  package$util.createUint16Buffer_za3lpa$ = createUint16Buffer;
  package$util.createUint32Buffer_za3lpa$ = createUint32Buffer;
  package$util.createFloat32Buffer_za3lpa$ = createFloat32Buffer;
  NullElevationMap.prototype.getElevationAt_yvo9jy$ = ElevationMapProvider.prototype.getElevationAt_yvo9jy$;
  ElevationMapMeta$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  ElevationMapMetaHierarchy$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  ElevationMapHierarchy.prototype.getElevationAt_yvo9jy$ = ElevationMapProvider.prototype.getElevationAt_yvo9jy$;
  Object.defineProperty(ElevationMapS16.prototype, 'centerLat', Object.getOwnPropertyDescriptor(BoundedElevationMap.prototype, 'centerLat'));
  Object.defineProperty(ElevationMapS16.prototype, 'centerLon', Object.getOwnPropertyDescriptor(BoundedElevationMap.prototype, 'centerLon'));
  ElevationMapS16.prototype.contains_lu1900$ = BoundedElevationMap.prototype.contains_lu1900$;
  ListEdgeHandler.prototype.distinctTriangleEdges = HalfEdgeMesh$EdgeHandler.prototype.distinctTriangleEdges;
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getMin_hm1yd1$ = ItemAdapter.prototype.getMin_hm1yd1$;
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getMax_hm1yd1$ = ItemAdapter.prototype.getMax_hm1yd1$;
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getCenter_hm1yd1$ = ItemAdapter.prototype.getCenter_hm1yd1$;
  OcTreeEdgeHandler.prototype.distinctTriangleEdges = HalfEdgeMesh$EdgeHandler.prototype.distinctTriangleEdges;
  terminateOnFaceCountAbs$ObjectLiteral.prototype.init_nbf0q6$ = TermCriterion.prototype.init_nbf0q6$;
  terminateOnError$ObjectLiteral.prototype.init_nbf0q6$ = TermCriterion.prototype.init_nbf0q6$;
  MeshRayTest$Companion$nopTest$ObjectLiteral.prototype.onMeshDataChanged_f1jspk$ = MeshRayTest.prototype.onMeshDataChanged_f1jspk$;
  Skybox$Skybox$SkyboxShader_init$ObjectLiteral.prototype.fsAfterLighting_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsAfterLighting_kv1jfs$;
  Skybox$Skybox$SkyboxShader_init$ObjectLiteral.prototype.fsBeforeSampling_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsBeforeSampling_kv1jfs$;
  Skybox$Skybox$SkyboxShader_init$ObjectLiteral.prototype.fsEnd_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsEnd_kv1jfs$;
  Skybox$Skybox$SkyboxShader_init$ObjectLiteral.prototype.fsHeader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsHeader_kv1jfs$;
  Skybox$Skybox$SkyboxShader_init$ObjectLiteral.prototype.geomShader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.geomShader_kv1jfs$;
  Skybox$Skybox$SkyboxShader_init$ObjectLiteral.prototype.vsBeforeProj_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsBeforeProj_kv1jfs$;
  Skybox$Skybox$SkyboxShader_init$ObjectLiteral.prototype.vsEnd_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsEnd_kv1jfs$;
  Skybox$Skybox$SkyboxShader_init$ObjectLiteral.prototype.vsHeader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsHeader_kv1jfs$;
  BlankComponentUi.prototype.updateComponentAlpha = ComponentUi.prototype.updateComponentAlpha;
  BlankComponentUi.prototype.createUi_aemszp$ = ComponentUi.prototype.createUi_aemszp$;
  BlankComponentUi.prototype.updateUi_aemszp$ = ComponentUi.prototype.updateUi_aemszp$;
  BlankComponentUi.prototype.onRender_aemszp$ = ComponentUi.prototype.onRender_aemszp$;
  BlankComponentUi.prototype.dispose_aemszp$ = ComponentUi.prototype.dispose_aemszp$;
  BasicPointShader_init$ObjectLiteral.prototype.vsHeader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsHeader_kv1jfs$;
  BasicPointShader_init$ObjectLiteral.prototype.vsAfterInput_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsAfterInput_kv1jfs$;
  BasicPointShader_init$ObjectLiteral.prototype.vsBeforeProj_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsBeforeProj_kv1jfs$;
  BasicPointShader_init$ObjectLiteral.prototype.vsEnd_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsEnd_kv1jfs$;
  BasicPointShader_init$ObjectLiteral.prototype.fsHeader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsHeader_kv1jfs$;
  BasicPointShader_init$ObjectLiteral.prototype.fsAfterInput_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsAfterInput_kv1jfs$;
  BasicPointShader_init$ObjectLiteral.prototype.fsBeforeSampling_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsBeforeSampling_kv1jfs$;
  BasicPointShader_init$ObjectLiteral.prototype.fsAfterSampling_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsAfterSampling_kv1jfs$;
  BasicPointShader_init$ObjectLiteral.prototype.fsAfterLighting_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsAfterLighting_kv1jfs$;
  BasicPointShader_init$ObjectLiteral.prototype.fsEnd_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsEnd_kv1jfs$;
  BasicPointShader_init$ObjectLiteral.prototype.geomShader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.geomShader_kv1jfs$;
  BlurShader_init$ObjectLiteral.prototype.vsHeader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsHeader_kv1jfs$;
  BlurShader_init$ObjectLiteral.prototype.vsAfterInput_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsAfterInput_kv1jfs$;
  BlurShader_init$ObjectLiteral.prototype.vsBeforeProj_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsBeforeProj_kv1jfs$;
  BlurShader_init$ObjectLiteral.prototype.vsAfterProj_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsAfterProj_kv1jfs$;
  BlurShader_init$ObjectLiteral.prototype.vsEnd_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsEnd_kv1jfs$;
  BlurShader_init$ObjectLiteral.prototype.fsHeader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsHeader_kv1jfs$;
  BlurShader_init$ObjectLiteral.prototype.fsAfterInput_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsAfterInput_kv1jfs$;
  BlurShader_init$ObjectLiteral.prototype.fsBeforeSampling_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsBeforeSampling_kv1jfs$;
  BlurShader_init$ObjectLiteral.prototype.fsAfterLighting_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsAfterLighting_kv1jfs$;
  BlurShader_init$ObjectLiteral.prototype.fsEnd_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsEnd_kv1jfs$;
  BlurShader_init$ObjectLiteral.prototype.geomShader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.geomShader_kv1jfs$;
  ClipMethod.prototype.vsHeader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsHeader_kv1jfs$;
  ClipMethod.prototype.vsAfterInput_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsAfterInput_kv1jfs$;
  ClipMethod.prototype.vsBeforeProj_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsBeforeProj_kv1jfs$;
  ClipMethod.prototype.vsAfterProj_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsAfterProj_kv1jfs$;
  ClipMethod.prototype.vsEnd_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsEnd_kv1jfs$;
  ClipMethod.prototype.fsHeader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsHeader_kv1jfs$;
  ClipMethod.prototype.fsAfterInput_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsAfterInput_kv1jfs$;
  ClipMethod.prototype.fsBeforeSampling_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsBeforeSampling_kv1jfs$;
  ClipMethod.prototype.fsAfterSampling_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsAfterSampling_kv1jfs$;
  ClipMethod.prototype.fsAfterLighting_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsAfterLighting_kv1jfs$;
  ClipMethod.prototype.fsEnd_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsEnd_kv1jfs$;
  ClipMethod.prototype.geomShader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.geomShader_kv1jfs$;
  BillboardShader_init$ObjectLiteral.prototype.vsHeader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsHeader_kv1jfs$;
  BillboardShader_init$ObjectLiteral.prototype.vsBeforeProj_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsBeforeProj_kv1jfs$;
  BillboardShader_init$ObjectLiteral.prototype.vsAfterProj_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsAfterProj_kv1jfs$;
  BillboardShader_init$ObjectLiteral.prototype.fsHeader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsHeader_kv1jfs$;
  BillboardShader_init$ObjectLiteral.prototype.fsAfterInput_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsAfterInput_kv1jfs$;
  BillboardShader_init$ObjectLiteral.prototype.fsBeforeSampling_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsBeforeSampling_kv1jfs$;
  BillboardShader_init$ObjectLiteral.prototype.fsAfterLighting_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsAfterLighting_kv1jfs$;
  BillboardShader_init$ObjectLiteral.prototype.fsEnd_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsEnd_kv1jfs$;
  fontShader$ObjectLiteral.prototype.vsHeader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsHeader_kv1jfs$;
  fontShader$ObjectLiteral.prototype.vsAfterInput_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsAfterInput_kv1jfs$;
  fontShader$ObjectLiteral.prototype.vsBeforeProj_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsBeforeProj_kv1jfs$;
  fontShader$ObjectLiteral.prototype.vsAfterProj_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsAfterProj_kv1jfs$;
  fontShader$ObjectLiteral.prototype.vsEnd_kv1jfs$ = GlslGenerator$GlslInjector.prototype.vsEnd_kv1jfs$;
  fontShader$ObjectLiteral.prototype.fsHeader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsHeader_kv1jfs$;
  fontShader$ObjectLiteral.prototype.fsAfterInput_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsAfterInput_kv1jfs$;
  fontShader$ObjectLiteral.prototype.fsBeforeSampling_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsBeforeSampling_kv1jfs$;
  fontShader$ObjectLiteral.prototype.fsAfterLighting_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsAfterLighting_kv1jfs$;
  fontShader$ObjectLiteral.prototype.fsEnd_kv1jfs$ = GlslGenerator$GlslInjector.prototype.fsEnd_kv1jfs$;
  fontShader$ObjectLiteral.prototype.geomShader_kv1jfs$ = GlslGenerator$GlslInjector.prototype.geomShader_kv1jfs$;
  AnimationData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  NodeAnimationData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  Vec3KeyData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  Vec4KeyData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  BoneData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  MaterialData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  ModelData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  ModelNodeData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  ModelMeshData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  AttributeList$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  IntAttributeList$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  Vec3fAdapter.prototype.setNode_bc9457$ = ItemAdapter.prototype.setNode_bc9457$;
  EdgeAdapter.prototype.getCenterX_trkh7z$ = ItemAdapter.prototype.getCenterX_trkh7z$;
  EdgeAdapter.prototype.getCenterY_trkh7z$ = ItemAdapter.prototype.getCenterY_trkh7z$;
  EdgeAdapter.prototype.getCenterZ_trkh7z$ = ItemAdapter.prototype.getCenterZ_trkh7z$;
  EdgeAdapter.prototype.getSzX_trkh7z$ = ItemAdapter.prototype.getSzX_trkh7z$;
  EdgeAdapter.prototype.getSzY_trkh7z$ = ItemAdapter.prototype.getSzY_trkh7z$;
  EdgeAdapter.prototype.getSzZ_trkh7z$ = ItemAdapter.prototype.getSzZ_trkh7z$;
  EdgeAdapter.prototype.getCenter_hm1yd1$ = ItemAdapter.prototype.getCenter_hm1yd1$;
  EdgeAdapter.prototype.setNode_bc9457$ = ItemAdapter.prototype.setNode_bc9457$;
  TriangleAdapter.prototype.getCenterX_trkh7z$ = ItemAdapter.prototype.getCenterX_trkh7z$;
  TriangleAdapter.prototype.getCenterY_trkh7z$ = ItemAdapter.prototype.getCenterY_trkh7z$;
  TriangleAdapter.prototype.getCenterZ_trkh7z$ = ItemAdapter.prototype.getCenterZ_trkh7z$;
  TriangleAdapter.prototype.getSzX_trkh7z$ = ItemAdapter.prototype.getSzX_trkh7z$;
  TriangleAdapter.prototype.getSzY_trkh7z$ = ItemAdapter.prototype.getSzY_trkh7z$;
  TriangleAdapter.prototype.getSzZ_trkh7z$ = ItemAdapter.prototype.getSzZ_trkh7z$;
  TriangleAdapter.prototype.getCenter_hm1yd1$ = ItemAdapter.prototype.getCenter_hm1yd1$;
  TriangleAdapter.prototype.setNode_bc9457$ = ItemAdapter.prototype.setNode_bc9457$;
  BoundingSphereDistance.prototype.nodeSqrDistanceToPoint_m5117s$ = PointDistance.prototype.nodeSqrDistanceToPoint_m5117s$;
  CenterPointTraverser$pointDistance$ObjectLiteral.prototype.nodeSqrDistanceToPoint_m5117s$ = PointDistance.prototype.nodeSqrDistanceToPoint_m5117s$;
  CenterPointTraverser$pointDistance$ObjectLiteral.prototype.itemSqrDistanceToPoint_54x1zp$ = PointDistance.prototype.itemSqrDistanceToPoint_54x1zp$;
  NearestToRayTraverser$rayDistance$ObjectLiteral.prototype.nodeSqrDistanceToRay_4lohg5$ = RayDistance.prototype.nodeSqrDistanceToRay_4lohg5$;
  NearestToRayTraverser$rayDistance$ObjectLiteral.prototype.itemSqrDistanceToRay_t0er6w$ = RayDistance.prototype.itemSqrDistanceToRay_t0er6w$;
  NearestEdgeToRayTraverser_init$ObjectLiteral.prototype.nodeSqrDistanceToRay_4lohg5$ = RayDistance.prototype.nodeSqrDistanceToRay_4lohg5$;
  TriangleHitTraverser_init$ObjectLiteral.prototype.nodeSqrDistanceToRay_4lohg5$ = RayDistance.prototype.nodeSqrDistanceToRay_4lohg5$;
  Object.defineProperty(DelayedElevationMap.prototype, 'centerLat', Object.getOwnPropertyDescriptor(BoundedElevationMap.prototype, 'centerLat'));
  Object.defineProperty(DelayedElevationMap.prototype, 'centerLon', Object.getOwnPropertyDescriptor(BoundedElevationMap.prototype, 'centerLon'));
  DelayedElevationMap.prototype.contains_lu1900$ = BoundedElevationMap.prototype.contains_lu1900$;
  GenericBuffer.prototype.removeAt_za3lpa$ = Buffer.prototype.removeAt_za3lpa$;
  Uint8BufferImpl.prototype.put_fqrh44$ = Uint8Buffer.prototype.put_fqrh44$;
  Uint8BufferImpl.prototype.plusAssign_s8j3t7$ = Uint8Buffer.prototype.plusAssign_s8j3t7$;
  Uint8BufferImpl.prototype.removeAt_za3lpa$ = Uint8Buffer.prototype.removeAt_za3lpa$;
  Uint16BufferImpl.prototype.put_gmedm2$ = Uint16Buffer.prototype.put_gmedm2$;
  Uint16BufferImpl.prototype.plusAssign_mq22fl$ = Uint16Buffer.prototype.plusAssign_mq22fl$;
  Uint16BufferImpl.prototype.removeAt_za3lpa$ = Uint16Buffer.prototype.removeAt_za3lpa$;
  Uint32BufferImpl.prototype.put_q5rwfd$ = Uint32Buffer.prototype.put_q5rwfd$;
  Uint32BufferImpl.prototype.plusAssign_za3lpa$ = Uint32Buffer.prototype.plusAssign_za3lpa$;
  Uint32BufferImpl.prototype.removeAt_za3lpa$ = Uint32Buffer.prototype.removeAt_za3lpa$;
  Float32BufferImpl.prototype.put_q3cr5i$ = Float32Buffer.prototype.put_q3cr5i$;
  Float32BufferImpl.prototype.plusAssign_mx4ult$ = Float32Buffer.prototype.plusAssign_mx4ult$;
  Float32BufferImpl.prototype.removeAt_za3lpa$ = Float32Buffer.prototype.removeAt_za3lpa$;
  GL_ACTIVE_TEXTURE = 34016;
  GL_DEPTH_BUFFER_BIT = 256;
  GL_STENCIL_BUFFER_BIT = 1024;
  GL_COLOR_BUFFER_BIT = 16384;
  GL_FALSE = 0;
  GL_TRUE = 1;
  GL_POINTS = 0;
  GL_LINES = 1;
  GL_LINE_LOOP = 2;
  GL_LINE_STRIP = 3;
  GL_TRIANGLES = 4;
  GL_TRIANGLE_STRIP = 5;
  GL_TRIANGLE_FAN = 6;
  GL_ZERO = 0;
  GL_ONE = 1;
  GL_SRC_COLOR = 768;
  GL_ONE_MINUS_SRC_COLOR = 769;
  GL_SRC_ALPHA = 770;
  GL_ONE_MINUS_SRC_ALPHA = 771;
  GL_DST_ALPHA = 772;
  GL_ONE_MINUS_DST_ALPHA = 773;
  GL_DST_COLOR = 774;
  GL_ONE_MINUS_DST_COLOR = 775;
  GL_SRC_ALPHA_SATURATE = 776;
  GL_FUNC_ADD = 32774;
  GL_BLEND_EQUATION = 32777;
  GL_BLEND_EQUATION_RGB = 32777;
  GL_BLEND_EQUATION_ALPHA = 34877;
  GL_FUNC_SUBTRACT = 32778;
  GL_FUNC_REVERSE_SUBTRACT = 32779;
  GL_BLEND_DST_RGB = 32968;
  GL_BLEND_SRC_RGB = 32969;
  GL_BLEND_DST_ALPHA = 32970;
  GL_BLEND_SRC_ALPHA = 32971;
  GL_CONSTANT_COLOR = 32769;
  GL_ONE_MINUS_CONSTANT_COLOR = 32770;
  GL_CONSTANT_ALPHA = 32771;
  GL_ONE_MINUS_CONSTANT_ALPHA = 32772;
  GL_BLEND_COLOR = 32773;
  GL_ARRAY_BUFFER = 34962;
  GL_ELEMENT_ARRAY_BUFFER = 34963;
  GL_ARRAY_BUFFER_BINDING = 34964;
  GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965;
  GL_STREAM_DRAW = 35040;
  GL_STATIC_DRAW = 35044;
  GL_DYNAMIC_DRAW = 35048;
  GL_BUFFER_SIZE = 34660;
  GL_BUFFER_USAGE = 34661;
  GL_CURRENT_VERTEX_ATTRIB = 34342;
  GL_FRONT = 1028;
  GL_BACK = 1029;
  GL_FRONT_AND_BACK = 1032;
  GL_TEXTURE_2D = 3553;
  GL_CULL_FACE = 2884;
  GL_BLEND = 3042;
  GL_DITHER = 3024;
  GL_STENCIL_TEST = 2960;
  GL_DEPTH_TEST = 2929;
  GL_SCISSOR_TEST = 3089;
  GL_POLYGON_OFFSET_FILL = 32823;
  GL_SAMPLE_ALPHA_TO_COVERAGE = 32926;
  GL_SAMPLE_COVERAGE = 32928;
  GL_NO_ERROR = 0;
  GL_INVALID_ENUM = 1280;
  GL_INVALID_VALUE = 1281;
  GL_INVALID_OPERATION = 1282;
  GL_OUT_OF_MEMORY = 1285;
  GL_CW = 2304;
  GL_CCW = 2305;
  GL_LINE_WIDTH = 2849;
  GL_ALIASED_POINT_SIZE_RANGE = 33901;
  GL_ALIASED_LINE_WIDTH_RANGE = 33902;
  GL_CULL_FACE_MODE = 2885;
  GL_FRONT_FACE = 2886;
  GL_DEPTH_RANGE = 2928;
  GL_DEPTH_WRITEMASK = 2930;
  GL_DEPTH_CLEAR_VALUE = 2931;
  GL_DEPTH_FUNC = 2932;
  GL_STENCIL_CLEAR_VALUE = 2961;
  GL_STENCIL_FUNC = 2962;
  GL_STENCIL_FAIL = 2964;
  GL_STENCIL_PASS_DEPTH_FAIL = 2965;
  GL_STENCIL_PASS_DEPTH_PASS = 2966;
  GL_STENCIL_REF = 2967;
  GL_STENCIL_VALUE_MASK = 2963;
  GL_STENCIL_WRITEMASK = 2968;
  GL_STENCIL_BACK_FUNC = 34816;
  GL_STENCIL_BACK_FAIL = 34817;
  GL_STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
  GL_STENCIL_BACK_PASS_DEPTH_PASS = 34819;
  GL_STENCIL_BACK_REF = 36003;
  GL_STENCIL_BACK_VALUE_MASK = 36004;
  GL_STENCIL_BACK_WRITEMASK = 36005;
  GL_VIEWPORT = 2978;
  GL_SCISSOR_BOX = 3088;
  GL_COLOR_CLEAR_VALUE = 3106;
  GL_COLOR_WRITEMASK = 3107;
  GL_UNPACK_ALIGNMENT = 3317;
  GL_PACK_ALIGNMENT = 3333;
  GL_MAX_TEXTURE_SIZE = 3379;
  GL_MAX_VIEWPORT_DIMS = 3386;
  GL_SUBPIXEL_BITS = 3408;
  GL_RED_BITS = 3410;
  GL_GREEN_BITS = 3411;
  GL_BLUE_BITS = 3412;
  GL_ALPHA_BITS = 3413;
  GL_DEPTH_BITS = 3414;
  GL_STENCIL_BITS = 3415;
  GL_POLYGON_OFFSET_UNITS = 10752;
  GL_POLYGON_OFFSET_FACTOR = 32824;
  GL_TEXTURE_BINDING_2D = 32873;
  GL_SAMPLE_BUFFERS = 32936;
  GL_SAMPLES = 32937;
  GL_SAMPLE_COVERAGE_VALUE = 32938;
  GL_SAMPLE_COVERAGE_INVERT = 32939;
  GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
  GL_COMPRESSED_TEXTURE_FORMATS = 34467;
  GL_DONT_CARE = 4352;
  GL_FASTEST = 4353;
  GL_NICEST = 4354;
  GL_GENERATE_MIPMAP_HINT = 33170;
  GL_BYTE = 5120;
  GL_UNSIGNED_BYTE = 5121;
  GL_SHORT = 5122;
  GL_UNSIGNED_SHORT = 5123;
  GL_INT = 5124;
  GL_UNSIGNED_INT = 5125;
  GL_FLOAT = 5126;
  GL_FIXED = 5132;
  GL_DEPTH_COMPONENT = 6402;
  GL_DEPTH_COMPONENT24 = 33190;
  GL_DEPTH_COMPONENT32F = 36012;
  GL_ALPHA = 6406;
  GL_RGB = 6407;
  GL_RGBA = 6408;
  GL_LUMINANCE = 6409;
  GL_LUMINANCE_ALPHA = 6410;
  GL_UNSIGNED_SHORT_4_4_4_4 = 32819;
  GL_UNSIGNED_SHORT_5_5_5_1 = 32820;
  GL_UNSIGNED_SHORT_5_6_5 = 33635;
  GL_FRAGMENT_SHADER = 35632;
  GL_VERTEX_SHADER = 35633;
  GL_GEOMETRY_SHADER = 36313;
  GL_MAX_VERTEX_ATTRIBS = 34921;
  GL_MAX_VERTEX_UNIFORM_VECTORS = 36347;
  GL_MAX_VARYING_VECTORS = 36348;
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
  GL_MAX_TEXTURE_IMAGE_UNITS = 34930;
  GL_MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
  GL_SHADER_TYPE = 35663;
  GL_DELETE_STATUS = 35712;
  GL_LINK_STATUS = 35714;
  GL_VALIDATE_STATUS = 35715;
  GL_ATTACHED_SHADERS = 35717;
  GL_ACTIVE_UNIFORMS = 35718;
  GL_ACTIVE_UNIFORM_MAX_LENGTH = 35719;
  GL_ACTIVE_ATTRIBUTES = 35721;
  GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722;
  GL_SHADING_LANGUAGE_VERSION = 35724;
  GL_CURRENT_PROGRAM = 35725;
  GL_NEVER = 512;
  GL_LESS = 513;
  GL_EQUAL = 514;
  GL_LEQUAL = 515;
  GL_GREATER = 516;
  GL_NOTEQUAL = 517;
  GL_GEQUAL = 518;
  GL_ALWAYS = 519;
  GL_KEEP = 7680;
  GL_REPLACE = 7681;
  GL_INCR = 7682;
  GL_DECR = 7683;
  GL_INVERT = 5386;
  GL_INCR_WRAP = 34055;
  GL_DECR_WRAP = 34056;
  GL_VENDOR = 7936;
  GL_RENDERER = 7937;
  GL_VERSION = 7938;
  GL_EXTENSIONS = 7939;
  GL_NEAREST = 9728;
  GL_LINEAR = 9729;
  GL_NEAREST_MIPMAP_NEAREST = 9984;
  GL_LINEAR_MIPMAP_NEAREST = 9985;
  GL_NEAREST_MIPMAP_LINEAR = 9986;
  GL_LINEAR_MIPMAP_LINEAR = 9987;
  GL_TEXTURE_MAG_FILTER = 10240;
  GL_TEXTURE_MIN_FILTER = 10241;
  GL_TEXTURE_WRAP_S = 10242;
  GL_TEXTURE_WRAP_T = 10243;
  GL_TEXTURE_WRAP_R = 32882;
  GL_TEXTURE = 5890;
  GL_TEXTURE_CUBE_MAP = 34067;
  GL_TEXTURE_BINDING_CUBE_MAP = 34068;
  GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
  GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
  GL_TEXTURE0 = 33984;
  GL_TEXTURE1 = 33985;
  GL_TEXTURE2 = 33986;
  GL_TEXTURE3 = 33987;
  GL_TEXTURE4 = 33988;
  GL_TEXTURE5 = 33989;
  GL_TEXTURE6 = 33990;
  GL_TEXTURE7 = 33991;
  GL_TEXTURE8 = 33992;
  GL_TEXTURE9 = 33993;
  GL_TEXTURE10 = 33994;
  GL_TEXTURE11 = 33995;
  GL_TEXTURE12 = 33996;
  GL_TEXTURE13 = 33997;
  GL_TEXTURE14 = 33998;
  GL_TEXTURE15 = 33999;
  GL_TEXTURE16 = 34000;
  GL_TEXTURE17 = 34001;
  GL_TEXTURE18 = 34002;
  GL_TEXTURE19 = 34003;
  GL_TEXTURE20 = 34004;
  GL_TEXTURE21 = 34005;
  GL_TEXTURE22 = 34006;
  GL_TEXTURE23 = 34007;
  GL_TEXTURE24 = 34008;
  GL_TEXTURE25 = 34009;
  GL_TEXTURE26 = 34010;
  GL_TEXTURE27 = 34011;
  GL_TEXTURE28 = 34012;
  GL_TEXTURE29 = 34013;
  GL_TEXTURE30 = 34014;
  GL_TEXTURE31 = 34015;
  GL_REPEAT = 10497;
  GL_CLAMP_TO_EDGE = 33071;
  GL_MIRRORED_REPEAT = 33648;
  GL_FLOAT_VEC2 = 35664;
  GL_FLOAT_VEC3 = 35665;
  GL_FLOAT_VEC4 = 35666;
  GL_INT_VEC2 = 35667;
  GL_INT_VEC3 = 35668;
  GL_INT_VEC4 = 35669;
  GL_BOOL = 35670;
  GL_BOOL_VEC2 = 35671;
  GL_BOOL_VEC3 = 35672;
  GL_BOOL_VEC4 = 35673;
  GL_FLOAT_MAT2 = 35674;
  GL_FLOAT_MAT3 = 35675;
  GL_FLOAT_MAT4 = 35676;
  GL_SAMPLER_2D = 35678;
  GL_SAMPLER_CUBE = 35680;
  GL_VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
  GL_VERTEX_ATTRIB_ARRAY_SIZE = 34339;
  GL_VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
  GL_VERTEX_ATTRIB_ARRAY_TYPE = 34341;
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
  GL_VERTEX_ATTRIB_ARRAY_POINTER = 34373;
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
  GL_IMPLEMENTATION_COLOR_READ_TYPE = 35738;
  GL_IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
  GL_COMPILE_STATUS = 35713;
  GL_INFO_LOG_LENGTH = 35716;
  GL_SHADER_SOURCE_LENGTH = 35720;
  GL_SHADER_COMPILER = 36346;
  GL_SHADER_BINARY_FORMATS = 36344;
  GL_NUM_SHADER_BINARY_FORMATS = 36345;
  GL_LOW_FLOAT = 36336;
  GL_MEDIUM_FLOAT = 36337;
  GL_HIGH_FLOAT = 36338;
  GL_LOW_INT = 36339;
  GL_MEDIUM_INT = 36340;
  GL_HIGH_INT = 36341;
  GL_FRAMEBUFFER = 36160;
  GL_RENDERBUFFER = 36161;
  GL_RGBA4 = 32854;
  GL_RGB5_A1 = 32855;
  GL_RGB565 = 36194;
  GL_DEPTH_COMPONENT16 = 33189;
  GL_STENCIL_INDEX8 = 36168;
  GL_RENDERBUFFER_WIDTH = 36162;
  GL_RENDERBUFFER_HEIGHT = 36163;
  GL_RENDERBUFFER_INTERNAL_FORMAT = 36164;
  GL_RENDERBUFFER_RED_SIZE = 36176;
  GL_RENDERBUFFER_GREEN_SIZE = 36177;
  GL_RENDERBUFFER_BLUE_SIZE = 36178;
  GL_RENDERBUFFER_ALPHA_SIZE = 36179;
  GL_RENDERBUFFER_DEPTH_SIZE = 36180;
  GL_RENDERBUFFER_STENCIL_SIZE = 36181;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
  GL_COLOR_ATTACHMENT0 = 36064;
  GL_DEPTH_ATTACHMENT = 36096;
  GL_STENCIL_ATTACHMENT = 36128;
  GL_NONE = 0;
  GL_FRAMEBUFFER_COMPLETE = 36053;
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
  GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
  GL_FRAMEBUFFER_UNSUPPORTED = 36061;
  GL_FRAMEBUFFER_BINDING = 36006;
  GL_RENDERBUFFER_BINDING = 36007;
  GL_MAX_RENDERBUFFER_SIZE = 34024;
  GL_INVALID_FRAMEBUFFER_OPERATION = 1286;
  DEG_2_RAD = math.PI / 180.0;
  RAD_2_DEG = 180.0 / math.PI;
  FUZZY_EQ_F = 1.0E-5;
  FUZZY_EQ_D = 1.0E-10;
  FLT_EPSILON = 1.1920929E-7;
  SQRT_1_2 = 0.70710677;
  defaultRandomInstance = new Random(numberToInt(now()));
  slerpTmpAf = MutableVec4f_init();
  slerpTmpBf = MutableVec4f_init();
  slerpTmpCf = MutableVec4f_init();
  slerpTmpAd = MutableVec4d_init();
  slerpTmpBd = MutableVec4d_init();
  slerpTmpCd = MutableVec4d_init();
  Kotlin.defineModule('kool', _);
  return _;
});
