define(['exports', 'kotlin', 'kotlinx-coroutines-core', 'kotlinx-serialization-kotlinx-serialization-runtime', 'kotlinx-serialization-kotlinx-serialization-protobuf'], function (_, Kotlin, $module$kotlinx_coroutines_core, $module$kotlinx_serialization_kotlinx_serialization_runtime, $module$kotlinx_serialization_kotlinx_serialization_protobuf) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var Unit = Kotlin.kotlin.Unit;
  var COROUTINE_SUSPENDED = Kotlin.kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED;
  var CoroutineImpl = Kotlin.kotlin.coroutines.CoroutineImpl;
  var launch = $module$kotlinx_coroutines_core.kotlinx.coroutines.launch_s496o7$;
  var startsWith = Kotlin.kotlin.text.startsWith_7epoxm$;
  var throwCCE = Kotlin.throwCCE;
  var endsWith = Kotlin.kotlin.text.endsWith_7epoxm$;
  var CompletableDeferred = $module$kotlinx_coroutines_core.kotlinx.coroutines.CompletableDeferred_xptg6w$;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var Job = $module$kotlinx_coroutines_core.kotlinx.coroutines.Job_5dx9e$;
  var Channel = $module$kotlinx_coroutines_core.kotlinx.coroutines.channels.Channel_ww73n8$;
  var mutableListOf = Kotlin.kotlin.collections.mutableListOf_i5x0yv$;
  var ensureNotNull = Kotlin.ensureNotNull;
  var CoroutineScope = $module$kotlinx_coroutines_core.kotlinx.coroutines.CoroutineScope;
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  var LinkedHashMap_init = Kotlin.kotlin.collections.LinkedHashMap_init_q3lmfv$;
  var SelectBuilderImpl_init = $module$kotlinx_coroutines_core.kotlinx.coroutines.selects.SelectBuilderImpl;
  var Throwable = Error;
  var throwUPAE = Kotlin.throwUPAE;
  var get_lastIndex = Kotlin.kotlin.collections.get_lastIndex_55thoc$;
  var ArrayList_init_0 = Kotlin.kotlin.collections.ArrayList_init_287e2$;
  var L0 = Kotlin.Long.ZERO;
  var toChar = Kotlin.toChar;
  var toBoxedChar = Kotlin.toBoxedChar;
  var Enum = Kotlin.kotlin.Enum;
  var throwISE = Kotlin.throwISE;
  var unboxChar = Kotlin.unboxChar;
  var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
  var Math_0 = Math;
  var Array_0 = Array;
  var get_indices = Kotlin.kotlin.collections.get_indices_gzk92b$;
  var reversed = Kotlin.kotlin.ranges.reversed_zf1xzc$;
  var Exception = Kotlin.kotlin.Exception;
  var first = Kotlin.kotlin.collections.first_2p1efm$;
  var last = Kotlin.kotlin.collections.last_2p1efm$;
  var numberToInt = Kotlin.numberToInt;
  var math = Kotlin.kotlin.math;
  var IllegalArgumentException_init = Kotlin.kotlin.IllegalArgumentException_init_pdl1vj$;
  var Any = Object;
  var print = Kotlin.kotlin.io.print_s8jyv4$;
  var println = Kotlin.kotlin.io.println;
  var defineInlineFunction = Kotlin.defineInlineFunction;
  var wrapFunction = Kotlin.wrapFunction;
  var get_indices_0 = Kotlin.kotlin.collections.get_indices_m7z4lg$;
  var L698769069 = Kotlin.Long.fromInt(698769069);
  var abs = Kotlin.kotlin.math.abs_za3lpa$;
  var abs_0 = Kotlin.kotlin.math.abs_s8cxhz$;
  var Long$Companion$MAX_VALUE = Kotlin.Long.MAX_VALUE;
  var kotlin_js_internal_FloatCompanionObject = Kotlin.kotlin.js.internal.FloatCompanionObject;
  var hashCode = Kotlin.hashCode;
  var round = Kotlin.kotlin.math.round_14dthe$;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var Iterable = Kotlin.kotlin.collections.Iterable;
  var removeAll = Kotlin.kotlin.collections.removeAll_qafx1e$;
  var Pair = Kotlin.kotlin.Pair;
  var LinkedHashSet_init = Kotlin.kotlin.collections.LinkedHashSet_init_287e2$;
  var NoSuchElementException_init = Kotlin.kotlin.NoSuchElementException_init;
  var Iterator = Kotlin.kotlin.collections.Iterator;
  var to = Kotlin.kotlin.to_ujzrz7$;
  var NoSuchElementException_init_0 = Kotlin.kotlin.NoSuchElementException;
  var sortWith = Kotlin.kotlin.collections.sortWith_nqfjgj$;
  var Comparator = Kotlin.kotlin.Comparator;
  var kotlin_js_internal_DoubleCompanionObject = Kotlin.kotlin.js.internal.DoubleCompanionObject;
  var emptySet = Kotlin.kotlin.collections.emptySet_287e2$;
  var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init_pdl1vj$;
  var addAll = Kotlin.kotlin.collections.addAll_ipc267$;
  var filterNotNull = Kotlin.kotlin.collections.filterNotNull_m3lr2h$;
  var equals = Kotlin.equals;
  var ULong = Kotlin.kotlin.ULong;
  var addAll_0 = Kotlin.kotlin.collections.addAll_ye1y7v$;
  var mutableMapOf = Kotlin.kotlin.collections.mutableMapOf_qfcya0$;
  var L1 = Kotlin.Long.ONE;
  var checkIndexOverflow = Kotlin.kotlin.collections.checkIndexOverflow_za3lpa$;
  var StringBuilder_init = Kotlin.kotlin.text.StringBuilder_init;
  var until = Kotlin.kotlin.ranges.until_dqglrj$;
  var joinToString = Kotlin.kotlin.collections.joinToString_fmv235$;
  var println_0 = Kotlin.kotlin.io.println_s8jyv4$;
  var listOf = Kotlin.kotlin.collections.listOf_i5x0yv$;
  var substringBefore = Kotlin.kotlin.text.substringBefore_8cymmc$;
  var mutableSetOf = Kotlin.kotlin.collections.mutableSetOf_i5x0yv$;
  var getCallableRef = Kotlin.getCallableRef;
  var roundToInt = Kotlin.kotlin.math.roundToInt_yrwdxr$;
  var toByte = Kotlin.toByte;
  var MutableCollection = Kotlin.kotlin.collections.MutableCollection;
  var indexOf = Kotlin.kotlin.text.indexOf_8eortd$;
  var IntRange = Kotlin.kotlin.ranges.IntRange;
  var substring = Kotlin.kotlin.text.substring_fc3b62$;
  var toBoolean = Kotlin.kotlin.text.toBoolean_pdl1vz$;
  var toInt = Kotlin.kotlin.text.toInt_pdl1vz$;
  var toDouble = Kotlin.kotlin.text.toDouble_pdl1vz$;
  var toString = Kotlin.toString;
  var joinTo = Kotlin.kotlin.collections.joinTo_gcc71v$;
  var MutableMap = Kotlin.kotlin.collections.MutableMap;
  var lastIndexOf = Kotlin.kotlin.text.lastIndexOf_8eortd$;
  var Random = Kotlin.kotlin.random.Random_za3lpa$;
  var shuffled = Kotlin.kotlin.collections.shuffled_4173s5$;
  var L1431655765 = Kotlin.Long.fromInt(1431655765);
  var L2863311530 = new Kotlin.Long(-1431655766, 0);
  var L858993459 = Kotlin.Long.fromInt(858993459);
  var L3435973836 = new Kotlin.Long(-858993460, 0);
  var L252645135 = Kotlin.Long.fromInt(252645135);
  var L4042322160 = new Kotlin.Long(-252645136, 0);
  var L16711935 = Kotlin.Long.fromInt(16711935);
  var L4278255360 = new Kotlin.Long(-16711936, 0);
  var shuffled_0 = Kotlin.kotlin.collections.shuffled_7wnvza$;
  var toInt_0 = Kotlin.kotlin.text.toInt_6ic1pp$;
  var NumberFormatException = Kotlin.kotlin.NumberFormatException;
  var first_0 = Kotlin.kotlin.collections.first_us0mfu$;
  var last_0 = Kotlin.kotlin.collections.last_us0mfu$;
  var sortWith_0 = Kotlin.kotlin.collections.sortWith_iwcb0m$;
  var listOf_0 = Kotlin.kotlin.collections.listOf_mh5how$;
  var get_indices_1 = Kotlin.kotlin.text.get_indices_gw00vp$;
  var Map = Kotlin.kotlin.collections.Map;
  var isNaN_0 = Kotlin.kotlin.isNaN_81szk$;
  var toList = Kotlin.kotlin.collections.toList_us0mfu$;
  var MutableList = Kotlin.kotlin.collections.MutableList;
  var step = Kotlin.kotlin.ranges.step_xsgg7u$;
  var toMutableList = Kotlin.kotlin.collections.toMutableList_4c7yge$;
  var iterator = Kotlin.kotlin.text.iterator_gw00vp$;
  var MutableIterator = Kotlin.kotlin.collections.MutableIterator;
  var emptyList = Kotlin.kotlin.collections.emptyList_287e2$;
  var Collection = Kotlin.kotlin.collections.Collection;
  var SerialClassDescImpl = $module$kotlinx_serialization_kotlinx_serialization_runtime.kotlinx.serialization.internal.SerialClassDescImpl;
  var ProtoId = $module$kotlinx_serialization_kotlinx_serialization_protobuf.kotlinx.serialization.protobuf.ProtoId;
  var ArrayListSerializer = $module$kotlinx_serialization_kotlinx_serialization_runtime.kotlinx.serialization.internal.ArrayListSerializer;
  var UnknownFieldException = $module$kotlinx_serialization_kotlinx_serialization_runtime.kotlinx.serialization.UnknownFieldException;
  var internal = $module$kotlinx_serialization_kotlinx_serialization_runtime.kotlinx.serialization.internal;
  var GeneratedSerializer = $module$kotlinx_serialization_kotlinx_serialization_runtime.kotlinx.serialization.internal.GeneratedSerializer;
  var MissingFieldException = $module$kotlinx_serialization_kotlinx_serialization_runtime.kotlinx.serialization.MissingFieldException;
  var ProtoBuf = $module$kotlinx_serialization_kotlinx_serialization_protobuf.kotlinx.serialization.protobuf.ProtoBuf;
  var getKClass = Kotlin.getKClass;
  var getContextualOrDefault = $module$kotlinx_serialization_kotlinx_serialization_runtime.kotlinx.serialization.modules.getContextualOrDefault_6za9kt$;
  var EnumSerializer = $module$kotlinx_serialization_kotlinx_serialization_runtime.kotlinx.serialization.internal.EnumSerializer;
  var LinkedHashMapSerializer = $module$kotlinx_serialization_kotlinx_serialization_runtime.kotlinx.serialization.internal.LinkedHashMapSerializer;
  var emptyMap = Kotlin.kotlin.collections.emptyMap_q3lmfv$;
  var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
  var removeAll_0 = Kotlin.kotlin.collections.removeAll_uhyeqt$;
  var MutableMap$MutableEntry = Kotlin.kotlin.collections.MutableMap.MutableEntry;
  var roundToLong = Kotlin.kotlin.math.roundToLong_yrwdxr$;
  var IllegalStateException_init_0 = Kotlin.kotlin.IllegalStateException_init;
  var async = $module$kotlinx_coroutines_core.kotlinx.coroutines.async_pda6u4$;
  var trimIndent = Kotlin.kotlin.text.trimIndent_pdl1vz$;
  var lines = Kotlin.kotlin.text.lines_gw00vp$;
  var StringBuilder = Kotlin.kotlin.text.StringBuilder;
  LocalRawAssetRef.prototype = Object.create(AssetRef.prototype);
  LocalRawAssetRef.prototype.constructor = LocalRawAssetRef;
  HttpRawAssetRef.prototype = Object.create(AssetRef.prototype);
  HttpRawAssetRef.prototype.constructor = HttpRawAssetRef;
  LocalTextureAssetRef.prototype = Object.create(AssetRef.prototype);
  LocalTextureAssetRef.prototype.constructor = LocalTextureAssetRef;
  HttpTextureAssetRef.prototype = Object.create(AssetRef.prototype);
  HttpTextureAssetRef.prototype.constructor = HttpTextureAssetRef;
  LoadedRawAsset.prototype = Object.create(LoadedAsset.prototype);
  LoadedRawAsset.prototype.constructor = LoadedRawAsset;
  LoadedTextureAsset.prototype = Object.create(LoadedAsset.prototype);
  LoadedTextureAsset.prototype.constructor = LoadedTextureAsset;
  InputManager$BufferedPointerInput$UpdateState.prototype = Object.create(Enum.prototype);
  InputManager$BufferedPointerInput$UpdateState.prototype.constructor = InputManager$BufferedPointerInput$UpdateState;
  InputManager$BufferedPointerInput$UpdateState$STARTED.prototype = Object.create(InputManager$BufferedPointerInput$UpdateState.prototype);
  InputManager$BufferedPointerInput$UpdateState$STARTED.prototype.constructor = InputManager$BufferedPointerInput$UpdateState$STARTED;
  InputManager$BufferedPointerInput$UpdateState$ACTIVE.prototype = Object.create(InputManager$BufferedPointerInput$UpdateState.prototype);
  InputManager$BufferedPointerInput$UpdateState$ACTIVE.prototype.constructor = InputManager$BufferedPointerInput$UpdateState$ACTIVE;
  InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED.prototype = Object.create(InputManager$BufferedPointerInput$UpdateState.prototype);
  InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED.prototype.constructor = InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED;
  InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE.prototype = Object.create(InputManager$BufferedPointerInput$UpdateState.prototype);
  InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE.prototype.constructor = InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE;
  InputManager$BufferedPointerInput$UpdateState$ENDED.prototype = Object.create(InputManager$BufferedPointerInput$UpdateState.prototype);
  InputManager$BufferedPointerInput$UpdateState$ENDED.prototype.constructor = InputManager$BufferedPointerInput$UpdateState$ENDED;
  InputManager$BufferedPointerInput$UpdateState$INVALID.prototype = Object.create(InputManager$BufferedPointerInput$UpdateState.prototype);
  InputManager$BufferedPointerInput$UpdateState$INVALID.prototype.constructor = InputManager$BufferedPointerInput$UpdateState$INVALID;
  InputManager$BufferedPointerInput.prototype = Object.create(InputManager$Pointer.prototype);
  InputManager$BufferedPointerInput.prototype.constructor = InputManager$BufferedPointerInput;
  KoolException.prototype = Object.create(Exception.prototype);
  KoolException.prototype.constructor = KoolException;
  BSplineVec2f.prototype = Object.create(BSpline.prototype);
  BSplineVec2f.prototype.constructor = BSplineVec2f;
  BSplineVec3f.prototype = Object.create(BSpline.prototype);
  BSplineVec3f.prototype.constructor = BSplineVec3f;
  Mat4dStack.prototype = Object.create(Mat4d.prototype);
  Mat4dStack.prototype.constructor = Mat4dStack;
  Mat4fStack.prototype = Object.create(Mat4f.prototype);
  Mat4fStack.prototype.constructor = Mat4fStack;
  CubicPointDistribution.prototype = Object.create(PointDistribution.prototype);
  CubicPointDistribution.prototype.constructor = CubicPointDistribution;
  SphericalPointDistribution.prototype = Object.create(PointDistribution.prototype);
  SphericalPointDistribution.prototype.constructor = SphericalPointDistribution;
  MutableVec2f.prototype = Object.create(Vec2f.prototype);
  MutableVec2f.prototype.constructor = MutableVec2f;
  MutableVec2d.prototype = Object.create(Vec2d.prototype);
  MutableVec2d.prototype.constructor = MutableVec2d;
  MutableVec3f.prototype = Object.create(Vec3f.prototype);
  MutableVec3f.prototype.constructor = MutableVec3f;
  MutableVec3d.prototype = Object.create(Vec3d.prototype);
  MutableVec3d.prototype.constructor = MutableVec3d;
  MutableVec4f.prototype = Object.create(Vec4f.prototype);
  MutableVec4f.prototype.constructor = MutableVec4f;
  MutableVec4d.prototype = Object.create(Vec4d.prototype);
  MutableVec4d.prototype.constructor = MutableVec4d;
  LowPassFilter.prototype = Object.create(SampleNode.prototype);
  LowPassFilter.prototype.constructor = LowPassFilter;
  HighPassFilter.prototype = Object.create(SampleNode.prototype);
  HighPassFilter.prototype.constructor = HighPassFilter;
  MoodFilter.prototype = Object.create(SampleNode.prototype);
  MoodFilter.prototype.constructor = MoodFilter;
  HiHat.prototype = Object.create(SampleNode.prototype);
  HiHat.prototype.constructor = HiHat;
  Kick.prototype = Object.create(SampleNode.prototype);
  Kick.prototype.constructor = Kick;
  Melody.prototype = Object.create(SampleNode.prototype);
  Melody.prototype.constructor = Melody;
  Oscillator.prototype = Object.create(SampleNode.prototype);
  Oscillator.prototype.constructor = Oscillator;
  Pad.prototype = Object.create(SampleNode.prototype);
  Pad.prototype.constructor = Pad;
  Shaker.prototype = Object.create(SampleNode.prototype);
  Shaker.prototype.constructor = Shaker;
  Snare.prototype = Object.create(SampleNode.prototype);
  Snare.prototype.constructor = Snare;
  HalfEdgeMesh$HalfEdgeVertex.prototype = Object.create(Vec3f.prototype);
  HalfEdgeMesh$HalfEdgeVertex.prototype.constructor = HalfEdgeMesh$HalfEdgeVertex;
  Mesh.prototype = Object.create(Node.prototype);
  Mesh.prototype.constructor = Mesh;
  HalfEdgeMesh.prototype = Object.create(Mesh.prototype);
  HalfEdgeMesh.prototype.constructor = HalfEdgeMesh;
  CenterPointTraverser.prototype = Object.create(SpatialTreeTraverser.prototype);
  CenterPointTraverser.prototype.constructor = CenterPointTraverser;
  KNearestTraverser.prototype = Object.create(CenterPointTraverser.prototype);
  KNearestTraverser.prototype.constructor = KNearestTraverser;
  MeshCutXy$CoveringTriXyTrav.prototype = Object.create(KNearestTraverser.prototype);
  MeshCutXy$CoveringTriXyTrav.prototype.constructor = MeshCutXy$CoveringTriXyTrav;
  InRadiusTraverser.prototype = Object.create(CenterPointTraverser.prototype);
  InRadiusTraverser.prototype.constructor = InRadiusTraverser;
  MeshCutXy$ShortEdgeOnEdgeTraverser.prototype = Object.create(InRadiusTraverser.prototype);
  MeshCutXy$ShortEdgeOnEdgeTraverser.prototype.constructor = MeshCutXy$ShortEdgeOnEdgeTraverser;
  MeshCutXy$EdgeXyIntersectionTrav.prototype = Object.create(InRadiusTraverser.prototype);
  MeshCutXy$EdgeXyIntersectionTrav.prototype.constructor = MeshCutXy$EdgeXyIntersectionTrav;
  MeshSimplifier$CollapseCandidates.prototype = Object.create(TreeMap.prototype);
  MeshSimplifier$CollapseCandidates.prototype.constructor = MeshSimplifier$CollapseCandidates;
  GlslType.prototype = Object.create(Enum.prototype);
  GlslType.prototype.constructor = GlslType;
  OffscreenRenderPass.prototype = Object.create(RenderPass.prototype);
  OffscreenRenderPass.prototype.constructor = OffscreenRenderPass;
  OffscreenRenderPass2d.prototype = Object.create(OffscreenRenderPass.prototype);
  OffscreenRenderPass2d.prototype.constructor = OffscreenRenderPass2d;
  DepthMapPass.prototype = Object.create(OffscreenRenderPass2d.prototype);
  DepthMapPass.prototype.constructor = DepthMapPass;
  LinearDepthMapPass$LinearDepthNode.prototype = Object.create(ShaderNode.prototype);
  LinearDepthMapPass$LinearDepthNode.prototype.constructor = LinearDepthMapPass$LinearDepthNode;
  LinearDepthMapPass.prototype = Object.create(DepthMapPass.prototype);
  LinearDepthMapPass.prototype.constructor = LinearDepthMapPass;
  NormalLinearDepthMapPass$NormalLinearDepthNode.prototype = Object.create(ShaderNode.prototype);
  NormalLinearDepthMapPass$NormalLinearDepthNode.prototype.constructor = NormalLinearDepthMapPass$NormalLinearDepthNode;
  NormalLinearDepthMapPass.prototype = Object.create(DepthMapPass.prototype);
  NormalLinearDepthMapPass.prototype.constructor = NormalLinearDepthMapPass;
  TextureSampler$Builder.prototype = Object.create(Descriptor$Builder.prototype);
  TextureSampler$Builder.prototype.constructor = TextureSampler$Builder;
  TextureSampler.prototype = Object.create(Descriptor.prototype);
  TextureSampler.prototype.constructor = TextureSampler;
  CubeMapSampler$Builder.prototype = Object.create(Descriptor$Builder.prototype);
  CubeMapSampler$Builder.prototype.constructor = CubeMapSampler$Builder;
  CubeMapSampler.prototype = Object.create(Descriptor.prototype);
  CubeMapSampler.prototype.constructor = CubeMapSampler;
  UniformBuffer$Builder.prototype = Object.create(Descriptor$Builder.prototype);
  UniformBuffer$Builder.prototype.constructor = UniformBuffer$Builder;
  UniformBuffer.prototype = Object.create(Descriptor.prototype);
  UniformBuffer.prototype.constructor = UniformBuffer;
  DescriptorType.prototype = Object.create(Enum.prototype);
  DescriptorType.prototype.constructor = DescriptorType;
  OffscreenRenderPass2dMrt.prototype = Object.create(OffscreenRenderPass.prototype);
  OffscreenRenderPass2dMrt.prototype.constructor = OffscreenRenderPass2dMrt;
  OffscreenRenderPassCube$ViewDirection.prototype = Object.create(Enum.prototype);
  OffscreenRenderPassCube$ViewDirection.prototype.constructor = OffscreenRenderPassCube$ViewDirection;
  OffscreenRenderPassCube.prototype = Object.create(OffscreenRenderPass.prototype);
  OffscreenRenderPassCube.prototype.constructor = OffscreenRenderPassCube;
  BlendMode.prototype = Object.create(Enum.prototype);
  BlendMode.prototype.constructor = BlendMode;
  DepthCompareOp.prototype = Object.create(Enum.prototype);
  DepthCompareOp.prototype.constructor = DepthCompareOp;
  CullMethod.prototype = Object.create(Enum.prototype);
  CullMethod.prototype.constructor = CullMethod;
  RenderPass$Type.prototype = Object.create(Enum.prototype);
  RenderPass$Type.prototype.constructor = RenderPass$Type;
  ScreenRenderPass.prototype = Object.create(RenderPass.prototype);
  ScreenRenderPass.prototype.constructor = ScreenRenderPass;
  CodeGenerator$ClipSpaceOrientation.prototype = Object.create(Enum.prototype);
  CodeGenerator$ClipSpaceOrientation.prototype.constructor = CodeGenerator$ClipSpaceOrientation;
  ColorAlphaNode.prototype = Object.create(ShaderNode.prototype);
  ColorAlphaNode.prototype.constructor = ColorAlphaNode;
  PremultiplyColorNode.prototype = Object.create(ShaderNode.prototype);
  PremultiplyColorNode.prototype.constructor = PremultiplyColorNode;
  GammaNode.prototype = Object.create(ShaderNode.prototype);
  GammaNode.prototype.constructor = GammaNode;
  HdrToLdrNode.prototype = Object.create(ShaderNode.prototype);
  HdrToLdrNode.prototype.constructor = HdrToLdrNode;
  FragmentColorOutNode.prototype = Object.create(ShaderNode.prototype);
  FragmentColorOutNode.prototype.constructor = FragmentColorOutNode;
  FragmentDepthOutNode.prototype = Object.create(ShaderNode.prototype);
  FragmentDepthOutNode.prototype.constructor = FragmentDepthOutNode;
  LightNode.prototype = Object.create(ShaderNode.prototype);
  LightNode.prototype.constructor = LightNode;
  MultiLightNode.prototype = Object.create(LightNode.prototype);
  MultiLightNode.prototype.constructor = MultiLightNode;
  SingleLightUniformDataNode.prototype = Object.create(ShaderNode.prototype);
  SingleLightUniformDataNode.prototype.constructor = SingleLightUniformDataNode;
  SingleLightNode.prototype = Object.create(LightNode.prototype);
  SingleLightNode.prototype.constructor = SingleLightNode;
  UnlitMaterialNode.prototype = Object.create(ShaderNode.prototype);
  UnlitMaterialNode.prototype.constructor = UnlitMaterialNode;
  PhongMaterialNode.prototype = Object.create(ShaderNode.prototype);
  PhongMaterialNode.prototype.constructor = PhongMaterialNode;
  PbrMaterialNode.prototype = Object.create(ShaderNode.prototype);
  PbrMaterialNode.prototype.constructor = PbrMaterialNode;
  PbrLightNode.prototype = Object.create(ShaderNode.prototype);
  PbrLightNode.prototype.constructor = PbrLightNode;
  MathOpNode.prototype = Object.create(ShaderNode.prototype);
  MathOpNode.prototype.constructor = MathOpNode;
  AddNode.prototype = Object.create(MathOpNode.prototype);
  AddNode.prototype.constructor = AddNode;
  SubtractNode.prototype = Object.create(MathOpNode.prototype);
  SubtractNode.prototype.constructor = SubtractNode;
  DivideNode.prototype = Object.create(MathOpNode.prototype);
  DivideNode.prototype.constructor = DivideNode;
  MultiplyNode.prototype = Object.create(MathOpNode.prototype);
  MultiplyNode.prototype.constructor = MultiplyNode;
  NormalizeNode.prototype = Object.create(ShaderNode.prototype);
  NormalizeNode.prototype.constructor = NormalizeNode;
  ModelVar1f.prototype = Object.create(ModelVar.prototype);
  ModelVar1f.prototype.constructor = ModelVar1f;
  ModelVar2f.prototype = Object.create(ModelVar.prototype);
  ModelVar2f.prototype.constructor = ModelVar2f;
  ModelVar3f.prototype = Object.create(ModelVar.prototype);
  ModelVar3f.prototype.constructor = ModelVar3f;
  ModelVar4f.prototype = Object.create(ModelVar.prototype);
  ModelVar4f.prototype.constructor = ModelVar4f;
  ModelVar1i.prototype = Object.create(ModelVar.prototype);
  ModelVar1i.prototype.constructor = ModelVar1i;
  ModelVar2i.prototype = Object.create(ModelVar.prototype);
  ModelVar2i.prototype.constructor = ModelVar2i;
  ModelVar3i.prototype = Object.create(ModelVar.prototype);
  ModelVar3i.prototype.constructor = ModelVar3i;
  ModelVar4i.prototype = Object.create(ModelVar.prototype);
  ModelVar4i.prototype.constructor = ModelVar4i;
  ModelVarMat2f.prototype = Object.create(ModelVar.prototype);
  ModelVarMat2f.prototype.constructor = ModelVarMat2f;
  ModelVarMat3f.prototype = Object.create(ModelVar.prototype);
  ModelVarMat3f.prototype.constructor = ModelVarMat3f;
  ModelVarMat4f.prototype = Object.create(ModelVar.prototype);
  ModelVarMat4f.prototype.constructor = ModelVarMat4f;
  ModelVar1fConst.prototype = Object.create(ModelVar1f.prototype);
  ModelVar1fConst.prototype.constructor = ModelVar1fConst;
  ModelVar2fConst.prototype = Object.create(ModelVar2f.prototype);
  ModelVar2fConst.prototype.constructor = ModelVar2fConst;
  ModelVar3fConst.prototype = Object.create(ModelVar3f.prototype);
  ModelVar3fConst.prototype.constructor = ModelVar3fConst;
  ModelVar4fConst.prototype = Object.create(ModelVar4f.prototype);
  ModelVar4fConst.prototype.constructor = ModelVar4fConst;
  ModelVar1iConst.prototype = Object.create(ModelVar1i.prototype);
  ModelVar1iConst.prototype.constructor = ModelVar1iConst;
  ModelVar2iConst.prototype = Object.create(ModelVar2i.prototype);
  ModelVar2iConst.prototype.constructor = ModelVar2iConst;
  ModelVar3iConst.prototype = Object.create(ModelVar3i.prototype);
  ModelVar3iConst.prototype.constructor = ModelVar3iConst;
  ModelVar4iConst.prototype = Object.create(ModelVar4i.prototype);
  ModelVar4iConst.prototype.constructor = ModelVar4iConst;
  VertexShaderGraph.prototype = Object.create(ShaderGraph.prototype);
  VertexShaderGraph.prototype.constructor = VertexShaderGraph;
  FragmentShaderGraph.prototype = Object.create(ShaderGraph.prototype);
  FragmentShaderGraph.prototype.constructor = FragmentShaderGraph;
  ShaderModel$VertexStageBuilder.prototype = Object.create(ShaderModel$StageBuilder.prototype);
  ShaderModel$VertexStageBuilder.prototype.constructor = ShaderModel$VertexStageBuilder;
  ShaderModel$FragmentStageBuilder.prototype = Object.create(ShaderModel$StageBuilder.prototype);
  ShaderModel$FragmentStageBuilder.prototype.constructor = ShaderModel$FragmentStageBuilder;
  SimpleShadowMapNode.prototype = Object.create(ShadowMapNode.prototype);
  SimpleShadowMapNode.prototype.constructor = SimpleShadowMapNode;
  SimpleShadowMapTransformNode.prototype = Object.create(ShaderNode.prototype);
  SimpleShadowMapTransformNode.prototype.constructor = SimpleShadowMapTransformNode;
  SimpleShadowMapFragmentNode.prototype = Object.create(ShaderNode.prototype);
  SimpleShadowMapFragmentNode.prototype.constructor = SimpleShadowMapFragmentNode;
  CascadedShadowMapNode$CascadedShadowHelperNd.prototype = Object.create(ShaderNode.prototype);
  CascadedShadowMapNode$CascadedShadowHelperNd.prototype.constructor = CascadedShadowMapNode$CascadedShadowHelperNd;
  CascadedShadowMapNode.prototype = Object.create(ShadowMapNode.prototype);
  CascadedShadowMapNode.prototype.constructor = CascadedShadowMapNode;
  CascadedShadowMapTransformNode.prototype = Object.create(ShaderNode.prototype);
  CascadedShadowMapTransformNode.prototype.constructor = CascadedShadowMapTransformNode;
  CascadedShadowMapFragmentNode.prototype = Object.create(ShaderNode.prototype);
  CascadedShadowMapFragmentNode.prototype.constructor = CascadedShadowMapFragmentNode;
  Vec3TransformNode.prototype = Object.create(ShaderNode.prototype);
  Vec3TransformNode.prototype.constructor = Vec3TransformNode;
  Vec4TransformNode.prototype = Object.create(ShaderNode.prototype);
  Vec4TransformNode.prototype.constructor = Vec4TransformNode;
  UniformBufferPremultipliedMvp$StageCopy.prototype = Object.create(ShaderNode.prototype);
  UniformBufferPremultipliedMvp$StageCopy.prototype.constructor = UniformBufferPremultipliedMvp$StageCopy;
  UniformBufferPremultipliedMvp.prototype = Object.create(ShaderNode.prototype);
  UniformBufferPremultipliedMvp.prototype.constructor = UniformBufferPremultipliedMvp;
  UniformBufferMvp$StageCopy.prototype = Object.create(ShaderNode.prototype);
  UniformBufferMvp$StageCopy.prototype.constructor = UniformBufferMvp$StageCopy;
  UniformBufferMvp.prototype = Object.create(ShaderNode.prototype);
  UniformBufferMvp.prototype.constructor = UniformBufferMvp;
  TextureNode.prototype = Object.create(ShaderNode.prototype);
  TextureNode.prototype.constructor = TextureNode;
  CubeMapNode.prototype = Object.create(ShaderNode.prototype);
  CubeMapNode.prototype.constructor = CubeMapNode;
  PushConstantNode.prototype = Object.create(ShaderNode.prototype);
  PushConstantNode.prototype.constructor = PushConstantNode;
  PushConstantNode1f.prototype = Object.create(PushConstantNode.prototype);
  PushConstantNode1f.prototype.constructor = PushConstantNode1f;
  PushConstantNode2f.prototype = Object.create(PushConstantNode.prototype);
  PushConstantNode2f.prototype.constructor = PushConstantNode2f;
  PushConstantNode3f.prototype = Object.create(PushConstantNode.prototype);
  PushConstantNode3f.prototype.constructor = PushConstantNode3f;
  PushConstantNode4f.prototype = Object.create(PushConstantNode.prototype);
  PushConstantNode4f.prototype.constructor = PushConstantNode4f;
  PushConstantNodeColor.prototype = Object.create(PushConstantNode.prototype);
  PushConstantNodeColor.prototype.constructor = PushConstantNodeColor;
  TextureSamplerNode.prototype = Object.create(ShaderNode.prototype);
  TextureSamplerNode.prototype.constructor = TextureSamplerNode;
  CubeMapSamplerNode.prototype = Object.create(ShaderNode.prototype);
  CubeMapSamplerNode.prototype.constructor = CubeMapSamplerNode;
  EquiRectSamplerNode.prototype = Object.create(ShaderNode.prototype);
  EquiRectSamplerNode.prototype.constructor = EquiRectSamplerNode;
  AoMapSampleNode.prototype = Object.create(ShaderNode.prototype);
  AoMapSampleNode.prototype.constructor = AoMapSampleNode;
  NormalMapNode.prototype = Object.create(ShaderNode.prototype);
  NormalMapNode.prototype.constructor = NormalMapNode;
  DisplacementMapNode.prototype = Object.create(ShaderNode.prototype);
  DisplacementMapNode.prototype.constructor = DisplacementMapNode;
  ChannelNode.prototype = Object.create(ShaderNode.prototype);
  ChannelNode.prototype.constructor = ChannelNode;
  AttributeNode.prototype = Object.create(ShaderNode.prototype);
  AttributeNode.prototype.constructor = AttributeNode;
  InstanceAttributeNode.prototype = Object.create(ShaderNode.prototype);
  InstanceAttributeNode.prototype.constructor = InstanceAttributeNode;
  StageInterfaceNode$vertexNode$ObjectLiteral.prototype = Object.create(ShaderNode.prototype);
  StageInterfaceNode$vertexNode$ObjectLiteral.prototype.constructor = StageInterfaceNode$vertexNode$ObjectLiteral;
  StageInterfaceNode$fragmentNode$ObjectLiteral.prototype = Object.create(ShaderNode.prototype);
  StageInterfaceNode$fragmentNode$ObjectLiteral.prototype.constructor = StageInterfaceNode$fragmentNode$ObjectLiteral;
  FullScreenQuadTexPosNode.prototype = Object.create(ShaderNode.prototype);
  FullScreenQuadTexPosNode.prototype.constructor = FullScreenQuadTexPosNode;
  ShaderStage.prototype = Object.create(Enum.prototype);
  ShaderStage.prototype.constructor = ShaderStage;
  Albedo.prototype = Object.create(Enum.prototype);
  Albedo.prototype.constructor = Albedo;
  CustomShader.prototype = Object.create(Shader.prototype);
  CustomShader.prototype.constructor = CustomShader;
  ModeledShader.prototype = Object.create(Shader.prototype);
  ModeledShader.prototype.constructor = ModeledShader;
  ModeledShader$StaticColor.prototype = Object.create(ModeledShader.prototype);
  ModeledShader$StaticColor.prototype.constructor = ModeledShader$StaticColor;
  ModeledShader$VertexColor.prototype = Object.create(ModeledShader.prototype);
  ModeledShader$VertexColor.prototype.constructor = ModeledShader$VertexColor;
  ModeledShader$TextureColor.prototype = Object.create(ModeledShader.prototype);
  ModeledShader$TextureColor.prototype.constructor = ModeledShader$TextureColor;
  ModeledShader$CubeMapColor.prototype = Object.create(ModeledShader.prototype);
  ModeledShader$CubeMapColor.prototype.constructor = ModeledShader$CubeMapColor;
  PbrShader.prototype = Object.create(ModeledShader.prototype);
  PbrShader.prototype.constructor = PbrShader;
  PhongShader.prototype = Object.create(ModeledShader.prototype);
  PhongShader.prototype.constructor = PhongShader;
  TexFormat.prototype = Object.create(Enum.prototype);
  TexFormat.prototype.constructor = TexFormat;
  Texture$LoadingState.prototype = Object.create(Enum.prototype);
  Texture$LoadingState.prototype.constructor = Texture$LoadingState;
  SingleColorTexture.prototype = Object.create(Texture.prototype);
  SingleColorTexture.prototype.constructor = SingleColorTexture;
  CubeMapTexture.prototype = Object.create(Texture.prototype);
  CubeMapTexture.prototype.constructor = CubeMapTexture;
  FilterMethod.prototype = Object.create(Enum.prototype);
  FilterMethod.prototype.constructor = FilterMethod;
  AddressMode.prototype = Object.create(Enum.prototype);
  AddressMode.prototype.constructor = AddressMode;
  BufferedTextureData.prototype = Object.create(TextureData.prototype);
  BufferedTextureData.prototype.constructor = BufferedTextureData;
  CubeMapTextureData.prototype = Object.create(TextureData.prototype);
  CubeMapTextureData.prototype.constructor = CubeMapTextureData;
  Uniform1f.prototype = Object.create(Uniform.prototype);
  Uniform1f.prototype.constructor = Uniform1f;
  Uniform2f.prototype = Object.create(Uniform.prototype);
  Uniform2f.prototype.constructor = Uniform2f;
  Uniform3f.prototype = Object.create(Uniform.prototype);
  Uniform3f.prototype.constructor = Uniform3f;
  Uniform4f.prototype = Object.create(Uniform.prototype);
  Uniform4f.prototype.constructor = Uniform4f;
  UniformColor.prototype = Object.create(Uniform.prototype);
  UniformColor.prototype.constructor = UniformColor;
  Uniform1fv.prototype = Object.create(Uniform.prototype);
  Uniform1fv.prototype.constructor = Uniform1fv;
  Uniform2fv.prototype = Object.create(Uniform.prototype);
  Uniform2fv.prototype.constructor = Uniform2fv;
  Uniform3fv.prototype = Object.create(Uniform.prototype);
  Uniform3fv.prototype.constructor = Uniform3fv;
  Uniform4fv.prototype = Object.create(Uniform.prototype);
  Uniform4fv.prototype.constructor = Uniform4fv;
  UniformMat3f.prototype = Object.create(Uniform.prototype);
  UniformMat3f.prototype.constructor = UniformMat3f;
  UniformMat4f.prototype = Object.create(Uniform.prototype);
  UniformMat4f.prototype.constructor = UniformMat4f;
  UniformMat4fv.prototype = Object.create(Uniform.prototype);
  UniformMat4fv.prototype.constructor = UniformMat4fv;
  Uniform1i.prototype = Object.create(Uniform.prototype);
  Uniform1i.prototype.constructor = Uniform1i;
  Uniform1iv.prototype = Object.create(Uniform.prototype);
  Uniform1iv.prototype.constructor = Uniform1iv;
  InputRate.prototype = Object.create(Enum.prototype);
  InputRate.prototype.constructor = InputRate;
  Armature.prototype = Object.create(Mesh.prototype);
  Armature.prototype.constructor = Armature;
  RotationKey.prototype = Object.create(AnimationKey.prototype);
  RotationKey.prototype.constructor = RotationKey;
  PositionKey.prototype = Object.create(AnimationKey.prototype);
  PositionKey.prototype.constructor = PositionKey;
  ScalingKey.prototype = Object.create(AnimationKey.prototype);
  ScalingKey.prototype.constructor = ScalingKey;
  Camera$ProjCorrectionMode.prototype = Object.create(Enum.prototype);
  Camera$ProjCorrectionMode.prototype.constructor = Camera$ProjCorrectionMode;
  Camera.prototype = Object.create(Node.prototype);
  Camera.prototype.constructor = Camera;
  OrthographicCamera.prototype = Object.create(Camera.prototype);
  OrthographicCamera.prototype.constructor = OrthographicCamera;
  PerspectiveCamera.prototype = Object.create(Camera.prototype);
  PerspectiveCamera.prototype.constructor = PerspectiveCamera;
  Group.prototype = Object.create(Node.prototype);
  Group.prototype.constructor = Group;
  Light$Type.prototype = Object.create(Enum.prototype);
  Light$Type.prototype.constructor = Light$Type;
  LineMesh.prototype = Object.create(Mesh.prototype);
  LineMesh.prototype.constructor = LineMesh;
  OrbitInputTransform$DragMethod.prototype = Object.create(Enum.prototype);
  OrbitInputTransform$DragMethod.prototype.constructor = OrbitInputTransform$DragMethod;
  OrbitInputTransform$ZoomMethod.prototype = Object.create(Enum.prototype);
  OrbitInputTransform$ZoomMethod.prototype.constructor = OrbitInputTransform$ZoomMethod;
  TransformGroup.prototype = Object.create(Group.prototype);
  TransformGroup.prototype.constructor = TransformGroup;
  OrbitInputTransform.prototype = Object.create(TransformGroup.prototype);
  OrbitInputTransform.prototype.constructor = OrbitInputTransform;
  CameraOrthogonalPan.prototype = Object.create(PanBase.prototype);
  CameraOrthogonalPan.prototype.constructor = CameraOrthogonalPan;
  FixedPlanePan.prototype = Object.create(PanBase.prototype);
  FixedPlanePan.prototype.constructor = FixedPlanePan;
  PointMesh.prototype = Object.create(Mesh.prototype);
  PointMesh.prototype.constructor = PointMesh;
  Scene.prototype = Object.create(Group.prototype);
  Scene.prototype.constructor = Scene;
  Skybox$SkyboxPosNode.prototype = Object.create(ShaderNode.prototype);
  Skybox$SkyboxPosNode.prototype.constructor = Skybox$SkyboxPosNode;
  Skybox.prototype = Object.create(Mesh.prototype);
  Skybox.prototype.constructor = Skybox;
  UiComponent.prototype = Object.create(TransformGroup.prototype);
  UiComponent.prototype.constructor = UiComponent;
  Label.prototype = Object.create(UiComponent.prototype);
  Label.prototype.constructor = Label;
  Button.prototype = Object.create(Label.prototype);
  Button.prototype.constructor = Button;
  ButtonUi.prototype = Object.create(LabelUi.prototype);
  ButtonUi.prototype.constructor = ButtonUi;
  BlurredComponentUi.prototype = Object.create(SimpleComponentUi.prototype);
  BlurredComponentUi.prototype.constructor = BlurredComponentUi;
  ToggleButtonUi.prototype = Object.create(ButtonUi.prototype);
  ToggleButtonUi.prototype.constructor = ToggleButtonUi;
  DrawerMenu$MenuButtonUi.prototype = Object.create(ToggleButtonUi.prototype);
  DrawerMenu$MenuButtonUi.prototype.constructor = DrawerMenu$MenuButtonUi;
  UiContainer.prototype = Object.create(UiComponent.prototype);
  UiContainer.prototype.constructor = UiContainer;
  DrawerMenu.prototype = Object.create(UiContainer.prototype);
  DrawerMenu.prototype.constructor = DrawerMenu;
  SizeUnit.prototype = Object.create(Enum.prototype);
  SizeUnit.prototype.constructor = SizeUnit;
  CombSizeSpec.prototype = Object.create(SizeSpec.prototype);
  CombSizeSpec.prototype.constructor = CombSizeSpec;
  Alignment.prototype = Object.create(Enum.prototype);
  Alignment.prototype.constructor = Alignment;
  ScrollHandler.prototype = Object.create(UiComponent.prototype);
  ScrollHandler.prototype.constructor = ScrollHandler;
  Slider.prototype = Object.create(UiComponent.prototype);
  Slider.prototype.constructor = Slider;
  TextField.prototype = Object.create(Label.prototype);
  TextField.prototype.constructor = TextField;
  TextFieldUi.prototype = Object.create(LabelUi.prototype);
  TextFieldUi.prototype.constructor = TextFieldUi;
  ToggleButton.prototype = Object.create(Button.prototype);
  ToggleButton.prototype.constructor = ToggleButton;
  UiRoot.prototype = Object.create(Node.prototype);
  UiRoot.prototype.constructor = UiRoot;
  UiShader.prototype = Object.create(ModeledShader.prototype);
  UiShader.prototype.constructor = UiShader;
  ThemeBuilder.prototype = Object.create(UiTheme.prototype);
  ThemeBuilder.prototype.constructor = ThemeBuilder;
  LinearAnimator.prototype = Object.create(Animator.prototype);
  LinearAnimator.prototype.constructor = LinearAnimator;
  CosAnimator.prototype = Object.create(Animator.prototype);
  CosAnimator.prototype.constructor = CosAnimator;
  InterpolatedFloat.prototype = Object.create(InterpolatedValue.prototype);
  InterpolatedFloat.prototype.constructor = InterpolatedFloat;
  InterpolatedColor.prototype = Object.create(InterpolatedValue.prototype);
  InterpolatedColor.prototype.constructor = InterpolatedColor;
  AmbientOcclusionPass$AoUniforms.prototype = Object.create(ShaderNode.prototype);
  AmbientOcclusionPass$AoUniforms.prototype.constructor = AmbientOcclusionPass$AoUniforms;
  AmbientOcclusionPass$UnprojectPosNode.prototype = Object.create(ShaderNode.prototype);
  AmbientOcclusionPass$UnprojectPosNode.prototype.constructor = AmbientOcclusionPass$UnprojectPosNode;
  AmbientOcclusionPass$AoNode.prototype = Object.create(ShaderNode.prototype);
  AmbientOcclusionPass$AoNode.prototype.constructor = AmbientOcclusionPass$AoNode;
  AmbientOcclusionPass.prototype = Object.create(OffscreenRenderPass2d.prototype);
  AmbientOcclusionPass.prototype.constructor = AmbientOcclusionPass;
  AoDenoisePass$BlurNode.prototype = Object.create(ShaderNode.prototype);
  AoDenoisePass$BlurNode.prototype.constructor = AoDenoisePass$BlurNode;
  AoDenoisePass.prototype = Object.create(OffscreenRenderPass2d.prototype);
  AoDenoisePass.prototype.constructor = AoDenoisePass;
  AoPipeline$ForwardAoPipeline.prototype = Object.create(AoPipeline.prototype);
  AoPipeline$ForwardAoPipeline.prototype.constructor = AoPipeline$ForwardAoPipeline;
  AoPipeline$DeferredAoPipeline.prototype = Object.create(AoPipeline.prototype);
  AoPipeline$DeferredAoPipeline.prototype.constructor = AoPipeline$DeferredAoPipeline;
  AoPipeline$ProxyCamera.prototype = Object.create(PerspectiveCamera.prototype);
  AoPipeline$ProxyCamera.prototype.constructor = AoPipeline$ProxyCamera;
  Vec2fView.prototype = Object.create(MutableVec2f.prototype);
  Vec2fView.prototype.constructor = Vec2fView;
  Vec3fView.prototype = Object.create(MutableVec3f.prototype);
  Vec3fView.prototype.constructor = Vec3fView;
  Vec4fView.prototype = Object.create(MutableVec4f.prototype);
  Vec4fView.prototype.constructor = Vec4fView;
  Color.prototype = Object.create(Vec4f.prototype);
  Color.prototype.constructor = Color;
  MutableColor.prototype = Object.create(Color.prototype);
  MutableColor.prototype.constructor = MutableColor;
  DebugOverlay$Position.prototype = Object.create(Enum.prototype);
  DebugOverlay$Position.prototype.constructor = DebugOverlay$Position;
  DeltaTGraph.prototype = Object.create(UiComponent.prototype);
  DeltaTGraph.prototype.constructor = DeltaTGraph;
  DeferredLightShader.prototype = Object.create(ModeledShader.prototype);
  DeferredLightShader.prototype.constructor = DeferredLightShader;
  DeferredMrtPass.prototype = Object.create(OffscreenRenderPass2dMrt.prototype);
  DeferredMrtPass.prototype.constructor = DeferredMrtPass;
  DeferredMrtShader$MrtMultiplexNode.prototype = Object.create(ShaderNode.prototype);
  DeferredMrtShader$MrtMultiplexNode.prototype.constructor = DeferredMrtShader$MrtMultiplexNode;
  DeferredMrtShader$MrtDeMultiplexNode.prototype = Object.create(ShaderNode.prototype);
  DeferredMrtShader$MrtDeMultiplexNode.prototype.constructor = DeferredMrtShader$MrtDeMultiplexNode;
  DeferredMrtShader.prototype = Object.create(ModeledShader.prototype);
  DeferredMrtShader.prototype.constructor = DeferredMrtShader;
  DiscardClearNode.prototype = Object.create(ShaderNode.prototype);
  DiscardClearNode.prototype.constructor = DiscardClearNode;
  DeferredCameraNode.prototype = Object.create(ShaderNode.prototype);
  DeferredCameraNode.prototype.constructor = DeferredCameraNode;
  PbrLightingPass.prototype = Object.create(OffscreenRenderPass2d.prototype);
  PbrLightingPass.prototype.constructor = PbrLightingPass;
  PbrSceneShader.prototype = Object.create(ModeledShader.prototype);
  PbrSceneShader.prototype.constructor = PbrSceneShader;
  Font.prototype = Object.create(Texture.prototype);
  Font.prototype.constructor = Font;
  BrdfLutPass$BrdfLutNode.prototype = Object.create(ShaderNode.prototype);
  BrdfLutPass$BrdfLutNode.prototype.constructor = BrdfLutPass$BrdfLutNode;
  BrdfLutPass.prototype = Object.create(OffscreenRenderPass2d.prototype);
  BrdfLutPass.prototype.constructor = BrdfLutPass;
  IrradianceMapPass$ConvoluteIrradianceNode.prototype = Object.create(ShaderNode.prototype);
  IrradianceMapPass$ConvoluteIrradianceNode.prototype.constructor = IrradianceMapPass$ConvoluteIrradianceNode;
  IrradianceMapPass.prototype = Object.create(OffscreenRenderPassCube.prototype);
  IrradianceMapPass.prototype.constructor = IrradianceMapPass;
  ReflectionMapPass$ConvoluteReflectionNode.prototype = Object.create(ShaderNode.prototype);
  ReflectionMapPass$ConvoluteReflectionNode.prototype.constructor = ReflectionMapPass$ConvoluteReflectionNode;
  ReflectionMapPass.prototype = Object.create(OffscreenRenderPassCube.prototype);
  ReflectionMapPass.prototype.constructor = ReflectionMapPass;
  PrimitiveType.prototype = Object.create(Enum.prototype);
  PrimitiveType.prototype.constructor = PrimitiveType;
  Usage.prototype = Object.create(Enum.prototype);
  Usage.prototype.constructor = Usage;
  InstancedLodController.prototype = Object.create(Node.prototype);
  InstancedLodController.prototype.constructor = InstancedLodController;
  KdTree$KdNode.prototype = Object.create(SpatialTree$Node.prototype);
  KdTree$KdNode.prototype.constructor = KdTree$KdNode;
  KdTree.prototype = Object.create(SpatialTree.prototype);
  KdTree.prototype.constructor = KdTree;
  Log$Level.prototype = Object.create(Enum.prototype);
  Log$Level.prototype.constructor = Log$Level;
  ObjectPool.prototype = Object.create(ObjectRecycler.prototype);
  ObjectPool.prototype.constructor = ObjectPool;
  AutoRecycler.prototype = Object.create(ObjectRecycler.prototype);
  AutoRecycler.prototype.constructor = AutoRecycler;
  OcTree$OcNode.prototype = Object.create(SpatialTree$Node.prototype);
  OcTree$OcNode.prototype.constructor = OcTree$OcNode;
  OcTree.prototype = Object.create(SpatialTree.prototype);
  OcTree.prototype.constructor = OcTree;
  SimpleShadowMap.prototype = Object.create(DepthMapPass.prototype);
  SimpleShadowMap.prototype.constructor = SimpleShadowMap;
  BoundingSphereInRadiusTraverser.prototype = Object.create(InRadiusTraverser.prototype);
  BoundingSphereInRadiusTraverser.prototype.constructor = BoundingSphereInRadiusTraverser;
  NearestToRayTraverser.prototype = Object.create(SpatialTreeTraverser.prototype);
  NearestToRayTraverser.prototype.constructor = NearestToRayTraverser;
  NearestEdgeToRayTraverser.prototype = Object.create(NearestToRayTraverser.prototype);
  NearestEdgeToRayTraverser.prototype.constructor = NearestEdgeToRayTraverser;
  TriangleHitTraverser.prototype = Object.create(NearestToRayTraverser.prototype);
  TriangleHitTraverser.prototype.constructor = TriangleHitTraverser;
  VertexView$Vec2fView.prototype = Object.create(MutableVec2f.prototype);
  VertexView$Vec2fView.prototype.constructor = VertexView$Vec2fView;
  VertexView$Vec3fView.prototype = Object.create(MutableVec3f.prototype);
  VertexView$Vec3fView.prototype.constructor = VertexView$Vec3fView;
  VertexView$Vec4fView.prototype = Object.create(MutableVec4f.prototype);
  VertexView$Vec4fView.prototype.constructor = VertexView$Vec4fView;
  VertexView$ColorWrapView.prototype = Object.create(MutableColor.prototype);
  VertexView$ColorWrapView.prototype.constructor = VertexView$ColorWrapView;
  VertexView.prototype = Object.create(MutableVec3f.prototype);
  VertexView.prototype.constructor = VertexView;
  OffscreenPass2dImpl$OffscreenTexture.prototype = Object.create(Texture.prototype);
  OffscreenPass2dImpl$OffscreenTexture.prototype.constructor = OffscreenPass2dImpl$OffscreenTexture;
  OffscreenPass2dImpl$OffscreenDepthTexture.prototype = Object.create(Texture.prototype);
  OffscreenPass2dImpl$OffscreenDepthTexture.prototype.constructor = OffscreenPass2dImpl$OffscreenDepthTexture;
  OffscreenPassCubeImpl$OffscreenTextureCube.prototype = Object.create(CubeMapTexture.prototype);
  OffscreenPassCubeImpl$OffscreenTextureCube.prototype.constructor = OffscreenPassCubeImpl$OffscreenTextureCube;
  ImageTextureData.prototype = Object.create(TextureData.prototype);
  ImageTextureData.prototype.constructor = ImageTextureData;
  JsAssetManager.prototype = Object.create(AssetManager.prototype);
  JsAssetManager.prototype.constructor = JsAssetManager;
  JsContext.prototype = Object.create(KoolContext.prototype);
  JsContext.prototype.constructor = JsContext;
  MappedUniformTex2d.prototype = Object.create(MappedUniformTex.prototype);
  MappedUniformTex2d.prototype.constructor = MappedUniformTex2d;
  MappedUniformCubeMap.prototype = Object.create(MappedUniformTex.prototype);
  MappedUniformCubeMap.prototype.constructor = MappedUniformCubeMap;
  ShaderGeneratorImplWebGl.prototype = Object.create(ShaderGenerator.prototype);
  ShaderGeneratorImplWebGl.prototype.constructor = ShaderGeneratorImplWebGl;
  Uint8BufferImpl.prototype = Object.create(GenericBuffer.prototype);
  Uint8BufferImpl.prototype.constructor = Uint8BufferImpl;
  Uint16BufferImpl.prototype = Object.create(GenericBuffer.prototype);
  Uint16BufferImpl.prototype.constructor = Uint16BufferImpl;
  Uint32BufferImpl.prototype = Object.create(GenericBuffer.prototype);
  Uint32BufferImpl.prototype.constructor = Uint32BufferImpl;
  Float32BufferImpl.prototype = Object.create(GenericBuffer.prototype);
  Float32BufferImpl.prototype.constructor = Float32BufferImpl;
  MixedBufferImpl.prototype = Object.create(GenericBuffer.prototype);
  MixedBufferImpl.prototype.constructor = MixedBufferImpl;
  function select$lambda(closure$builder) {
    return function (uCont) {
      var scope = new SelectBuilderImpl_init(uCont);
      try {
        closure$builder(scope);
      } catch (e) {
        if (Kotlin.isType(e, Throwable)) {
          scope.handleBuilderException_tcv7n7$(e);
        } else
          throw e;
      }
      return scope.getResult();
    };
  }
  function AssetManager(assetsBaseDir) {
    AssetManager$Companion_getInstance();
    this.assetsBaseDir = assetsBaseDir;
    this.job = Job();
    this.awaitedAssetsChannel_nphlkp$_0 = Channel();
    this.assetRefChannel_acu3lu$_0 = Channel(2147483647);
    this.loadedAssetChannel_obd8me$_0 = Channel();
    var list = ArrayList_init(8);
    for (var index = 0; index < 8; index++) {
      list.add_11rb$(this.loadWorker_lf86lv$_0(this.assetRefChannel_acu3lu$_0, this.loadedAssetChannel_obd8me$_0));
    }
    this.workers_dv6i5$_0 = list;
    this.loader_lxnfnl$_0 = launch(this, void 0, void 0, AssetManager$loader$lambda(this));
  }
  Object.defineProperty(AssetManager.prototype, 'coroutineContext', {
    get: function () {
      return this.job;
    }
  });
  function Coroutine$AssetManager$loadWorker$lambda(closure$assetRefs_0, closure$loadedAssets_0, this$AssetManager_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$assetRefs = closure$assetRefs_0;
    this.local$closure$loadedAssets = closure$loadedAssets_0;
    this.local$this$AssetManager = this$AssetManager_0;
    this.local$tmp$ = void 0;
  }
  Coroutine$AssetManager$loadWorker$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AssetManager$loadWorker$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AssetManager$loadWorker$lambda.prototype.constructor = Coroutine$AssetManager$loadWorker$lambda;
  Coroutine$AssetManager$loadWorker$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.local$tmp$ = this.local$closure$assetRefs.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$tmp$.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            if (!this.result_0) {
              this.state_0 = 7;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            var ref = this.local$tmp$.next();
            this.state_0 = 5;
            this.result_0 = this.local$this$AssetManager.loadAsset_lpb790$_0(ref, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            tmp$ = this.result_0;
            this.state_0 = 6;
            this.result_0 = this.local$closure$loadedAssets.send_11rb$(tmp$, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 6:
            this.state_0 = 2;
            continue;
          case 7:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AssetManager$loadWorker$lambda(closure$assetRefs_0, closure$loadedAssets_0, this$AssetManager_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$AssetManager$loadWorker$lambda(closure$assetRefs_0, closure$loadedAssets_0, this$AssetManager_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AssetManager.prototype.loadWorker_lf86lv$_0 = function (assetRefs, loadedAssets) {
    return launch(this, void 0, void 0, AssetManager$loadWorker$lambda(assetRefs, loadedAssets, this));
  };
  AssetManager.prototype.close = function () {
    this.job.cancel_m4sck1$();
  };
  function Coroutine$loadAsset_lpb790$_0($this, ref_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$ref = ref_0;
  }
  Coroutine$loadAsset_lpb790$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$loadAsset_lpb790$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$loadAsset_lpb790$_0.prototype.constructor = Coroutine$loadAsset_lpb790$_0;
  Coroutine$loadAsset_lpb790$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (Kotlin.isType(this.local$ref, LocalRawAssetRef)) {
              this.state_0 = 8;
              this.result_0 = this.$this.loadLocalRaw_hl6yzt$(this.local$ref, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              if (Kotlin.isType(this.local$ref, HttpRawAssetRef)) {
                this.state_0 = 6;
                this.result_0 = this.$this.loadHttpRaw_ohmb7q$(this.local$ref, this);
                if (this.result_0 === COROUTINE_SUSPENDED)
                  return COROUTINE_SUSPENDED;
                continue;
              } else {
                if (Kotlin.isType(this.local$ref, LocalTextureAssetRef)) {
                  this.state_0 = 4;
                  this.result_0 = this.$this.loadLocalTexture_68kns4$(this.local$ref, this);
                  if (this.result_0 === COROUTINE_SUSPENDED)
                    return COROUTINE_SUSPENDED;
                  continue;
                } else {
                  if (Kotlin.isType(this.local$ref, HttpTextureAssetRef)) {
                    this.state_0 = 2;
                    this.result_0 = this.$this.loadHttpTexture_nbaz3h$(this.local$ref, this);
                    if (this.result_0 === COROUTINE_SUSPENDED)
                      return COROUTINE_SUSPENDED;
                    continue;
                  } else {
                    this.local$tmp$ = Kotlin.noWhenBranchMatched();
                    this.state_0 = 3;
                    continue;
                  }
                }
              }
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = this.result_0;
            this.state_0 = 3;
            continue;
          case 3:
            this.state_0 = 5;
            continue;
          case 4:
            this.local$tmp$ = this.result_0;
            this.state_0 = 5;
            continue;
          case 5:
            this.state_0 = 7;
            continue;
          case 6:
            this.local$tmp$ = this.result_0;
            this.state_0 = 7;
            continue;
          case 7:
            this.state_0 = 9;
            continue;
          case 8:
            this.local$tmp$ = this.result_0;
            this.state_0 = 9;
            continue;
          case 9:
            return this.local$tmp$;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AssetManager.prototype.loadAsset_lpb790$_0 = function (ref_0, continuation_0, suspended) {
    var instance = new Coroutine$loadAsset_lpb790$_0(this, ref_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  AssetManager.prototype.isHttpAsset_61zpoe$ = function (assetPath) {
    return startsWith(assetPath, 'http://', true) || startsWith(assetPath, 'https://', true);
  };
  function Coroutine$AssetManager$loadAsset$lambda(closure$assetPath_0, this$AssetManager_0, closure$onLoad_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$assetPath = closure$assetPath_0;
    this.local$this$AssetManager = this$AssetManager_0;
    this.local$closure$onLoad = closure$onLoad_0;
    this.local$awaitedAsset = void 0;
  }
  Coroutine$AssetManager$loadAsset$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AssetManager$loadAsset$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AssetManager$loadAsset$lambda.prototype.constructor = Coroutine$AssetManager$loadAsset$lambda;
  Coroutine$AssetManager$loadAsset$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0;
            if (this.local$this$AssetManager.isHttpAsset_61zpoe$(this.local$closure$assetPath)) {
              tmp$ = new HttpRawAssetRef(this.local$closure$assetPath);
            } else {
              tmp$ = new LocalRawAssetRef(this.local$this$AssetManager.assetsBaseDir + '/' + this.local$closure$assetPath);
            }

            var ref = tmp$;
            this.local$awaitedAsset = new AssetManager$AwaitedAsset(this.local$this$AssetManager, ref);
            this.state_0 = 2;
            this.result_0 = this.local$this$AssetManager.awaitedAssetsChannel_nphlkp$_0.send_11rb$(this.local$awaitedAsset, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$awaitedAsset.awaiting.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            var loaded = Kotlin.isType(tmp$_0 = this.result_0, LoadedRawAsset) ? tmp$_0 : throwCCE();
            return this.local$closure$onLoad(loaded.data);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AssetManager$loadAsset$lambda(closure$assetPath_0, this$AssetManager_0, closure$onLoad_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$AssetManager$loadAsset$lambda(closure$assetPath_0, this$AssetManager_0, closure$onLoad_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AssetManager.prototype.loadAsset_us385g$ = function (assetPath, onLoad) {
    launch(this, void 0, void 0, AssetManager$loadAsset$lambda(assetPath, this, onLoad));
  };
  function AssetManager$loadModel$lambda(closure$modelPath, this$AssetManager, closure$onLoad) {
    return function (loadedData) {
      var tmp$;
      if (loadedData == null) {
        var $receiver = this$AssetManager;
        var $this = package$util.Log;
        var level = Log$Level.ERROR;
        var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
        if (level.level >= $this.level.level) {
          $this.printer(level, tag, 'Failed loading model ' + closure$modelPath);
        }tmp$ = null;
      } else {
        var data = endsWith(closure$modelPath, '.kmfz', true) ? this$AssetManager.inflate_fqrh44$(loadedData) : loadedData;
        tmp$ = ModelData$Companion_getInstance().load_fqrh44$(data);
      }
      var model = tmp$;
      closure$onLoad(model);
      return Unit;
    };
  }
  AssetManager.prototype.loadModel_v5uqdg$ = function (modelPath, onLoad) {
    this.loadAsset_us385g$(modelPath, AssetManager$loadModel$lambda(modelPath, this, onLoad));
  };
  function Coroutine$loadTextureData_61zpoe$($this, assetPath_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$awaitedAsset = void 0;
    this.local$assetPath = assetPath_0;
  }
  Coroutine$loadTextureData_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$loadTextureData_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$loadTextureData_61zpoe$.prototype.constructor = Coroutine$loadTextureData_61zpoe$;
  Coroutine$loadTextureData_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0, tmp$_1;
            if (this.$this.isHttpAsset_61zpoe$(this.local$assetPath)) {
              tmp$ = new HttpTextureAssetRef(this.local$assetPath);
            } else {
              tmp$ = new LocalTextureAssetRef(this.$this.assetsBaseDir + '/' + this.local$assetPath);
            }

            var ref = tmp$;
            this.local$awaitedAsset = new AssetManager$AwaitedAsset(this.$this, ref);
            this.state_0 = 2;
            this.result_0 = this.$this.awaitedAssetsChannel_nphlkp$_0.send_11rb$(this.local$awaitedAsset, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$awaitedAsset.awaiting.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            var loaded = Kotlin.isType(tmp$_0 = this.result_0, LoadedTextureAsset) ? tmp$_0 : throwCCE();
            tmp$_1 = loaded.data;
            if (tmp$_1 == null) {
              throw KoolException_init('Failed loading texture');
            }
            return tmp$_1;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AssetManager.prototype.loadTextureData_61zpoe$ = function (assetPath_0, continuation_0, suspended) {
    var instance = new Coroutine$loadTextureData_61zpoe$(this, assetPath_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$loadCubeMapTextureData_r3y0ew$($this, ft_0, bk_0, lt_0, rt_0, up_0, dn_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$ftd = void 0;
    this.local$bkd = void 0;
    this.local$ltd = void 0;
    this.local$rtd = void 0;
    this.local$upd = void 0;
    this.local$ft = ft_0;
    this.local$bk = bk_0;
    this.local$lt = lt_0;
    this.local$rt = rt_0;
    this.local$up = up_0;
    this.local$dn = dn_0;
  }
  Coroutine$loadCubeMapTextureData_r3y0ew$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$loadCubeMapTextureData_r3y0ew$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$loadCubeMapTextureData_r3y0ew$.prototype.constructor = Coroutine$loadCubeMapTextureData_r3y0ew$;
  Coroutine$loadCubeMapTextureData_r3y0ew$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.loadTextureData_61zpoe$(this.local$ft, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$ftd = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.$this.loadTextureData_61zpoe$(this.local$bk, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$bkd = this.result_0;
            this.state_0 = 4;
            this.result_0 = this.$this.loadTextureData_61zpoe$(this.local$lt, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.local$ltd = this.result_0;
            this.state_0 = 5;
            this.result_0 = this.$this.loadTextureData_61zpoe$(this.local$rt, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            this.local$rtd = this.result_0;
            this.state_0 = 6;
            this.result_0 = this.$this.loadTextureData_61zpoe$(this.local$up, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 6:
            this.local$upd = this.result_0;
            this.state_0 = 7;
            this.result_0 = this.$this.loadTextureData_61zpoe$(this.local$dn, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 7:
            var dnd = this.result_0;
            return new CubeMapTextureData(this.local$ftd, this.local$bkd, this.local$ltd, this.local$rtd, this.local$upd, dnd);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AssetManager.prototype.loadCubeMapTextureData_r3y0ew$ = function (ft_0, bk_0, lt_0, rt_0, up_0, dn_0, continuation_0, suspended) {
    var instance = new Coroutine$loadCubeMapTextureData_r3y0ew$(this, ft_0, bk_0, lt_0, rt_0, up_0, dn_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  AssetManager.prototype.loadAndPrepareTexture_hd4f6p$ = function (assetPath, props, recv, callback$default) {
    if (props === void 0)
      props = new TextureProps();
    callback$default ? callback$default(assetPath, props, recv) : this.loadAndPrepareTexture_hd4f6p$$default(assetPath, props, recv);
  };
  AssetManager.prototype.loadAndPrepareCubeMap_y2tg0w$ = function (ft, bk, lt, rt, up, dn, props, recv, callback$default) {
    if (props === void 0)
      props = new TextureProps();
    callback$default ? callback$default(ft, bk, lt, rt, up, dn, props, recv) : this.loadAndPrepareCubeMap_y2tg0w$$default(ft, bk, lt, rt, up, dn, props, recv);
  };
  function AssetManager$AwaitedAsset($outer, ref, awaiting) {
    this.$outer = $outer;
    if (awaiting === void 0)
      awaiting = CompletableDeferred(this.$outer.job);
    this.ref = ref;
    this.awaiting = awaiting;
  }
  AssetManager$AwaitedAsset.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AwaitedAsset',
    interfaces: []
  };
  function AssetManager$Companion() {
    AssetManager$Companion_instance = this;
    this.NUM_LOAD_WORKERS = 8;
  }
  AssetManager$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AssetManager$Companion_instance = null;
  function AssetManager$Companion_getInstance() {
    if (AssetManager$Companion_instance === null) {
      new AssetManager$Companion();
    }return AssetManager$Companion_instance;
  }
  function Coroutine$AssetManager$loader$lambda$lambda$lambda(closure$requested_0, this$AssetManager_0, awaited_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$requested = closure$requested_0;
    this.local$this$AssetManager = this$AssetManager_0;
    this.local$awaited = awaited_0;
  }
  Coroutine$AssetManager$loader$lambda$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AssetManager$loader$lambda$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AssetManager$loader$lambda$lambda$lambda.prototype.constructor = Coroutine$AssetManager$loader$lambda$lambda$lambda;
  Coroutine$AssetManager$loader$lambda$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var awaiting = this.local$closure$requested.get_11rb$(this.local$awaited.ref);
            if (awaiting == null) {
              var $receiver = this.local$closure$requested;
              var key = this.local$awaited.ref;
              var value = mutableListOf([this.local$awaited]);
              $receiver.put_xwzc9p$(key, value);
              this.state_0 = 2;
              this.result_0 = this.local$this$AssetManager.assetRefChannel_acu3lu$_0.send_11rb$(this.local$awaited.ref, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              return awaiting.add_11rb$(this.local$awaited);
            }

          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AssetManager$loader$lambda$lambda$lambda(closure$requested_0, this$AssetManager_0) {
    return function (awaited_0, continuation_0, suspended) {
      var instance = new Coroutine$AssetManager$loader$lambda$lambda$lambda(closure$requested_0, this$AssetManager_0, awaited_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AssetManager$loader$lambda$lambda$lambda_0(closure$requested_0, loaded_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$requested = closure$requested_0;
    this.local$loaded = loaded_0;
  }
  Coroutine$AssetManager$loader$lambda$lambda$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AssetManager$loader$lambda$lambda$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AssetManager$loader$lambda$lambda$lambda_0.prototype.constructor = Coroutine$AssetManager$loader$lambda$lambda$lambda_0;
  Coroutine$AssetManager$loader$lambda$lambda$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            var awaiting = ensureNotNull(this.local$closure$requested.remove_11rb$(this.local$loaded.ref));
            tmp$ = awaiting.iterator();
            while (tmp$.hasNext()) {
              var awaited = tmp$.next();
              awaited.awaiting.complete_11rb$(this.local$loaded);
            }

            return Unit;
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AssetManager$loader$lambda$lambda$lambda_0(closure$requested_0) {
    return function (loaded_0, continuation_0, suspended) {
      var instance = new Coroutine$AssetManager$loader$lambda$lambda$lambda_0(closure$requested_0, loaded_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function AssetManager$loader$lambda$lambda(this$AssetManager, closure$requested) {
    return function ($receiver) {
      $receiver.invoke_veq140$(this$AssetManager.awaitedAssetsChannel_nphlkp$_0.onReceive, AssetManager$loader$lambda$lambda$lambda(closure$requested, this$AssetManager));
      $receiver.invoke_veq140$(this$AssetManager.loadedAssetChannel_obd8me$_0.onReceive, AssetManager$loader$lambda$lambda$lambda_0(closure$requested));
      return Unit;
    };
  }
  function Coroutine$AssetManager$loader$lambda(this$AssetManager_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$AssetManager = this$AssetManager_0;
    this.local$requested = void 0;
  }
  Coroutine$AssetManager$loader$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AssetManager$loader$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AssetManager$loader$lambda.prototype.constructor = Coroutine$AssetManager$loader$lambda;
  Coroutine$AssetManager$loader$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$requested = LinkedHashMap_init();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = select$lambda(AssetManager$loader$lambda$lambda(this.local$this$AssetManager, this.local$requested))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.result_0;
            this.state_0 = 2;
            continue;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AssetManager$loader$lambda(this$AssetManager_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$AssetManager$loader$lambda(this$AssetManager_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AssetManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AssetManager',
    interfaces: [CoroutineScope]
  };
  function AssetRef() {
  }
  AssetRef.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AssetRef',
    interfaces: []
  };
  function LocalRawAssetRef(url) {
    AssetRef.call(this);
    this.url = url;
  }
  LocalRawAssetRef.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LocalRawAssetRef',
    interfaces: [AssetRef]
  };
  LocalRawAssetRef.prototype.component1 = function () {
    return this.url;
  };
  LocalRawAssetRef.prototype.copy_61zpoe$ = function (url) {
    return new LocalRawAssetRef(url === void 0 ? this.url : url);
  };
  LocalRawAssetRef.prototype.toString = function () {
    return 'LocalRawAssetRef(url=' + Kotlin.toString(this.url) + ')';
  };
  LocalRawAssetRef.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.url) | 0;
    return result;
  };
  LocalRawAssetRef.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.url, other.url))));
  };
  function HttpRawAssetRef(url) {
    AssetRef.call(this);
    this.url = url;
  }
  HttpRawAssetRef.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HttpRawAssetRef',
    interfaces: [AssetRef]
  };
  HttpRawAssetRef.prototype.component1 = function () {
    return this.url;
  };
  HttpRawAssetRef.prototype.copy_61zpoe$ = function (url) {
    return new HttpRawAssetRef(url === void 0 ? this.url : url);
  };
  HttpRawAssetRef.prototype.toString = function () {
    return 'HttpRawAssetRef(url=' + Kotlin.toString(this.url) + ')';
  };
  HttpRawAssetRef.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.url) | 0;
    return result;
  };
  HttpRawAssetRef.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.url, other.url))));
  };
  function LocalTextureAssetRef(url) {
    AssetRef.call(this);
    this.url = url;
  }
  LocalTextureAssetRef.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LocalTextureAssetRef',
    interfaces: [AssetRef]
  };
  LocalTextureAssetRef.prototype.component1 = function () {
    return this.url;
  };
  LocalTextureAssetRef.prototype.copy_61zpoe$ = function (url) {
    return new LocalTextureAssetRef(url === void 0 ? this.url : url);
  };
  LocalTextureAssetRef.prototype.toString = function () {
    return 'LocalTextureAssetRef(url=' + Kotlin.toString(this.url) + ')';
  };
  LocalTextureAssetRef.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.url) | 0;
    return result;
  };
  LocalTextureAssetRef.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.url, other.url))));
  };
  function HttpTextureAssetRef(url) {
    AssetRef.call(this);
    this.url = url;
  }
  HttpTextureAssetRef.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HttpTextureAssetRef',
    interfaces: [AssetRef]
  };
  HttpTextureAssetRef.prototype.component1 = function () {
    return this.url;
  };
  HttpTextureAssetRef.prototype.copy_61zpoe$ = function (url) {
    return new HttpTextureAssetRef(url === void 0 ? this.url : url);
  };
  HttpTextureAssetRef.prototype.toString = function () {
    return 'HttpTextureAssetRef(url=' + Kotlin.toString(this.url) + ')';
  };
  HttpTextureAssetRef.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.url) | 0;
    return result;
  };
  HttpTextureAssetRef.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.url, other.url))));
  };
  function LoadedAsset(ref, successfull) {
    this.ref = ref;
    this.successfull = successfull;
  }
  LoadedAsset.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LoadedAsset',
    interfaces: []
  };
  function LoadedRawAsset(ref, data) {
    LoadedAsset.call(this, ref, data != null);
    this.data = data;
  }
  LoadedRawAsset.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LoadedRawAsset',
    interfaces: [LoadedAsset]
  };
  function LoadedTextureAsset(ref, data) {
    LoadedAsset.call(this, ref, data != null);
    this.data = data;
  }
  LoadedTextureAsset.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LoadedTextureAsset',
    interfaces: [LoadedAsset]
  };
  function DrawCommand(renderPass) {
    this.renderPass = renderPass;
    this.mesh_61i9uk$_0 = this.mesh_61i9uk$_0;
    this.pipeline = null;
    this.modelMat = new Mat4f();
    this.viewMat = new Mat4f();
    this.projMat = new Mat4f();
    this.mvpMat = new Mat4f();
    this.mvpMatD_0 = new Mat4d();
  }
  Object.defineProperty(DrawCommand.prototype, 'mesh', {
    get: function () {
      if (this.mesh_61i9uk$_0 == null)
        return throwUPAE('mesh');
      return this.mesh_61i9uk$_0;
    },
    set: function (mesh) {
      this.mesh_61i9uk$_0 = mesh;
    }
  });
  DrawCommand.prototype.captureMatrices = function () {
    this.modelMat.set_d4zu6l$(this.mesh.modelMat);
    this.viewMat.set_d4zu6l$(this.renderPass.camera.view);
    this.projMat.set_d4zu6l$(this.renderPass.camera.proj);
    this.renderPass.camera.viewProj.mul_u47j3u$(this.mesh.modelMat, this.mvpMatD_0);
    this.mvpMat.set_d4zu6l$(this.mvpMatD_0);
  };
  DrawCommand.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DrawCommand',
    interfaces: []
  };
  function DrawQueue(renderPass) {
    this.renderPass = renderPass;
    this.mutCommands_0 = ArrayList_init_0();
    this.commandPool_0 = ArrayList_init_0();
    this.meshFilter = DrawQueue$meshFilter$lambda;
  }
  Object.defineProperty(DrawQueue.prototype, 'commands', {
    get: function () {
      return this.mutCommands_0;
    }
  });
  DrawQueue.prototype.clear = function () {
    this.commandPool_0.addAll_brywnq$(this.mutCommands_0);
    this.mutCommands_0.clear();
  };
  DrawQueue.prototype.addMesh_sbx4mf$ = function (mesh, ctx) {
    var tmp$, tmp$_0;
    if (!this.meshFilter(mesh)) {
      tmp$_0 = null;
    } else {
      if (!this.commandPool_0.isEmpty()) {
        tmp$ = this.commandPool_0.removeAt_za3lpa$(get_lastIndex(this.commandPool_0));
      } else {
        tmp$ = new DrawCommand(this.renderPass);
      }
      var cmd = tmp$;
      cmd.mesh = mesh;
      cmd.pipeline = mesh.getPipeline_aemszp$(ctx);
      cmd.captureMatrices();
      this.mutCommands_0.add_11rb$(cmd);
      tmp$_0 = cmd;
    }
    return tmp$_0;
  };
  function DrawQueue$meshFilter$lambda(it) {
    return true;
  }
  DrawQueue.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DrawQueue',
    interfaces: []
  };
  function SceneSetup() {
    SceneSetup$Companion_getInstance();
    this.clearColor = new MutableColor(0.05, 0.15, 0.25, 1.0);
    this.clearMask = 3;
  }
  function SceneSetup$Companion() {
    SceneSetup$Companion_instance = this;
    this.CLEAR_COLOR = 1;
    this.CLEAR_DEPTH = 2;
  }
  SceneSetup$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SceneSetup$Companion_instance = null;
  function SceneSetup$Companion_getInstance() {
    if (SceneSetup$Companion_instance === null) {
      new SceneSetup$Companion();
    }return SceneSetup$Companion_instance;
  }
  SceneSetup.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SceneSetup',
    interfaces: []
  };
  function EngineStats() {
    this.bufferAllocations = LinkedHashMap_init();
    this.totalBufferSize_mh5cfj$_0 = L0;
    this.textureAllocations = LinkedHashMap_init();
    this.totalTextureSize_4hd4e0$_0 = L0;
    this.pipelines = LinkedHashMap_init();
    this.numPipelineInstances_ikf7d6$_0 = 0;
    this.numDrawCommands_4id88y$_0 = 0;
    this.numPrimitives_jhh8ci$_0 = 0;
  }
  Object.defineProperty(EngineStats.prototype, 'totalBufferSize', {
    get: function () {
      return this.totalBufferSize_mh5cfj$_0;
    },
    set: function (totalBufferSize) {
      this.totalBufferSize_mh5cfj$_0 = totalBufferSize;
    }
  });
  Object.defineProperty(EngineStats.prototype, 'totalTextureSize', {
    get: function () {
      return this.totalTextureSize_4hd4e0$_0;
    },
    set: function (totalTextureSize) {
      this.totalTextureSize_4hd4e0$_0 = totalTextureSize;
    }
  });
  Object.defineProperty(EngineStats.prototype, 'numPipelineInstances', {
    get: function () {
      return this.numPipelineInstances_ikf7d6$_0;
    },
    set: function (numPipelineInstances) {
      this.numPipelineInstances_ikf7d6$_0 = numPipelineInstances;
    }
  });
  Object.defineProperty(EngineStats.prototype, 'numDrawCommands', {
    get: function () {
      return this.numDrawCommands_4id88y$_0;
    },
    set: function (numDrawCommands) {
      this.numDrawCommands_4id88y$_0 = numDrawCommands;
    }
  });
  Object.defineProperty(EngineStats.prototype, 'numPrimitives', {
    get: function () {
      return this.numPrimitives_jhh8ci$_0;
    },
    set: function (numPrimitives) {
      this.numPrimitives_jhh8ci$_0 = numPrimitives;
    }
  });
  EngineStats.prototype.bufferAllocated_yhmem3$ = function (bufferId, size) {
    var tmp$;
    if ((tmp$ = this.bufferAllocations.put_xwzc9p$(bufferId, size)) != null) {
      this.totalBufferSize = this.totalBufferSize.subtract(Kotlin.Long.fromInt(tmp$));
    }this.totalBufferSize = this.totalBufferSize.add(Kotlin.Long.fromInt(size));
  };
  EngineStats.prototype.bufferDeleted_s8cxhz$ = function (bufferId) {
    var tmp$;
    if ((tmp$ = this.bufferAllocations.remove_11rb$(bufferId)) != null) {
      this.totalBufferSize = this.totalBufferSize.subtract(Kotlin.Long.fromInt(tmp$));
    }};
  EngineStats.prototype.textureAllocated_yhmem3$ = function (textureId, size) {
    var tmp$;
    if ((tmp$ = this.textureAllocations.put_xwzc9p$(textureId, size)) != null) {
      this.totalTextureSize = this.totalTextureSize.subtract(Kotlin.Long.fromInt(tmp$));
    }this.totalTextureSize = this.totalTextureSize.add(Kotlin.Long.fromInt(size));
  };
  EngineStats.prototype.textureDeleted_s8cxhz$ = function (textureId) {
    var tmp$;
    if ((tmp$ = this.textureAllocations.remove_11rb$(textureId)) != null) {
      this.totalTextureSize = this.totalTextureSize.subtract(Kotlin.Long.fromInt(tmp$));
    }};
  EngineStats.prototype.pipelineInstanceCreated_s8cxhz$ = function (pipelineId) {
    var tmp$;
    var insts = ((tmp$ = this.pipelines.get_11rb$(pipelineId)) != null ? tmp$ : 0) + 1 | 0;
    this.pipelines.put_xwzc9p$(pipelineId, insts);
    this.numPipelineInstances = this.numPipelineInstances + 1 | 0;
  };
  EngineStats.prototype.pipelineInstanceDestroyed_s8cxhz$ = function (pipelineId) {
    var tmp$;
    var insts = ((tmp$ = this.pipelines.get_11rb$(pipelineId)) != null ? tmp$ : 0) - 1 | 0;
    if (insts >= 0) {
      this.pipelines.put_xwzc9p$(pipelineId, insts);
      this.numPipelineInstances = this.numPipelineInstances - 1 | 0;
    }};
  EngineStats.prototype.pipelineDestroyed_s8cxhz$ = function (pipelineId) {
    var tmp$;
    if ((tmp$ = this.pipelines.remove_11rb$(pipelineId)) != null) {
      this.numPipelineInstances = this.numPipelineInstances - tmp$ | 0;
    }};
  EngineStats.prototype.resetPerFrameCounts = function () {
    this.numDrawCommands = 0;
    this.numPrimitives = 0;
  };
  EngineStats.prototype.addDrawCommandCount_za3lpa$ = function (nCommands) {
    this.numDrawCommands = this.numDrawCommands + nCommands | 0;
  };
  EngineStats.prototype.addPrimitiveCount_za3lpa$ = function (nPrimitives) {
    this.numPrimitives = this.numPrimitives + nPrimitives | 0;
  };
  EngineStats.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EngineStats',
    interfaces: []
  };
  function InputManager() {
    InputManager$Companion_getInstance();
    this.queuedKeyEvents_0 = ArrayList_init_0();
    this.keyEvents = ArrayList_init_0();
    this.keyHandlers_0 = LinkedHashMap_init();
    this.pointerState = new InputManager$PointerState();
  }
  function InputManager$registerKeyListener$lambda(it) {
    return it.isCharTyped;
  }
  InputManager.prototype.registerKeyListener_i13a8v$ = function (char, name, filter, callback) {
    if (filter === void 0)
      filter = InputManager$registerKeyListener$lambda;
    return this.registerKeyListener_aviy8w$(char | 0, name, filter, callback);
  };
  function InputManager$registerKeyListener$lambda_0(it) {
    return true;
  }
  InputManager.prototype.registerKeyListener_aviy8w$ = function (keyCode, name, filter, callback) {
    if (filter === void 0)
      filter = InputManager$registerKeyListener$lambda_0;
    var keyStr = 32 <= keyCode && keyCode <= 126 ? "'" + String.fromCharCode(toChar(keyCode)) + "'" : keyCode.toString();
    var $receiver = this.keyHandlers_0;
    var tmp$;
    var value = $receiver.get_11rb$(keyCode);
    if (value == null) {
      var answer = ArrayList_init_0();
      $receiver.put_xwzc9p$(keyCode, answer);
      tmp$ = answer;
    } else {
      tmp$ = value;
    }
    var listeners = tmp$;
    if (!listeners.isEmpty()) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        var tmp$_0 = $this.printer;
        var tmp$_1 = 'Multiple bindings for key ' + keyStr + ': ';
        var destination = ArrayList_init(collectionSizeOrDefault(listeners, 10));
        var tmp$_2;
        tmp$_2 = listeners.iterator();
        while (tmp$_2.hasNext()) {
          var item = tmp$_2.next();
          destination.add_11rb$(item.name);
        }
        tmp$_0.call($this, level, tag, tmp$_1 + destination);
      }}var handler = new InputManager$KeyEventListener(keyCode, name, filter, callback);
    listeners.add_11rb$(handler);
    var $this_0 = package$util.Log;
    var level_0 = Log$Level.DEBUG;
    var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
    if (level_0.level >= $this_0.level.level) {
      $this_0.printer(level_0, tag_0, 'Registered key handler: ' + '"' + name + '"' + ' [keyCode=' + keyStr + ']');
    }return handler;
  };
  InputManager.prototype.removeKeyListener_abhb69$ = function (listener) {
    var tmp$;
    tmp$ = this.keyHandlers_0.get_11rb$(listener.keyCode);
    if (tmp$ == null) {
      return;
    }var listeners = tmp$;
    listeners.remove_11rb$(listener);
  };
  InputManager.prototype.onNewFrame_cwprtu$ = function (ctx) {
    var tmp$;
    this.pointerState.onNewFrame_cwprtu$(ctx);
    this.keyEvents.clear();
    this.keyEvents.addAll_brywnq$(this.queuedKeyEvents_0);
    this.queuedKeyEvents_0.clear();
    tmp$ = this.keyEvents;
    for (var i = 0; i !== tmp$.size; ++i) {
      var evt = this.keyEvents.get_za3lpa$(i);
      var listeners = this.keyHandlers_0.get_11rb$(evt.keyCode);
      if (listeners != null) {
        for (var j = 0; j !== listeners.size; ++j) {
          if (listeners.get_za3lpa$(j).filter(evt)) {
            listeners.get_za3lpa$(j).invoke_9cgpoj$(evt);
          }}
      }}
  };
  InputManager.prototype.keyEvent_qt1dr2$ = function (keyCode, modifiers, event) {
    var ev = new InputManager$KeyEvent();
    ev.keyCode = keyCode;
    ev.event = event;
    ev.modifiers = modifiers;
    this.queuedKeyEvents_0.add_11rb$(ev);
  };
  InputManager.prototype.charTyped_s8itvh$ = function (typedChar) {
    var ev = new InputManager$KeyEvent();
    ev.event = 8;
    ev.typedChar = toBoxedChar(typedChar);
    ev.keyCode = typedChar | 0;
    this.queuedKeyEvents_0.add_11rb$(ev);
  };
  InputManager.prototype.handleTouchStart_nhq4am$ = function (pointerId, x, y) {
    this.pointerState.handleTouchStart_qlj5un$(pointerId, x, y);
  };
  InputManager.prototype.handleTouchEnd_za3lpa$ = function (pointerId) {
    this.pointerState.handleTouchEnd_kcn2v3$(pointerId);
  };
  InputManager.prototype.handleTouchCancel_za3lpa$ = function (pointerId) {
    this.pointerState.handleTouchCancel_kcn2v3$(pointerId);
  };
  InputManager.prototype.handleTouchMove_nhq4am$ = function (pointerId, x, y) {
    this.pointerState.handleTouchMove_qlj5un$(pointerId, x, y);
  };
  InputManager.prototype.handleMouseMove_dleff0$ = function (x, y) {
    this.pointerState.handleMouseMove_dob1fz$(x, y);
  };
  InputManager.prototype.handleMouseButtonState_fzusl$ = function (button, down) {
    this.pointerState.handleMouseButtonState_iwgtk$(button, down);
  };
  InputManager.prototype.handleMouseButtonStates_za3lpa$ = function (mask) {
    this.pointerState.handleMouseButtonStates_kcn2v3$(mask);
  };
  InputManager.prototype.handleMouseScroll_mx4ult$ = function (ticks) {
    this.pointerState.handleMouseScroll_nwfnho$(ticks);
  };
  InputManager.prototype.handleMouseExit = function () {
    this.pointerState.handleMouseExit_8be2vx$();
  };
  function InputManager$Pointer() {
    this.id_yfac1g$_0 = 0;
    this.x_5rhhjp$_0 = 0.0;
    this.y_5rhhkk$_0 = 0.0;
    this.deltaX_8nh2op$_0 = 0.0;
    this.deltaY_8nh2nu$_0 = 0.0;
    this.dragDeltaX_yg2vql$_0 = 0.0;
    this.dragDeltaY_yg2vpq$_0 = 0.0;
    this.deltaScroll_trurwo$_0 = 0.0;
    this.buttonMask_uq1vpl$_0 = 0;
    this.buttonEventMask_dc8ngn$_0 = 0;
    this.isValid_cde91$_0 = false;
    this.consumptionMask_8be2vx$ = 0;
  }
  Object.defineProperty(InputManager$Pointer.prototype, 'id', {
    get: function () {
      return this.id_yfac1g$_0;
    },
    set: function (id) {
      this.id_yfac1g$_0 = id;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'x', {
    get: function () {
      return this.x_5rhhjp$_0;
    },
    set: function (x) {
      this.x_5rhhjp$_0 = x;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'y', {
    get: function () {
      return this.y_5rhhkk$_0;
    },
    set: function (y) {
      this.y_5rhhkk$_0 = y;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'deltaX', {
    get: function () {
      return this.deltaX_8nh2op$_0;
    },
    set: function (deltaX) {
      this.deltaX_8nh2op$_0 = deltaX;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'deltaY', {
    get: function () {
      return this.deltaY_8nh2nu$_0;
    },
    set: function (deltaY) {
      this.deltaY_8nh2nu$_0 = deltaY;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'dragDeltaX', {
    get: function () {
      return this.dragDeltaX_yg2vql$_0;
    },
    set: function (dragDeltaX) {
      this.dragDeltaX_yg2vql$_0 = dragDeltaX;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'dragDeltaY', {
    get: function () {
      return this.dragDeltaY_yg2vpq$_0;
    },
    set: function (dragDeltaY) {
      this.dragDeltaY_yg2vpq$_0 = dragDeltaY;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'deltaScroll', {
    get: function () {
      return this.deltaScroll_trurwo$_0;
    },
    set: function (deltaScroll) {
      this.deltaScroll_trurwo$_0 = deltaScroll;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'buttonMask', {
    get: function () {
      return this.buttonMask_uq1vpl$_0;
    },
    set: function (value) {
      this.buttonEventMask = this.buttonEventMask | this.buttonMask_uq1vpl$_0 ^ value;
      this.buttonMask_uq1vpl$_0 = value;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'buttonEventMask', {
    get: function () {
      return this.buttonEventMask_dc8ngn$_0;
    },
    set: function (buttonEventMask) {
      this.buttonEventMask_dc8ngn$_0 = buttonEventMask;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isValid', {
    get: function () {
      return this.isValid_cde91$_0;
    },
    set: function (isValid) {
      this.isValid_cde91$_0 = isValid;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isLeftButtonDown', {
    get: function () {
      return (this.buttonMask & 1) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isRightButtonDown', {
    get: function () {
      return (this.buttonMask & 2) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isMiddleButtonDown', {
    get: function () {
      return (this.buttonMask & 4) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isBackButtonDown', {
    get: function () {
      return (this.buttonMask & 8) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isForwardButtonDown', {
    get: function () {
      return (this.buttonMask & 16) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isLeftButtonEvent', {
    get: function () {
      return (this.buttonEventMask & 1) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isRightButtonEvent', {
    get: function () {
      return (this.buttonEventMask & 2) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isMiddleButtonEvent', {
    get: function () {
      return (this.buttonEventMask & 4) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isBackButtonEvent', {
    get: function () {
      return (this.buttonEventMask & 8) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isForwardButtonEvent', {
    get: function () {
      return (this.buttonEventMask & 16) !== 0;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isLeftButtonPressed', {
    get: function () {
      return this.isLeftButtonEvent && this.isLeftButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isRightButtonPressed', {
    get: function () {
      return this.isRightButtonEvent && this.isRightButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isMiddleButtonPressed', {
    get: function () {
      return this.isMiddleButtonEvent && this.isMiddleButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isBackButtonPressed', {
    get: function () {
      return this.isBackButtonEvent && this.isBackButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isForwardButtonPressed', {
    get: function () {
      return this.isForwardButtonEvent && this.isForwardButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isLeftButtonReleased', {
    get: function () {
      return this.isLeftButtonEvent && !this.isLeftButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isRightButtonReleased', {
    get: function () {
      return this.isRightButtonEvent && !this.isRightButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isMiddleButtonReleased', {
    get: function () {
      return this.isMiddleButtonEvent && !this.isMiddleButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isBackButtonReleased', {
    get: function () {
      return this.isBackButtonEvent && !this.isBackButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isForwardButtonReleased', {
    get: function () {
      return this.isForwardButtonEvent && !this.isForwardButtonDown;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isLeftButtonClicked', {
    get: function () {
      var tmp$ = this.isLeftButtonReleased;
      if (tmp$) {
        var x = this.dragDeltaX;
        var tmp$_0 = Math_0.abs(x);
        var x_0 = this.dragDeltaY;
        tmp$ = tmp$_0 + Math_0.abs(x_0) < 5.0;
      }return tmp$;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isRightButtonClicked', {
    get: function () {
      var tmp$ = this.isRightButtonReleased;
      if (tmp$) {
        var x = this.dragDeltaX;
        var tmp$_0 = Math_0.abs(x);
        var x_0 = this.dragDeltaY;
        tmp$ = tmp$_0 + Math_0.abs(x_0) < 5.0;
      }return tmp$;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isMiddleButtonClicked', {
    get: function () {
      var tmp$ = this.isMiddleButtonReleased;
      if (tmp$) {
        var x = this.dragDeltaX;
        var tmp$_0 = Math_0.abs(x);
        var x_0 = this.dragDeltaY;
        tmp$ = tmp$_0 + Math_0.abs(x_0) < 5.0;
      }return tmp$;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isBackButtonClicked', {
    get: function () {
      var tmp$ = this.isBackButtonReleased;
      if (tmp$) {
        var x = this.dragDeltaX;
        var tmp$_0 = Math_0.abs(x);
        var x_0 = this.dragDeltaY;
        tmp$ = tmp$_0 + Math_0.abs(x_0) < 5.0;
      }return tmp$;
    }
  });
  Object.defineProperty(InputManager$Pointer.prototype, 'isForwardButtonClicked', {
    get: function () {
      var tmp$ = this.isForwardButtonReleased;
      if (tmp$) {
        var x = this.dragDeltaX;
        var tmp$_0 = Math_0.abs(x);
        var x_0 = this.dragDeltaY;
        tmp$ = tmp$_0 + Math_0.abs(x_0) < 5.0;
      }return tmp$;
    }
  });
  InputManager$Pointer.prototype.consume_za3lpa$ = function (mask) {
    if (mask === void 0)
      mask = -1;
    this.consumptionMask_8be2vx$ = this.consumptionMask_8be2vx$ | mask;
  };
  InputManager$Pointer.prototype.isConsumed_za3lpa$ = function (mask) {
    if (mask === void 0)
      mask = -1;
    return (this.consumptionMask_8be2vx$ & mask) !== 0;
  };
  InputManager$Pointer.prototype.isInViewport_hrtwbc$ = function (viewport, ctx) {
    var ptrY = ctx.windowHeight - this.y;
    return this.isValid && viewport.isInViewport_dleff0$(this.x, ptrY);
  };
  InputManager$Pointer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Pointer',
    interfaces: []
  };
  function InputManager$BufferedPointerInput() {
    InputManager$Pointer.call(this);
    this.updateState_0 = InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance();
    this.processedState_0 = InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance();
    this.lastUpdate = 0.0;
  }
  InputManager$BufferedPointerInput.prototype.setButtonMask_za3lpa$ = function (mask) {
    this.buttonMask = mask;
    if (this.isLeftButtonPressed || this.isRightButtonPressed || this.isMiddleButtonPressed) {
      this.dragDeltaX = 0.0;
      this.dragDeltaY = 0.0;
    }};
  InputManager$BufferedPointerInput.prototype.startPointer_nhq4am$ = function (pointerId, x, y) {
    this.movePointer_dleff0$(x, y);
    this.id = pointerId;
    this.deltaX = 0.0;
    this.deltaY = 0.0;
    this.dragDeltaX = 0.0;
    this.dragDeltaY = 0.0;
    this.deltaScroll = 0.0;
    this.updateState_0 = InputManager$BufferedPointerInput$UpdateState$STARTED_getInstance();
    this.isValid = true;
  };
  InputManager$BufferedPointerInput.prototype.movePointer_dleff0$ = function (x, y) {
    if (this.buttonMask !== 0) {
      this.dragDeltaX = this.dragDeltaX + (x - this.x);
      this.dragDeltaY = this.dragDeltaY + (y - this.y);
    }this.deltaX = this.deltaX + (x - this.x);
    this.deltaY = this.deltaY + (y - this.y);
    this.x = x;
    this.y = y;
    this.lastUpdate = now();
  };
  InputManager$BufferedPointerInput.prototype.endPointer = function () {
    var tmp$;
    switch (this.processedState_0.name) {
      case 'ACTIVE':
        tmp$ = InputManager$BufferedPointerInput$UpdateState$ENDED_getInstance();
        break;
      case 'STARTED':
        tmp$ = InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_getInstance();
        break;
      default:tmp$ = InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED_getInstance();
        break;
    }
    this.updateState_0 = tmp$;
  };
  InputManager$BufferedPointerInput.prototype.cancelPointer = function () {
    this.buttonMask = 0;
    this.buttonEventMask = 0;
    this.deltaX = 0.0;
    this.deltaY = 0.0;
    this.deltaScroll = 0.0;
    this.dragDeltaX = 0.0;
    this.dragDeltaY = 0.0;
    this.updateState_0 = InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance();
    this.isValid = false;
  };
  InputManager$BufferedPointerInput.prototype.update_sjovm5$ = function (target, t) {
    if (this.updateState_0 !== InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance() && t - this.lastUpdate > 200) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Pointer ' + this.id + ' timed out!');
      }this.cancelPointer();
    }target.id = this.id;
    target.deltaX = this.deltaX;
    target.deltaY = this.deltaY;
    target.dragDeltaX = this.dragDeltaX;
    target.dragDeltaY = this.dragDeltaY;
    target.deltaScroll = this.deltaScroll;
    target.x = this.x;
    target.y = this.y;
    target.isValid = true;
    target.consumptionMask_8be2vx$ = 0;
    target.buttonEventMask = 0;
    switch (this.updateState_0.name) {
      case 'STARTED':
        target.buttonMask = 0;
        break;
      case 'ENDED_BEFORE_STARTED':
        target.buttonMask = 0;
        break;
      case 'ACTIVE':
        target.buttonMask = this.buttonMask;
        break;
      case 'ENDED_BEFORE_ACTIVE':
        target.buttonMask = this.buttonMask;
        break;
      case 'ENDED':
        target.buttonMask = 0;
        break;
      case 'INVALID':
        this.isValid = false;
        target.isValid = false;
        break;
    }
    this.deltaX = 0.0;
    this.deltaY = 0.0;
    this.deltaScroll = 0.0;
    this.buttonEventMask = 0;
    this.processedState_0 = this.updateState_0;
    this.updateState_0 = this.updateState_0.next();
  };
  function InputManager$BufferedPointerInput$UpdateState(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function InputManager$BufferedPointerInput$UpdateState_initFields() {
    InputManager$BufferedPointerInput$UpdateState_initFields = function () {
    };
    new InputManager$BufferedPointerInput$UpdateState$STARTED();
    new InputManager$BufferedPointerInput$UpdateState$ACTIVE();
    new InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED();
    new InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE();
    new InputManager$BufferedPointerInput$UpdateState$ENDED();
    new InputManager$BufferedPointerInput$UpdateState$INVALID();
  }
  function InputManager$BufferedPointerInput$UpdateState$STARTED() {
    InputManager$BufferedPointerInput$UpdateState$STARTED_instance = this;
    InputManager$BufferedPointerInput$UpdateState.call(this, 'STARTED', 0);
  }
  InputManager$BufferedPointerInput$UpdateState$STARTED.prototype.next = function () {
    return InputManager$BufferedPointerInput$UpdateState$ACTIVE_getInstance();
  };
  InputManager$BufferedPointerInput$UpdateState$STARTED.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'STARTED',
    interfaces: [InputManager$BufferedPointerInput$UpdateState]
  };
  var InputManager$BufferedPointerInput$UpdateState$STARTED_instance = null;
  function InputManager$BufferedPointerInput$UpdateState$STARTED_getInstance() {
    InputManager$BufferedPointerInput$UpdateState_initFields();
    return InputManager$BufferedPointerInput$UpdateState$STARTED_instance;
  }
  function InputManager$BufferedPointerInput$UpdateState$ACTIVE() {
    InputManager$BufferedPointerInput$UpdateState$ACTIVE_instance = this;
    InputManager$BufferedPointerInput$UpdateState.call(this, 'ACTIVE', 1);
  }
  InputManager$BufferedPointerInput$UpdateState$ACTIVE.prototype.next = function () {
    return InputManager$BufferedPointerInput$UpdateState$ACTIVE_getInstance();
  };
  InputManager$BufferedPointerInput$UpdateState$ACTIVE.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ACTIVE',
    interfaces: [InputManager$BufferedPointerInput$UpdateState]
  };
  var InputManager$BufferedPointerInput$UpdateState$ACTIVE_instance = null;
  function InputManager$BufferedPointerInput$UpdateState$ACTIVE_getInstance() {
    InputManager$BufferedPointerInput$UpdateState_initFields();
    return InputManager$BufferedPointerInput$UpdateState$ACTIVE_instance;
  }
  function InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED() {
    InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED_instance = this;
    InputManager$BufferedPointerInput$UpdateState.call(this, 'ENDED_BEFORE_STARTED', 2);
  }
  InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED.prototype.next = function () {
    return InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_getInstance();
  };
  InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ENDED_BEFORE_STARTED',
    interfaces: [InputManager$BufferedPointerInput$UpdateState]
  };
  var InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED_instance = null;
  function InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED_getInstance() {
    InputManager$BufferedPointerInput$UpdateState_initFields();
    return InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED_instance;
  }
  function InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE() {
    InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_instance = this;
    InputManager$BufferedPointerInput$UpdateState.call(this, 'ENDED_BEFORE_ACTIVE', 3);
  }
  InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE.prototype.next = function () {
    return InputManager$BufferedPointerInput$UpdateState$ENDED_getInstance();
  };
  InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ENDED_BEFORE_ACTIVE',
    interfaces: [InputManager$BufferedPointerInput$UpdateState]
  };
  var InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_instance = null;
  function InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_getInstance() {
    InputManager$BufferedPointerInput$UpdateState_initFields();
    return InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_instance;
  }
  function InputManager$BufferedPointerInput$UpdateState$ENDED() {
    InputManager$BufferedPointerInput$UpdateState$ENDED_instance = this;
    InputManager$BufferedPointerInput$UpdateState.call(this, 'ENDED', 4);
  }
  InputManager$BufferedPointerInput$UpdateState$ENDED.prototype.next = function () {
    return InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance();
  };
  InputManager$BufferedPointerInput$UpdateState$ENDED.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ENDED',
    interfaces: [InputManager$BufferedPointerInput$UpdateState]
  };
  var InputManager$BufferedPointerInput$UpdateState$ENDED_instance = null;
  function InputManager$BufferedPointerInput$UpdateState$ENDED_getInstance() {
    InputManager$BufferedPointerInput$UpdateState_initFields();
    return InputManager$BufferedPointerInput$UpdateState$ENDED_instance;
  }
  function InputManager$BufferedPointerInput$UpdateState$INVALID() {
    InputManager$BufferedPointerInput$UpdateState$INVALID_instance = this;
    InputManager$BufferedPointerInput$UpdateState.call(this, 'INVALID', 5);
  }
  InputManager$BufferedPointerInput$UpdateState$INVALID.prototype.next = function () {
    return InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance();
  };
  InputManager$BufferedPointerInput$UpdateState$INVALID.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'INVALID',
    interfaces: [InputManager$BufferedPointerInput$UpdateState]
  };
  var InputManager$BufferedPointerInput$UpdateState$INVALID_instance = null;
  function InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance() {
    InputManager$BufferedPointerInput$UpdateState_initFields();
    return InputManager$BufferedPointerInput$UpdateState$INVALID_instance;
  }
  InputManager$BufferedPointerInput$UpdateState.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UpdateState',
    interfaces: [Enum]
  };
  function InputManager$BufferedPointerInput$UpdateState$values() {
    return [InputManager$BufferedPointerInput$UpdateState$STARTED_getInstance(), InputManager$BufferedPointerInput$UpdateState$ACTIVE_getInstance(), InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED_getInstance(), InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_getInstance(), InputManager$BufferedPointerInput$UpdateState$ENDED_getInstance(), InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance()];
  }
  InputManager$BufferedPointerInput$UpdateState.values = InputManager$BufferedPointerInput$UpdateState$values;
  function InputManager$BufferedPointerInput$UpdateState$valueOf(name) {
    switch (name) {
      case 'STARTED':
        return InputManager$BufferedPointerInput$UpdateState$STARTED_getInstance();
      case 'ACTIVE':
        return InputManager$BufferedPointerInput$UpdateState$ACTIVE_getInstance();
      case 'ENDED_BEFORE_STARTED':
        return InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED_getInstance();
      case 'ENDED_BEFORE_ACTIVE':
        return InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_getInstance();
      case 'ENDED':
        return InputManager$BufferedPointerInput$UpdateState$ENDED_getInstance();
      case 'INVALID':
        return InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.InputManager.BufferedPointerInput.UpdateState.' + name);
    }
  }
  InputManager$BufferedPointerInput$UpdateState.valueOf_61zpoe$ = InputManager$BufferedPointerInput$UpdateState$valueOf;
  InputManager$BufferedPointerInput.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BufferedPointerInput',
    interfaces: [InputManager$Pointer]
  };
  function InputManager$KeyEventListener(keyCode, name, filter, callback) {
    if (filter === void 0)
      filter = InputManager$InputManager$KeyEventListener_init$lambda;
    this.keyCode = keyCode;
    this.name = name;
    this.filter = filter;
    this.callback = callback;
  }
  InputManager$KeyEventListener.prototype.invoke_9cgpoj$ = function (evt) {
    this.callback(evt);
  };
  function InputManager$InputManager$KeyEventListener_init$lambda(it) {
    return true;
  }
  InputManager$KeyEventListener.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KeyEventListener',
    interfaces: []
  };
  function InputManager$KeyEvent() {
    this.keyCode_56t57j$_0 = 0;
    this.modifiers_cmws0f$_0 = 0;
    this.event_4ycnw1$_0 = 0;
    this.typedChar_ne8il1$_0 = toChar(0);
  }
  Object.defineProperty(InputManager$KeyEvent.prototype, 'keyCode', {
    get: function () {
      return this.keyCode_56t57j$_0;
    },
    set: function (keyCode) {
      this.keyCode_56t57j$_0 = keyCode;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'modifiers', {
    get: function () {
      return this.modifiers_cmws0f$_0;
    },
    set: function (modifiers) {
      this.modifiers_cmws0f$_0 = modifiers;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'event', {
    get: function () {
      return this.event_4ycnw1$_0;
    },
    set: function (event) {
      this.event_4ycnw1$_0 = event;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'typedChar', {
    get: function () {
      return toBoxedChar(this.typedChar_ne8il1$_0);
    },
    set: function (typedChar) {
      this.typedChar_ne8il1$_0 = unboxChar(typedChar);
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'isPressed', {
    get: function () {
      return (this.event & 2) !== 0;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'isRepeated', {
    get: function () {
      return (this.event & 4) !== 0;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'isReleased', {
    get: function () {
      return (this.event & 1) !== 0;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'isCharTyped', {
    get: function () {
      return (this.event & 8) !== 0;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'isShiftDown', {
    get: function () {
      return (this.modifiers & 1) !== 0;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'isCtrlDown', {
    get: function () {
      return (this.modifiers & 2) !== 0;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'isAltDown', {
    get: function () {
      return (this.modifiers & 4) !== 0;
    }
  });
  Object.defineProperty(InputManager$KeyEvent.prototype, 'isSuperDown', {
    get: function () {
      return (this.modifiers & 8) !== 0;
    }
  });
  InputManager$KeyEvent.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KeyEvent',
    interfaces: []
  };
  function InputManager$PointerState() {
    var array = Array_0(10);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new InputManager$Pointer();
    }
    this.pointers = array;
    this.lastPtrInput_0 = 0.0;
    var array_0 = Array_0(10);
    var tmp$_0;
    tmp$_0 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array_0[i_0] = new InputManager$BufferedPointerInput();
    }
    this.inputPointers_0 = array_0;
    this.compatGestureEvaluator_0 = new TouchGestureEvaluator();
    this.isEvaluatingCompatGestures = true;
    this.primaryPointer = this.pointers[0];
  }
  InputManager$PointerState.prototype.getActivePointers_j71cmr$ = function (result, consumedMask) {
    if (consumedMask === void 0)
      consumedMask = -1;
    var tmp$;
    result.clear();
    tmp$ = this.pointers;
    for (var i = 0; i !== tmp$.length; ++i) {
      if (this.pointers[i].isValid && !this.pointers[i].isConsumed_za3lpa$(consumedMask)) {
        result.add_11rb$(this.pointers[i]);
      }}
  };
  InputManager$PointerState.prototype.onNewFrame_cwprtu$ = function (ctx) {
    var tmp$;
    tmp$ = this.pointers;
    for (var i = 0; i !== tmp$.length; ++i) {
      this.inputPointers_0[i].update_sjovm5$(this.pointers[i], this.lastPtrInput_0);
    }
    if (this.isEvaluatingCompatGestures) {
      this.compatGestureEvaluator_0.evaluate_19cf9$(this, ctx);
      switch (this.compatGestureEvaluator_0.currentGesture.type) {
        case 1:
          this.primaryPointer.consumptionMask_8be2vx$ = 0;
          this.primaryPointer.deltaScroll = this.compatGestureEvaluator_0.currentGesture.dPinchAmount / 20;
          this.primaryPointer.x = this.compatGestureEvaluator_0.currentGesture.centerCurrent.x;
          this.primaryPointer.y = this.compatGestureEvaluator_0.currentGesture.centerCurrent.y;
          this.primaryPointer.deltaX = this.compatGestureEvaluator_0.currentGesture.dCenter.x;
          this.primaryPointer.deltaY = this.compatGestureEvaluator_0.currentGesture.dCenter.y;
          break;
        case 2:
          this.primaryPointer.consumptionMask_8be2vx$ = 0;
          this.primaryPointer.x = this.compatGestureEvaluator_0.currentGesture.centerCurrent.x;
          this.primaryPointer.y = this.compatGestureEvaluator_0.currentGesture.centerCurrent.y;
          this.primaryPointer.deltaX = this.compatGestureEvaluator_0.currentGesture.dCenter.x;
          this.primaryPointer.deltaY = this.compatGestureEvaluator_0.currentGesture.dCenter.y;
          if (this.primaryPointer.buttonMask === 1) {
            this.primaryPointer.buttonMask = 2;
            if (this.compatGestureEvaluator_0.currentGesture.numUpdates > 1) {
              this.primaryPointer.buttonEventMask = 0;
            }}
          break;
      }
    }};
  InputManager$PointerState.prototype.getFreeInputPointer_8be2vx$ = function () {
    var tmp$;
    tmp$ = this.inputPointers_0;
    for (var i = 0; i !== tmp$.length; ++i) {
      if (!this.inputPointers_0[i].isValid) {
        return this.inputPointers_0[i];
      }}
    return null;
  };
  InputManager$PointerState.prototype.findInputPointer_kcn2v3$ = function (pointerId) {
    var tmp$;
    tmp$ = this.inputPointers_0;
    for (var i = 0; i !== tmp$.length; ++i) {
      if (this.inputPointers_0[i].isValid && this.inputPointers_0[i].id === pointerId) {
        return this.inputPointers_0[i];
      }}
    return null;
  };
  InputManager$PointerState.prototype.handleTouchStart_qlj5un$ = function (pointerId, x, y) {
    var tmp$;
    this.lastPtrInput_0 = now();
    tmp$ = this.getFreeInputPointer_8be2vx$();
    if (tmp$ == null) {
      return;
    }var inPtr = tmp$;
    inPtr.startPointer_nhq4am$(pointerId, x, y);
    inPtr.buttonMask = 1;
  };
  InputManager$PointerState.prototype.handleTouchEnd_kcn2v3$ = function (pointerId) {
    var tmp$;
    (tmp$ = this.findInputPointer_kcn2v3$(pointerId)) != null ? (tmp$.endPointer(), Unit) : null;
  };
  InputManager$PointerState.prototype.handleTouchCancel_kcn2v3$ = function (pointerId) {
    var tmp$;
    (tmp$ = this.findInputPointer_kcn2v3$(pointerId)) != null ? (tmp$.cancelPointer(), Unit) : null;
  };
  InputManager$PointerState.prototype.handleTouchMove_qlj5un$ = function (pointerId, x, y) {
    var tmp$;
    this.lastPtrInput_0 = now();
    (tmp$ = this.findInputPointer_kcn2v3$(pointerId)) != null ? (tmp$.movePointer_dleff0$(x, y), Unit) : null;
  };
  InputManager$PointerState.prototype.handleMouseMove_dob1fz$ = function (x, y) {
    var tmp$;
    this.lastPtrInput_0 = now();
    var mousePtr = this.findInputPointer_kcn2v3$(-1000000);
    if (mousePtr == null) {
      tmp$ = this.getFreeInputPointer_8be2vx$();
      if (tmp$ == null) {
        return;
      }var startPtr = tmp$;
      startPtr.startPointer_nhq4am$(-1000000, x, y);
    } else {
      mousePtr.movePointer_dleff0$(x, y);
    }
  };
  InputManager$PointerState.prototype.handleMouseButtonState_iwgtk$ = function (button, down) {
    var tmp$;
    tmp$ = this.findInputPointer_kcn2v3$(-1000000);
    if (tmp$ == null) {
      return;
    }var ptr = tmp$;
    if (down) {
      ptr.setButtonMask_za3lpa$(ptr.buttonMask | 1 << button);
    } else {
      ptr.setButtonMask_za3lpa$(ptr.buttonMask & ~(1 << button));
    }
  };
  InputManager$PointerState.prototype.handleMouseButtonStates_kcn2v3$ = function (mask) {
    var tmp$;
    tmp$ = this.findInputPointer_kcn2v3$(-1000000);
    if (tmp$ == null) {
      return;
    }var ptr = tmp$;
    ptr.setButtonMask_za3lpa$(mask);
  };
  InputManager$PointerState.prototype.handleMouseScroll_nwfnho$ = function (ticks) {
    var tmp$;
    tmp$ = this.findInputPointer_kcn2v3$(-1000000);
    if (tmp$ == null) {
      return;
    }var ptr = tmp$;
    ptr.deltaScroll = ptr.deltaScroll + ticks;
  };
  InputManager$PointerState.prototype.handleMouseExit_8be2vx$ = function () {
    var tmp$;
    (tmp$ = this.findInputPointer_kcn2v3$(-1000000)) != null ? (tmp$.cancelPointer(), Unit) : null;
  };
  InputManager$PointerState.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PointerState',
    interfaces: []
  };
  function InputManager$Companion() {
    InputManager$Companion_instance = this;
    this.LEFT_BUTTON = 0;
    this.LEFT_BUTTON_MASK = 1;
    this.RIGHT_BUTTON = 1;
    this.RIGHT_BUTTON_MASK = 2;
    this.MIDDLE_BUTTON = 2;
    this.MIDDLE_BUTTON_MASK = 4;
    this.BACK_BUTTON = 3;
    this.BACK_BUTTON_MASK = 8;
    this.FORWARD_BUTTON = 4;
    this.FORWARD_BUTTON_MASK = 16;
    this.MAX_POINTERS = 10;
    this.MOUSE_POINTER_ID = -1000000;
    this.CONSUMED_ALL = -1;
    this.CONSUMED_X = 1;
    this.CONSUMED_Y = 2;
    this.CONSUMED_SCROLL = 4;
    this.CONSUMED_LEFT_BUTTON = 8;
    this.CONSUMED_RIGHT_BUTTON = 16;
    this.CONSUMED_MIDDLE_BUTTON = 32;
    this.CONSUMED_BACK_BUTTON = 64;
    this.CONSUMED_FORWARD_BUTTON = 128;
    this.KEY_EV_UP = 1;
    this.KEY_EV_DOWN = 2;
    this.KEY_EV_REPEATED = 4;
    this.KEY_EV_CHAR_TYPED = 8;
    this.KEY_MOD_SHIFT = 1;
    this.KEY_MOD_CTRL = 2;
    this.KEY_MOD_ALT = 4;
    this.KEY_MOD_SUPER = 8;
    this.KEY_CTRL_LEFT = -1;
    this.KEY_CTRL_RIGHT = -2;
    this.KEY_SHIFT_LEFT = -3;
    this.KEY_SHIFT_RIGHT = -4;
    this.KEY_ALT_LEFT = -5;
    this.KEY_ALT_RIGHT = -6;
    this.KEY_SUPER_LEFT = -7;
    this.KEY_SUPER_RIGHT = -8;
    this.KEY_ESC = -9;
    this.KEY_MENU = -10;
    this.KEY_ENTER = -11;
    this.KEY_NP_ENTER = -12;
    this.KEY_NP_DIV = -13;
    this.KEY_NP_MUL = -14;
    this.KEY_NP_PLUS = -15;
    this.KEY_NP_MINUS = -16;
    this.KEY_BACKSPACE = -17;
    this.KEY_TAB = -18;
    this.KEY_DEL = -19;
    this.KEY_INSERT = -20;
    this.KEY_HOME = -21;
    this.KEY_END = -22;
    this.KEY_PAGE_UP = -23;
    this.KEY_PAGE_DOWN = -24;
    this.KEY_CURSOR_LEFT = -25;
    this.KEY_CURSOR_RIGHT = -26;
    this.KEY_CURSOR_UP = -27;
    this.KEY_CURSOR_DOWN = -28;
    this.KEY_F1 = -29;
    this.KEY_F2 = -30;
    this.KEY_F3 = -31;
    this.KEY_F4 = -32;
    this.KEY_F5 = -33;
    this.KEY_F6 = -34;
    this.KEY_F7 = -35;
    this.KEY_F8 = -36;
    this.KEY_F9 = -37;
    this.KEY_F10 = -38;
    this.KEY_F11 = -39;
    this.KEY_F12 = -40;
  }
  InputManager$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var InputManager$Companion_instance = null;
  function InputManager$Companion_getInstance() {
    if (InputManager$Companion_instance === null) {
      new InputManager$Companion();
    }return InputManager$Companion_instance;
  }
  InputManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InputManager',
    interfaces: []
  };
  function KoolContext() {
    this.screenDpi = 96.0;
    this.inputMgr = new InputManager();
    this.engineStats = new EngineStats();
    this.projCorrectionMatrixScreen = new Mat4d();
    this.projCorrectionMatrixOffscreen = new Mat4d();
    this.depthBiasMatrix = (new Mat4d()).translate_yvo9jy$(0.5, 0.5, 0.5).scale_yvo9jy$(0.5, 0.5, 0.5);
    this.onRender = ArrayList_init_0();
    this.time_q5mkh0$_0 = 0.0;
    this.deltaT_wdv5hn$_0 = 0.0;
    this.frameIdx_2g8w1r$_0 = 0;
    this.fps_a02wsa$_0 = 60.0;
    this.scenes = ArrayList_init_0();
    this.delayedCallbacks_puvmt7$_0 = ArrayList_init_0();
    this.disposablePipelines_8be2vx$ = ArrayList_init_0();
    var array = new Float64Array(25);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = 0.017;
    }
    this.frameTimes_6eiyeg$_0 = array;
  }
  Object.defineProperty(KoolContext.prototype, 'time', {
    get: function () {
      return this.time_q5mkh0$_0;
    },
    set: function (time) {
      this.time_q5mkh0$_0 = time;
    }
  });
  Object.defineProperty(KoolContext.prototype, 'deltaT', {
    get: function () {
      return this.deltaT_wdv5hn$_0;
    },
    set: function (deltaT) {
      this.deltaT_wdv5hn$_0 = deltaT;
    }
  });
  Object.defineProperty(KoolContext.prototype, 'frameIdx', {
    get: function () {
      return this.frameIdx_2g8w1r$_0;
    },
    set: function (frameIdx) {
      this.frameIdx_2g8w1r$_0 = frameIdx;
    }
  });
  Object.defineProperty(KoolContext.prototype, 'fps', {
    get: function () {
      return this.fps_a02wsa$_0;
    },
    set: function (fps) {
      this.fps_a02wsa$_0 = fps;
    }
  });
  KoolContext.prototype.runDelayed_hd6vpk$ = function (frames, callback) {
    var $receiver = this.delayedCallbacks_puvmt7$_0;
    var element = new KoolContext$DelayedCallback(this.frameIdx + frames | 0, callback);
    $receiver.add_11rb$(element);
  };
  KoolContext.prototype.disposePipeline_i7l2g2$ = function (pipeline) {
    this.disposablePipelines_8be2vx$.add_11rb$(pipeline);
  };
  KoolContext.prototype.render_14dthe$ = function (dt) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (!this.delayedCallbacks_puvmt7$_0.isEmpty()) {
      tmp$ = reversed(get_indices(this.delayedCallbacks_puvmt7$_0)).iterator();
      while (tmp$.hasNext()) {
        var i = tmp$.next();
        var callback = this.delayedCallbacks_puvmt7$_0.get_za3lpa$(i);
        if (callback.callOnFrame <= this.frameIdx) {
          callback.callback(this);
          this.delayedCallbacks_puvmt7$_0.removeAt_za3lpa$(i);
        }}
    }this.deltaT = dt;
    this.time = this.time + dt;
    this.frameIdx = this.frameIdx + 1 | 0;
    this.frameTimes_6eiyeg$_0[this.frameIdx % this.frameTimes_6eiyeg$_0.length] = dt;
    var sum = 0.0;
    tmp$_0 = this.frameTimes_6eiyeg$_0;
    for (var i_0 = 0; i_0 !== tmp$_0.length; ++i_0) {
      sum += this.frameTimes_6eiyeg$_0[i_0];
    }
    this.fps = this.frameTimes_6eiyeg$_0.length / sum * 0.1 + this.fps * 0.9;
    this.inputMgr.onNewFrame_cwprtu$(this);
    tmp$_1 = this.onRender;
    for (var i_1 = 0; i_1 !== tmp$_1.size; ++i_1) {
      this.onRender.get_za3lpa$(i_1)(this);
    }
    tmp$_2 = reversed(get_indices(this.scenes)).iterator();
    while (tmp$_2.hasNext()) {
      var i_2 = tmp$_2.next();
      if (this.scenes.get_za3lpa$(i_2).isVisible) {
        this.scenes.get_za3lpa$(i_2).processInput_aemszp$(this);
      }}
    tmp$_3 = this.scenes;
    for (var i_3 = 0; i_3 !== tmp$_3.size; ++i_3) {
      if (this.scenes.get_za3lpa$(i_3).isVisible) {
        this.scenes.get_za3lpa$(i_3).renderScene_aemszp$(this);
      }}
  };
  KoolContext.prototype.applyRenderingHints = function () {
  };
  function KoolContext$DelayedCallback(callOnFrame, callback) {
    this.callOnFrame = callOnFrame;
    this.callback = callback;
  }
  KoolContext$DelayedCallback.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DelayedCallback',
    interfaces: []
  };
  KoolContext.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KoolContext',
    interfaces: []
  };
  function KoolException(message, cause) {
    Exception.call(this, message, cause);
    this.name = 'KoolException';
  }
  KoolException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KoolException',
    interfaces: [Exception]
  };
  function KoolException_init(message, $this) {
    $this = $this || Object.create(KoolException.prototype);
    KoolException.call($this, message, null);
    return $this;
  }
  function BSpline(degree, factory, copy, mix) {
    this.degree = degree;
    this.factory_o8y0vc$_0 = factory;
    this.copy_1qqihf$_0 = copy;
    this.mix_rjp6wa$_0 = mix;
    this.ctrlPoints = ArrayList_init_0();
    this.knots_ks2m93$_0 = ArrayList_init_0();
    this.d_c5f19u$_0 = ArrayList_init_0();
  }
  BSpline.prototype.addInterpolationEndpoints = function () {
    var tmp$;
    tmp$ = this.degree;
    for (var i = 0; i < tmp$; i++) {
      this.ctrlPoints.add_wxm5ur$(0, first(this.ctrlPoints));
      var $receiver = this.ctrlPoints;
      var element = last(this.ctrlPoints);
      $receiver.add_11rb$(element);
    }
  };
  BSpline.prototype.evaluate_f6p79m$ = function (x, result) {
    if (x <= 0.0)
      this.copy_1qqihf$_0(first(this.ctrlPoints), result);
    else if (x >= 1.0)
      this.copy_1qqihf$_0(last(this.ctrlPoints), result);
    else {
      this.checkTemps_dp4s6j$_0();
      var xx = this.degree + x * (this.ctrlPoints.size - (this.degree * 2 | 0) + 1 | 0);
      this.deBoor_47z15v$_0(numberToInt(xx), xx, result);
    }
    return result;
  };
  BSpline.prototype.deBoor_47z15v$_0 = function (k, t, result) {
    var tmp$, tmp$_0;
    var min = this.degree;
    var max = this.ctrlPoints.size - 1 | 0;
    var clamp$result;
    if (k < min) {
      clamp$result = min;
    } else if (k > max) {
      clamp$result = max;
    } else {
      clamp$result = k;
    }
    var kk = clamp$result;
    tmp$ = this.degree;
    for (var j = 0; j <= tmp$; j++) {
      this.copy_1qqihf$_0(this.ctrlPoints.get_za3lpa$(j + kk - this.degree | 0), this.d_c5f19u$_0.get_za3lpa$(j));
    }
    tmp$_0 = this.degree;
    for (var r = 1; r <= tmp$_0; r++) {
      for (var j_0 = this.degree; j_0 >= r; j_0--) {
        var alpha = (t - this.knots_ks2m93$_0.get_za3lpa$(j_0 + kk - this.degree | 0)) / (this.knots_ks2m93$_0.get_za3lpa$(j_0 + 1 + kk - r | 0) - this.knots_ks2m93$_0.get_za3lpa$(j_0 + kk - this.degree | 0));
        this.mix_rjp6wa$_0(1.0 - alpha, this.d_c5f19u$_0.get_za3lpa$(j_0 - 1 | 0), alpha, this.d_c5f19u$_0.get_za3lpa$(j_0), this.d_c5f19u$_0.get_za3lpa$(j_0));
      }
    }
    this.copy_1qqihf$_0(this.d_c5f19u$_0.get_za3lpa$(this.degree), result);
  };
  BSpline.prototype.checkTemps_dp4s6j$_0 = function () {
    var tmp$, tmp$_0;
    if (this.knots_ks2m93$_0.size !== (this.ctrlPoints.size + this.degree | 0)) {
      this.knots_ks2m93$_0.clear();
      tmp$ = this.ctrlPoints.size + this.degree | 0;
      for (var i = 0; i < tmp$; i++) {
        this.knots_ks2m93$_0.add_11rb$(i);
      }
    }if (this.d_c5f19u$_0.size !== (this.degree + 1 | 0)) {
      this.d_c5f19u$_0.clear();
      tmp$_0 = this.degree;
      for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
        var $receiver = this.d_c5f19u$_0;
        var element = this.factory_o8y0vc$_0();
        $receiver.add_11rb$(element);
      }
    }};
  BSpline.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BSpline',
    interfaces: []
  };
  function BSplineVec2f(degree) {
    BSpline.call(this, degree, BSplineVec2f_init$lambda, BSplineVec2f_init$lambda_0, BSplineVec2f_init$lambda_1);
  }
  function BSplineVec2f_init$lambda() {
    return MutableVec2f_init();
  }
  function BSplineVec2f_init$lambda_0(src, dst) {
    dst.set_czzhjp$(src);
    return Unit;
  }
  function BSplineVec2f_init$lambda_1(w0, p0, w1, p1, result) {
    result.x = p0.x * w0 + p1.x * w1;
    result.y = p0.y * w0 + p1.y * w1;
    return Unit;
  }
  BSplineVec2f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BSplineVec2f',
    interfaces: [BSpline]
  };
  function BSplineVec3f(degree) {
    BSpline.call(this, degree, BSplineVec3f_init$lambda, BSplineVec3f_init$lambda_0, BSplineVec3f_init$lambda_1);
  }
  function BSplineVec3f_init$lambda() {
    return MutableVec3f_init();
  }
  function BSplineVec3f_init$lambda_0(src, dst) {
    dst.set_czzhiu$(src);
    return Unit;
  }
  function BSplineVec3f_init$lambda_1(w0, p0, w1, p1, result) {
    result.x = p0.x * w0 + p1.x * w1;
    result.y = p0.y * w0 + p1.y * w1;
    result.z = p0.z * w0 + p1.z * w1;
    return Unit;
  }
  BSplineVec3f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BSplineVec3f',
    interfaces: [BSpline]
  };
  function Mat3f() {
    Mat3f$Companion_getInstance();
    this.matrix = new Float32Array(9);
    this.setIdentity();
  }
  Mat3f.prototype.rotate_7b5o5w$ = function (angleDeg, axX, axY, axZ) {
    var aX = axX;
    var aY = axY;
    var aZ = axZ;
    var x = aX * aX + aY * aY + aZ * aZ;
    var len = Math_0.sqrt(x);
    var $receiver = 1.0 - len;
    var eps;
    eps = package$math.FUZZY_EQ_D;
    if (!(Math_0.abs($receiver) <= eps)) {
      var recipLen = 1.0 / len;
      aX *= recipLen;
      aY *= recipLen;
      aZ *= recipLen;
    }var ang = angleDeg * (math.PI / 180.0);
    var s = Math_0.sin(ang);
    var c = Math_0.cos(ang);
    var nc = 1.0 - c;
    var xy = aX * aY;
    var yz = aY * aZ;
    var zx = aZ * aX;
    var xs = aX * s;
    var ys = aY * s;
    var zs = aZ * s;
    this.set_24o109$(0, aX * aX * nc + c);
    this.set_24o109$(3, xy * nc - zs);
    this.set_24o109$(6, zx * nc + ys);
    this.set_24o109$(1, xy * nc + zs);
    this.set_24o109$(4, aY * aY * nc + c);
    this.set_24o109$(7, yz * nc - xs);
    this.set_24o109$(2, zx * nc - ys);
    this.set_24o109$(5, yz * nc + xs);
    this.set_24o109$(8, aZ * aZ * nc + c);
    return this;
  };
  Mat3f.prototype.rotate_ad55pp$ = function (angleDeg, axis) {
    return this.rotate_7b5o5w$(angleDeg, axis.x, axis.y, axis.z);
  };
  Mat3f.prototype.rotate_c240ly$ = function (angleDeg, axX, axY, axZ, result) {
    result.set_d4zu7e$(this);
    result.rotate_7b5o5w$(angleDeg, axX, axY, axZ);
    return result;
  };
  Mat3f.prototype.rotate_phvhih$ = function (angleDeg, axis, result) {
    return this.rotate_c240ly$(angleDeg, axis.x, axis.y, axis.z, result);
  };
  Mat3f.prototype.transpose = function () {
    var d = this.get_za3lpa$(1);
    this.set_24o109$(1, this.get_za3lpa$(3));
    this.set_24o109$(3, d);
    d = this.get_za3lpa$(2);
    this.set_24o109$(2, this.get_za3lpa$(6));
    this.set_24o109$(6, d);
    d = this.get_za3lpa$(5);
    this.set_24o109$(5, this.get_za3lpa$(7));
    this.set_24o109$(7, d);
    return this;
  };
  Mat3f.prototype.transpose_d4zu6j$ = function (result) {
    result.set_24o109$(0, this.get_za3lpa$(0));
    result.set_24o109$(1, this.get_za3lpa$(3));
    result.set_24o109$(2, this.get_za3lpa$(6));
    result.set_24o109$(3, this.get_za3lpa$(1));
    result.set_24o109$(4, this.get_za3lpa$(4));
    result.set_24o109$(5, this.get_za3lpa$(7));
    result.set_24o109$(6, this.get_za3lpa$(2));
    result.set_24o109$(7, this.get_za3lpa$(5));
    result.set_24o109$(8, this.get_za3lpa$(8));
    return result;
  };
  Mat3f.prototype.invert = function () {
    Mat3f$Companion_getInstance().tmpMat_0;
    var $receiver = this.invert_d4zu7e$(Mat3f$Companion_getInstance().tmpMat_0);
    if ($receiver)
      this.set_d4zu7e$(Mat3f$Companion_getInstance().tmpMat_0);
    return $receiver;
  };
  Mat3f.prototype.invert_d4zu7e$ = function (result) {
    var tmp$;
    var det = 0.0;
    for (var i = 0; i <= 2; i++) {
      det += this.get_za3lpa$(i) * (this.get_za3lpa$(3 + (i + 1 | 0) % 3 | 0) * this.get_za3lpa$(6 + (i + 2 | 0) % 3 | 0) - this.get_za3lpa$(3 + (i + 2 | 0) % 3 | 0) * this.get_za3lpa$(6 + (i + 1 | 0) % 3 | 0));
    }
    if (det > 0.0) {
      det = 1.0 / det;
      for (var j = 0; j <= 2; j++) {
        for (var i_0 = 0; i_0 <= 2; i_0++) {
          result.set_24o109$((j * 3 | 0) + i_0 | 0, (this.get_za3lpa$(((i_0 + 1 | 0) % 3 * 3 | 0) + (j + 1 | 0) % 3 | 0) * this.get_za3lpa$(((i_0 + 2 | 0) % 3 * 3 | 0) + (j + 2 | 0) % 3 | 0) - this.get_za3lpa$(((i_0 + 1 | 0) % 3 * 3 | 0) + (j + 2 | 0) % 3 | 0) * this.get_za3lpa$(((i_0 + 2 | 0) % 3 * 3 | 0) + (j + 1 | 0) % 3 | 0)) * det);
        }
      }
      tmp$ = true;
    } else {
      tmp$ = false;
    }
    return tmp$;
  };
  Mat3f.prototype.transform_5s4mqq$ = function (vec) {
    var x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2);
    var y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2);
    var z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2);
    return vec.set_y2kzbl$(x, y, z);
  };
  Mat3f.prototype.transform_2gj7b4$ = function (vec, result) {
    result.x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2);
    result.y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2);
    result.z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2);
    return result;
  };
  Mat3f.prototype.mul_d4zu7e$ = function (other) {
    Mat3f$Companion_getInstance().tmpMat_0;
    this.mul_4w76o0$(other, Mat3f$Companion_getInstance().tmpMat_0);
    return this.set_d4zu7e$(Mat3f$Companion_getInstance().tmpMat_0);
  };
  Mat3f.prototype.mul_4w76o0$ = function (other, result) {
    for (var i = 0; i <= 2; i++) {
      for (var j = 0; j <= 2; j++) {
        var x = 0.0;
        for (var k = 0; k <= 2; k++) {
          x += this.get_za3lpa$(j + (k * 3 | 0) | 0) * other.get_za3lpa$((i * 3 | 0) + k | 0);
        }
        result.set_24o109$((i * 3 | 0) + j | 0, x);
      }
    }
    return result;
  };
  Mat3f.prototype.scale_y2kzbl$ = function (sx, sy, sz) {
    for (var i = 0; i <= 2; i++) {
      this.matrix[i] = this.matrix[i] * sx;
      this.matrix[3 + i | 0] = this.matrix[3 + i | 0] * sy;
      this.matrix[6 + i | 0] = this.matrix[6 + i | 0] * sz;
    }
    return this;
  };
  Mat3f.prototype.scale_czzhiu$ = function (scale) {
    return this.scale_y2kzbl$(scale.x, scale.y, scale.z);
  };
  Mat3f.prototype.scale_g84k61$ = function (sx, sy, sz, result) {
    for (var i = 0; i <= 2; i++) {
      result.matrix[i] = this.matrix[i] * sx;
      result.matrix[3 + i | 0] = this.matrix[3 + i | 0] * sy;
      result.matrix[6 + i | 0] = this.matrix[6 + i | 0] * sz;
    }
    return result;
  };
  Mat3f.prototype.set_d4zu7e$ = function (other) {
    for (var i = 0; i <= 8; i++) {
      this.set_24o109$(i, other.get_za3lpa$(i));
    }
    return this;
  };
  Mat3f.prototype.set_hcyabg$ = function (floats) {
    for (var i = 0; i <= 8; i++) {
      this.set_24o109$(i, floats.get_za3lpa$(i));
    }
  };
  Mat3f.prototype.setIdentity = function () {
    for (var i = 1; i <= 8; i++) {
      this.set_24o109$(i, 0.0);
    }
    for (var i_0 = 0; i_0 <= 8; i_0 += 4) {
      this.set_24o109$(i_0, 1.0);
    }
    return this;
  };
  Mat3f.prototype.setRotate_7b5o5w$ = function (rotA, axX, axY, axZ) {
    this.setIdentity();
    this.rotate_7b5o5w$(rotA, axX, axY, axZ);
    return this;
  };
  Mat3f.prototype.setRotate_czzhhz$ = function (quaternion) {
    var r = quaternion.w;
    var i = quaternion.x;
    var j = quaternion.y;
    var k = quaternion.z;
    var x = r * r + i * i + j * j + k * k;
    var s = Math_0.sqrt(x);
    s = 1.0 / (s * s);
    this.set_n0b4r3$(0, 0, 1 - 2 * s * (j * j + k * k));
    this.set_n0b4r3$(0, 1, 2 * s * (i * j - k * r));
    this.set_n0b4r3$(0, 2, 2 * s * (i * k + j * r));
    this.set_n0b4r3$(1, 0, 2 * s * (i * j + k * r));
    this.set_n0b4r3$(1, 1, 1 - 2 * s * (i * i + k * k));
    this.set_n0b4r3$(1, 2, 2 * s * (j * k - i * r));
    this.set_n0b4r3$(2, 0, 2 * s * (i * k - j * r));
    this.set_n0b4r3$(2, 1, 2 * s * (j * k + i * r));
    this.set_n0b4r3$(2, 2, 1 - 2 * s * (i * i + j * j));
    return this;
  };
  Mat3f.prototype.getRotation_5s4mpv$ = function (result) {
    var tmp$;
    var trace = this.get_vux9f0$(0, 0) + this.get_vux9f0$(1, 1) + this.get_vux9f0$(2, 2);
    if (trace > 0.0) {
      var x = trace + 1.0;
      var s = Math_0.sqrt(x);
      result.w = s * 0.5;
      s = 0.5 / s;
      result.x = (this.get_vux9f0$(2, 1) - this.get_vux9f0$(1, 2)) * s;
      result.y = (this.get_vux9f0$(0, 2) - this.get_vux9f0$(2, 0)) * s;
      result.z = (this.get_vux9f0$(1, 0) - this.get_vux9f0$(0, 1)) * s;
    } else {
      if (this.get_vux9f0$(0, 0) < this.get_vux9f0$(1, 1)) {
        if (this.get_vux9f0$(1, 1) < this.get_vux9f0$(2, 2)) {
          tmp$ = 2;
        } else {
          tmp$ = 1;
        }
      } else {
        if (this.get_vux9f0$(0, 0) < this.get_vux9f0$(2, 2)) {
          tmp$ = 2;
        } else {
          tmp$ = 0;
        }
      }
      var i = tmp$;
      var j = (i + 1 | 0) % 3;
      var k = (i + 2 | 0) % 3;
      var x_0 = this.get_vux9f0$(i, i) - this.get_vux9f0$(j, j) - this.get_vux9f0$(k, k) + 1.0;
      var s_0 = Math_0.sqrt(x_0);
      result.set_24o109$(i, s_0 * 0.5);
      s_0 = 0.5 / s_0;
      result.w = (this.get_vux9f0$(k, j) - this.get_vux9f0$(j, k)) * s_0;
      result.set_24o109$(j, (this.get_vux9f0$(j, i) + this.get_vux9f0$(i, j)) * s_0);
      result.set_24o109$(k, (this.get_vux9f0$(k, i) + this.get_vux9f0$(i, k)) * s_0);
    }
    return result;
  };
  Mat3f.prototype.get_za3lpa$ = function (i) {
    return this.matrix[i];
  };
  Mat3f.prototype.get_vux9f0$ = function (row, col) {
    return this.matrix[(col * 3 | 0) + row | 0];
  };
  Mat3f.prototype.set_24o109$ = function (i, value) {
    this.matrix[i] = value;
  };
  Mat3f.prototype.set_n0b4r3$ = function (row, col, value) {
    this.matrix[(col * 3 | 0) + row | 0] = value;
  };
  Mat3f.prototype.setColVec_ky00qo$ = function (col, vec) {
    this.set_n0b4r3$(0, col, vec.x);
    this.set_n0b4r3$(1, col, vec.y);
    this.set_n0b4r3$(2, col, vec.z);
  };
  Mat3f.prototype.getColVec_8irwuw$ = function (col, result) {
    result.x = this.get_vux9f0$(0, col);
    result.y = this.get_vux9f0$(1, col);
    result.z = this.get_vux9f0$(2, col);
    return result;
  };
  Mat3f.prototype.toBuffer_he122g$ = function (buffer) {
    buffer.put_kgymra$(this.matrix, 0, 9);
    buffer.flip();
    return buffer;
  };
  function Mat3f$Companion() {
    Mat3f$Companion_instance = this;
    this.tmpMat_0 = new Mat3f();
  }
  Mat3f$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Mat3f$Companion_instance = null;
  function Mat3f$Companion_getInstance() {
    if (Mat3f$Companion_instance === null) {
      new Mat3f$Companion();
    }return Mat3f$Companion_instance;
  }
  Mat3f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Mat3f',
    interfaces: []
  };
  function Mat4d() {
    Mat4d$Companion_getInstance();
    this.matrix_ntz8bm$_0 = new Float64Array(16);
    this.offset_7ocvpo$_0 = 0;
    this.setIdentity();
  }
  Object.defineProperty(Mat4d.prototype, 'matrix', {
    get: function () {
      return this.matrix_ntz8bm$_0;
    },
    set: function (matrix) {
      this.matrix_ntz8bm$_0 = matrix;
    }
  });
  Object.defineProperty(Mat4d.prototype, 'offset', {
    get: function () {
      return this.offset_7ocvpo$_0;
    },
    set: function (offset) {
      this.offset_7ocvpo$_0 = offset;
    }
  });
  Mat4d.prototype.translate_yvo9jy$ = function (tx, ty, tz) {
    for (var i = 0; i <= 3; i++) {
      var mi = this.offset + i | 0;
      this.matrix[12 + mi | 0] = this.matrix[12 + mi | 0] + (this.matrix[mi] * tx + this.matrix[4 + mi | 0] * ty + this.matrix[8 + mi | 0] * tz);
    }
    return this;
  };
  Mat4d.prototype.translate_czzhiw$ = function (t) {
    return this.translate_yvo9jy$(t.x, t.y, t.z);
  };
  Mat4d.prototype.translate_p4gs15$ = function (tx, ty, tz, result) {
    for (var i = 0; i <= 11; i++) {
      result.matrix[result.offset + i | 0] = this.matrix[this.offset + i | 0];
    }
    for (var i_0 = 0; i_0 <= 3; i_0++) {
      var mi = this.offset + i_0 | 0;
      result.matrix[result.offset + 12 + i_0 | 0] = this.matrix[mi] * tx + this.matrix[4 + mi | 0] * ty + this.matrix[8 + mi | 0] * tz + this.matrix[12 + mi | 0];
    }
    return result;
  };
  Mat4d.prototype.rotate_6y0v78$ = function (angleDeg, axX, axY, axZ) {
    Mat4d$Companion_getInstance().tmpMatLock_0;
    Mat4d$Companion_getInstance().tmpMatA_0.setRotate_6y0v78$(angleDeg, axX, axY, axZ);
    return this.set_d4zu6l$(this.mul_u47j3u$(Mat4d$Companion_getInstance().tmpMatA_0, Mat4d$Companion_getInstance().tmpMatB_0));
  };
  Mat4d.prototype.rotate_5820x2$ = function (angleDeg, axis) {
    return this.rotate_6y0v78$(angleDeg, axis.x, axis.y, axis.z);
  };
  Mat4d.prototype.rotate_app323$ = function (angleDeg, axX, axY, axZ, result) {
    Mat4d$Companion_getInstance().tmpMatLock_0;
    Mat4d$Companion_getInstance().tmpMatA_0.setRotate_6y0v78$(angleDeg, axX, axY, axZ);
    return this.mul_u47j3u$(Mat4d$Companion_getInstance().tmpMatA_0, result);
  };
  Mat4d.prototype.rotate_wwd6w1$ = function (angleDeg, axis, result) {
    return this.rotate_app323$(angleDeg, axis.x, axis.y, axis.z, result);
  };
  Mat4d.prototype.scale_yvo9jy$ = function (sx, sy, sz) {
    for (var i = 0; i <= 3; i++) {
      var mi = this.offset + i | 0;
      this.matrix[mi] = this.matrix[mi] * sx;
      this.matrix[4 + mi | 0] = this.matrix[4 + mi | 0] * sy;
      this.matrix[8 + mi | 0] = this.matrix[8 + mi | 0] * sz;
    }
    return this;
  };
  Mat4d.prototype.scale_czzhiw$ = function (scale) {
    return this.scale_yvo9jy$(scale.x, scale.y, scale.z);
  };
  Mat4d.prototype.scale_p4gs15$ = function (sx, sy, sz, result) {
    for (var i = 0; i <= 3; i++) {
      var smi = result.offset + i | 0;
      var mi = this.offset + i | 0;
      result.matrix[smi] = this.matrix[mi] * sx;
      result.matrix[4 + smi | 0] = this.matrix[4 + mi | 0] * sy;
      result.matrix[8 + smi | 0] = this.matrix[8 + mi | 0] * sz;
      result.matrix[12 + smi | 0] = this.matrix[12 + mi | 0];
    }
    return result;
  };
  Mat4d.prototype.transpose = function () {
    Mat4d$Companion_getInstance().tmpMatLock_0;
    return this.set_d4zu6l$(this.transpose_d4zu6l$(Mat4d$Companion_getInstance().tmpMatA_0));
  };
  Mat4d.prototype.transpose_d4zu6l$ = function (result) {
    for (var i = 0; i <= 3; i++) {
      var mBase = (i * 4 | 0) + this.offset | 0;
      result.matrix[i + result.offset | 0] = this.matrix[mBase];
      result.matrix[i + 4 + result.offset | 0] = this.matrix[mBase + 1 | 0];
      result.matrix[i + 8 + result.offset | 0] = this.matrix[mBase + 2 | 0];
      result.matrix[i + 12 + result.offset | 0] = this.matrix[mBase + 3 | 0];
    }
    return result;
  };
  Mat4d.prototype.invert_14dthe$ = function (eps) {
    if (eps === void 0)
      eps = 0.0;
    Mat4d$Companion_getInstance().tmpMatLock_0;
    var $receiver = this.invert_23yxad$(Mat4d$Companion_getInstance().tmpMatA_0, eps);
    if ($receiver)
      this.set_d4zu6l$(Mat4d$Companion_getInstance().tmpMatA_0);
    return $receiver;
  };
  Mat4d.prototype.invert_23yxad$ = function (result, eps) {
    if (eps === void 0)
      eps = 0.0;
    var src0 = this.matrix[this.offset + 0 | 0];
    var src4 = this.matrix[this.offset + 1 | 0];
    var src8 = this.matrix[this.offset + 2 | 0];
    var src12 = this.matrix[this.offset + 3 | 0];
    var src1 = this.matrix[this.offset + 4 | 0];
    var src5 = this.matrix[this.offset + 5 | 0];
    var src9 = this.matrix[this.offset + 6 | 0];
    var src13 = this.matrix[this.offset + 7 | 0];
    var src2 = this.matrix[this.offset + 8 | 0];
    var src6 = this.matrix[this.offset + 9 | 0];
    var src10 = this.matrix[this.offset + 10 | 0];
    var src14 = this.matrix[this.offset + 11 | 0];
    var src3 = this.matrix[this.offset + 12 | 0];
    var src7 = this.matrix[this.offset + 13 | 0];
    var src11 = this.matrix[this.offset + 14 | 0];
    var src15 = this.matrix[this.offset + 15 | 0];
    var atmp0 = src10 * src15;
    var atmp1 = src11 * src14;
    var atmp2 = src9 * src15;
    var atmp3 = src11 * src13;
    var atmp4 = src9 * src14;
    var atmp5 = src10 * src13;
    var atmp6 = src8 * src15;
    var atmp7 = src11 * src12;
    var atmp8 = src8 * src14;
    var atmp9 = src10 * src12;
    var atmp10 = src8 * src13;
    var atmp11 = src9 * src12;
    var dst0 = atmp0 * src5 + atmp3 * src6 + atmp4 * src7 - (atmp1 * src5 + atmp2 * src6 + atmp5 * src7);
    var dst1 = atmp1 * src4 + atmp6 * src6 + atmp9 * src7 - (atmp0 * src4 + atmp7 * src6 + atmp8 * src7);
    var dst2 = atmp2 * src4 + atmp7 * src5 + atmp10 * src7 - (atmp3 * src4 + atmp6 * src5 + atmp11 * src7);
    var dst3 = atmp5 * src4 + atmp8 * src5 + atmp11 * src6 - (atmp4 * src4 + atmp9 * src5 + atmp10 * src6);
    var dst4 = atmp1 * src1 + atmp2 * src2 + atmp5 * src3 - (atmp0 * src1 + atmp3 * src2 + atmp4 * src3);
    var dst5 = atmp0 * src0 + atmp7 * src2 + atmp8 * src3 - (atmp1 * src0 + atmp6 * src2 + atmp9 * src3);
    var dst6 = atmp3 * src0 + atmp6 * src1 + atmp11 * src3 - (atmp2 * src0 + atmp7 * src1 + atmp10 * src3);
    var dst7 = atmp4 * src0 + atmp9 * src1 + atmp10 * src2 - (atmp5 * src0 + atmp8 * src1 + atmp11 * src2);
    var btmp0 = src2 * src7;
    var btmp1 = src3 * src6;
    var btmp2 = src1 * src7;
    var btmp3 = src3 * src5;
    var btmp4 = src1 * src6;
    var btmp5 = src2 * src5;
    var btmp6 = src0 * src7;
    var btmp7 = src3 * src4;
    var btmp8 = src0 * src6;
    var btmp9 = src2 * src4;
    var btmp10 = src0 * src5;
    var btmp11 = src1 * src4;
    var dst8 = btmp0 * src13 + btmp3 * src14 + btmp4 * src15 - (btmp1 * src13 + btmp2 * src14 + btmp5 * src15);
    var dst9 = btmp1 * src12 + btmp6 * src14 + btmp9 * src15 - (btmp0 * src12 + btmp7 * src14 + btmp8 * src15);
    var dst10 = btmp2 * src12 + btmp7 * src13 + btmp10 * src15 - (btmp3 * src12 + btmp6 * src13 + btmp11 * src15);
    var dst11 = btmp5 * src12 + btmp8 * src13 + btmp11 * src14 - (btmp4 * src12 + btmp9 * src13 + btmp10 * src14);
    var dst12 = btmp2 * src10 + btmp5 * src11 + btmp1 * src9 - (btmp4 * src11 + btmp0 * src9 + btmp3 * src10);
    var dst13 = btmp8 * src11 + btmp0 * src8 + btmp7 * src10 - (btmp6 * src10 + btmp9 * src11 + btmp1 * src8);
    var dst14 = btmp6 * src9 + btmp11 * src11 + btmp3 * src8 - (btmp10 * src11 + btmp2 * src8 + btmp7 * src9);
    var dst15 = btmp10 * src10 + btmp4 * src8 + btmp9 * src9 - (btmp8 * src9 + btmp11 * src10 + btmp5 * src8);
    var det = src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;
    if (Math_0.abs(det) <= eps) {
      return false;
    }var invdet = 1.0 / det;
    result.matrix[result.offset] = dst0 * invdet;
    result.matrix[1 + result.offset | 0] = dst1 * invdet;
    result.matrix[2 + result.offset | 0] = dst2 * invdet;
    result.matrix[3 + result.offset | 0] = dst3 * invdet;
    result.matrix[4 + result.offset | 0] = dst4 * invdet;
    result.matrix[5 + result.offset | 0] = dst5 * invdet;
    result.matrix[6 + result.offset | 0] = dst6 * invdet;
    result.matrix[7 + result.offset | 0] = dst7 * invdet;
    result.matrix[8 + result.offset | 0] = dst8 * invdet;
    result.matrix[9 + result.offset | 0] = dst9 * invdet;
    result.matrix[10 + result.offset | 0] = dst10 * invdet;
    result.matrix[11 + result.offset | 0] = dst11 * invdet;
    result.matrix[12 + result.offset | 0] = dst12 * invdet;
    result.matrix[13 + result.offset | 0] = dst13 * invdet;
    result.matrix[14 + result.offset | 0] = dst14 * invdet;
    result.matrix[15 + result.offset | 0] = dst15 * invdet;
    return true;
  };
  Mat4d.prototype.transform_w1lst9$ = function (vec, w) {
    if (w === void 0)
      w = 1.0;
    var x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + w * this.get_vux9f0$(0, 3);
    var y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + w * this.get_vux9f0$(1, 3);
    var z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + w * this.get_vux9f0$(2, 3);
    return vec.set_y2kzbl$(x, y, z);
  };
  Mat4d.prototype.transform_a6wx89$ = function (vec, w, result) {
    if (w === void 0)
      w = 1.0;
    result.x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + w * this.get_vux9f0$(0, 3);
    result.y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + w * this.get_vux9f0$(1, 3);
    result.z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + w * this.get_vux9f0$(2, 3);
    return result;
  };
  Mat4d.prototype.transform_5s4mpv$ = function (vec) {
    var x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + vec.w * this.get_vux9f0$(0, 3);
    var y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + vec.w * this.get_vux9f0$(1, 3);
    var z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + vec.w * this.get_vux9f0$(2, 3);
    var w = vec.x * this.get_vux9f0$(3, 0) + vec.y * this.get_vux9f0$(3, 1) + vec.z * this.get_vux9f0$(3, 2) + vec.w * this.get_vux9f0$(3, 3);
    return vec.set_7b5o5w$(x, y, z, w);
  };
  Mat4d.prototype.transform_uzu8ww$ = function (vec, result) {
    result.x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + vec.w * this.get_vux9f0$(0, 3);
    result.y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + vec.w * this.get_vux9f0$(1, 3);
    result.z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + vec.w * this.get_vux9f0$(2, 3);
    result.w = vec.x * this.get_vux9f0$(3, 0) + vec.y * this.get_vux9f0$(3, 1) + vec.z * this.get_vux9f0$(3, 2) + vec.w * this.get_vux9f0$(3, 3);
    return result;
  };
  Mat4d.prototype.transform_j7uy7i$ = function (vec, w) {
    if (w === void 0)
      w = 1.0;
    var x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + w * this.get_vux9f0$(0, 3);
    var y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + w * this.get_vux9f0$(1, 3);
    var z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + w * this.get_vux9f0$(2, 3);
    return vec.set_yvo9jy$(x, y, z);
  };
  Mat4d.prototype.transform_3odno2$ = function (vec, w, result) {
    if (w === void 0)
      w = 1.0;
    result.x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + w * this.get_vux9f0$(0, 3);
    result.y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + w * this.get_vux9f0$(1, 3);
    result.z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + w * this.get_vux9f0$(2, 3);
    return result;
  };
  Mat4d.prototype.transform_5s4mpx$ = function (vec) {
    var x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + vec.w * this.get_vux9f0$(0, 3);
    var y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + vec.w * this.get_vux9f0$(1, 3);
    var z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + vec.w * this.get_vux9f0$(2, 3);
    var w = vec.x * this.get_vux9f0$(3, 0) + vec.y * this.get_vux9f0$(3, 1) + vec.z * this.get_vux9f0$(3, 2) + vec.w * this.get_vux9f0$(3, 3);
    return vec.set_6y0v78$(x, y, z, w);
  };
  Mat4d.prototype.transform_2x9ggw$ = function (vec, result) {
    result.x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + vec.w * this.get_vux9f0$(0, 3);
    result.y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + vec.w * this.get_vux9f0$(1, 3);
    result.z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + vec.w * this.get_vux9f0$(2, 3);
    result.w = vec.x * this.get_vux9f0$(3, 0) + vec.y * this.get_vux9f0$(3, 1) + vec.z * this.get_vux9f0$(3, 2) + vec.w * this.get_vux9f0$(3, 3);
    return result;
  };
  Mat4d.prototype.add_d4zu6l$ = function (other) {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = this.matrix[this.offset + i | 0] + other.matrix[other.offset + i | 0];
    }
    return this;
  };
  Mat4d.prototype.mul_d4zu6l$ = function (other) {
    Mat4d$Companion_getInstance().tmpMatLock_0;
    this.mul_u47j3u$(other, Mat4d$Companion_getInstance().tmpMatA_0);
    return this.set_d4zu6l$(Mat4d$Companion_getInstance().tmpMatA_0);
  };
  Mat4d.prototype.mul_u47j3u$ = function (other, result) {
    for (var i = 0; i <= 3; i++) {
      for (var j = 0; j <= 3; j++) {
        var x = 0.0;
        for (var k = 0; k <= 3; k++) {
          x += this.matrix[this.offset + j + (k * 4 | 0) | 0] * other.matrix[other.offset + (i * 4 | 0) + k | 0];
        }
        result.matrix[result.offset + (i * 4 | 0) + j | 0] = x;
      }
    }
    return result;
  };
  Mat4d.prototype.set_d4zu6l$ = function (other) {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = other.matrix[other.offset + i | 0];
    }
    return this;
  };
  Mat4d.prototype.set_d4zu6j$ = function (other) {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = other.matrix[other.offset + i | 0];
    }
    return this;
  };
  Mat4d.prototype.set_d3e2cz$ = function (doubles) {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = doubles.get_za3lpa$(i);
    }
    return this;
  };
  Mat4d.prototype.setZero = function () {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = 0.0;
    }
    return this;
  };
  Mat4d.prototype.setIdentity = function () {
    for (var i = 1; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = 0.0;
    }
    this.matrix[this.offset] = 1.0;
    this.matrix[this.offset + 5 | 0] = 1.0;
    this.matrix[this.offset + 10 | 0] = 1.0;
    this.matrix[this.offset + 15 | 0] = 1.0;
    return this;
  };
  Mat4d.prototype.setRotate_6y0v78$ = function (rotA, axX, axY, axZ) {
    var a = rotA * package$math.DEG_2_RAD;
    var x = axX;
    var y = axY;
    var z = axZ;
    this.matrix[this.offset + 3 | 0] = 0.0;
    this.matrix[this.offset + 7 | 0] = 0.0;
    this.matrix[this.offset + 11 | 0] = 0.0;
    this.matrix[this.offset + 12 | 0] = 0.0;
    this.matrix[this.offset + 13 | 0] = 0.0;
    this.matrix[this.offset + 14 | 0] = 0.0;
    this.matrix[this.offset + 15 | 0] = 1.0;
    var s = Math_0.sin(a);
    var c = Math_0.cos(a);
    if (1.0 === x && 0.0 === y && 0.0 === z) {
      this.matrix[this.offset + 5 | 0] = c;
      this.matrix[this.offset + 10 | 0] = c;
      this.matrix[this.offset + 6 | 0] = s;
      this.matrix[this.offset + 9 | 0] = -s;
      this.matrix[this.offset + 1 | 0] = 0.0;
      this.matrix[this.offset + 2 | 0] = 0.0;
      this.matrix[this.offset + 4 | 0] = 0.0;
      this.matrix[this.offset + 8 | 0] = 0.0;
      this.matrix[this.offset + 0 | 0] = 1.0;
    } else if (0.0 === x && 1.0 === y && 0.0 === z) {
      this.matrix[this.offset + 0 | 0] = c;
      this.matrix[this.offset + 10 | 0] = c;
      this.matrix[this.offset + 8 | 0] = s;
      this.matrix[this.offset + 2 | 0] = -s;
      this.matrix[this.offset + 1 | 0] = 0.0;
      this.matrix[this.offset + 4 | 0] = 0.0;
      this.matrix[this.offset + 6 | 0] = 0.0;
      this.matrix[this.offset + 9 | 0] = 0.0;
      this.matrix[this.offset + 5 | 0] = 1.0;
    } else if (0.0 === x && 0.0 === y && 1.0 === z) {
      this.matrix[this.offset + 0 | 0] = c;
      this.matrix[this.offset + 5 | 0] = c;
      this.matrix[this.offset + 1 | 0] = s;
      this.matrix[this.offset + 4 | 0] = -s;
      this.matrix[this.offset + 2 | 0] = 0.0;
      this.matrix[this.offset + 6 | 0] = 0.0;
      this.matrix[this.offset + 8 | 0] = 0.0;
      this.matrix[this.offset + 9 | 0] = 0.0;
      this.matrix[this.offset + 10 | 0] = 1.0;
    } else {
      var x_0 = x * x + y * y + z * z;
      var len = Math_0.sqrt(x_0);
      var eps;
      eps = package$math.FUZZY_EQ_D;
      var $receiver = len - 1.0;
      if (!(Math_0.abs($receiver) <= eps)) {
        var recipLen = 1.0 / len;
        x *= recipLen;
        y *= recipLen;
        z *= recipLen;
      }var nc = 1.0 - c;
      var xy = x * y;
      var yz = y * z;
      var zx = z * x;
      var xs = x * s;
      var ys = y * s;
      var zs = z * s;
      this.matrix[this.offset + 0 | 0] = x * x * nc + c;
      this.matrix[this.offset + 4 | 0] = xy * nc - zs;
      this.matrix[this.offset + 8 | 0] = zx * nc + ys;
      this.matrix[this.offset + 1 | 0] = xy * nc + zs;
      this.matrix[this.offset + 5 | 0] = y * y * nc + c;
      this.matrix[this.offset + 9 | 0] = yz * nc - xs;
      this.matrix[this.offset + 2 | 0] = zx * nc - ys;
      this.matrix[this.offset + 6 | 0] = yz * nc + xs;
      this.matrix[this.offset + 10 | 0] = z * z * nc + c;
    }
    return this;
  };
  Mat4d.prototype.setRotate_czzhi1$ = function (quaternion) {
    var r = quaternion.w;
    var i = quaternion.x;
    var j = quaternion.y;
    var k = quaternion.z;
    var x = r * r + i * i + j * j + k * k;
    var s = Math_0.sqrt(x);
    s = 1.0 / (s * s);
    this.set_224j3y$(0, 0, 1.0 - 2 * s * (j * j + k * k));
    this.set_224j3y$(0, 1, 2.0 * s * (i * j - k * r));
    this.set_224j3y$(0, 2, 2.0 * s * (i * k + j * r));
    this.set_224j3y$(0, 3, 0.0);
    this.set_224j3y$(1, 0, 2.0 * s * (i * j + k * r));
    this.set_224j3y$(1, 1, 1.0 - 2 * s * (i * i + k * k));
    this.set_224j3y$(1, 2, 2.0 * s * (j * k - i * r));
    this.set_224j3y$(1, 3, 0.0);
    this.set_224j3y$(2, 0, 2.0 * s * (i * k - j * r));
    this.set_224j3y$(2, 1, 2.0 * s * (j * k + i * r));
    this.set_224j3y$(2, 2, 1.0 - 2 * s * (i * i + j * j));
    this.set_224j3y$(2, 3, 0.0);
    this.set_224j3y$(3, 0, 0.0);
    this.set_224j3y$(3, 1, 0.0);
    this.set_224j3y$(3, 2, 0.0);
    this.set_224j3y$(3, 3, 1.0);
    return this;
  };
  Mat4d.prototype.setLookAt_n440fu$ = function (position, lookAt, up) {
    return this.setLookAt_enh5fx$_0(position.x, position.y, position.z, lookAt.x, lookAt.y, lookAt.z, up.x, up.y, up.z);
  };
  Mat4d.prototype.setLookAt_8ro9c0$ = function (position, lookAt, up) {
    return this.setLookAt_enh5fx$_0(position.x, position.y, position.z, lookAt.x, lookAt.y, lookAt.z, up.x, up.y, up.z);
  };
  Mat4d.prototype.setLookAt_enh5fx$_0 = function (px, py, pz, lx, ly, lz, upx, upy, upz) {
    var fx = lx - px;
    var fy = ly - py;
    var fz = lz - pz;
    var x = fx * fx + fy * fy + fz * fz;
    var rlf = 1.0 / Math_0.sqrt(x);
    fx *= rlf;
    fy *= rlf;
    fz *= rlf;
    var sx = fy * upz - fz * upy;
    var sy = fz * upx - fx * upz;
    var sz = fx * upy - fy * upx;
    var x_0 = sx * sx + sy * sy + sz * sz;
    var rls = 1.0 / Math_0.sqrt(x_0);
    sx *= rls;
    sy *= rls;
    sz *= rls;
    var ux = sy * fz - sz * fy;
    var uy = sz * fx - sx * fz;
    var uz = sx * fy - sy * fx;
    this.matrix[this.offset + 0 | 0] = sx;
    this.matrix[this.offset + 1 | 0] = ux;
    this.matrix[this.offset + 2 | 0] = -fx;
    this.matrix[this.offset + 3 | 0] = 0.0;
    this.matrix[this.offset + 4 | 0] = sy;
    this.matrix[this.offset + 5 | 0] = uy;
    this.matrix[this.offset + 6 | 0] = -fy;
    this.matrix[this.offset + 7 | 0] = 0.0;
    this.matrix[this.offset + 8 | 0] = sz;
    this.matrix[this.offset + 9 | 0] = uz;
    this.matrix[this.offset + 10 | 0] = -fz;
    this.matrix[this.offset + 11 | 0] = 0.0;
    this.matrix[this.offset + 12 | 0] = 0.0;
    this.matrix[this.offset + 13 | 0] = 0.0;
    this.matrix[this.offset + 14 | 0] = 0.0;
    this.matrix[this.offset + 15 | 0] = 1.0;
    return this.translate_yvo9jy$(-px, -py, -pz);
  };
  Mat4d.prototype.setOrthographic_w8lrqs$ = function (left, right, bottom, top, near, far) {
    return this.setOrthographic_15yvbs$(left, right, bottom, top, near, far);
  };
  Mat4d.prototype.setOrthographic_15yvbs$ = function (left, right, bottom, top, near, far) {
    if (left === right) {
      throw IllegalArgumentException_init('left == right');
    }if (bottom === top) {
      throw IllegalArgumentException_init('bottom == top');
    }if (near === far) {
      throw IllegalArgumentException_init('near == far');
    }var width = 1.0 / (right - left);
    var height = 1.0 / (top - bottom);
    var depth = 1.0 / (far - near);
    var x = 2.0 * width;
    var y = 2.0 * height;
    var z = -2.0 * depth;
    var tx = -(right + left) * width;
    var ty = -(top + bottom) * height;
    var tz = -(far + near) * depth;
    this.matrix[this.offset + 0 | 0] = x;
    this.matrix[this.offset + 5 | 0] = y;
    this.matrix[this.offset + 10 | 0] = z;
    this.matrix[this.offset + 12 | 0] = tx;
    this.matrix[this.offset + 13 | 0] = ty;
    this.matrix[this.offset + 14 | 0] = tz;
    this.matrix[this.offset + 15 | 0] = 1.0;
    this.matrix[this.offset + 1 | 0] = 0.0;
    this.matrix[this.offset + 2 | 0] = 0.0;
    this.matrix[this.offset + 3 | 0] = 0.0;
    this.matrix[this.offset + 4 | 0] = 0.0;
    this.matrix[this.offset + 6 | 0] = 0.0;
    this.matrix[this.offset + 7 | 0] = 0.0;
    this.matrix[this.offset + 8 | 0] = 0.0;
    this.matrix[this.offset + 9 | 0] = 0.0;
    this.matrix[this.offset + 11 | 0] = 0.0;
    return this;
  };
  Mat4d.prototype.setPerspective_7b5o5w$ = function (fovy, aspect, near, far) {
    return this.setPerspective_6y0v78$(fovy, aspect, near, far);
  };
  Mat4d.prototype.setPerspective_6y0v78$ = function (fovy, aspect, near, far) {
    var x = fovy * (math.PI / 360.0);
    var f = 1.0 / Math_0.tan(x);
    var rangeReciprocal = 1.0 / (near - far);
    this.matrix[this.offset + 0 | 0] = f / aspect;
    this.matrix[this.offset + 1 | 0] = 0.0;
    this.matrix[this.offset + 2 | 0] = 0.0;
    this.matrix[this.offset + 3 | 0] = 0.0;
    this.matrix[this.offset + 4 | 0] = 0.0;
    this.matrix[this.offset + 5 | 0] = f;
    this.matrix[this.offset + 6 | 0] = 0.0;
    this.matrix[this.offset + 7 | 0] = 0.0;
    this.matrix[this.offset + 8 | 0] = 0.0;
    this.matrix[this.offset + 9 | 0] = 0.0;
    this.matrix[this.offset + 10 | 0] = (far + near) * rangeReciprocal;
    this.matrix[this.offset + 11 | 0] = -1.0;
    this.matrix[this.offset + 12 | 0] = 0.0;
    this.matrix[this.offset + 13 | 0] = 0.0;
    this.matrix[this.offset + 14 | 0] = 2.0 * far * near * rangeReciprocal;
    this.matrix[this.offset + 15 | 0] = 0.0;
    return this;
  };
  Mat4d.prototype.get_za3lpa$ = function (i) {
    return this.matrix[this.offset + i | 0];
  };
  Mat4d.prototype.get_vux9f0$ = function (row, col) {
    return this.matrix[this.offset + (col * 4 | 0) + row | 0];
  };
  Mat4d.prototype.set_5wr77w$ = function (i, value) {
    this.matrix[this.offset + i | 0] = value;
  };
  Mat4d.prototype.set_224j3y$ = function (row, col, value) {
    this.matrix[this.offset + (col * 4 | 0) + row | 0] = value;
  };
  Mat4d.prototype.setRow_umtdzk$ = function (row, vec, w) {
    this.set_224j3y$(row, 0, vec.x);
    this.set_224j3y$(row, 1, vec.y);
    this.set_224j3y$(row, 2, vec.z);
    this.set_224j3y$(row, 3, w);
  };
  Mat4d.prototype.setRow_ky00rh$ = function (row, value) {
    this.set_224j3y$(row, 0, value.x);
    this.set_224j3y$(row, 1, value.y);
    this.set_224j3y$(row, 2, value.z);
    this.set_224j3y$(row, 3, value.w);
  };
  Mat4d.prototype.getRow_8irwu3$ = function (row, result) {
    result.x = this.get_vux9f0$(row, 0);
    result.y = this.get_vux9f0$(row, 1);
    result.z = this.get_vux9f0$(row, 2);
    result.w = this.get_vux9f0$(row, 3);
    return result;
  };
  Mat4d.prototype.setCol_umtdzk$ = function (col, vec, w) {
    this.set_224j3y$(0, col, vec.x);
    this.set_224j3y$(1, col, vec.y);
    this.set_224j3y$(2, col, vec.z);
    this.set_224j3y$(3, col, w);
  };
  Mat4d.prototype.setCol_ky00rh$ = function (col, value) {
    this.set_224j3y$(0, col, value.x);
    this.set_224j3y$(1, col, value.y);
    this.set_224j3y$(2, col, value.z);
    this.set_224j3y$(3, col, value.w);
  };
  Mat4d.prototype.getCol_8irwu3$ = function (col, result) {
    result.x = this.get_vux9f0$(0, col);
    result.y = this.get_vux9f0$(1, col);
    result.z = this.get_vux9f0$(2, col);
    result.w = this.get_vux9f0$(3, col);
    return result;
  };
  Mat4d.prototype.getOrigin_5s4mqs$ = function (result) {
    result.x = this.get_vux9f0$(0, 3);
    result.y = this.get_vux9f0$(1, 3);
    result.z = this.get_vux9f0$(2, 3);
    return result;
  };
  Mat4d.prototype.getRotation_5s4mpx$ = function (result) {
    var tmp$;
    var trace = this.get_vux9f0$(0, 0) + this.get_vux9f0$(1, 1) + this.get_vux9f0$(2, 2);
    if (trace > 0.0) {
      var x = trace + 1.0;
      var s = Math_0.sqrt(x);
      result.w = s * 0.5;
      s = 0.5 / s;
      result.x = (this.get_vux9f0$(2, 1) - this.get_vux9f0$(1, 2)) * s;
      result.y = (this.get_vux9f0$(0, 2) - this.get_vux9f0$(2, 0)) * s;
      result.z = (this.get_vux9f0$(1, 0) - this.get_vux9f0$(0, 1)) * s;
    } else {
      if (this.get_vux9f0$(0, 0) < this.get_vux9f0$(1, 1)) {
        if (this.get_vux9f0$(1, 1) < this.get_vux9f0$(2, 2)) {
          tmp$ = 2;
        } else {
          tmp$ = 1;
        }
      } else {
        if (this.get_vux9f0$(0, 0) < this.get_vux9f0$(2, 2)) {
          tmp$ = 2;
        } else {
          tmp$ = 0;
        }
      }
      var i = tmp$;
      var j = (i + 1 | 0) % 3;
      var k = (i + 2 | 0) % 3;
      var x_0 = this.get_vux9f0$(i, i) - this.get_vux9f0$(j, j) - this.get_vux9f0$(k, k) + 1.0;
      var s_0 = Math_0.sqrt(x_0);
      result.set_5wr77w$(i, s_0 * 0.5);
      s_0 = 0.5 / s_0;
      result.w = (this.get_vux9f0$(k, j) - this.get_vux9f0$(j, k)) * s_0;
      result.set_5wr77w$(j, (this.get_vux9f0$(j, i) + this.get_vux9f0$(i, j)) * s_0);
      result.set_5wr77w$(k, (this.get_vux9f0$(k, i) + this.get_vux9f0$(i, k)) * s_0);
    }
    return result;
  };
  Mat4d.prototype.toBuffer_he122g$ = function (buffer) {
    for (var i = 0; i < 16; i++) {
      buffer.put_mx4ult$(this.matrix[this.offset + i | 0]);
    }
    buffer.flip();
    return buffer;
  };
  Mat4d.prototype.toList = function () {
    var list = ArrayList_init_0();
    for (var i = 0; i <= 15; i++) {
      var element = this.matrix[this.offset + i | 0];
      list.add_11rb$(element);
    }
    return list;
  };
  function Mat4d$Companion() {
    Mat4d$Companion_instance = this;
    this.tmpMatLock_0 = new Any();
    this.tmpMatA_0 = new Mat4d();
    this.tmpMatB_0 = new Mat4d();
  }
  Mat4d$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Mat4d$Companion_instance = null;
  function Mat4d$Companion_getInstance() {
    if (Mat4d$Companion_instance === null) {
      new Mat4d$Companion();
    }return Mat4d$Companion_instance;
  }
  Mat4d.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Mat4d',
    interfaces: []
  };
  function Mat4dStack(stackSize) {
    Mat4dStack$Companion_getInstance();
    if (stackSize === void 0)
      stackSize = 32;
    Mat4d.call(this);
    this.stackSize = stackSize;
    this.stackIndex_51r8af$_0 = 0;
    this.matrix = new Float64Array(16 * this.stackSize | 0);
    this.setIdentity();
  }
  function Mat4dStack$Companion() {
    Mat4dStack$Companion_instance = this;
    this.DEFAULT_STACK_SIZE = 32;
  }
  Mat4dStack$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Mat4dStack$Companion_instance = null;
  function Mat4dStack$Companion_getInstance() {
    if (Mat4dStack$Companion_instance === null) {
      new Mat4dStack$Companion();
    }return Mat4dStack$Companion_instance;
  }
  Object.defineProperty(Mat4dStack.prototype, 'stackIndex', {
    get: function () {
      return this.stackIndex_51r8af$_0;
    },
    set: function (value) {
      this.stackIndex_51r8af$_0 = value;
      this.offset = value * 16 | 0;
    }
  });
  Mat4dStack.prototype.push = function () {
    if (this.stackIndex >= this.stackSize) {
      throw KoolException_init('Matrix stack overflow');
    }for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + 16 + i | 0] = this.matrix[this.offset + i | 0];
    }
    this.stackIndex = this.stackIndex + 1 | 0;
    return this;
  };
  Mat4dStack.prototype.pop = function () {
    if (this.stackIndex <= 0) {
      throw KoolException_init('Matrix stack underflow');
    }this.stackIndex = this.stackIndex - 1 | 0;
    return this;
  };
  Mat4dStack.prototype.reset = function () {
    this.stackIndex = 0;
    this.setIdentity();
    return this;
  };
  Mat4dStack.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Mat4dStack',
    interfaces: [Mat4d]
  };
  function Mat4f() {
    Mat4f$Companion_getInstance();
    this.matrix_cl37xc$_0 = new Float32Array(16);
    this.offset_ix8w3y$_0 = 0;
    this.setIdentity();
  }
  Object.defineProperty(Mat4f.prototype, 'matrix', {
    get: function () {
      return this.matrix_cl37xc$_0;
    },
    set: function (matrix) {
      this.matrix_cl37xc$_0 = matrix;
    }
  });
  Object.defineProperty(Mat4f.prototype, 'offset', {
    get: function () {
      return this.offset_ix8w3y$_0;
    },
    set: function (offset) {
      this.offset_ix8w3y$_0 = offset;
    }
  });
  Mat4f.prototype.translate_y2kzbl$ = function (tx, ty, tz) {
    for (var i = 0; i <= 3; i++) {
      var mi = this.offset + i | 0;
      this.matrix[12 + mi | 0] = this.matrix[12 + mi | 0] + (this.matrix[mi] * tx + this.matrix[4 + mi | 0] * ty + this.matrix[8 + mi | 0] * tz);
    }
    return this;
  };
  Mat4f.prototype.translate_czzhiu$ = function (t) {
    return this.translate_y2kzbl$(t.x, t.y, t.z);
  };
  Mat4f.prototype.translate_g84k6w$ = function (tx, ty, tz, result) {
    for (var i = 0; i <= 11; i++) {
      result.matrix[result.offset + i | 0] = this.matrix[this.offset + i | 0];
    }
    for (var i_0 = 0; i_0 <= 3; i_0++) {
      var mi = this.offset + i_0 | 0;
      result.matrix[result.offset + 12 + i_0 | 0] = this.matrix[mi] * tx + this.matrix[4 + mi | 0] * ty + this.matrix[8 + mi | 0] * tz + this.matrix[12 + mi | 0];
    }
    return result;
  };
  Mat4f.prototype.rotate_7b5o5w$ = function (angleDeg, axX, axY, axZ) {
    Mat4f$Companion_getInstance().tmpMatLock_0;
    Mat4f$Companion_getInstance().tmpMatA_0.setRotate_7b5o5w$(angleDeg, axX, axY, axZ);
    return this.set_d4zu6j$(this.mul_93v2ma$(Mat4f$Companion_getInstance().tmpMatA_0, Mat4f$Companion_getInstance().tmpMatB_0));
  };
  Mat4f.prototype.rotate_ad55pp$ = function (angleDeg, axis) {
    return this.rotate_7b5o5w$(angleDeg, axis.x, axis.y, axis.z);
  };
  Mat4f.prototype.rotate_c240mt$ = function (angleDeg, axX, axY, axZ, result) {
    Mat4f$Companion_getInstance().tmpMatLock_0;
    Mat4f$Companion_getInstance().tmpMatA_0.setRotate_7b5o5w$(angleDeg, axX, axY, axZ);
    return this.mul_93v2ma$(Mat4f$Companion_getInstance().tmpMatA_0, result);
  };
  Mat4f.prototype.rotate_phvhhm$ = function (angleDeg, axis, result) {
    return this.rotate_c240mt$(angleDeg, axis.x, axis.y, axis.z, result);
  };
  Mat4f.prototype.scale_y2kzbl$ = function (sx, sy, sz) {
    for (var i = 0; i <= 3; i++) {
      var mi = this.offset + i | 0;
      this.matrix[mi] = this.matrix[mi] * sx;
      this.matrix[4 + mi | 0] = this.matrix[4 + mi | 0] * sy;
      this.matrix[8 + mi | 0] = this.matrix[8 + mi | 0] * sz;
    }
    return this;
  };
  Mat4f.prototype.scale_czzhiu$ = function (scale) {
    return this.scale_y2kzbl$(scale.x, scale.y, scale.z);
  };
  Mat4f.prototype.scale_g84k6w$ = function (sx, sy, sz, result) {
    for (var i = 0; i <= 3; i++) {
      var smi = result.offset + i | 0;
      var mi = this.offset + i | 0;
      result.matrix[smi] = this.matrix[mi] * sx;
      result.matrix[4 + smi | 0] = this.matrix[4 + mi | 0] * sy;
      result.matrix[8 + smi | 0] = this.matrix[8 + mi | 0] * sz;
      result.matrix[12 + smi | 0] = this.matrix[12 + mi | 0];
    }
    return result;
  };
  Mat4f.prototype.transpose = function () {
    Mat4f$Companion_getInstance().tmpMatLock_0;
    return this.set_d4zu6j$(this.transpose_d4zu6j$(Mat4f$Companion_getInstance().tmpMatA_0));
  };
  Mat4f.prototype.transpose_d4zu6j$ = function (result) {
    for (var i = 0; i <= 3; i++) {
      var mBase = (i * 4 | 0) + this.offset | 0;
      result.matrix[i + result.offset | 0] = this.matrix[mBase];
      result.matrix[i + 4 + result.offset | 0] = this.matrix[mBase + 1 | 0];
      result.matrix[i + 8 + result.offset | 0] = this.matrix[mBase + 2 | 0];
      result.matrix[i + 12 + result.offset | 0] = this.matrix[mBase + 3 | 0];
    }
    return result;
  };
  Mat4f.prototype.invert_mx4ult$ = function (eps) {
    if (eps === void 0)
      eps = 0.0;
    Mat4f$Companion_getInstance().tmpMatLock_0;
    var $receiver = this.invert_8kv2li$(Mat4f$Companion_getInstance().tmpMatA_0, eps);
    if ($receiver)
      this.set_d4zu6j$(Mat4f$Companion_getInstance().tmpMatA_0);
    return $receiver;
  };
  Mat4f.prototype.invert_8kv2li$ = function (result, eps) {
    if (eps === void 0)
      eps = 0.0;
    var src0 = this.matrix[this.offset + 0 | 0];
    var src4 = this.matrix[this.offset + 1 | 0];
    var src8 = this.matrix[this.offset + 2 | 0];
    var src12 = this.matrix[this.offset + 3 | 0];
    var src1 = this.matrix[this.offset + 4 | 0];
    var src5 = this.matrix[this.offset + 5 | 0];
    var src9 = this.matrix[this.offset + 6 | 0];
    var src13 = this.matrix[this.offset + 7 | 0];
    var src2 = this.matrix[this.offset + 8 | 0];
    var src6 = this.matrix[this.offset + 9 | 0];
    var src10 = this.matrix[this.offset + 10 | 0];
    var src14 = this.matrix[this.offset + 11 | 0];
    var src3 = this.matrix[this.offset + 12 | 0];
    var src7 = this.matrix[this.offset + 13 | 0];
    var src11 = this.matrix[this.offset + 14 | 0];
    var src15 = this.matrix[this.offset + 15 | 0];
    var atmp0 = src10 * src15;
    var atmp1 = src11 * src14;
    var atmp2 = src9 * src15;
    var atmp3 = src11 * src13;
    var atmp4 = src9 * src14;
    var atmp5 = src10 * src13;
    var atmp6 = src8 * src15;
    var atmp7 = src11 * src12;
    var atmp8 = src8 * src14;
    var atmp9 = src10 * src12;
    var atmp10 = src8 * src13;
    var atmp11 = src9 * src12;
    var dst0 = atmp0 * src5 + atmp3 * src6 + atmp4 * src7 - (atmp1 * src5 + atmp2 * src6 + atmp5 * src7);
    var dst1 = atmp1 * src4 + atmp6 * src6 + atmp9 * src7 - (atmp0 * src4 + atmp7 * src6 + atmp8 * src7);
    var dst2 = atmp2 * src4 + atmp7 * src5 + atmp10 * src7 - (atmp3 * src4 + atmp6 * src5 + atmp11 * src7);
    var dst3 = atmp5 * src4 + atmp8 * src5 + atmp11 * src6 - (atmp4 * src4 + atmp9 * src5 + atmp10 * src6);
    var dst4 = atmp1 * src1 + atmp2 * src2 + atmp5 * src3 - (atmp0 * src1 + atmp3 * src2 + atmp4 * src3);
    var dst5 = atmp0 * src0 + atmp7 * src2 + atmp8 * src3 - (atmp1 * src0 + atmp6 * src2 + atmp9 * src3);
    var dst6 = atmp3 * src0 + atmp6 * src1 + atmp11 * src3 - (atmp2 * src0 + atmp7 * src1 + atmp10 * src3);
    var dst7 = atmp4 * src0 + atmp9 * src1 + atmp10 * src2 - (atmp5 * src0 + atmp8 * src1 + atmp11 * src2);
    var btmp0 = src2 * src7;
    var btmp1 = src3 * src6;
    var btmp2 = src1 * src7;
    var btmp3 = src3 * src5;
    var btmp4 = src1 * src6;
    var btmp5 = src2 * src5;
    var btmp6 = src0 * src7;
    var btmp7 = src3 * src4;
    var btmp8 = src0 * src6;
    var btmp9 = src2 * src4;
    var btmp10 = src0 * src5;
    var btmp11 = src1 * src4;
    var dst8 = btmp0 * src13 + btmp3 * src14 + btmp4 * src15 - (btmp1 * src13 + btmp2 * src14 + btmp5 * src15);
    var dst9 = btmp1 * src12 + btmp6 * src14 + btmp9 * src15 - (btmp0 * src12 + btmp7 * src14 + btmp8 * src15);
    var dst10 = btmp2 * src12 + btmp7 * src13 + btmp10 * src15 - (btmp3 * src12 + btmp6 * src13 + btmp11 * src15);
    var dst11 = btmp5 * src12 + btmp8 * src13 + btmp11 * src14 - (btmp4 * src12 + btmp9 * src13 + btmp10 * src14);
    var dst12 = btmp2 * src10 + btmp5 * src11 + btmp1 * src9 - (btmp4 * src11 + btmp0 * src9 + btmp3 * src10);
    var dst13 = btmp8 * src11 + btmp0 * src8 + btmp7 * src10 - (btmp6 * src10 + btmp9 * src11 + btmp1 * src8);
    var dst14 = btmp6 * src9 + btmp11 * src11 + btmp3 * src8 - (btmp10 * src11 + btmp2 * src8 + btmp7 * src9);
    var dst15 = btmp10 * src10 + btmp4 * src8 + btmp9 * src9 - (btmp8 * src9 + btmp11 * src10 + btmp5 * src8);
    var det = src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;
    if (Math_0.abs(det) <= eps) {
      return false;
    }var invdet = 1.0 / det;
    result.matrix[result.offset] = dst0 * invdet;
    result.matrix[1 + result.offset | 0] = dst1 * invdet;
    result.matrix[2 + result.offset | 0] = dst2 * invdet;
    result.matrix[3 + result.offset | 0] = dst3 * invdet;
    result.matrix[4 + result.offset | 0] = dst4 * invdet;
    result.matrix[5 + result.offset | 0] = dst5 * invdet;
    result.matrix[6 + result.offset | 0] = dst6 * invdet;
    result.matrix[7 + result.offset | 0] = dst7 * invdet;
    result.matrix[8 + result.offset | 0] = dst8 * invdet;
    result.matrix[9 + result.offset | 0] = dst9 * invdet;
    result.matrix[10 + result.offset | 0] = dst10 * invdet;
    result.matrix[11 + result.offset | 0] = dst11 * invdet;
    result.matrix[12 + result.offset | 0] = dst12 * invdet;
    result.matrix[13 + result.offset | 0] = dst13 * invdet;
    result.matrix[14 + result.offset | 0] = dst14 * invdet;
    result.matrix[15 + result.offset | 0] = dst15 * invdet;
    return true;
  };
  Mat4f.prototype.transform_w1lst9$ = function (vec, w) {
    if (w === void 0)
      w = 1.0;
    var x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + w * this.get_vux9f0$(0, 3);
    var y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + w * this.get_vux9f0$(1, 3);
    var z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + w * this.get_vux9f0$(2, 3);
    return vec.set_y2kzbl$(x, y, z);
  };
  Mat4f.prototype.transform_a6wx89$ = function (vec, w, result) {
    if (w === void 0)
      w = 1.0;
    result.x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + w * this.get_vux9f0$(0, 3);
    result.y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + w * this.get_vux9f0$(1, 3);
    result.z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + w * this.get_vux9f0$(2, 3);
    return result;
  };
  Mat4f.prototype.transform_5s4mpv$ = function (vec) {
    var x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + vec.w * this.get_vux9f0$(0, 3);
    var y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + vec.w * this.get_vux9f0$(1, 3);
    var z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + vec.w * this.get_vux9f0$(2, 3);
    var w = vec.x * this.get_vux9f0$(3, 0) + vec.y * this.get_vux9f0$(3, 1) + vec.z * this.get_vux9f0$(3, 2) + vec.w * this.get_vux9f0$(3, 3);
    return vec.set_7b5o5w$(x, y, z, w);
  };
  Mat4f.prototype.transform_uzu8ww$ = function (vec, result) {
    result.x = vec.x * this.get_vux9f0$(0, 0) + vec.y * this.get_vux9f0$(0, 1) + vec.z * this.get_vux9f0$(0, 2) + vec.w * this.get_vux9f0$(0, 3);
    result.y = vec.x * this.get_vux9f0$(1, 0) + vec.y * this.get_vux9f0$(1, 1) + vec.z * this.get_vux9f0$(1, 2) + vec.w * this.get_vux9f0$(1, 3);
    result.z = vec.x * this.get_vux9f0$(2, 0) + vec.y * this.get_vux9f0$(2, 1) + vec.z * this.get_vux9f0$(2, 2) + vec.w * this.get_vux9f0$(2, 3);
    result.w = vec.x * this.get_vux9f0$(3, 0) + vec.y * this.get_vux9f0$(3, 1) + vec.z * this.get_vux9f0$(3, 2) + vec.w * this.get_vux9f0$(3, 3);
    return result;
  };
  Mat4f.prototype.add_d4zu6j$ = function (other) {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = this.matrix[this.offset + i | 0] + other.matrix[other.offset + i | 0];
    }
    return this;
  };
  Mat4f.prototype.mul_d4zu6j$ = function (other) {
    Mat4f$Companion_getInstance().tmpMatLock_0;
    this.mul_93v2ma$(other, Mat4f$Companion_getInstance().tmpMatA_0);
    return this.set_d4zu6j$(Mat4f$Companion_getInstance().tmpMatA_0);
  };
  Mat4f.prototype.mul_93v2ma$ = function (other, result) {
    for (var i = 0; i <= 3; i++) {
      for (var j = 0; j <= 3; j++) {
        var x = 0.0;
        for (var k = 0; k <= 3; k++) {
          x += this.matrix[this.offset + j + (k * 4 | 0) | 0] * other.matrix[other.offset + (i * 4 | 0) + k | 0];
        }
        result.matrix[result.offset + (i * 4 | 0) + j | 0] = x;
      }
    }
    return result;
  };
  Mat4f.prototype.set_d4zu6j$ = function (other) {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = other.matrix[other.offset + i | 0];
    }
    return this;
  };
  Mat4f.prototype.set_d4zu6l$ = function (other) {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = other.matrix[other.offset + i | 0];
    }
    return this;
  };
  Mat4f.prototype.set_hcyabg$ = function (floats) {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = floats.get_za3lpa$(i);
    }
    return this;
  };
  Mat4f.prototype.setZero = function () {
    for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = 0.0;
    }
    return this;
  };
  Mat4f.prototype.setIdentity = function () {
    for (var i = 1; i <= 15; i++) {
      this.matrix[this.offset + i | 0] = 0.0;
    }
    this.matrix[this.offset] = 1.0;
    this.matrix[this.offset + 5 | 0] = 1.0;
    this.matrix[this.offset + 10 | 0] = 1.0;
    this.matrix[this.offset + 15 | 0] = 1.0;
    return this;
  };
  Mat4f.prototype.setRotate_7b5o5w$ = function (rotA, axX, axY, axZ) {
    var a = rotA * package$math.DEG_2_RAD;
    var x = axX;
    var y = axY;
    var z = axZ;
    this.matrix[this.offset + 3 | 0] = 0.0;
    this.matrix[this.offset + 7 | 0] = 0.0;
    this.matrix[this.offset + 11 | 0] = 0.0;
    this.matrix[this.offset + 12 | 0] = 0.0;
    this.matrix[this.offset + 13 | 0] = 0.0;
    this.matrix[this.offset + 14 | 0] = 0.0;
    this.matrix[this.offset + 15 | 0] = 1.0;
    var s = Math_0.sin(a);
    var c = Math_0.cos(a);
    if (1.0 === x && 0.0 === y && 0.0 === z) {
      this.matrix[this.offset + 5 | 0] = c;
      this.matrix[this.offset + 10 | 0] = c;
      this.matrix[this.offset + 6 | 0] = s;
      this.matrix[this.offset + 9 | 0] = -s;
      this.matrix[this.offset + 1 | 0] = 0.0;
      this.matrix[this.offset + 2 | 0] = 0.0;
      this.matrix[this.offset + 4 | 0] = 0.0;
      this.matrix[this.offset + 8 | 0] = 0.0;
      this.matrix[this.offset + 0 | 0] = 1.0;
    } else if (0.0 === x && 1.0 === y && 0.0 === z) {
      this.matrix[this.offset + 0 | 0] = c;
      this.matrix[this.offset + 10 | 0] = c;
      this.matrix[this.offset + 8 | 0] = s;
      this.matrix[this.offset + 2 | 0] = -s;
      this.matrix[this.offset + 1 | 0] = 0.0;
      this.matrix[this.offset + 4 | 0] = 0.0;
      this.matrix[this.offset + 6 | 0] = 0.0;
      this.matrix[this.offset + 9 | 0] = 0.0;
      this.matrix[this.offset + 5 | 0] = 1.0;
    } else if (0.0 === x && 0.0 === y && 1.0 === z) {
      this.matrix[this.offset + 0 | 0] = c;
      this.matrix[this.offset + 5 | 0] = c;
      this.matrix[this.offset + 1 | 0] = s;
      this.matrix[this.offset + 4 | 0] = -s;
      this.matrix[this.offset + 2 | 0] = 0.0;
      this.matrix[this.offset + 6 | 0] = 0.0;
      this.matrix[this.offset + 8 | 0] = 0.0;
      this.matrix[this.offset + 9 | 0] = 0.0;
      this.matrix[this.offset + 10 | 0] = 1.0;
    } else {
      var x_0 = x * x + y * y + z * z;
      var len = Math_0.sqrt(x_0);
      var eps;
      eps = package$math.FUZZY_EQ_F;
      var $receiver = len - 1.0;
      if (!(Math_0.abs($receiver) <= eps)) {
        var recipLen = 1.0 / len;
        x *= recipLen;
        y *= recipLen;
        z *= recipLen;
      }var nc = 1.0 - c;
      var xy = x * y;
      var yz = y * z;
      var zx = z * x;
      var xs = x * s;
      var ys = y * s;
      var zs = z * s;
      this.matrix[this.offset + 0 | 0] = x * x * nc + c;
      this.matrix[this.offset + 4 | 0] = xy * nc - zs;
      this.matrix[this.offset + 8 | 0] = zx * nc + ys;
      this.matrix[this.offset + 1 | 0] = xy * nc + zs;
      this.matrix[this.offset + 5 | 0] = y * y * nc + c;
      this.matrix[this.offset + 9 | 0] = yz * nc - xs;
      this.matrix[this.offset + 2 | 0] = zx * nc - ys;
      this.matrix[this.offset + 6 | 0] = yz * nc + xs;
      this.matrix[this.offset + 10 | 0] = z * z * nc + c;
    }
    return this;
  };
  Mat4f.prototype.setRotate_czzhhz$ = function (quaternion) {
    var r = quaternion.w;
    var i = quaternion.x;
    var j = quaternion.y;
    var k = quaternion.z;
    var x = r * r + i * i + j * j + k * k;
    var s = Math_0.sqrt(x);
    s = 1.0 / (s * s);
    this.set_n0b4r3$(0, 0, 1 - 2 * s * (j * j + k * k));
    this.set_n0b4r3$(0, 1, 2 * s * (i * j - k * r));
    this.set_n0b4r3$(0, 2, 2 * s * (i * k + j * r));
    this.set_n0b4r3$(0, 3, 0.0);
    this.set_n0b4r3$(1, 0, 2 * s * (i * j + k * r));
    this.set_n0b4r3$(1, 1, 1 - 2 * s * (i * i + k * k));
    this.set_n0b4r3$(1, 2, 2 * s * (j * k - i * r));
    this.set_n0b4r3$(1, 3, 0.0);
    this.set_n0b4r3$(2, 0, 2 * s * (i * k - j * r));
    this.set_n0b4r3$(2, 1, 2 * s * (j * k + i * r));
    this.set_n0b4r3$(2, 2, 1 - 2 * s * (i * i + j * j));
    this.set_n0b4r3$(2, 3, 0.0);
    this.set_n0b4r3$(3, 0, 0.0);
    this.set_n0b4r3$(3, 1, 0.0);
    this.set_n0b4r3$(3, 2, 0.0);
    this.set_n0b4r3$(3, 3, 1.0);
    return this;
  };
  Mat4f.prototype.setRotation_d4zu7e$ = function (mat3) {
    for (var row = 0; row <= 2; row++) {
      for (var col = 0; col <= 2; col++) {
        this.set_n0b4r3$(row, col, mat3.get_vux9f0$(row, col));
      }
    }
    var s = 1.0 / this.getCol_8irwu1$(0, MutableVec4f_init()).length();
    this.scale_y2kzbl$(s, s, s);
  };
  Mat4f.prototype.setRotation_d4zu6j$ = function (mat4) {
    for (var row = 0; row <= 2; row++) {
      for (var col = 0; col <= 2; col++) {
        this.set_n0b4r3$(row, col, mat4.get_vux9f0$(row, col));
      }
    }
    var s = 1.0 / this.getCol_8irwu1$(0, MutableVec4f_init()).length();
    this.scale_y2kzbl$(s, s, s);
  };
  Mat4f.prototype.setLookAt_n440fu$ = function (position, lookAt, up) {
    var fx = lookAt.x - position.x;
    var fy = lookAt.y - position.y;
    var fz = lookAt.z - position.z;
    var x = fx * fx + fy * fy + fz * fz;
    var rlf = 1.0 / Math_0.sqrt(x);
    fx *= rlf;
    fy *= rlf;
    fz *= rlf;
    var sx = fy * up.z - fz * up.y;
    var sy = fz * up.x - fx * up.z;
    var sz = fx * up.y - fy * up.x;
    var x_0 = sx * sx + sy * sy + sz * sz;
    var rls = 1.0 / Math_0.sqrt(x_0);
    sx *= rls;
    sy *= rls;
    sz *= rls;
    var ux = sy * fz - sz * fy;
    var uy = sz * fx - sx * fz;
    var uz = sx * fy - sy * fx;
    this.matrix[this.offset + 0 | 0] = sx;
    this.matrix[this.offset + 1 | 0] = ux;
    this.matrix[this.offset + 2 | 0] = -fx;
    this.matrix[this.offset + 3 | 0] = 0.0;
    this.matrix[this.offset + 4 | 0] = sy;
    this.matrix[this.offset + 5 | 0] = uy;
    this.matrix[this.offset + 6 | 0] = -fy;
    this.matrix[this.offset + 7 | 0] = 0.0;
    this.matrix[this.offset + 8 | 0] = sz;
    this.matrix[this.offset + 9 | 0] = uz;
    this.matrix[this.offset + 10 | 0] = -fz;
    this.matrix[this.offset + 11 | 0] = 0.0;
    this.matrix[this.offset + 12 | 0] = 0.0;
    this.matrix[this.offset + 13 | 0] = 0.0;
    this.matrix[this.offset + 14 | 0] = 0.0;
    this.matrix[this.offset + 15 | 0] = 1.0;
    return this.translate_y2kzbl$(-position.x, -position.y, -position.z);
  };
  Mat4f.prototype.setOrthographic_w8lrqs$ = function (left, right, bottom, top, near, far) {
    if (left === right) {
      throw IllegalArgumentException_init('left == right');
    }if (bottom === top) {
      throw IllegalArgumentException_init('bottom == top');
    }if (near === far) {
      throw IllegalArgumentException_init('near == far');
    }var width = 1.0 / (right - left);
    var height = 1.0 / (top - bottom);
    var depth = 1.0 / (far - near);
    var x = 2.0 * width;
    var y = 2.0 * height;
    var z = -2.0 * depth;
    var tx = -(right + left) * width;
    var ty = -(top + bottom) * height;
    var tz = -(far + near) * depth;
    this.matrix[this.offset + 0 | 0] = x;
    this.matrix[this.offset + 5 | 0] = y;
    this.matrix[this.offset + 10 | 0] = z;
    this.matrix[this.offset + 12 | 0] = tx;
    this.matrix[this.offset + 13 | 0] = ty;
    this.matrix[this.offset + 14 | 0] = tz;
    this.matrix[this.offset + 15 | 0] = 1.0;
    this.matrix[this.offset + 1 | 0] = 0.0;
    this.matrix[this.offset + 2 | 0] = 0.0;
    this.matrix[this.offset + 3 | 0] = 0.0;
    this.matrix[this.offset + 4 | 0] = 0.0;
    this.matrix[this.offset + 6 | 0] = 0.0;
    this.matrix[this.offset + 7 | 0] = 0.0;
    this.matrix[this.offset + 8 | 0] = 0.0;
    this.matrix[this.offset + 9 | 0] = 0.0;
    this.matrix[this.offset + 11 | 0] = 0.0;
    return this;
  };
  Mat4f.prototype.setPerspective_7b5o5w$ = function (fovy, aspect, near, far) {
    var x = fovy * (math.PI / 360.0);
    var f = 1.0 / Math_0.tan(x);
    var rangeReciprocal = 1.0 / (near - far);
    this.matrix[this.offset + 0 | 0] = f / aspect;
    this.matrix[this.offset + 1 | 0] = 0.0;
    this.matrix[this.offset + 2 | 0] = 0.0;
    this.matrix[this.offset + 3 | 0] = 0.0;
    this.matrix[this.offset + 4 | 0] = 0.0;
    this.matrix[this.offset + 5 | 0] = f;
    this.matrix[this.offset + 6 | 0] = 0.0;
    this.matrix[this.offset + 7 | 0] = 0.0;
    this.matrix[this.offset + 8 | 0] = 0.0;
    this.matrix[this.offset + 9 | 0] = 0.0;
    this.matrix[this.offset + 10 | 0] = (far + near) * rangeReciprocal;
    this.matrix[this.offset + 11 | 0] = -1.0;
    this.matrix[this.offset + 12 | 0] = 0.0;
    this.matrix[this.offset + 13 | 0] = 0.0;
    this.matrix[this.offset + 14 | 0] = 2.0 * far * near * rangeReciprocal;
    this.matrix[this.offset + 15 | 0] = 0.0;
    return this;
  };
  Mat4f.prototype.get_za3lpa$ = function (i) {
    return this.matrix[this.offset + i | 0];
  };
  Mat4f.prototype.get_vux9f0$ = function (row, col) {
    return this.matrix[this.offset + (col * 4 | 0) + row | 0];
  };
  Mat4f.prototype.set_24o109$ = function (i, value) {
    this.matrix[this.offset + i | 0] = value;
  };
  Mat4f.prototype.set_n0b4r3$ = function (row, col, value) {
    this.matrix[this.offset + (col * 4 | 0) + row | 0] = value;
  };
  Mat4f.prototype.setRow_gdg6t7$ = function (row, vec, w) {
    this.set_n0b4r3$(row, 0, vec.x);
    this.set_n0b4r3$(row, 1, vec.y);
    this.set_n0b4r3$(row, 2, vec.z);
    this.set_n0b4r3$(row, 3, w);
  };
  Mat4f.prototype.setRow_ky00rj$ = function (row, value) {
    this.set_n0b4r3$(row, 0, value.x);
    this.set_n0b4r3$(row, 1, value.y);
    this.set_n0b4r3$(row, 2, value.z);
    this.set_n0b4r3$(row, 3, value.w);
  };
  Mat4f.prototype.getRow_8irwu1$ = function (row, result) {
    result.x = this.get_vux9f0$(row, 0);
    result.y = this.get_vux9f0$(row, 1);
    result.z = this.get_vux9f0$(row, 2);
    result.w = this.get_vux9f0$(row, 3);
    return result;
  };
  Mat4f.prototype.setCol_gdg6t7$ = function (col, vec, w) {
    this.set_n0b4r3$(0, col, vec.x);
    this.set_n0b4r3$(1, col, vec.y);
    this.set_n0b4r3$(2, col, vec.z);
    this.set_n0b4r3$(3, col, w);
  };
  Mat4f.prototype.setCol_ky00rj$ = function (col, value) {
    this.set_n0b4r3$(0, col, value.x);
    this.set_n0b4r3$(1, col, value.y);
    this.set_n0b4r3$(2, col, value.z);
    this.set_n0b4r3$(3, col, value.w);
  };
  Mat4f.prototype.getCol_8irwu1$ = function (col, result) {
    result.x = this.get_vux9f0$(0, col);
    result.y = this.get_vux9f0$(1, col);
    result.z = this.get_vux9f0$(2, col);
    result.w = this.get_vux9f0$(3, col);
    return result;
  };
  Mat4f.prototype.getOrigin_5s4mqq$ = function (result) {
    result.x = this.get_vux9f0$(0, 3);
    result.y = this.get_vux9f0$(1, 3);
    result.z = this.get_vux9f0$(2, 3);
    return result;
  };
  Mat4f.prototype.getOrientation_d4zu7e$ = function (result) {
    result.set_n0b4r3$(0, 0, this.get_vux9f0$(0, 0));
    result.set_n0b4r3$(0, 1, this.get_vux9f0$(0, 1));
    result.set_n0b4r3$(0, 2, this.get_vux9f0$(0, 2));
    result.set_n0b4r3$(1, 0, this.get_vux9f0$(1, 0));
    result.set_n0b4r3$(1, 1, this.get_vux9f0$(1, 1));
    result.set_n0b4r3$(1, 2, this.get_vux9f0$(1, 2));
    result.set_n0b4r3$(2, 0, this.get_vux9f0$(2, 0));
    result.set_n0b4r3$(2, 1, this.get_vux9f0$(2, 1));
    result.set_n0b4r3$(2, 2, this.get_vux9f0$(2, 2));
    return result;
  };
  Mat4f.prototype.getOrientationTransposed_d4zu7e$ = function (result) {
    result.set_n0b4r3$(0, 0, this.get_vux9f0$(0, 0));
    result.set_n0b4r3$(0, 1, this.get_vux9f0$(1, 0));
    result.set_n0b4r3$(0, 2, this.get_vux9f0$(2, 0));
    result.set_n0b4r3$(1, 0, this.get_vux9f0$(0, 1));
    result.set_n0b4r3$(1, 1, this.get_vux9f0$(1, 1));
    result.set_n0b4r3$(1, 2, this.get_vux9f0$(2, 1));
    result.set_n0b4r3$(2, 0, this.get_vux9f0$(0, 2));
    result.set_n0b4r3$(2, 1, this.get_vux9f0$(1, 2));
    result.set_n0b4r3$(2, 2, this.get_vux9f0$(2, 2));
    return result;
  };
  Mat4f.prototype.getRotation_5s4mpv$ = function (result) {
    var tmp$;
    var trace = this.get_vux9f0$(0, 0) + this.get_vux9f0$(1, 1) + this.get_vux9f0$(2, 2);
    if (trace > 0.0) {
      var x = trace + 1.0;
      var s = Math_0.sqrt(x);
      result.w = s * 0.5;
      s = 0.5 / s;
      result.x = (this.get_vux9f0$(2, 1) - this.get_vux9f0$(1, 2)) * s;
      result.y = (this.get_vux9f0$(0, 2) - this.get_vux9f0$(2, 0)) * s;
      result.z = (this.get_vux9f0$(1, 0) - this.get_vux9f0$(0, 1)) * s;
    } else {
      if (this.get_vux9f0$(0, 0) < this.get_vux9f0$(1, 1)) {
        if (this.get_vux9f0$(1, 1) < this.get_vux9f0$(2, 2)) {
          tmp$ = 2;
        } else {
          tmp$ = 1;
        }
      } else {
        if (this.get_vux9f0$(0, 0) < this.get_vux9f0$(2, 2)) {
          tmp$ = 2;
        } else {
          tmp$ = 0;
        }
      }
      var i = tmp$;
      var j = (i + 1 | 0) % 3;
      var k = (i + 2 | 0) % 3;
      var x_0 = this.get_vux9f0$(i, i) - this.get_vux9f0$(j, j) - this.get_vux9f0$(k, k) + 1.0;
      var s_0 = Math_0.sqrt(x_0);
      result.set_24o109$(i, s_0 * 0.5);
      s_0 = 0.5 / s_0;
      result.w = (this.get_vux9f0$(k, j) - this.get_vux9f0$(j, k)) * s_0;
      result.set_24o109$(j, (this.get_vux9f0$(j, i) + this.get_vux9f0$(i, j)) * s_0);
      result.set_24o109$(k, (this.get_vux9f0$(k, i) + this.get_vux9f0$(i, k)) * s_0);
    }
    return result;
  };
  Mat4f.prototype.toBuffer_he122g$ = function (buffer) {
    buffer.put_kgymra$(this.matrix, this.offset, 16);
    buffer.flip();
    return buffer;
  };
  Mat4f.prototype.toList = function () {
    var list = ArrayList_init_0();
    for (var i = 0; i <= 15; i++) {
      var element = this.matrix[this.offset + i | 0];
      list.add_11rb$(element);
    }
    return list;
  };
  Mat4f.prototype.dump = function () {
    for (var r = 0; r <= 3; r++) {
      for (var c = 0; c <= 3; c++) {
        print(this.get_vux9f0$(r, c).toString() + ' ');
      }
      println();
    }
  };
  function Mat4f$Companion() {
    Mat4f$Companion_instance = this;
    this.tmpMatLock_0 = new Any();
    this.tmpMatA_0 = new Mat4f();
    this.tmpMatB_0 = new Mat4f();
  }
  Mat4f$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Mat4f$Companion_instance = null;
  function Mat4f$Companion_getInstance() {
    if (Mat4f$Companion_instance === null) {
      new Mat4f$Companion();
    }return Mat4f$Companion_instance;
  }
  Mat4f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Mat4f',
    interfaces: []
  };
  function Mat4fStack(stackSize) {
    Mat4fStack$Companion_getInstance();
    if (stackSize === void 0)
      stackSize = 32;
    Mat4f.call(this);
    this.stackSize = stackSize;
    this.stackIndex_rxi7m3$_0 = 0;
    this.matrix = new Float32Array(16 * this.stackSize | 0);
    this.setIdentity();
  }
  function Mat4fStack$Companion() {
    Mat4fStack$Companion_instance = this;
    this.DEFAULT_STACK_SIZE = 32;
  }
  Mat4fStack$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Mat4fStack$Companion_instance = null;
  function Mat4fStack$Companion_getInstance() {
    if (Mat4fStack$Companion_instance === null) {
      new Mat4fStack$Companion();
    }return Mat4fStack$Companion_instance;
  }
  Object.defineProperty(Mat4fStack.prototype, 'stackIndex', {
    get: function () {
      return this.stackIndex_rxi7m3$_0;
    },
    set: function (value) {
      this.stackIndex_rxi7m3$_0 = value;
      this.offset = value * 16 | 0;
    }
  });
  Mat4fStack.prototype.push = function () {
    if (this.stackIndex >= this.stackSize) {
      throw KoolException_init('Matrix stack overflow');
    }for (var i = 0; i <= 15; i++) {
      this.matrix[this.offset + 16 + i | 0] = this.matrix[this.offset + i | 0];
    }
    this.stackIndex = this.stackIndex + 1 | 0;
    return this;
  };
  Mat4fStack.prototype.pop = function () {
    if (this.stackIndex <= 0) {
      throw KoolException_init('Matrix stack underflow');
    }this.stackIndex = this.stackIndex - 1 | 0;
    return this;
  };
  Mat4fStack.prototype.reset = function () {
    this.stackIndex = 0;
    this.setIdentity();
    return this;
  };
  Mat4fStack.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Mat4fStack',
    interfaces: [Mat4f]
  };
  var DEG_2_RAD;
  var RAD_2_DEG;
  var FUZZY_EQ_F;
  var FUZZY_EQ_D;
  var FLT_EPSILON;
  var SQRT_1_2;
  var toDeg = defineInlineFunction('kool.de.fabmax.kool.math.toDeg_81szk$', wrapFunction(function () {
    var math = _.de.fabmax.kool.math;
    return function ($receiver) {
      return $receiver * math.RAD_2_DEG;
    };
  }));
  var toRad = defineInlineFunction('kool.de.fabmax.kool.math.toRad_81szk$', wrapFunction(function () {
    var math = _.de.fabmax.kool.math;
    return function ($receiver) {
      return $receiver * math.DEG_2_RAD;
    };
  }));
  var toDeg_0 = defineInlineFunction('kool.de.fabmax.kool.math.toDeg_yrwdxr$', wrapFunction(function () {
    var math = _.de.fabmax.kool.math;
    return function ($receiver) {
      return $receiver * math.RAD_2_DEG;
    };
  }));
  var toRad_0 = defineInlineFunction('kool.de.fabmax.kool.math.toRad_yrwdxr$', wrapFunction(function () {
    var math = _.de.fabmax.kool.math;
    return function ($receiver) {
      return $receiver * math.DEG_2_RAD;
    };
  }));
  var isFuzzyEqual = defineInlineFunction('kool.de.fabmax.kool.math.isFuzzyEqual_y2kzbl$', wrapFunction(function () {
    var math = _.de.fabmax.kool.math;
    var Math_0 = Math;
    return function (a, b, eps) {
      if (eps === void 0)
        eps = math.FUZZY_EQ_F;
      var $receiver = a - b;
      return Math_0.abs($receiver) <= eps;
    };
  }));
  var isFuzzyEqual_0 = defineInlineFunction('kool.de.fabmax.kool.math.isFuzzyEqual_yvo9jy$', wrapFunction(function () {
    var math = _.de.fabmax.kool.math;
    var Math_0 = Math;
    return function (a, b, eps) {
      if (eps === void 0)
        eps = math.FUZZY_EQ_D;
      var $receiver = a - b;
      return Math_0.abs($receiver) <= eps;
    };
  }));
  var isFuzzyZero = defineInlineFunction('kool.de.fabmax.kool.math.isFuzzyZero_yni7l$', wrapFunction(function () {
    var math = _.de.fabmax.kool.math;
    var Math_0 = Math;
    return function ($receiver, eps) {
      if (eps === void 0)
        eps = math.FUZZY_EQ_F;
      return Math_0.abs($receiver) <= eps;
    };
  }));
  var isFuzzyZero_0 = defineInlineFunction('kool.de.fabmax.kool.math.isFuzzyZero_38ydlf$', wrapFunction(function () {
    var math = _.de.fabmax.kool.math;
    var Math_0 = Math;
    return function ($receiver, eps) {
      if (eps === void 0)
        eps = math.FUZZY_EQ_D;
      return Math_0.abs($receiver) <= eps;
    };
  }));
  var clamp = defineInlineFunction('kool.de.fabmax.kool.math.clamp_e4yvb3$', function ($receiver, min, max) {
    if ($receiver < min)
      return min;
    else if ($receiver > max)
      return max;
    else
      return $receiver;
  });
  var clamp_0 = defineInlineFunction('kool.de.fabmax.kool.math.clamp_wj6e7o$', function ($receiver, min, max) {
    if (min === void 0)
      min = 0.0;
    if (max === void 0)
      max = 1.0;
    if ($receiver < min)
      return min;
    else if ($receiver > max)
      return max;
    else
      return $receiver;
  });
  var clamp_1 = defineInlineFunction('kool.de.fabmax.kool.math.clamp_nig4hr$', function ($receiver, min, max) {
    if (min === void 0)
      min = 0.0;
    if (max === void 0)
      max = 1.0;
    if ($receiver < min)
      return min;
    else if ($receiver > max)
      return max;
    else
      return $receiver;
  });
  function triArea(va, vb, vc) {
    var xAB = vb.x - va.x;
    var yAB = vb.y - va.y;
    var zAB = vb.z - va.z;
    var xAC = vc.x - va.x;
    var yAC = vc.y - va.y;
    var zAC = vc.z - va.z;
    var abSqr = xAB * xAB + yAB * yAB + zAB * zAB;
    var acSqr = xAC * xAC + yAC * yAC + zAC * zAC;
    var abcSqr = xAB * xAC + yAB * yAC + zAB * zAC;
    var x = abSqr * acSqr - abcSqr * abcSqr;
    return 0.5 * Math_0.sqrt(x);
  }
  function triAspectRatio(va, vb, vc) {
    var a = va.distance_czzhiu$(vb);
    var b = vb.distance_czzhiu$(vc);
    var c = vc.distance_czzhiu$(va);
    var s = (a + b + c) / 2.0;
    var x = a * b * c / (8.0 * (s - a) * (s - b) * (s - c));
    return Math_0.abs(x);
  }
  function barycentricWeights(pt, va, vb, vc, result) {
    var e1 = MutableVec3f_init_1(vb).subtract_czzhiu$(va);
    var e2 = MutableVec3f_init_1(vc).subtract_czzhiu$(va);
    var n = e1.cross_2gj7b4$(e2, MutableVec3f_init());
    var a = n.length();
    var aa = a * a;
    var m = MutableVec3f_init();
    e1.set_czzhiu$(vc).subtract_czzhiu$(vb);
    e2.set_czzhiu$(pt).subtract_czzhiu$(vb);
    result.x = n.times_czzhiu$(e1.cross_2gj7b4$(e2, m)) / aa;
    e1.set_czzhiu$(va).subtract_czzhiu$(vc);
    e2.set_czzhiu$(pt).subtract_czzhiu$(vc);
    result.y = n.times_czzhiu$(e1.cross_2gj7b4$(e2, m)) / aa;
    e1.set_czzhiu$(vb).subtract_czzhiu$(va);
    e2.set_czzhiu$(pt).subtract_czzhiu$(va);
    result.z = n.times_czzhiu$(e1.cross_2gj7b4$(e2, m)) / aa;
    return result;
  }
  function partition($receiver, k, cmp) {
    partition_0($receiver, get_indices($receiver), k, cmp);
  }
  function partition$lambda($receiver, it) {
    return $receiver.get_za3lpa$(it);
  }
  function partition$lambda_0($receiver, a, b) {
    var $receiver_0 = $receiver.get_za3lpa$(b);
    $receiver.set_wxm5ur$(b, $receiver.get_za3lpa$(a));
    $receiver.set_wxm5ur$(a, $receiver_0);
    return Unit;
  }
  function partition_0($receiver, rng, k, cmp) {
    partition_3($receiver, rng.first, rng.last, k, partition$lambda, cmp, partition$lambda_0);
  }
  function partition_1($receiver, k, cmp) {
    partition_2($receiver, get_indices_0($receiver), k, cmp);
  }
  function partition$lambda_1($receiver, it) {
    return $receiver[it];
  }
  function partition$lambda_2($receiver, a, b) {
    var $receiver_0 = $receiver[b];
    $receiver[b] = $receiver[a];
    $receiver[a] = $receiver_0;
    return Unit;
  }
  function partition_2($receiver, rng, k, cmp) {
    partition_3($receiver, rng.first, rng.last, k, partition$lambda_1, cmp, partition$lambda_2);
  }
  function partition_3(elems, lt, rt, k, get, cmp, swap) {
    var left = lt;
    var right = rt;
    while (right > left) {
      if ((right - left | 0) > 600) {
        var n = right - left + 1 | 0;
        var i = k - left + 1 | 0;
        var z = Math_0.log(n);
        var x = 2.0 * z / 3.0;
        var s = 0.5 * Math_0.exp(x);
        var x_0 = z * s * (n - s) / n;
        var tmp$ = 0.5 * Math_0.sqrt(x_0);
        var x_1 = i - n / 2.0;
        var sd = tmp$ * Math_0.sign(x_1);
        var a = left;
        var b = numberToInt(k - i * s / n + sd);
        var newLeft = Math_0.max(a, b);
        var a_0 = right;
        var b_0 = numberToInt(k + (n - i | 0) * s / n + sd);
        var newRight = Math_0.min(a_0, b_0);
        partition_3(elems, newLeft, newRight, k, get, cmp, swap);
      }var t = get(elems, k);
      var i_0 = left;
      var j = right;
      swap(elems, left, k);
      if (cmp(get(elems, right), t) > 0) {
        swap(elems, right, left);
      }while (i_0 < j) {
        swap(elems, i_0, j);
        i_0 = i_0 + 1 | 0;
        j = j - 1 | 0;
        while (cmp(get(elems, i_0), t) < 0) {
          i_0 = i_0 + 1 | 0;
        }
        while (j >= 0 && cmp(get(elems, j), t) > 0) {
          j = j - 1 | 0;
        }
      }
      if (cmp(get(elems, left), t) === 0) {
        swap(elems, left, j);
      } else {
        j = j + 1 | 0;
        swap(elems, j, right);
      }
      if (j <= k) {
        left = j + 1 | 0;
      }if (k <= j) {
        right = j - 1 | 0;
      }}
  }
  function Plane() {
    this.p = MutableVec3f_init();
    this.n = MutableVec3f_init_1(Vec3f$Companion_getInstance().Y_AXIS);
  }
  Plane.prototype.intersectionPoint_m2314x$ = function (result, ray) {
    var denom = this.n.dot_czzhiu$(ray.direction);
    var eps;
    eps = package$math.FUZZY_EQ_F;
    if (!(Math_0.abs(denom) <= eps)) {
      var t = this.p.subtract_2gj7b4$(ray.origin, result).dot_czzhiu$(this.n) / denom;
      result.set_czzhiu$(ray.direction).scale_mx4ult$(t).add_czzhiu$(ray.origin);
      return t >= 0;
    }return false;
  };
  Plane.prototype.toVec4 = function () {
    return this.toVec4_5s4mpv$(MutableVec4f_init());
  };
  Plane.prototype.toVec4_5s4mpv$ = function (result) {
    result.x = this.n.x;
    result.y = this.n.y;
    result.z = this.n.z;
    result.w = this.n.times_czzhiu$(this.p);
    return result;
  };
  Plane.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Plane',
    interfaces: []
  };
  function distanceToLine($receiver, lineA, lineB) {
    var x = sqrDistanceToLine($receiver, lineA, lineB);
    return Math_0.sqrt(x);
  }
  function sqrDistanceToLine($receiver, lineA, lineB) {
    return sqrDistancePointToLine($receiver.x, $receiver.y, $receiver.z, lineA, lineB);
  }
  function sqrDistancePointToLine(x, y, z, lineA, lineB) {
    var rx = lineB.x - lineA.x;
    var ry = lineB.y - lineA.y;
    var rz = lineB.z - lineA.z;
    var dotPt = x * rx + y * ry + z * rz;
    var dotLineA = lineA.x * rx + lineA.y * ry + lineA.z * rz;
    var dotR = rx * rx + ry * ry + rz * rz;
    var l = (dotPt - dotLineA) / dotR;
    var nx = rx * l + lineA.x;
    var ny = ry * l + lineA.y;
    var nz = rz * l + lineA.z;
    var dx = nx - x;
    var dy = ny - y;
    var dz = nz - z;
    return dx * dx + dy * dy + dz * dz;
  }
  function nearestPointOnLine($receiver, lineA, lineB, result) {
    lineB.subtract_2gj7b4$(lineA, result);
    var l = ($receiver.dot_czzhiu$(result) - lineA.times_czzhiu$(result)) / result.times_czzhiu$(result);
    return result.scale_mx4ult$(l).add_czzhiu$(lineA);
  }
  function distanceToRay($receiver, ray) {
    return distanceToRay_0($receiver, ray.origin, ray.direction);
  }
  function distanceToRay_0($receiver, origin, direction) {
    var x = sqrDistanceToRay_0($receiver, origin, direction);
    return Math_0.sqrt(x);
  }
  function sqrDistanceToRay($receiver, ray) {
    return sqrDistanceToRay_0($receiver, ray.origin, ray.direction);
  }
  function sqrDistanceToRay_0($receiver, origin, direction) {
    return sqrDistancePointToRay($receiver.x, $receiver.y, $receiver.z, origin, direction);
  }
  function sqrDistancePointToRay(x, y, z, origin, direction) {
    var nx;
    var ny;
    var nz;
    var dot = x * direction.x + y * direction.y + z * direction.z;
    var l = (dot - origin.times_czzhiu$(direction)) / direction.times_czzhiu$(direction);
    if (l <= 0) {
      nx = origin.x - x;
      ny = origin.y - y;
      nz = origin.z - z;
    } else {
      nx = direction.x * l + origin.x - x;
      ny = direction.y * l + origin.y - y;
      nz = direction.z * l + origin.z - z;
    }
    return nx * nx + ny * ny + nz * nz;
  }
  function nearestPointOnRay($receiver, origin, direction, result) {
    var tmp$;
    var l = ($receiver.dot_czzhiu$(direction) - origin.times_czzhiu$(direction)) / direction.times_czzhiu$(direction);
    if (l <= 0) {
      tmp$ = result.set_czzhiu$(origin);
    } else {
      tmp$ = result.set_czzhiu$(direction).scale_mx4ult$(l).add_czzhiu$(origin);
    }
    return tmp$;
  }
  function distanceToEdge($receiver, edgeA, edgeB) {
    var x = sqrDistanceToEdge($receiver, edgeA, edgeB);
    return Math_0.sqrt(x);
  }
  function sqrDistanceToEdge($receiver, edgeA, edgeB) {
    return sqrDistancePointToEdge($receiver.x, $receiver.y, edgeA, edgeB);
  }
  function sqrDistancePointToEdge(x, y, edgeA, edgeB) {
    var rx = edgeB.x - edgeA.x;
    var ry = edgeB.y - edgeA.y;
    var dotPt = x * rx + y * ry;
    var dotEdgeA = edgeA.x * rx + edgeA.y * ry;
    var dotR = rx * rx + ry * ry;
    var l = (dotPt - dotEdgeA) / dotR;
    var nx;
    var ny;
    if (l <= 0) {
      nx = edgeA.x;
      ny = edgeA.y;
    } else if (l >= 1) {
      nx = edgeB.x;
      ny = edgeB.y;
    } else {
      nx = rx * l + edgeA.x;
      ny = ry * l + edgeA.y;
    }
    var dx = nx - x;
    var dy = ny - y;
    return dx * dx + dy * dy;
  }
  function nearestPointOnEdge($receiver, edgeA, edgeB, result) {
    var tmp$;
    edgeB.subtract_q2ruao$(edgeA, result);
    var l = ($receiver.dot_czzhjp$(result) - edgeA.times_czzhjp$(result)) / result.times_czzhjp$(result);
    if (l <= 0)
      tmp$ = result.set_czzhjp$(edgeA);
    else if (l >= 1)
      tmp$ = result.set_czzhjp$(edgeB);
    else
      tmp$ = result.scale_mx4ult$(l).add_czzhjp$(edgeA);
    return tmp$;
  }
  function distanceToEdge_0($receiver, edgeA, edgeB) {
    var x = sqrDistanceToEdge_0($receiver, edgeA, edgeB);
    return Math_0.sqrt(x);
  }
  function sqrDistanceToEdge_0($receiver, edgeA, edgeB) {
    return sqrDistancePointToEdge_0($receiver.x, $receiver.y, $receiver.z, edgeA, edgeB);
  }
  function sqrDistancePointToEdge_0(x, y, z, edgeA, edgeB) {
    var rx = edgeB.x - edgeA.x;
    var ry = edgeB.y - edgeA.y;
    var rz = edgeB.z - edgeA.z;
    var dotPt = x * rx + y * ry + z * rz;
    var dotEdgeA = edgeA.x * rx + edgeA.y * ry + edgeA.z * rz;
    var dotR = rx * rx + ry * ry + rz * rz;
    var l = (dotPt - dotEdgeA) / dotR;
    var nx;
    var ny;
    var nz;
    if (l <= 0) {
      nx = edgeA.x;
      ny = edgeA.y;
      nz = edgeA.z;
    } else if (l >= 1) {
      nx = edgeB.x;
      ny = edgeB.y;
      nz = edgeB.z;
    } else {
      nx = rx * l + edgeA.x;
      ny = ry * l + edgeA.y;
      nz = rz * l + edgeA.z;
    }
    var dx = nx - x;
    var dy = ny - y;
    var dz = nz - z;
    return dx * dx + dy * dy + dz * dz;
  }
  function nearestPointOnEdge_0($receiver, edgeA, edgeB, result) {
    var tmp$;
    edgeB.subtract_2gj7b4$(edgeA, result);
    var l = ($receiver.dot_czzhiu$(result) - edgeA.times_czzhiu$(result)) / result.times_czzhiu$(result);
    if (l <= 0)
      tmp$ = result.set_czzhiu$(edgeA);
    else if (l >= 1)
      tmp$ = result.set_czzhiu$(edgeB);
    else
      tmp$ = result.scale_mx4ult$(l).add_czzhiu$(edgeA);
    return tmp$;
  }
  function PointDistribution() {
  }
  PointDistribution.prototype.nextPoints_za3lpa$ = function (n) {
    var points = ArrayList_init_0();
    for (var i = 1; i <= n; i++) {
      var element = this.nextPoint();
      points.add_11rb$(element);
    }
    return points;
  };
  PointDistribution.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PointDistribution',
    interfaces: []
  };
  function CubicPointDistribution(size, center, random) {
    if (size === void 0)
      size = 1.0;
    if (center === void 0)
      center = Vec3f$Companion_getInstance().ZERO;
    if (random === void 0)
      random = defaultRandomInstance;
    PointDistribution.call(this);
    this.size = size;
    this.center = center;
    this.random = random;
    this.s_0 = this.size * 0.5;
  }
  CubicPointDistribution.prototype.nextPoint = function () {
    return new Vec3f(this.center.x + this.random.randomF_dleff0$(-this.s_0, this.s_0), this.center.y + this.random.randomF_dleff0$(-this.s_0, this.s_0), this.center.z + this.random.randomF_dleff0$(-this.s_0, this.s_0));
  };
  CubicPointDistribution.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CubicPointDistribution',
    interfaces: [PointDistribution]
  };
  function SphericalPointDistribution(radius, center, random) {
    if (radius === void 0)
      radius = 1.0;
    if (center === void 0)
      center = Vec3f$Companion_getInstance().ZERO;
    if (random === void 0)
      random = defaultRandomInstance;
    PointDistribution.call(this);
    this.radius = radius;
    this.center = center;
    this.random = random;
    this.rSqr_0 = this.radius * this.radius;
  }
  SphericalPointDistribution.prototype.nextPoint = function () {
    while (true) {
      var x = this.random.randomF_dleff0$(-this.radius, this.radius);
      var y = this.random.randomF_dleff0$(-this.radius, this.radius);
      var z = this.random.randomF_dleff0$(-this.radius, this.radius);
      if (x * x + y * y + z * z < this.rSqr_0) {
        return new Vec3f(this.center.x + x, this.center.y + y, this.center.z + z);
      }}
  };
  SphericalPointDistribution.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SphericalPointDistribution',
    interfaces: [PointDistribution]
  };
  var defaultRandomInstance;
  function randomI() {
    return defaultRandomInstance.randomI();
  }
  function randomI_0(min, max) {
    return defaultRandomInstance.randomI_vux9f0$(min, max);
  }
  function randomI_1(rng) {
    return defaultRandomInstance.randomI_vux9f0$(rng.first, rng.last);
  }
  function randomD() {
    return defaultRandomInstance.randomD();
  }
  function randomD_0(min, max) {
    return defaultRandomInstance.randomD_lu1900$(min, max);
  }
  function randomF() {
    return defaultRandomInstance.randomF();
  }
  function randomF_0(min, max) {
    return defaultRandomInstance.randomF_dleff0$(min, max);
  }
  function Random_0(seed) {
    this.x_i5bv4$_0 = seed;
    this.y_i5bu9$_0 = 362436000;
    this.z_i5bte$_0 = 521288629;
    this.c_i5cd7$_0 = 7654321;
  }
  Random_0.prototype.randomI = function () {
    this.x_i5bv4$_0 = (69069 * this.x_i5bv4$_0 | 0) + 12345 | 0;
    this.y_i5bu9$_0 = this.y_i5bu9$_0 ^ this.y_i5bu9$_0 << 13;
    this.y_i5bu9$_0 = this.y_i5bu9$_0 ^ this.y_i5bu9$_0 >> 17;
    this.y_i5bu9$_0 = this.y_i5bu9$_0 ^ this.y_i5bu9$_0 << 5;
    var t = L698769069.multiply(Kotlin.Long.fromInt(this.z_i5bte$_0)).add(Kotlin.Long.fromInt(this.c_i5cd7$_0));
    this.c_i5cd7$_0 = t.shiftRight(32).toInt();
    this.z_i5bte$_0 = t.toInt();
    return this.x_i5bv4$_0 + this.y_i5bu9$_0 + this.z_i5bte$_0 | 0;
  };
  Random_0.prototype.randomI_vux9f0$ = function (min, max) {
    return abs(this.randomI()) % (max - min + 1 | 0) + min | 0;
  };
  Random_0.prototype.randomI_n8acyv$ = function (rng) {
    return this.randomI_vux9f0$(rng.first, rng.last);
  };
  Random_0.prototype.randomF = function () {
    return abs(this.randomI()) / 2147483647;
  };
  Random_0.prototype.randomF_dleff0$ = function (min, max) {
    return this.randomF() * (max - min) + min;
  };
  Random_0.prototype.randomD = function () {
    var l = abs_0(Kotlin.Long.fromInt(this.randomI())).shiftLeft(32).or(abs_0(Kotlin.Long.fromInt(this.randomI())));
    return abs_0(l).toNumber() / Long$Companion$MAX_VALUE.toNumber();
  };
  Random_0.prototype.randomD_lu1900$ = function (min, max) {
    return this.randomD() * (max - min) + min;
  };
  Random_0.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Random',
    interfaces: []
  };
  function Ray() {
    this.origin = MutableVec3f_init();
    this.direction = MutableVec3f_init();
  }
  Ray.prototype.set_nvyeur$ = function (other) {
    this.origin.set_czzhiu$(other.origin);
    this.direction.set_czzhiu$(other.direction);
  };
  Ray.prototype.setFromLookAt_4lfkt4$ = function (origin, lookAt) {
    this.origin.set_czzhiu$(origin);
    this.direction.set_czzhiu$(lookAt).subtract_czzhiu$(origin).norm();
  };
  Ray.prototype.distanceToPoint_czzhiu$ = function (point) {
    return distanceToRay_0(point, this.origin, this.direction);
  };
  Ray.prototype.sqrDistanceToPoint_czzhiu$ = function (point) {
    return sqrDistanceToRay_0(point, this.origin, this.direction);
  };
  Ray.prototype.sqrDistanceToPoint_y2kzbl$ = function (x, y, z) {
    return sqrDistancePointToRay(x, y, z, this.origin, this.direction);
  };
  Ray.prototype.transformBy_d4zu6j$ = function (matrix) {
    matrix.transform_w1lst9$(this.origin);
    matrix.transform_w1lst9$(this.direction, 0.0).norm();
  };
  Ray.prototype.transformBy_d4zu6l$ = function (matrix) {
    matrix.transform_w1lst9$(this.origin);
    matrix.transform_w1lst9$(this.direction, 0.0).norm();
  };
  Ray.prototype.toString = function () {
    return '{origin=' + this.origin + ', direction=' + this.direction + '}';
  };
  Ray.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Ray',
    interfaces: []
  };
  function RayTest() {
    this.ray = new Ray();
    this.intHitPosition_0 = MutableVec3f_init();
    this.intHitPositionLocal_0 = MutableVec3f_init();
    this.hitNode_s1zft8$_0 = null;
    this.hitDistanceSqr_fy7zgf$_0 = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
  }
  Object.defineProperty(RayTest.prototype, 'hitPosition', {
    get: function () {
      return this.intHitPosition_0;
    }
  });
  Object.defineProperty(RayTest.prototype, 'hitPositionLocal', {
    get: function () {
      return this.intHitPositionLocal_0;
    }
  });
  Object.defineProperty(RayTest.prototype, 'hitNode', {
    get: function () {
      return this.hitNode_s1zft8$_0;
    },
    set: function (hitNode) {
      this.hitNode_s1zft8$_0 = hitNode;
    }
  });
  Object.defineProperty(RayTest.prototype, 'hitDistanceSqr', {
    get: function () {
      return this.hitDistanceSqr_fy7zgf$_0;
    },
    set: function (hitDistanceSqr) {
      this.hitDistanceSqr_fy7zgf$_0 = hitDistanceSqr;
    }
  });
  Object.defineProperty(RayTest.prototype, 'isHit', {
    get: function () {
      return this.hitDistanceSqr < kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    }
  });
  RayTest.prototype.clear = function () {
    this.intHitPosition_0.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.intHitPositionLocal_0.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.hitNode = null;
    this.hitDistanceSqr = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
  };
  RayTest.prototype.setHit_vfk0k2$ = function (node, distance) {
    this.intHitPosition_0.set_czzhiu$(this.ray.direction).scale_mx4ult$(distance).add_czzhiu$(this.ray.origin);
    this.setHit_ulhqnp$(node, this.intHitPosition_0);
  };
  RayTest.prototype.setHit_ulhqnp$ = function (node, position) {
    this.intHitPosition_0.set_czzhiu$(position);
    this.intHitPositionLocal_0.set_czzhiu$(position);
    this.hitNode = node;
    this.hitDistanceSqr = this.hitPosition.sqrDistance_czzhiu$(this.ray.origin);
  };
  RayTest.prototype.transformBy_d4zu6j$ = function (matrix) {
    this.ray.transformBy_d4zu6j$(matrix);
    if (this.isHit) {
      matrix.transform_w1lst9$(this.intHitPosition_0);
      this.hitDistanceSqr = this.hitPosition.sqrDistance_czzhiu$(this.ray.origin);
    }};
  RayTest.prototype.transformBy_d4zu6l$ = function (matrix) {
    this.ray.transformBy_d4zu6l$(matrix);
    if (this.isHit) {
      matrix.transform_w1lst9$(this.intHitPosition_0);
      this.hitDistanceSqr = this.hitPosition.sqrDistance_czzhiu$(this.ray.origin);
    }};
  RayTest.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RayTest',
    interfaces: []
  };
  function Vec2f(x, y) {
    Vec2f$Companion_getInstance();
    this.fields = new Float32Array(2);
    this.fields[0] = x;
    this.fields[1] = y;
  }
  Object.defineProperty(Vec2f.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    }
  });
  Object.defineProperty(Vec2f.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    }
  });
  Vec2f.prototype.add_q2ruao$ = function (other, result) {
    return result.set_czzhjp$(this).add_czzhjp$(other);
  };
  Vec2f.prototype.distance_czzhjp$ = function (other) {
    var x = this.sqrDistance_czzhjp$(other);
    return Math_0.sqrt(x);
  };
  Vec2f.prototype.dot_czzhjp$ = function (other) {
    return this.x * other.x + this.y * other.y;
  };
  Vec2f.prototype.isFuzzyEqual_rnua8g$ = function (other, eps) {
    if (eps === void 0)
      eps = FUZZY_EQ_F;
    var $receiver = this.x - other.x;
    var tmp$ = Math_0.abs($receiver) <= eps;
    if (tmp$) {
      var $receiver_0 = this.y - other.y;
      tmp$ = Math_0.abs($receiver_0) <= eps;
    }return tmp$;
  };
  Vec2f.prototype.length = function () {
    var x = this.sqrLength();
    return Math_0.sqrt(x);
  };
  Vec2f.prototype.mix_5uckat$ = function (other, weight, result) {
    result.x = other.x * weight + this.x * (1.0 - weight);
    result.y = other.y * weight + this.y * (1.0 - weight);
    return result;
  };
  Vec2f.prototype.mul_q2ruao$ = function (other, result) {
    return result.set_czzhjp$(this).mul_czzhjp$(other);
  };
  Vec2f.prototype.norm_5s4mrl$ = function (result) {
    return result.set_czzhjp$(this).norm();
  };
  Vec2f.prototype.rotate_749b9g$ = function (angleDeg, result) {
    return result.set_czzhjp$(this).rotate_mx4ult$(angleDeg);
  };
  Vec2f.prototype.scale_749b9g$ = function (factor, result) {
    return result.set_czzhjp$(this).scale_mx4ult$(factor);
  };
  Vec2f.prototype.sqrDistance_czzhjp$ = function (other) {
    var dx = this.x - other.x;
    var dy = this.y - other.y;
    return dx * dx + dy * dy;
  };
  Vec2f.prototype.sqrLength = function () {
    return this.x * this.x + this.y * this.y;
  };
  Vec2f.prototype.subtract_q2ruao$ = function (other, result) {
    return result.set_czzhjp$(this).subtract_czzhjp$(other);
  };
  Vec2f.prototype.get_za3lpa$ = function (i) {
    return this.fields[i];
  };
  Vec2f.prototype.times_czzhjp$ = function (other) {
    return this.dot_czzhjp$(other);
  };
  Vec2f.prototype.toString = function () {
    return '(' + this.x + ', ' + this.y + ')';
  };
  Vec2f.prototype.toVec2d = function () {
    return new Vec2d(this.x, this.y);
  };
  Vec2f.prototype.toMutableVec2d = function () {
    return this.toMutableVec2d_5s4mrn$(MutableVec2d_init());
  };
  Vec2f.prototype.toMutableVec2d_5s4mrn$ = function (result) {
    return result.set_lu1900$(this.x, this.y);
  };
  Vec2f.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!Kotlin.isType(other, Vec2f))
      return false;
    if (this.x !== other.x)
      return false;
    if (this.y !== other.y)
      return false;
    return true;
  };
  Vec2f.prototype.hashCode = function () {
    var result = hashCode(this.x);
    result = (31 * result | 0) + hashCode(this.y) | 0;
    return result;
  };
  function Vec2f$Companion() {
    Vec2f$Companion_instance = this;
    this.ZERO = Vec2f_init(0.0);
    this.X_AXIS = new Vec2f(1.0, 0.0);
    this.Y_AXIS = new Vec2f(0.0, 1.0);
    this.NEG_X_AXIS = new Vec2f(-1.0, 0.0);
    this.NEG_Y_AXIS = new Vec2f(0.0, -1.0);
  }
  Vec2f$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vec2f$Companion_instance = null;
  function Vec2f$Companion_getInstance() {
    if (Vec2f$Companion_instance === null) {
      new Vec2f$Companion();
    }return Vec2f$Companion_instance;
  }
  Vec2f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec2f',
    interfaces: []
  };
  function Vec2f_init(f, $this) {
    $this = $this || Object.create(Vec2f.prototype);
    Vec2f.call($this, f, f);
    return $this;
  }
  function Vec2f_init_0(v, $this) {
    $this = $this || Object.create(Vec2f.prototype);
    Vec2f.call($this, v.x, v.y);
    return $this;
  }
  function MutableVec2f(x, y) {
    Vec2f.call(this, x, y);
  }
  Object.defineProperty(MutableVec2f.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    },
    set: function (value) {
      this.set_24o109$(0, value);
    }
  });
  Object.defineProperty(MutableVec2f.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    },
    set: function (value) {
      this.set_24o109$(1, value);
    }
  });
  Object.defineProperty(MutableVec2f.prototype, 'array', {
    get: function () {
      return this.fields;
    }
  });
  MutableVec2f.prototype.add_czzhjp$ = function (other) {
    this.x = this.x + other.x;
    this.y = this.y + other.y;
    return this;
  };
  MutableVec2f.prototype.mul_czzhjp$ = function (other) {
    this.x = this.x * other.x;
    this.y = this.y * other.y;
    return this;
  };
  MutableVec2f.prototype.norm = function () {
    return this.scale_mx4ult$(1.0 / this.length());
  };
  MutableVec2f.prototype.rotate_mx4ult$ = function (angleDeg) {
    var rad = angleDeg * package$math.DEG_2_RAD;
    var cos = Math_0.cos(rad);
    var sin = Math_0.sin(rad);
    var rx = this.x * cos - this.y * sin;
    var ry = this.x * sin + this.y * cos;
    this.x = rx;
    this.y = ry;
    return this;
  };
  MutableVec2f.prototype.scale_mx4ult$ = function (factor) {
    this.x = this.x * factor;
    this.y = this.y * factor;
    return this;
  };
  MutableVec2f.prototype.set_dleff0$ = function (x, y) {
    this.x = x;
    this.y = y;
    return this;
  };
  MutableVec2f.prototype.set_czzhjp$ = function (other) {
    this.x = other.x;
    this.y = other.y;
    return this;
  };
  MutableVec2f.prototype.subtract_czzhjp$ = function (other) {
    this.x = this.x - other.x;
    this.y = this.y - other.y;
    return this;
  };
  MutableVec2f.prototype.divAssign_mx4ult$ = function (div) {
    this.scale_mx4ult$(1.0 / div);
  };
  MutableVec2f.prototype.minusAssign_czzhjp$ = function (other) {
    this.subtract_czzhjp$(other);
  };
  MutableVec2f.prototype.plusAssign_czzhjp$ = function (other) {
    this.add_czzhjp$(other);
  };
  MutableVec2f.prototype.set_24o109$ = function (i, v) {
    this.fields[i] = v;
  };
  MutableVec2f.prototype.timesAssign_mx4ult$ = function (factor) {
    this.scale_mx4ult$(factor);
  };
  MutableVec2f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MutableVec2f',
    interfaces: [Vec2f]
  };
  function MutableVec2f_init($this) {
    $this = $this || Object.create(MutableVec2f.prototype);
    MutableVec2f.call($this, 0.0, 0.0);
    return $this;
  }
  function MutableVec2f_init_0(f, $this) {
    $this = $this || Object.create(MutableVec2f.prototype);
    MutableVec2f.call($this, f, f);
    return $this;
  }
  function MutableVec2f_init_1(v, $this) {
    $this = $this || Object.create(MutableVec2f.prototype);
    MutableVec2f.call($this, v.x, v.y);
    return $this;
  }
  function Vec2d(x, y) {
    Vec2d$Companion_getInstance();
    this.fields = new Float64Array(2);
    this.fields[0] = x;
    this.fields[1] = y;
  }
  Object.defineProperty(Vec2d.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    }
  });
  Object.defineProperty(Vec2d.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    }
  });
  Vec2d.prototype.add_b18iao$ = function (other, result) {
    return result.set_czzhjr$(this).add_czzhjr$(other);
  };
  Vec2d.prototype.distance_czzhjr$ = function (other) {
    var x = this.sqrDistance_czzhjr$(other);
    return Math_0.sqrt(x);
  };
  Vec2d.prototype.dot_czzhjr$ = function (other) {
    return this.x * other.x + this.y * other.y;
  };
  Vec2d.prototype.isFuzzyEqual_f3xr3v$ = function (other, eps) {
    if (eps === void 0)
      eps = FUZZY_EQ_D;
    var $receiver = this.x - other.x;
    var tmp$ = Math_0.abs($receiver) <= eps;
    if (tmp$) {
      var $receiver_0 = this.y - other.y;
      tmp$ = Math_0.abs($receiver_0) <= eps;
    }return tmp$;
  };
  Vec2d.prototype.length = function () {
    var x = this.sqrLength();
    return Math_0.sqrt(x);
  };
  Vec2d.prototype.mix_3jrcj6$ = function (other, weight, result) {
    result.x = other.x * weight + this.x * (1.0 - weight);
    result.y = other.y * weight + this.y * (1.0 - weight);
    return result;
  };
  Vec2d.prototype.mul_b18iao$ = function (other, result) {
    return result.set_czzhjr$(this).mul_czzhjr$(other);
  };
  Vec2d.prototype.norm_5s4mrn$ = function (result) {
    return result.set_czzhjr$(this).norm();
  };
  Vec2d.prototype.rotate_b0flcl$ = function (angleDeg, result) {
    return result.set_czzhjr$(this).rotate_14dthe$(angleDeg);
  };
  Vec2d.prototype.scale_b0flcl$ = function (factor, result) {
    return result.set_czzhjr$(this).scale_14dthe$(factor);
  };
  Vec2d.prototype.sqrDistance_czzhjr$ = function (other) {
    var dx = this.x - other.x;
    var dy = this.y - other.y;
    return dx * dx + dy * dy;
  };
  Vec2d.prototype.sqrLength = function () {
    return this.x * this.x + this.y * this.y;
  };
  Vec2d.prototype.subtract_b18iao$ = function (other, result) {
    return result.set_czzhjr$(this).subtract_czzhjr$(other);
  };
  Vec2d.prototype.get_za3lpa$ = function (i) {
    return this.fields[i];
  };
  Vec2d.prototype.times_czzhjr$ = function (other) {
    return this.dot_czzhjr$(other);
  };
  Vec2d.prototype.toString = function () {
    return '(' + this.x + ', ' + this.y + ')';
  };
  Vec2d.prototype.toVec2f = function () {
    return new Vec2f(this.x, this.y);
  };
  Vec2d.prototype.toMutableVec2f = function () {
    return this.toMutableVec2f_5s4mrl$(MutableVec2f_init());
  };
  Vec2d.prototype.toMutableVec2f_5s4mrl$ = function (result) {
    return result.set_dleff0$(this.x, this.y);
  };
  Vec2d.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!Kotlin.isType(other, Vec2d))
      return false;
    if (this.x !== other.x)
      return false;
    if (this.y !== other.y)
      return false;
    return true;
  };
  Vec2d.prototype.hashCode = function () {
    var result = hashCode(this.x);
    result = (31 * result | 0) + hashCode(this.y) | 0;
    return result;
  };
  function Vec2d$Companion() {
    Vec2d$Companion_instance = this;
    this.ZERO = Vec2d_init(0.0);
    this.X_AXIS = new Vec2d(1.0, 0.0);
    this.Y_AXIS = new Vec2d(0.0, 1.0);
    this.NEG_X_AXIS = new Vec2d(-1.0, 0.0);
    this.NEG_Y_AXIS = new Vec2d(0.0, -1.0);
  }
  Vec2d$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vec2d$Companion_instance = null;
  function Vec2d$Companion_getInstance() {
    if (Vec2d$Companion_instance === null) {
      new Vec2d$Companion();
    }return Vec2d$Companion_instance;
  }
  Vec2d.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec2d',
    interfaces: []
  };
  function Vec2d_init(f, $this) {
    $this = $this || Object.create(Vec2d.prototype);
    Vec2d.call($this, f, f);
    return $this;
  }
  function Vec2d_init_0(v, $this) {
    $this = $this || Object.create(Vec2d.prototype);
    Vec2d.call($this, v.x, v.y);
    return $this;
  }
  function MutableVec2d(x, y) {
    Vec2d.call(this, x, y);
  }
  Object.defineProperty(MutableVec2d.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    },
    set: function (value) {
      this.set_5wr77w$(0, value);
    }
  });
  Object.defineProperty(MutableVec2d.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    },
    set: function (value) {
      this.set_5wr77w$(1, value);
    }
  });
  MutableVec2d.prototype.add_czzhjr$ = function (other) {
    this.x = this.x + other.x;
    this.y = this.y + other.y;
    return this;
  };
  MutableVec2d.prototype.mul_czzhjr$ = function (other) {
    this.x = this.x * other.x;
    this.y = this.y * other.y;
    return this;
  };
  MutableVec2d.prototype.norm = function () {
    return this.scale_14dthe$(1.0 / this.length());
  };
  MutableVec2d.prototype.rotate_14dthe$ = function (angleDeg) {
    var rad = angleDeg * package$math.DEG_2_RAD;
    var cos = Math_0.cos(rad);
    var sin = Math_0.sin(rad);
    var rx = this.x * cos - this.y * sin;
    var ry = this.x * sin + this.y * cos;
    this.x = rx;
    this.y = ry;
    return this;
  };
  MutableVec2d.prototype.scale_14dthe$ = function (factor) {
    this.x = this.x * factor;
    this.y = this.y * factor;
    return this;
  };
  MutableVec2d.prototype.set_lu1900$ = function (x, y) {
    this.x = x;
    this.y = y;
    return this;
  };
  MutableVec2d.prototype.set_czzhjr$ = function (other) {
    this.x = other.x;
    this.y = other.y;
    return this;
  };
  MutableVec2d.prototype.subtract_czzhjr$ = function (other) {
    this.x = this.x - other.x;
    this.y = this.y - other.y;
    return this;
  };
  MutableVec2d.prototype.divAssign_14dthe$ = function (div) {
    this.scale_14dthe$(1.0 / div);
  };
  MutableVec2d.prototype.minusAssign_czzhjr$ = function (other) {
    this.subtract_czzhjr$(other);
  };
  MutableVec2d.prototype.plusAssign_czzhjr$ = function (other) {
    this.add_czzhjr$(other);
  };
  MutableVec2d.prototype.set_5wr77w$ = function (i, v) {
    this.fields[i] = v;
  };
  MutableVec2d.prototype.timesAssign_14dthe$ = function (factor) {
    this.scale_14dthe$(factor);
  };
  MutableVec2d.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MutableVec2d',
    interfaces: [Vec2d]
  };
  function MutableVec2d_init($this) {
    $this = $this || Object.create(MutableVec2d.prototype);
    MutableVec2d.call($this, 0.0, 0.0);
    return $this;
  }
  function MutableVec2d_init_0(f, $this) {
    $this = $this || Object.create(MutableVec2d.prototype);
    MutableVec2d.call($this, f, f);
    return $this;
  }
  function MutableVec2d_init_1(v, $this) {
    $this = $this || Object.create(MutableVec2d.prototype);
    MutableVec2d.call($this, v.x, v.y);
    return $this;
  }
  function Vec3f(x, y, z) {
    Vec3f$Companion_getInstance();
    this.fields = new Float32Array(3);
    this.fields[0] = x;
    this.fields[1] = y;
    this.fields[2] = z;
  }
  Object.defineProperty(Vec3f.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    }
  });
  Object.defineProperty(Vec3f.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    }
  });
  Object.defineProperty(Vec3f.prototype, 'z', {
    get: function () {
      return this.get_za3lpa$(2);
    }
  });
  Vec3f.prototype.add_2gj7b4$ = function (other, result) {
    return result.set_czzhiu$(this).add_czzhiu$(other);
  };
  Vec3f.prototype.cross_2gj7b4$ = function (other, result) {
    result.x = this.y * other.z - this.z * other.y;
    result.y = this.z * other.x - this.x * other.z;
    result.z = this.x * other.y - this.y * other.x;
    return result;
  };
  Vec3f.prototype.distance_czzhiu$ = function (other) {
    var x = this.sqrDistance_czzhiu$(other);
    return Math_0.sqrt(x);
  };
  Vec3f.prototype.dot_czzhiu$ = function (other) {
    return this.x * other.x + this.y * other.y + this.z * other.z;
  };
  Vec3f.prototype.isFuzzyEqual_2qa7tb$ = function (other, eps) {
    if (eps === void 0)
      eps = FUZZY_EQ_F;
    var $receiver = this.x - other.x;
    var tmp$ = Math_0.abs($receiver) <= eps;
    if (tmp$) {
      var $receiver_0 = this.y - other.y;
      tmp$ = Math_0.abs($receiver_0) <= eps;
    }var tmp$_0 = tmp$;
    if (tmp$_0) {
      var $receiver_1 = this.z - other.z;
      tmp$_0 = Math_0.abs($receiver_1) <= eps;
    }return tmp$_0;
  };
  Vec3f.prototype.length = function () {
    var x = this.sqrLength();
    return Math_0.sqrt(x);
  };
  Vec3f.prototype.mix_a6wx89$ = function (other, weight, result) {
    result.x = other.x * weight + this.x * (1.0 - weight);
    result.y = other.y * weight + this.y * (1.0 - weight);
    result.z = other.z * weight + this.z * (1.0 - weight);
    return result;
  };
  Vec3f.prototype.mul_2gj7b4$ = function (other, result) {
    return result.set_czzhiu$(this).mul_czzhiu$(other);
  };
  Vec3f.prototype.norm_5s4mqq$ = function (result) {
    return result.set_czzhiu$(this).norm();
  };
  Vec3f.prototype.planeSpace_t87wgk$ = function (p, q) {
    var x = this.z;
    if (Math_0.abs(x) > SQRT_1_2) {
      var a = this.y * this.y + this.z * this.z;
      var k = 1.0 / Math_0.sqrt(a);
      p.x = 0.0;
      p.y = -this.z * k;
      p.z = this.y * k;
      q.x = a * k;
      q.y = -this.x * p.z;
      q.z = this.x * p.y;
    } else {
      var a_0 = this.x * this.x + this.y * this.y;
      var k_0 = 1.0 / Math_0.sqrt(a_0);
      p.x = -this.y * k_0;
      p.y = this.x * k_0;
      p.z = 0.0;
      q.x = -this.z * p.y;
      q.y = this.z * p.x;
      q.z = a_0 * k_0;
    }
  };
  Vec3f.prototype.rotate_hx2y1u$ = function (angleDeg, axisX, axisY, axisZ, result) {
    return result.set_czzhiu$(this).rotate_7b5o5w$(angleDeg, axisX, axisY, axisZ);
  };
  Vec3f.prototype.rotate_vqa64j$ = function (angleDeg, axis, result) {
    return result.set_czzhiu$(this).rotate_7b5o5w$(angleDeg, axis.x, axis.y, axis.z);
  };
  Vec3f.prototype.scale_749b8l$ = function (factor, result) {
    return result.set_czzhiu$(this).scale_mx4ult$(factor);
  };
  Vec3f.prototype.sqrDistance_czzhiu$ = function (other) {
    var dx = this.x - other.x;
    var dy = this.y - other.y;
    var dz = this.z - other.z;
    return dx * dx + dy * dy + dz * dz;
  };
  Vec3f.prototype.sqrLength = function () {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  };
  Vec3f.prototype.subtract_2gj7b4$ = function (other, result) {
    return result.set_czzhiu$(this).subtract_czzhiu$(other);
  };
  Vec3f.prototype.get_za3lpa$ = function (i) {
    return this.fields[i];
  };
  Vec3f.prototype.times_czzhiu$ = function (other) {
    return this.dot_czzhiu$(other);
  };
  Vec3f.prototype.toString = function () {
    return '(' + this.x + ', ' + this.y + ', ' + this.z + ')';
  };
  Vec3f.prototype.toVec3d = function () {
    return new Vec3d(this.x, this.y, this.z);
  };
  Vec3f.prototype.toMutableVec3d = function () {
    return this.toMutableVec3d_5s4mqs$(MutableVec3d_init());
  };
  Vec3f.prototype.toMutableVec3d_5s4mqs$ = function (result) {
    return result.set_yvo9jy$(this.x, this.y, this.z);
  };
  Vec3f.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!Kotlin.isType(other, Vec3f))
      return false;
    if (this.x !== other.x)
      return false;
    if (this.y !== other.y)
      return false;
    if (this.z !== other.z)
      return false;
    return true;
  };
  Vec3f.prototype.hashCode = function () {
    var result = hashCode(this.x);
    result = (31 * result | 0) + hashCode(this.y) | 0;
    result = (31 * result | 0) + hashCode(this.z) | 0;
    return result;
  };
  function Vec3f$Companion() {
    Vec3f$Companion_instance = this;
    this.ZERO = Vec3f_init(0.0);
    this.X_AXIS = new Vec3f(1.0, 0.0, 0.0);
    this.Y_AXIS = new Vec3f(0.0, 1.0, 0.0);
    this.Z_AXIS = new Vec3f(0.0, 0.0, 1.0);
    this.NEG_X_AXIS = new Vec3f(-1.0, 0.0, 0.0);
    this.NEG_Y_AXIS = new Vec3f(0.0, -1.0, 0.0);
    this.NEG_Z_AXIS = new Vec3f(0.0, 0.0, -1.0);
  }
  Vec3f$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vec3f$Companion_instance = null;
  function Vec3f$Companion_getInstance() {
    if (Vec3f$Companion_instance === null) {
      new Vec3f$Companion();
    }return Vec3f$Companion_instance;
  }
  Vec3f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec3f',
    interfaces: []
  };
  function Vec3f_init(f, $this) {
    $this = $this || Object.create(Vec3f.prototype);
    Vec3f.call($this, f, f, f);
    return $this;
  }
  function Vec3f_init_0(v, $this) {
    $this = $this || Object.create(Vec3f.prototype);
    Vec3f.call($this, v.x, v.y, v.z);
    return $this;
  }
  function MutableVec3f(x, y, z) {
    Vec3f.call(this, x, y, z);
  }
  Object.defineProperty(MutableVec3f.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    },
    set: function (value) {
      this.set_24o109$(0, value);
    }
  });
  Object.defineProperty(MutableVec3f.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    },
    set: function (value) {
      this.set_24o109$(1, value);
    }
  });
  Object.defineProperty(MutableVec3f.prototype, 'z', {
    get: function () {
      return this.get_za3lpa$(2);
    },
    set: function (value) {
      this.set_24o109$(2, value);
    }
  });
  Object.defineProperty(MutableVec3f.prototype, 'array', {
    get: function () {
      return this.fields;
    }
  });
  MutableVec3f.prototype.add_czzhiu$ = function (other) {
    this.x = this.x + other.x;
    this.y = this.y + other.y;
    this.z = this.z + other.z;
    return this;
  };
  MutableVec3f.prototype.mul_czzhiu$ = function (other) {
    this.x = this.x * other.x;
    this.y = this.y * other.y;
    this.z = this.z * other.z;
    return this;
  };
  MutableVec3f.prototype.norm = function () {
    return this.scale_mx4ult$(1.0 / this.length());
  };
  MutableVec3f.prototype.rotate_7b5o5w$ = function (angleDeg, axisX, axisY, axisZ) {
    var rad = angleDeg * package$math.DEG_2_RAD;
    var c = Math_0.cos(rad);
    var c1 = 1.0 - c;
    var s = Math_0.sin(rad);
    var rx = this.x * (axisX * axisX * c1 + c) + this.y * (axisX * axisY * c1 - axisZ * s) + this.z * (axisX * axisZ * c1 + axisY * s);
    var ry = this.x * (axisY * axisX * c1 + axisZ * s) + this.y * (axisY * axisY * c1 + c) + this.z * (axisY * axisZ * c1 - axisX * s);
    var rz = this.x * (axisX * axisZ * c1 - axisY * s) + this.y * (axisY * axisZ * c1 + axisX * s) + this.z * (axisZ * axisZ * c1 + c);
    this.x = rx;
    this.y = ry;
    this.z = rz;
    return this;
  };
  MutableVec3f.prototype.rotate_ad55pp$ = function (angleDeg, axis) {
    return this.rotate_7b5o5w$(angleDeg, axis.x, axis.y, axis.z);
  };
  MutableVec3f.prototype.scale_mx4ult$ = function (factor) {
    this.x = this.x * factor;
    this.y = this.y * factor;
    this.z = this.z * factor;
    return this;
  };
  MutableVec3f.prototype.set_y2kzbl$ = function (x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  };
  MutableVec3f.prototype.set_czzhiu$ = function (other) {
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
    return this;
  };
  MutableVec3f.prototype.subtract_czzhiu$ = function (other) {
    this.x = this.x - other.x;
    this.y = this.y - other.y;
    this.z = this.z - other.z;
    return this;
  };
  MutableVec3f.prototype.divAssign_mx4ult$ = function (div) {
    this.scale_mx4ult$(1.0 / div);
  };
  MutableVec3f.prototype.minusAssign_czzhiu$ = function (other) {
    this.subtract_czzhiu$(other);
  };
  MutableVec3f.prototype.plusAssign_czzhiu$ = function (other) {
    this.add_czzhiu$(other);
  };
  MutableVec3f.prototype.set_24o109$ = function (i, v) {
    this.fields[i] = v;
  };
  MutableVec3f.prototype.timesAssign_mx4ult$ = function (factor) {
    this.scale_mx4ult$(factor);
  };
  MutableVec3f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MutableVec3f',
    interfaces: [Vec3f]
  };
  function MutableVec3f_init($this) {
    $this = $this || Object.create(MutableVec3f.prototype);
    MutableVec3f.call($this, 0.0, 0.0, 0.0);
    return $this;
  }
  function MutableVec3f_init_0(f, $this) {
    $this = $this || Object.create(MutableVec3f.prototype);
    MutableVec3f.call($this, f, f, f);
    return $this;
  }
  function MutableVec3f_init_1(v, $this) {
    $this = $this || Object.create(MutableVec3f.prototype);
    MutableVec3f.call($this, v.x, v.y, v.z);
    return $this;
  }
  function Vec3d(x, y, z) {
    Vec3d$Companion_getInstance();
    this.fields = new Float64Array(3);
    this.fields[0] = x;
    this.fields[1] = y;
    this.fields[2] = z;
  }
  Object.defineProperty(Vec3d.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    }
  });
  Object.defineProperty(Vec3d.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    }
  });
  Object.defineProperty(Vec3d.prototype, 'z', {
    get: function () {
      return this.get_za3lpa$(2);
    }
  });
  Vec3d.prototype.add_vgki2o$ = function (other, result) {
    return result.set_czzhiw$(this).add_czzhiw$(other);
  };
  Vec3d.prototype.cross_vgki2o$ = function (other, result) {
    result.x = this.y * other.z - this.z * other.y;
    result.y = this.z * other.x - this.x * other.z;
    result.z = this.x * other.y - this.y * other.x;
    return result;
  };
  Vec3d.prototype.distance_czzhiw$ = function (other) {
    var x = this.sqrDistance_czzhiw$(other);
    return Math_0.sqrt(x);
  };
  Vec3d.prototype.dot_czzhiw$ = function (other) {
    return this.x * other.x + this.y * other.y + this.z * other.z;
  };
  Vec3d.prototype.isFuzzyEqual_6nz8ey$ = function (other, eps) {
    if (eps === void 0)
      eps = FUZZY_EQ_D;
    var $receiver = this.x - other.x;
    var tmp$ = Math_0.abs($receiver) <= eps;
    if (tmp$) {
      var $receiver_0 = this.y - other.y;
      tmp$ = Math_0.abs($receiver_0) <= eps;
    }var tmp$_0 = tmp$;
    if (tmp$_0) {
      var $receiver_1 = this.z - other.z;
      tmp$_0 = Math_0.abs($receiver_1) <= eps;
    }return tmp$_0;
  };
  Vec3d.prototype.length = function () {
    var x = this.sqrLength();
    return Math_0.sqrt(x);
  };
  Vec3d.prototype.mix_3odno2$ = function (other, weight, result) {
    result.x = other.x * weight + this.x * (1.0 - weight);
    result.y = other.y * weight + this.y * (1.0 - weight);
    result.z = other.z * weight + this.z * (1.0 - weight);
    return result;
  };
  Vec3d.prototype.mul_vgki2o$ = function (other, result) {
    return result.set_czzhiw$(this).mul_czzhiw$(other);
  };
  Vec3d.prototype.norm_5s4mqs$ = function (result) {
    return result.set_czzhiw$(this).norm();
  };
  Vec3d.prototype.planeSpace_7vsg4s$ = function (p, q) {
    var x = this.z;
    if (Math_0.abs(x) > SQRT_1_2) {
      var a = this.y * this.y + this.z * this.z;
      var k = 1.0 / Math_0.sqrt(a);
      p.x = 0.0;
      p.y = -this.z * k;
      p.z = this.y * k;
      q.x = a * k;
      q.y = -this.x * p.z;
      q.z = this.x * p.y;
    } else {
      var a_0 = this.x * this.x + this.y * this.y;
      var k_0 = 1.0 / Math_0.sqrt(a_0);
      p.x = -this.y * k_0;
      p.y = this.x * k_0;
      p.z = 0.0;
      q.x = -this.z * p.y;
      q.y = this.z * p.x;
      q.z = a_0 * k_0;
    }
  };
  Vec3d.prototype.rotate_8uuoh8$ = function (angleDeg, axisX, axisY, axisZ, result) {
    return result.set_czzhiw$(this).rotate_6y0v78$(angleDeg, axisX, axisY, axisZ);
  };
  Vec3d.prototype.rotate_cvw8z2$ = function (angleDeg, axis, result) {
    return result.set_czzhiw$(this).rotate_6y0v78$(angleDeg, axis.x, axis.y, axis.z);
  };
  Vec3d.prototype.scale_b0flbq$ = function (factor, result) {
    return result.set_czzhiw$(this).scale_14dthe$(factor);
  };
  Vec3d.prototype.sqrDistance_czzhiw$ = function (other) {
    var dx = this.x - other.x;
    var dy = this.y - other.y;
    var dz = this.z - other.z;
    return dx * dx + dy * dy + dz * dz;
  };
  Vec3d.prototype.sqrLength = function () {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  };
  Vec3d.prototype.subtract_vgki2o$ = function (other, result) {
    return result.set_czzhiw$(this).subtract_czzhiw$(other);
  };
  Vec3d.prototype.get_za3lpa$ = function (i) {
    return this.fields[i];
  };
  Vec3d.prototype.times_czzhiw$ = function (other) {
    return this.dot_czzhiw$(other);
  };
  Vec3d.prototype.toString = function () {
    return '(' + this.x + ', ' + this.y + ', ' + this.z + ')';
  };
  Vec3d.prototype.toVec3f = function () {
    return new Vec3f(this.x, this.y, this.z);
  };
  Vec3d.prototype.toMutableVec3f = function () {
    return this.toMutableVec3f_5s4mqq$(MutableVec3f_init());
  };
  Vec3d.prototype.toMutableVec3f_5s4mqq$ = function (result) {
    return result.set_y2kzbl$(this.x, this.y, this.z);
  };
  Vec3d.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!Kotlin.isType(other, Vec3d))
      return false;
    if (this.x !== other.x)
      return false;
    if (this.y !== other.y)
      return false;
    if (this.z !== other.z)
      return false;
    return true;
  };
  Vec3d.prototype.hashCode = function () {
    var result = hashCode(this.x);
    result = (31 * result | 0) + hashCode(this.y) | 0;
    result = (31 * result | 0) + hashCode(this.z) | 0;
    return result;
  };
  function Vec3d$Companion() {
    Vec3d$Companion_instance = this;
    this.ZERO = Vec3d_init(0.0);
    this.X_AXIS = new Vec3d(1.0, 0.0, 0.0);
    this.Y_AXIS = new Vec3d(0.0, 1.0, 0.0);
    this.Z_AXIS = new Vec3d(0.0, 0.0, 1.0);
    this.NEG_X_AXIS = new Vec3d(-1.0, 0.0, 0.0);
    this.NEG_Y_AXIS = new Vec3d(0.0, -1.0, 0.0);
    this.NEG_Z_AXIS = new Vec3d(0.0, 0.0, -1.0);
  }
  Vec3d$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vec3d$Companion_instance = null;
  function Vec3d$Companion_getInstance() {
    if (Vec3d$Companion_instance === null) {
      new Vec3d$Companion();
    }return Vec3d$Companion_instance;
  }
  Vec3d.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec3d',
    interfaces: []
  };
  function Vec3d_init(f, $this) {
    $this = $this || Object.create(Vec3d.prototype);
    Vec3d.call($this, f, f, f);
    return $this;
  }
  function Vec3d_init_0(v, $this) {
    $this = $this || Object.create(Vec3d.prototype);
    Vec3d.call($this, v.x, v.y, v.z);
    return $this;
  }
  function MutableVec3d(x, y, z) {
    Vec3d.call(this, x, y, z);
  }
  Object.defineProperty(MutableVec3d.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    },
    set: function (value) {
      this.set_5wr77w$(0, value);
    }
  });
  Object.defineProperty(MutableVec3d.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    },
    set: function (value) {
      this.set_5wr77w$(1, value);
    }
  });
  Object.defineProperty(MutableVec3d.prototype, 'z', {
    get: function () {
      return this.get_za3lpa$(2);
    },
    set: function (value) {
      this.set_5wr77w$(2, value);
    }
  });
  MutableVec3d.prototype.add_czzhiw$ = function (other) {
    this.x = this.x + other.x;
    this.y = this.y + other.y;
    this.z = this.z + other.z;
    return this;
  };
  MutableVec3d.prototype.mul_czzhiw$ = function (other) {
    this.x = this.x * other.x;
    this.y = this.y * other.y;
    this.z = this.z * other.z;
    return this;
  };
  MutableVec3d.prototype.norm = function () {
    return this.scale_14dthe$(1.0 / this.length());
  };
  MutableVec3d.prototype.rotate_6y0v78$ = function (angleDeg, axisX, axisY, axisZ) {
    var rad = angleDeg * package$math.DEG_2_RAD;
    var c = Math_0.cos(rad);
    var c1 = 1.0 - c;
    var s = Math_0.sin(rad);
    var rx = this.x * (axisX * axisX * c1 + c) + this.y * (axisX * axisY * c1 - axisZ * s) + this.z * (axisX * axisZ * c1 + axisY * s);
    var ry = this.x * (axisY * axisX * c1 + axisZ * s) + this.y * (axisY * axisY * c1 + c) + this.z * (axisY * axisZ * c1 - axisX * s);
    var rz = this.x * (axisX * axisZ * c1 - axisY * s) + this.y * (axisY * axisZ * c1 + axisX * s) + this.z * (axisZ * axisZ * c1 + c);
    this.x = rx;
    this.y = ry;
    this.z = rz;
    return this;
  };
  MutableVec3d.prototype.rotate_5820x2$ = function (angleDeg, axis) {
    return this.rotate_6y0v78$(angleDeg, axis.x, axis.y, axis.z);
  };
  MutableVec3d.prototype.scale_14dthe$ = function (factor) {
    this.x = this.x * factor;
    this.y = this.y * factor;
    this.z = this.z * factor;
    return this;
  };
  MutableVec3d.prototype.set_yvo9jy$ = function (x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  };
  MutableVec3d.prototype.set_czzhiw$ = function (other) {
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
    return this;
  };
  MutableVec3d.prototype.subtract_czzhiw$ = function (other) {
    this.x = this.x - other.x;
    this.y = this.y - other.y;
    this.z = this.z - other.z;
    return this;
  };
  MutableVec3d.prototype.divAssign_14dthe$ = function (div) {
    this.scale_14dthe$(1.0 / div);
  };
  MutableVec3d.prototype.minusAssign_czzhiw$ = function (other) {
    this.subtract_czzhiw$(other);
  };
  MutableVec3d.prototype.plusAssign_czzhiw$ = function (other) {
    this.add_czzhiw$(other);
  };
  MutableVec3d.prototype.set_5wr77w$ = function (i, v) {
    this.fields[i] = v;
  };
  MutableVec3d.prototype.timesAssign_14dthe$ = function (factor) {
    this.scale_14dthe$(factor);
  };
  MutableVec3d.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MutableVec3d',
    interfaces: [Vec3d]
  };
  function MutableVec3d_init($this) {
    $this = $this || Object.create(MutableVec3d.prototype);
    MutableVec3d.call($this, 0.0, 0.0, 0.0);
    return $this;
  }
  function MutableVec3d_init_0(f, $this) {
    $this = $this || Object.create(MutableVec3d.prototype);
    MutableVec3d.call($this, f, f, f);
    return $this;
  }
  function MutableVec3d_init_1(v, $this) {
    $this = $this || Object.create(MutableVec3d.prototype);
    MutableVec3d.call($this, v.x, v.y, v.z);
    return $this;
  }
  function Vec4f(x, y, z, w) {
    Vec4f$Companion_getInstance();
    this.fields = new Float32Array(4);
    this.fields[0] = x;
    this.fields[1] = y;
    this.fields[2] = z;
    this.fields[3] = w;
  }
  Object.defineProperty(Vec4f.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    }
  });
  Object.defineProperty(Vec4f.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    }
  });
  Object.defineProperty(Vec4f.prototype, 'z', {
    get: function () {
      return this.get_za3lpa$(2);
    }
  });
  Object.defineProperty(Vec4f.prototype, 'w', {
    get: function () {
      return this.get_za3lpa$(3);
    }
  });
  Vec4f.prototype.add_uzu8ww$ = function (other, result) {
    return result.set_czzhhz$(this).add_czzhhz$(other);
  };
  Vec4f.prototype.distance_czzhhz$ = function (other) {
    var x = this.sqrDistance_czzhhz$(other);
    return Math_0.sqrt(x);
  };
  Vec4f.prototype.dot_czzhhz$ = function (other) {
    return this.x * other.x + this.y * other.y + this.z * other.z + this.w * other.w;
  };
  Vec4f.prototype.isFuzzyEqual_m79ulu$ = function (other, eps) {
    if (eps === void 0)
      eps = FUZZY_EQ_F;
    var $receiver = this.x - other.x;
    var tmp$ = Math_0.abs($receiver) <= eps;
    if (tmp$) {
      var $receiver_0 = this.y - other.y;
      tmp$ = Math_0.abs($receiver_0) <= eps;
    }var tmp$_0 = tmp$;
    if (tmp$_0) {
      var $receiver_1 = this.z - other.z;
      tmp$_0 = Math_0.abs($receiver_1) <= eps;
    }var tmp$_1 = tmp$_0;
    if (tmp$_1) {
      var $receiver_2 = this.w - other.w;
      tmp$_1 = Math_0.abs($receiver_2) <= eps;
    }return tmp$_1;
  };
  Vec4f.prototype.length = function () {
    var x = this.sqrLength();
    return Math_0.sqrt(x);
  };
  Vec4f.prototype.mix_q86erb$ = function (other, weight, result) {
    result.x = other.x * weight + this.x * (1.0 - weight);
    result.y = other.y * weight + this.y * (1.0 - weight);
    result.z = other.z * weight + this.z * (1.0 - weight);
    result.w = other.w * weight + this.w * (1.0 - weight);
    return result;
  };
  Vec4f.prototype.mul_uzu8ww$ = function (other, result) {
    return result.set_czzhhz$(this).mul_czzhhz$(other);
  };
  Vec4f.prototype.norm_5s4mpv$ = function (result) {
    return result.set_czzhhz$(this).norm();
  };
  Vec4f.prototype.quatProduct_uzu8ww$ = function (otherQuat, result) {
    result.x = this.w * otherQuat.x + this.x * otherQuat.w + this.y * otherQuat.z - this.z * otherQuat.y;
    result.y = this.w * otherQuat.y + this.y * otherQuat.w + this.z * otherQuat.x - this.x * otherQuat.z;
    result.z = this.w * otherQuat.z + this.z * otherQuat.w + this.x * otherQuat.y - this.y * otherQuat.x;
    result.w = this.w * otherQuat.w - this.x * otherQuat.x - this.y * otherQuat.y - this.z * otherQuat.z;
    return result;
  };
  Vec4f.prototype.scale_749b7q$ = function (factor, result) {
    return result.set_czzhhz$(this).scale_mx4ult$(factor);
  };
  Vec4f.prototype.sqrDistance_czzhhz$ = function (other) {
    var dx = this.x - other.x;
    var dy = this.y - other.y;
    var dz = this.z - other.z;
    var dw = this.z - other.w;
    return dx * dx + dy * dy + dz * dz + dw * dw;
  };
  Vec4f.prototype.sqrLength = function () {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  };
  Vec4f.prototype.subtract_uzu8ww$ = function (other, result) {
    return result.set_czzhhz$(this).subtract_czzhhz$(other);
  };
  Vec4f.prototype.getXyz_5s4mqq$ = function (result) {
    result.x = this.x;
    result.y = this.y;
    result.z = this.z;
    return result;
  };
  Vec4f.prototype.get_za3lpa$ = function (i) {
    return this.fields[i];
  };
  Vec4f.prototype.times_czzhhz$ = function (other) {
    return this.dot_czzhhz$(other);
  };
  Vec4f.prototype.toString = function () {
    return '(' + this.x + ', ' + this.y + ', ' + this.z + ', ' + this.w + ')';
  };
  Vec4f.prototype.toVec4d = function () {
    return new Vec4d(this.x, this.y, this.z, this.w);
  };
  Vec4f.prototype.toMutableVec4d = function () {
    return this.toMutableVec4d_5s4mpx$(MutableVec4d_init());
  };
  Vec4f.prototype.toMutableVec4d_5s4mpx$ = function (result) {
    return result.set_6y0v78$(this.x, this.y, this.z, this.w);
  };
  Vec4f.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!Kotlin.isType(other, Vec4f))
      return false;
    if (this.x !== other.x)
      return false;
    if (this.y !== other.y)
      return false;
    if (this.z !== other.z)
      return false;
    if (this.w !== other.w)
      return false;
    return true;
  };
  Vec4f.prototype.hashCode = function () {
    var result = hashCode(this.x);
    result = (31 * result | 0) + hashCode(this.y) | 0;
    result = (31 * result | 0) + hashCode(this.z) | 0;
    result = (31 * result | 0) + hashCode(this.w) | 0;
    return result;
  };
  function Vec4f$Companion() {
    Vec4f$Companion_instance = this;
    this.ZERO = Vec4f_init(0.0);
    this.X_AXIS = new Vec4f(1.0, 0.0, 0.0, 0.0);
    this.Y_AXIS = new Vec4f(0.0, 1.0, 0.0, 0.0);
    this.Z_AXIS = new Vec4f(0.0, 0.0, 1.0, 0.0);
    this.W_AXIS = new Vec4f(0.0, 0.0, 0.0, 1.0);
    this.NEG_X_AXIS = new Vec4f(-1.0, 0.0, 0.0, 0.0);
    this.NEG_Y_AXIS = new Vec4f(0.0, -1.0, 0.0, 0.0);
    this.NEG_Z_AXIS = new Vec4f(0.0, 0.0, -1.0, 0.0);
    this.NEG_W_AXIS = new Vec4f(0.0, 0.0, 0.0, -1.0);
  }
  Vec4f$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vec4f$Companion_instance = null;
  function Vec4f$Companion_getInstance() {
    if (Vec4f$Companion_instance === null) {
      new Vec4f$Companion();
    }return Vec4f$Companion_instance;
  }
  Vec4f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec4f',
    interfaces: []
  };
  function Vec4f_init(f, $this) {
    $this = $this || Object.create(Vec4f.prototype);
    Vec4f.call($this, f, f, f, f);
    return $this;
  }
  function Vec4f_init_0(xyz, w, $this) {
    $this = $this || Object.create(Vec4f.prototype);
    Vec4f.call($this, xyz.x, xyz.y, xyz.z, w);
    return $this;
  }
  function Vec4f_init_1(v, $this) {
    $this = $this || Object.create(Vec4f.prototype);
    Vec4f.call($this, v.x, v.y, v.z, v.w);
    return $this;
  }
  function MutableVec4f(x, y, z, w) {
    Vec4f.call(this, x, y, z, w);
  }
  Object.defineProperty(MutableVec4f.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    },
    set: function (value) {
      this.set_24o109$(0, value);
    }
  });
  Object.defineProperty(MutableVec4f.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    },
    set: function (value) {
      this.set_24o109$(1, value);
    }
  });
  Object.defineProperty(MutableVec4f.prototype, 'z', {
    get: function () {
      return this.get_za3lpa$(2);
    },
    set: function (value) {
      this.set_24o109$(2, value);
    }
  });
  Object.defineProperty(MutableVec4f.prototype, 'w', {
    get: function () {
      return this.get_za3lpa$(3);
    },
    set: function (value) {
      this.set_24o109$(3, value);
    }
  });
  Object.defineProperty(MutableVec4f.prototype, 'array', {
    get: function () {
      return this.fields;
    }
  });
  MutableVec4f.prototype.add_czzhhz$ = function (other) {
    this.x = this.x + other.x;
    this.y = this.y + other.y;
    this.z = this.z + other.z;
    this.w = this.w + other.w;
    return this;
  };
  MutableVec4f.prototype.mul_czzhhz$ = function (other) {
    this.x = this.x * other.x;
    this.y = this.y * other.y;
    this.z = this.z * other.z;
    this.w = this.w * other.w;
    return this;
  };
  MutableVec4f.prototype.norm = function () {
    return this.scale_mx4ult$(1.0 / this.length());
  };
  MutableVec4f.prototype.quatProduct_czzhhz$ = function (otherQuat) {
    var px = this.w * otherQuat.x + this.x * otherQuat.w + this.y * otherQuat.z - this.z * otherQuat.y;
    var py = this.w * otherQuat.y + this.y * otherQuat.w + this.z * otherQuat.x - this.x * otherQuat.z;
    var pz = this.w * otherQuat.z + this.z * otherQuat.w + this.x * otherQuat.y - this.y * otherQuat.x;
    var pw = this.w * otherQuat.w - this.x * otherQuat.x - this.y * otherQuat.y - this.z * otherQuat.z;
    this.set_7b5o5w$(px, py, pz, pw);
    return this;
  };
  MutableVec4f.prototype.scale_mx4ult$ = function (factor) {
    this.x = this.x * factor;
    this.y = this.y * factor;
    this.z = this.z * factor;
    this.w = this.w * factor;
    return this;
  };
  MutableVec4f.prototype.set_7b5o5w$ = function (x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
    return this;
  };
  MutableVec4f.prototype.set_czzhhz$ = function (other) {
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
    this.w = other.w;
    return this;
  };
  MutableVec4f.prototype.set_2qa7tb$ = function (xyz, w) {
    if (w === void 0)
      w = 0.0;
    this.x = xyz.x;
    this.y = xyz.y;
    this.z = xyz.z;
    this.w = w;
    return this;
  };
  MutableVec4f.prototype.subtract_czzhhz$ = function (other) {
    this.x = this.x - other.x;
    this.y = this.y - other.y;
    this.z = this.z - other.z;
    this.w = this.w - other.w;
    return this;
  };
  MutableVec4f.prototype.plusAssign_czzhhz$ = function (other) {
    this.add_czzhhz$(other);
  };
  MutableVec4f.prototype.minusAssign_czzhhz$ = function (other) {
    this.subtract_czzhhz$(other);
  };
  MutableVec4f.prototype.set_24o109$ = function (i, v) {
    this.fields[i] = v;
  };
  MutableVec4f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MutableVec4f',
    interfaces: [Vec4f]
  };
  function MutableVec4f_init($this) {
    $this = $this || Object.create(MutableVec4f.prototype);
    MutableVec4f.call($this, 0.0, 0.0, 0.0, 0.0);
    return $this;
  }
  function MutableVec4f_init_0(f, $this) {
    $this = $this || Object.create(MutableVec4f.prototype);
    MutableVec4f.call($this, f, f, f, f);
    return $this;
  }
  function MutableVec4f_init_1(xyz, w, $this) {
    $this = $this || Object.create(MutableVec4f.prototype);
    MutableVec4f.call($this, xyz.x, xyz.y, xyz.z, w);
    return $this;
  }
  function MutableVec4f_init_2(other, $this) {
    $this = $this || Object.create(MutableVec4f.prototype);
    MutableVec4f.call($this, other.x, other.y, other.z, other.w);
    return $this;
  }
  function Vec4d(x, y, z, w) {
    Vec4d$Companion_getInstance();
    this.fields = new Float64Array(4);
    this.fields[0] = x;
    this.fields[1] = y;
    this.fields[2] = z;
    this.fields[3] = w;
  }
  Object.defineProperty(Vec4d.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    }
  });
  Object.defineProperty(Vec4d.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    }
  });
  Object.defineProperty(Vec4d.prototype, 'z', {
    get: function () {
      return this.get_za3lpa$(2);
    }
  });
  Object.defineProperty(Vec4d.prototype, 'w', {
    get: function () {
      return this.get_za3lpa$(3);
    }
  });
  Vec4d.prototype.add_2x9ggw$ = function (other, result) {
    return result.set_czzhi1$(this).add_czzhi1$(other);
  };
  Vec4d.prototype.distance_czzhi1$ = function (other) {
    var x = this.sqrDistance_czzhi1$(other);
    return Math_0.sqrt(x);
  };
  Vec4d.prototype.dot_czzhi1$ = function (other) {
    return this.x * other.x + this.y * other.y + this.z * other.z + this.w * other.w;
  };
  Vec4d.prototype.isFuzzyEqual_1rza9z$ = function (other, eps) {
    if (eps === void 0)
      eps = FUZZY_EQ_D;
    var $receiver = this.x - other.x;
    var tmp$ = Math_0.abs($receiver) <= eps;
    if (tmp$) {
      var $receiver_0 = this.y - other.y;
      tmp$ = Math_0.abs($receiver_0) <= eps;
    }var tmp$_0 = tmp$;
    if (tmp$_0) {
      var $receiver_1 = this.z - other.z;
      tmp$_0 = Math_0.abs($receiver_1) <= eps;
    }var tmp$_1 = tmp$_0;
    if (tmp$_1) {
      var $receiver_2 = this.w - other.w;
      tmp$_1 = Math_0.abs($receiver_2) <= eps;
    }return tmp$_1;
  };
  Vec4d.prototype.length = function () {
    var x = this.sqrLength();
    return Math_0.sqrt(x);
  };
  Vec4d.prototype.mix_3szysy$ = function (other, weight, result) {
    result.x = other.x * weight + this.x * (1.0 - weight);
    result.y = other.y * weight + this.y * (1.0 - weight);
    result.z = other.z * weight + this.z * (1.0 - weight);
    result.w = other.w * weight + this.w * (1.0 - weight);
    return result;
  };
  Vec4d.prototype.mul_2x9ggw$ = function (other, result) {
    return result.set_czzhi1$(this).mul_czzhi1$(other);
  };
  Vec4d.prototype.norm_5s4mpx$ = function (result) {
    return result.set_czzhi1$(this).norm();
  };
  Vec4d.prototype.quatProduct_2x9ggw$ = function (otherQuat, result) {
    result.x = this.w * otherQuat.x + this.x * otherQuat.w + this.y * otherQuat.z - this.z * otherQuat.y;
    result.y = this.w * otherQuat.y + this.y * otherQuat.w + this.z * otherQuat.x - this.x * otherQuat.z;
    result.z = this.w * otherQuat.z + this.z * otherQuat.w + this.x * otherQuat.y - this.y * otherQuat.x;
    result.w = this.w * otherQuat.w - this.x * otherQuat.x - this.y * otherQuat.y - this.z * otherQuat.z;
    return result;
  };
  Vec4d.prototype.scale_b0flav$ = function (factor, result) {
    return result.set_czzhi1$(this).scale_14dthe$(factor);
  };
  Vec4d.prototype.sqrDistance_czzhi1$ = function (other) {
    var dx = this.x - other.x;
    var dy = this.y - other.y;
    var dz = this.z - other.z;
    var dw = this.z - other.w;
    return dx * dx + dy * dy + dz * dz + dw * dw;
  };
  Vec4d.prototype.sqrLength = function () {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  };
  Vec4d.prototype.subtract_2x9ggw$ = function (other, result) {
    return result.set_czzhi1$(this).subtract_czzhi1$(other);
  };
  Vec4d.prototype.getXyz_5s4mqs$ = function (result) {
    result.x = this.x;
    result.y = this.y;
    result.z = this.z;
    return result;
  };
  Vec4d.prototype.get_za3lpa$ = function (i) {
    return this.fields[i];
  };
  Vec4d.prototype.times_czzhi1$ = function (other) {
    return this.dot_czzhi1$(other);
  };
  Vec4d.prototype.toString = function () {
    return '(' + this.x + ', ' + this.y + ', ' + this.z + ', ' + this.w + ')';
  };
  Vec4d.prototype.toVec4f = function () {
    return new Vec4f(this.x, this.y, this.z, this.w);
  };
  Vec4d.prototype.toMutableVec4f = function () {
    return this.toMutableVec4f_5s4mpv$(MutableVec4f_init());
  };
  Vec4d.prototype.toMutableVec4f_5s4mpv$ = function (result) {
    return result.set_7b5o5w$(this.x, this.y, this.z, this.w);
  };
  Vec4d.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!Kotlin.isType(other, Vec4d))
      return false;
    if (this.x !== other.x)
      return false;
    if (this.y !== other.y)
      return false;
    if (this.z !== other.z)
      return false;
    if (this.w !== other.w)
      return false;
    return true;
  };
  Vec4d.prototype.hashCode = function () {
    var result = hashCode(this.x);
    result = (31 * result | 0) + hashCode(this.y) | 0;
    result = (31 * result | 0) + hashCode(this.z) | 0;
    result = (31 * result | 0) + hashCode(this.w) | 0;
    return result;
  };
  function Vec4d$Companion() {
    Vec4d$Companion_instance = this;
    this.ZERO = Vec4d_init(0.0);
    this.X_AXIS = new Vec4d(1.0, 0.0, 0.0, 0.0);
    this.Y_AXIS = new Vec4d(0.0, 1.0, 0.0, 0.0);
    this.Z_AXIS = new Vec4d(0.0, 0.0, 1.0, 0.0);
    this.W_AXIS = new Vec4d(0.0, 0.0, 0.0, 1.0);
    this.NEG_X_AXIS = new Vec4d(-1.0, 0.0, 0.0, 0.0);
    this.NEG_Y_AXIS = new Vec4d(0.0, -1.0, 0.0, 0.0);
    this.NEG_Z_AXIS = new Vec4d(0.0, 0.0, -1.0, 0.0);
    this.NEG_W_AXIS = new Vec4d(0.0, 0.0, 0.0, -1.0);
  }
  Vec4d$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vec4d$Companion_instance = null;
  function Vec4d$Companion_getInstance() {
    if (Vec4d$Companion_instance === null) {
      new Vec4d$Companion();
    }return Vec4d$Companion_instance;
  }
  Vec4d.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec4d',
    interfaces: []
  };
  function Vec4d_init(f, $this) {
    $this = $this || Object.create(Vec4d.prototype);
    Vec4d.call($this, f, f, f, f);
    return $this;
  }
  function Vec4d_init_0(xyz, w, $this) {
    $this = $this || Object.create(Vec4d.prototype);
    Vec4d.call($this, xyz.x, xyz.y, xyz.z, w);
    return $this;
  }
  function Vec4d_init_1(v, $this) {
    $this = $this || Object.create(Vec4d.prototype);
    Vec4d.call($this, v.x, v.y, v.z, v.w);
    return $this;
  }
  function MutableVec4d(x, y, z, w) {
    Vec4d.call(this, x, y, z, w);
  }
  Object.defineProperty(MutableVec4d.prototype, 'x', {
    get: function () {
      return this.get_za3lpa$(0);
    },
    set: function (value) {
      this.set_5wr77w$(0, value);
    }
  });
  Object.defineProperty(MutableVec4d.prototype, 'y', {
    get: function () {
      return this.get_za3lpa$(1);
    },
    set: function (value) {
      this.set_5wr77w$(1, value);
    }
  });
  Object.defineProperty(MutableVec4d.prototype, 'z', {
    get: function () {
      return this.get_za3lpa$(2);
    },
    set: function (value) {
      this.set_5wr77w$(2, value);
    }
  });
  Object.defineProperty(MutableVec4d.prototype, 'w', {
    get: function () {
      return this.get_za3lpa$(3);
    },
    set: function (value) {
      this.set_5wr77w$(3, value);
    }
  });
  MutableVec4d.prototype.add_czzhi1$ = function (other) {
    this.x = this.x + other.x;
    this.y = this.y + other.y;
    this.z = this.z + other.z;
    this.w = this.w + other.w;
    return this;
  };
  MutableVec4d.prototype.mul_czzhi1$ = function (other) {
    this.x = this.x * other.x;
    this.y = this.y * other.y;
    this.z = this.z * other.z;
    this.w = this.w * other.w;
    return this;
  };
  MutableVec4d.prototype.norm = function () {
    return this.scale_14dthe$(1.0 / this.length());
  };
  MutableVec4d.prototype.quatProduct_czzhi1$ = function (otherQuat) {
    var px = this.w * otherQuat.x + this.x * otherQuat.w + this.y * otherQuat.z - this.z * otherQuat.y;
    var py = this.w * otherQuat.y + this.y * otherQuat.w + this.z * otherQuat.x - this.x * otherQuat.z;
    var pz = this.w * otherQuat.z + this.z * otherQuat.w + this.x * otherQuat.y - this.y * otherQuat.x;
    var pw = this.w * otherQuat.w - this.x * otherQuat.x - this.y * otherQuat.y - this.z * otherQuat.z;
    this.set_6y0v78$(px, py, pz, pw);
    return this;
  };
  MutableVec4d.prototype.scale_14dthe$ = function (factor) {
    this.x = this.x * factor;
    this.y = this.y * factor;
    this.z = this.z * factor;
    this.w = this.w * factor;
    return this;
  };
  MutableVec4d.prototype.set_6y0v78$ = function (x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
    return this;
  };
  MutableVec4d.prototype.set_czzhi1$ = function (other) {
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
    this.w = other.w;
    return this;
  };
  MutableVec4d.prototype.set_6nz8ey$ = function (xyz, w) {
    if (w === void 0)
      w = 0.0;
    this.x = xyz.x;
    this.y = xyz.y;
    this.z = xyz.z;
    this.w = w;
    return this;
  };
  MutableVec4d.prototype.subtract_czzhi1$ = function (other) {
    this.x = this.x - other.x;
    this.y = this.y - other.y;
    this.z = this.z - other.z;
    this.w = this.w - other.w;
    return this;
  };
  MutableVec4d.prototype.plusAssign_czzhi1$ = function (other) {
    this.add_czzhi1$(other);
  };
  MutableVec4d.prototype.minusAssign_czzhi1$ = function (other) {
    this.subtract_czzhi1$(other);
  };
  MutableVec4d.prototype.set_5wr77w$ = function (i, v) {
    this.fields[i] = v;
  };
  MutableVec4d.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MutableVec4d',
    interfaces: [Vec4d]
  };
  function MutableVec4d_init($this) {
    $this = $this || Object.create(MutableVec4d.prototype);
    MutableVec4d.call($this, 0.0, 0.0, 0.0, 0.0);
    return $this;
  }
  function MutableVec4d_init_0(f, $this) {
    $this = $this || Object.create(MutableVec4d.prototype);
    MutableVec4d.call($this, f, f, f, f);
    return $this;
  }
  function MutableVec4d_init_1(xyz, w, $this) {
    $this = $this || Object.create(MutableVec4d.prototype);
    MutableVec4d.call($this, xyz.x, xyz.y, xyz.z, w);
    return $this;
  }
  function MutableVec4d_init_2(other, $this) {
    $this = $this || Object.create(MutableVec4d.prototype);
    MutableVec4d.call($this, other.x, other.y, other.z, other.w);
    return $this;
  }
  function add(a, b) {
    return a.add_q2ruao$(b, MutableVec2f_init());
  }
  function add_0(a, b) {
    return a.add_2gj7b4$(b, MutableVec3f_init());
  }
  function add_1(a, b) {
    return a.add_uzu8ww$(b, MutableVec4f_init());
  }
  function add_2(a, b) {
    return a.add_b18iao$(b, MutableVec2d_init());
  }
  function add_3(a, b) {
    return a.add_vgki2o$(b, MutableVec3d_init());
  }
  function add_4(a, b) {
    return a.add_2x9ggw$(b, MutableVec4d_init());
  }
  function subtract(a, b) {
    return a.subtract_q2ruao$(b, MutableVec2f_init());
  }
  function subtract_0(a, b) {
    return a.subtract_2gj7b4$(b, MutableVec3f_init());
  }
  function subtract_1(a, b) {
    return a.subtract_uzu8ww$(b, MutableVec4f_init());
  }
  function subtract_2(a, b) {
    return a.subtract_b18iao$(b, MutableVec2d_init());
  }
  function subtract_3(a, b) {
    return a.subtract_vgki2o$(b, MutableVec3d_init());
  }
  function subtract_4(a, b) {
    return a.subtract_2x9ggw$(b, MutableVec4d_init());
  }
  function scale(a, fac) {
    return a.scale_749b9g$(fac, MutableVec2f_init());
  }
  function scale_0(a, fac) {
    return a.scale_749b8l$(fac, MutableVec3f_init());
  }
  function scale_1(a, fac) {
    return a.scale_749b7q$(fac, MutableVec4f_init());
  }
  function scale_2(a, fac) {
    return a.scale_b0flcl$(fac, MutableVec2d_init());
  }
  function scale_3(a, fac) {
    return a.scale_b0flbq$(fac, MutableVec3d_init());
  }
  function scale_4(a, fac) {
    return a.scale_b0flav$(fac, MutableVec4d_init());
  }
  function norm(a) {
    return a.norm_5s4mrl$(MutableVec2f_init());
  }
  function norm_0(a) {
    return a.norm_5s4mqq$(MutableVec3f_init());
  }
  function norm_1(a) {
    return a.norm_5s4mrn$(MutableVec2d_init());
  }
  function norm_2(a) {
    return a.norm_5s4mqs$(MutableVec3d_init());
  }
  function cross(a, b) {
    return a.cross_2gj7b4$(b, MutableVec3f_init());
  }
  function cross_0(a, b) {
    return a.cross_vgki2o$(b, MutableVec3d_init());
  }
  function xy($receiver) {
    return new Vec2f($receiver.x, $receiver.y);
  }
  function xy_0($receiver) {
    return new MutableVec2f($receiver.x, $receiver.y);
  }
  var slerpTmpAf;
  var slerpTmpBf;
  var slerpTmpCf;
  function slerp(quatA, quatB, f, result) {
    quatA.norm_5s4mpv$(slerpTmpAf);
    quatB.norm_5s4mpv$(slerpTmpBf);
    var clamp$result;
    if (f < 0.0) {
      clamp$result = 0.0;
    } else if (f > 1.0) {
      clamp$result = 1.0;
    } else {
      clamp$result = f;
    }
    var t = clamp$result;
    var $receiver = slerpTmpAf.dot_czzhhz$(slerpTmpBf);
    var min = -1.0;
    var clamp$result_0;
    if ($receiver < min) {
      clamp$result_0 = min;
    } else if ($receiver > 1.0) {
      clamp$result_0 = 1.0;
    } else {
      clamp$result_0 = $receiver;
    }
    var dot = clamp$result_0;
    if (dot < 0) {
      slerpTmpAf.scale_mx4ult$(-1.0);
      dot = -dot;
    }if (dot > 0.9995) {
      slerpTmpBf.subtract_uzu8ww$(slerpTmpAf, result).scale_mx4ult$(t).add_czzhhz$(slerpTmpAf).norm();
    } else {
      var x = dot;
      var theta0 = Math_0.acos(x);
      var theta = theta0 * t;
      slerpTmpAf.scale_749b7q$(-dot, slerpTmpCf).add_czzhhz$(slerpTmpBf).norm();
      slerpTmpAf.scale_mx4ult$(Math_0.cos(theta));
      slerpTmpCf.scale_mx4ult$(Math_0.sin(theta));
      result.set_czzhhz$(slerpTmpAf).add_czzhhz$(slerpTmpCf);
    }
    return result;
  }
  var slerpTmpAd;
  var slerpTmpBd;
  var slerpTmpCd;
  function slerp_0(quatA, quatB, f, result) {
    quatA.norm_5s4mpx$(slerpTmpAd);
    quatB.norm_5s4mpx$(slerpTmpBd);
    var clamp$result;
    if (f < 0.0) {
      clamp$result = 0.0;
    } else if (f > 1.0) {
      clamp$result = 1.0;
    } else {
      clamp$result = f;
    }
    var t = clamp$result;
    var $receiver = slerpTmpAd.dot_czzhi1$(slerpTmpBd);
    var min = -1.0;
    var clamp$result_0;
    if ($receiver < min) {
      clamp$result_0 = min;
    } else if ($receiver > 1.0) {
      clamp$result_0 = 1.0;
    } else {
      clamp$result_0 = $receiver;
    }
    var dot = clamp$result_0;
    if (dot < 0) {
      slerpTmpAd.scale_14dthe$(-1.0);
      dot = -dot;
    }if (dot > 0.9999995) {
      slerpTmpBd.subtract_2x9ggw$(slerpTmpAd, result).scale_14dthe$(t).add_czzhi1$(slerpTmpAd).norm();
    } else {
      var x = dot;
      var theta0 = Math_0.acos(x);
      var theta = theta0 * t;
      slerpTmpAd.scale_b0flav$(-dot, slerpTmpCd).add_czzhi1$(slerpTmpBd).norm();
      slerpTmpAd.scale_14dthe$(Math_0.cos(theta));
      slerpTmpCd.scale_14dthe$(Math_0.sin(theta));
      result.set_czzhi1$(slerpTmpAd).add_czzhi1$(slerpTmpCd);
    }
    return result;
  }
  function LowPassFilter(coeff, input) {
    SampleNode.call(this);
    this.coeff = coeff;
    this.input = input;
  }
  LowPassFilter.prototype.generate_mx4ult$ = function (dt) {
    return this.filter_mx4ult$(this.input.next_mx4ult$(dt));
  };
  LowPassFilter.prototype.filter_mx4ult$ = function (input) {
    this.sample = this.sample + (input - this.sample) / this.coeff;
    return this.sample;
  };
  LowPassFilter.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LowPassFilter',
    interfaces: [SampleNode]
  };
  function HighPassFilter(coeff, input) {
    SampleNode.call(this);
    this.coeff = coeff;
    this.input = input;
  }
  HighPassFilter.prototype.generate_mx4ult$ = function (dt) {
    return this.filter_mx4ult$(this.input.next_mx4ult$(dt));
  };
  HighPassFilter.prototype.filter_mx4ult$ = function (input) {
    this.sample = this.sample + (input - this.sample * this.coeff);
    return this.sample;
  };
  HighPassFilter.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HighPassFilter',
    interfaces: [SampleNode]
  };
  function MoodFilter(input) {
    MoodFilter$Companion_getInstance();
    SampleNode.call(this);
    this.input = input;
    this.cutoff = 1000.0;
    this.res = 0.05;
    this.y1_0 = 0.0;
    this.y2_0 = 0.0;
    this.y3_0 = 0.0;
    this.y4_0 = 0.0;
    this.oldx_0 = 0.0;
    this.oldy1_0 = 0.0;
    this.oldy2_0 = 0.0;
    this.oldy3_0 = 0.0;
  }
  MoodFilter.prototype.generate_mx4ult$ = function (dt) {
    return this.filter_dleff0$(this.input.current(), dt);
  };
  MoodFilter.prototype.filter_7b5o5w$ = function (cutoff, res, input, dt) {
    this.cutoff = cutoff;
    this.res = res;
    return this.filter_dleff0$(input, dt);
  };
  MoodFilter.prototype.filter_dleff0$ = function (input, dt) {
    var cut = 2 * this.cutoff * dt;
    var p = cut * (MoodFilter$Companion_getInstance().C1_0 - MoodFilter$Companion_getInstance().C2_0 * cut);
    var x = cut * math.PI * 0.5;
    var k = 2 * Math_0.sin(x) - 1;
    var t1 = (1 - p) * MoodFilter$Companion_getInstance().C3_0;
    var t2 = 12 + t1 * t1;
    var r = this.res * (t2 + 6 * t1) / (t2 - 6 * t1);
    var x_0 = input - r * this.y4_0;
    this.y1_0 = x_0 * p + this.oldx_0 * p - k * this.y1_0;
    this.y2_0 = this.y1_0 * p + this.oldy1_0 * p - k * this.y2_0;
    this.y3_0 = this.y2_0 * p + this.oldy2_0 * p - k * this.y3_0;
    this.y4_0 = this.y3_0 * p + this.oldy3_0 * p - k * this.y4_0;
    this.y4_0 -= this.y4_0 * this.y4_0 * this.y4_0 / 6;
    this.oldx_0 = x_0;
    this.oldy1_0 = this.y1_0;
    this.oldy2_0 = this.y2_0;
    this.oldy3_0 = this.y3_0;
    return this.y4_0;
  };
  function MoodFilter$Companion() {
    MoodFilter$Companion_instance = this;
    this.C1_0 = 1.8;
    this.C2_0 = 0.8;
    this.C3_0 = 1.386;
  }
  MoodFilter$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MoodFilter$Companion_instance = null;
  function MoodFilter$Companion_getInstance() {
    if (MoodFilter$Companion_instance === null) {
      new MoodFilter$Companion();
    }return MoodFilter$Companion_instance;
  }
  MoodFilter.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MoodFilter',
    interfaces: [SampleNode]
  };
  function HiHat(bpm) {
    SampleNode.call(this);
    this.bpm = bpm;
    this.highPass_0 = new HighPassFilter(1.7, this);
  }
  HiHat.prototype.generate_mx4ult$ = function (dt) {
    var noise = randomF_0(-1.0, 1.0);
    var pc2 = this.t % (60.0 / this.bpm);
    var pc1 = 266.0;
    if (this.t / 2 % 0.5 > 0.25) {
      pc1 = 106.0;
    }return this.highPass_0.filter_mx4ult$(SampleNode$Companion_getInstance().perc_7b5o5w$(noise, pc1, pc2)) * 0.2;
  };
  HiHat.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HiHat',
    interfaces: [SampleNode]
  };
  function Kick(bpm) {
    SampleNode.call(this);
    this.bpm = bpm;
    var $receiver = new Oscillator(Wave$Companion_getInstance().SINE);
    $receiver.frequency = 50.0;
    this.osc1_0 = $receiver;
    var $receiver_0 = new Oscillator(Wave$Companion_getInstance().SAW);
    $receiver_0.frequency = 10.0;
    this.osc2_0 = $receiver_0;
    this.lowPass_0 = new LowPassFilter(240.0, this);
  }
  Kick.prototype.generate_mx4ult$ = function (dt) {
    var osc = SampleNode$Companion_getInstance().clip_dleff0$(SampleNode$Companion_getInstance().clip_dleff0$(this.osc1_0.next_mx4ult$(dt), 0.37) * 2 + SampleNode$Companion_getInstance().clip_dleff0$(this.osc2_0.next_mx4ult$(dt), 0.07) * 4, 0.6);
    var s = SampleNode$Companion_getInstance().perc_7b5o5w$(osc, 54.0, this.t % (60.0 / this.bpm)) * 2;
    return this.lowPass_0.filter_mx4ult$(s) + this.click_0(60.0 / this.bpm, this.t) * 0.055;
  };
  Kick.prototype.click_0 = function (x, t) {
    return 1.0 - 2 * (t % x) / x;
  };
  Kick.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Kick',
    interfaces: [SampleNode]
  };
  function Melody() {
    SampleNode.call(this);
    var $receiver = new Oscillator(Wave$Companion_getInstance().SINE, 1.0 / 32.0);
    $receiver.gain = 140.0;
    this.lfo1_0 = $receiver;
    var $receiver_0 = new Oscillator(Wave$Companion_getInstance().SINE, 0.5);
    $receiver_0.gain = 0.2;
    $receiver_0.phaseShift = 0.5;
    this.lfo2_0 = $receiver_0;
    var $receiver_1 = new Oscillator(Wave$Companion_getInstance().SAW);
    $receiver_1.gain = 0.7;
    this.osc1_0 = $receiver_1;
    var $receiver_2 = new Oscillator(Wave$Companion_getInstance().SQUARE);
    $receiver_2.gain = 0.4;
    this.osc2_0 = $receiver_2;
    var $receiver_3 = new Oscillator(Wave$Companion_getInstance().SINE);
    $receiver_3.gain = 0.8;
    this.osc3_0 = $receiver_3;
    var $receiver_4 = new Oscillator(Wave$Companion_getInstance().SQUARE);
    $receiver_4.gain = 1.2;
    this.osc4_0 = $receiver_4;
    this.moodFilter_0 = new MoodFilter(this);
    this.chords_0 = [7, 7, 7, 12, 10, 10, 10, 15, 7, 7, 7, 15, 15, 17, 10, 29, 7, 7, 7, 24, 10, 10, 10, 19, 7, 7, 7, 15, 29, 24, 15, 10];
  }
  Melody.prototype.generate_mx4ult$ = function (dt) {
    var f = SampleNode$Companion_getInstance().note_vux9f0$(this.chords_0[numberToInt(this.t * 4) % this.chords_0.length], 0);
    var osc = this.osc1_0.next_dleff0$(dt, f) + this.osc2_0.next_dleff0$(dt, f / 2.0) + this.osc3_0.next_dleff0$(dt, f / 2.0) + this.osc4_0.next_dleff0$(dt, f * 3.0);
    return this.moodFilter_0.filter_7b5o5w$(this.lfo1_0.next_mx4ult$(dt) + 1050, this.lfo2_0.next_mx4ult$(dt), SampleNode$Companion_getInstance().perc_7b5o5w$(osc, 48.0, this.t % 0.125), dt) * 0.25;
  };
  Melody.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Melody',
    interfaces: [SampleNode]
  };
  function Oscillator(shape, frequency) {
    if (frequency === void 0)
      frequency = 440.0;
    SampleNode.call(this);
    this.shape = shape;
    this.frequency = frequency;
    this.pos = 0.0;
    this.phaseShift_luel7x$_0 = 0.0;
  }
  Object.defineProperty(Oscillator.prototype, 'phaseShift', {
    get: function () {
      return this.phaseShift_luel7x$_0;
    },
    set: function (value) {
      var clamp$result;
      if (value < 0.0) {
        clamp$result = 0.0;
      } else if (value > 1.0) {
        clamp$result = 1.0;
      } else {
        clamp$result = value;
      }
      this.phaseShift_luel7x$_0 = clamp$result;
    }
  });
  Oscillator.prototype.generate_mx4ult$ = function (dt) {
    this.pos += dt * this.frequency;
    if (this.pos > 1) {
      this.pos -= 1;
    }return this.shape.get_mx4ult$(this.pos + this.phaseShift);
  };
  Oscillator.prototype.next_dleff0$ = function (dt, freq) {
    this.frequency = freq;
    return this.next_mx4ult$(dt);
  };
  Oscillator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Oscillator',
    interfaces: [SampleNode]
  };
  function Pad() {
    SampleNode.call(this);
    var $receiver = new Oscillator(Wave$Companion_getInstance().SINE, 2.0);
    $receiver.gain = 0.2;
    this.lfo1_0 = $receiver;
    var $receiver_0 = new Oscillator(Wave$Companion_getInstance().SINE, 2.0);
    $receiver_0.gain = 150.0;
    this.lfo2_0 = $receiver_0;
    var $receiver_1 = new Oscillator(Wave$Companion_getInstance().SAW);
    $receiver_1.gain = 5.1;
    this.osc1_0 = $receiver_1;
    var $receiver_2 = new Oscillator(Wave$Companion_getInstance().SAW);
    $receiver_2.gain = 3.9;
    this.osc2_0 = $receiver_2;
    var $receiver_3 = new Oscillator(Wave$Companion_getInstance().SAW);
    $receiver_3.gain = 4.0;
    this.osc3_0 = $receiver_3;
    var $receiver_4 = new Oscillator(Wave$Companion_getInstance().SQUARE);
    $receiver_4.gain = 3.0;
    this.osc4_0 = $receiver_4;
    this.highPass_0 = new HighPassFilter(0.5, this);
    this.moodFilter_0 = new MoodFilter(this);
    this.chords_0 = [new Int32Array([7, 12, 17, 10]), new Int32Array([10, 15, 19, 24])];
  }
  Pad.prototype.generate_mx4ult$ = function (dt) {
    var n = this.chords_0[numberToInt(this.t / 4) % this.chords_0.length];
    var osc = this.osc1_0.next_dleff0$(dt, SampleNode$Companion_getInstance().note_vux9f0$(n[0], 1)) + this.osc2_0.next_dleff0$(dt, SampleNode$Companion_getInstance().note_vux9f0$(n[1], 2)) + this.osc3_0.next_dleff0$(dt, SampleNode$Companion_getInstance().note_vux9f0$(n[2], 1)) + this.osc4_0.next_dleff0$(dt, SampleNode$Companion_getInstance().note_vux9f0$(n[3], 0)) + SampleNode$Companion_getInstance().noise_mx4ult$(0.7);
    var s = this.moodFilter_0.filter_7b5o5w$(this.lfo2_0.next_mx4ult$(dt) + 1100, 0.05, osc / 33.0, dt);
    return (this.lfo1_0.next_mx4ult$(dt) + 0.5) * this.highPass_0.filter_mx4ult$(s) * 0.15;
  };
  Pad.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Pad',
    interfaces: [SampleNode]
  };
  function SampleNode() {
    SampleNode$Companion_getInstance();
    this.gain = 1.0;
    this.t_brvpvk$_0 = 0.0;
    this.sample = 0.0;
  }
  Object.defineProperty(SampleNode.prototype, 't', {
    get: function () {
      return this.t_brvpvk$_0;
    },
    set: function (t) {
      this.t_brvpvk$_0 = t;
    }
  });
  SampleNode.prototype.current = function () {
    return this.sample;
  };
  SampleNode.prototype.next_mx4ult$ = function (dt) {
    this.t = this.t + dt;
    this.sample = this.generate_mx4ult$(dt) * this.gain;
    return this.sample;
  };
  function SampleNode$Companion() {
    SampleNode$Companion_instance = this;
    var array = Array_0(15);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var array_0 = new Float32Array(100);
      var tmp$_0;
      tmp$_0 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
        var x = ((i_0 - 20 | 0) - 33.0 + 12.0 * (i - 5 | 0)) / 12.0;
        array_0[i_0] = Math_0.pow(2.0, x) * 440.0;
      }
      array[i] = array_0;
    }
    this.NOTE_TABLE_0 = array;
  }
  SampleNode$Companion.prototype.clip_dleff0$ = function (value, clip) {
    var min = -clip;
    var clamp$result;
    if (value < min) {
      clamp$result = min;
    } else if (value > clip) {
      clamp$result = clip;
    } else {
      clamp$result = value;
    }
    return clamp$result;
  };
  SampleNode$Companion.prototype.noise_mx4ult$ = function (amplitude) {
    if (amplitude === void 0)
      amplitude = 1.0;
    return randomF_0(-amplitude, amplitude);
  };
  SampleNode$Companion.prototype.note_vux9f0$ = function (note, octave) {
    var clamp$result;
    if (octave < -5) {
      clamp$result = -5;
    } else if (octave > 9) {
      clamp$result = 9;
    } else {
      clamp$result = octave;
    }
    var o = clamp$result + 5 | 0;
    var clamp$result_0;
    if (note < -20) {
      clamp$result_0 = -20;
    } else if (note > 79) {
      clamp$result_0 = 79;
    } else {
      clamp$result_0 = note;
    }
    var n = clamp$result_0 + 20 | 0;
    return this.NOTE_TABLE_0[o][n];
  };
  SampleNode$Companion.prototype.perc_7b5o5w$ = function (sample, decay, f, c) {
    if (c === void 0)
      c = 0.889;
    var b = c - f * decay / (f * decay + 1);
    return sample * Math_0.max(0.0, b);
  };
  SampleNode$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SampleNode$Companion_instance = null;
  function SampleNode$Companion_getInstance() {
    if (SampleNode$Companion_instance === null) {
      new SampleNode$Companion();
    }return SampleNode$Companion_instance;
  }
  SampleNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SampleNode',
    interfaces: []
  };
  function Shaker(bpm) {
    SampleNode.call(this);
    this.bpm = bpm;
    this.highPass_0 = new HighPassFilter(1.5, this);
  }
  Shaker.prototype.generate_mx4ult$ = function (dt) {
    var pc2 = this.t % (60.0 / this.bpm) / 8;
    var pc1 = 230.0;
    if ((this.t + 0.5) % 0.5 > 0.25) {
      pc1 = 150.0;
    }return this.highPass_0.filter_mx4ult$(SampleNode$Companion_getInstance().perc_7b5o5w$(SampleNode$Companion_getInstance().noise_mx4ult$(), pc1, pc2, 0.95)) * 0.1;
  };
  Shaker.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Shaker',
    interfaces: [SampleNode]
  };
  function Snare(bpm) {
    SampleNode.call(this);
    this.bpm = bpm;
    var $receiver = new Oscillator(Wave$Companion_getInstance().SQUARE, 175.0);
    $receiver.gain = 0.156;
    this.osc_0 = $receiver;
    this.lowPass_0 = new LowPassFilter(30.0, this);
  }
  Snare.prototype.generate_mx4ult$ = function (dt) {
    var s = this.osc_0.next_mx4ult$(dt) + SampleNode$Companion_getInstance().noise_mx4ult$(0.73);
    var pc2 = (this.t + 0.5) % (60.0 / this.bpm);
    var pc1 = 120.0;
    if (this.t % 2 > 1) {
      pc1 = 105.0;
    }return this.lowPass_0.filter_mx4ult$(SampleNode$Companion_getInstance().perc_7b5o5w$(s, pc1, pc2) * 0.6) * 5;
  };
  Snare.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Snare',
    interfaces: [SampleNode]
  };
  function Wave(tableSize, generator) {
    Wave$Companion_getInstance();
    this.tableSize = tableSize;
    this.table_0 = new Float32Array(this.tableSize);
    var tmp$;
    tmp$ = this.tableSize;
    for (var i = 0; i < tmp$; i++) {
      this.table_0[i] = generator(i / this.tableSize);
    }
  }
  Wave.prototype.get_mx4ult$ = function (index) {
    return this.table_0[numberToInt(index * this.tableSize) % this.tableSize];
  };
  function Wave$Companion() {
    Wave$Companion_instance = this;
    this.DEFAULT_TABLE_SIZE = 2048;
    this.SINE = new Wave(2048, Wave$Companion$SINE$lambda);
    this.SAW = new Wave(2048, Wave$Companion$SAW$lambda);
    this.RAMP = new Wave(2048, Wave$Companion$RAMP$lambda);
    this.TRIANGLE = new Wave(2048, Wave$Companion$TRIANGLE$lambda);
    this.SQUARE = new Wave(2048, Wave$Companion$SQUARE$lambda);
  }
  function Wave$Companion$SINE$lambda(p) {
    var x = p * math.PI * 2;
    return Math_0.sin(x);
  }
  function Wave$Companion$SAW$lambda(p) {
    return -2.0 * (p - round(p));
  }
  function Wave$Companion$RAMP$lambda(p) {
    return 2.0 * (p - round(p));
  }
  function Wave$Companion$TRIANGLE$lambda(p) {
    var x = round(p) - p;
    return 1.0 - 4.0 * Math_0.abs(x);
  }
  function Wave$Companion$SQUARE$lambda(p) {
    return p < 0.5 ? 1.0 : -1.0;
  }
  Wave$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Wave$Companion_instance = null;
  function Wave$Companion_getInstance() {
    if (Wave$Companion_instance === null) {
      new Wave$Companion();
    }return Wave$Companion_instance;
  }
  Wave.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Wave',
    interfaces: []
  };
  function HalfEdgeMesh(geometry, edgeHandler) {
    if (edgeHandler === void 0)
      edgeHandler = new ListEdgeHandler();
    Mesh.call(this, geometry);
    this.edgeHandler = edgeHandler;
    this.verts_0 = null;
    this.positionOffset_0 = ensureNotNull(geometry.attributeOffsets.get_11rb$(Attribute$Companion_getInstance().POSITIONS));
    this.tmpVec1_0 = MutableVec3f_init();
    this.tmpVec2_0 = MutableVec3f_init();
    this.tmpVec3_0 = MutableVec3f_init();
    this.vertexIt1_0 = geometry.get_za3lpa$(0);
    this.vertexIt2_0 = geometry.get_za3lpa$(0);
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var size = geometry.numVertices;
    var list = ArrayList_init(size);
    for (var index = 0; index < size; index++) {
      list.add_11rb$(new HalfEdgeMesh$HalfEdgeVertex(this, index));
    }
    this.verts_0 = list;
    tmp$ = geometry.numIndices;
    for (var i = 0; i < tmp$; i += 3) {
      var v0 = this.verts_0.get_za3lpa$(geometry.indices.get_za3lpa$(i));
      var v1 = this.verts_0.get_za3lpa$(geometry.indices.get_za3lpa$(i + 1 | 0));
      var v2 = this.verts_0.get_za3lpa$(geometry.indices.get_za3lpa$(i + 2 | 0));
      var e0 = new HalfEdgeMesh$HalfEdge(this, v0, v1);
      var $receiver = new HalfEdgeMesh$HalfEdge(this, v1, v2);
      e0.next = $receiver;
      var e1 = $receiver;
      var $receiver_0 = new HalfEdgeMesh$HalfEdge(this, v2, v0);
      e1.next = $receiver_0;
      $receiver_0.next = e0;
      var e2 = $receiver_0;
      var tmp$_3;
      if ((tmp$_0 = v1.getEdgeTo_n38rgs$(v0)) != null) {
        tmp$_0.opp = e0;
        tmp$_3 = tmp$_0;
      } else
        tmp$_3 = null;
      e0.opp = tmp$_3;
      var tmp$_4;
      if ((tmp$_1 = v2.getEdgeTo_n38rgs$(v1)) != null) {
        tmp$_1.opp = e1;
        tmp$_4 = tmp$_1;
      } else
        tmp$_4 = null;
      e1.opp = tmp$_4;
      var tmp$_5;
      if ((tmp$_2 = v0.getEdgeTo_n38rgs$(v2)) != null) {
        tmp$_2.opp = e2;
        tmp$_5 = tmp$_2;
      } else
        tmp$_5 = null;
      e2.opp = tmp$_5;
      this.edgeHandler.plusAssign_ebe40$(e0);
      this.edgeHandler.plusAssign_ebe40$(e1);
      this.edgeHandler.plusAssign_ebe40$(e2);
    }
  }
  Object.defineProperty(HalfEdgeMesh.prototype, 'vertices', {
    get: function () {
      return this.verts_0;
    }
  });
  Object.defineProperty(HalfEdgeMesh.prototype, 'vertCount', {
    get: function () {
      return this.verts_0.size;
    }
  });
  Object.defineProperty(HalfEdgeMesh.prototype, 'faceCount', {
    get: function () {
      return this.edgeHandler.numEdges / 3 | 0;
    }
  });
  function HalfEdgeMesh$EdgeHandler() {
  }
  HalfEdgeMesh$EdgeHandler.prototype.distinctTriangleEdges = function () {
    var destination = ArrayList_init_0();
    var tmp$;
    tmp$ = this.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (element.id.compareTo_11rb$(element.next.id) < 0 && element.id.compareTo_11rb$(element.next.next.id) < 0)
        destination.add_11rb$(element);
    }
    return destination;
  };
  HalfEdgeMesh$EdgeHandler.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'EdgeHandler',
    interfaces: [Iterable]
  };
  HalfEdgeMesh.prototype.generateWireframe_6olbr4$ = function (lineMesh, lineColor) {
    if (lineColor === void 0)
      lineColor = Color$Companion_getInstance().MD_PINK;
    var v0 = MutableVec3f_init();
    var v1 = MutableVec3f_init();
    var $receiver = this.edgeHandler;
    var destination = ArrayList_init_0();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (element.opp == null || element.from.index < element.to.index)
        destination.add_11rb$(element);
    }
    var tmp$_0;
    tmp$_0 = destination.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      v0.set_czzhiu$(element_0.from);
      v1.set_czzhiu$(element_0.to);
      lineMesh.addLine_b8opkg$(v0, lineColor, v1, lineColor);
    }
  };
  function HalfEdgeMesh$sanitize$lambda(closure$v, this$HalfEdgeMesh) {
    return function (it) {
      if (it.isDeleted) {
        var $receiver = this$HalfEdgeMesh;
        var $this = package$util.Log;
        var level = Log$Level.WARN;
        var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
        if (level.level >= $this.level.level) {
          $this.printer(level, tag, 'Deleted edge in v, edge.from == v: ' + (it.from === closure$v));
        }}return it.isDeleted;
    };
  }
  HalfEdgeMesh.prototype.sanitize = function () {
    var tmp$, tmp$_0, tmp$_1;
    var vIt = this.verts_0.iterator();
    var vi = 0;
    while (vIt.hasNext()) {
      var v = vIt.next();
      if (v.isDeleted) {
        vIt.remove();
      } else {
        v.index = (tmp$ = vi, vi = tmp$ + 1 | 0, tmp$);
      }
    }
    var vertCnt = this.verts_0.size;
    this.edgeHandler.rebuild();
    if (this.edgeHandler.numEdges % 3 !== 0) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Uneven edge count: ' + this.edgeHandler.numEdges % 3);
      }}var removeEdges = ArrayList_init_0();
    tmp$_0 = this.verts_0.iterator();
    while (tmp$_0.hasNext()) {
      var v_0 = tmp$_0.next();
      removeAll(v_0.edges, HalfEdgeMesh$sanitize$lambda(v_0, this));
      tmp$_1 = v_0.edges.iterator();
      while (tmp$_1.hasNext()) {
        var he = tmp$_1.next();
        var i0 = he.from.index;
        var i1 = he.next.from.index;
        var i2 = he.next.next.from.index;
        if (i0 >= vertCnt || i1 >= vertCnt || i2 >= vertCnt) {
          var $this_0 = package$util.Log;
          var level_0 = Log$Level.WARN;
          var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
          if (level_0.level >= $this_0.level.level) {
            $this_0.printer(level_0, tag_0, 'Inconsistent triangle indices: i0=' + i0 + ', i1=' + i1 + ', i2=' + i2 + ', mesh has only ' + vertCnt + ' vertices');
          }removeEdges.add_11rb$(he);
        }}
    }
    var tmp$_2;
    tmp$_2 = this.edgeHandler.iterator();
    while (tmp$_2.hasNext()) {
      var element = tmp$_2.next();
      if (element.from.isDeleted || element.from.index >= vertCnt || element.to.isDeleted || element.to.index >= vertCnt) {
        var $this_1 = package$util.Log;
        var level_1 = Log$Level.WARN;
        var tag_1 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_1.level >= $this_1.level.level) {
          $this_1.printer(level_1, tag_1, 'Inconsistent edge: ' + element.from.index + ' (del=' + element.from.isDeleted + ') -> ' + element.to.index + ' (del=' + element.to.isDeleted + '), mesh has only ' + vertCnt + ' vertices');
        }removeEdges.add_11rb$(element);
      }if (element === element.next || element === element.next.next) {
        var $this_2 = package$util.Log;
        var level_2 = Log$Level.WARN;
        var tag_2 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_2.level >= $this_2.level.level) {
          $this_2.printer(level_2, tag_2, 'Invalid edge linkage: he == he.next || he == he.next.next');
        }removeEdges.add_11rb$(element);
      }}
    var tmp$_3;
    tmp$_3 = removeEdges.iterator();
    while (tmp$_3.hasNext()) {
      var element_0 = tmp$_3.next();
      element_0.deleteTriangle();
    }
  };
  function HalfEdgeMesh$rebuild$lambda(this$HalfEdgeMesh, closure$generateNormals, closure$generateTangents) {
    return function ($receiver) {
      var tmp$, tmp$_0;
      var strideF = this$HalfEdgeMesh.geometry.vertexSizeF;
      var strideI = this$HalfEdgeMesh.geometry.vertexSizeI;
      var vertCnt = this$HalfEdgeMesh.verts_0.size;
      var newDataF = createFloat32Buffer(Kotlin.imul(vertCnt, strideF));
      var newDataI = strideI > 0 ? createUint32Buffer(Kotlin.imul(vertCnt, strideI)) : this$HalfEdgeMesh.geometry.dataI;
      tmp$ = this$HalfEdgeMesh.verts_0;
      for (var i = 0; i !== tmp$.size; ++i) {
        var oldIdx = this$HalfEdgeMesh.verts_0.get_za3lpa$(i).meshDataIndex_8be2vx$;
        this$HalfEdgeMesh.verts_0.get_za3lpa$(i).meshDataIndex_8be2vx$ = this$HalfEdgeMesh.verts_0.get_za3lpa$(i).index;
        for (var j = 0; j < strideF; j++) {
          newDataF.put_mx4ult$(this$HalfEdgeMesh.geometry.dataF.get_za3lpa$(Kotlin.imul(oldIdx, strideF) + j | 0));
        }
        if (strideI > 0) {
          for (var j_0 = 0; j_0 < strideI; j_0++) {
            newDataI.put_za3lpa$(this$HalfEdgeMesh.geometry.dataI.get_za3lpa$(Kotlin.imul(oldIdx, strideI) + j_0 | 0));
          }
        }}
      this$HalfEdgeMesh.geometry.clearIndices();
      tmp$_0 = this$HalfEdgeMesh.edgeHandler.distinctTriangleEdges().iterator();
      while (tmp$_0.hasNext()) {
        var e = tmp$_0.next();
        this$HalfEdgeMesh.geometry.addIndex_za3lpa$(e.from.index);
        this$HalfEdgeMesh.geometry.addIndex_za3lpa$(e.next.from.index);
        this$HalfEdgeMesh.geometry.addIndex_za3lpa$(e.next.next.from.index);
      }
      if (this$HalfEdgeMesh.geometry.numIndices !== (this$HalfEdgeMesh.faceCount * 3 | 0)) {
        var $this = package$util.Log;
        var level = Log$Level.WARN;
        var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
        if (level.level >= $this.level.level) {
          var tmp$_1 = $this.printer;
          var this$HalfEdgeMesh_0 = this$HalfEdgeMesh;
          tmp$_1.call($this, level, tag, 'Inconsistent triangle count! MeshData: ' + (this$HalfEdgeMesh_0.geometry.numIndices / 3 | 0) + ', HalfEdgeMesh: ' + this$HalfEdgeMesh_0.faceCount);
        }}this$HalfEdgeMesh.geometry.dataF = newDataF;
      this$HalfEdgeMesh.geometry.dataI = newDataI;
      this$HalfEdgeMesh.geometry.numVertices = vertCnt;
      if (closure$generateNormals) {
        this$HalfEdgeMesh.geometry.generateNormals();
      }if (closure$generateTangents) {
        this$HalfEdgeMesh.geometry.generateTangents();
      }return Unit;
    };
  }
  HalfEdgeMesh.prototype.rebuild_dqye30$ = function (generateNormals, generateTangents) {
    if (generateNormals === void 0)
      generateNormals = true;
    if (generateTangents === void 0)
      generateTangents = true;
    this.sanitize();
    var $this = this.geometry;
    var wasBatchUpdate = $this.isBatchUpdate;
    $this.isBatchUpdate = true;
    HalfEdgeMesh$rebuild$lambda(this, generateNormals, generateTangents)($this);
    $this.hasChanged = true;
    $this.isBatchUpdate = wasBatchUpdate;
    if (true) {
      $this.rebuildBounds();
    }};
  HalfEdgeMesh.prototype.selectBorders = function () {
    var tmp$, tmp$_0;
    var borders = ArrayList_init_0();
    var collected = LinkedHashSet_init();
    var border = ArrayList_init_0();
    tmp$ = this.edgeHandler.iterator();
    while (tmp$.hasNext()) {
      var edge = tmp$.next();
      if (edge.opp == null) {
        var borderEdge = edge;
        while (!collected.contains_11rb$(borderEdge)) {
          border.add_11rb$(borderEdge);
          collected.add_11rb$(borderEdge);
          var $receiver = borderEdge.to.edges;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_1;
            tmp$_1 = $receiver.iterator();
            while (tmp$_1.hasNext()) {
              var element = tmp$_1.next();
              if (element.opp == null && !collected.contains_11rb$(element)) {
                firstOrNull$result = element;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          tmp$_0 = firstOrNull$result;
          if (tmp$_0 == null) {
            break;
          }borderEdge = tmp$_0;
        }
        if (!border.isEmpty()) {
          borders.add_11rb$(border);
          border = ArrayList_init_0();
        }}}
    return borders;
  };
  HalfEdgeMesh.prototype.subSelect_ojfeji$ = function (start, maxTris) {
    if (maxTris === void 0)
      maxTris = 0;
    var selection = ArrayList_init_0();
    var borderEdges = LinkedHashSet_init();
    var innerEdges = LinkedHashSet_init();
    var borderQueue = mutableListOf([start]);
    while (!borderQueue.isEmpty() && (maxTris === 0 || (selection.size / 3 | 0) < maxTris)) {
      var he = borderQueue.removeAt_za3lpa$(0);
      if (innerEdges.contains_11rb$(he.id)) {
        continue;
      }var element = he.id;
      innerEdges.add_11rb$(element);
      selection.add_11rb$(he);
      var $receiver = he.next;
      var element_0 = $receiver.id;
      innerEdges.add_11rb$(element_0);
      selection.add_11rb$($receiver);
      var $receiver_0 = he.next.next;
      var element_1 = $receiver_0.id;
      innerEdges.add_11rb$(element_1);
      selection.add_11rb$($receiver_0);
      if (he.opp != null && !innerEdges.contains_11rb$(ensureNotNull(he.opp).id) && !borderEdges.contains_11rb$(ensureNotNull(he.opp).id)) {
        var element_2 = ensureNotNull(he.opp);
        borderQueue.add_11rb$(element_2);
      }if (he.next.opp != null && !innerEdges.contains_11rb$(ensureNotNull(he.next.opp).id) && !borderEdges.contains_11rb$(ensureNotNull(he.next.opp).id)) {
        var element_3 = ensureNotNull(he.next.opp);
        borderQueue.add_11rb$(element_3);
      }if (he.next.next.opp != null && !innerEdges.contains_11rb$(ensureNotNull(he.next.next.opp).id) && !borderEdges.contains_11rb$(ensureNotNull(he.next.next.opp).id)) {
        var element_4 = ensureNotNull(he.next.next.opp);
        borderQueue.add_11rb$(element_4);
      }}
    return new Pair(borderQueue, selection);
  };
  HalfEdgeMesh.prototype.splitEdge_b49or$ = function (edge, fraction) {
    var $this = this.geometry;
    var tmp$, tmp$_0, tmp$_1;
    $this.checkBufferSizes_za3lpa$();
    tmp$ = $this.vertexSizeF;
    for (var i = 1; i <= tmp$; i++) {
      $this.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_0 = $this.vertexSizeI;
    for (var i_0 = 1; i_0 <= tmp$_0; i_0++) {
      $this.dataI.plusAssign_za3lpa$(0);
    }
    $this.vertexIt.index = (tmp$_1 = $this.numVertices, $this.numVertices = tmp$_1 + 1 | 0, tmp$_1);
    var $receiver = $this.vertexIt;
    $receiver.position.set_czzhiu$(edge.to).subtract_czzhiu$(edge.from).scale_mx4ult$(fraction).add_czzhiu$(edge.from);
    edge.from.getMeshVertex_fs4kvg$(this.vertexIt1_0);
    edge.to.getMeshVertex_fs4kvg$(this.vertexIt2_0);
    $receiver.texCoord.set_czzhjp$(this.vertexIt2_0.texCoord).subtract_czzhjp$(this.vertexIt1_0.texCoord).scale_mx4ult$(fraction).add_czzhjp$(this.vertexIt1_0.texCoord);
    $receiver.normal.set_czzhiu$(this.vertexIt2_0.normal).subtract_czzhiu$(this.vertexIt1_0.normal).scale_mx4ult$(fraction).add_czzhiu$(this.vertexIt1_0.normal);
    $this.bounds.add_czzhiu$($this.vertexIt.position);
    $this.hasChanged = true;
    var idx = $this.numVertices - 1 | 0;
    var insertV = new HalfEdgeMesh$HalfEdgeVertex(this, idx);
    this.verts_0.add_11rb$(insertV);
    var prevToR = edge.to;
    edge.updateTo_n38rgs$(insertV);
    var $receiver_0 = edge.next.from.edges;
    var element = edge.next;
    $receiver_0.remove_11rb$(element);
    edge.next.updateFrom_n38rgs$(insertV);
    var $receiver_1 = insertV.edges;
    var element_0 = edge.next;
    $receiver_1.add_11rb$(element_0);
    var insertEdR0 = new HalfEdgeMesh$HalfEdge(this, insertV, prevToR);
    var $receiver_2 = new HalfEdgeMesh$HalfEdge(this, prevToR, edge.next.to);
    var tmp$_2;
    insertEdR0.next = $receiver_2;
    $receiver_2.opp = edge.next.opp;
    (tmp$_2 = $receiver_2.opp) != null ? (tmp$_2.opp = $receiver_2) : null;
    var insertEdR1 = $receiver_2;
    var $receiver_3 = new HalfEdgeMesh$HalfEdge(this, edge.next.to, insertV);
    insertEdR1.next = $receiver_3;
    $receiver_3.next = insertEdR0;
    $receiver_3.opp = edge.next;
    edge.next.opp = $receiver_3;
    var insertEdR2 = $receiver_3;
    this.edgeHandler.plusAssign_ebe40$(insertEdR0);
    this.edgeHandler.plusAssign_ebe40$(insertEdR1);
    this.edgeHandler.plusAssign_ebe40$(insertEdR2);
    var edgeOpp = edge.opp;
    if (edgeOpp != null) {
      var prevToL = edgeOpp.to;
      edgeOpp.updateTo_n38rgs$(insertV);
      var $receiver_4 = edgeOpp.next.from.edges;
      var element_1 = edgeOpp.next;
      $receiver_4.remove_11rb$(element_1);
      edgeOpp.next.updateFrom_n38rgs$(insertV);
      var $receiver_5 = insertV.edges;
      var element_2 = edgeOpp.next;
      $receiver_5.add_11rb$(element_2);
      var insertEdL0 = new HalfEdgeMesh$HalfEdge(this, insertV, prevToL);
      var $receiver_6 = new HalfEdgeMesh$HalfEdge(this, prevToL, edgeOpp.next.to);
      var tmp$_3;
      insertEdL0.next = $receiver_6;
      $receiver_6.opp = edgeOpp.next.opp;
      (tmp$_3 = $receiver_6.opp) != null ? (tmp$_3.opp = $receiver_6) : null;
      var insertEdL1 = $receiver_6;
      var $receiver_7 = new HalfEdgeMesh$HalfEdge(this, edgeOpp.next.to, insertV);
      insertEdL1.next = $receiver_7;
      $receiver_7.next = insertEdL0;
      $receiver_7.opp = edgeOpp.next;
      edgeOpp.next.opp = $receiver_7;
      var insertEdL2 = $receiver_7;
      insertEdL0.opp = edge;
      edge.opp = insertEdL0;
      insertEdR0.opp = edgeOpp;
      edgeOpp.opp = insertEdR0;
      this.edgeHandler.plusAssign_ebe40$(insertEdL0);
      this.edgeHandler.plusAssign_ebe40$(insertEdL1);
      this.edgeHandler.plusAssign_ebe40$(insertEdL2);
    }return insertV;
  };
  HalfEdgeMesh.prototype.collapseEdge_b49or$ = function (edge, fraction) {
    var tmp$;
    var srcVert = edge.from;
    var delVert = edge.to;
    var oppR1 = edge.next.opp;
    if (oppR1 != null) {
      edge.next.opp = null;
      oppR1.opp = null;
      oppR1.updateTo_n38rgs$(srcVert);
    }var oppR2 = edge.next.next.opp;
    if (oppR2 != null) {
      edge.next.next.opp = null;
      oppR2.opp = oppR1;
      if (oppR1 != null) {
        oppR1.opp = oppR2;
      }}var edgeOpp = edge.opp;
    if (edgeOpp != null) {
      var oppL1 = edgeOpp.next.opp;
      if (oppL1 != null) {
        edgeOpp.next.opp = null;
        oppL1.opp = null;
      }var oppL2 = edgeOpp.next.next.opp;
      if (oppL2 != null) {
        delVert.edges.remove_11rb$(oppL2);
        srcVert.edges.add_11rb$(oppL2);
        oppL2.updateFrom_n38rgs$(srcVert);
        oppL2.next.next.updateTo_n38rgs$(srcVert);
        edgeOpp.next.next.opp = null;
        oppL2.opp = oppL1;
        if (oppL1 != null) {
          oppL1.opp = oppL2;
        }}}edge.deleteTriangle();
    edgeOpp != null ? (edgeOpp.deleteTriangle(), Unit) : null;
    tmp$ = delVert.edges;
    for (var i = 0; i !== tmp$.size; ++i) {
      var e = delVert.edges.get_za3lpa$(i);
      e.updateFrom_n38rgs$(srcVert);
      e.next.next.updateTo_n38rgs$(srcVert);
      var eOpp = e.opp;
      if (eOpp != null) {
        eOpp.updateTo_n38rgs$(srcVert);
        eOpp.next.updateFrom_n38rgs$(srcVert);
      }srcVert.edges.add_11rb$(e);
    }
    delVert.edges.clear();
    delVert.delete();
    if (fraction !== 0.0) {
      var newX = srcVert.x + (delVert.x - srcVert.x) * fraction;
      var newY = srcVert.y + (delVert.y - srcVert.y) * fraction;
      var newZ = srcVert.z + (delVert.z - srcVert.z) * fraction;
      srcVert.updatePosition_y2kzbl$(newX, newY, newZ);
    }};
  HalfEdgeMesh.prototype.subMeshOf_u28ozl$ = function (edges) {
    var subData = new IndexedVertexList(this.geometry.vertexAttributes);
    var indexMap = LinkedHashMap_init();
    var v = this.geometry.vertexIt;
    var tmp$;
    tmp$ = edges.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (!indexMap.keys.contains_11rb$(element.from.index)) {
        var tmp$_0 = element.from.index;
        var tmp$_1, tmp$_2, tmp$_3;
        subData.checkBufferSizes_za3lpa$();
        tmp$_1 = subData.vertexSizeF;
        for (var i = 1; i <= tmp$_1; i++) {
          subData.dataF.plusAssign_mx4ult$(0.0);
        }
        tmp$_2 = subData.vertexSizeI;
        for (var i_0 = 1; i_0 <= tmp$_2; i_0++) {
          subData.dataI.plusAssign_za3lpa$(0);
        }
        subData.vertexIt.index = (tmp$_3 = subData.numVertices, subData.numVertices = tmp$_3 + 1 | 0, tmp$_3);
        var $receiver = subData.vertexIt;
        v.index = element.from.index;
        $receiver.set_fs4kvg$(v);
        subData.bounds.add_czzhiu$(subData.vertexIt.position);
        subData.hasChanged = true;
        var value = subData.numVertices - 1 | 0;
        indexMap.put_xwzc9p$(tmp$_0, value);
      }if (!indexMap.keys.contains_11rb$(element.to.index)) {
        var tmp$_4 = element.to.index;
        var tmp$_5, tmp$_6, tmp$_7;
        subData.checkBufferSizes_za3lpa$();
        tmp$_5 = subData.vertexSizeF;
        for (var i_1 = 1; i_1 <= tmp$_5; i_1++) {
          subData.dataF.plusAssign_mx4ult$(0.0);
        }
        tmp$_6 = subData.vertexSizeI;
        for (var i_2 = 1; i_2 <= tmp$_6; i_2++) {
          subData.dataI.plusAssign_za3lpa$(0);
        }
        subData.vertexIt.index = (tmp$_7 = subData.numVertices, subData.numVertices = tmp$_7 + 1 | 0, tmp$_7);
        var $receiver_0 = subData.vertexIt;
        v.index = element.to.index;
        $receiver_0.set_fs4kvg$(v);
        subData.bounds.add_czzhiu$(subData.vertexIt.position);
        subData.hasChanged = true;
        var value_0 = subData.numVertices - 1 | 0;
        indexMap.put_xwzc9p$(tmp$_4, value_0);
      }}
    var addedHes = LinkedHashSet_init();
    var tmp$_8;
    tmp$_8 = edges.iterator();
    while (tmp$_8.hasNext()) {
      var element_0 = tmp$_8.next();
      if (!addedHes.contains_11rb$(element_0.id)) {
        subData.addTriIndices_qt1dr2$(ensureNotNull(indexMap.get_11rb$(element_0.from.index)), ensureNotNull(indexMap.get_11rb$(element_0.next.from.index)), ensureNotNull(indexMap.get_11rb$(element_0.next.next.from.index)));
        var element_1 = element_0.id;
        addedHes.add_11rb$(element_1);
        var element_2 = element_0.next.id;
        addedHes.add_11rb$(element_2);
        var element_3 = element_0.next.next.id;
        addedHes.add_11rb$(element_3);
      }}
    return subData;
  };
  function HalfEdgeMesh$HalfEdgeVertex($outer, index) {
    this.$outer = $outer;
    Vec3f_init(0.0, this);
    this.index = index;
    this.edges = ArrayList_init_0();
    this.isDeleted_st01j9$_0 = false;
    this.meshDataIndex_8be2vx$ = this.index;
  }
  Object.defineProperty(HalfEdgeMesh$HalfEdgeVertex.prototype, 'isDeleted', {
    get: function () {
      return this.isDeleted_st01j9$_0;
    },
    set: function (isDeleted) {
      this.isDeleted_st01j9$_0 = isDeleted;
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdgeVertex.prototype, 'x', {
    get: function () {
      return this.$outer.geometry.dataF.get_za3lpa$(Kotlin.imul(this.index, this.$outer.geometry.vertexSizeF) + this.$outer.positionOffset_0 | 0);
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdgeVertex.prototype, 'y', {
    get: function () {
      return this.$outer.geometry.dataF.get_za3lpa$(Kotlin.imul(this.index, this.$outer.geometry.vertexSizeF) + this.$outer.positionOffset_0 + 1 | 0);
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdgeVertex.prototype, 'z', {
    get: function () {
      return this.$outer.geometry.dataF.get_za3lpa$(Kotlin.imul(this.index, this.$outer.geometry.vertexSizeF) + this.$outer.positionOffset_0 + 2 | 0);
    }
  });
  HalfEdgeMesh$HalfEdgeVertex.prototype.setPosition_eyxpjg$ = function (x, y, z) {
    this.$outer.geometry.dataF.set_24o109$(Kotlin.imul(this.index, this.$outer.geometry.vertexSizeF) + this.$outer.positionOffset_0 | 0, x);
    this.$outer.geometry.dataF.set_24o109$(Kotlin.imul(this.index, this.$outer.geometry.vertexSizeF) + this.$outer.positionOffset_0 + 1 | 0, y);
    this.$outer.geometry.dataF.set_24o109$(Kotlin.imul(this.index, this.$outer.geometry.vertexSizeF) + this.$outer.positionOffset_0 + 2 | 0, z);
  };
  HalfEdgeMesh$HalfEdgeVertex.prototype.getMeshVertex_fs4kvg$ = function (result) {
    result.index = this.index;
    return result;
  };
  HalfEdgeMesh$HalfEdgeVertex.prototype.getEdgeTo_n38rgs$ = function (v) {
    var tmp$;
    tmp$ = this.edges;
    for (var i = 0; i !== tmp$.size; ++i) {
      if (this.edges.get_za3lpa$(i).to === v) {
        return this.edges.get_za3lpa$(i);
      }}
    return null;
  };
  HalfEdgeMesh$HalfEdgeVertex.prototype.delete = function () {
    while (!this.edges.isEmpty()) {
      last(this.edges).deleteTriangle();
    }
    this.isDeleted = true;
  };
  HalfEdgeMesh$HalfEdgeVertex.prototype.updatePosition_czzhiu$ = function (newPos) {
    this.updatePosition_y2kzbl$(newPos.x, newPos.y, newPos.z);
  };
  HalfEdgeMesh$HalfEdgeVertex.prototype.updatePosition_y2kzbl$ = function (x, y, z) {
    this.$outer.edgeHandler.checkedUpdateVertexPosition_efzdnr$(this, x, y, z);
  };
  HalfEdgeMesh$HalfEdgeVertex.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HalfEdgeVertex',
    interfaces: [Vec3f]
  };
  function HalfEdgeMesh$HalfEdge($outer, from, to) {
    this.$outer = $outer;
    this.from_t0m3rm$_0 = from;
    this.to_z50l7l$_0 = to;
    this.isDeleted_tjy89$_0 = false;
    this.treeNode_u2e3i4$_0 = null;
    this.next_t4scix$_0 = this.next_t4scix$_0;
    this.opp_nuqb1l$_0 = null;
    from.edges.add_11rb$(this);
  }
  Object.defineProperty(HalfEdgeMesh$HalfEdge.prototype, 'from', {
    get: function () {
      return this.from_t0m3rm$_0;
    },
    set: function (from) {
      this.from_t0m3rm$_0 = from;
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdge.prototype, 'to', {
    get: function () {
      return this.to_z50l7l$_0;
    },
    set: function (to) {
      this.to_z50l7l$_0 = to;
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdge.prototype, 'isDeleted', {
    get: function () {
      return this.isDeleted_tjy89$_0;
    },
    set: function (isDeleted) {
      this.isDeleted_tjy89$_0 = isDeleted;
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdge.prototype, 'treeNode', {
    get: function () {
      return this.treeNode_u2e3i4$_0;
    },
    set: function (treeNode) {
      this.treeNode_u2e3i4$_0 = treeNode;
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdge.prototype, 'id', {
    get: function () {
      return Kotlin.Long.fromInt(this.from.index).shiftLeft(32).or(Kotlin.Long.fromInt(this.to.index));
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdge.prototype, 'triId', {
    get: function () {
      var a = this.id;
      var b = this.next.id;
      var c = this.next.next.id;
      var b_0 = b.compareTo_11rb$(c) <= 0 ? b : c;
      return a.compareTo_11rb$(b_0) <= 0 ? a : b_0;
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdge.prototype, 'next', {
    get: function () {
      if (this.next_t4scix$_0 == null)
        return throwUPAE('next');
      return this.next_t4scix$_0;
    },
    set: function (next) {
      this.next_t4scix$_0 = next;
    }
  });
  Object.defineProperty(HalfEdgeMesh$HalfEdge.prototype, 'opp', {
    get: function () {
      return this.opp_nuqb1l$_0;
    },
    set: function (opp) {
      this.opp_nuqb1l$_0 = opp;
    }
  });
  HalfEdgeMesh$HalfEdge.prototype.computeLength = function () {
    return this.from.distance_czzhiu$(this.to);
  };
  HalfEdgeMesh$HalfEdge.prototype.computeTriArea = function () {
    return triArea(this.from, this.to, this.next.to);
  };
  HalfEdgeMesh$HalfEdge.prototype.computeTriAspectRatio = function () {
    return triAspectRatio(this.from, this.to, this.next.to);
  };
  HalfEdgeMesh$HalfEdge.prototype.computeTriNormal_5s4mqq$ = function (result) {
    this.to.subtract_2gj7b4$(this.from, this.$outer.tmpVec1_0);
    this.next.to.subtract_2gj7b4$(this.from, this.$outer.tmpVec2_0);
    this.$outer.tmpVec1_0.cross_2gj7b4$(this.$outer.tmpVec2_0, result);
    return result.norm();
  };
  HalfEdgeMesh$HalfEdge.prototype.computeTriPlane_5s4mpv$ = function (result) {
    this.computeTriNormal_5s4mqq$(this.$outer.tmpVec3_0);
    result.set_2qa7tb$(this.$outer.tmpVec3_0, -this.$outer.tmpVec3_0.dot_czzhiu$(this.from));
    return result;
  };
  HalfEdgeMesh$HalfEdge.prototype.collapse_mx4ult$ = function (fraction) {
    this.$outer.collapseEdge_b49or$(this, fraction);
  };
  HalfEdgeMesh$HalfEdge.prototype.split_mx4ult$ = function (fraction) {
    return this.$outer.splitEdge_b49or$(this, fraction);
  };
  HalfEdgeMesh$HalfEdge.prototype.deleteEdge_0 = function () {
    var tmp$;
    this.$outer.edgeHandler.minusAssign_ebe40$(this);
    this.isDeleted = true;
    this.from.edges.remove_11rb$(this);
    if ((tmp$ = this.opp) != null) {
      tmp$.opp = null;
    }this.treeNode = null;
    this.opp = null;
  };
  HalfEdgeMesh$HalfEdge.prototype.deleteTriangle = function () {
    this.deleteEdge_0();
    this.next.deleteEdge_0();
    this.next.next.deleteEdge_0();
  };
  HalfEdgeMesh$HalfEdge.prototype.updateFrom_n38rgs$ = function (newFrom) {
    this.$outer.edgeHandler.checkedUpdateEdgeFrom_870n7c$(this, newFrom);
  };
  HalfEdgeMesh$HalfEdge.prototype.updateTo_n38rgs$ = function (newTo) {
    this.$outer.edgeHandler.checkedUpdateEdgeTo_870n7c$(this, newTo);
  };
  HalfEdgeMesh$HalfEdge.prototype.toString = function () {
    return this.from.index.toString() + ' -> ' + this.to.index;
  };
  HalfEdgeMesh$HalfEdge.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HalfEdge',
    interfaces: []
  };
  HalfEdgeMesh.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HalfEdgeMesh',
    interfaces: [Mesh]
  };
  function ListEdgeHandler() {
    this.edgeList = ArrayList_init_0();
    this.numEdges_wlm1ja$_0 = 0;
  }
  Object.defineProperty(ListEdgeHandler.prototype, 'numEdges', {
    get: function () {
      return this.numEdges_wlm1ja$_0;
    },
    set: function (numEdges) {
      this.numEdges_wlm1ja$_0 = numEdges;
    }
  });
  ListEdgeHandler.prototype.plusAssign_ebe40$ = function (edge) {
    if (edge.isDeleted) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'edge was deleted before');
      }edge.isDeleted = false;
      this.rebuild();
    }this.edgeList.add_11rb$(edge);
    this.numEdges = this.numEdges + 1 | 0;
  };
  ListEdgeHandler.prototype.minusAssign_ebe40$ = function (edge) {
    if (!edge.isDeleted) {
      this.numEdges = this.numEdges - 1 | 0;
    } else {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'edge is already deleted');
      }this.rebuild();
    }
  };
  ListEdgeHandler.prototype.checkedUpdateEdgeTo_870n7c$ = function (edge, newTo) {
    edge.to = newTo;
  };
  ListEdgeHandler.prototype.checkedUpdateEdgeFrom_870n7c$ = function (edge, newFrom) {
    edge.from = newFrom;
  };
  ListEdgeHandler.prototype.checkedUpdateVertexPosition_efzdnr$ = function (vertex, x, y, z) {
    vertex.setPosition_eyxpjg$(x, y, z);
  };
  function ListEdgeHandler$rebuild$lambda(it) {
    return it.isDeleted;
  }
  ListEdgeHandler.prototype.rebuild = function () {
    removeAll(this.edgeList, ListEdgeHandler$rebuild$lambda);
    if (this.numEdges !== this.edgeList.size) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Wrong edge count: ' + this.numEdges + ' != ' + this.edgeList.size);
      }this.numEdges = this.edgeList.size;
    }};
  function ListEdgeHandler$iterator$ObjectLiteral(this$ListEdgeHandler) {
    this.this$ListEdgeHandler = this$ListEdgeHandler;
    this.i = 0;
  }
  ListEdgeHandler$iterator$ObjectLiteral.prototype.hasNext = function () {
    while (this.i < this.this$ListEdgeHandler.edgeList.size && this.this$ListEdgeHandler.edgeList.get_za3lpa$(this.i).isDeleted) {
      this.i = this.i + 1 | 0;
    }
    return this.i < this.this$ListEdgeHandler.edgeList.size;
  };
  ListEdgeHandler$iterator$ObjectLiteral.prototype.next = function () {
    var tmp$;
    if (!this.hasNext()) {
      throw NoSuchElementException_init();
    }return this.this$ListEdgeHandler.edgeList.get_za3lpa$((tmp$ = this.i, this.i = tmp$ + 1 | 0, tmp$));
  };
  ListEdgeHandler$iterator$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [Iterator]
  };
  ListEdgeHandler.prototype.iterator = function () {
    return new ListEdgeHandler$iterator$ObjectLiteral(this);
  };
  ListEdgeHandler.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ListEdgeHandler',
    interfaces: [HalfEdgeMesh$EdgeHandler]
  };
  function Comparator$ObjectLiteral(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function MeshCutXy(geometry) {
    MeshCutXy$Companion_getInstance();
    this.geometry = geometry;
    this.ocTreeHandler = OcTreeEdgeHandler_init(this.geometry);
    this.halfEdgeMesh = new HalfEdgeMesh(this.geometry, this.ocTreeHandler);
    this.eps_0 = this.geometry.bounds.min.distance_czzhiu$(this.geometry.bounds.max) * FUZZY_EQ_F;
    this.shortEdgeThresh = 0;
    var tmp$;
    var edLen = 0.0;
    tmp$ = this.ocTreeHandler.iterator();
    while (tmp$.hasNext()) {
      var ed = tmp$.next();
      edLen += ed.computeLength();
    }
    this.shortEdgeThresh = edLen / this.ocTreeHandler.numEdges * 0.05;
  }
  MeshCutXy.prototype.cutXy_uqk2hy$ = function (cutPoly) {
    var tmp$;
    var cutEdges = ArrayList_init_0();
    tmp$ = cutPoly.size;
    for (var i = 0; i < tmp$; i++) {
      var j = (i + 1 | 0) % cutPoly.size;
      var element = new Edge(new Vec3f(cutPoly.get_za3lpa$(i).x, cutPoly.get_za3lpa$(i).y, 0.0), new Vec3f(cutPoly.get_za3lpa$(j).x, cutPoly.get_za3lpa$(j).y, 0.0));
      cutEdges.add_11rb$(element);
    }
    this.insertVertices_0(cutPoly);
    this.splitIntersectingEdges_0(cutEdges);
    this.deleteInside_0(cutPoly);
    this.halfEdgeMesh.rebuild_dqye30$(false, false);
  };
  MeshCutXy.prototype.insertVertices_0 = function (cutPoly) {
    var trav = new MeshCutXy$CoveringTriXyTrav(this);
    var tmp$;
    tmp$ = cutPoly.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      trav.setup_czzhjp$(element);
      trav.traverse_m6hlto$(this.ocTreeHandler.edgeTree);
      var tmp$_0;
      tmp$_0 = trav.result.iterator();
      loop_label: while (tmp$_0.hasNext()) {
        var element_0 = tmp$_0.next();
        var $receiver = MeshCutXy$Companion_getInstance().distXy_0(element_0.from, element);
        var eps = this.eps_0;
        var tmp$_1 = !(Math_0.abs($receiver) <= eps);
        if (tmp$_1) {
          var $receiver_0 = MeshCutXy$Companion_getInstance().distXy_0(element_0.to, element);
          var eps_0 = this.eps_0;
          tmp$_1 = !(Math_0.abs($receiver_0) <= eps_0);
        }if (tmp$_1) {
          var edTo = element_0.to;
          var insertedA = element_0.split_mx4ult$(this.computeSplitFraction_0(element, element_0));
          var $receiver_1 = insertedA.edges;
          var first$result;
          first$break: do {
            var tmp$_2;
            tmp$_2 = $receiver_1.iterator();
            while (tmp$_2.hasNext()) {
              var element_1 = tmp$_2.next();
              if (element_1.to === edTo) {
                first$result = element_1;
                break first$break;
              }}
            throw new NoSuchElementException_init_0('Collection contains no element matching the predicate.');
          }
           while (false);
          var newEdge = first$result.next.next;
          var f = MeshCutXy$Companion_getInstance().distXy_0(newEdge.from, element) / MeshCutXy$Companion_getInstance().distXy_1(newEdge.to, newEdge.from);
          var $receiver_2 = newEdge.split_mx4ult$(f);
          $receiver_2.updatePosition_y2kzbl$(element.x, element.y, $receiver_2.z);
        } else {
          var $receiver_3 = MeshCutXy$Companion_getInstance().distXy_0(element_0.from, element);
          var eps_1 = this.eps_0;
          if (Math_0.abs($receiver_3) <= eps_1) {
            element_0.from.updatePosition_y2kzbl$(element.x, element.y, element_0.from.z);
          } else {
            element_0.to.updatePosition_y2kzbl$(element.x, element.y, element_0.to.z);
          }
        }
      }
    }
    this.ocTreeHandler.edgeTree;
  };
  MeshCutXy.prototype.computeSplitFraction_0 = function ($receiver, edge) {
    var pt = new Vec3f($receiver.x, $receiver.y, 0.0);
    var a = new Vec3f(edge.from.x, edge.from.y, 0.0);
    var b = new Vec3f(edge.to.x, edge.to.y, 0.0);
    var r = nearestPointOnEdge_0(pt, a, b, MutableVec3f_init());
    return r.distance_czzhiu$(a) / b.distance_czzhiu$(a);
  };
  MeshCutXy.prototype.splitIntersectingEdges_0 = function (cutEdges) {
    var tmp$;
    var intersectionTrav = new MeshCutXy$EdgeXyIntersectionTrav(this);
    tmp$ = cutEdges.iterator();
    while (tmp$.hasNext()) {
      var cutEdge = tmp$.next();
      for (var pass = 1; pass <= 2; pass++) {
        intersectionTrav.setup_r4d89c$(cutEdge).traverse_m6hlto$(this.ocTreeHandler.edgeTree);
        if (!intersectionTrav.splitEdges.isEmpty()) {
          var tmp$_0;
          tmp$_0 = intersectionTrav.splitEdges.iterator();
          while (tmp$_0.hasNext()) {
            var element = tmp$_0.next();
            var splitEd = element.component1();
            var splitPos = MutableVec3f_init();
            if (MeshCutXy$Companion_getInstance().computeXyEdgeIntersectionPoint_0(cutEdge.pt0, cutEdge.pt1, splitEd.from, splitEd.to, splitPos)) {
              var f = MeshCutXy$Companion_getInstance().distXy_1(splitPos, splitEd.from) / MeshCutXy$Companion_getInstance().distXy_1(splitEd.to, splitEd.from);
              var $receiver = splitEd.split_mx4ult$(f);
              $receiver.updatePosition_y2kzbl$(splitPos.x, splitPos.y, $receiver.z);
            }}
        }}
    }
  };
  MeshCutXy.prototype.collapseShortEdges_0 = function (cutEdges) {
    var tmp$;
    var collapseCnt = {v: 0};
    var edgeTrav = new MeshCutXy$ShortEdgeOnEdgeTraverser(this);
    tmp$ = cutEdges.iterator();
    while (tmp$.hasNext()) {
      var cutEdge = tmp$.next();
      var remove = true;
      while (remove) {
        remove = false;
        edgeTrav.setup_r4d89c$(cutEdge).traverse_m6hlto$(this.ocTreeHandler.edgeTree);
        if (!edgeTrav.result.isEmpty()) {
          var ed = edgeTrav.result.get_za3lpa$(0);
          var a = ed.from.distance_czzhiu$(cutEdge.pt0);
          var b = ed.from.distance_czzhiu$(cutEdge.pt1);
          var minFromD = Math_0.min(a, b);
          var a_0 = ed.to.distance_czzhiu$(cutEdge.pt0);
          var b_0 = ed.to.distance_czzhiu$(cutEdge.pt1);
          var minToD = Math_0.min(a_0, b_0);
          if (minFromD < minToD) {
            ed.collapse_mx4ult$(0.0);
          } else {
            ed.collapse_mx4ult$(1.0);
          }
          collapseCnt.v = collapseCnt.v + 1 | 0;
          remove = true;
        }}
    }
    var $this = package$util.Log;
    var level = Log$Level.DEBUG;
    var tag = Kotlin.getKClassFromExpression(this).simpleName;
    if (level.level >= $this.level.level) {
      $this.printer(level, tag, 'Collapsed ' + collapseCnt.v + ' short edges');
    }};
  MeshCutXy.prototype.deleteInside_0 = function (cutPoly) {
    var delCnt = {v: 0};
    var $receiver = this.ocTreeHandler.distinctTriangleEdges();
    var destination = ArrayList_init_0();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (MeshCutXy$Companion_getInstance().isInPolygon_c7vmv8$(MutableVec3f_init_1(element.from).add_czzhiu$(element.next.from).add_czzhiu$(element.next.next.from).scale_mx4ult$(1 / 3.0), cutPoly))
        destination.add_11rb$(element);
    }
    var tmp$_0;
    tmp$_0 = destination.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      element_0.deleteTriangle();
      delCnt.v = delCnt.v + 1 | 0;
    }
  };
  function MeshCutXy$CoveringTriXyTrav($outer) {
    this.$outer = $outer;
    KNearestTraverser.call(this);
    var list = ArrayList_init(3);
    for (var index = 0; index < 3; index++) {
      list.add_11rb$(MutableVec2f_init());
    }
    this.triPts = list;
    this.pointDistance = new MeshCutXy$MeshCutXy$CoveringTriXyTrav_init$ObjectLiteral(this);
  }
  MeshCutXy$CoveringTriXyTrav.prototype.setup_czzhjp$ = function (pt) {
    this.setup_w8bw21$(new Vec3f(pt.x, pt.y, 0.0), 1, 1000000.0, KNearestTraverser.prototype.setup_w8bw21$$default.bind(this));
  };
  function MeshCutXy$MeshCutXy$CoveringTriXyTrav_init$ObjectLiteral(this$CoveringTriXyTrav) {
    this.this$CoveringTriXyTrav = this$CoveringTriXyTrav;
  }
  MeshCutXy$MeshCutXy$CoveringTriXyTrav_init$ObjectLiteral.prototype.nodeSqrDistanceToPoint_m5117s$ = function (node, point) {
    var pt = new Vec3f(point.x, point.y, node.bounds.center.z);
    return node.bounds.pointDistanceSqr_czzhiu$(pt);
  };
  MeshCutXy$MeshCutXy$CoveringTriXyTrav_init$ObjectLiteral.prototype.itemSqrDistanceToPoint_54x1zp$ = function (tree, item, point) {
    var tmp$;
    this.this$CoveringTriXyTrav.triPts.get_za3lpa$(0).set_dleff0$(item.from.x, item.from.y);
    this.this$CoveringTriXyTrav.triPts.get_za3lpa$(1).set_dleff0$(item.next.from.x, item.next.from.y);
    this.this$CoveringTriXyTrav.triPts.get_za3lpa$(2).set_dleff0$(item.next.next.from.x, item.next.next.from.y);
    if (MeshCutXy$Companion_getInstance().isInPolygon_c7vmv8$(this.this$CoveringTriXyTrav.center, this.this$CoveringTriXyTrav.triPts)) {
      return distanceToEdge_0(point, new Vec3f(item.from.x, item.from.y, 0.0), new Vec3f(item.to.x, item.to.y, 0.0));
    } else {
      tmp$ = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    }
    return tmp$;
  };
  MeshCutXy$MeshCutXy$CoveringTriXyTrav_init$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [PointDistance]
  };
  MeshCutXy$CoveringTriXyTrav.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CoveringTriXyTrav',
    interfaces: [KNearestTraverser]
  };
  function MeshCutXy$ShortEdgeOnEdgeTraverser($outer) {
    this.$outer = $outer;
    InRadiusTraverser.call(this);
    this.edge_wlnz31$_0 = this.edge_wlnz31$_0;
  }
  Object.defineProperty(MeshCutXy$ShortEdgeOnEdgeTraverser.prototype, 'edge', {
    get: function () {
      if (this.edge_wlnz31$_0 == null)
        return throwUPAE('edge');
      return this.edge_wlnz31$_0;
    },
    set: function (edge) {
      this.edge_wlnz31$_0 = edge;
    }
  });
  function MeshCutXy$ShortEdgeOnEdgeTraverser$setup$ObjectLiteral(this$MeshCutXy, closure$edge) {
    this.this$MeshCutXy = this$MeshCutXy;
    this.closure$edge = closure$edge;
  }
  MeshCutXy$ShortEdgeOnEdgeTraverser$setup$ObjectLiteral.prototype.nodeSqrDistanceToPoint_m5117s$ = function (node, point) {
    var pt = new Vec3f(point.x, point.y, node.bounds.center.z);
    return PointDistance.prototype.nodeSqrDistanceToPoint_m5117s$.call(this, node, pt);
  };
  MeshCutXy$ShortEdgeOnEdgeTraverser$setup$ObjectLiteral.prototype.itemSqrDistanceToPoint_54x1zp$ = function (tree, item, point) {
    if (item.computeLength() < this.this$MeshCutXy.shortEdgeThresh) {
      var d0 = distanceToEdge_0(new Vec3f(item.from.x, item.from.y, 0.0), this.closure$edge.pt0, this.closure$edge.pt1);
      var d1 = distanceToEdge_0(new Vec3f(item.to.x, item.to.y, 0.0), this.closure$edge.pt0, this.closure$edge.pt1);
      var eps = this.this$MeshCutXy.eps_0;
      var tmp$ = Math_0.abs(d0) <= eps;
      if (tmp$) {
        var eps_0 = this.this$MeshCutXy.eps_0;
        tmp$ = Math_0.abs(d1) <= eps_0;
      }var tmp$_0 = tmp$;
      if (tmp$_0) {
        var a = item.computeLength();
        var b = this.closure$edge.length;
        var eps_1 = this.this$MeshCutXy.eps_0;
        var $receiver = a - b;
        tmp$_0 = !(Math_0.abs($receiver) <= eps_1);
      }if (tmp$_0) {
        return 0.0;
      }}return kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
  };
  MeshCutXy$ShortEdgeOnEdgeTraverser$setup$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [PointDistance]
  };
  MeshCutXy$ShortEdgeOnEdgeTraverser.prototype.setup_r4d89c$ = function (edge) {
    InRadiusTraverser.prototype.setup_2qa7tb$.call(this, MutableVec3f_init_1(edge.pt0).add_czzhiu$(edge.pt1).scale_mx4ult$(0.5), edge.length / 2);
    this.edge = edge;
    this.pointDistance = new MeshCutXy$ShortEdgeOnEdgeTraverser$setup$ObjectLiteral(this.$outer, edge);
    return this;
  };
  MeshCutXy$ShortEdgeOnEdgeTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShortEdgeOnEdgeTraverser',
    interfaces: [InRadiusTraverser]
  };
  function MeshCutXy$EdgeXyIntersectionTrav($outer) {
    this.$outer = $outer;
    InRadiusTraverser.call(this);
    this.edge_93dgqa$_0 = this.edge_93dgqa$_0;
    this.intersectionPt = MutableVec3f_init();
    this.splitEdges = ArrayList_init_0();
  }
  Object.defineProperty(MeshCutXy$EdgeXyIntersectionTrav.prototype, 'edge', {
    get: function () {
      if (this.edge_93dgqa$_0 == null)
        return throwUPAE('edge');
      return this.edge_93dgqa$_0;
    },
    set: function (edge) {
      this.edge_93dgqa$_0 = edge;
    }
  });
  function MeshCutXy$EdgeXyIntersectionTrav$traverse$lambda(this$EdgeXyIntersectionTrav) {
    return function (it) {
      return it.second.distance_czzhiu$(this$EdgeXyIntersectionTrav.edge.pt0);
    };
  }
  MeshCutXy$EdgeXyIntersectionTrav.prototype.traverse_m6hlto$ = function (tree) {
    this.splitEdges.clear();
    InRadiusTraverser.prototype.traverse_m6hlto$.call(this, tree);
    var $receiver = this.splitEdges;
    if ($receiver.size > 1) {
      sortWith($receiver, new Comparator$ObjectLiteral(compareBy$lambda(MeshCutXy$EdgeXyIntersectionTrav$traverse$lambda(this))));
    }};
  function MeshCutXy$EdgeXyIntersectionTrav$setup$ObjectLiteral(closure$edge, this$EdgeXyIntersectionTrav) {
    this.closure$edge = closure$edge;
    this.this$EdgeXyIntersectionTrav = this$EdgeXyIntersectionTrav;
  }
  MeshCutXy$EdgeXyIntersectionTrav$setup$ObjectLiteral.prototype.nodeSqrDistanceToPoint_m5117s$ = function (node, point) {
    var pt = new Vec3f(point.x, point.y, node.bounds.center.z);
    return PointDistance.prototype.nodeSqrDistanceToPoint_m5117s$.call(this, node, pt);
  };
  MeshCutXy$EdgeXyIntersectionTrav$setup$ObjectLiteral.prototype.itemSqrDistanceToPoint_54x1zp$ = function (tree, item, point) {
    var tmp$;
    if (MeshCutXy$Companion_getInstance().computeXyEdgeIntersectionPoint_0(this.closure$edge.pt0, this.closure$edge.pt1, item.from, item.to, this.this$EdgeXyIntersectionTrav.intersectionPt)) {
      var d = MeshCutXy$Companion_getInstance().distXy_1(this.this$EdgeXyIntersectionTrav.intersectionPt, item.from) / MeshCutXy$Companion_getInstance().distXy_1(item.to, item.from);
      var eps;
      eps = package$math.FUZZY_EQ_F;
      var $receiver = d - 0.0;
      var tmp$_0 = Math_0.abs($receiver) <= eps;
      if (!tmp$_0) {
        var eps_0;
        eps_0 = package$math.FUZZY_EQ_F;
        var $receiver_0 = d - 1.0;
        tmp$_0 = Math_0.abs($receiver_0) <= eps_0;
      }if (tmp$_0) {
        tmp$ = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
      } else {
        var v = MutableVec3f_init_1(item.to).subtract_czzhiu$(item.from).scale_mx4ult$(d).add_czzhiu$(item.from);
        var $receiver_1 = this.this$EdgeXyIntersectionTrav.splitEdges;
        var element = to(item, v);
        $receiver_1.add_11rb$(element);
        tmp$ = 0.0;
      }
    } else {
      tmp$ = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    }
    return tmp$;
  };
  MeshCutXy$EdgeXyIntersectionTrav$setup$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [PointDistance]
  };
  MeshCutXy$EdgeXyIntersectionTrav.prototype.setup_r4d89c$ = function (edge) {
    InRadiusTraverser.prototype.setup_2qa7tb$.call(this, MutableVec3f_init_1(edge.pt0).add_czzhiu$(edge.pt1).scale_mx4ult$(0.5), edge.length / 2);
    this.edge = edge;
    this.pointDistance = new MeshCutXy$EdgeXyIntersectionTrav$setup$ObjectLiteral(edge, this);
    return this;
  };
  MeshCutXy$EdgeXyIntersectionTrav.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EdgeXyIntersectionTrav',
    interfaces: [InRadiusTraverser]
  };
  function MeshCutXy$Companion() {
    MeshCutXy$Companion_instance = this;
  }
  MeshCutXy$Companion.prototype.distXy_1 = function ($receiver, other) {
    var dx = $receiver.x - other.x;
    var dy = $receiver.y - other.y;
    var x = dx * dx + dy * dy;
    return Math_0.sqrt(x);
  };
  MeshCutXy$Companion.prototype.distXy_0 = function ($receiver, other) {
    var dx = $receiver.x - other.x;
    var dy = $receiver.y - other.y;
    var x = dx * dx + dy * dy;
    return Math_0.sqrt(x);
  };
  MeshCutXy$Companion.prototype.isInPolygon_c7vmv8$ = function (point, poly) {
    var tmp$;
    var i = 0;
    var j = poly.size - 1 | 0;
    var result = false;
    while (i < poly.size) {
      if (poly.get_za3lpa$(i).y > point.y !== poly.get_za3lpa$(j).y > point.y && point.x < (poly.get_za3lpa$(j).x - poly.get_za3lpa$(i).x) * (point.y - poly.get_za3lpa$(i).y) / (poly.get_za3lpa$(j).y - poly.get_za3lpa$(i).y) + poly.get_za3lpa$(i).x) {
        result = !result;
      }j = (tmp$ = i, i = tmp$ + 1 | 0, tmp$);
    }
    return result;
  };
  MeshCutXy$Companion.prototype.computeXyLineIntersectionPoint_0 = function (e11, e12, e21, e22, result) {
    var x1 = e11.x;
    var y1 = e11.y;
    var x2 = e12.x;
    var y2 = e12.y;
    var x3 = e21.x;
    var y3 = e21.y;
    var x4 = e22.x;
    var y4 = e22.y;
    var denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
    var eps;
    eps = package$math.FUZZY_EQ_D;
    if (!(Math_0.abs(denom) <= eps)) {
      var a = x1 * y2 - y1 * x2;
      var b = x3 * y4 - y3 * x4;
      var x = (a * (x3 - x4) - b * (x1 - x2)) / denom;
      var y = (a * (y3 - y4) - b * (y1 - y2)) / denom;
      result.set_y2kzbl$(x, y, 0.0);
      return true;
    }return false;
  };
  MeshCutXy$Companion.prototype.computeXyEdgeIntersectionPoint_0 = function (e11, e12, e21, e22, result) {
    if (!this.computeXyLineIntersectionPoint_0(e11, e12, e21, e22, result)) {
      return false;
    }var dx0 = result.x - e11.x;
    var dy0 = result.y - e11.y;
    var dx1 = e12.x - e11.x;
    var dy1 = e12.y - e11.y;
    var dot = dx0 * dx1 + dy0 * dy1;
    var l0 = dx0 * dx0 + dy0 * dy0;
    var l1 = dx1 * dx1 + dy1 * dy1;
    if (dot < 0.0 || l0 > l1) {
      return false;
    }dx0 = result.x - e21.x;
    dy0 = result.y - e21.y;
    dx1 = e22.x - e21.x;
    dy1 = e22.y - e21.y;
    dot = dx0 * dx1 + dy0 * dy1;
    l0 = dx0 * dx0 + dy0 * dy0;
    l1 = dx1 * dx1 + dy1 * dy1;
    return dot > 0 && l0 < l1;
  };
  MeshCutXy$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MeshCutXy$Companion_instance = null;
  function MeshCutXy$Companion_getInstance() {
    if (MeshCutXy$Companion_instance === null) {
      new MeshCutXy$Companion();
    }return MeshCutXy$Companion_instance;
  }
  MeshCutXy.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MeshCutXy',
    interfaces: []
  };
  function OcTreeEdgeHandler(treeBounds) {
    OcTreeEdgeHandler$Companion_getInstance();
    this.edgeTree = new OcTree(OcTreeEdgeHandler$Companion$HalfEdgeAdapter_getInstance(), void 0, treeBounds);
  }
  Object.defineProperty(OcTreeEdgeHandler.prototype, 'numEdges', {
    get: function () {
      return this.edgeTree.size;
    }
  });
  OcTreeEdgeHandler.prototype.plusAssign_ebe40$ = function (edge) {
    this.edgeTree.add_11rb$(edge);
  };
  OcTreeEdgeHandler.prototype.minusAssign_ebe40$ = function (edge) {
    if (edge.isDeleted) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'edge is already deleted, probably not in tree anymore...');
      }}this.edgeTree.remove_11rb$(edge);
  };
  OcTreeEdgeHandler.prototype.checkedUpdateEdgeTo_870n7c$ = function (edge, newTo) {
    var tmp$;
    var newX = (edge.from.x + newTo.x) * 0.5;
    var newY = (edge.from.y + newTo.y) * 0.5;
    var newZ = (edge.from.z + newTo.z) * 0.5;
    if (((tmp$ = edge.treeNode) != null ? tmp$.isInBounds_y2kzbl$(newX, newY, newZ) : null) === true) {
      edge.to = newTo;
    } else {
      this.edgeTree.remove_11rb$(edge);
      edge.to = newTo;
      this.edgeTree.add_11rb$(edge);
    }
  };
  OcTreeEdgeHandler.prototype.checkedUpdateEdgeFrom_870n7c$ = function (edge, newFrom) {
    var tmp$;
    var newX = (newFrom.x + edge.to.x) * 0.5;
    var newY = (newFrom.y + edge.to.y) * 0.5;
    var newZ = (newFrom.z + edge.to.z) * 0.5;
    if (((tmp$ = edge.treeNode) != null ? tmp$.isInBounds_y2kzbl$(newX, newY, newZ) : null) === true) {
      edge.from = newFrom;
    } else {
      this.edgeTree.remove_11rb$(edge);
      edge.from = newFrom;
      this.edgeTree.add_11rb$(edge);
    }
  };
  OcTreeEdgeHandler.prototype.checkedUpdateVertexPosition_efzdnr$ = function (vertex, x, y, z) {
    var tmp$, tmp$_0;
    tmp$ = vertex.edges;
    for (var i = 0; i !== tmp$.size; ++i) {
      var tmp$_1, tmp$_2;
      var ed = vertex.edges.get_za3lpa$(i);
      var newX = (x + ed.to.x) * 0.5;
      var newY = (y + ed.to.y) * 0.5;
      var newZ = (z + ed.to.z) * 0.5;
      if (((tmp$_1 = ed.treeNode) != null ? tmp$_1.isInBounds_y2kzbl$(newX, newY, newZ) : null) === false) {
        var $receiver = this.edgeTree;
        var element = ed;
        $receiver.remove_11rb$(element);
        ed.treeNode = null;
      }ed = vertex.edges.get_za3lpa$(i).next.next;
      newX = (x + ed.from.x) * 0.5;
      newY = (y + ed.from.y) * 0.5;
      newZ = (z + ed.from.z) * 0.5;
      if (((tmp$_2 = ed.treeNode) != null ? tmp$_2.isInBounds_y2kzbl$(newX, newY, newZ) : null) === false) {
        var $receiver_0 = this.edgeTree;
        var element_0 = ed;
        $receiver_0.remove_11rb$(element_0);
        ed.treeNode = null;
      }}
    vertex.setPosition_eyxpjg$(x, y, z);
    tmp$_0 = vertex.edges;
    for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
      var ed_0 = vertex.edges.get_za3lpa$(i_0);
      if (ed_0.treeNode == null) {
        this.plusAssign_ebe40$(ed_0);
      }if (ed_0.next.next.treeNode == null) {
        this.plusAssign_ebe40$(ed_0.next.next);
      }}
  };
  OcTreeEdgeHandler.prototype.rebuild = function () {
  };
  OcTreeEdgeHandler.prototype.iterator = function () {
    return this.edgeTree.iterator();
  };
  function OcTreeEdgeHandler$Companion() {
    OcTreeEdgeHandler$Companion_instance = this;
  }
  function OcTreeEdgeHandler$Companion$HalfEdgeAdapter() {
    OcTreeEdgeHandler$Companion$HalfEdgeAdapter_instance = this;
  }
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getMinX_trkh7z$ = function (item) {
    var a = item.from.x;
    var b = item.to.x;
    return Math_0.min(a, b);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getMinY_trkh7z$ = function (item) {
    var a = item.from.y;
    var b = item.to.y;
    return Math_0.min(a, b);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getMinZ_trkh7z$ = function (item) {
    var a = item.from.z;
    var b = item.to.z;
    return Math_0.min(a, b);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getMaxX_trkh7z$ = function (item) {
    var a = item.from.x;
    var b = item.to.x;
    return Math_0.max(a, b);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getMaxY_trkh7z$ = function (item) {
    var a = item.from.y;
    var b = item.to.y;
    return Math_0.max(a, b);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getMaxZ_trkh7z$ = function (item) {
    var a = item.from.z;
    var b = item.to.z;
    return Math_0.max(a, b);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getSzX_trkh7z$ = function (item) {
    var x = item.from.x - item.to.x;
    return Math_0.abs(x);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getSzY_trkh7z$ = function (item) {
    var x = item.from.y - item.to.y;
    return Math_0.abs(x);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getSzZ_trkh7z$ = function (item) {
    var x = item.from.z - item.to.z;
    return Math_0.abs(x);
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getCenterX_trkh7z$ = function (item) {
    return (item.from.x + item.to.x) * 0.5;
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getCenterY_trkh7z$ = function (item) {
    return (item.from.y + item.to.y) * 0.5;
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getCenterZ_trkh7z$ = function (item) {
    return (item.from.z + item.to.z) * 0.5;
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.setNode_bc9457$ = function (item, node) {
    var tmp$;
    item.treeNode = Kotlin.isType(tmp$ = node, OcTree$OcNode) ? tmp$ : throwCCE();
  };
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'HalfEdgeAdapter',
    interfaces: [ItemAdapter]
  };
  var OcTreeEdgeHandler$Companion$HalfEdgeAdapter_instance = null;
  function OcTreeEdgeHandler$Companion$HalfEdgeAdapter_getInstance() {
    if (OcTreeEdgeHandler$Companion$HalfEdgeAdapter_instance === null) {
      new OcTreeEdgeHandler$Companion$HalfEdgeAdapter();
    }return OcTreeEdgeHandler$Companion$HalfEdgeAdapter_instance;
  }
  OcTreeEdgeHandler$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var OcTreeEdgeHandler$Companion_instance = null;
  function OcTreeEdgeHandler$Companion_getInstance() {
    if (OcTreeEdgeHandler$Companion_instance === null) {
      new OcTreeEdgeHandler$Companion();
    }return OcTreeEdgeHandler$Companion_instance;
  }
  OcTreeEdgeHandler.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OcTreeEdgeHandler',
    interfaces: [HalfEdgeMesh$EdgeHandler]
  };
  function OcTreeEdgeHandler_init(geometry, $this) {
    $this = $this || Object.create(OcTreeEdgeHandler.prototype);
    var $receiver = new BoundingBox();
    var wasBatchUpdate = $receiver.isBatchUpdate;
    $receiver.isBatchUpdate = true;
    var tmp$;
    var v = geometry.vertexIt;
    tmp$ = geometry.numVertices;
    for (var i = 0; i < tmp$; i++) {
      v.index = i;
      $receiver.add_czzhiu$(v.position);
    }
    $receiver.isBatchUpdate = wasBatchUpdate;
    OcTreeEdgeHandler.call($this, $receiver);
    return $this;
  }
  function CollapseStrategy() {
  }
  CollapseStrategy.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'CollapseStrategy',
    interfaces: []
  };
  function defaultCollapseStrategy$ObjectLiteral() {
    this.tmpQ = new Mat4d();
    this.tmpNrm0 = MutableVec3f_init();
    this.tmpNrm1 = MutableVec3f_init();
    this.tmpPos0 = MutableVec3f_init();
    this.tmpPos1 = MutableVec3f_init();
  }
  defaultCollapseStrategy$ObjectLiteral.prototype.computeCollapsePosition_2pqe3s$ = function (q1, q2, resultPos) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var triCnt = 0;
    tmp$ = q1.vertex.edges;
    for (var i = 0; i !== tmp$.size; ++i) {
      var he = q1.vertex.edges.get_za3lpa$(i);
      if (he.to === q2.vertex || he.next.to === q2.vertex) {
        triCnt = triCnt + 1 | 0;
      }}
    if (triCnt > 2 || triCnt < (q1.isBorder && q2.isBorder ? 1 : 2)) {
      return kotlin_js_internal_DoubleCompanionObject.MAX_VALUE;
    }if (q1.isStickyVertex && q2.isStickyVertex)
      return kotlin_js_internal_DoubleCompanionObject.MAX_VALUE;
    else if (q1.isStickyVertex) {
      resultPos.set_czzhiu$(q1.vertex);
      return q1.getError_czzhiu$(resultPos) + q2.getError_czzhiu$(resultPos);
    } else if (q2.isStickyVertex) {
      resultPos.set_czzhiu$(q2.vertex);
      return q1.getError_czzhiu$(resultPos) + q2.getError_czzhiu$(resultPos);
    }if ((tmp$_0 = q1.vertex.getEdgeTo_n38rgs$(q2.vertex)) != null) {
      if (tmp$_0.next.opp == null && tmp$_0.next.next.opp == null) {
        return kotlin_js_internal_DoubleCompanionObject.MAX_VALUE;
      }}if ((tmp$_1 = q2.vertex.getEdgeTo_n38rgs$(q1.vertex)) != null) {
      if (tmp$_1.next.opp == null && tmp$_1.next.next.opp == null) {
        return kotlin_js_internal_DoubleCompanionObject.MAX_VALUE;
      }}this.tmpQ.set_d4zu6l$(q1.errQuadric);
    this.tmpQ.add_d4zu6l$(q2.errQuadric);
    this.tmpQ.setRow_ky00rh$(3, Vec4d$Companion_getInstance().W_AXIS);
    if (this.tmpQ.invert_14dthe$(FUZZY_EQ_D)) {
      resultPos.set_y2kzbl$(this.tmpQ.get_vux9f0$(0, 3), this.tmpQ.get_vux9f0$(1, 3), this.tmpQ.get_vux9f0$(2, 3));
      tmp$_2 = q1.getError_czzhiu$(resultPos) + q2.getError_czzhiu$(resultPos);
    } else {
      q2.vertex.subtract_2gj7b4$(q1.vertex, resultPos).scale_mx4ult$(0.5).add_czzhiu$(q1.vertex);
      tmp$_2 = q1.vertex.distance_czzhiu$(q2.vertex) / 1.0E100;
    }
    var err = tmp$_2;
    if (this.isRejected_0(q1.vertex, q2.vertex, resultPos) || this.isRejected_0(q2.vertex, q1.vertex, resultPos)) {
      tmp$_3 = kotlin_js_internal_DoubleCompanionObject.MAX_VALUE;
    } else {
      tmp$_3 = err;
    }
    return tmp$_3;
  };
  defaultCollapseStrategy$ObjectLiteral.prototype.isRejected_0 = function (vert, excludedTo, newPos) {
    var tmp$, tmp$_0;
    tmp$ = vert.edges.iterator();
    while (tmp$.hasNext()) {
      var edge = tmp$.next();
      if (!((tmp$_0 = edge.to) != null ? tmp$_0.equals(excludedTo) : null)) {
        edge.computeTriNormal_5s4mqq$(this.tmpNrm0);
        this.newNormal_0(edge, newPos, this.tmpNrm1);
        if (this.tmpNrm0.dot_czzhiu$(this.tmpNrm1) < 0) {
          return true;
        }if (triAspectRatio(newPos, edge.to, edge.next.to) > 10000) {
          return true;
        }}}
    return false;
  };
  defaultCollapseStrategy$ObjectLiteral.prototype.newNormal_0 = function (edge, newPos, newNormal) {
    edge.to.subtract_2gj7b4$(newPos, this.tmpPos0);
    edge.next.to.subtract_2gj7b4$(newPos, this.tmpPos1);
    this.tmpPos0.cross_2gj7b4$(this.tmpPos1, newNormal);
    newNormal.norm();
  };
  defaultCollapseStrategy$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [CollapseStrategy]
  };
  function defaultCollapseStrategy() {
    return new defaultCollapseStrategy$ObjectLiteral();
  }
  function ErrorQuadric(vertex) {
    this.vertex = vertex;
    this.errQuadric = (new Mat4d()).setZero();
    this.isStickyVertex = false;
    this.isBorder_qaaj7p$_0 = false;
    this.isDeleted_clri7e$_0 = false;
    this.tmpVec4_0 = MutableVec4f_init();
    var tmp$;
    tmp$ = this.vertex.edges;
    for (var i = 0; i !== tmp$.size; ++i) {
      var ed = this.vertex.edges.get_za3lpa$(i);
      this.addPlane_0(ed.computeTriPlane_5s4mpv$(this.tmpVec4_0));
      if (ed.opp == null) {
        var triNrm = this.tmpVec4_0.getXyz_5s4mqq$(MutableVec3f_init());
        var edDir = MutableVec3f_init_1(this.vertex).subtract_czzhiu$(ed.to).norm();
        var nrm = triNrm.cross_2gj7b4$(edDir, MutableVec3f_init());
        this.tmpVec4_0.set_2qa7tb$(nrm, -nrm.dot_czzhiu$(this.vertex));
        this.addPlane_0(this.tmpVec4_0);
        this.isBorder = true;
      }if (ed.next.next.opp == null) {
        if (ed.opp == null) {
          ed.computeTriPlane_5s4mpv$(this.tmpVec4_0);
        }var triNrm_0 = this.tmpVec4_0.getXyz_5s4mqq$(MutableVec3f_init());
        var edDir_0 = MutableVec3f_init_1(ed.next.next.from).subtract_czzhiu$(this.vertex).norm();
        var nrm_0 = triNrm_0.cross_2gj7b4$(edDir_0, MutableVec3f_init());
        this.tmpVec4_0.set_2qa7tb$(nrm_0, -nrm_0.dot_czzhiu$(this.vertex));
        this.addPlane_0(this.tmpVec4_0);
        this.isBorder = true;
      }}
  }
  Object.defineProperty(ErrorQuadric.prototype, 'isBorder', {
    get: function () {
      return this.isBorder_qaaj7p$_0;
    },
    set: function (isBorder) {
      this.isBorder_qaaj7p$_0 = isBorder;
    }
  });
  Object.defineProperty(ErrorQuadric.prototype, 'isDeleted', {
    get: function () {
      return this.isDeleted_clri7e$_0;
    },
    set: function (isDeleted) {
      this.isDeleted_clri7e$_0 = isDeleted;
    }
  });
  ErrorQuadric.prototype.consume_zdf47l$ = function (other) {
    this.isBorder = this.isBorder || other.isBorder;
    this.errQuadric.add_d4zu6l$(other.errQuadric);
    other.isDeleted = true;
  };
  ErrorQuadric.prototype.getError_czzhiu$ = function (v) {
    this.errQuadric.transform_5s4mpv$(this.tmpVec4_0.set_2qa7tb$(v, 1.0));
    return this.tmpVec4_0.x * v.x + this.tmpVec4_0.y * v.y + this.tmpVec4_0.z * v.z + this.tmpVec4_0.w;
  };
  ErrorQuadric.prototype.addPlane_0 = function (planeVec) {
    this.errQuadric.set_224j3y$(0, 0, this.errQuadric.get_vux9f0$(0, 0) + planeVec.x * planeVec.x);
    this.errQuadric.set_224j3y$(1, 0, this.errQuadric.get_vux9f0$(1, 0) + planeVec.x * planeVec.y);
    this.errQuadric.set_224j3y$(2, 0, this.errQuadric.get_vux9f0$(2, 0) + planeVec.x * planeVec.z);
    this.errQuadric.set_224j3y$(3, 0, this.errQuadric.get_vux9f0$(3, 0) + planeVec.x * planeVec.w);
    this.errQuadric.set_224j3y$(0, 1, this.errQuadric.get_vux9f0$(0, 1) + planeVec.y * planeVec.x);
    this.errQuadric.set_224j3y$(1, 1, this.errQuadric.get_vux9f0$(1, 1) + planeVec.y * planeVec.y);
    this.errQuadric.set_224j3y$(2, 1, this.errQuadric.get_vux9f0$(2, 1) + planeVec.y * planeVec.z);
    this.errQuadric.set_224j3y$(3, 1, this.errQuadric.get_vux9f0$(3, 1) + planeVec.y * planeVec.w);
    this.errQuadric.set_224j3y$(0, 2, this.errQuadric.get_vux9f0$(0, 2) + planeVec.z * planeVec.x);
    this.errQuadric.set_224j3y$(1, 2, this.errQuadric.get_vux9f0$(1, 2) + planeVec.z * planeVec.y);
    this.errQuadric.set_224j3y$(2, 2, this.errQuadric.get_vux9f0$(2, 2) + planeVec.z * planeVec.z);
    this.errQuadric.set_224j3y$(3, 2, this.errQuadric.get_vux9f0$(3, 2) + planeVec.z * planeVec.w);
    this.errQuadric.set_224j3y$(0, 3, this.errQuadric.get_vux9f0$(0, 3) + planeVec.w * planeVec.x);
    this.errQuadric.set_224j3y$(1, 3, this.errQuadric.get_vux9f0$(1, 3) + planeVec.w * planeVec.y);
    this.errQuadric.set_224j3y$(2, 3, this.errQuadric.get_vux9f0$(2, 3) + planeVec.w * planeVec.z);
    this.errQuadric.set_224j3y$(3, 3, this.errQuadric.get_vux9f0$(3, 3) + planeVec.w * planeVec.w);
  };
  ErrorQuadric.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ErrorQuadric',
    interfaces: []
  };
  function simplify($receiver, termCrit) {
    simplify_0(new HalfEdgeMesh($receiver), termCrit, emptySet());
  }
  function simplify_0($receiver, termCrit, excludedEdges) {
    if (excludedEdges === void 0)
      excludedEdges = emptySet();
    var $receiver_0 = new MeshSimplifier(termCrit);
    addAll($receiver_0.excludedEdges, excludedEdges);
    $receiver_0.simplifyMesh_mnbsaa$($receiver);
  }
  function MeshSimplifier(termCrit, collapseStrategy) {
    if (collapseStrategy === void 0)
      collapseStrategy = defaultCollapseStrategy();
    this.termCrit = termCrit;
    this.collapseStrategy = collapseStrategy;
    this.quadrics_h71pfh$_0 = LinkedHashMap_init();
    this.candidates_gym04f$_0 = new MeshSimplifier$CollapseCandidates();
    this.mesh_c14x7o$_aesyuh$_0 = this.mesh_c14x7o$_aesyuh$_0;
    this.excludedEdges = LinkedHashSet_init();
    this.stickyVertices = LinkedHashSet_init();
    this.keepBorders = false;
  }
  Object.defineProperty(MeshSimplifier.prototype, 'mesh_c14x7o$_0', {
    get: function () {
      if (this.mesh_c14x7o$_aesyuh$_0 == null)
        return throwUPAE('mesh');
      return this.mesh_c14x7o$_aesyuh$_0;
    },
    set: function (mesh) {
      this.mesh_c14x7o$_aesyuh$_0 = mesh;
    }
  });
  MeshSimplifier.prototype.simplifyMesh_mnbsaa$ = function (mesh, generateNormals, generateTangents) {
    if (generateNormals === void 0)
      generateNormals = true;
    if (generateTangents === void 0)
      generateTangents = true;
    this.mesh_c14x7o$_0 = mesh;
    var $this = package$util.Log;
    var level = Log$Level.DEBUG;
    var tag = Kotlin.getKClassFromExpression(this).simpleName;
    if (level.level >= $this.level.level) {
      $this.printer(level, tag, 'Simplifying mesh: ' + mesh.faceCount + ' faces / ' + mesh.vertCount + ' vertices...');
    }var perf = new PerfTimer();
    this.quadrics_h71pfh$_0.clear();
    this.candidates_gym04f$_0.clear();
    this.termCrit.init_nbf0q6$(mesh);
    var nextReshape = mesh.faceCount / 2 | 0;
    this.rebuildCollapseQueue_sifma0$_0();
    var lastError = {v: 0.0};
    while (this.candidates_gym04f$_0.isNotEmpty() && this.candidates_gym04f$_0.peek().error < kotlin_js_internal_DoubleCompanionObject.MAX_VALUE && !this.termCrit.isFinished_6w1xds$(mesh, lastError.v)) {
      if (mesh.faceCount < nextReshape) {
        this.reshapeTriangles_ps2mgc$_0();
        nextReshape = mesh.faceCount / 2 | 0;
      }var candidate = this.candidates_gym04f$_0.poll();
      if (candidate.edge.isDeleted || candidate.q1.isDeleted || candidate.q2.isDeleted) {
        var $this_0 = package$util.Log;
        var level_0 = Log$Level.WARN;
        var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_0.level >= $this_0.level.level) {
          $this_0.printer(level_0, tag_0, 'Invalid edge: already deleted!');
        }continue;
      }if (candidate.edgeId.fromId !== candidate.edge.from.index || candidate.edgeId.toId !== candidate.edge.to.index) {
        var $this_1 = package$util.Log;
        var level_1 = Log$Level.ERROR;
        var tag_1 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_1.level >= $this_1.level.level) {
          $this_1.printer(level_1, tag_1, 'Invalid edge: inconsistent vertex indices');
        }this.rebuildCollapseQueue_sifma0$_0();
        continue;
      }var oldError = candidate.error;
      candidate.updateCollapsePosAndError();
      if (oldError !== candidate.error) {
        this.candidates_gym04f$_0.plusAssign_g91td9$(candidate);
        continue;
      }if (candidate.error < kotlin_js_internal_DoubleCompanionObject.MAX_VALUE) {
        lastError.v = candidate.collapse();
      } else {
        var $this_2 = package$util.Log;
        var level_2 = Log$Level.DEBUG;
        var tag_2 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_2.level >= $this_2.level.level) {
          $this_2.printer(level_2, tag_2, 'No more collapsable edges');
        }break;
      }
    }
    mesh.rebuild_dqye30$(generateNormals, generateTangents);
    var $this_3 = package$util.Log;
    var level_3 = Log$Level.DEBUG;
    var tag_3 = Kotlin.getKClassFromExpression(this).simpleName;
    if (level_3.level >= $this_3.level.level) {
      $this_3.printer(level_3, tag_3, 'Mesh simplification done! ' + mesh.faceCount + ' faces / ' + mesh.vertCount + ' vertices remain, last error: ' + lastError.v + ', took ' + toString_1(perf.takeSecs(), 3) + ' s');
    }};
  MeshSimplifier.prototype.reshapeTriangles_ps2mgc$_0 = function () {
    var v1 = MutableVec3f_init();
    var v2 = MutableVec3f_init();
    var tmp$;
    tmp$ = this.mesh_c14x7o$_0.edgeHandler.distinctTriangleEdges().iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0;
      if (element.computeTriAspectRatio() > 50.0) {
        var l1 = element.computeLength();
        var l2 = element.next.computeLength();
        var l3 = element.next.next.computeLength();
        if (l1 > l2 && l1 > l3)
          tmp$_0 = element;
        else if (l2 > l1 && l2 > l3)
          tmp$_0 = element.next;
        else
          tmp$_0 = element.next.next;
        var splitEd = tmp$_0;
        v1.set_czzhiu$(element.to).subtract_czzhiu$(element.from).norm();
        v2.set_czzhiu$(element.next.from).subtract_czzhiu$(element.next.to);
        var f = 1.0 - v1.dot_czzhiu$(v2) / splitEd.computeLength();
        if (f > 0.1 && f < 0.9) {
          splitEd.split_mx4ult$(f);
        }}}
    this.rebuildCollapseQueue_sifma0$_0();
  };
  MeshSimplifier.prototype.rebuildCollapseQueue_sifma0$_0 = function () {
    var tmp$;
    this.candidates_gym04f$_0.clear();
    tmp$ = this.mesh_c14x7o$_0.edgeHandler.iterator();
    while (tmp$.hasNext()) {
      var edge = tmp$.next();
      this.insertEdge_56qw8l$_0(edge);
    }
  };
  MeshSimplifier.prototype.insertEdge_56qw8l$_0 = function (edge) {
    if (!this.excludedEdges.contains_11rb$(edge) && (edge.from.index < edge.to.index || edge.opp == null)) {
      var $receiver = this.quadrics_h71pfh$_0;
      var key = edge.from.index;
      var tmp$;
      var value = $receiver.get_11rb$(key);
      if (value == null) {
        var $receiver_0 = new ErrorQuadric(edge.from);
        $receiver_0.isStickyVertex = this.stickyVertices.contains_11rb$(edge.from);
        var answer = $receiver_0;
        $receiver.put_xwzc9p$(key, answer);
        tmp$ = answer;
      } else {
        tmp$ = value;
      }
      var q1 = tmp$;
      var $receiver_1 = this.quadrics_h71pfh$_0;
      var key_0 = edge.to.index;
      var tmp$_0;
      var value_0 = $receiver_1.get_11rb$(key_0);
      if (value_0 == null) {
        var $receiver_2 = new ErrorQuadric(edge.to);
        $receiver_2.isStickyVertex = this.stickyVertices.contains_11rb$(edge.to);
        var answer_0 = $receiver_2;
        $receiver_1.put_xwzc9p$(key_0, answer_0);
        tmp$_0 = answer_0;
      } else {
        tmp$_0 = value_0;
      }
      var q2 = tmp$_0;
      if ((!q1.isStickyVertex || !q2.isStickyVertex) && (!this.keepBorders || (!q1.isBorder && !q2.isBorder))) {
        this.candidates_gym04f$_0.plusAssign_g91td9$(new MeshSimplifier$CollapseCandidate(this, edge, q1, q2));
      }}};
  function MeshSimplifier$CollapseCandidate($outer, edge, q1, q2) {
    this.$outer = $outer;
    this.edge = edge;
    this.q1 = q1;
    this.q2 = q2;
    this.error = 0.0;
    this.collapsePos = MutableVec3f_init();
    this.edgeId = new MeshSimplifier$EdgeId(this.edge.from.index, this.edge.to.index);
    this.updateCollapsePosAndError();
  }
  MeshSimplifier$CollapseCandidate.prototype.updateCollapsePosAndError = function () {
    this.error = this.$outer.collapseStrategy.computeCollapsePosition_2pqe3s$(this.q1, this.q2, this.collapsePos);
  };
  MeshSimplifier$CollapseCandidate.prototype.collapse = function () {
    var rem = this.$outer.quadrics_h71pfh$_0.remove_11rb$(this.q2.vertex.index);
    if (rem !== this.q2) {
      throw IllegalStateException_init('Quadric removal failed!');
    }var affectedEdges = LinkedHashSet_init();
    this.collectAffectedEdges_0(this.q1.vertex, affectedEdges);
    this.collectAffectedEdges_0(this.q2.vertex, affectedEdges);
    this.$outer;
    var tmp$;
    tmp$ = affectedEdges.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      this.$outer.candidates_gym04f$_0.removeByVertexIndices_vux9f0$(element.from.index, element.to.index);
    }
    this.q1.consume_zdf47l$(this.q2);
    this.edge.collapse_mx4ult$(0.0);
    this.q1.vertex.updatePosition_czzhiu$(this.collapsePos);
    affectedEdges.clear();
    this.collectAffectedEdges_0(this.q1.vertex, affectedEdges);
    this.$outer;
    var tmp$_0;
    tmp$_0 = affectedEdges.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      this.$outer.insertEdge_56qw8l$_0(element_0);
    }
    return this.error;
  };
  MeshSimplifier$CollapseCandidate.prototype.collectAffectedEdges_0 = function (v, result) {
    var tmp$;
    tmp$ = v.edges.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      result.add_11rb$(element);
      var element_0 = element.next.next;
      result.add_11rb$(element_0);
    }
  };
  MeshSimplifier$CollapseCandidate.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CollapseCandidate',
    interfaces: []
  };
  function MeshSimplifier$EdgeId(fromId, toId) {
    this.fromId = fromId;
    this.toId = toId;
  }
  MeshSimplifier$EdgeId.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EdgeId',
    interfaces: []
  };
  MeshSimplifier$EdgeId.prototype.component1 = function () {
    return this.fromId;
  };
  MeshSimplifier$EdgeId.prototype.component2 = function () {
    return this.toId;
  };
  MeshSimplifier$EdgeId.prototype.copy_vux9f0$ = function (fromId, toId) {
    return new MeshSimplifier$EdgeId(fromId === void 0 ? this.fromId : fromId, toId === void 0 ? this.toId : toId);
  };
  MeshSimplifier$EdgeId.prototype.toString = function () {
    return 'EdgeId(fromId=' + Kotlin.toString(this.fromId) + (', toId=' + Kotlin.toString(this.toId)) + ')';
  };
  MeshSimplifier$EdgeId.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.fromId) | 0;
    result = result * 31 + Kotlin.hashCode(this.toId) | 0;
    return result;
  };
  MeshSimplifier$EdgeId.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.fromId, other.fromId) && Kotlin.equals(this.toId, other.toId)))));
  };
  function MeshSimplifier$CollapseCandidates() {
    TreeMap.call(this);
    this.candidateMap = LinkedHashMap_init();
  }
  MeshSimplifier$CollapseCandidates.prototype.isNotEmpty = function () {
    return !this.isEmpty();
  };
  MeshSimplifier$CollapseCandidates.prototype.peek = function () {
    return first(this.firstValue());
  };
  MeshSimplifier$CollapseCandidates.prototype.poll = function () {
    var v = this.firstValue();
    var c = v.removeAt_za3lpa$(get_lastIndex(v));
    if (v.isEmpty()) {
      this.remove_11rb$(this.firstKey());
    }var $receiver = this.candidateMap;
    var key = c.edgeId;
    $receiver.remove_11rb$(key);
    return c;
  };
  MeshSimplifier$CollapseCandidates.prototype.clear = function () {
    TreeMap.prototype.clear.call(this);
    this.candidateMap.clear();
  };
  MeshSimplifier$CollapseCandidates.prototype.removeByVertexIndices_vux9f0$ = function (fromId, toId) {
    var c = this.candidateMap.remove_11rb$(new MeshSimplifier$EdgeId(fromId, toId));
    if (c != null) {
      this.minusAssign_g91td9$(c);
    }return c;
  };
  MeshSimplifier$CollapseCandidates.prototype.plusAssign_g91td9$ = function (c) {
    var key = c.error;
    var tmp$;
    var value = this.get_11rb$(key);
    if (value == null) {
      var answer = ArrayList_init_0();
      this.put_xwzc9p$(key, answer);
      tmp$ = answer;
    } else {
      tmp$ = value;
    }
    tmp$.add_11rb$(c);
    var $receiver = this.candidateMap;
    var key_0 = c.edgeId;
    $receiver.put_xwzc9p$(key_0, c);
  };
  MeshSimplifier$CollapseCandidates.prototype.minusAssign_g91td9$ = function (c) {
    var v = this.get_11rb$(c.error);
    if (v != null) {
      v.remove_11rb$(c);
      if (v.isEmpty()) {
        this.remove_11rb$(c.error);
      }}var $receiver = this.candidateMap;
    var key = c.edgeId;
    $receiver.remove_11rb$(key);
  };
  MeshSimplifier$CollapseCandidates.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CollapseCandidates',
    interfaces: [TreeMap]
  };
  MeshSimplifier.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MeshSimplifier',
    interfaces: []
  };
  function TermCriterion() {
  }
  TermCriterion.prototype.init_nbf0q6$ = function (mesh) {
  };
  TermCriterion.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'TermCriterion',
    interfaces: []
  };
  function terminateOnFaceCountRel$ObjectLiteral(closure$factor) {
    this.closure$factor = closure$factor;
    this.targetFaceCnt = 2147483647;
  }
  terminateOnFaceCountRel$ObjectLiteral.prototype.init_nbf0q6$ = function (mesh) {
    this.targetFaceCnt = numberToInt(round(mesh.faceCount * this.closure$factor));
  };
  terminateOnFaceCountRel$ObjectLiteral.prototype.isFinished_6w1xds$ = function (mesh, nextError) {
    return mesh.faceCount <= this.targetFaceCnt;
  };
  terminateOnFaceCountRel$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [TermCriterion]
  };
  function terminateOnFaceCountRel(factor) {
    return new terminateOnFaceCountRel$ObjectLiteral(factor);
  }
  function terminateOnFaceCountAbs$ObjectLiteral(closure$targetFaceCnt) {
    this.closure$targetFaceCnt = closure$targetFaceCnt;
  }
  terminateOnFaceCountAbs$ObjectLiteral.prototype.isFinished_6w1xds$ = function (mesh, nextError) {
    return mesh.faceCount <= this.closure$targetFaceCnt;
  };
  terminateOnFaceCountAbs$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [TermCriterion]
  };
  function terminateOnFaceCountAbs(targetFaceCnt) {
    return new terminateOnFaceCountAbs$ObjectLiteral(targetFaceCnt);
  }
  function terminateOnError$ObjectLiteral(closure$targetError) {
    this.closure$targetError = closure$targetError;
  }
  terminateOnError$ObjectLiteral.prototype.isFinished_6w1xds$ = function (mesh, nextError) {
    return nextError > this.closure$targetError;
  };
  terminateOnError$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [TermCriterion]
  };
  function terminateOnError(targetError) {
    return new terminateOnError$ObjectLiteral(targetError);
  }
  function GlslType(name, ordinal, size, isInt, glslType) {
    Enum.call(this);
    this.size = size;
    this.isInt = isInt;
    this.glslType = glslType;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function GlslType_initFields() {
    GlslType_initFields = function () {
    };
    GlslType$FLOAT_instance = new GlslType('FLOAT', 0, 4, false, 'float');
    GlslType$VEC_2F_instance = new GlslType('VEC_2F', 1, 8, false, 'vec2');
    GlslType$VEC_3F_instance = new GlslType('VEC_3F', 2, 12, false, 'vec3');
    GlslType$VEC_4F_instance = new GlslType('VEC_4F', 3, 16, false, 'vec4');
    GlslType$INT_instance = new GlslType('INT', 4, 4, true, 'int');
    GlslType$VEC_2I_instance = new GlslType('VEC_2I', 5, 8, true, 'ivec2');
    GlslType$VEC_3I_instance = new GlslType('VEC_3I', 6, 12, true, 'ivec3');
    GlslType$VEC_4I_instance = new GlslType('VEC_4I', 7, 16, true, 'ivec4');
    GlslType$MAT_2F_instance = new GlslType('MAT_2F', 8, 16, false, 'mat2');
    GlslType$MAT_3F_instance = new GlslType('MAT_3F', 9, 36, false, 'mat3');
    GlslType$MAT_4F_instance = new GlslType('MAT_4F', 10, 64, false, 'mat4');
  }
  var GlslType$FLOAT_instance;
  function GlslType$FLOAT_getInstance() {
    GlslType_initFields();
    return GlslType$FLOAT_instance;
  }
  var GlslType$VEC_2F_instance;
  function GlslType$VEC_2F_getInstance() {
    GlslType_initFields();
    return GlslType$VEC_2F_instance;
  }
  var GlslType$VEC_3F_instance;
  function GlslType$VEC_3F_getInstance() {
    GlslType_initFields();
    return GlslType$VEC_3F_instance;
  }
  var GlslType$VEC_4F_instance;
  function GlslType$VEC_4F_getInstance() {
    GlslType_initFields();
    return GlslType$VEC_4F_instance;
  }
  var GlslType$INT_instance;
  function GlslType$INT_getInstance() {
    GlslType_initFields();
    return GlslType$INT_instance;
  }
  var GlslType$VEC_2I_instance;
  function GlslType$VEC_2I_getInstance() {
    GlslType_initFields();
    return GlslType$VEC_2I_instance;
  }
  var GlslType$VEC_3I_instance;
  function GlslType$VEC_3I_getInstance() {
    GlslType_initFields();
    return GlslType$VEC_3I_instance;
  }
  var GlslType$VEC_4I_instance;
  function GlslType$VEC_4I_getInstance() {
    GlslType_initFields();
    return GlslType$VEC_4I_instance;
  }
  var GlslType$MAT_2F_instance;
  function GlslType$MAT_2F_getInstance() {
    GlslType_initFields();
    return GlslType$MAT_2F_instance;
  }
  var GlslType$MAT_3F_instance;
  function GlslType$MAT_3F_getInstance() {
    GlslType_initFields();
    return GlslType$MAT_3F_instance;
  }
  var GlslType$MAT_4F_instance;
  function GlslType$MAT_4F_getInstance() {
    GlslType_initFields();
    return GlslType$MAT_4F_instance;
  }
  GlslType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GlslType',
    interfaces: [Enum]
  };
  function GlslType$values() {
    return [GlslType$FLOAT_getInstance(), GlslType$VEC_2F_getInstance(), GlslType$VEC_3F_getInstance(), GlslType$VEC_4F_getInstance(), GlslType$INT_getInstance(), GlslType$VEC_2I_getInstance(), GlslType$VEC_3I_getInstance(), GlslType$VEC_4I_getInstance(), GlslType$MAT_2F_getInstance(), GlslType$MAT_3F_getInstance(), GlslType$MAT_4F_getInstance()];
  }
  GlslType.values = GlslType$values;
  function GlslType$valueOf(name) {
    switch (name) {
      case 'FLOAT':
        return GlslType$FLOAT_getInstance();
      case 'VEC_2F':
        return GlslType$VEC_2F_getInstance();
      case 'VEC_3F':
        return GlslType$VEC_3F_getInstance();
      case 'VEC_4F':
        return GlslType$VEC_4F_getInstance();
      case 'INT':
        return GlslType$INT_getInstance();
      case 'VEC_2I':
        return GlslType$VEC_2I_getInstance();
      case 'VEC_3I':
        return GlslType$VEC_3I_getInstance();
      case 'VEC_4I':
        return GlslType$VEC_4I_getInstance();
      case 'MAT_2F':
        return GlslType$MAT_2F_getInstance();
      case 'MAT_3F':
        return GlslType$MAT_3F_getInstance();
      case 'MAT_4F':
        return GlslType$MAT_4F_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.pipeline.GlslType.' + name);
    }
  }
  GlslType.valueOf_61zpoe$ = GlslType$valueOf;
  function Attribute(name, type) {
    Attribute$Companion_getInstance();
    this.name = name;
    this.type = type;
    this.props = new PlatformAttributeProps(this);
  }
  Attribute.prototype.toString = function () {
    return this.name;
  };
  function Attribute$Companion() {
    Attribute$Companion_instance = this;
    this.POSITIONS = new Attribute('attrib_positions', GlslType$VEC_3F_getInstance());
    this.NORMALS = new Attribute('attrib_normals', GlslType$VEC_3F_getInstance());
    this.TANGENTS = new Attribute('attrib_tangents', GlslType$VEC_3F_getInstance());
    this.TEXTURE_COORDS = new Attribute('attrib_texture_coords', GlslType$VEC_2F_getInstance());
    this.COLORS = new Attribute('attrib_colors', GlslType$VEC_4F_getInstance());
  }
  Attribute$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Attribute$Companion_instance = null;
  function Attribute$Companion_getInstance() {
    if (Attribute$Companion_instance === null) {
      new Attribute$Companion();
    }return Attribute$Companion_instance;
  }
  Attribute.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Attribute',
    interfaces: []
  };
  Attribute.prototype.component1 = function () {
    return this.name;
  };
  Attribute.prototype.component2 = function () {
    return this.type;
  };
  Attribute.prototype.copy_xzl57b$ = function (name, type) {
    return new Attribute(name === void 0 ? this.name : name, type === void 0 ? this.type : type);
  };
  Attribute.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.type) | 0;
    return result;
  };
  Attribute.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.type, other.type)))));
  };
  function DepthMapPass(drawNode, width, height, colorFormat) {
    if (height === void 0)
      height = width;
    if (colorFormat === void 0)
      colorFormat = TexFormat$R_getInstance();
    OffscreenRenderPass2d.call(this, drawNode, width, height, colorFormat);
    this.shadowPipelines_j0os6i$_0 = LinkedHashMap_init();
    this.cullMethod = null;
    this.type = RenderPass$Type$DEPTH_getInstance();
    this.onAfterCollectDrawCommands.add_11rb$(DepthMapPass_init$lambda(this));
  }
  DepthMapPass.prototype.getShadowPipeline_sbx4mf$ = function (mesh, ctx) {
    var tmp$, tmp$_0, tmp$_1;
    var culling = (tmp$_1 = (tmp$_0 = this.cullMethod) != null ? tmp$_0 : (tmp$ = mesh.getPipeline_aemszp$(ctx)) != null ? tmp$.cullMethod : null) != null ? tmp$_1 : CullMethod$CULL_BACK_FACES_getInstance();
    var $receiver = this.shadowPipelines_j0os6i$_0;
    var key = mesh.id;
    var tmp$_2;
    var value = $receiver.get_11rb$(key);
    if (value == null) {
      var answer = this.createPipeline_wgobnr$(mesh, culling, ctx);
      $receiver.put_xwzc9p$(key, answer);
      tmp$_2 = answer;
    } else {
      tmp$_2 = value;
    }
    return tmp$_2;
  };
  DepthMapPass.prototype.createPipeline_wgobnr$ = function (mesh, culling, ctx) {
    var $receiver = new ShaderModel('shadow shader');
    var $receiver_0 = new ShaderModel$VertexStageBuilder($receiver);
    $receiver_0.positionOutput = $receiver_0.simpleVertexPositionNode().outVec4;
    (new ShaderModel$FragmentStageBuilder($receiver)).colorOutput_a3v4si$(new ShaderNodeIoVar(new ModelVar4fConst(Vec4f_init(1.0))));
    var shadowShader = new ModeledShader($receiver);
    var $receiver_1 = new Pipeline$Builder();
    $receiver_1.blendMode = BlendMode$DISABLED_getInstance();
    $receiver_1.cullMethod = culling;
    var pipelineBuilder = $receiver_1;
    return shadowShader.createPipeline_y7vss5$(mesh, pipelineBuilder, ctx);
  };
  DepthMapPass.prototype.dispose_aemszp$ = function (ctx) {
    OffscreenRenderPass2d.prototype.dispose_aemszp$.call(this, ctx);
    var tmp$;
    tmp$ = filterNotNull(this.shadowPipelines_j0os6i$_0.values).iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      ctx.disposePipeline_i7l2g2$(element);
    }
  };
  function DepthMapPass_init$lambda(this$DepthMapPass) {
    return function (ctx) {
      var $receiver = this$DepthMapPass.drawQueue.commands;
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        element.pipeline = this$DepthMapPass.getShadowPipeline_sbx4mf$(element.mesh, ctx);
      }
      return Unit;
    };
  }
  DepthMapPass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DepthMapPass',
    interfaces: [OffscreenRenderPass2d]
  };
  function LinearDepthMapPass(drawNode, width, height) {
    if (height === void 0)
      height = width;
    DepthMapPass.call(this, drawNode, width, height, TexFormat$R_F16_getInstance());
    this.onAfterCollectDrawCommands.add_11rb$(LinearDepthMapPass_init$lambda(this));
  }
  LinearDepthMapPass.prototype.createPipeline_wgobnr$ = function (mesh, culling, ctx) {
    var $receiver = new ShaderModel('shadow shader');
    var $receiver_0 = new ShaderModel$VertexStageBuilder($receiver);
    $receiver_0.positionOutput = $receiver_0.simpleVertexPositionNode().outVec4;
    var $receiver_1 = new ShaderModel$FragmentStageBuilder($receiver);
    var linDepth = $receiver_1.addNode_u9w9by$(new LinearDepthMapPass$LinearDepthNode($receiver_1.stage));
    $receiver_1.colorOutput_a3v4si$(linDepth.outColor);
    var shadowShader = new ModeledShader($receiver);
    var $receiver_2 = new Pipeline$Builder();
    $receiver_2.blendMode = BlendMode$DISABLED_getInstance();
    $receiver_2.cullMethod = culling;
    var pipelineBuilder = $receiver_2;
    return shadowShader.createPipeline_y7vss5$(mesh, pipelineBuilder, ctx);
  };
  function LinearDepthMapPass$LinearDepthNode(graph) {
    ShaderNode.call(this, 'linearDepth', graph);
    this.outColor = new ShaderNodeIoVar(new ModelVar4f('linearDepth'), this);
  }
  LinearDepthMapPass$LinearDepthNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$('\n' + '                float d = gl_FragCoord.z / gl_FragCoord.w;' + '\n' + '                ' + this.outColor.declare() + ' = vec4(-d, 0.0, 0.0, 1.0);' + '\n' + '            ');
  };
  LinearDepthMapPass$LinearDepthNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LinearDepthNode',
    interfaces: [ShaderNode]
  };
  function LinearDepthMapPass_init$lambda(this$LinearDepthMapPass) {
    return function (it) {
      this$LinearDepthMapPass.clearColor = new Color(1.0, 0.0, 0.0, 1.0);
      return Unit;
    };
  }
  LinearDepthMapPass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LinearDepthMapPass',
    interfaces: [DepthMapPass]
  };
  function NormalLinearDepthMapPass(drawNode, width, height) {
    if (height === void 0)
      height = width;
    DepthMapPass.call(this, drawNode, width, height, TexFormat$RGBA_F16_getInstance());
    this.name = 'NormalLinearDepthMapPass';
    this.onAfterCollectDrawCommands.add_11rb$(NormalLinearDepthMapPass_init$lambda(this));
  }
  NormalLinearDepthMapPass.prototype.createPipeline_wgobnr$ = function (mesh, culling, ctx) {
    if (!mesh.geometry.hasAttribute_nm2vx5$(Attribute$Companion_getInstance().NORMALS)) {
      return null;
    }var $receiver = new ShaderModel('shadow shader');
    var ifNormals = {v: null};
    var $receiver_0 = new ShaderModel$VertexStageBuilder($receiver);
    var mvpNode = $receiver_0.mvpNode();
    var modelViewMat = $receiver_0.multiplyNode_ze33is$(mvpNode.outModelMat, mvpNode.outViewMat).output;
    var nrm = $receiver_0.vec3TransformNode_vid4wo$($receiver_0.attrNormals().output, modelViewMat, 0.0);
    ifNormals.v = $receiver_0.stageInterfaceNode_iikjwn$('ifNormals', nrm.outVec3);
    $receiver_0.positionOutput = $receiver_0.vec4TransformNode_9krp9t$($receiver_0.attrPositions().output, mvpNode.outMvpMat).outVec4;
    var $receiver_1 = new ShaderModel$FragmentStageBuilder($receiver);
    var linDepth = $receiver_1.addNode_u9w9by$(new NormalLinearDepthMapPass$NormalLinearDepthNode(ifNormals.v.output, $receiver_1.stage));
    $receiver_1.colorOutput_a3v4si$(linDepth.outColor);
    var shadowShader = new ModeledShader($receiver);
    var $receiver_2 = new Pipeline$Builder();
    $receiver_2.blendMode = BlendMode$DISABLED_getInstance();
    $receiver_2.cullMethod = culling;
    var pipelineBuilder = $receiver_2;
    return shadowShader.createPipeline_y7vss5$(mesh, pipelineBuilder, ctx);
  };
  function NormalLinearDepthMapPass$NormalLinearDepthNode(inNormals, graph) {
    ShaderNode.call(this, 'normalLinearDepth', graph);
    this.inNormals = inNormals;
    this.outColor = new ShaderNodeIoVar(new ModelVar4f('normaLinearDepth'), this);
  }
  NormalLinearDepthMapPass$NormalLinearDepthNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$('\n' + '                float d = gl_FragCoord.z / gl_FragCoord.w;' + '\n' + '                ' + this.outColor.declare() + ' = vec4(normalize(' + this.inNormals.ref3f() + '), -d);' + '\n' + '            ');
  };
  NormalLinearDepthMapPass$NormalLinearDepthNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NormalLinearDepthNode',
    interfaces: [ShaderNode]
  };
  function NormalLinearDepthMapPass_init$lambda(this$NormalLinearDepthMapPass) {
    return function (it) {
      this$NormalLinearDepthMapPass.clearColor = new Color(0.0, 1.0, 0.0, 1.0);
      return Unit;
    };
  }
  NormalLinearDepthMapPass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NormalLinearDepthMapPass',
    interfaces: [DepthMapPass]
  };
  function DescriptorSetLayout(set, descriptors) {
    this.set = set;
    this.descriptors = descriptors;
    this.longHash = null;
    var hash = {v: new ULong(Kotlin.Long.ZERO)};
    var tmp$;
    tmp$ = this.descriptors.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var $this = hash.v;
      var other = new ULong(Kotlin.Long.fromInt(71023));
      var $this_0 = new ULong($this.data.multiply(other.data));
      var other_0 = element.longHash;
      hash.v = new ULong($this_0.data.add(other_0.data));
    }
    this.longHash = hash.v;
  }
  DescriptorSetLayout.prototype.getUniformBuffer_61zpoe$ = function (name) {
    var tmp$;
    var $receiver = this.descriptors;
    var first$result;
    first$break: do {
      var tmp$_0;
      tmp$_0 = $receiver.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        if (Kotlin.isType(element, UniformBuffer) && equals(element.name, name)) {
          first$result = element;
          break first$break;
        }}
      throw new NoSuchElementException_init_0('Collection contains no element matching the predicate.');
    }
     while (false);
    return Kotlin.isType(tmp$ = first$result, UniformBuffer) ? tmp$ : throwCCE();
  };
  DescriptorSetLayout.prototype.getTextureSampler_61zpoe$ = function (name) {
    var tmp$;
    var $receiver = this.descriptors;
    var first$result;
    first$break: do {
      var tmp$_0;
      tmp$_0 = $receiver.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        if (Kotlin.isType(element, TextureSampler) && equals(element.name, name)) {
          first$result = element;
          break first$break;
        }}
      throw new NoSuchElementException_init_0('Collection contains no element matching the predicate.');
    }
     while (false);
    return Kotlin.isType(tmp$ = first$result, TextureSampler) ? tmp$ : throwCCE();
  };
  function DescriptorSetLayout$Builder() {
    this.descriptors = ArrayList_init_0();
  }
  DescriptorSetLayout$Builder.prototype.unaryPlus_ngusss$ = function ($receiver) {
    this.descriptors.add_11rb$($receiver);
  };
  DescriptorSetLayout$Builder.prototype.uniformBuffer_2ydyu8$ = function (name, stages, block) {
    var uniformBuilder = new UniformBuffer$Builder();
    uniformBuilder.name = name;
    addAll_0(uniformBuilder.stages, stages);
    block(uniformBuilder);
    this.unaryPlus_ngusss$(uniformBuilder);
  };
  DescriptorSetLayout$Builder.prototype.texture_j3b8s3$ = function (name, stages, block) {
    var sampler = new TextureSampler$Builder();
    sampler.name = name;
    addAll_0(sampler.stages, stages);
    block(sampler);
    this.unaryPlus_ngusss$(sampler);
  };
  DescriptorSetLayout$Builder.prototype.cubeMap_kh2rdl$ = function (name, stages, block) {
    var sampler = new CubeMapSampler$Builder();
    sampler.name = name;
    addAll_0(sampler.stages, stages);
    block(sampler);
    this.unaryPlus_ngusss$(sampler);
  };
  DescriptorSetLayout$Builder.prototype.create_za3lpa$ = function (set) {
    var size = this.descriptors.size;
    var list = ArrayList_init(size);
    for (var index = 0; index < size; index++) {
      list.add_11rb$(this.descriptors.get_za3lpa$(index).create_za3lpa$(index));
    }
    return new DescriptorSetLayout(set, list);
  };
  DescriptorSetLayout$Builder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Builder',
    interfaces: []
  };
  DescriptorSetLayout.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DescriptorSetLayout',
    interfaces: []
  };
  function Descriptor(builder, binding, type, hash) {
    this.binding = binding;
    this.type = type;
    this.name = builder.name;
    this.stages = copy_0(builder.stages);
    this.longHash = null;
    var h = hash;
    var $this = h;
    var other = new ULong(Kotlin.Long.fromInt(71023));
    var tmp$ = new ULong($this.data.multiply(other.data));
    var $receiver = hashCode(builder.name);
    var other_0 = new ULong(Kotlin.Long.fromInt($receiver));
    h = new ULong(tmp$.data.add(other_0.data));
    var $this_0 = h;
    var other_1 = new ULong(Kotlin.Long.fromInt(71023));
    var tmp$_0 = new ULong($this_0.data.multiply(other_1.data));
    var $receiver_0 = this.type.hashCode();
    var other_2 = new ULong(Kotlin.Long.fromInt($receiver_0));
    h = new ULong(tmp$_0.data.add(other_2.data));
    this.longHash = h;
  }
  function Descriptor$Builder() {
    this.name = '';
    this.stages = LinkedHashSet_init();
  }
  Descriptor$Builder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Builder',
    interfaces: []
  };
  Descriptor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Descriptor',
    interfaces: []
  };
  function TextureSampler(builder, binding, hash) {
    Descriptor.call(this, builder, binding, DescriptorType$IMAGE_SAMPLER_getInstance(), hash);
    this.arraySize = builder.arraySize;
    this.isDepthSampler = builder.isDepthSampler;
    this.onUpdate = builder.onUpdate;
    var array = Array_0(this.arraySize);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = null;
    }
    this.textures = array;
  }
  Object.defineProperty(TextureSampler.prototype, 'texture', {
    get: function () {
      return this.textures[0];
    },
    set: function (value) {
      this.textures[0] = value;
    }
  });
  function TextureSampler$Builder() {
    Descriptor$Builder.call(this);
    this.arraySize = 1;
    this.isDepthSampler = false;
    this.onUpdate = null;
    this.onCreate = null;
    this.name = 'texture';
  }
  TextureSampler$Builder.prototype.create_za3lpa$ = function (binding) {
    var tmp$;
    var $receiver = DescriptorType$IMAGE_SAMPLER_getInstance().hashCode();
    var $this = new ULong(Kotlin.Long.fromInt($receiver));
    var other = new ULong(Kotlin.Long.fromInt(71023));
    var sampler = new TextureSampler(this, binding, new ULong($this.data.multiply(other.data)));
    (tmp$ = this.onCreate) != null ? tmp$(sampler) : null;
    return sampler;
  };
  TextureSampler$Builder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Builder',
    interfaces: [Descriptor$Builder]
  };
  TextureSampler.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextureSampler',
    interfaces: [Descriptor]
  };
  function CubeMapSampler(builder, binding, hash) {
    Descriptor.call(this, builder, binding, DescriptorType$CUBE_IMAGE_SAMPLER_getInstance(), hash);
    this.arraySize = builder.arraySize;
    this.isDepthSampler = builder.isDepthSampler;
    this.onUpdate = builder.onUpdate;
    var array = Array_0(this.arraySize);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = null;
    }
    this.textures = array;
  }
  Object.defineProperty(CubeMapSampler.prototype, 'texture', {
    get: function () {
      return this.textures[0];
    },
    set: function (value) {
      this.textures[0] = value;
    }
  });
  function CubeMapSampler$Builder() {
    Descriptor$Builder.call(this);
    this.arraySize = 1;
    this.isDepthSampler = false;
    this.onUpdate = null;
    this.onCreate = null;
    this.name = 'cubeTexture';
  }
  CubeMapSampler$Builder.prototype.create_za3lpa$ = function (binding) {
    var tmp$;
    var $receiver = DescriptorType$CUBE_IMAGE_SAMPLER_getInstance().hashCode();
    var $this = new ULong(Kotlin.Long.fromInt($receiver));
    var other = new ULong(Kotlin.Long.fromInt(71023));
    var sampler = new CubeMapSampler(this, binding, new ULong($this.data.multiply(other.data)));
    (tmp$ = this.onCreate) != null ? tmp$(sampler) : null;
    return sampler;
  };
  CubeMapSampler$Builder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Builder',
    interfaces: [Descriptor$Builder]
  };
  CubeMapSampler.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CubeMapSampler',
    interfaces: [Descriptor]
  };
  function UniformBuffer(builder, binding, uniforms, hash) {
    Descriptor.call(this, builder, binding, DescriptorType$UNIFORM_BUFFER_getInstance(), hash);
    this.uniforms = uniforms;
    this.instanceName = builder.instanceName;
    this.onUpdate = builder.onUpdate;
    this.layout_0 = new Std140Layout(this.uniforms);
    this.size = this.layout_0.size;
  }
  UniformBuffer.prototype.putTo_l6oshk$ = function (buffer) {
    this.layout_0.putTo_l6oshk$(buffer);
    buffer.flip();
  };
  UniformBuffer.prototype.uniform_ww73n8$ = function (index) {
    var tmp$;
    return (tmp$ = this.uniforms.get_za3lpa$(index)) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
  };
  function UniformBuffer$Builder() {
    Descriptor$Builder.call(this);
    this.instanceName = null;
    this.uniforms = ArrayList_init_0();
    this.onUpdate = null;
    this.onCreate = null;
    this.name = 'Ubo';
  }
  UniformBuffer$Builder.prototype.unaryPlus_wq3w46$ = function ($receiver) {
    this.uniforms.add_11rb$($receiver);
  };
  UniformBuffer$Builder.prototype.create_za3lpa$ = function (binding) {
    var tmp$;
    var size = this.uniforms.size;
    var list = ArrayList_init(size);
    for (var index = 0; index < size; index++) {
      list.add_11rb$(this.uniforms.get_za3lpa$(index)());
    }
    var uniforms = list;
    var $receiver = DescriptorType$UNIFORM_BUFFER_getInstance().hashCode();
    var $this = new ULong(Kotlin.Long.fromInt($receiver));
    var other = new ULong(Kotlin.Long.fromInt(71023));
    var hash = {v: new ULong($this.data.multiply(other.data))};
    var tmp$_0;
    tmp$_0 = uniforms.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      var $this_0 = hash.v;
      var other_0 = new ULong(Kotlin.Long.fromInt(71023));
      var tmp$_1 = new ULong($this_0.data.multiply(other_0.data));
      var $receiver_0 = Kotlin.getKClassFromExpression(element).hashCode();
      var other_1 = new ULong(Kotlin.Long.fromInt($receiver_0));
      hash.v = new ULong(tmp$_1.data.add(other_1.data));
      var $this_1 = hash.v;
      var other_2 = new ULong(Kotlin.Long.fromInt(71023));
      var tmp$_2 = new ULong($this_1.data.multiply(other_2.data));
      var $receiver_1 = hashCode(element.name);
      var other_3 = new ULong(Kotlin.Long.fromInt($receiver_1));
      hash.v = new ULong(tmp$_2.data.add(other_3.data));
    }
    var ubo = new UniformBuffer(this, binding, uniforms, hash.v);
    (tmp$ = this.onCreate) != null ? tmp$(ubo) : null;
    return ubo;
  };
  UniformBuffer$Builder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Builder',
    interfaces: [Descriptor$Builder]
  };
  UniformBuffer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UniformBuffer',
    interfaces: [Descriptor]
  };
  function DescriptorType(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function DescriptorType_initFields() {
    DescriptorType_initFields = function () {
    };
    DescriptorType$IMAGE_SAMPLER_instance = new DescriptorType('IMAGE_SAMPLER', 0);
    DescriptorType$CUBE_IMAGE_SAMPLER_instance = new DescriptorType('CUBE_IMAGE_SAMPLER', 1);
    DescriptorType$UNIFORM_BUFFER_instance = new DescriptorType('UNIFORM_BUFFER', 2);
  }
  var DescriptorType$IMAGE_SAMPLER_instance;
  function DescriptorType$IMAGE_SAMPLER_getInstance() {
    DescriptorType_initFields();
    return DescriptorType$IMAGE_SAMPLER_instance;
  }
  var DescriptorType$CUBE_IMAGE_SAMPLER_instance;
  function DescriptorType$CUBE_IMAGE_SAMPLER_getInstance() {
    DescriptorType_initFields();
    return DescriptorType$CUBE_IMAGE_SAMPLER_instance;
  }
  var DescriptorType$UNIFORM_BUFFER_instance;
  function DescriptorType$UNIFORM_BUFFER_getInstance() {
    DescriptorType_initFields();
    return DescriptorType$UNIFORM_BUFFER_instance;
  }
  DescriptorType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DescriptorType',
    interfaces: [Enum]
  };
  function DescriptorType$values() {
    return [DescriptorType$IMAGE_SAMPLER_getInstance(), DescriptorType$CUBE_IMAGE_SAMPLER_getInstance(), DescriptorType$UNIFORM_BUFFER_getInstance()];
  }
  DescriptorType.values = DescriptorType$values;
  function DescriptorType$valueOf(name) {
    switch (name) {
      case 'IMAGE_SAMPLER':
        return DescriptorType$IMAGE_SAMPLER_getInstance();
      case 'CUBE_IMAGE_SAMPLER':
        return DescriptorType$CUBE_IMAGE_SAMPLER_getInstance();
      case 'UNIFORM_BUFFER':
        return DescriptorType$UNIFORM_BUFFER_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.pipeline.DescriptorType.' + name);
    }
  }
  DescriptorType.valueOf_61zpoe$ = DescriptorType$valueOf;
  function LoadedTexture() {
  }
  LoadedTexture.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'LoadedTexture',
    interfaces: []
  };
  function OffscreenRenderPass(drawNode, texWidth, texHeight, mipLevels) {
    RenderPass.call(this, drawNode);
    this.mipLevels = mipLevels;
    this.targetMipLevel = -1;
    this.isEnabled = true;
    this.texWidth_f45css$_0 = texWidth;
    this.texHeight_xhnti3$_0 = texHeight;
    var $receiver = new PerspectiveCamera();
    $receiver.projCorrectionMode = Camera$ProjCorrectionMode$OFFSCREEN_getInstance();
    this.camera_et6fa$_0 = $receiver;
    this.setMipViewport_za3lpa$(0);
  }
  Object.defineProperty(OffscreenRenderPass.prototype, 'texWidth', {
    get: function () {
      return this.texWidth_f45css$_0;
    },
    set: function (texWidth) {
      this.texWidth_f45css$_0 = texWidth;
    }
  });
  Object.defineProperty(OffscreenRenderPass.prototype, 'texHeight', {
    get: function () {
      return this.texHeight_xhnti3$_0;
    },
    set: function (texHeight) {
      this.texHeight_xhnti3$_0 = texHeight;
    }
  });
  Object.defineProperty(OffscreenRenderPass.prototype, 'camera', {
    get: function () {
      return this.camera_et6fa$_0;
    },
    set: function (camera) {
      this.camera_et6fa$_0 = camera;
    }
  });
  OffscreenRenderPass.prototype.mipWidth_za3lpa$ = function (mipLevel) {
    var tmp$;
    if (mipLevel <= 0) {
      tmp$ = this.texWidth;
    } else {
      tmp$ = this.texWidth >> mipLevel;
    }
    return tmp$;
  };
  OffscreenRenderPass.prototype.mipHeight_za3lpa$ = function (mipLevel) {
    var tmp$;
    if (mipLevel <= 0) {
      tmp$ = this.texHeight;
    } else {
      tmp$ = this.texHeight >> mipLevel;
    }
    return tmp$;
  };
  OffscreenRenderPass.prototype.setMipViewport_za3lpa$ = function (mipLevel) {
    this.viewport.set_tjonv8$(0, 0, this.mipWidth_za3lpa$(mipLevel), this.mipHeight_za3lpa$(mipLevel));
  };
  OffscreenRenderPass.prototype.resize_w70mbp$ = function (width, height, ctx) {
    this.texWidth = width;
    this.texHeight = height;
    this.setMipViewport_za3lpa$(0);
  };
  OffscreenRenderPass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OffscreenRenderPass',
    interfaces: [RenderPass]
  };
  function OffscreenRenderPass2d(drawNode, texWidth, texHeight, colorFormat, mipLevels) {
    if (colorFormat === void 0)
      colorFormat = TexFormat$RGBA_getInstance();
    if (mipLevels === void 0)
      mipLevels = 1;
    OffscreenRenderPass.call(this, drawNode, texWidth, texHeight, mipLevels);
    this.colorFormat = colorFormat;
    this.impl_8be2vx$ = new OffscreenPass2dImpl(this);
  }
  Object.defineProperty(OffscreenRenderPass2d.prototype, 'colorTexture', {
    get: function () {
      return this.impl_8be2vx$.texture;
    }
  });
  Object.defineProperty(OffscreenRenderPass2d.prototype, 'depthTexture', {
    get: function () {
      return this.impl_8be2vx$.depthTexture;
    }
  });
  OffscreenRenderPass2d.prototype.dispose_aemszp$ = function (ctx) {
    OffscreenRenderPass.prototype.dispose_aemszp$.call(this, ctx);
    this.impl_8be2vx$.dispose_aemszp$(ctx);
  };
  OffscreenRenderPass2d.prototype.resize_w70mbp$ = function (width, height, ctx) {
    OffscreenRenderPass.prototype.resize_w70mbp$.call(this, width, height, ctx);
    this.impl_8be2vx$.resize_w70mbp$(width, height, ctx);
  };
  OffscreenRenderPass2d.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OffscreenRenderPass2d',
    interfaces: [OffscreenRenderPass]
  };
  function OffscreenRenderPass2dMrt(drawNode, texWidth, texHeight, texFormats) {
    OffscreenRenderPass.call(this, drawNode, texWidth, texHeight, 1);
    this.texFormats = copy(texFormats);
    this.nAttachments = texFormats.size;
    var array = Array_0(this.nAttachments);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = null;
    }
    this.clearColors_673gz1$_0 = array;
    this.impl_8be2vx$ = new OffscreenPass2dMrtImpl(this);
  }
  Object.defineProperty(OffscreenRenderPass2dMrt.prototype, 'clearColors', {
    get: function () {
      return this.clearColors_673gz1$_0;
    }
  });
  Object.defineProperty(OffscreenRenderPass2dMrt.prototype, 'textures', {
    get: function () {
      return this.impl_8be2vx$.textures;
    }
  });
  Object.defineProperty(OffscreenRenderPass2dMrt.prototype, 'depthTexture', {
    get: function () {
      return this.impl_8be2vx$.depthTexture;
    }
  });
  OffscreenRenderPass2dMrt.prototype.dispose_aemszp$ = function (ctx) {
    OffscreenRenderPass.prototype.dispose_aemszp$.call(this, ctx);
    this.impl_8be2vx$.dispose_aemszp$(ctx);
  };
  OffscreenRenderPass2dMrt.prototype.resize_w70mbp$ = function (width, height, ctx) {
    OffscreenRenderPass.prototype.resize_w70mbp$.call(this, width, height, ctx);
    this.impl_8be2vx$.resize_w70mbp$(width, height, ctx);
  };
  OffscreenRenderPass2dMrt.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OffscreenRenderPass2dMrt',
    interfaces: [OffscreenRenderPass]
  };
  function OffscreenRenderPassCube(drawNode, texWidth, texHeight, mipLevels, colorFormat) {
    if (colorFormat === void 0)
      colorFormat = TexFormat$RGBA_getInstance();
    OffscreenRenderPass.call(this, drawNode, texWidth, texHeight, mipLevels);
    this.colorFormat = colorFormat;
    this.impl_8be2vx$ = new OffscreenPassCubeImpl(this);
    this.onSetupView_3plctr$_0 = this.onSetupView_3plctr$_0;
    var array = Array_0(6);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new DrawQueue(this);
    }
    this.drawQueues = array;
    this.defaultCubeMapCameraConfig_ubu93h$_0();
  }
  Object.defineProperty(OffscreenRenderPassCube.prototype, 'colorTextureCube', {
    get: function () {
      return this.impl_8be2vx$.texture;
    }
  });
  Object.defineProperty(OffscreenRenderPassCube.prototype, 'onSetupView', {
    get: function () {
      if (this.onSetupView_3plctr$_0 == null)
        return throwUPAE('onSetupView');
      return this.onSetupView_3plctr$_0;
    },
    set: function (onSetupView) {
      this.onSetupView_3plctr$_0 = onSetupView;
    }
  });
  OffscreenRenderPassCube.prototype.collectDrawCommands_aemszp$ = function (ctx) {
    var tmp$, tmp$_0;
    tmp$ = OffscreenRenderPassCube$ViewDirection$values();
    for (tmp$_0 = 0; tmp$_0 !== tmp$.length; ++tmp$_0) {
      var v = tmp$[tmp$_0];
      this.drawQueue = this.drawQueues[v.index];
      this.onSetupView(v, ctx);
      OffscreenRenderPass.prototype.collectDrawCommands_aemszp$.call(this, ctx);
    }
  };
  OffscreenRenderPassCube.prototype.dispose_aemszp$ = function (ctx) {
    OffscreenRenderPass.prototype.dispose_aemszp$.call(this, ctx);
    this.impl_8be2vx$.dispose_aemszp$(ctx);
  };
  OffscreenRenderPassCube.prototype.resize_w70mbp$ = function (width, height, ctx) {
    OffscreenRenderPass.prototype.resize_w70mbp$.call(this, width, height, ctx);
    this.impl_8be2vx$.resize_w70mbp$(width, height, ctx);
  };
  function OffscreenRenderPassCube$defaultCubeMapCameraConfig$lambda(closure$camDirs, this$OffscreenRenderPassCube) {
    return function (viewDir, f) {
      var viewCfg = ensureNotNull(closure$camDirs.get_11rb$(viewDir));
      this$OffscreenRenderPassCube.camera.lookAt.set_czzhiu$(viewCfg.lookAt);
      this$OffscreenRenderPassCube.camera.up.set_czzhiu$(viewCfg.up);
      return Unit;
    };
  }
  OffscreenRenderPassCube.prototype.defaultCubeMapCameraConfig_ubu93h$_0 = function () {
    var camDirs = mutableMapOf([to(OffscreenRenderPassCube$ViewDirection$FRONT_getInstance(), new OffscreenRenderPassCube$ViewConfig(new Vec3f(0.0, 0.0, 1.0), Vec3f$Companion_getInstance().NEG_Y_AXIS)), to(OffscreenRenderPassCube$ViewDirection$BACK_getInstance(), new OffscreenRenderPassCube$ViewConfig(new Vec3f(0.0, 0.0, -1.0), Vec3f$Companion_getInstance().NEG_Y_AXIS)), to(OffscreenRenderPassCube$ViewDirection$LEFT_getInstance(), new OffscreenRenderPassCube$ViewConfig(new Vec3f(-1.0, 0.0, 0.0), Vec3f$Companion_getInstance().NEG_Y_AXIS)), to(OffscreenRenderPassCube$ViewDirection$RIGHT_getInstance(), new OffscreenRenderPassCube$ViewConfig(new Vec3f(1.0, 0.0, 0.0), Vec3f$Companion_getInstance().NEG_Y_AXIS)), to(OffscreenRenderPassCube$ViewDirection$UP_getInstance(), new OffscreenRenderPassCube$ViewConfig(new Vec3f(0.0, 1.0, 0.0), Vec3f$Companion_getInstance().Z_AXIS)), to(OffscreenRenderPassCube$ViewDirection$DOWN_getInstance(), new OffscreenRenderPassCube$ViewConfig(new Vec3f(0.0, -1.0, 0.0), Vec3f$Companion_getInstance().NEG_Z_AXIS))]);
    var cam = this.camera;
    if (Kotlin.isType(cam, PerspectiveCamera)) {
      cam.position.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
      cam.fovY = 90.0;
      cam.clipNear = 0.1;
      cam.clipFar = 10.0;
      cam.projCorrectionMode = Camera$ProjCorrectionMode$OFFSCREEN_getInstance();
    }this.onSetupView = OffscreenRenderPassCube$defaultCubeMapCameraConfig$lambda(camDirs, this);
  };
  function OffscreenRenderPassCube$ViewConfig(lookAt, up) {
    this.lookAt = lookAt;
    this.up = up;
  }
  OffscreenRenderPassCube$ViewConfig.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ViewConfig',
    interfaces: []
  };
  function OffscreenRenderPassCube$ViewDirection(name, ordinal, index) {
    Enum.call(this);
    this.index = index;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function OffscreenRenderPassCube$ViewDirection_initFields() {
    OffscreenRenderPassCube$ViewDirection_initFields = function () {
    };
    OffscreenRenderPassCube$ViewDirection$FRONT_instance = new OffscreenRenderPassCube$ViewDirection('FRONT', 0, 0);
    OffscreenRenderPassCube$ViewDirection$BACK_instance = new OffscreenRenderPassCube$ViewDirection('BACK', 1, 1);
    OffscreenRenderPassCube$ViewDirection$LEFT_instance = new OffscreenRenderPassCube$ViewDirection('LEFT', 2, 2);
    OffscreenRenderPassCube$ViewDirection$RIGHT_instance = new OffscreenRenderPassCube$ViewDirection('RIGHT', 3, 3);
    OffscreenRenderPassCube$ViewDirection$UP_instance = new OffscreenRenderPassCube$ViewDirection('UP', 4, 4);
    OffscreenRenderPassCube$ViewDirection$DOWN_instance = new OffscreenRenderPassCube$ViewDirection('DOWN', 5, 5);
  }
  var OffscreenRenderPassCube$ViewDirection$FRONT_instance;
  function OffscreenRenderPassCube$ViewDirection$FRONT_getInstance() {
    OffscreenRenderPassCube$ViewDirection_initFields();
    return OffscreenRenderPassCube$ViewDirection$FRONT_instance;
  }
  var OffscreenRenderPassCube$ViewDirection$BACK_instance;
  function OffscreenRenderPassCube$ViewDirection$BACK_getInstance() {
    OffscreenRenderPassCube$ViewDirection_initFields();
    return OffscreenRenderPassCube$ViewDirection$BACK_instance;
  }
  var OffscreenRenderPassCube$ViewDirection$LEFT_instance;
  function OffscreenRenderPassCube$ViewDirection$LEFT_getInstance() {
    OffscreenRenderPassCube$ViewDirection_initFields();
    return OffscreenRenderPassCube$ViewDirection$LEFT_instance;
  }
  var OffscreenRenderPassCube$ViewDirection$RIGHT_instance;
  function OffscreenRenderPassCube$ViewDirection$RIGHT_getInstance() {
    OffscreenRenderPassCube$ViewDirection_initFields();
    return OffscreenRenderPassCube$ViewDirection$RIGHT_instance;
  }
  var OffscreenRenderPassCube$ViewDirection$UP_instance;
  function OffscreenRenderPassCube$ViewDirection$UP_getInstance() {
    OffscreenRenderPassCube$ViewDirection_initFields();
    return OffscreenRenderPassCube$ViewDirection$UP_instance;
  }
  var OffscreenRenderPassCube$ViewDirection$DOWN_instance;
  function OffscreenRenderPassCube$ViewDirection$DOWN_getInstance() {
    OffscreenRenderPassCube$ViewDirection_initFields();
    return OffscreenRenderPassCube$ViewDirection$DOWN_instance;
  }
  OffscreenRenderPassCube$ViewDirection.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ViewDirection',
    interfaces: [Enum]
  };
  function OffscreenRenderPassCube$ViewDirection$values() {
    return [OffscreenRenderPassCube$ViewDirection$FRONT_getInstance(), OffscreenRenderPassCube$ViewDirection$BACK_getInstance(), OffscreenRenderPassCube$ViewDirection$LEFT_getInstance(), OffscreenRenderPassCube$ViewDirection$RIGHT_getInstance(), OffscreenRenderPassCube$ViewDirection$UP_getInstance(), OffscreenRenderPassCube$ViewDirection$DOWN_getInstance()];
  }
  OffscreenRenderPassCube$ViewDirection.values = OffscreenRenderPassCube$ViewDirection$values;
  function OffscreenRenderPassCube$ViewDirection$valueOf(name) {
    switch (name) {
      case 'FRONT':
        return OffscreenRenderPassCube$ViewDirection$FRONT_getInstance();
      case 'BACK':
        return OffscreenRenderPassCube$ViewDirection$BACK_getInstance();
      case 'LEFT':
        return OffscreenRenderPassCube$ViewDirection$LEFT_getInstance();
      case 'RIGHT':
        return OffscreenRenderPassCube$ViewDirection$RIGHT_getInstance();
      case 'UP':
        return OffscreenRenderPassCube$ViewDirection$UP_getInstance();
      case 'DOWN':
        return OffscreenRenderPassCube$ViewDirection$DOWN_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.pipeline.OffscreenRenderPassCube.ViewDirection.' + name);
    }
  }
  OffscreenRenderPassCube$ViewDirection.valueOf_61zpoe$ = OffscreenRenderPassCube$ViewDirection$valueOf;
  OffscreenRenderPassCube.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OffscreenRenderPassCube',
    interfaces: [OffscreenRenderPass]
  };
  function Pipeline(builder, mesh, ctx) {
    Pipeline$Companion_getInstance();
    this.name = builder.name;
    this.pipelineHash = null;
    var tmp$;
    this.pipelineInstanceId = (tmp$ = Pipeline$Companion_getInstance().instanceId_0, Pipeline$Companion_getInstance().instanceId_0 = tmp$.inc(), tmp$);
    this.cullMethod = builder.cullMethod;
    this.blendMode = builder.blendMode;
    this.depthCompareOp = builder.depthTest;
    this.isWriteDepth = builder.isWriteDepth;
    this.lineWidth = builder.lineWidth;
    this.vertexLayout = null;
    this.descriptorSetLayouts = null;
    this.pushConstantRanges = null;
    this.shader = null;
    this.shaderCode = null;
    var buildCtx = new Pipeline$BuildContext(builder);
    buildCtx.vertexLayout.primitiveType = mesh.geometry.primitiveType;
    var tmp$_0;
    tmp$_0 = builder.onCreatePipeline.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      element(buildCtx);
    }
    this.shader = builder.shaderLoader(mesh, buildCtx, ctx);
    this.vertexLayout = buildCtx.vertexLayout.create();
    var $receiver = buildCtx.descriptorSetLayouts;
    var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
    var tmp$_1, tmp$_0_0;
    var index = 0;
    tmp$_1 = $receiver.iterator();
    while (tmp$_1.hasNext()) {
      var item = tmp$_1.next();
      destination.add_11rb$(item.create_za3lpa$(checkIndexOverflow((tmp$_0_0 = index, index = tmp$_0_0 + 1 | 0, tmp$_0_0))));
    }
    this.descriptorSetLayouts = destination;
    var $receiver_0 = buildCtx.pushConstantRanges;
    var destination_0 = ArrayList_init(collectionSizeOrDefault($receiver_0, 10));
    var tmp$_2;
    tmp$_2 = $receiver_0.iterator();
    while (tmp$_2.hasNext()) {
      var item_0 = tmp$_2.next();
      destination_0.add_11rb$(item_0.create());
    }
    this.pushConstantRanges = destination_0;
    this.shaderCode = this.shader.generateCode_1y5mwk$(this, ctx);
    var $receiver_1 = this.cullMethod.hashCode();
    var hash = {v: new ULong(Kotlin.Long.fromInt($receiver_1))};
    var $this = hash.v;
    var other = new ULong(Kotlin.Long.fromInt(71023));
    var tmp$_3 = new ULong($this.data.multiply(other.data));
    var $receiver_2 = this.depthCompareOp.hashCode();
    var other_0 = new ULong(Kotlin.Long.fromInt($receiver_2));
    hash.v = new ULong(tmp$_3.data.add(other_0.data));
    var $this_0 = hash.v;
    var other_1 = new ULong(Kotlin.Long.fromInt(71023));
    var tmp$_4 = new ULong($this_0.data.multiply(other_1.data));
    var $receiver_3 = hashCode(this.isWriteDepth);
    var other_2 = new ULong(Kotlin.Long.fromInt($receiver_3));
    hash.v = new ULong(tmp$_4.data.add(other_2.data));
    var $this_1 = hash.v;
    var other_3 = new ULong(Kotlin.Long.fromInt(71023));
    var tmp$_5 = new ULong($this_1.data.multiply(other_3.data));
    var $receiver_4 = hashCode(this.lineWidth);
    var other_4 = new ULong(Kotlin.Long.fromInt($receiver_4));
    hash.v = new ULong(tmp$_5.data.add(other_4.data));
    var $this_2 = hash.v;
    var other_5 = new ULong(Kotlin.Long.fromInt(71023));
    var $this_3 = new ULong($this_2.data.multiply(other_5.data));
    var other_6 = this.vertexLayout.longHash;
    hash.v = new ULong($this_3.data.add(other_6.data));
    var $this_4 = hash.v;
    var other_7 = new ULong(Kotlin.Long.fromInt(71023));
    var $this_5 = new ULong($this_4.data.multiply(other_7.data));
    var other_8 = this.shaderCode.longHash;
    hash.v = new ULong($this_5.data.add(other_8.data));
    var tmp$_6;
    tmp$_6 = this.descriptorSetLayouts.iterator();
    while (tmp$_6.hasNext()) {
      var element_0 = tmp$_6.next();
      var $this_6 = hash.v;
      var other_9 = new ULong(Kotlin.Long.fromInt(71023));
      var $this_7 = new ULong($this_6.data.multiply(other_9.data));
      var other_10 = element_0.longHash;
      hash.v = new ULong($this_7.data.add(other_10.data));
    }
    var tmp$_7;
    tmp$_7 = this.pushConstantRanges.iterator();
    while (tmp$_7.hasNext()) {
      var element_1 = tmp$_7.next();
      var $this_8 = hash.v;
      var other_11 = new ULong(Kotlin.Long.fromInt(71023));
      var $this_9 = new ULong($this_8.data.multiply(other_11.data));
      var other_12 = element_1.longHash;
      hash.v = new ULong($this_9.data.add(other_12.data));
    }
    this.pipelineHash = hash.v;
    this.shader.onPipelineCreated_lfrgcb$(this);
    var tmp$_8;
    tmp$_8 = builder.onPipelineCreated.iterator();
    while (tmp$_8.hasNext()) {
      var element_2 = tmp$_8.next();
      element_2(this);
    }
  }
  Pipeline.prototype.equals = function (other) {
    var tmp$;
    if (this === other)
      return true;
    if (!Kotlin.isType(other, Pipeline))
      return false;
    return (tmp$ = this.pipelineHash) != null ? tmp$.equals(other.pipelineHash) : null;
  };
  Pipeline.prototype.hashCode = function () {
    return this.pipelineHash.hashCode();
  };
  function Pipeline$BuildContext(builder) {
    this.builder = builder;
    this.vertexLayout = new VertexLayout$Builder();
    this.descriptorSetLayouts = ArrayList_init_0();
    this.pushConstantRanges = ArrayList_init_0();
  }
  Pipeline$BuildContext.prototype.vertexLayout_ipuw3d$ = function (block) {
    block(this.vertexLayout);
  };
  Pipeline$BuildContext.prototype.descriptorSetLayout_l9aa18$ = function (set, block) {
    if (set === void 0)
      set = 0;
    while (set >= this.descriptorSetLayouts.size) {
      var $receiver = this.descriptorSetLayouts;
      var element = new DescriptorSetLayout$Builder();
      $receiver.add_11rb$(element);
    }
    block(this.descriptorSetLayouts.get_za3lpa$(set));
  };
  Pipeline$BuildContext.prototype.pushConstantRange_77euff$ = function (name, stages, block) {
    var b = new PushConstantRange$Builder();
    b.name = name;
    addAll_0(b.stages, stages);
    block(b);
    this.pushConstantRanges.add_11rb$(b);
  };
  Pipeline$BuildContext.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BuildContext',
    interfaces: []
  };
  function Pipeline$Builder() {
    this.name = 'pipeline';
    this.cullMethod = CullMethod$CULL_BACK_FACES_getInstance();
    this.blendMode = BlendMode$BLEND_PREMULTIPLIED_ALPHA_getInstance();
    this.depthTest = DepthCompareOp$LESS_getInstance();
    this.isWriteDepth = true;
    this.lineWidth = 1.0;
    this.onCreatePipeline = ArrayList_init_0();
    this.onPipelineCreated = ArrayList_init_0();
    this.shaderLoader = Pipeline$Builder$shaderLoader$lambda;
  }
  Pipeline$Builder.prototype.create_sbx4mf$ = function (mesh, ctx) {
    return new Pipeline(this, mesh, ctx);
  };
  function Pipeline$Builder$shaderLoader$lambda(f, f_0, f_1) {
    throw KoolException_init('No shader loader specified');
  }
  Pipeline$Builder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Builder',
    interfaces: []
  };
  function Pipeline$Companion() {
    Pipeline$Companion_instance = this;
    this.instanceId_0 = L1;
  }
  Pipeline$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Pipeline$Companion_instance = null;
  function Pipeline$Companion_getInstance() {
    if (Pipeline$Companion_instance === null) {
      new Pipeline$Companion();
    }return Pipeline$Companion_instance;
  }
  Pipeline.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Pipeline',
    interfaces: []
  };
  function PipelineFactory() {
  }
  PipelineFactory.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'PipelineFactory',
    interfaces: []
  };
  function BlendMode(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function BlendMode_initFields() {
    BlendMode_initFields = function () {
    };
    BlendMode$DISABLED_instance = new BlendMode('DISABLED', 0);
    BlendMode$BLEND_ADDITIVE_instance = new BlendMode('BLEND_ADDITIVE', 1);
    BlendMode$BLEND_MULTIPLY_ALPHA_instance = new BlendMode('BLEND_MULTIPLY_ALPHA', 2);
    BlendMode$BLEND_PREMULTIPLIED_ALPHA_instance = new BlendMode('BLEND_PREMULTIPLIED_ALPHA', 3);
  }
  var BlendMode$DISABLED_instance;
  function BlendMode$DISABLED_getInstance() {
    BlendMode_initFields();
    return BlendMode$DISABLED_instance;
  }
  var BlendMode$BLEND_ADDITIVE_instance;
  function BlendMode$BLEND_ADDITIVE_getInstance() {
    BlendMode_initFields();
    return BlendMode$BLEND_ADDITIVE_instance;
  }
  var BlendMode$BLEND_MULTIPLY_ALPHA_instance;
  function BlendMode$BLEND_MULTIPLY_ALPHA_getInstance() {
    BlendMode_initFields();
    return BlendMode$BLEND_MULTIPLY_ALPHA_instance;
  }
  var BlendMode$BLEND_PREMULTIPLIED_ALPHA_instance;
  function BlendMode$BLEND_PREMULTIPLIED_ALPHA_getInstance() {
    BlendMode_initFields();
    return BlendMode$BLEND_PREMULTIPLIED_ALPHA_instance;
  }
  BlendMode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlendMode',
    interfaces: [Enum]
  };
  function BlendMode$values() {
    return [BlendMode$DISABLED_getInstance(), BlendMode$BLEND_ADDITIVE_getInstance(), BlendMode$BLEND_MULTIPLY_ALPHA_getInstance(), BlendMode$BLEND_PREMULTIPLIED_ALPHA_getInstance()];
  }
  BlendMode.values = BlendMode$values;
  function BlendMode$valueOf(name) {
    switch (name) {
      case 'DISABLED':
        return BlendMode$DISABLED_getInstance();
      case 'BLEND_ADDITIVE':
        return BlendMode$BLEND_ADDITIVE_getInstance();
      case 'BLEND_MULTIPLY_ALPHA':
        return BlendMode$BLEND_MULTIPLY_ALPHA_getInstance();
      case 'BLEND_PREMULTIPLIED_ALPHA':
        return BlendMode$BLEND_PREMULTIPLIED_ALPHA_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.pipeline.BlendMode.' + name);
    }
  }
  BlendMode.valueOf_61zpoe$ = BlendMode$valueOf;
  function DepthCompareOp(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function DepthCompareOp_initFields() {
    DepthCompareOp_initFields = function () {
    };
    DepthCompareOp$DISABLED_instance = new DepthCompareOp('DISABLED', 0);
    DepthCompareOp$ALWAYS_instance = new DepthCompareOp('ALWAYS', 1);
    DepthCompareOp$LESS_instance = new DepthCompareOp('LESS', 2);
    DepthCompareOp$LESS_EQUAL_instance = new DepthCompareOp('LESS_EQUAL', 3);
    DepthCompareOp$GREATER_instance = new DepthCompareOp('GREATER', 4);
    DepthCompareOp$GREATER_EQUAL_instance = new DepthCompareOp('GREATER_EQUAL', 5);
  }
  var DepthCompareOp$DISABLED_instance;
  function DepthCompareOp$DISABLED_getInstance() {
    DepthCompareOp_initFields();
    return DepthCompareOp$DISABLED_instance;
  }
  var DepthCompareOp$ALWAYS_instance;
  function DepthCompareOp$ALWAYS_getInstance() {
    DepthCompareOp_initFields();
    return DepthCompareOp$ALWAYS_instance;
  }
  var DepthCompareOp$LESS_instance;
  function DepthCompareOp$LESS_getInstance() {
    DepthCompareOp_initFields();
    return DepthCompareOp$LESS_instance;
  }
  var DepthCompareOp$LESS_EQUAL_instance;
  function DepthCompareOp$LESS_EQUAL_getInstance() {
    DepthCompareOp_initFields();
    return DepthCompareOp$LESS_EQUAL_instance;
  }
  var DepthCompareOp$GREATER_instance;
  function DepthCompareOp$GREATER_getInstance() {
    DepthCompareOp_initFields();
    return DepthCompareOp$GREATER_instance;
  }
  var DepthCompareOp$GREATER_EQUAL_instance;
  function DepthCompareOp$GREATER_EQUAL_getInstance() {
    DepthCompareOp_initFields();
    return DepthCompareOp$GREATER_EQUAL_instance;
  }
  DepthCompareOp.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DepthCompareOp',
    interfaces: [Enum]
  };
  function DepthCompareOp$values() {
    return [DepthCompareOp$DISABLED_getInstance(), DepthCompareOp$ALWAYS_getInstance(), DepthCompareOp$LESS_getInstance(), DepthCompareOp$LESS_EQUAL_getInstance(), DepthCompareOp$GREATER_getInstance(), DepthCompareOp$GREATER_EQUAL_getInstance()];
  }
  DepthCompareOp.values = DepthCompareOp$values;
  function DepthCompareOp$valueOf(name) {
    switch (name) {
      case 'DISABLED':
        return DepthCompareOp$DISABLED_getInstance();
      case 'ALWAYS':
        return DepthCompareOp$ALWAYS_getInstance();
      case 'LESS':
        return DepthCompareOp$LESS_getInstance();
      case 'LESS_EQUAL':
        return DepthCompareOp$LESS_EQUAL_getInstance();
      case 'GREATER':
        return DepthCompareOp$GREATER_getInstance();
      case 'GREATER_EQUAL':
        return DepthCompareOp$GREATER_EQUAL_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.pipeline.DepthCompareOp.' + name);
    }
  }
  DepthCompareOp.valueOf_61zpoe$ = DepthCompareOp$valueOf;
  function CullMethod(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function CullMethod_initFields() {
    CullMethod_initFields = function () {
    };
    CullMethod$DEFAULT_instance = new CullMethod('DEFAULT', 0);
    CullMethod$CULL_BACK_FACES_instance = new CullMethod('CULL_BACK_FACES', 1);
    CullMethod$CULL_FRONT_FACES_instance = new CullMethod('CULL_FRONT_FACES', 2);
    CullMethod$NO_CULLING_instance = new CullMethod('NO_CULLING', 3);
  }
  var CullMethod$DEFAULT_instance;
  function CullMethod$DEFAULT_getInstance() {
    CullMethod_initFields();
    return CullMethod$DEFAULT_instance;
  }
  var CullMethod$CULL_BACK_FACES_instance;
  function CullMethod$CULL_BACK_FACES_getInstance() {
    CullMethod_initFields();
    return CullMethod$CULL_BACK_FACES_instance;
  }
  var CullMethod$CULL_FRONT_FACES_instance;
  function CullMethod$CULL_FRONT_FACES_getInstance() {
    CullMethod_initFields();
    return CullMethod$CULL_FRONT_FACES_instance;
  }
  var CullMethod$NO_CULLING_instance;
  function CullMethod$NO_CULLING_getInstance() {
    CullMethod_initFields();
    return CullMethod$NO_CULLING_instance;
  }
  CullMethod.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CullMethod',
    interfaces: [Enum]
  };
  function CullMethod$values() {
    return [CullMethod$DEFAULT_getInstance(), CullMethod$CULL_BACK_FACES_getInstance(), CullMethod$CULL_FRONT_FACES_getInstance(), CullMethod$NO_CULLING_getInstance()];
  }
  CullMethod.values = CullMethod$values;
  function CullMethod$valueOf(name) {
    switch (name) {
      case 'DEFAULT':
        return CullMethod$DEFAULT_getInstance();
      case 'CULL_BACK_FACES':
        return CullMethod$CULL_BACK_FACES_getInstance();
      case 'CULL_FRONT_FACES':
        return CullMethod$CULL_FRONT_FACES_getInstance();
      case 'NO_CULLING':
        return CullMethod$NO_CULLING_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.pipeline.CullMethod.' + name);
    }
  }
  CullMethod.valueOf_61zpoe$ = CullMethod$valueOf;
  function PushConstantRange(builder, longHash, pushConstants) {
    this.longHash = longHash;
    this.pushConstants = pushConstants;
    this.name = builder.name;
    this.instanceName = builder.instanceName;
    this.stages = copy_0(builder.stages);
    this.layout_0 = new Std140Layout(this.pushConstants);
    this.size = this.layout_0.size;
    this.buffer_0 = createMixedBuffer(this.size);
    this.onUpdate = builder.onUpdate;
  }
  PushConstantRange.prototype.toBuffer = function () {
    this.layout_0.putTo_l6oshk$(this.buffer_0);
    this.buffer_0.flip();
    return this.buffer_0;
  };
  function PushConstantRange$Builder() {
    this.name = 'PushConstants';
    this.instanceName = null;
    this.stages = LinkedHashSet_init();
    this.pushConstants = ArrayList_init_0();
    this.onUpdate = null;
  }
  PushConstantRange$Builder.prototype.unaryPlus_wq3w46$ = function ($receiver) {
    this.pushConstants.add_11rb$($receiver);
  };
  PushConstantRange$Builder.prototype.create = function () {
    var size = this.pushConstants.size;
    var list = ArrayList_init(size);
    for (var index = 0; index < size; index++) {
      list.add_11rb$(this.pushConstants.get_za3lpa$(index)());
    }
    var pushConstants = list;
    var $receiver = hashCode(this.name);
    var hash = {v: new ULong(Kotlin.Long.fromInt($receiver))};
    var tmp$;
    tmp$ = this.stages.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var $this = hash.v;
      var other = new ULong(Kotlin.Long.fromInt(71023));
      var tmp$_0 = new ULong($this.data.multiply(other.data));
      var $receiver_0 = element.hashCode();
      var other_0 = new ULong(Kotlin.Long.fromInt($receiver_0));
      hash.v = new ULong(tmp$_0.data.add(other_0.data));
    }
    var tmp$_1;
    tmp$_1 = pushConstants.iterator();
    while (tmp$_1.hasNext()) {
      var element_0 = tmp$_1.next();
      var $this_0 = hash.v;
      var other_1 = new ULong(Kotlin.Long.fromInt(71023));
      var tmp$_2 = new ULong($this_0.data.multiply(other_1.data));
      var $receiver_1 = Kotlin.getKClassFromExpression(element_0).hashCode();
      var other_2 = new ULong(Kotlin.Long.fromInt($receiver_1));
      hash.v = new ULong(tmp$_2.data.add(other_2.data));
      var $this_1 = hash.v;
      var other_3 = new ULong(Kotlin.Long.fromInt(71023));
      var tmp$_3 = new ULong($this_1.data.multiply(other_3.data));
      var $receiver_2 = hashCode(element_0.name);
      var other_4 = new ULong(Kotlin.Long.fromInt($receiver_2));
      hash.v = new ULong(tmp$_3.data.add(other_4.data));
    }
    return new PushConstantRange(this, hash.v, pushConstants);
  };
  PushConstantRange$Builder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Builder',
    interfaces: []
  };
  PushConstantRange.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PushConstantRange',
    interfaces: []
  };
  function RenderPass(drawNode) {
    this.drawNode = drawNode;
    this.name = null;
    this.type = RenderPass$Type$COLOR_getInstance();
    this.dependencies = ArrayList_init_0();
    this.viewport = new Viewport(0, 0, 0, 0);
    this.lighting = null;
    this.isUpdateDrawNode = true;
    var array = Array_0(1);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new Color(0.15, 0.15, 0.15, 1.0);
    }
    this.clearColors_ynhttt$_0 = array;
    this.clearDepth = true;
    this.drawQueue_mxdtqn$_0 = new DrawQueue(this);
    this.onBeforeCollectDrawCommands = ArrayList_init_0();
    this.onAfterCollectDrawCommands = ArrayList_init_0();
  }
  Object.defineProperty(RenderPass.prototype, 'clearColors', {
    get: function () {
      return this.clearColors_ynhttt$_0;
    }
  });
  Object.defineProperty(RenderPass.prototype, 'clearColor', {
    get: function () {
      return this.clearColors[0];
    },
    set: function (value) {
      this.clearColors[0] = value;
    }
  });
  Object.defineProperty(RenderPass.prototype, 'drawQueue', {
    get: function () {
      return this.drawQueue_mxdtqn$_0;
    },
    set: function (drawQueue) {
      this.drawQueue_mxdtqn$_0 = drawQueue;
    }
  });
  RenderPass.prototype.dependsOn_yqp8fe$ = function (renderPass) {
    this.dependencies.add_11rb$(renderPass);
  };
  RenderPass.prototype.update_aemszp$ = function (ctx) {
    if (this.isUpdateDrawNode) {
      this.drawNode.update_oco14p$(this, ctx);
    }};
  RenderPass.prototype.collectDrawCommands_aemszp$ = function (ctx) {
    this.beforeCollectDrawCommands_aemszp$(ctx);
    this.drawNode.collectDrawCommands_oco14p$(this, ctx);
    this.afterCollectDrawCommands_aemszp$(ctx);
  };
  RenderPass.prototype.beforeCollectDrawCommands_aemszp$ = function (ctx) {
    var tmp$;
    this.drawQueue.clear();
    tmp$ = this.onBeforeCollectDrawCommands;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.onBeforeCollectDrawCommands.get_za3lpa$(i)(ctx);
    }
    this.camera.updateCamera_fd1mc0$(ctx, this.viewport);
  };
  RenderPass.prototype.afterCollectDrawCommands_aemszp$ = function (ctx) {
    var tmp$;
    tmp$ = this.onAfterCollectDrawCommands;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.onAfterCollectDrawCommands.get_za3lpa$(i)(ctx);
    }
  };
  RenderPass.prototype.dispose_aemszp$ = function (ctx) {
  };
  function RenderPass$Type(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function RenderPass$Type_initFields() {
    RenderPass$Type_initFields = function () {
    };
    RenderPass$Type$COLOR_instance = new RenderPass$Type('COLOR', 0);
    RenderPass$Type$DEPTH_instance = new RenderPass$Type('DEPTH', 1);
  }
  var RenderPass$Type$COLOR_instance;
  function RenderPass$Type$COLOR_getInstance() {
    RenderPass$Type_initFields();
    return RenderPass$Type$COLOR_instance;
  }
  var RenderPass$Type$DEPTH_instance;
  function RenderPass$Type$DEPTH_getInstance() {
    RenderPass$Type_initFields();
    return RenderPass$Type$DEPTH_instance;
  }
  RenderPass$Type.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Type',
    interfaces: [Enum]
  };
  function RenderPass$Type$values() {
    return [RenderPass$Type$COLOR_getInstance(), RenderPass$Type$DEPTH_getInstance()];
  }
  RenderPass$Type.values = RenderPass$Type$values;
  function RenderPass$Type$valueOf(name) {
    switch (name) {
      case 'COLOR':
        return RenderPass$Type$COLOR_getInstance();
      case 'DEPTH':
        return RenderPass$Type$DEPTH_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.pipeline.RenderPass.Type.' + name);
    }
  }
  RenderPass$Type.valueOf_61zpoe$ = RenderPass$Type$valueOf;
  RenderPass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RenderPass',
    interfaces: []
  };
  function ScreenRenderPass(scene) {
    RenderPass.call(this, scene);
    this.scene = scene;
    this.useWindowViewport = true;
    this.lighting = this.scene.lighting;
  }
  Object.defineProperty(ScreenRenderPass.prototype, 'camera', {
    get: function () {
      return this.scene.camera;
    }
  });
  ScreenRenderPass.prototype.collectDrawCommands_aemszp$ = function (ctx) {
    if (this.useWindowViewport) {
      ctx.getWindowViewport_ahq5yh$(this.viewport);
    }RenderPass.prototype.collectDrawCommands_aemszp$.call(this, ctx);
  };
  ScreenRenderPass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ScreenRenderPass',
    interfaces: [RenderPass]
  };
  function CodeGenerator() {
  }
  CodeGenerator.prototype.sampleTexture2d_buzeal$ = function (texName, texCoords, lod, callback$default) {
    if (lod === void 0)
      lod = null;
    return callback$default ? callback$default(texName, texCoords, lod) : this.sampleTexture2d_buzeal$$default(texName, texCoords, lod);
  };
  CodeGenerator.prototype.sampleTextureCube_buzeal$ = function (texName, texCoords, lod, callback$default) {
    if (lod === void 0)
      lod = null;
    return callback$default ? callback$default(texName, texCoords, lod) : this.sampleTextureCube_buzeal$$default(texName, texCoords, lod);
  };
  function CodeGenerator$ClipSpaceOrientation(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function CodeGenerator$ClipSpaceOrientation_initFields() {
    CodeGenerator$ClipSpaceOrientation_initFields = function () {
    };
    CodeGenerator$ClipSpaceOrientation$Y_UP_instance = new CodeGenerator$ClipSpaceOrientation('Y_UP', 0);
    CodeGenerator$ClipSpaceOrientation$Y_DOWN_instance = new CodeGenerator$ClipSpaceOrientation('Y_DOWN', 1);
  }
  var CodeGenerator$ClipSpaceOrientation$Y_UP_instance;
  function CodeGenerator$ClipSpaceOrientation$Y_UP_getInstance() {
    CodeGenerator$ClipSpaceOrientation_initFields();
    return CodeGenerator$ClipSpaceOrientation$Y_UP_instance;
  }
  var CodeGenerator$ClipSpaceOrientation$Y_DOWN_instance;
  function CodeGenerator$ClipSpaceOrientation$Y_DOWN_getInstance() {
    CodeGenerator$ClipSpaceOrientation_initFields();
    return CodeGenerator$ClipSpaceOrientation$Y_DOWN_instance;
  }
  CodeGenerator$ClipSpaceOrientation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ClipSpaceOrientation',
    interfaces: [Enum]
  };
  function CodeGenerator$ClipSpaceOrientation$values() {
    return [CodeGenerator$ClipSpaceOrientation$Y_UP_getInstance(), CodeGenerator$ClipSpaceOrientation$Y_DOWN_getInstance()];
  }
  CodeGenerator$ClipSpaceOrientation.values = CodeGenerator$ClipSpaceOrientation$values;
  function CodeGenerator$ClipSpaceOrientation$valueOf(name) {
    switch (name) {
      case 'Y_UP':
        return CodeGenerator$ClipSpaceOrientation$Y_UP_getInstance();
      case 'Y_DOWN':
        return CodeGenerator$ClipSpaceOrientation$Y_DOWN_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.pipeline.shadermodel.CodeGenerator.ClipSpaceOrientation.' + name);
    }
  }
  CodeGenerator$ClipSpaceOrientation.valueOf_61zpoe$ = CodeGenerator$ClipSpaceOrientation$valueOf;
  CodeGenerator.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'CodeGenerator',
    interfaces: []
  };
  function ColorAlphaNode(graph) {
    ShaderNode.call(this, 'colorAlphaNode_' + graph.nextNodeId, graph);
    this.inColor = new ShaderNodeIoVar(new ModelVar4fConst(Color$Companion_getInstance().MAGENTA), null);
    this.inAlpha = new ShaderNodeIoVar(new ModelVar1fConst(1.0), null);
    this.outAlphaColor = new ShaderNodeIoVar(new ModelVar4f(this.name + '_outColor'), this);
  }
  ColorAlphaNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$([this.inColor, this.inAlpha]);
  };
  ColorAlphaNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$('\n' + '            ' + this.outAlphaColor.declare() + ' = vec4(' + this.inColor.ref3f() + ', ' + this.inColor.ref4f() + '.a * ' + this.inAlpha.ref1f() + ');' + '\n' + '            ');
  };
  ColorAlphaNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ColorAlphaNode',
    interfaces: [ShaderNode]
  };
  function PremultiplyColorNode(graph) {
    ShaderNode.call(this, 'colorPreMult_' + graph.nextNodeId, graph);
    this.inColor = new ShaderNodeIoVar(new ModelVar4fConst(Color$Companion_getInstance().MAGENTA));
    this.outColor = new ShaderNodeIoVar(new ModelVar4f('preMultColor_' + this.nodeId), this);
  }
  PremultiplyColorNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_7qvs0d$(this.inColor);
  };
  PremultiplyColorNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$(this.outColor.declare() + ' = vec4(' + this.inColor.ref3f() + ' * ' + this.inColor.ref4f() + '.a, ' + this.inColor.ref4f() + '.a);');
  };
  PremultiplyColorNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PremultiplyColorNode',
    interfaces: [ShaderNode]
  };
  function GammaNode(graph) {
    ShaderNode.call(this, 'Pre-Multiply Color', graph);
    this.inColor = new ShaderNodeIoVar(new ModelVar4fConst(Color$Companion_getInstance().MAGENTA));
    this.inGamma = new ShaderNodeIoVar(new ModelVar1fConst(1.0 / 2.2));
    this.outColor = new ShaderNodeIoVar(new ModelVar4f('preMultColor_' + this.nodeId), this);
  }
  GammaNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$([this.inColor, this.inGamma]);
  };
  GammaNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$(this.outColor.declare() + ' = vec4(pow(' + this.inColor.ref3f() + ', vec3(1.0/' + this.inGamma.ref1f() + ')), ' + this.inColor.ref4f() + '.a);');
  };
  GammaNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GammaNode',
    interfaces: [ShaderNode]
  };
  function HdrToLdrNode(graph) {
    ShaderNode.call(this, 'hdrToLdr_' + graph.nextNodeId, graph);
    this.inColor = new ShaderNodeIoVar(new ModelVar4fConst(Color$Companion_getInstance().MAGENTA));
    this.inGamma = new ShaderNodeIoVar(new ModelVar1fConst(2.2));
    this.outColor = new ShaderNodeIoVar(new ModelVar4f(this.name + '_outColor'), this);
  }
  HdrToLdrNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$([this.inColor, this.inGamma]);
  };
  HdrToLdrNode.prototype.generateUncharted2_0 = function (generator) {
    generator.appendFunction_puj7f4$('uncharted2', '\n            vec3 uncharted2Tonemap_func(vec3 x) {\n                float A = 0.15;     // shoulder strength\n                float B = 0.50;     // linear strength\n                float C = 0.10;     // linear angle\n                float D = 0.20;     // toe strength\n                float E = 0.02;     // toe numerator\n                float F = 0.30;     // toe denominator  --> E/F = toe angle\n                return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\n            }\n            \n            vec3 uncharted2Tonemap(vec3 rgbLinear) {\n                float W = 11.2;     // linear white point value\n                float ExposureBias = 2.0;\n                vec3 curr = uncharted2Tonemap_func(ExposureBias * rgbLinear);\n                vec3 whiteScale = 1.0 / uncharted2Tonemap_func(vec3(W));\n                return curr * whiteScale;\n            }\n        ');
    generator.appendMain_61zpoe$('\n' + '            vec3 ' + this.name + '_color = uncharted2Tonemap(' + this.inColor.ref3f() + ');' + '\n' + '            ' + this.outColor.declare() + ' = vec4(pow(' + this.name + '_color, vec3(1.0/' + this.inGamma.ref1f() + ')), ' + this.inColor.ref4f() + '.a);' + '\n' + '        ');
  };
  HdrToLdrNode.prototype.generateReinhard_0 = function (generator) {
    generator.appendMain_61zpoe$('\n' + '            vec3 ' + this.name + '_color = ' + this.inColor.ref3f() + ' / (' + this.inColor.ref3f() + ' + vec3(1.0));' + '\n' + '            ' + this.outColor.declare() + ' = vec4(pow(' + this.name + '_color, vec3(1.0/' + this.inGamma.ref1f() + ')), ' + this.inColor.ref4f() + '.a);' + '\n' + '        ');
  };
  HdrToLdrNode.prototype.generateJimHejlRichardBurgessDawson_0 = function (generator) {
    generator.appendMain_61zpoe$('\n' + '            vec3 ' + this.name + '_color = max(vec3(0), ' + this.inColor.ref3f() + ' - 0.004);' + '\n' + '            ' + this.outColor.declare() + ' = vec4((' + this.name + '_color * (6.2 * ' + this.name + '_color + 0.5)) / (' + this.name + '_color * (6.2 * ' + this.name + '_color + 1.7) + 0.06), 1.0);' + '\n' + '        ');
  };
  HdrToLdrNode.prototype.generateCode_626509$ = function (generator) {
    this.generateUncharted2_0(generator);
  };
  HdrToLdrNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HdrToLdrNode',
    interfaces: [ShaderNode]
  };
  function FragmentColorOutNode(graph, channels) {
    if (channels === void 0)
      channels = 1;
    ShaderNode.call(this, 'fragmentColorOut', graph, ShaderStage$FRAGMENT_SHADER_getInstance().mask);
    this.channels = channels;
    this.alpha = null;
    var array = Array_0(this.channels);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new ShaderNodeIoVar(new ModelVar4fConst(Color$Companion_getInstance().MAGENTA));
    }
    this.inColors = array;
  }
  FragmentColorOutNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    var tmp$;
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$(this.inColors.slice());
    if ((tmp$ = this.alpha) != null) {
      this.dependsOn_7qvs0d$(tmp$);
    }};
  FragmentColorOutNode.prototype.generateCode_626509$ = function (generator) {
    var tmp$, tmp$_0;
    var outCode = StringBuilder_init();
    tmp$ = this.channels;
    for (var i = 0; i < tmp$; i++) {
      outCode.append_61zpoe$('layout(location=' + i + ') out vec4 fragOutColor_' + i + ';' + '\n');
    }
    generator.appendFunction_puj7f4$('fragOut', outCode.toString());
    tmp$_0 = this.channels;
    for (var i_0 = 0; i_0 < tmp$_0; i_0++) {
      var a = this.alpha;
      if (a != null) {
        generator.appendMain_61zpoe$('fragOutColor_' + i_0 + ' = vec4(' + this.inColors[i_0].ref3f() + ', ' + a.ref1f() + ');');
      } else {
        generator.appendMain_61zpoe$('fragOutColor_' + i_0 + ' = ' + this.inColors[i_0].ref4f() + ';');
      }
    }
  };
  FragmentColorOutNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FragmentColorOutNode',
    interfaces: [ShaderNode]
  };
  function FragmentDepthOutNode(graph) {
    ShaderNode.call(this, 'fragmentDepthOut', graph, ShaderStage$FRAGMENT_SHADER_getInstance().mask);
    this.inDepth = new ShaderNodeIoVar(new ModelVar1fConst(0.5));
  }
  FragmentDepthOutNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_7qvs0d$(this.inDepth);
  };
  FragmentDepthOutNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendFunction_puj7f4$('out_fragDepth', 'out float gl_FragDepth;\n');
    generator.appendMain_61zpoe$('gl_FragDepth = ' + this.inDepth.ref1f() + ';');
  };
  FragmentDepthOutNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FragmentDepthOutNode',
    interfaces: [ShaderNode]
  };
  function LightNode(name, shaderGraph) {
    ShaderNode.call(this, name, shaderGraph);
  }
  LightNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LightNode',
    interfaces: [ShaderNode]
  };
  function MultiLightNode(shaderGraph, maxLights) {
    if (maxLights === void 0)
      maxLights = 4;
    LightNode.call(this, 'lightNd_' + shaderGraph.nextNodeId, shaderGraph);
    this.maxLights = maxLights;
    this.uLightCnt_0 = new Uniform1i('lightCount');
    this.uPositions_0 = new Uniform4fv('lightPositions', this.maxLights);
    this.uColors_0 = new Uniform4fv('lightColors', this.maxLights);
    this.uDirections_0 = new Uniform4fv('lightDirections', this.maxLights);
    var array = Array_0(this.maxLights);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new ShaderNodeIoVar(new ModelVar1fConst(1.0));
    }
    this.inShaodwFacs = array;
    this.outLightCount_ig9mtx$_0 = new ShaderNodeIoVar(new ModelVar1i(this.uLightCnt_0.name), this);
    this.isReducedSoi = false;
  }
  Object.defineProperty(MultiLightNode.prototype, 'outLightCount', {
    get: function () {
      return this.outLightCount_ig9mtx$_0;
    }
  });
  function MultiLightNode$setup$lambda$lambda$lambda(this$MultiLightNode) {
    return function () {
      return this$MultiLightNode.uPositions_0;
    };
  }
  function MultiLightNode$setup$lambda$lambda$lambda_0(this$MultiLightNode) {
    return function () {
      return this$MultiLightNode.uColors_0;
    };
  }
  function MultiLightNode$setup$lambda$lambda$lambda_1(this$MultiLightNode) {
    return function () {
      return this$MultiLightNode.uDirections_0;
    };
  }
  function MultiLightNode$setup$lambda$lambda$lambda_2(this$MultiLightNode) {
    return function () {
      return this$MultiLightNode.uLightCnt_0;
    };
  }
  function MultiLightNode$setup$lambda$lambda$lambda_3(this$MultiLightNode) {
    return function (f, cmd) {
      this$MultiLightNode.encodeLightSetup_0(cmd);
      return Unit;
    };
  }
  function MultiLightNode$setup$lambda$lambda(this$MultiLightNode) {
    return function ($receiver) {
      $receiver.unaryPlus_wq3w46$(MultiLightNode$setup$lambda$lambda$lambda(this$MultiLightNode));
      $receiver.unaryPlus_wq3w46$(MultiLightNode$setup$lambda$lambda$lambda_0(this$MultiLightNode));
      $receiver.unaryPlus_wq3w46$(MultiLightNode$setup$lambda$lambda$lambda_1(this$MultiLightNode));
      $receiver.unaryPlus_wq3w46$(MultiLightNode$setup$lambda$lambda$lambda_2(this$MultiLightNode));
      $receiver.onUpdate = MultiLightNode$setup$lambda$lambda$lambda_3(this$MultiLightNode);
      return Unit;
    };
  }
  MultiLightNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    LightNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$(this.inShaodwFacs.slice());
    shaderGraph.descriptorSet.uniformBuffer_2ydyu8$(this.name, [shaderGraph.stage], MultiLightNode$setup$lambda$lambda(this));
  };
  MultiLightNode.prototype.encodeLightSetup_0 = function (cmd) {
    var tmp$;
    var lighting = cmd.renderPass.lighting;
    if (lighting != null) {
      var tmp$_0 = this.uLightCnt_0;
      var a = lighting.lights.size;
      var b = this.maxLights;
      tmp$_0.value = Math_0.min(a, b);
      tmp$ = this.uLightCnt_0.value;
      for (var i = 0; i < tmp$; i++) {
        var light = lighting.lights.get_za3lpa$(i);
        this.uColors_0.value[i].set_czzhhz$(light.color);
        this.uPositions_0.value[i].set_2qa7tb$(light.position, light.type.encoded);
        var tmp$_1 = this.uDirections_0.value[i];
        var tmp$_2 = light.direction;
        var x = light.spotAngle / 2 * package$math.DEG_2_RAD;
        tmp$_1.set_2qa7tb$(tmp$_2, Math_0.cos(x));
      }
    } else {
      this.uLightCnt_0.value = 0;
    }
  };
  MultiLightNode.prototype.generateCode_626509$ = function (generator) {
    var tmp$;
    generator.appendFunction_puj7f4$('light_getFragToLight', '\n' + '            vec3 light_getFragToLight(int idx, vec3 fragPos) {' + '\n' + '                if (' + this.uPositions_0.name + '[idx].w == float(' + Light$Type$DIRECTIONAL_getInstance().encoded + ')) {' + '\n' + '                    return -' + this.uDirections_0.name + '[idx].xyz;' + '\n' + '                }' + '\n' + '                // same for point and spot lights' + '\n' + '                return ' + this.uPositions_0.name + '[idx].xyz - fragPos;' + '\n' + '            }' + '\n' + '            ');
    if (this.isReducedSoi) {
      tmp$ = '\n                float powerSqrt = sqrt(power);\n                float strength = clamp(power / (1.0 + dist * dist) * (powerSqrt - dist) / powerSqrt, 0.0, power);\n            ';
    } else {
      tmp$ = 'float strength = power / (1.0 + dist * dist);';
    }
    var strength = tmp$;
    generator.appendFunction_puj7f4$('light_getRadiance', '\n' + '            vec3 light_getRadiance(int idx, vec3 fragToLight, float innerAngle) {' + '\n' + '                if (' + this.uPositions_0.name + '[idx].w == float(' + Light$Type$DIRECTIONAL_getInstance().encoded + ')) {' + '\n' + '                    return ' + this.uColors_0.name + '[idx].rgb * ' + this.uColors_0.name + '[idx].w;' + '\n' + '                }' + '\n' + '                float dist = length(fragToLight);' + '\n' + '                float power = ' + this.uColors_0.name + '[idx].w;' + '\n' + '                ' + strength + '\n' + '                if (' + this.uPositions_0.name + '[idx].w == float(' + Light$Type$POINT_getInstance().encoded + ')) {' + '\n' + '                    return ' + this.uColors_0.name + '[idx].rgb * strength;' + '\n' + '                } else {' + '\n' + '                    // spot light' + '\n' + '                    vec3 lightDir = -normalize(fragToLight);' + '\n' + '                    float spotAng = ' + this.uDirections_0.name + '[idx].w;' + '\n' + '                    float innerAng = spotAng + (1.0 - spotAng) * (1.0 - innerAngle);' + '\n' + '                    float ang = dot(lightDir, ' + this.uDirections_0.name + '[idx].xyz);' + '\n' + '                    float angVal = cos(clamp((innerAng - ang) / (innerAng - spotAng), 0.0, 1.0) * ' + math.PI + ') * 0.5 + 0.5;' + '\n' + '                    return ' + this.uColors_0.name + '[idx].rgb * strength * angVal;' + '\n' + '                }' + '\n' + '            }' + '\n' + '            ');
    var $receiver = until(0, this.maxLights);
    var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
    var tmp$_0;
    tmp$_0 = $receiver.iterator();
    while (tmp$_0.hasNext()) {
      var item = tmp$_0.next();
      destination.add_11rb$(this.inShaodwFacs[item].ref1f());
    }
    var facs = joinToString(destination, ', ');
    generator.appendMain_61zpoe$('float[] ' + this.name + '_shadowFacs = float[] (' + facs + ');');
  };
  MultiLightNode.prototype.callVec3GetFragToLight_puj7f4$ = function (idx, fragPos) {
    return 'light_getFragToLight(' + idx + ', ' + fragPos + ')';
  };
  MultiLightNode.prototype.callVec3GetRadiance_6hosri$ = function (idx, fragToLight, innerAngle) {
    return '(light_getRadiance(' + idx + ', ' + fragToLight + ', ' + innerAngle + ') * ' + this.name + '_shadowFacs[' + idx + '])';
  };
  MultiLightNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MultiLightNode',
    interfaces: [LightNode]
  };
  function SingleLightUniformDataNode(shaderGraph) {
    ShaderNode.call(this, 'lightUniformDataNd_' + shaderGraph.nextNodeId, shaderGraph);
    this.light = null;
    this.uPosition_0 = new Uniform4f('u' + this.name + '_pos');
    this.uColor_0 = new Uniform4f('u' + this.name + '_color');
    this.uDirection_0 = new Uniform4f('u' + this.name + '_dir');
    this.outLightPos = new ShaderNodeIoVar(new ModelVar4f(this.uPosition_0.name), this);
    this.outLightColor = new ShaderNodeIoVar(new ModelVar4f(this.uColor_0.name), this);
    this.outLightDir = new ShaderNodeIoVar(new ModelVar4f(this.uDirection_0.name), this);
  }
  function SingleLightUniformDataNode$setup$lambda$lambda$lambda(this$SingleLightUniformDataNode) {
    return function () {
      return this$SingleLightUniformDataNode.uPosition_0;
    };
  }
  function SingleLightUniformDataNode$setup$lambda$lambda$lambda_0(this$SingleLightUniformDataNode) {
    return function () {
      return this$SingleLightUniformDataNode.uColor_0;
    };
  }
  function SingleLightUniformDataNode$setup$lambda$lambda$lambda_1(this$SingleLightUniformDataNode) {
    return function () {
      return this$SingleLightUniformDataNode.uDirection_0;
    };
  }
  function SingleLightUniformDataNode$setup$lambda$lambda$lambda_2(this$SingleLightUniformDataNode) {
    return function (f, f_0) {
      this$SingleLightUniformDataNode.encodeLightSetup_0();
      return Unit;
    };
  }
  function SingleLightUniformDataNode$setup$lambda$lambda(this$SingleLightUniformDataNode) {
    return function ($receiver) {
      $receiver.unaryPlus_wq3w46$(SingleLightUniformDataNode$setup$lambda$lambda$lambda(this$SingleLightUniformDataNode));
      $receiver.unaryPlus_wq3w46$(SingleLightUniformDataNode$setup$lambda$lambda$lambda_0(this$SingleLightUniformDataNode));
      $receiver.unaryPlus_wq3w46$(SingleLightUniformDataNode$setup$lambda$lambda$lambda_1(this$SingleLightUniformDataNode));
      $receiver.onUpdate = SingleLightUniformDataNode$setup$lambda$lambda$lambda_2(this$SingleLightUniformDataNode);
      return Unit;
    };
  }
  SingleLightUniformDataNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    shaderGraph.descriptorSet.uniformBuffer_2ydyu8$(this.name, [shaderGraph.stage], SingleLightUniformDataNode$setup$lambda$lambda(this));
  };
  SingleLightUniformDataNode.prototype.encodeLightSetup_0 = function () {
    var lgt = this.light;
    if (lgt != null) {
      this.uColor_0.value.set_czzhhz$(lgt.color);
      this.uPosition_0.value.set_2qa7tb$(lgt.position, lgt.type.encoded);
      var tmp$ = this.uDirection_0.value;
      var tmp$_0 = lgt.direction;
      var x = lgt.spotAngle / 2 * package$math.DEG_2_RAD;
      tmp$.set_2qa7tb$(tmp$_0, Math_0.cos(x));
    } else {
      this.uColor_0.value.set_czzhhz$(Vec4f$Companion_getInstance().ZERO);
    }
  };
  SingleLightUniformDataNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SingleLightUniformDataNode',
    interfaces: [ShaderNode]
  };
  function SingleLightNode(shaderGraph) {
    LightNode.call(this, 'lightNd_' + shaderGraph.nextNodeId, shaderGraph);
    this.inLightPos = new ShaderNodeIoVar(new ModelVar4fConst(Vec4f$Companion_getInstance().ZERO));
    this.inLightColor = new ShaderNodeIoVar(new ModelVar4fConst(Vec4f$Companion_getInstance().ZERO));
    this.inLightDir = new ShaderNodeIoVar(new ModelVar4fConst(Vec4f$Companion_getInstance().ZERO));
    this.inShaodwFac = new ShaderNodeIoVar(new ModelVar1fConst(1.0));
    this.outLightCount_9pb9nm$_0 = new ShaderNodeIoVar(new ModelVar1iConst(1));
    this.isReducedSoi = false;
  }
  Object.defineProperty(SingleLightNode.prototype, 'outLightCount', {
    get: function () {
      return this.outLightCount_9pb9nm$_0;
    }
  });
  SingleLightNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    LightNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$([this.inShaodwFac, this.inLightPos, this.inLightDir, this.inLightColor]);
  };
  SingleLightNode.prototype.generateCode_626509$ = function (generator) {
    var tmp$;
    generator.appendFunction_puj7f4$(this.name + '_getFragToLight', '\n' + '            vec3 ' + this.name + '_getFragToLight(vec3 fragPos, vec4 lightPos, vec4 lightDir) {' + '\n' + '                if (lightPos.w == float(' + Light$Type$DIRECTIONAL_getInstance().encoded + ')) {' + '\n' + '                    return -lightDir.xyz;' + '\n' + '                }' + '\n' + '                // same for point and spot lights' + '\n' + '                return lightPos.xyz - fragPos;' + '\n' + '            }' + '\n' + '            ');
    if (this.isReducedSoi) {
      tmp$ = '\n                float powerSqrt = sqrt(power);\n                float strength = clamp(power / (1.0 + dist * dist) * (powerSqrt - dist) / powerSqrt, 0.0, power);\n            ';
    } else {
      tmp$ = 'float strength = power / (1.0 + dist * dist);';
    }
    var strength = tmp$;
    generator.appendFunction_puj7f4$(this.name + '_getRadiance', '\n' + '            vec3 ' + this.name + '_getRadiance(vec3 fragToLight, vec4 lightPos, vec4 lightColor, vec4 lightDir, float innerAngle) {' + '\n' + '                if (lightPos.w == float(' + Light$Type$DIRECTIONAL_getInstance().encoded + ')) {' + '\n' + '                    return lightColor.rgb * lightColor.w;' + '\n' + '                }' + '\n' + '                float dist = length(fragToLight);' + '\n' + '                float power = lightColor.w;' + '\n' + '                ' + strength + '\n' + '                if (lightPos.w == float(' + Light$Type$POINT_getInstance().encoded + ')) {' + '\n' + '                    return lightColor.rgb * strength;' + '\n' + '                } else {' + '\n' + '                    // spot light' + '\n' + '                    vec3 negFtl = -normalize(fragToLight);' + '\n' + '                    float spotAng = lightDir.w;' + '\n' + '                    float innerAng = spotAng + (1.0 - spotAng) * (1.0 - innerAngle);' + '\n' + '                    float ang = dot(negFtl, lightDir.xyz);' + '\n' + '                    float angVal = cos(clamp((innerAng - ang) / (innerAng - spotAng), 0.0, 1.0) * ' + math.PI + ') * 0.5 + 0.5;' + '\n' + '                    return lightColor.rgb * strength * angVal;' + '\n' + '                }' + '\n' + '            }' + '\n' + '            ');
  };
  SingleLightNode.prototype.callVec3GetFragToLight_puj7f4$ = function (idx, fragPos) {
    return this.name + '_getFragToLight(' + fragPos + ', ' + this.inLightPos.ref4f() + ', ' + this.inLightDir.ref4f() + ')';
  };
  SingleLightNode.prototype.callVec3GetRadiance_6hosri$ = function (idx, fragToLight, innerAngle) {
    return '(' + this.name + '_getRadiance(' + fragToLight + ', ' + this.inLightPos.ref4f() + ', ' + this.inLightColor.ref4f() + ', ' + this.inLightDir.ref4f() + ', ' + innerAngle + ') * ' + this.inShaodwFac.ref1f() + ')';
  };
  SingleLightNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SingleLightNode',
    interfaces: [LightNode]
  };
  function UnlitMaterialNode(graph) {
    ShaderNode.call(this, 'Unlit Material', graph, ShaderStage$FRAGMENT_SHADER_getInstance().mask);
    this.inColor = new ShaderNodeIoVar(new ModelVar4fConst(Color$Companion_getInstance().MAGENTA));
    this.outColor = new ShaderNodeIoVar(new ModelVar4f('unlitMat_outColor'), this);
  }
  UnlitMaterialNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_7qvs0d$(this.inColor);
  };
  UnlitMaterialNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$(this.outColor.declare() + ' = vec4(' + this.inColor.ref3f() + ' * ' + this.inColor.ref4f() + '.a, ' + this.inColor.ref4f() + '.a);');
  };
  UnlitMaterialNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UnlitMaterialNode',
    interfaces: [ShaderNode]
  };
  function PhongMaterialNode(lightNode, graph) {
    ShaderNode.call(this, 'Phong Material', graph, ShaderStage$FRAGMENT_SHADER_getInstance().mask);
    this.lightNode = lightNode;
    this.inAlbedo = new ShaderNodeIoVar(new ModelVar4fConst(Color$Companion_getInstance().MAGENTA));
    this.inNormal = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().Z_AXIS));
    this.inFragPos = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().ZERO));
    this.inCamPos = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().ZERO));
    this.inSpotInnerAngle = new ShaderNodeIoVar(new ModelVar1fConst(0.8));
    this.inAmbient = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f_init(0.22)));
    this.inShininess = new ShaderNodeIoVar(new ModelVar1fConst(20.0));
    this.inSpecularIntensity = new ShaderNodeIoVar(new ModelVar1fConst(1.0));
    this.outColor = new ShaderNodeIoVar(new ModelVar4f('phongMat_outColor'), this);
    this.flipBacksideNormals = false;
  }
  PhongMaterialNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$([this.inAlbedo, this.inNormal, this.inFragPos, this.inCamPos]);
    this.dependsOn_lhtstx$(this.lightNode);
  };
  PhongMaterialNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$('\n' + '            vec3 phongMat_v = normalize(' + this.inFragPos.ref3f() + ' - ' + this.inCamPos.ref3f() + ');' + '\n' + '            vec3 phongMat_n = normalize(' + this.inNormal.ref3f() + ');' + '\n' + '            ' + '\n' + '            vec3 phongMat_ambient = ' + this.inAlbedo.ref3f() + ' * ' + this.inAmbient.ref3f() + ';' + '\n' + '            vec3 phongMat_diffuse = vec3(0);' + '\n' + '            vec3 phongMat_specular = vec3(0);' + '\n' + '            for (int i = 0; i < ' + this.lightNode.outLightCount.name + '; i++) {' + '\n' + '                vec3 phongMat_l = ' + this.lightNode.callVec3GetFragToLight_puj7f4$('i', this.inFragPos.ref3f()) + ';' + '\n' + '                vec3 radiance = ' + this.lightNode.callVec3GetRadiance_6hosri$('i', 'phongMat_l', this.inSpotInnerAngle.ref1f()) + ';' + '\n' + '                phongMat_l = normalize(phongMat_l);' + '\n' + '                ' + '\n' + '                ' + (this.flipBacksideNormals ? 'if (dot(phongMat_n, phongMat_l) < 0.0) { phongMat_n *= -1.0; }' : '') + '\n' + '        ' + '\n' + '                float phongMat_cosTheta = clamp(dot(phongMat_n, phongMat_l), 0.0, 1.0);' + '\n' + '                vec3 phongMat_r = reflect(phongMat_l, phongMat_n);' + '\n' + '                float phongMat_cosAlpha = clamp(dot(phongMat_v, phongMat_r), 0.0, 1.0);' + '\n' + '                ' + '\n' + '                phongMat_diffuse += ' + this.inAlbedo.ref4f() + '.rgb * radiance * phongMat_cosTheta;' + '\n' + '                phongMat_specular += ' + this.inSpecularIntensity.ref1f() + ' * radiance *' + '\n' + '                        pow(phongMat_cosAlpha, ' + this.inShininess.ref1f() + ') * ' + this.inAlbedo.ref4f() + '.a;' + '\n' + '            } ' + '\n' + '            ' + '\n' + '            vec3 phongMat_color = phongMat_ambient + phongMat_diffuse + phongMat_specular;' + '\n' + '            ' + this.outColor.declare() + ' = vec4(phongMat_color * ' + this.inAlbedo.ref4f() + '.a, ' + this.inAlbedo.ref4f() + '.a);' + '\n' + '            ');
  };
  PhongMaterialNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PhongMaterialNode',
    interfaces: [ShaderNode]
  };
  function PbrMaterialNode(lightNode, reflectionMap, brdfLut, graph) {
    ShaderNode.call(this, 'PBR IBL Material', graph, ShaderStage$FRAGMENT_SHADER_getInstance().mask);
    this.lightNode = lightNode;
    this.reflectionMap = reflectionMap;
    this.brdfLut = brdfLut;
    this.inAlbedo = new ShaderNodeIoVar(new ModelVar4fConst(Color$Companion_getInstance().MAGENTA));
    this.inNormal = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().Z_AXIS));
    this.inFragPos = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().ZERO));
    this.inCamPos = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().ZERO));
    this.inSpotInnerAngle = new ShaderNodeIoVar(new ModelVar1fConst(0.8));
    this.inMetallic = new ShaderNodeIoVar(new ModelVar1fConst(0.0));
    this.inRoughness = new ShaderNodeIoVar(new ModelVar1fConst(0.1));
    this.inAmbientOccl = new ShaderNodeIoVar(new ModelVar1fConst(1.0));
    this.inIrradiance = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f_init(0.03)));
    this.outColor = new ShaderNodeIoVar(new ModelVar4f('pbrMat_outColor'), this);
    this.flipBacksideNormals = false;
  }
  PbrMaterialNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$([this.inAlbedo, this.inNormal, this.inFragPos, this.inCamPos, this.inIrradiance, this.inAmbientOccl]);
    this.dependsOn_lhtstx$(this.lightNode);
    this.dependsOn_lhtstx$(this.reflectionMap);
    this.dependsOn_lhtstx$(this.brdfLut);
  };
  PbrMaterialNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendFunction_puj7f4$('fresnelSchlick', '\n            vec3 fresnelSchlick(float cosTheta, vec3 F0) {\n                return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n            }\n        ');
    generator.appendFunction_puj7f4$('fresnelSchlickRoughness', '\n            vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {\n                return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);\n            }\n        ');
    generator.appendFunction_puj7f4$('DistributionGGX', '\n            float DistributionGGX(vec3 N, vec3 H, float roughness) {\n                float a = roughness*roughness;\n                float a2 = a*a;\n                float NdotH = max(dot(N, H), 0.0);\n                float NdotH2 = NdotH*NdotH;\n            \t\n                float num = a2;\n                float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n                denom = 3.141592653589793 * denom * denom;\n            \t\n                return num / denom;\n            }\n        ');
    generator.appendFunction_puj7f4$('GeometrySchlickGGX', '\n            float GeometrySchlickGGX(float NdotV, float roughness) {\n                float r = (roughness + 1.0);\n                float k = (r*r) / 8.0;\n                \n                float num   = NdotV;\n                float denom = NdotV * (1.0 - k) + k;\n                \n                return num / denom;\n            }\n        ');
    generator.appendFunction_puj7f4$('GeometrySmith', '\n            float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {\n                float NdotV = max(dot(N, V), 0.0);\n                float NdotL = max(dot(N, L), 0.0);\n                float ggx2  = GeometrySchlickGGX(NdotV, roughness);\n                float ggx1  = GeometrySchlickGGX(NdotL, roughness);\n                \n                return ggx1 * ggx2;\n            }\n        ');
    generator.appendMain_61zpoe$('\n' + '            vec3 albedo = ' + this.inAlbedo.ref3f() + ';' + '\n' + '            vec3 V = normalize(' + this.inCamPos.ref3f() + ' - ' + this.inFragPos.ref3f() + ');' + '\n' + '            vec3 N = normalize(' + this.inNormal.ref3f() + ');' + '\n' + '            ' + '\n' + '            float rough = clamp(' + this.inRoughness.ref1f() + ', 0.05, 1.0);' + '\n' + '            float metal = ' + this.inMetallic.ref1f() + ';' + '\n' + '            ' + '\n' + '            vec3 F0 = vec3(0.04); ' + '\n' + '            F0 = mix(F0, albedo, metal);' + '\n' + '    ' + '\n' + '            vec3 Lo = vec3(0.0);' + '\n' + '            for (int i = 0; i < ' + this.lightNode.outLightCount + '; i++) {' + '\n' + '                // calculate per-light radiance' + '\n' + '                vec3 fragToLight = ' + this.lightNode.callVec3GetFragToLight_puj7f4$('i', this.inFragPos.ref3f()) + ';' + '\n' + '                vec3 L = normalize(fragToLight);' + '\n' + '                vec3 H = normalize(V + L);' + '\n' + '                vec3 radiance = ' + this.lightNode.callVec3GetRadiance_6hosri$('i', 'fragToLight', this.inSpotInnerAngle.ref1f()) + ';' + '\n' + '        ' + '\n' + '                ' + (this.flipBacksideNormals ? 'N *= sign(dot(N, L));' : '') + '\n' + '        ' + '\n' + '                // cook-torrance BRDF' + '\n' + '                float NDF = DistributionGGX(N, H, rough); ' + '\n' + '                float G = GeometrySmith(N, V, L, rough);' + '\n' + '                vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);' + '\n' + '                ' + '\n' + '                vec3 kS = F;' + '\n' + '                vec3 kD = vec3(1.0) - kS;' + '\n' + '                kD *= 1.0 - metal;' + '\n' + '                ' + '\n' + '                vec3 numerator = NDF * G * F;' + '\n' + '                float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);' + '\n' + '                vec3 specular = numerator / max(denominator, 0.001);' + '\n' + '                    ' + '\n' + '                // add to outgoing radiance Lo' + '\n' + '                float NdotL = max(dot(N, L), 0.0);' + '\n' + '                Lo += (kD * albedo / ' + math.PI + ' + specular) * radiance * NdotL;' + '\n' + '            }' + '\n' + '            ');
    if (this.reflectionMap != null && this.brdfLut != null) {
      this.generateFinalIbl_0(generator, this.reflectionMap, this.brdfLut);
    } else {
      this.generateFinalNonIbl_0(generator);
    }
  };
  PbrMaterialNode.prototype.generateFinalNonIbl_0 = function (generator) {
    generator.appendMain_61zpoe$('\n' + '            vec3 kS = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, rough);' + '\n' + '            vec3 kD = 1.0 - kS;' + '\n' + '            vec3 diffuse = ' + this.inIrradiance.ref3f() + ' * albedo;' + '\n' + '            vec3 ambient = (kD * diffuse) * ' + this.inAmbientOccl.ref1f() + ';' + '\n' + '\n' + '            vec3 color = (ambient + Lo) * ' + this.inAlbedo.ref4f() + '.a;' + '\n' + '            ' + this.outColor.declare() + ' = vec4(color, ' + this.inAlbedo.ref4f() + '.a);' + '\n' + '        ');
  };
  PbrMaterialNode.prototype.generateFinalIbl_0 = function (generator, reflectionMap, brdfLut) {
    generator.appendMain_61zpoe$('\n' + '            vec3 F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, rough);' + '\n' + '            vec3 kS = F;' + '\n' + '            vec3 kD = 1.0 - kS;' + '\n' + '            kD *= 1.0 - metal;' + '\n' + '            vec3 diffuse = ' + this.inIrradiance.ref3f() + ' * albedo;' + '\n' + '\n' + '            // sample reflection map' + '\n' + '            vec3 R = reflect(-V, N);' + '\n' + '            const float MAX_REFLECTION_LOD = 6.0;' + '\n' + '            vec3 prefilteredColor = ' + generator.sampleTexture2d_buzeal$(reflectionMap.name, 'R', 'rough * MAX_REFLECTION_LOD') + '.rgb;' + '\n' + '\n' + '            vec2 brdfUv = vec2(max(dot(N, V), 0.0), rough);' + '\n' + '            vec2 envBRDF = ' + generator.sampleTexture2d_buzeal$(brdfLut.name, 'brdfUv') + '.rg;' + '\n' + '            vec3 specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);' + '\n' + '            vec3 ambient = (kD * diffuse + specular) * ' + this.inAmbientOccl.ref1f() + ';' + '\n' + '            vec3 color = (ambient + Lo) * ' + this.inAlbedo.ref4f() + '.a;' + '\n' + '            ' + this.outColor.declare() + ' = vec4(color, ' + this.inAlbedo.ref4f() + '.a);' + '\n' + '        ');
  };
  PbrMaterialNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PbrMaterialNode',
    interfaces: [ShaderNode]
  };
  function PbrLightNode(lightNode, graph) {
    ShaderNode.call(this, 'pbrLightNode', graph, ShaderStage$FRAGMENT_SHADER_getInstance().mask);
    this.lightNode = lightNode;
    this.inAlbedo = new ShaderNodeIoVar(new ModelVar4fConst(Color$Companion_getInstance().MAGENTA));
    this.inNormal = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().Z_AXIS));
    this.inFragPos = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().ZERO));
    this.inCamPos = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().ZERO));
    this.inSpotInnerAngle = new ShaderNodeIoVar(new ModelVar1fConst(0.8));
    this.inMetallic = new ShaderNodeIoVar(new ModelVar1fConst(0.0));
    this.inRoughness = new ShaderNodeIoVar(new ModelVar1fConst(0.1));
    this.inIrradiance = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f_init(0.03)));
    this.outColor = new ShaderNodeIoVar(new ModelVar4f('pbrLight_outColor'), this);
    this.flipBacksideNormals = false;
  }
  PbrLightNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$([this.inAlbedo, this.inNormal, this.inFragPos, this.inCamPos, this.inIrradiance]);
    this.dependsOn_lhtstx$(this.lightNode);
  };
  PbrLightNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendFunction_puj7f4$('fresnelSchlick', '\n            vec3 fresnelSchlick(float cosTheta, vec3 F0) {\n                return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n            }\n        ');
    generator.appendFunction_puj7f4$('DistributionGGX', '\n            float DistributionGGX(vec3 N, vec3 H, float roughness) {\n                float a = roughness*roughness;\n                float a2 = a*a;\n                float NdotH = max(dot(N, H), 0.0);\n                float NdotH2 = NdotH*NdotH;\n            \t\n                float num = a2;\n                float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n                denom = 3.141592653589793 * denom * denom;\n            \t\n                return num / denom;\n            }\n        ');
    generator.appendFunction_puj7f4$('GeometrySchlickGGX', '\n            float GeometrySchlickGGX(float NdotV, float roughness) {\n                float r = (roughness + 1.0);\n                float k = (r*r) / 8.0;\n                \n                float num   = NdotV;\n                float denom = NdotV * (1.0 - k) + k;\n                \n                return num / denom;\n            }\n        ');
    generator.appendFunction_puj7f4$('GeometrySmith', '\n            float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {\n                float NdotV = max(dot(N, V), 0.0);\n                float NdotL = max(dot(N, L), 0.0);\n                float ggx2  = GeometrySchlickGGX(NdotV, roughness);\n                float ggx1  = GeometrySchlickGGX(NdotL, roughness);\n                \n                return ggx1 * ggx2;\n            }\n        ');
    var normalCheck = !this.flipBacksideNormals ? 'dot(fragToLight, ' + this.inNormal.ref3f() + ') > 0.0' : 'true';
    generator.appendMain_61zpoe$('\n' + '            vec3 radiance = vec3(0.0);' + '\n' + '            vec3 fragToLight = ' + this.lightNode.callVec3GetFragToLight_puj7f4$('i', this.inFragPos.ref3f()) + ';' + '\n' + '            bool normalOk = ' + normalCheck + ';' + '\n' + '            if (normalOk) {' + '\n' + '                radiance = ' + this.lightNode.callVec3GetRadiance_6hosri$('i', 'fragToLight', this.inSpotInnerAngle.ref1f()) + ';' + '\n' + '                //radiance = vec3(1.0);' + '\n' + '            }' + '\n' + '            ' + '\n' + '            ' + this.outColor.declare() + ' = vec4(0.0, 0.0, 0.0, 1.0);' + '\n' + '            if (normalOk && dot(radiance, radiance) > 0.0) {' + '\n' + '                vec3 albedo = ' + this.inAlbedo.ref3f() + ';' + '\n' + '                vec3 V = normalize(' + this.inCamPos.ref3f() + ' - ' + this.inFragPos.ref3f() + ');' + '\n' + '                vec3 N = normalize(' + this.inNormal.ref3f() + ');' + '\n' + '                ' + '\n' + '                float rough = clamp(' + this.inRoughness.ref1f() + ', 0.05, 1.0);' + '\n' + '                float metal = ' + this.inMetallic.ref1f() + ';' + '\n' + '                ' + '\n' + '                vec3 F0 = vec3(0.04); ' + '\n' + '                F0 = mix(F0, albedo, metal);' + '\n' + '        ' + '\n' + '                vec3 L = normalize(fragToLight);' + '\n' + '                vec3 H = normalize(V + L);' + '\n' + '                ' + (this.flipBacksideNormals ? 'N *= sign(dot(N, L));' : '') + '\n' + '        ' + '\n' + '                // cook-torrance BRDF' + '\n' + '                float NDF = DistributionGGX(N, H, rough); ' + '\n' + '                float G = GeometrySmith(N, V, L, rough);' + '\n' + '                vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);' + '\n' + '                ' + '\n' + '                vec3 kS = F;' + '\n' + '                vec3 kD = vec3(1.0) - kS;' + '\n' + '                kD *= 1.0 - metal;' + '\n' + '                ' + '\n' + '                vec3 numerator = NDF * G * F;' + '\n' + '                float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);' + '\n' + '                vec3 specular = numerator / max(denominator, 0.001);' + '\n' + '                    ' + '\n' + '                // add to outgoing radiance Lo' + '\n' + '                float NdotL = max(dot(N, L), 0.0);' + '\n' + '                ' + this.outColor.name + ' = vec4((kD * albedo / ' + math.PI + ' + specular) * radiance * NdotL, 1.0);' + '\n' + '            }' + '\n' + '            ');
  };
  PbrLightNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PbrLightNode',
    interfaces: [ShaderNode]
  };
  function MathOpNode(name, graph) {
    ShaderNode.call(this, 'multiply_' + graph.nextNodeId, graph);
    this.left_8p0ptp$_0 = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().X_AXIS));
    this.right = new ShaderNodeIoVar(new ModelVar1fConst(1.0));
    this.output_q2fkhv$_0 = new ShaderNodeIoVar(new ModelVar3f(name + '_out'), this);
  }
  Object.defineProperty(MathOpNode.prototype, 'left', {
    get: function () {
      return this.left_8p0ptp$_0;
    },
    set: function (value) {
      this.output = new ShaderNodeIoVar(new ModelVar(this.name + '_out', value.variable.type), this);
      this.left_8p0ptp$_0 = value;
    }
  });
  Object.defineProperty(MathOpNode.prototype, 'output', {
    get: function () {
      return this.output_q2fkhv$_0;
    },
    set: function (output) {
      this.output_q2fkhv$_0 = output;
    }
  });
  MathOpNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$([this.left, this.right]);
  };
  MathOpNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MathOpNode',
    interfaces: [ShaderNode]
  };
  function AddNode(graph) {
    MathOpNode.call(this, 'add_' + graph.nextNodeId, graph);
  }
  AddNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$(this.output.declare() + ' = ' + this.left + ' + ' + this.right + ';');
  };
  AddNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AddNode',
    interfaces: [MathOpNode]
  };
  function SubtractNode(graph) {
    MathOpNode.call(this, 'add_' + graph.nextNodeId, graph);
  }
  SubtractNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$(this.output.declare() + ' = ' + this.left + ' - ' + this.right + ';');
  };
  SubtractNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SubtractNode',
    interfaces: [MathOpNode]
  };
  function DivideNode(graph) {
    MathOpNode.call(this, 'divide_' + graph.nextNodeId, graph);
  }
  DivideNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$(this.output.declare() + ' = ' + this.left + ' / ' + this.right + ';');
  };
  DivideNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DivideNode',
    interfaces: [MathOpNode]
  };
  function MultiplyNode(graph) {
    MathOpNode.call(this, 'multiply_' + graph.nextNodeId, graph);
  }
  MultiplyNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$(this.output.declare() + ' = ' + this.left + ' * ' + this.right + ';');
  };
  MultiplyNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MultiplyNode',
    interfaces: [MathOpNode]
  };
  function NormalizeNode(graph) {
    ShaderNode.call(this, 'normalize_' + graph.nextNodeId, graph);
    this.input = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().X_AXIS));
    this.output = new ShaderNodeIoVar(new ModelVar3f(this.name + '_out'), this);
  }
  NormalizeNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_7qvs0d$(this.input);
  };
  NormalizeNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$(this.output.declare() + ' = normalize(' + this.input.ref3f() + ');');
  };
  NormalizeNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NormalizeNode',
    interfaces: [ShaderNode]
  };
  function ModelVar(name, type) {
    this.name = name;
    this.type = type;
  }
  ModelVar.prototype.glslType = function () {
    return this.type.glslType;
  };
  ModelVar.prototype.declare = function () {
    return this.glslType() + ' ' + this.name;
  };
  ModelVar.prototype.refAsType_m7a9qd$ = function (targetType) {
    switch (targetType.name) {
      case 'FLOAT':
        return this.ref1f();
      case 'VEC_2F':
        return this.ref2f();
      case 'VEC_3F':
        return this.ref3f();
      case 'VEC_4F':
        return this.ref4f();
      default:if (targetType === this.type) {
          return this.name;
        } else {
          throw KoolException_init(this.type.toString() + ' cannot be converted to ' + targetType);
        }

    }
  };
  ModelVar.prototype.ref1f = function () {
    switch (this.type.name) {
      case 'FLOAT':
        return this.name;
      case 'VEC_2F':
        return this.name + '.x';
      case 'VEC_3F':
        return this.name + '.x';
      case 'VEC_4F':
        return this.name + '.x';
      default:throw KoolException_init(this.type.toString() + ' cannot be converted to float');
    }
  };
  ModelVar.prototype.ref2f = function () {
    switch (this.type.name) {
      case 'FLOAT':
        return 'vec2(' + this.name + ', 0.0)';
      case 'VEC_2F':
        return this.name;
      case 'VEC_3F':
        return this.name + '.xy';
      case 'VEC_4F':
        return this.name + '.xy';
      default:throw KoolException_init(this.type.toString() + ' cannot be converted to vec2');
    }
  };
  ModelVar.prototype.ref3f = function () {
    switch (this.type.name) {
      case 'FLOAT':
        return 'vec3(' + this.name + ', 0.0, 0.0)';
      case 'VEC_2F':
        return 'vec3(' + this.name + ', 0.0)';
      case 'VEC_3F':
        return this.name;
      case 'VEC_4F':
        return this.name + '.xyz';
      default:throw KoolException_init(this.type.toString() + ' cannot be converted to vec3');
    }
  };
  ModelVar.prototype.ref4f = function () {
    switch (this.type.name) {
      case 'FLOAT':
        return 'vec4(' + this.name + ', 0.0, 0.0, 0.0)';
      case 'VEC_2F':
        return 'vec4(' + this.name + ', 0.0, 0.0)';
      case 'VEC_3F':
        return 'vec4(' + this.name + ', 0.0)';
      case 'VEC_4F':
        return this.name;
      default:throw KoolException_init(this.type.toString() + ' cannot be converted to vec4');
    }
  };
  ModelVar.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar',
    interfaces: []
  };
  function ModelVar1f(name) {
    ModelVar.call(this, name, GlslType$FLOAT_getInstance());
  }
  ModelVar1f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar1f',
    interfaces: [ModelVar]
  };
  function ModelVar2f(name) {
    ModelVar.call(this, name, GlslType$VEC_2F_getInstance());
  }
  ModelVar2f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar2f',
    interfaces: [ModelVar]
  };
  function ModelVar3f(name) {
    ModelVar.call(this, name, GlslType$VEC_3F_getInstance());
  }
  ModelVar3f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar3f',
    interfaces: [ModelVar]
  };
  function ModelVar4f(name) {
    ModelVar.call(this, name, GlslType$VEC_4F_getInstance());
  }
  ModelVar4f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar4f',
    interfaces: [ModelVar]
  };
  function ModelVar1i(name) {
    ModelVar.call(this, name, GlslType$INT_getInstance());
  }
  ModelVar1i.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar1i',
    interfaces: [ModelVar]
  };
  function ModelVar2i(name) {
    ModelVar.call(this, name, GlslType$VEC_2I_getInstance());
  }
  ModelVar2i.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar2i',
    interfaces: [ModelVar]
  };
  function ModelVar3i(name) {
    ModelVar.call(this, name, GlslType$VEC_3I_getInstance());
  }
  ModelVar3i.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar3i',
    interfaces: [ModelVar]
  };
  function ModelVar4i(name) {
    ModelVar.call(this, name, GlslType$VEC_4I_getInstance());
  }
  ModelVar4i.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar4i',
    interfaces: [ModelVar]
  };
  function ModelVarMat2f(name) {
    ModelVar.call(this, name, GlslType$MAT_2F_getInstance());
  }
  ModelVarMat2f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVarMat2f',
    interfaces: [ModelVar]
  };
  function ModelVarMat3f(name) {
    ModelVar.call(this, name, GlslType$MAT_3F_getInstance());
  }
  ModelVarMat3f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVarMat3f',
    interfaces: [ModelVar]
  };
  function ModelVarMat4f(name) {
    ModelVar.call(this, name, GlslType$MAT_4F_getInstance());
  }
  ModelVarMat4f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVarMat4f',
    interfaces: [ModelVar]
  };
  function ModelVar1fConst(value) {
    ModelVar1f.call(this, '_');
    this.value = value;
  }
  ModelVar1fConst.prototype.ref1f = function () {
    return 'float(' + this.value + ')';
  };
  ModelVar1fConst.prototype.ref2f = function () {
    return 'vec2(float(' + this.value + '), 0.0)';
  };
  ModelVar1fConst.prototype.ref3f = function () {
    return 'vec3(float(' + this.value + '), 0.0, 0.0)';
  };
  ModelVar1fConst.prototype.ref4f = function () {
    return 'vec4(float(' + this.value + '), 0.0, 0.0, 0.0)';
  };
  ModelVar1fConst.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar1fConst',
    interfaces: [ModelVar1f]
  };
  function ModelVar2fConst(value) {
    ModelVar2f.call(this, '_');
    this.value = value;
  }
  ModelVar2fConst.prototype.ref1f = function () {
    return 'float(' + this.value.x + ')';
  };
  ModelVar2fConst.prototype.ref2f = function () {
    return 'vec2(float(' + this.value.x + '), float(' + this.value.y + '))';
  };
  ModelVar2fConst.prototype.ref3f = function () {
    return 'vec3(float(' + this.value.x + '), float(' + this.value.y + '), 0.0)';
  };
  ModelVar2fConst.prototype.ref4f = function () {
    return 'vec4(float(' + this.value.x + '), float(' + this.value.y + '), 0.0, 0.0)';
  };
  ModelVar2fConst.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar2fConst',
    interfaces: [ModelVar2f]
  };
  function ModelVar3fConst(value) {
    ModelVar3f.call(this, '_');
    this.value = value;
  }
  ModelVar3fConst.prototype.ref1f = function () {
    return 'float(' + this.value.x + ')';
  };
  ModelVar3fConst.prototype.ref2f = function () {
    return 'vec2(float(' + this.value.x + '), float(' + this.value.y + '))';
  };
  ModelVar3fConst.prototype.ref3f = function () {
    return 'vec3(float(' + this.value.x + '), float(' + this.value.y + '), float(' + this.value.z + '))';
  };
  ModelVar3fConst.prototype.ref4f = function () {
    return 'vec4(float(' + this.value.x + '), float(' + this.value.y + '), float(' + this.value.z + '), 0.0)';
  };
  ModelVar3fConst.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar3fConst',
    interfaces: [ModelVar3f]
  };
  function ModelVar4fConst(value) {
    ModelVar4f.call(this, '_');
    this.value = value;
  }
  ModelVar4fConst.prototype.ref1f = function () {
    return 'float(' + this.value.x + ')';
  };
  ModelVar4fConst.prototype.ref2f = function () {
    return 'vec2(float(' + this.value.x + '), float(' + this.value.y + '))';
  };
  ModelVar4fConst.prototype.ref3f = function () {
    return 'vec3(float(' + this.value.x + '), float(' + this.value.y + '), float(' + this.value.z + '))';
  };
  ModelVar4fConst.prototype.ref4f = function () {
    return 'vec4(float(' + this.value.x + '), float(' + this.value.y + '), float(' + this.value.z + '), float(' + this.value.w + '))';
  };
  ModelVar4fConst.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar4fConst',
    interfaces: [ModelVar4f]
  };
  function ModelVar1iConst(value) {
    ModelVar1i.call(this, '_');
    this.value = value;
  }
  ModelVar1iConst.prototype.ref1f = function () {
    return 'int(' + this.value + ')';
  };
  ModelVar1iConst.prototype.ref2f = function () {
    return 'vec2i(int(' + this.value + '), 0)';
  };
  ModelVar1iConst.prototype.ref3f = function () {
    return 'vec3i(int(' + this.value + '), 0, 0)';
  };
  ModelVar1iConst.prototype.ref4f = function () {
    return 'vec4i(int(' + this.value + '), 0, 0, 0)';
  };
  ModelVar1iConst.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar1iConst',
    interfaces: [ModelVar1i]
  };
  function ModelVar2iConst(x, y) {
    ModelVar2i.call(this, '_');
    this.x = x;
    this.y = y;
  }
  ModelVar2iConst.prototype.ref1f = function () {
    return this.x.toString();
  };
  ModelVar2iConst.prototype.ref2f = function () {
    return 'vec2i(' + this.x + ', ' + this.y + ')';
  };
  ModelVar2iConst.prototype.ref3f = function () {
    return 'vec3i(' + this.x + ', ' + this.y + ', 0)';
  };
  ModelVar2iConst.prototype.ref4f = function () {
    return 'vec4i(' + this.x + ', ' + this.y + ', 0, 0)';
  };
  ModelVar2iConst.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar2iConst',
    interfaces: [ModelVar2i]
  };
  function ModelVar3iConst(x, y, z) {
    ModelVar3i.call(this, '_');
    this.x = x;
    this.y = y;
    this.z = z;
  }
  ModelVar3iConst.prototype.ref1f = function () {
    return this.x.toString();
  };
  ModelVar3iConst.prototype.ref2f = function () {
    return 'vec2i(' + this.x + ', ' + this.y + ')';
  };
  ModelVar3iConst.prototype.ref3f = function () {
    return 'vec3i(' + this.x + ', ' + this.y + ', ' + this.z + ')';
  };
  ModelVar3iConst.prototype.ref4f = function () {
    return 'vec4i(' + this.x + ', ' + this.y + ', ' + this.z + ', 0)';
  };
  ModelVar3iConst.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar3iConst',
    interfaces: [ModelVar3i]
  };
  function ModelVar4iConst(x, y, z, w) {
    ModelVar4i.call(this, '_');
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
  }
  ModelVar4iConst.prototype.ref1f = function () {
    return this.x.toString();
  };
  ModelVar4iConst.prototype.ref2f = function () {
    return 'vec2i(' + this.x + ', ' + this.y + ')';
  };
  ModelVar4iConst.prototype.ref3f = function () {
    return 'vec3i(' + this.x + ', ' + this.y + ', ' + this.z + ')';
  };
  ModelVar4iConst.prototype.ref4f = function () {
    return 'vec4i(' + this.x + ', ' + this.y + ', ' + this.z + ', ' + this.w + ')';
  };
  ModelVar4iConst.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelVar4iConst',
    interfaces: [ModelVar4i]
  };
  function ShaderGenerator() {
  }
  ShaderGenerator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShaderGenerator',
    interfaces: []
  };
  function ShaderInterfaceIoVar(location, variable, isFlat, locationInc) {
    if (locationInc === void 0)
      locationInc = 1;
    this.location = location;
    this.variable = variable;
    this.isFlat = isFlat;
    this.locationInc = locationInc;
  }
  ShaderInterfaceIoVar.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShaderInterfaceIoVar',
    interfaces: []
  };
  function ShaderGraph(model, stage) {
    this.model = model;
    this.stage = stage;
    this.descriptorSet = new DescriptorSetLayout$Builder();
    this.pushConstants = new PushConstantRange$Builder();
    this.inputs = ArrayList_init_0();
    this.mutOutputs_rh28ou$_0 = ArrayList_init_0();
    this.mutNodes = ArrayList_init_0();
    this.nextNodeId_bjjntk$_0 = 1;
  }
  Object.defineProperty(ShaderGraph.prototype, 'outputs', {
    get: function () {
      return this.mutOutputs_rh28ou$_0;
    }
  });
  Object.defineProperty(ShaderGraph.prototype, 'nodes', {
    get: function () {
      return this.mutNodes;
    }
  });
  Object.defineProperty(ShaderGraph.prototype, 'nextNodeId', {
    get: function () {
      return this.nextNodeId_bjjntk$_0;
    },
    set: function (nextNodeId) {
      this.nextNodeId_bjjntk$_0 = nextNodeId;
    }
  });
  ShaderGraph.prototype.findNode_45s15y$ = defineInlineFunction('kool.de.fabmax.kool.pipeline.shadermodel.ShaderGraph.findNode_45s15y$', wrapFunction(function () {
    var equals = Kotlin.equals;
    var throwCCE = Kotlin.throwCCE;
    return function (T_0, isT, name) {
      var tmp$;
      var $receiver = this.nodes;
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$_0;
        tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          if (equals(element.name, name) && isT(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return (tmp$ = firstOrNull$result) == null || isT(tmp$) ? tmp$ : throwCCE();
    };
  }));
  ShaderGraph.prototype.addStageOutput_ca2n0y$ = function (output, isFlat, locationInc) {
    if (locationInc === void 0)
      locationInc = 1;
    var tmp$;
    var sum = 0;
    tmp$ = this.mutOutputs_rh28ou$_0.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      sum = sum + element.locationInc | 0;
    }
    var location = sum;
    var ifVar = new ShaderInterfaceIoVar(location, output, isFlat, locationInc);
    this.mutOutputs_rh28ou$_0.add_11rb$(ifVar);
    return ifVar;
  };
  ShaderGraph.prototype.addNode_j0v1fw$ = function (node) {
    if (node.graph !== this) {
      throw IllegalStateException_init("Node can only be added to it's parent graph");
    }this.mutNodes.add_11rb$(node);
  };
  ShaderGraph.prototype.setup = function () {
    var tmp$;
    tmp$ = this.nodes.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.setup_llmhyc$(this);
    }
  };
  ShaderGraph.prototype.generateCode_626509$ = function (generator) {
    this.sortNodesByDependencies_dlleyv$_0();
    var tmp$;
    tmp$ = this.nodes.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.generateCode_626509$(generator);
    }
  };
  ShaderGraph.prototype.sortNodesByDependencies_dlleyv$_0 = function () {
    var sortedNodes = LinkedHashSet_init();
    while (!this.nodes.isEmpty()) {
      var ndIt = this.mutNodes.iterator();
      var anyAdded = false;
      while (ndIt.hasNext()) {
        var nd = ndIt.next();
        if (sortedNodes.containsAll_brywnq$(nd.dependencies)) {
          sortedNodes.add_11rb$(nd);
          ndIt.remove();
          anyAdded = true;
        }}
      if (!anyAdded) {
        println_0(this.model.modelInfo + ' - Remaining nodes:');
        var tmp$;
        tmp$ = this.nodes.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          println_0(element.name);
          var tmp$_0;
          tmp$_0 = element.dependencies.iterator();
          while (tmp$_0.hasNext()) {
            var element_0 = tmp$_0.next();
            var state = sortedNodes.contains_11rb$(element_0) ? '[ok]' : '[missing]';
            println_0('    -> ' + element_0.name + ' ' + state);
          }
        }
        throw IllegalStateException_init('Unable to resolve shader graph (circular or missing dependency?)');
      }}
    this.mutNodes.addAll_brywnq$(sortedNodes);
  };
  ShaderGraph.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShaderGraph',
    interfaces: []
  };
  function VertexShaderGraph(model) {
    ShaderGraph.call(this, model, ShaderStage$VERTEX_SHADER_getInstance());
    this.requiredVertexAttributes = LinkedHashSet_init();
    this.requiredInstanceAttributes = LinkedHashSet_init();
    this.positionOutput = new ShaderNodeIoVar(new ModelVar4fConst(Vec4f$Companion_getInstance().ZERO), null);
  }
  VertexShaderGraph.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VertexShaderGraph',
    interfaces: [ShaderGraph]
  };
  function FragmentShaderGraph(model) {
    ShaderGraph.call(this, model, ShaderStage$FRAGMENT_SHADER_getInstance());
  }
  FragmentShaderGraph.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FragmentShaderGraph',
    interfaces: [ShaderGraph]
  };
  function ShaderModel(modelInfo) {
    if (modelInfo === void 0)
      modelInfo = '';
    this.modelInfo = modelInfo;
    this.stages = mutableMapOf([to(ShaderStage$VERTEX_SHADER_getInstance(), new VertexShaderGraph(this)), to(ShaderStage$FRAGMENT_SHADER_getInstance(), new FragmentShaderGraph(this))]);
    this.dumpCode = false;
  }
  Object.defineProperty(ShaderModel.prototype, 'vertexStageGraph', {
    get: function () {
      var tmp$;
      return Kotlin.isType(tmp$ = this.stages.get_11rb$(ShaderStage$VERTEX_SHADER_getInstance()), VertexShaderGraph) ? tmp$ : throwCCE();
    }
  });
  Object.defineProperty(ShaderModel.prototype, 'fragmentStageGraph', {
    get: function () {
      var tmp$;
      return Kotlin.isType(tmp$ = this.stages.get_11rb$(ShaderStage$FRAGMENT_SHADER_getInstance()), FragmentShaderGraph) ? tmp$ : throwCCE();
    }
  });
  ShaderModel.prototype.findNode_3klnlw$ = defineInlineFunction('kool.de.fabmax.kool.pipeline.shadermodel.ShaderModel.findNode_3klnlw$', wrapFunction(function () {
    var ShaderStage = _.de.fabmax.kool.pipeline.ShaderStage;
    var Unit = Kotlin.kotlin.Unit;
    var wrapFunction = Kotlin.wrapFunction;
    var equals = Kotlin.equals;
    var throwCCE = Kotlin.throwCCE;
    var ShaderModel$findNode$lambda = wrapFunction(function () {
      var equals = Kotlin.equals;
      var throwCCE = Kotlin.throwCCE;
      return function (closure$stage, closure$name, typeClosure$T, isT) {
        return function (it) {
          if ((it.stage.mask & closure$stage.mask) !== 0) {
            var isT_0 = isT;
            var name = closure$name;
            var tmp$;
            var $receiver = it.nodes;
            var firstOrNull$result;
            firstOrNull$break: do {
              var tmp$_0;
              tmp$_0 = $receiver.iterator();
              while (tmp$_0.hasNext()) {
                var element = tmp$_0.next();
                if (equals(element.name, name) && isT_0(element)) {
                  firstOrNull$result = element;
                  break firstOrNull$break;
                }}
              firstOrNull$result = null;
            }
             while (false);
            var node = (tmp$ = firstOrNull$result) == null || isT_0(tmp$) ? tmp$ : throwCCE();
            if (node != null) {
              return node;
            }}return Unit;
        };
      };
    });
    return function (T_0, isT, name, stage) {
      if (stage === void 0)
        stage = ShaderStage.ALL;
      var tmp$;
      tmp$ = this.stages.values.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if ((element.stage.mask & stage.mask) !== 0) {
          var tmp$_0;
          var $receiver = element.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_1;
            tmp$_1 = $receiver.iterator();
            while (tmp$_1.hasNext()) {
              var element_0 = tmp$_1.next();
              if (equals(element_0.name, name) && isT(element_0)) {
                firstOrNull$result = element_0;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = (tmp$_0 = firstOrNull$result) == null || isT(tmp$_0) ? tmp$_0 : throwCCE();
          if (node != null) {
            return node;
          }}}
      return null;
    };
  }));
  function ShaderModel$setup$lambda(closure$pushUpdateFuns) {
    return function (rng, cmd) {
      for (var i = 0; i !== closure$pushUpdateFuns.size; ++i) {
        closure$pushUpdateFuns.get_za3lpa$(i)(rng, cmd);
      }
      return Unit;
    };
  }
  ShaderModel.prototype.setup_f3a0ju$ = function (mesh, buildCtx) {
    var tmp$;
    tmp$ = this.stages.values.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.setup();
    }
    this.setupAttributes_0(mesh, buildCtx);
    var pushBuilder = new PushConstantRange$Builder();
    var pushUpdateFuns = ArrayList_init_0();
    var descBuilder = new DescriptorSetLayout$Builder();
    var tmp$_0;
    tmp$_0 = this.stages.values.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      var tmp$_1;
      addAll(descBuilder.descriptors, element_0.descriptorSet.descriptors);
      addAll(pushBuilder.pushConstants, element_0.pushConstants.pushConstants);
      addAll(pushBuilder.stages, element_0.pushConstants.stages);
      if ((tmp$_1 = element_0.pushConstants.onUpdate) != null) {
        pushUpdateFuns.add_11rb$(tmp$_1);
      }}
    if (!descBuilder.descriptors.isEmpty()) {
      buildCtx.descriptorSetLayouts.add_11rb$(descBuilder);
    }if (!pushBuilder.pushConstants.isEmpty()) {
      buildCtx.pushConstantRanges.add_11rb$(pushBuilder);
      if (!pushUpdateFuns.isEmpty()) {
        pushBuilder.onUpdate = ShaderModel$setup$lambda(pushUpdateFuns);
      }}};
  ShaderModel.prototype.setupAttributes_0 = function (mesh, buildCtx) {
    var attribLocation = {v: 0};
    var verts = mesh.geometry;
    var vertLayoutAttribs = ArrayList_init_0();
    var tmp$;
    tmp$ = this.vertexStageGraph.requiredVertexAttributes.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0;
      tmp$_0 = verts.attributeOffsets.get_11rb$(element);
      if (tmp$_0 == null) {
        throw new NoSuchElementException_init_0('Mesh does not include required vertex attribute: ' + element.name);
      }var off = tmp$_0;
      var element_0 = new VertexLayout$VertexAttribute(attribLocation.v, off, element);
      vertLayoutAttribs.add_11rb$(element_0);
      attribLocation.v = attribLocation.v + element.props.nSlots | 0;
    }
    var $receiver = buildCtx.vertexLayout.bindings;
    var element_1 = new VertexLayout$Binding(0, InputRate$VERTEX_getInstance(), vertLayoutAttribs, verts.strideBytesF);
    $receiver.add_11rb$(element_1);
    var insts = mesh.instances;
    if (insts != null) {
      var instLayoutAttribs = ArrayList_init_0();
      var tmp$_1;
      tmp$_1 = this.vertexStageGraph.requiredInstanceAttributes.iterator();
      while (tmp$_1.hasNext()) {
        var element_2 = tmp$_1.next();
        var tmp$_2;
        tmp$_2 = insts.attributeOffsets.get_11rb$(element_2);
        if (tmp$_2 == null) {
          throw new NoSuchElementException_init_0('Mesh does not include required instance attribute: ' + element_2.name);
        }var off_0 = tmp$_2;
        var element_3 = new VertexLayout$VertexAttribute(attribLocation.v, off_0, element_2);
        instLayoutAttribs.add_11rb$(element_3);
        attribLocation.v = attribLocation.v + element_2.props.nSlots | 0;
      }
      var $receiver_0 = buildCtx.vertexLayout.bindings;
      var element_4 = new VertexLayout$Binding(1, InputRate$INSTANCE_getInstance(), instLayoutAttribs, insts.strideBytesF);
      $receiver_0.add_11rb$(element_4);
    } else {
      if (!this.vertexStageGraph.requiredInstanceAttributes.isEmpty()) {
        throw IllegalStateException_init("Shader model requires instance attributes, but mesh doesn't provide any");
      }}
  };
  function ShaderModel$StageBuilder($outer, stage) {
    this.$outer = $outer;
    this.stage = stage;
  }
  ShaderModel$StageBuilder.prototype.addNode_u9w9by$ = function (node) {
    this.stage.addNode_j0v1fw$(node);
    return node;
  };
  ShaderModel$StageBuilder.prototype.channelNode_500t7j$ = function (input, channels) {
    var chNode = this.addNode_u9w9by$(new ChannelNode(channels, this.stage));
    chNode.input = input;
    return chNode;
  };
  ShaderModel$StageBuilder.prototype.addNode_ze33is$ = function (left, right) {
    if (left === void 0)
      left = null;
    if (right === void 0)
      right = null;
    var addNode = this.addNode_u9w9by$(new AddNode(this.stage));
    if (left != null) {
      addNode.left = left;
    }if (right != null) {
      addNode.right = right;
    }return addNode;
  };
  ShaderModel$StageBuilder.prototype.subtractNode_ze33is$ = function (left, right) {
    if (left === void 0)
      left = null;
    if (right === void 0)
      right = null;
    var subNode = this.addNode_u9w9by$(new SubtractNode(this.stage));
    if (left != null) {
      subNode.left = left;
    }if (right != null) {
      subNode.right = right;
    }return subNode;
  };
  ShaderModel$StageBuilder.prototype.divideNode_ze33is$ = function (left, right) {
    if (left === void 0)
      left = null;
    if (right === void 0)
      right = null;
    var divNode = this.addNode_u9w9by$(new DivideNode(this.stage));
    if (left != null) {
      divNode.left = left;
    }if (right != null) {
      divNode.right = right;
    }return divNode;
  };
  ShaderModel$StageBuilder.prototype.multiplyNode_tuikh5$ = function (left, right) {
    return this.multiplyNode_ze33is$(left, new ShaderNodeIoVar(new ModelVar1fConst(right)));
  };
  ShaderModel$StageBuilder.prototype.multiplyNode_ze33is$ = function (left, right) {
    if (left === void 0)
      left = null;
    if (right === void 0)
      right = null;
    var mulNode = this.addNode_u9w9by$(new MultiplyNode(this.stage));
    if (left != null) {
      mulNode.left = left;
    }if (right != null) {
      mulNode.right = right;
    }return mulNode;
  };
  ShaderModel$StageBuilder.prototype.normalizeNode_r20yfm$ = function (input) {
    if (input === void 0)
      input = null;
    var nrmNode = this.addNode_u9w9by$(new NormalizeNode(this.stage));
    if (input != null) {
      nrmNode.input = input;
    }return nrmNode;
  };
  ShaderModel$StageBuilder.prototype.normalMapNode_j8913i$ = function (texture, textureCoord, normal, tangent) {
    if (textureCoord === void 0)
      textureCoord = null;
    if (normal === void 0)
      normal = null;
    if (tangent === void 0)
      tangent = null;
    var nrmMappingNd = this.addNode_u9w9by$(new NormalMapNode(texture, this.stage));
    if (textureCoord != null) {
      nrmMappingNd.inTexCoord = textureCoord;
    }if (normal != null) {
      nrmMappingNd.inNormal = normal;
    }if (tangent != null) {
      nrmMappingNd.inTangent = tangent;
    }return nrmMappingNd;
  };
  ShaderModel$StageBuilder.prototype.displacementMapNode_7fvjbk$ = function (texture, textureCoord, pos, normal, strength) {
    if (textureCoord === void 0)
      textureCoord = null;
    if (pos === void 0)
      pos = null;
    if (normal === void 0)
      normal = null;
    if (strength === void 0)
      strength = null;
    var dispMappingNd = this.addNode_u9w9by$(new DisplacementMapNode(texture, this.stage));
    if (textureCoord != null) {
      dispMappingNd.inTexCoord = textureCoord;
    }if (pos != null) {
      dispMappingNd.inPosition = pos;
    }if (normal != null) {
      dispMappingNd.inNormal = normal;
    }if (strength != null) {
      dispMappingNd.inStrength = strength;
    }return dispMappingNd;
  };
  ShaderModel$StageBuilder.prototype.gammaNode_r20yfm$ = function (inputColor) {
    if (inputColor === void 0)
      inputColor = null;
    var gamma = this.addNode_u9w9by$(new GammaNode(this.stage));
    if (inputColor != null) {
      gamma.inColor = inputColor;
    }return gamma;
  };
  ShaderModel$StageBuilder.prototype.hdrToLdrNode_r20yfm$ = function (inputColor) {
    if (inputColor === void 0)
      inputColor = null;
    var hdr2ldr = this.addNode_u9w9by$(new HdrToLdrNode(this.stage));
    if (inputColor != null) {
      hdr2ldr.inColor = inputColor;
    }return hdr2ldr;
  };
  ShaderModel$StageBuilder.prototype.premultiplyColorNode_r20yfm$ = function (inColor) {
    if (inColor === void 0)
      inColor = null;
    var preMult = this.addNode_u9w9by$(new PremultiplyColorNode(this.stage));
    if (inColor != null) {
      preMult.inColor = inColor;
    }return preMult;
  };
  ShaderModel$StageBuilder.prototype.colorAlphaNode_ze33is$ = function (inColor, inAlpha) {
    if (inColor === void 0)
      inColor = null;
    if (inAlpha === void 0)
      inAlpha = null;
    var colAlpha = this.addNode_u9w9by$(new ColorAlphaNode(this.stage));
    if (inColor != null) {
      colAlpha.inColor = inColor;
    }if (inAlpha != null) {
      colAlpha.inAlpha = inAlpha;
    }return colAlpha;
  };
  ShaderModel$StageBuilder.prototype.pushConstantNode1f_61zpoe$ = function (name) {
    return this.addNode_u9w9by$(new PushConstantNode1f(new Uniform1f(name), this.stage));
  };
  ShaderModel$StageBuilder.prototype.pushConstantNode2f_61zpoe$ = function (name) {
    return this.addNode_u9w9by$(new PushConstantNode2f(new Uniform2f(name), this.stage));
  };
  ShaderModel$StageBuilder.prototype.pushConstantNode3f_61zpoe$ = function (name) {
    return this.addNode_u9w9by$(new PushConstantNode3f(new Uniform3f(name), this.stage));
  };
  ShaderModel$StageBuilder.prototype.pushConstantNode4f_61zpoe$ = function (name) {
    return this.addNode_u9w9by$(new PushConstantNode4f(new Uniform4f(name), this.stage));
  };
  ShaderModel$StageBuilder.prototype.pushConstantNodeColor_61zpoe$ = function (name) {
    return this.addNode_u9w9by$(new PushConstantNodeColor(new UniformColor(name), this.stage));
  };
  ShaderModel$StageBuilder.prototype.pushConstantNode1f_978i2u$ = function (u) {
    return this.addNode_u9w9by$(new PushConstantNode1f(u, this.stage));
  };
  ShaderModel$StageBuilder.prototype.pushConstantNode2f_978i3p$ = function (u) {
    return this.addNode_u9w9by$(new PushConstantNode2f(u, this.stage));
  };
  ShaderModel$StageBuilder.prototype.pushConstantNode3f_978i4k$ = function (u) {
    return this.addNode_u9w9by$(new PushConstantNode3f(u, this.stage));
  };
  ShaderModel$StageBuilder.prototype.pushConstantNode4f_978i5f$ = function (u) {
    return this.addNode_u9w9by$(new PushConstantNode4f(u, this.stage));
  };
  ShaderModel$StageBuilder.prototype.pushConstantNodeColor_uqrny$ = function (u) {
    return this.addNode_u9w9by$(new PushConstantNodeColor(u, this.stage));
  };
  ShaderModel$StageBuilder.prototype.textureNode_61zpoe$ = function (texName) {
    return this.addNode_u9w9by$(new TextureNode(this.stage, texName));
  };
  ShaderModel$StageBuilder.prototype.textureSamplerNode_ce41yx$ = function (texNode, texCoords, premultiply) {
    if (texCoords === void 0)
      texCoords = null;
    if (premultiply === void 0)
      premultiply = false;
    var texSampler = this.addNode_u9w9by$(new TextureSamplerNode(texNode, this.stage, premultiply));
    if (texCoords != null) {
      texSampler.inTexCoord = texCoords;
    }return texSampler;
  };
  ShaderModel$StageBuilder.prototype.equiRectSamplerNode_ce41yx$ = function (texNode, texCoords, premultiply) {
    if (texCoords === void 0)
      texCoords = null;
    if (premultiply === void 0)
      premultiply = false;
    var texSampler = this.addNode_u9w9by$(new EquiRectSamplerNode(texNode, this.stage, premultiply));
    if (texCoords != null) {
      texSampler.inTexCoord = texCoords;
    }return texSampler;
  };
  ShaderModel$StageBuilder.prototype.cubeMapNode_61zpoe$ = function (texName) {
    return this.addNode_u9w9by$(new CubeMapNode(this.stage, texName));
  };
  ShaderModel$StageBuilder.prototype.cubeMapSamplerNode_2z3a2t$ = function (texNode, texCoords, premultiply) {
    if (texCoords === void 0)
      texCoords = null;
    if (premultiply === void 0)
      premultiply = false;
    var texSampler = this.addNode_u9w9by$(new CubeMapSamplerNode(texNode, this.stage, premultiply));
    if (texCoords != null) {
      texSampler.inTexCoord = texCoords;
    }return texSampler;
  };
  ShaderModel$StageBuilder.prototype.vec3TransformNode_vid4wo$ = function (input, inMat, w, invert) {
    if (input === void 0)
      input = null;
    if (inMat === void 0)
      inMat = null;
    if (w === void 0)
      w = 1.0;
    if (invert === void 0)
      invert = false;
    var tfNode = this.addNode_u9w9by$(new Vec3TransformNode(this.stage, w, invert));
    if (input != null) {
      tfNode.inVec = input;
    }if (inMat != null) {
      tfNode.inMat = inMat;
    }return tfNode;
  };
  ShaderModel$StageBuilder.prototype.vec4TransformNode_9krp9t$ = function (input, inMat, w) {
    if (input === void 0)
      input = null;
    if (inMat === void 0)
      inMat = null;
    if (w === void 0)
      w = 1.0;
    var tfNode = this.addNode_u9w9by$(new Vec4TransformNode(this.stage, w));
    if (input != null) {
      tfNode.inVec = input;
    }if (inMat != null) {
      tfNode.inMat = inMat;
    }return tfNode;
  };
  ShaderModel$StageBuilder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StageBuilder',
    interfaces: []
  };
  function ShaderModel$VertexStageBuilder($outer) {
    this.$outer = $outer;
    ShaderModel$StageBuilder.call(this, this.$outer, this.$outer.vertexStageGraph);
  }
  Object.defineProperty(ShaderModel$VertexStageBuilder.prototype, 'positionOutput', {
    get: function () {
      return this.$outer.vertexStageGraph.positionOutput;
    },
    set: function (value) {
      this.$outer.vertexStageGraph.positionOutput = value;
    }
  });
  ShaderModel$VertexStageBuilder.prototype.attrColors = function () {
    return this.attributeNode_nm2vx5$(Attribute$Companion_getInstance().COLORS);
  };
  ShaderModel$VertexStageBuilder.prototype.attrNormals = function () {
    return this.attributeNode_nm2vx5$(Attribute$Companion_getInstance().NORMALS);
  };
  ShaderModel$VertexStageBuilder.prototype.attrPositions = function () {
    return this.attributeNode_nm2vx5$(Attribute$Companion_getInstance().POSITIONS);
  };
  ShaderModel$VertexStageBuilder.prototype.attrTangents = function () {
    return this.attributeNode_nm2vx5$(Attribute$Companion_getInstance().TANGENTS);
  };
  ShaderModel$VertexStageBuilder.prototype.attrTexCoords = function () {
    return this.attributeNode_nm2vx5$(Attribute$Companion_getInstance().TEXTURE_COORDS);
  };
  ShaderModel$VertexStageBuilder.prototype.attributeNode_nm2vx5$ = function (attribute) {
    return this.addNode_u9w9by$(new AttributeNode(attribute, this.stage));
  };
  ShaderModel$VertexStageBuilder.prototype.instanceAttrModelMat = function () {
    return this.instanceAttributeNode_nm2vx5$(MeshInstanceList$Companion_getInstance().MODEL_MAT);
  };
  ShaderModel$VertexStageBuilder.prototype.instanceAttributeNode_nm2vx5$ = function (attribute) {
    return this.addNode_u9w9by$(new InstanceAttributeNode(attribute, this.stage));
  };
  ShaderModel$VertexStageBuilder.prototype.stageInterfaceNode_iikjwn$ = function (name, input, isFlat) {
    if (input === void 0)
      input = null;
    if (isFlat === void 0)
      isFlat = false;
    var ifNode = new StageInterfaceNode(name, this.$outer.vertexStageGraph, this.$outer.fragmentStageGraph);
    ifNode.isFlat = isFlat;
    if (input != null) {
      ifNode.input = input;
    }this.addNode_u9w9by$(ifNode.vertexNode);
    this.$outer.fragmentStageGraph.addNode_j0v1fw$(ifNode.fragmentNode);
    return ifNode;
  };
  ShaderModel$VertexStageBuilder.prototype.mvpNode = function () {
    return this.addNode_u9w9by$(new UniformBufferMvp(this.stage));
  };
  ShaderModel$VertexStageBuilder.prototype.premultipliedMvpNode = function () {
    return this.addNode_u9w9by$(new UniformBufferPremultipliedMvp(this.stage));
  };
  ShaderModel$VertexStageBuilder.prototype.simpleShadowMapNode_7yd351$ = function (shadowMap, depthMapName, inWorldPos) {
    if (inWorldPos === void 0)
      inWorldPos = null;
    var shadowMapNode = new SimpleShadowMapNode(shadowMap, this.$outer.vertexStageGraph, this.$outer.fragmentStageGraph);
    this.addNode_u9w9by$(shadowMapNode.vertexNode);
    this.$outer.fragmentStageGraph.addNode_j0v1fw$(shadowMapNode.fragmentNode);
    var $receiver = new TextureNode(this.$outer.fragmentStageGraph, depthMapName);
    $receiver.isDepthTexture = true;
    var depthMap = $receiver;
    this.$outer.fragmentStageGraph.addNode_j0v1fw$(depthMap);
    if (inWorldPos != null) {
      shadowMapNode.inWorldPos = inWorldPos;
    }shadowMapNode.depthMap = depthMap;
    return shadowMapNode;
  };
  ShaderModel$VertexStageBuilder.prototype.cascadedShadowMapNode_zw58l$ = function (cascadedShadowMap, depthMapName, inViewPos, inWorldPos) {
    if (inViewPos === void 0)
      inViewPos = null;
    if (inWorldPos === void 0)
      inWorldPos = null;
    var shadowMapNode = new CascadedShadowMapNode(cascadedShadowMap, this.$outer.vertexStageGraph, this.$outer.fragmentStageGraph);
    this.addNode_u9w9by$(shadowMapNode.vertexNode);
    this.$outer.fragmentStageGraph.addNode_j0v1fw$(shadowMapNode.fragmentNode);
    var $receiver = new TextureNode(this.$outer.fragmentStageGraph, depthMapName);
    $receiver.isDepthTexture = true;
    $receiver.arraySize = cascadedShadowMap.numCascades;
    var depthMap = $receiver;
    this.$outer.fragmentStageGraph.addNode_j0v1fw$(depthMap);
    if (inWorldPos != null) {
      shadowMapNode.inWorldPos = inWorldPos;
    }if (inViewPos != null) {
      shadowMapNode.inViewPosition = inViewPos;
    }shadowMapNode.depthMap = depthMap;
    return shadowMapNode;
  };
  ShaderModel$VertexStageBuilder.prototype.simpleVertexPositionNode = function () {
    return this.vec4TransformNode_9krp9t$(this.attrPositions().output, this.premultipliedMvpNode().outMvpMat);
  };
  ShaderModel$VertexStageBuilder.prototype.fullScreenQuadPositionNode_r20yfm$ = function (inTexCoords) {
    if (inTexCoords === void 0)
      inTexCoords = null;
    var quadNode = this.addNode_u9w9by$(new FullScreenQuadTexPosNode(this.stage));
    if (inTexCoords != null) {
      quadNode.inTexCoord = inTexCoords;
    }return quadNode;
  };
  ShaderModel$VertexStageBuilder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VertexStageBuilder',
    interfaces: [ShaderModel$StageBuilder]
  };
  function ShaderModel$FragmentStageBuilder($outer) {
    this.$outer = $outer;
    ShaderModel$StageBuilder.call(this, this.$outer, this.$outer.fragmentStageGraph);
  }
  ShaderModel$FragmentStageBuilder.prototype.multiLightNode_za3lpa$ = function (maxLights) {
    if (maxLights === void 0)
      maxLights = 4;
    return this.addNode_u9w9by$(new MultiLightNode(this.stage, maxLights));
  };
  ShaderModel$FragmentStageBuilder.prototype.singleLightNode_ycjtt8$ = function (light) {
    if (light === void 0)
      light = null;
    var lightNd = this.addNode_u9w9by$(new SingleLightNode(this.stage));
    if (light != null) {
      var lightDataNd = this.addNode_u9w9by$(new SingleLightUniformDataNode(this.stage));
      lightDataNd.light = light;
      lightNd.inLightPos = lightDataNd.outLightPos;
      lightNd.inLightDir = lightDataNd.outLightDir;
      lightNd.inLightColor = lightDataNd.outLightColor;
    }return lightNd;
  };
  ShaderModel$FragmentStageBuilder.prototype.deferredSimpleShadoweMapNode_dhoqzq$ = function (shadowMap, depthMapName, worldPos) {
    var $receiver = this.addNode_u9w9by$(new TextureNode(this.stage, depthMapName));
    $receiver.isDepthTexture = true;
    var depthMapNd = $receiver;
    var $receiver_0 = this.addNode_u9w9by$(new SimpleShadowMapTransformNode(shadowMap, this.stage));
    $receiver_0.inWorldPos = worldPos;
    var lightSpaceTf = $receiver_0;
    var $receiver_1 = this.addNode_u9w9by$(new SimpleShadowMapFragmentNode(this.stage));
    $receiver_1.inPosLightSpace = lightSpaceTf.outPosLightSpace;
    $receiver_1.depthMap = depthMapNd;
    return $receiver_1;
  };
  ShaderModel$FragmentStageBuilder.prototype.deferredCascadedShadoweMapNode_y1yrn$ = function (shadowMap, depthMapName, viewPos, worldPos) {
    var $receiver = this.addNode_u9w9by$(new TextureNode(this.stage, depthMapName));
    $receiver.isDepthTexture = true;
    $receiver.arraySize = shadowMap.numCascades;
    var depthMapNd = $receiver;
    var $receiver_0 = this.addNode_u9w9by$(new CascadedShadowMapTransformNode(shadowMap, this.stage));
    $receiver_0.inWorldPos = worldPos;
    var lightSpaceTf = $receiver_0;
    var $receiver_1 = this.addNode_u9w9by$(new CascadedShadowMapFragmentNode(shadowMap, this.stage));
    $receiver_1.inViewZ = this.channelNode_500t7j$(viewPos, 'z').output;
    $receiver_1.inPosLightSpace = lightSpaceTf.outPosLightSpace;
    $receiver_1.depthMap = depthMapNd;
    return $receiver_1;
  };
  ShaderModel$FragmentStageBuilder.prototype.unlitMaterialNode_r20yfm$ = function (albedo) {
    if (albedo === void 0)
      albedo = null;
    var mat = this.addNode_u9w9by$(new UnlitMaterialNode(this.stage));
    if (albedo != null) {
      mat.inColor = albedo;
    }return mat;
  };
  ShaderModel$FragmentStageBuilder.prototype.phongMaterialNode_8rwtp1$ = function (albedo, normal, fragPos, camPos, lightNode) {
    if (albedo === void 0)
      albedo = null;
    if (normal === void 0)
      normal = null;
    if (fragPos === void 0)
      fragPos = null;
    if (camPos === void 0)
      camPos = null;
    var mat = this.addNode_u9w9by$(new PhongMaterialNode(lightNode, this.stage));
    if (albedo != null) {
      mat.inAlbedo = albedo;
    }if (normal != null) {
      mat.inNormal = normal;
    }if (camPos != null) {
      mat.inCamPos = camPos;
    }if (fragPos != null) {
      mat.inFragPos = fragPos;
    }return mat;
  };
  ShaderModel$FragmentStageBuilder.prototype.pbrMaterialNode_od0lt5$ = function (lightNode, reflectionMap, brdfLut, albedo, normal, fragPos, camPos) {
    if (reflectionMap === void 0)
      reflectionMap = null;
    if (brdfLut === void 0)
      brdfLut = null;
    if (albedo === void 0)
      albedo = null;
    if (normal === void 0)
      normal = null;
    if (fragPos === void 0)
      fragPos = null;
    if (camPos === void 0)
      camPos = null;
    var mat = this.addNode_u9w9by$(new PbrMaterialNode(lightNode, reflectionMap, brdfLut, this.stage));
    if (albedo != null) {
      mat.inAlbedo = albedo;
    }if (normal != null) {
      mat.inNormal = normal;
    }if (camPos != null) {
      mat.inCamPos = camPos;
    }if (fragPos != null) {
      mat.inFragPos = fragPos;
    }return mat;
  };
  ShaderModel$FragmentStageBuilder.prototype.pbrLightNode_605fnh$ = function (lightNode) {
    return this.addNode_u9w9by$(new PbrLightNode(lightNode, this.stage));
  };
  ShaderModel$FragmentStageBuilder.prototype.colorOutput_a3v4si$ = function (color0, channels, alpha) {
    if (color0 === void 0)
      color0 = null;
    if (channels === void 0)
      channels = 1;
    if (alpha === void 0)
      alpha = null;
    var colorOut = this.addNode_u9w9by$(new FragmentColorOutNode(this.stage, channels));
    if (color0 != null) {
      colorOut.inColors[0] = color0;
    }colorOut.alpha = alpha;
    return colorOut;
  };
  ShaderModel$FragmentStageBuilder.prototype.depthOutput_r20yfm$ = function (depth) {
    if (depth === void 0)
      depth = null;
    var depthOut = this.addNode_u9w9by$(new FragmentDepthOutNode(this.stage));
    if (depth != null) {
      depthOut.inDepth = depth;
    }return depthOut;
  };
  ShaderModel$FragmentStageBuilder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FragmentStageBuilder',
    interfaces: [ShaderModel$StageBuilder]
  };
  ShaderModel.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShaderModel',
    interfaces: []
  };
  var vertexStage = defineInlineFunction('kool.de.fabmax.kool.pipeline.shadermodel.vertexStage_u626m1$', wrapFunction(function () {
    var ShaderModel$ShaderModel$VertexStageBuilder_init = _.de.fabmax.kool.pipeline.shadermodel.ShaderModel.VertexStageBuilder;
    return function ($receiver, block) {
      block(new ShaderModel$ShaderModel$VertexStageBuilder_init($receiver));
    };
  }));
  var fragmentStage = defineInlineFunction('kool.de.fabmax.kool.pipeline.shadermodel.fragmentStage_9jxysb$', wrapFunction(function () {
    var ShaderModel$ShaderModel$FragmentStageBuilder_init = _.de.fabmax.kool.pipeline.shadermodel.ShaderModel.FragmentStageBuilder;
    return function ($receiver, block) {
      block(new ShaderModel$ShaderModel$FragmentStageBuilder_init($receiver));
    };
  }));
  function ShaderNode(name, graph, allowedStages) {
    if (allowedStages === void 0)
      allowedStages = ShaderStage$ALL_getInstance().mask;
    this.name = name;
    this.graph = graph;
    this.allowedStages = allowedStages;
    this.dependencies = LinkedHashSet_init();
    var tmp$;
    var tmp$_0;
    tmp$_0 = this.graph;
    tmp$ = tmp$_0.nextNodeId;
    tmp$_0.nextNodeId = tmp$ + 1 | 0;
    this.nodeId = tmp$;
  }
  ShaderNode.prototype.dependsOn_lhtstx$ = function (nd) {
    if (nd != null && nd !== this) {
      this.dependencies.add_11rb$(nd);
    }};
  ShaderNode.prototype.dependsOn_7qvs0d$ = function (ndVar) {
    this.dependsOn_lhtstx$(ndVar.node);
  };
  ShaderNode.prototype.dependsOn_8ak6wm$ = function (ndVars) {
    var tmp$;
    for (tmp$ = 0; tmp$ !== ndVars.length; ++tmp$) {
      var element = ndVars[tmp$];
      this.dependsOn_7qvs0d$(element);
    }
  };
  ShaderNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    if (!((shaderGraph.stage.mask & this.allowedStages) !== 0)) {
      var message = 'Unallowed shader stage (' + shaderGraph.stage + ' for node ' + this.name;
      throw IllegalStateException_init(message.toString());
    }};
  ShaderNode.prototype.generateCode_626509$ = function (generator) {
  };
  ShaderNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShaderNode',
    interfaces: []
  };
  function ShaderNodeIoVar(variable, node) {
    if (node === void 0)
      node = null;
    this.variable = variable;
    this.node = node;
  }
  Object.defineProperty(ShaderNodeIoVar.prototype, 'name', {
    get: function () {
      return this.variable.name;
    }
  });
  ShaderNodeIoVar.prototype.declare = function () {
    return this.variable.declare();
  };
  ShaderNodeIoVar.prototype.ref1f = function () {
    return this.variable.ref1f();
  };
  ShaderNodeIoVar.prototype.ref2f = function () {
    return this.variable.ref2f();
  };
  ShaderNodeIoVar.prototype.ref3f = function () {
    return this.variable.ref3f();
  };
  ShaderNodeIoVar.prototype.ref4f = function () {
    return this.variable.ref4f();
  };
  ShaderNodeIoVar.prototype.refAsType_m7a9qd$ = function (targetType) {
    return this.variable.refAsType_m7a9qd$(targetType);
  };
  ShaderNodeIoVar.prototype.toString = function () {
    var tmp$;
    switch (this.variable.type.name) {
      case 'FLOAT':
        tmp$ = this.ref1f();
        break;
      case 'VEC_2F':
        tmp$ = this.ref2f();
        break;
      case 'VEC_3F':
        tmp$ = this.ref3f();
        break;
      case 'VEC_4F':
        tmp$ = this.ref4f();
        break;
      default:tmp$ = this.refAsType_m7a9qd$(this.variable.type);
        break;
    }
    return tmp$;
  };
  ShaderNodeIoVar.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShaderNodeIoVar',
    interfaces: []
  };
  function ShadowMapNode() {
    this.lightIndex = 0;
    this.depthMap_25rtms$_0 = null;
  }
  Object.defineProperty(ShadowMapNode.prototype, 'depthMap', {
    get: function () {
      return this.depthMap_25rtms$_0;
    },
    set: function (depthMap) {
      this.depthMap_25rtms$_0 = depthMap;
    }
  });
  ShadowMapNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShadowMapNode',
    interfaces: []
  };
  function SimpleShadowMapNode(shadowMap, vertexGraph, fragmentGraph) {
    ShadowMapNode.call(this);
    this.ifPosLightSpace_0 = new StageInterfaceNode('posLightSpace_' + vertexGraph.nextNodeId, vertexGraph, fragmentGraph);
    this.vertexNode = new SimpleShadowMapTransformNode(shadowMap, vertexGraph);
    this.fragmentNode = new SimpleShadowMapFragmentNode(fragmentGraph);
    this.lightIndex = shadowMap.lightIndex;
    vertexGraph.addNode_j0v1fw$(this.ifPosLightSpace_0.vertexNode);
    fragmentGraph.addNode_j0v1fw$(this.ifPosLightSpace_0.fragmentNode);
    this.ifPosLightSpace_0.input = this.vertexNode.outPosLightSpace;
    this.fragmentNode.inPosLightSpace = this.ifPosLightSpace_0.output;
  }
  Object.defineProperty(SimpleShadowMapNode.prototype, 'inWorldPos', {
    get: function () {
      return this.vertexNode.inWorldPos;
    },
    set: function (value) {
      this.vertexNode.inWorldPos = value;
    }
  });
  Object.defineProperty(SimpleShadowMapNode.prototype, 'inDepthOffset', {
    get: function () {
      return this.fragmentNode.inDepthOffset;
    },
    set: function (value) {
      this.fragmentNode.inDepthOffset = value;
    }
  });
  Object.defineProperty(SimpleShadowMapNode.prototype, 'depthMap', {
    get: function () {
      return this.fragmentNode.depthMap;
    },
    set: function (value) {
      this.fragmentNode.depthMap = value;
    }
  });
  Object.defineProperty(SimpleShadowMapNode.prototype, 'outShadowFac', {
    get: function () {
      return this.fragmentNode.outShadowFac;
    }
  });
  SimpleShadowMapNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SimpleShadowMapNode',
    interfaces: [ShadowMapNode]
  };
  function SimpleShadowMapTransformNode(shadowMap, graph) {
    ShaderNode.call(this, 'lightSpaceTf_' + graph.nextNodeId, graph);
    this.shadowMap = shadowMap;
    this.uShadowMapVP = new UniformMat4f(this.name + '_shadowMapVP');
    this.inWorldPos = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().ZERO));
    this.outPosLightSpace = new ShaderNodeIoVar(new ModelVar4f(this.name + '_posLightSpace'), this);
  }
  function SimpleShadowMapTransformNode$setup$lambda$lambda$lambda(this$SimpleShadowMapTransformNode) {
    return function () {
      return this$SimpleShadowMapTransformNode.uShadowMapVP;
    };
  }
  function SimpleShadowMapTransformNode$setup$lambda$lambda$lambda_0(this$SimpleShadowMapTransformNode) {
    return function (f, f_0) {
      this$SimpleShadowMapTransformNode.uShadowMapVP.value.set_d4zu6l$(this$SimpleShadowMapTransformNode.shadowMap.lightViewProjMat);
      return Unit;
    };
  }
  function SimpleShadowMapTransformNode$setup$lambda$lambda(this$SimpleShadowMapTransformNode) {
    return function ($receiver) {
      $receiver.unaryPlus_wq3w46$(SimpleShadowMapTransformNode$setup$lambda$lambda$lambda(this$SimpleShadowMapTransformNode));
      $receiver.onUpdate = SimpleShadowMapTransformNode$setup$lambda$lambda$lambda_0(this$SimpleShadowMapTransformNode);
      return Unit;
    };
  }
  SimpleShadowMapTransformNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_7qvs0d$(this.inWorldPos);
    shaderGraph.descriptorSet.uniformBuffer_2ydyu8$(this.name, [shaderGraph.stage], SimpleShadowMapTransformNode$setup$lambda$lambda(this));
  };
  SimpleShadowMapTransformNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$(this.outPosLightSpace.declare() + ' = ' + this.uShadowMapVP.name + ' * vec4(' + this.inWorldPos.ref3f() + ', 1.0);');
  };
  SimpleShadowMapTransformNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SimpleShadowMapTransformNode',
    interfaces: [ShaderNode]
  };
  function SimpleShadowMapFragmentNode(graph) {
    ShaderNode.call(this, 'shadowMap_' + graph.nextNodeId, graph, ShaderStage$FRAGMENT_SHADER_getInstance().mask);
    this.depthMap = null;
    this.inDepthOffset = new ShaderNodeIoVar(new ModelVar1fConst(-0.005));
    this.inPosLightSpace = new ShaderNodeIoVar(new ModelVar4fConst(Vec4f$Companion_getInstance().ZERO));
    this.outShadowFac = new ShaderNodeIoVar(new ModelVar1f(this.name + '_shadowFac'), this);
    this.useDithering = false;
  }
  SimpleShadowMapFragmentNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    var tmp$;
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$([this.inDepthOffset, this.inPosLightSpace]);
    tmp$ = this.depthMap;
    if (tmp$ == null) {
      throw KoolException_init('Depth map input not set');
    }this.dependsOn_lhtstx$(tmp$);
  };
  SimpleShadowMapFragmentNode.prototype.generateCode_626509$ = function (generator) {
    var tmp$;
    tmp$ = this.depthMap;
    if (tmp$ == null) {
      throw KoolException_init('Depth map input not set');
    }var depthTex = tmp$;
    var sampleBuilder = StringBuilder_init();
    var nSamples = {v: 0};
    if (this.useDithering) {
      sampleBuilder.append_61zpoe$('vec2 ' + this.name + '_offset = vec2(float(fract(gl_FragCoord.x * 0.5) > 0.25), float(fract(gl_FragCoord.y * 0.5) > 0.25));');
      var samplePattern = listOf([new Vec2f(-1.5, 0.5), new Vec2f(0.5, 0.5), new Vec2f(-1.5, -1.5), new Vec2f(0.5, -1.5)]);
      var tmp$_0;
      tmp$_0 = samplePattern.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        var projCoord = 'vec4(' + this.name + '_pos.xy + (' + this.name + '_offset + vec2(' + element.x + ', ' + element.y + ')) * ' + this.name + '_scale * ' + this.name + '_pos.w, ' + this.name + '_pos.z, ' + this.name + '_pos.w)';
        sampleBuilder.append_61zpoe$(this.outShadowFac.name + ' += ' + generator.sampleTexture2dDepth_puj7f4$(depthTex.name, projCoord) + ';' + '\n');
        nSamples.v = nSamples.v + 1 | 0;
      }
    } else {
      var samplePattern_0 = ArrayList_init_0();
      for (var y = 0; y <= 3; y++) {
        for (var x = 0; x <= 3; x++) {
          var element_0 = new Vec2f(-1.5 + x, -1.5 + y);
          samplePattern_0.add_11rb$(element_0);
        }
      }
      var tmp$_1;
      tmp$_1 = samplePattern_0.iterator();
      while (tmp$_1.hasNext()) {
        var element_1 = tmp$_1.next();
        var projCoord_0 = 'vec4(' + this.name + '_pos.xy + (vec2(' + element_1.x + ', ' + element_1.y + ')) * ' + this.name + '_scale * ' + this.name + '_pos.w, ' + this.name + '_pos.z, ' + this.name + '_pos.w)';
        sampleBuilder.append_61zpoe$(this.outShadowFac.name + ' += ' + generator.sampleTexture2dDepth_puj7f4$(depthTex.name, projCoord_0) + ';' + '\n');
        nSamples.v = nSamples.v + 1 | 0;
      }
    }
    generator.appendMain_61zpoe$('\n' + '                float ' + this.name + '_size = float(textureSize(' + depthTex.name + ', 0).x);' + '\n' + '                float ' + this.name + '_scale = 1.0 / float(' + this.name + '_size);' + '\n' + '                vec4 ' + this.name + '_pos = ' + this.inPosLightSpace.ref4f() + ';' + '\n' + '                ' + this.name + '_pos.z += ' + this.inDepthOffset.ref1f() + ';' + '\n' + '                ' + this.outShadowFac.declare() + ' = 0.0;' + '\n' + '                ' + sampleBuilder + '\n' + '                ' + this.outShadowFac.name + ' *= ' + 1.0 / nSamples.v + ';' + '\n' + '            ');
  };
  SimpleShadowMapFragmentNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SimpleShadowMapFragmentNode',
    interfaces: [ShaderNode]
  };
  function CascadedShadowMapNode(shadowMap, vertexGraph, fragmentGraph) {
    ShadowMapNode.call(this);
    this.shadowMap = shadowMap;
    this.inViewPosition = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().ZERO));
    this.vertexNode = new CascadedShadowMapTransformNode(this.shadowMap, vertexGraph);
    this.fragmentNode = new CascadedShadowMapFragmentNode(this.shadowMap, fragmentGraph);
    this.helperNd_0 = new CascadedShadowMapNode$CascadedShadowHelperNd(this, vertexGraph);
    this.posLightSpace_0 = new ShaderNodeIoVar(new ModelVar4f('ifPosLightSpace_' + vertexGraph.nextNodeId + '[' + this.shadowMap.numCascades + ']'));
    this.ifViewZ_0 = new ShaderNodeIoVar(new ModelVar1f('outViewZ_' + this.helperNd_0.nodeId));
    this.lightIndex = this.shadowMap.lightIndex;
    vertexGraph.addNode_j0v1fw$(this.helperNd_0);
    var $receiver = fragmentGraph.inputs;
    var element = vertexGraph.addStageOutput_ca2n0y$(this.posLightSpace_0.variable, false, this.shadowMap.numCascades);
    $receiver.add_11rb$(element);
    var $receiver_0 = fragmentGraph.inputs;
    var element_0 = vertexGraph.addStageOutput_ca2n0y$(this.ifViewZ_0.variable, false);
    $receiver_0.add_11rb$(element_0);
    this.fragmentNode.inPosLightSpace = this.posLightSpace_0;
    this.fragmentNode.inViewZ = this.ifViewZ_0;
  }
  Object.defineProperty(CascadedShadowMapNode.prototype, 'inWorldPos', {
    get: function () {
      return this.vertexNode.inWorldPos;
    },
    set: function (value) {
      this.vertexNode.inWorldPos = value;
    }
  });
  Object.defineProperty(CascadedShadowMapNode.prototype, 'inDepthOffset', {
    get: function () {
      return this.fragmentNode.inDepthOffset;
    },
    set: function (value) {
      this.fragmentNode.inDepthOffset = value;
    }
  });
  Object.defineProperty(CascadedShadowMapNode.prototype, 'depthMap', {
    get: function () {
      return this.fragmentNode.depthMap;
    },
    set: function (value) {
      this.fragmentNode.depthMap = value;
    }
  });
  Object.defineProperty(CascadedShadowMapNode.prototype, 'outShadowFac', {
    get: function () {
      return this.fragmentNode.outShadowFac;
    }
  });
  function CascadedShadowMapNode$CascadedShadowHelperNd($outer, graph) {
    this.$outer = $outer;
    ShaderNode.call(this, 'cascadedShadowHelper_' + graph.nextNodeId, graph);
  }
  CascadedShadowMapNode$CascadedShadowHelperNd.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$([this.$outer.inViewPosition, this.$outer.vertexNode.outPosLightSpace]);
  };
  CascadedShadowMapNode$CascadedShadowHelperNd.prototype.generateCode_626509$ = function (generator) {
    var tmp$;
    generator.appendMain_61zpoe$(this.$outer.ifViewZ_0.name + ' = ' + this.$outer.inViewPosition + '.z;');
    tmp$ = this.$outer.shadowMap.numCascades;
    for (var i = 0; i < tmp$; i++) {
      generator.appendMain_61zpoe$(substringBefore(this.$outer.posLightSpace_0.name, 91) + '[' + i + '] = ' + substringBefore(this.$outer.vertexNode.outPosLightSpace.name, 91) + '[' + i + '];');
    }
  };
  CascadedShadowMapNode$CascadedShadowHelperNd.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CascadedShadowHelperNd',
    interfaces: [ShaderNode]
  };
  CascadedShadowMapNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CascadedShadowMapNode',
    interfaces: [ShadowMapNode]
  };
  function CascadedShadowMapTransformNode(shadowMap, graph) {
    ShaderNode.call(this, 'lightSpaceTf_' + graph.nextNodeId, graph);
    this.shadowMap = shadowMap;
    this.uShadowMapVP = new UniformMat4fv(this.name + '_shadowMapVPs', this.shadowMap.numCascades);
    this.inWorldPos = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().ZERO));
    this.outPosLightSpace = new ShaderNodeIoVar(new ModelVar4f(this.name + '_posLightSpace[' + this.shadowMap.numCascades + ']'), this);
  }
  function CascadedShadowMapTransformNode$setup$lambda$lambda$lambda(this$CascadedShadowMapTransformNode) {
    return function () {
      return this$CascadedShadowMapTransformNode.uShadowMapVP;
    };
  }
  function CascadedShadowMapTransformNode$setup$lambda$lambda$lambda_0(this$CascadedShadowMapTransformNode) {
    return function (f, f_0) {
      var tmp$;
      tmp$ = this$CascadedShadowMapTransformNode.shadowMap.numCascades;
      for (var i = 0; i < tmp$; i++) {
        this$CascadedShadowMapTransformNode.uShadowMapVP.value[i].set_d4zu6l$(this$CascadedShadowMapTransformNode.shadowMap.cascades[i].lightViewProjMat);
      }
      return Unit;
    };
  }
  function CascadedShadowMapTransformNode$setup$lambda$lambda(this$CascadedShadowMapTransformNode) {
    return function ($receiver) {
      $receiver.unaryPlus_wq3w46$(CascadedShadowMapTransformNode$setup$lambda$lambda$lambda(this$CascadedShadowMapTransformNode));
      $receiver.onUpdate = CascadedShadowMapTransformNode$setup$lambda$lambda$lambda_0(this$CascadedShadowMapTransformNode);
      return Unit;
    };
  }
  CascadedShadowMapTransformNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_7qvs0d$(this.inWorldPos);
    shaderGraph.descriptorSet.uniformBuffer_2ydyu8$(this.name, [shaderGraph.stage], CascadedShadowMapTransformNode$setup$lambda$lambda(this));
  };
  CascadedShadowMapTransformNode.prototype.generateCode_626509$ = function (generator) {
    var tmp$;
    generator.appendMain_61zpoe$(this.outPosLightSpace.declare() + ';');
    tmp$ = this.shadowMap.numCascades;
    for (var i = 0; i < tmp$; i++) {
      generator.appendMain_61zpoe$(substringBefore(this.outPosLightSpace.name, 91) + '[' + i + '] = ' + this.uShadowMapVP.name + '[' + i + '] * vec4(' + this.inWorldPos.ref3f() + ', 1.0);');
    }
  };
  CascadedShadowMapTransformNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CascadedShadowMapTransformNode',
    interfaces: [ShaderNode]
  };
  function CascadedShadowMapFragmentNode(shadowMap, graph) {
    ShaderNode.call(this, 'cascadedShadowMap_' + graph.nextNodeId, graph, ShaderStage$FRAGMENT_SHADER_getInstance().mask);
    this.shadowMap = shadowMap;
    this.uViewSpaceRanges_0 = new Uniform1fv('uClipSpaceRanges_' + this.name, this.shadowMap.numCascades);
    this.depthMap = null;
    this.inDepthOffset = new ShaderNodeIoVar(new ModelVar1fConst(-0.0025));
    this.inPosLightSpace = new ShaderNodeIoVar(new ModelVar4fConst(Vec4f$Companion_getInstance().ZERO));
    this.inViewZ = new ShaderNodeIoVar(new ModelVar1fConst(0.0));
    this.outShadowFac = new ShaderNodeIoVar(new ModelVar1f(this.name + '_shadowFac'), this);
    this.useDithering = false;
  }
  function CascadedShadowMapFragmentNode$setup$lambda$lambda$lambda(this$CascadedShadowMapFragmentNode) {
    return function () {
      return this$CascadedShadowMapFragmentNode.uViewSpaceRanges_0;
    };
  }
  function CascadedShadowMapFragmentNode$setup$lambda$lambda$lambda_0(this$CascadedShadowMapFragmentNode) {
    return function (f, f_0) {
      var tmp$;
      tmp$ = this$CascadedShadowMapFragmentNode.shadowMap.numCascades;
      for (var i = 0; i < tmp$; i++) {
        this$CascadedShadowMapFragmentNode.uViewSpaceRanges_0.value[i] = this$CascadedShadowMapFragmentNode.shadowMap.viewSpaceRanges[i];
      }
      return Unit;
    };
  }
  function CascadedShadowMapFragmentNode$setup$lambda$lambda(this$CascadedShadowMapFragmentNode) {
    return function ($receiver) {
      $receiver.unaryPlus_wq3w46$(CascadedShadowMapFragmentNode$setup$lambda$lambda$lambda(this$CascadedShadowMapFragmentNode));
      $receiver.onUpdate = CascadedShadowMapFragmentNode$setup$lambda$lambda$lambda_0(this$CascadedShadowMapFragmentNode);
      return Unit;
    };
  }
  CascadedShadowMapFragmentNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    var tmp$;
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    tmp$ = this.depthMap;
    if (tmp$ == null) {
      throw KoolException_init('Depth map input not set');
    }this.dependsOn_lhtstx$(tmp$);
    this.dependsOn_8ak6wm$([this.inDepthOffset, this.inPosLightSpace, this.inViewZ]);
    shaderGraph.descriptorSet.uniformBuffer_2ydyu8$(this.name, [shaderGraph.stage], CascadedShadowMapFragmentNode$setup$lambda$lambda(this));
  };
  CascadedShadowMapFragmentNode.prototype.generateCode_626509$ = function (generator) {
    var tmp$, tmp$_0;
    tmp$ = this.depthMap;
    if (tmp$ == null) {
      throw KoolException_init('Depth map input not set');
    }var depthTex = tmp$;
    var sampleBuilder = StringBuilder_init();
    var nSamples = {v: 0};
    if (this.useDithering) {
      sampleBuilder.append_61zpoe$('vec2 offset = vec2(float(fract(gl_FragCoord.x * 0.5) > 0.25), float(fract(gl_FragCoord.y * 0.5) > 0.25));');
      var samplePattern = listOf([new Vec2f(-1.5, 0.5), new Vec2f(0.5, 0.5), new Vec2f(-1.5, -1.5), new Vec2f(0.5, -1.5)]);
      var tmp$_1;
      tmp$_1 = samplePattern.iterator();
      while (tmp$_1.hasNext()) {
        var element = tmp$_1.next();
        var projCoord = 'vec4(projPos.xy + (offset + vec2(' + element.x + ', ' + element.y + ')) * texScale * projPos.w, projPos.z, projPos.w)';
        sampleBuilder.append_61zpoe$('shadowFac += ' + generator.sampleTexture2dDepth_puj7f4$('shadowTex', projCoord) + ';' + '\n');
        nSamples.v = nSamples.v + 1 | 0;
      }
    } else {
      var samplePattern_0 = ArrayList_init_0();
      for (var y = 0; y <= 3; y++) {
        for (var x = 0; x <= 3; x++) {
          var element_0 = new Vec2f(-1.5 + x, -1.5 + y);
          samplePattern_0.add_11rb$(element_0);
        }
      }
      var tmp$_2;
      tmp$_2 = samplePattern_0.iterator();
      while (tmp$_2.hasNext()) {
        var element_1 = tmp$_2.next();
        var projCoord_0 = 'vec4(projPos.xy + (vec2(' + element_1.x + ', ' + element_1.y + ')) * texScale * projPos.w, projPos.z, projPos.w)';
        sampleBuilder.append_61zpoe$('shadowFac += ' + generator.sampleTexture2dDepth_puj7f4$('shadowTex', projCoord_0) + ';' + '\n');
        nSamples.v = nSamples.v + 1 | 0;
      }
    }
    generator.appendFunction_puj7f4$('cascadedShadowFac', '\n' + '            float cascadedShadowFac(sampler2DShadow shadowTex, vec4 projPos, float depthOffset) {' + '\n' + '                float texSize = float(textureSize(shadowTex, 0).x);' + '\n' + '                float texScale = 1.0 / float(texSize);' + '\n' + '                projPos.z += depthOffset;' + '\n' + '                float shadowFac = 0.0;' + '\n' + '                if (projPos.z >= 1.0) {' + '\n' + '                    shadowFac = 1.0;' + '\n' + '                } else {' + '\n' + '                    ' + sampleBuilder + '\n' + '                    shadowFac *= ' + 1.0 / nSamples.v + ';' + '\n' + '                }' + '\n' + '                return shadowFac;' + '\n' + '            }' + '\n' + '        ');
    generator.appendMain_61zpoe$('\n' + '                ' + this.outShadowFac.declare() + ' = 1.0;' + '\n' + '            ');
    tmp$_0 = this.shadowMap.numCascades;
    for (var i = 0; i < tmp$_0; i++) {
      generator.appendMain_61zpoe$('\n' + '                    if (' + this.inViewZ.ref1f() + ' >= ' + this.uViewSpaceRanges_0.name + '[' + i + ']) {' + '\n' + '                        ' + this.outShadowFac.name + ' = cascadedShadowFac(' + depthTex.name + '[' + i + '], ' + substringBefore(this.inPosLightSpace.name, 91) + '[' + i + '], ' + this.inDepthOffset.ref1f() + ');' + '\n' + '                    }' + '\n' + '                ');
      if (i < (this.shadowMap.numCascades - 1 | 0)) {
        generator.appendMain_61zpoe$(' else ');
      }}
  };
  CascadedShadowMapFragmentNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CascadedShadowMapFragmentNode',
    interfaces: [ShaderNode]
  };
  function Vec3TransformNode(graph, w, invert) {
    if (w === void 0)
      w = 1.0;
    if (invert === void 0)
      invert = false;
    ShaderNode.call(this, 'vec3MatTransform', graph);
    this.w = w;
    this.invert = invert;
    this.inMat = null;
    this.inVec = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().ZERO));
    this.outVec3 = new ShaderNodeIoVar(new ModelVar3f('vec3MatTransform' + this.nodeId + '_out'), this);
  }
  Vec3TransformNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    var tmp$, tmp$_0;
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    tmp$ = this.inVec;
    tmp$_0 = this.inMat;
    if (tmp$_0 == null) {
      throw KoolException_init('Matrix input not set');
    }this.dependsOn_8ak6wm$([tmp$, tmp$_0]);
  };
  Vec3TransformNode.prototype.generateCode_626509$ = function (generator) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.inMat;
    if (tmp$ == null) {
      throw KoolException_init('Matrix input not set');
    }var mat = tmp$;
    if (this.inVec.variable.type === GlslType$VEC_4F_getInstance()) {
      tmp$_0 = this.inVec.ref4f();
    } else {
      tmp$_0 = 'vec4(' + this.inVec.ref3f() + ', ' + this.w + ')';
    }
    var input = tmp$_0;
    if (this.invert) {
      tmp$_1 = '-';
    } else {
      tmp$_1 = '';
    }
    var sign = tmp$_1;
    generator.appendMain_61zpoe$(this.outVec3.declare() + ' = ' + sign + '(' + mat.refAsType_m7a9qd$(GlslType$MAT_4F_getInstance()) + ' * ' + input + ').xyz;');
  };
  Vec3TransformNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec3TransformNode',
    interfaces: [ShaderNode]
  };
  function Vec4TransformNode(graph, w) {
    if (w === void 0)
      w = 1.0;
    ShaderNode.call(this, 'vec4MatTransform', graph);
    this.w = w;
    this.inMat = null;
    this.inVec = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().ZERO));
    this.outVec4 = new ShaderNodeIoVar(new ModelVar4f('vec4MatTransform' + this.nodeId + '_out'), this);
  }
  Vec4TransformNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    var tmp$, tmp$_0;
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    tmp$ = this.inVec;
    tmp$_0 = this.inMat;
    if (tmp$_0 == null) {
      throw KoolException_init('Matrix input not set');
    }this.dependsOn_8ak6wm$([tmp$, tmp$_0]);
  };
  Vec4TransformNode.prototype.generateCode_626509$ = function (generator) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$_0 = (tmp$ = this.inMat) != null ? tmp$.variable : null;
    if (tmp$_0 == null) {
      throw KoolException_init('Matrix input not set');
    }var mvp = tmp$_0;
    if (this.inVec.variable.type === GlslType$VEC_4F_getInstance()) {
      tmp$_1 = this.inVec.ref4f();
    } else {
      tmp$_1 = 'vec4(' + this.inVec.ref3f() + ', ' + this.w + ')';
    }
    var input = tmp$_1;
    generator.appendMain_61zpoe$(this.outVec4.declare() + ' = ' + mvp.refAsType_m7a9qd$(GlslType$MAT_4F_getInstance()) + ' * ' + input + ';');
  };
  Vec4TransformNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec4TransformNode',
    interfaces: [ShaderNode]
  };
  function UniformBufferPremultipliedMvp(graph) {
    ShaderNode.call(this, 'UboPremultipliedMvp', graph);
    this.uMvp = new UniformMat4f('modelViewProj');
    this.outMvpMat = new ShaderNodeIoVar(new ModelVarMat4f(this.uMvp.name), this);
    this.visibleIn_0 = mutableSetOf([graph.stage]);
  }
  UniformBufferPremultipliedMvp.prototype.addToStage_llmhyc$ = function (graph) {
    var copy = new UniformBufferPremultipliedMvp$StageCopy(this, graph);
    this.visibleIn_0.add_11rb$(graph.stage);
    graph.addNode_j0v1fw$(copy);
    return copy;
  };
  function UniformBufferPremultipliedMvp$setup$lambda$lambda$lambda(this$UniformBufferPremultipliedMvp) {
    return function () {
      return this$UniformBufferPremultipliedMvp.uMvp;
    };
  }
  function UniformBufferPremultipliedMvp$setup$lambda$lambda$lambda_0(this$UniformBufferPremultipliedMvp) {
    return function (f, cmd) {
      this$UniformBufferPremultipliedMvp.uMvp.value.set_d4zu6j$(cmd.mvpMat);
      return Unit;
    };
  }
  function UniformBufferPremultipliedMvp$setup$lambda$lambda(this$UniformBufferPremultipliedMvp) {
    return function ($receiver) {
      addAll($receiver.stages, this$UniformBufferPremultipliedMvp.visibleIn_0);
      $receiver.unaryPlus_wq3w46$(UniformBufferPremultipliedMvp$setup$lambda$lambda$lambda(this$UniformBufferPremultipliedMvp));
      $receiver.onUpdate = UniformBufferPremultipliedMvp$setup$lambda$lambda$lambda_0(this$UniformBufferPremultipliedMvp);
      return Unit;
    };
  }
  UniformBufferPremultipliedMvp.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    shaderGraph.descriptorSet.uniformBuffer_2ydyu8$(this.name, [], UniformBufferPremultipliedMvp$setup$lambda$lambda(this));
  };
  function UniformBufferPremultipliedMvp$StageCopy($outer, graph) {
    this.$outer = $outer;
    ShaderNode.call(this, 'UboPremultipliedMvp.copy', graph);
    this.outMvpMat = new ShaderNodeIoVar(new ModelVarMat4f(this.$outer.uMvp.name), this);
  }
  UniformBufferPremultipliedMvp$StageCopy.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StageCopy',
    interfaces: [ShaderNode]
  };
  UniformBufferPremultipliedMvp.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UniformBufferPremultipliedMvp',
    interfaces: [ShaderNode]
  };
  function UniformBufferMvp(graph) {
    ShaderNode.call(this, 'UboMvp', graph);
    this.uModelMat = new UniformMat4f('uModelMat');
    this.uViewMat = new UniformMat4f('uViewMat');
    this.uProjMat = new UniformMat4f('uProjMat');
    this.uCamPos = new Uniform4f('uCamPos');
    this.uViewport = new Uniform4f('uViewport');
    this.outModelMat = new ShaderNodeIoVar(new ModelVarMat4f(this.uModelMat.name), this);
    this.outViewMat = new ShaderNodeIoVar(new ModelVarMat4f(this.uViewMat.name), this);
    this.outProjMat = new ShaderNodeIoVar(new ModelVarMat4f(this.uProjMat.name), this);
    this.outCamPos = new ShaderNodeIoVar(new ModelVar4f(this.uCamPos.name), this);
    this.outViewport = new ShaderNodeIoVar(new ModelVar4f(this.uViewport.name), this);
    this.outMvpMat = new ShaderNodeIoVar(new ModelVarMat4f('uMvp_outMvp'), this);
    this.visibleIn_0 = mutableSetOf([graph.stage]);
  }
  UniformBufferMvp.prototype.addToStage_llmhyc$ = function (graph) {
    var copy = new UniformBufferMvp$StageCopy(this, graph);
    this.visibleIn_0.add_11rb$(graph.stage);
    graph.addNode_j0v1fw$(copy);
    return copy;
  };
  function UniformBufferMvp$setup$lambda$lambda$lambda(this$UniformBufferMvp) {
    return function () {
      return this$UniformBufferMvp.uModelMat;
    };
  }
  function UniformBufferMvp$setup$lambda$lambda$lambda_0(this$UniformBufferMvp) {
    return function () {
      return this$UniformBufferMvp.uViewMat;
    };
  }
  function UniformBufferMvp$setup$lambda$lambda$lambda_1(this$UniformBufferMvp) {
    return function () {
      return this$UniformBufferMvp.uProjMat;
    };
  }
  function UniformBufferMvp$setup$lambda$lambda$lambda_2(this$UniformBufferMvp) {
    return function () {
      return this$UniformBufferMvp.uCamPos;
    };
  }
  function UniformBufferMvp$setup$lambda$lambda$lambda_3(this$UniformBufferMvp) {
    return function () {
      return this$UniformBufferMvp.uViewport;
    };
  }
  function UniformBufferMvp$setup$lambda$lambda$lambda_4(this$UniformBufferMvp) {
    return function (f, cmd) {
      this$UniformBufferMvp.uModelMat.value.set_d4zu6j$(cmd.modelMat);
      this$UniformBufferMvp.uViewMat.value.set_d4zu6j$(cmd.viewMat);
      this$UniformBufferMvp.uProjMat.value.set_d4zu6j$(cmd.projMat);
      this$UniformBufferMvp.uCamPos.value.set_2qa7tb$(cmd.renderPass.camera.globalPos, 1.0);
      var $receiver = cmd.renderPass.viewport;
      this$UniformBufferMvp.uViewport.value.set_7b5o5w$($receiver.x, $receiver.ySigned, $receiver.width, $receiver.heightSigned);
      return Unit;
    };
  }
  function UniformBufferMvp$setup$lambda$lambda(this$UniformBufferMvp) {
    return function ($receiver) {
      addAll($receiver.stages, this$UniformBufferMvp.visibleIn_0);
      $receiver.unaryPlus_wq3w46$(UniformBufferMvp$setup$lambda$lambda$lambda(this$UniformBufferMvp));
      $receiver.unaryPlus_wq3w46$(UniformBufferMvp$setup$lambda$lambda$lambda_0(this$UniformBufferMvp));
      $receiver.unaryPlus_wq3w46$(UniformBufferMvp$setup$lambda$lambda$lambda_1(this$UniformBufferMvp));
      $receiver.unaryPlus_wq3w46$(UniformBufferMvp$setup$lambda$lambda$lambda_2(this$UniformBufferMvp));
      $receiver.unaryPlus_wq3w46$(UniformBufferMvp$setup$lambda$lambda$lambda_3(this$UniformBufferMvp));
      $receiver.onUpdate = UniformBufferMvp$setup$lambda$lambda$lambda_4(this$UniformBufferMvp);
      return Unit;
    };
  }
  UniformBufferMvp.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    shaderGraph.descriptorSet.uniformBuffer_2ydyu8$(this.name, [shaderGraph.stage], UniformBufferMvp$setup$lambda$lambda(this));
  };
  UniformBufferMvp.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$(this.outMvpMat.declare() + ' = ' + this.outProjMat.name + ' * ' + this.outViewMat.name + ' * ' + this.outModelMat.name + ';');
  };
  function UniformBufferMvp$StageCopy($outer, graph) {
    this.$outer = $outer;
    ShaderNode.call(this, 'UboPremultipliedMvp.copy', graph);
    this.outModelMat = new ShaderNodeIoVar(new ModelVarMat4f(this.$outer.uModelMat.name), this);
    this.outViewMat = new ShaderNodeIoVar(new ModelVarMat4f(this.$outer.uViewMat.name), this);
    this.outProjMat = new ShaderNodeIoVar(new ModelVarMat4f(this.$outer.uProjMat.name), this);
    this.outCamPos = new ShaderNodeIoVar(new ModelVar4f(this.$outer.uCamPos.name), this);
    this.outViewport = new ShaderNodeIoVar(new ModelVar4f(this.$outer.uViewport.name), this);
    this.outMvpMat = new ShaderNodeIoVar(new ModelVarMat4f('uMvp_outMvp'), this);
  }
  UniformBufferMvp$StageCopy.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$(this.outMvpMat.declare() + ' = ' + this.outProjMat.name + ' * ' + this.outViewMat.name + ' * ' + this.outModelMat.name + ';');
  };
  UniformBufferMvp$StageCopy.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StageCopy',
    interfaces: [ShaderNode]
  };
  UniformBufferMvp.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UniformBufferMvp',
    interfaces: [ShaderNode]
  };
  function TextureNode(graph, name) {
    if (name === void 0)
      name = 'tex2d_' + graph.nextNodeId;
    ShaderNode.call(this, name, graph);
    this.visibleIn = mutableSetOf([graph.stage]);
    this.sampler_put5e8$_0 = this.sampler_put5e8$_0;
    this.arraySize = 1;
    this.isDepthTexture = false;
  }
  Object.defineProperty(TextureNode.prototype, 'sampler', {
    get: function () {
      if (this.sampler_put5e8$_0 == null)
        return throwUPAE('sampler');
      return this.sampler_put5e8$_0;
    },
    set: function (sampler) {
      this.sampler_put5e8$_0 = sampler;
    }
  });
  function TextureNode$setup$lambda$lambda$lambda(this$TextureNode) {
    return function (it) {
      this$TextureNode.sampler = it;
      return Unit;
    };
  }
  TextureNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    var $receiver = shaderGraph.descriptorSet;
    var $receiver_0 = new TextureSampler$Builder();
    $receiver_0.arraySize = this.arraySize;
    $receiver_0.isDepthSampler = this.isDepthTexture;
    addAll($receiver_0.stages, this.visibleIn);
    $receiver_0.name = this.name;
    $receiver_0.onCreate = TextureNode$setup$lambda$lambda$lambda(this);
    $receiver.unaryPlus_ngusss$($receiver_0);
  };
  TextureNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextureNode',
    interfaces: [ShaderNode]
  };
  function CubeMapNode(graph, name) {
    if (name === void 0)
      name = 'texCube_' + graph.nextNodeId;
    ShaderNode.call(this, name, graph);
    this.visibleIn = mutableSetOf([graph.stage]);
    this.sampler_1a0grg$_0 = this.sampler_1a0grg$_0;
  }
  Object.defineProperty(CubeMapNode.prototype, 'sampler', {
    get: function () {
      if (this.sampler_1a0grg$_0 == null)
        return throwUPAE('sampler');
      return this.sampler_1a0grg$_0;
    },
    set: function (sampler) {
      this.sampler_1a0grg$_0 = sampler;
    }
  });
  function CubeMapNode$setup$lambda$lambda$lambda(this$CubeMapNode) {
    return function (it) {
      this$CubeMapNode.sampler = it;
      return Unit;
    };
  }
  CubeMapNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    var $receiver = shaderGraph.descriptorSet;
    var $receiver_0 = new CubeMapSampler$Builder();
    addAll($receiver_0.stages, this.visibleIn);
    $receiver_0.name = this.name;
    $receiver_0.onCreate = CubeMapNode$setup$lambda$lambda$lambda(this);
    $receiver.unaryPlus_ngusss$($receiver_0);
  };
  CubeMapNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CubeMapNode',
    interfaces: [ShaderNode]
  };
  function PushConstantNode(name, graph) {
    ShaderNode.call(this, name, graph);
    this.visibleIn = mutableSetOf([graph.stage]);
  }
  function PushConstantNode$setup$lambda$lambda(this$PushConstantNode) {
    return function () {
      return this$PushConstantNode.uniform;
    };
  }
  PushConstantNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    var $receiver = shaderGraph.pushConstants;
    addAll($receiver.stages, this.visibleIn);
    $receiver.unaryPlus_wq3w46$(PushConstantNode$setup$lambda$lambda(this));
  };
  PushConstantNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PushConstantNode',
    interfaces: [ShaderNode]
  };
  function PushConstantNode1f(uniform, graph) {
    PushConstantNode.call(this, uniform.name, graph);
    this.uniform_24s88i$_0 = uniform;
    this.output_6ls89f$_0 = new ShaderNodeIoVar(new ModelVar1f(this.name), this);
  }
  Object.defineProperty(PushConstantNode1f.prototype, 'uniform', {
    get: function () {
      return this.uniform_24s88i$_0;
    }
  });
  Object.defineProperty(PushConstantNode1f.prototype, 'output', {
    get: function () {
      return this.output_6ls89f$_0;
    }
  });
  PushConstantNode1f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PushConstantNode1f',
    interfaces: [PushConstantNode]
  };
  function PushConstantNode2f(uniform, graph) {
    PushConstantNode.call(this, uniform.name, graph);
    this.uniform_rl2ob1$_0 = uniform;
    this.output_9us71w$_0 = new ShaderNodeIoVar(new ModelVar2f(this.name), this);
  }
  Object.defineProperty(PushConstantNode2f.prototype, 'uniform', {
    get: function () {
      return this.uniform_rl2ob1$_0;
    }
  });
  Object.defineProperty(PushConstantNode2f.prototype, 'output', {
    get: function () {
      return this.output_9us71w$_0;
    }
  });
  PushConstantNode2f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PushConstantNode2f',
    interfaces: [PushConstantNode]
  };
  function PushConstantNode3f(uniform, graph) {
    PushConstantNode.call(this, uniform.name, graph);
    this.uniform_dq6h4k$_0 = uniform;
    this.output_d3s5ud$_0 = new ShaderNodeIoVar(new ModelVar3f(this.name), this);
  }
  Object.defineProperty(PushConstantNode3f.prototype, 'uniform', {
    get: function () {
      return this.uniform_dq6h4k$_0;
    }
  });
  Object.defineProperty(PushConstantNode3f.prototype, 'output', {
    get: function () {
      return this.output_d3s5ud$_0;
    }
  });
  PushConstantNode3f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PushConstantNode3f',
    interfaces: [PushConstantNode]
  };
  function PushConstantNode4f(uniform, graph) {
    PushConstantNode.call(this, uniform.name, graph);
    this.uniform_fzofez$_0 = uniform;
    this.output_gcs4mu$_0 = new ShaderNodeIoVar(new ModelVar4f(this.name), this);
  }
  Object.defineProperty(PushConstantNode4f.prototype, 'uniform', {
    get: function () {
      return this.uniform_fzofez$_0;
    }
  });
  Object.defineProperty(PushConstantNode4f.prototype, 'output', {
    get: function () {
      return this.output_gcs4mu$_0;
    }
  });
  PushConstantNode4f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PushConstantNode4f',
    interfaces: [PushConstantNode]
  };
  function PushConstantNodeColor(uniform, graph) {
    PushConstantNode.call(this, uniform.name, graph);
    this.uniform_o737wi$_0 = uniform;
    this.output_yy7l5r$_0 = new ShaderNodeIoVar(new ModelVar4f(this.name), this);
  }
  Object.defineProperty(PushConstantNodeColor.prototype, 'uniform', {
    get: function () {
      return this.uniform_o737wi$_0;
    }
  });
  Object.defineProperty(PushConstantNodeColor.prototype, 'output', {
    get: function () {
      return this.output_yy7l5r$_0;
    }
  });
  PushConstantNodeColor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PushConstantNodeColor',
    interfaces: [PushConstantNode]
  };
  function TextureSamplerNode(texture, graph, premultiply) {
    if (premultiply === void 0)
      premultiply = false;
    ShaderNode.call(this, 'tex_sampler_' + texture.name + '_' + graph.nextNodeId, graph);
    this.texture = texture;
    this.premultiply = premultiply;
    this.inTexCoord = new ShaderNodeIoVar(new ModelVar2fConst(Vec2f$Companion_getInstance().ZERO));
    this.outColor = new ShaderNodeIoVar(new ModelVar4f(this.name + '_outColor'), this);
    this.texLod = null;
  }
  TextureSamplerNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    var tmp$;
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_lhtstx$(this.texture);
    this.dependsOn_7qvs0d$(this.inTexCoord);
    if ((tmp$ = this.texLod) != null) {
      this.dependsOn_7qvs0d$(tmp$);
    }};
  TextureSamplerNode.prototype.generateCode_626509$ = function (generator) {
    var lod = this.texLod;
    if (lod != null) {
      generator.appendMain_61zpoe$(this.outColor.declare() + ' = ' + generator.sampleTexture2d_buzeal$(this.texture.name, this.inTexCoord.ref2f(), lod.ref1f()) + ';');
    } else {
      generator.appendMain_61zpoe$(this.outColor.declare() + ' = ' + generator.sampleTexture2d_buzeal$(this.texture.name, this.inTexCoord.ref2f()) + ';');
    }
    if (this.premultiply) {
      generator.appendMain_61zpoe$(this.outColor.ref3f() + ' *= ' + this.outColor.ref4f() + '.a;');
    }};
  TextureSamplerNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextureSamplerNode',
    interfaces: [ShaderNode]
  };
  function CubeMapSamplerNode(cubeMap, graph, premultiply) {
    if (premultiply === void 0)
      premultiply = false;
    ShaderNode.call(this, 'cubeSampler_' + cubeMap.name + '_' + graph.nextNodeId, graph);
    this.cubeMap = cubeMap;
    this.premultiply = premultiply;
    this.inTexCoord = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().NEG_X_AXIS));
    this.outColor = new ShaderNodeIoVar(new ModelVar4f(this.name + '_outColor'), this);
    this.texLod = null;
  }
  CubeMapSamplerNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    var tmp$;
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_lhtstx$(this.cubeMap);
    this.dependsOn_7qvs0d$(this.inTexCoord);
    if ((tmp$ = this.texLod) != null) {
      this.dependsOn_7qvs0d$(tmp$);
    }};
  CubeMapSamplerNode.prototype.generateCode_626509$ = function (generator) {
    var lod = this.texLod;
    if (lod != null) {
      generator.appendMain_61zpoe$(this.outColor.declare() + ' = ' + generator.sampleTextureCube_buzeal$(this.cubeMap.name, this.inTexCoord.ref3f(), lod.ref1f()) + ';');
    } else {
      generator.appendMain_61zpoe$(this.outColor.declare() + ' = ' + generator.sampleTextureCube_buzeal$(this.cubeMap.name, this.inTexCoord.ref3f()) + ';');
    }
    if (this.premultiply) {
      generator.appendMain_61zpoe$(this.outColor.ref3f() + ' *= ' + this.outColor.ref4f() + '.a;');
    }};
  CubeMapSamplerNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CubeMapSamplerNode',
    interfaces: [ShaderNode]
  };
  function EquiRectSamplerNode(texture, graph, premultiply) {
    if (premultiply === void 0)
      premultiply = false;
    ShaderNode.call(this, 'equi_rect_sampler_' + texture.name + '_' + graph.nextNodeId, graph);
    this.texture = texture;
    this.premultiply = premultiply;
    this.inTexCoord = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().X_AXIS));
    this.outColor = new ShaderNodeIoVar(new ModelVar4f(this.name + '_outColor'), this);
    this.texLod = null;
  }
  EquiRectSamplerNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    var tmp$;
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_lhtstx$(this.texture);
    this.dependsOn_7qvs0d$(this.inTexCoord);
    if ((tmp$ = this.texLod) != null) {
      this.dependsOn_7qvs0d$(tmp$);
    }};
  EquiRectSamplerNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$('\n' + '            vec3 ' + this.name + '_in = normalize(' + this.inTexCoord.ref3f() + ');' + '\n' + '            vec2 ' + this.name + '_uv = vec2(atan(' + this.name + '_in.z, ' + this.name + '_in.x), -asin(' + this.name + '_in.y));' + '\n' + '            ' + this.name + '_uv *= vec2(0.1591, 0.3183);' + '\n' + '            ' + this.name + '_uv += 0.5;            ' + '\n' + '        ');
    var lod = this.texLod;
    if (lod != null) {
      generator.appendMain_61zpoe$(this.outColor.declare() + ' = ' + generator.sampleTexture2d_buzeal$(this.texture.name, this.name + '_uv', lod.ref1f()) + ';');
    } else {
      generator.appendMain_61zpoe$(this.outColor.declare() + ' = ' + generator.sampleTexture2d_buzeal$(this.texture.name, this.name + '_uv') + ';');
    }
    if (this.premultiply) {
      generator.appendMain_61zpoe$(this.outColor.ref3f() + ' *= ' + this.outColor.ref4f() + '.a;');
    }};
  EquiRectSamplerNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EquiRectSamplerNode',
    interfaces: [ShaderNode]
  };
  function AoMapSampleNode(aoMap, graph) {
    ShaderNode.call(this, 'aoMapSampleNode_' + graph.nextNodeId, graph);
    this.aoMap = aoMap;
    this.inViewport = new ShaderNodeIoVar(new ModelVar4fConst(Vec4f$Companion_getInstance().ZERO));
    this.outAo = new ShaderNodeIoVar(new ModelVar1f(this.name + '_outAo'), this);
  }
  AoMapSampleNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    this.dependsOn_lhtstx$(this.aoMap);
    this.dependsOn_7qvs0d$(this.inViewport);
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
  };
  AoMapSampleNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$('\n' + '                vec2 aoMapSamplePos = gl_FragCoord.xy - ' + this.inViewport.ref2f() + ';' + '\n' + '                aoMapSamplePos.x /= ' + this.inViewport + '.z;' + '\n' + '                aoMapSamplePos.y /= ' + this.inViewport + '.w;' + '\n' + '                ' + this.outAo.declare() + ' = ' + generator.sampleTexture2d_buzeal$(this.aoMap.name, 'aoMapSamplePos') + '.r;' + '\n' + '            ');
  };
  AoMapSampleNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AoMapSampleNode',
    interfaces: [ShaderNode]
  };
  function NormalMapNode(texture, graph) {
    ShaderNode.call(this, 'normalMapping_' + graph.nextNodeId, graph);
    this.texture = texture;
    this.inTexCoord = new ShaderNodeIoVar(new ModelVar2fConst(Vec2f$Companion_getInstance().NEG_X_AXIS));
    this.inNormal = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().Y_AXIS));
    this.inTangent = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().X_AXIS));
    this.inStrength = new ShaderNodeIoVar(new ModelVar1fConst(1.0));
    this.outNormal = new ShaderNodeIoVar(new ModelVar3f(this.name + '_outNormal'), this);
  }
  NormalMapNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$([this.inTexCoord, this.inNormal, this.inTangent, this.inStrength]);
  };
  NormalMapNode.prototype.generateCode_626509$ = function (generator) {
    ShaderNode.prototype.generateCode_626509$.call(this, generator);
    generator.appendFunction_puj7f4$('calcBumpedNormal', '\n' + '            vec3 calcBumpedNormal(vec3 n, vec3 t, vec2 uv, float strength) {' + '\n' + '                vec3 normal = normalize(n);' + '\n' + '                vec3 tangent = normalize(t);' + '\n' + '                tangent = normalize(tangent - dot(tangent, normal) * normal);' + '\n' + '                vec3 bitangent = cross(normal, tangent);' + '\n' + '                vec3 bumpMapNormal = ' + generator.sampleTexture2d_buzeal$(this.texture.name, 'uv') + '.xyz;' + '\n' + '                bumpMapNormal = 2.0 * bumpMapNormal - vec3(1.0, 1.0, 1.0);' + '\n' + '                mat3 tbn = mat3(tangent, bitangent, normal);' + '\n' + '                return normalize(mix(normal, tbn * bumpMapNormal, strength));' + '\n' + '            }' + '\n' + '        ');
    generator.appendMain_61zpoe$(this.outNormal.declare() + ' = calcBumpedNormal(' + this.inNormal.ref3f() + ', ' + this.inTangent.ref3f() + ', ' + this.inTexCoord.ref2f() + ', ' + this.inStrength.ref1f() + ');');
  };
  NormalMapNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NormalMapNode',
    interfaces: [ShaderNode]
  };
  function DisplacementMapNode(texture, graph) {
    ShaderNode.call(this, 'dispMap_' + graph.nextNodeId, graph);
    this.texture = texture;
    this.inTexCoord = new ShaderNodeIoVar(new ModelVar2fConst(Vec2f$Companion_getInstance().NEG_X_AXIS));
    this.inNormal = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().Y_AXIS));
    this.inPosition = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().ZERO));
    this.inStrength = new ShaderNodeIoVar(new ModelVar1fConst(0.1));
    this.outPosition = new ShaderNodeIoVar(new ModelVar3f(this.name + '_outPos'), this);
  }
  DisplacementMapNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$([this.inTexCoord, this.inNormal, this.inPosition, this.inStrength]);
  };
  DisplacementMapNode.prototype.generateCode_626509$ = function (generator) {
    ShaderNode.prototype.generateCode_626509$.call(this, generator);
    generator.appendMain_61zpoe$('\n' + '            float ' + this.name + '_disp = ' + generator.sampleTexture2d_buzeal$(this.texture.name, this.inTexCoord.ref2f()) + '.x * ' + this.inStrength.ref1f() + ';' + '\n' + '            ' + this.outPosition.declare() + ' = ' + this.inPosition.ref3f() + ' + ' + this.inNormal.ref3f() + ' * ' + this.name + '_disp;' + '\n' + '        ');
  };
  DisplacementMapNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DisplacementMapNode',
    interfaces: [ShaderNode]
  };
  function ChannelNode(outChannels, graph) {
    ShaderNode.call(this, 'channel_' + graph.nextNodeId, graph);
    this.outChannels = outChannels;
    this.input = new ShaderNodeIoVar(new ModelVar4fConst(Vec4f$Companion_getInstance().ZERO));
    var tmp$;
    switch (this.outChannels.length) {
      case 1:
        tmp$ = new ShaderNodeIoVar(new ModelVar1f(this.name + '_out'), this);
        break;
      case 2:
        tmp$ = new ShaderNodeIoVar(new ModelVar2f(this.name + '_out'), this);
        break;
      case 3:
        tmp$ = new ShaderNodeIoVar(new ModelVar3f(this.name + '_out'), this);
        break;
      case 4:
        tmp$ = new ShaderNodeIoVar(new ModelVar4f(this.name + '_out'), this);
        break;
      default:throw IllegalArgumentException_init("outChannels parameter must be between 1 and 4 characters long (e.g. 'xyz')");
    }
    this.output = tmp$;
  }
  ChannelNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_7qvs0d$(this.input);
  };
  ChannelNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$(this.output.declare() + ' = ' + this.input.name + '.' + this.outChannels + ';');
  };
  ChannelNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ChannelNode',
    interfaces: [ShaderNode]
  };
  function AttributeNode(attribute, graph) {
    ShaderNode.call(this, attribute.name, graph, ShaderStage$VERTEX_SHADER_getInstance().mask);
    this.attribute = attribute;
    this.output = new ShaderNodeIoVar(new ModelVar(this.attribute.name, this.attribute.type), this);
  }
  AttributeNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    var tmp$;
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    Kotlin.isType(tmp$ = shaderGraph, VertexShaderGraph) ? tmp$ : throwCCE();
    var $receiver = shaderGraph.requiredVertexAttributes;
    var element = this.attribute;
    $receiver.add_11rb$(element);
  };
  AttributeNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AttributeNode',
    interfaces: [ShaderNode]
  };
  function InstanceAttributeNode(attribute, graph) {
    ShaderNode.call(this, attribute.name, graph, ShaderStage$VERTEX_SHADER_getInstance().mask);
    this.attribute = attribute;
    this.output = new ShaderNodeIoVar(new ModelVar(this.attribute.name, this.attribute.type), this);
  }
  InstanceAttributeNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    var tmp$;
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    Kotlin.isType(tmp$ = shaderGraph, VertexShaderGraph) ? tmp$ : throwCCE();
    var $receiver = shaderGraph.requiredInstanceAttributes;
    var element = this.attribute;
    $receiver.add_11rb$(element);
  };
  InstanceAttributeNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InstanceAttributeNode',
    interfaces: [ShaderNode]
  };
  function StageInterfaceNode(name, vertexGraph, fragmentGraph) {
    this.name = name;
    this.input_h7hmfg$_0 = new ShaderNodeIoVar(new ModelVar1fConst(0.0));
    this.output_ftovqj$_0 = new ShaderNodeIoVar(new ModelVar1f(this.name));
    this.isFlat = false;
    this.ifVar_hcczpo$_0 = this.ifVar_hcczpo$_0;
    this.vertexNode = new StageInterfaceNode$vertexNode$ObjectLiteral(this, this.name, vertexGraph, ShaderStage$VERTEX_SHADER_getInstance().mask);
    this.fragmentNode = new StageInterfaceNode$fragmentNode$ObjectLiteral(this, this.name, fragmentGraph, ShaderStage$FRAGMENT_SHADER_getInstance().mask);
  }
  Object.defineProperty(StageInterfaceNode.prototype, 'input', {
    get: function () {
      return this.input_h7hmfg$_0;
    },
    set: function (value) {
      this.output = new ShaderNodeIoVar(new ModelVar(this.name, value.variable.type), this.fragmentNode);
      this.input_h7hmfg$_0 = value;
    }
  });
  Object.defineProperty(StageInterfaceNode.prototype, 'output', {
    get: function () {
      return this.output_ftovqj$_0;
    },
    set: function (output) {
      this.output_ftovqj$_0 = output;
    }
  });
  Object.defineProperty(StageInterfaceNode.prototype, 'ifVar_0', {
    get: function () {
      if (this.ifVar_hcczpo$_0 == null)
        return throwUPAE('ifVar');
      return this.ifVar_hcczpo$_0;
    },
    set: function (ifVar) {
      this.ifVar_hcczpo$_0 = ifVar;
    }
  });
  function StageInterfaceNode$vertexNode$ObjectLiteral(this$StageInterfaceNode, name, graph, allowedStages) {
    this.this$StageInterfaceNode = this$StageInterfaceNode;
    ShaderNode.call(this, name, graph, allowedStages);
  }
  StageInterfaceNode$vertexNode$ObjectLiteral.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_7qvs0d$(this.this$StageInterfaceNode.input);
    this.this$StageInterfaceNode.ifVar_0 = shaderGraph.addStageOutput_ca2n0y$(this.this$StageInterfaceNode.output.variable, this.this$StageInterfaceNode.isFlat);
  };
  StageInterfaceNode$vertexNode$ObjectLiteral.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$(this.this$StageInterfaceNode.output.name + ' = ' + this.this$StageInterfaceNode.input.refAsType_m7a9qd$(this.this$StageInterfaceNode.output.variable.type) + ';');
  };
  StageInterfaceNode$vertexNode$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [ShaderNode]
  };
  function StageInterfaceNode$fragmentNode$ObjectLiteral(this$StageInterfaceNode, name, graph, allowedStages) {
    this.this$StageInterfaceNode = this$StageInterfaceNode;
    ShaderNode.call(this, name, graph, allowedStages);
  }
  StageInterfaceNode$fragmentNode$ObjectLiteral.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    var $receiver = shaderGraph.inputs;
    var element = this.this$StageInterfaceNode.ifVar_0;
    $receiver.add_11rb$(element);
  };
  StageInterfaceNode$fragmentNode$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [ShaderNode]
  };
  StageInterfaceNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StageInterfaceNode',
    interfaces: []
  };
  function FullScreenQuadTexPosNode(graph) {
    ShaderNode.call(this, 'fullScreenQuad_' + graph.nextNodeId, graph);
    this.inTexCoord = new ShaderNodeIoVar(new ModelVar2fConst(Vec2f$Companion_getInstance().ZERO));
    this.inDepth = new ShaderNodeIoVar(new ModelVar1fConst(0.5));
    this.outQuadPos = new ShaderNodeIoVar(new ModelVar4f(this.name + '_outPos'), this);
  }
  FullScreenQuadTexPosNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$([this.inTexCoord, this.inDepth]);
  };
  FullScreenQuadTexPosNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$(this.outQuadPos.declare() + ' = vec4(' + this.inTexCoord.ref2f() + ' * 2.0 - 1.0, ' + this.inDepth.ref1f() + ', 1.0);');
  };
  FullScreenQuadTexPosNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FullScreenQuadTexPosNode',
    interfaces: [ShaderNode]
  };
  function ShaderStage(name, ordinal, mask) {
    Enum.call(this);
    this.mask = mask;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ShaderStage_initFields() {
    ShaderStage_initFields = function () {
    };
    ShaderStage$VERTEX_SHADER_instance = new ShaderStage('VERTEX_SHADER', 0, 1);
    ShaderStage$TESSELEATION_CTRL_instance = new ShaderStage('TESSELEATION_CTRL', 1, 2);
    ShaderStage$TESSELATION_EVAL_instance = new ShaderStage('TESSELATION_EVAL', 2, 4);
    ShaderStage$GEOMETRY_SHADER_instance = new ShaderStage('GEOMETRY_SHADER', 3, 8);
    ShaderStage$FRAGMENT_SHADER_instance = new ShaderStage('FRAGMENT_SHADER', 4, 16);
    ShaderStage$ALL_instance = new ShaderStage('ALL', 5, -1);
  }
  var ShaderStage$VERTEX_SHADER_instance;
  function ShaderStage$VERTEX_SHADER_getInstance() {
    ShaderStage_initFields();
    return ShaderStage$VERTEX_SHADER_instance;
  }
  var ShaderStage$TESSELEATION_CTRL_instance;
  function ShaderStage$TESSELEATION_CTRL_getInstance() {
    ShaderStage_initFields();
    return ShaderStage$TESSELEATION_CTRL_instance;
  }
  var ShaderStage$TESSELATION_EVAL_instance;
  function ShaderStage$TESSELATION_EVAL_getInstance() {
    ShaderStage_initFields();
    return ShaderStage$TESSELATION_EVAL_instance;
  }
  var ShaderStage$GEOMETRY_SHADER_instance;
  function ShaderStage$GEOMETRY_SHADER_getInstance() {
    ShaderStage_initFields();
    return ShaderStage$GEOMETRY_SHADER_instance;
  }
  var ShaderStage$FRAGMENT_SHADER_instance;
  function ShaderStage$FRAGMENT_SHADER_getInstance() {
    ShaderStage_initFields();
    return ShaderStage$FRAGMENT_SHADER_instance;
  }
  var ShaderStage$ALL_instance;
  function ShaderStage$ALL_getInstance() {
    ShaderStage_initFields();
    return ShaderStage$ALL_instance;
  }
  ShaderStage.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShaderStage',
    interfaces: [Enum]
  };
  function ShaderStage$values() {
    return [ShaderStage$VERTEX_SHADER_getInstance(), ShaderStage$TESSELEATION_CTRL_getInstance(), ShaderStage$TESSELATION_EVAL_getInstance(), ShaderStage$GEOMETRY_SHADER_getInstance(), ShaderStage$FRAGMENT_SHADER_getInstance(), ShaderStage$ALL_getInstance()];
  }
  ShaderStage.values = ShaderStage$values;
  function ShaderStage$valueOf(name) {
    switch (name) {
      case 'VERTEX_SHADER':
        return ShaderStage$VERTEX_SHADER_getInstance();
      case 'TESSELEATION_CTRL':
        return ShaderStage$TESSELEATION_CTRL_getInstance();
      case 'TESSELATION_EVAL':
        return ShaderStage$TESSELATION_EVAL_getInstance();
      case 'GEOMETRY_SHADER':
        return ShaderStage$GEOMETRY_SHADER_getInstance();
      case 'FRAGMENT_SHADER':
        return ShaderStage$FRAGMENT_SHADER_getInstance();
      case 'ALL':
        return ShaderStage$ALL_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.pipeline.ShaderStage.' + name);
    }
  }
  ShaderStage.valueOf_61zpoe$ = ShaderStage$valueOf;
  function Albedo(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Albedo_initFields() {
    Albedo_initFields = function () {
    };
    Albedo$STATIC_ALBEDO_instance = new Albedo('STATIC_ALBEDO', 0);
    Albedo$TEXTURE_ALBEDO_instance = new Albedo('TEXTURE_ALBEDO', 1);
    Albedo$VERTEX_ALBEDO_instance = new Albedo('VERTEX_ALBEDO', 2);
  }
  var Albedo$STATIC_ALBEDO_instance;
  function Albedo$STATIC_ALBEDO_getInstance() {
    Albedo_initFields();
    return Albedo$STATIC_ALBEDO_instance;
  }
  var Albedo$TEXTURE_ALBEDO_instance;
  function Albedo$TEXTURE_ALBEDO_getInstance() {
    Albedo_initFields();
    return Albedo$TEXTURE_ALBEDO_instance;
  }
  var Albedo$VERTEX_ALBEDO_instance;
  function Albedo$VERTEX_ALBEDO_getInstance() {
    Albedo_initFields();
    return Albedo$VERTEX_ALBEDO_instance;
  }
  Albedo.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Albedo',
    interfaces: [Enum]
  };
  function Albedo$values() {
    return [Albedo$STATIC_ALBEDO_getInstance(), Albedo$TEXTURE_ALBEDO_getInstance(), Albedo$VERTEX_ALBEDO_getInstance()];
  }
  Albedo.values = Albedo$values;
  function Albedo$valueOf(name) {
    switch (name) {
      case 'STATIC_ALBEDO':
        return Albedo$STATIC_ALBEDO_getInstance();
      case 'TEXTURE_ALBEDO':
        return Albedo$TEXTURE_ALBEDO_getInstance();
      case 'VERTEX_ALBEDO':
        return Albedo$VERTEX_ALBEDO_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.pipeline.shading.Albedo.' + name);
    }
  }
  Albedo.valueOf_61zpoe$ = Albedo$valueOf;
  function CustomShader(shaderCode) {
    Shader.call(this);
    this.shaderCode = shaderCode;
  }
  CustomShader.prototype.generateCode_1y5mwk$ = function (pipeline, ctx) {
    return this.shaderCode;
  };
  CustomShader.prototype.onPipelineCreated_lfrgcb$ = function (pipeline) {
  };
  CustomShader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CustomShader',
    interfaces: [Shader]
  };
  var ShaderModel$findNode$lambda = wrapFunction(function () {
    var equals = Kotlin.equals;
    var throwCCE = Kotlin.throwCCE;
    return function (closure$stage, closure$name, typeClosure$T, isT) {
      return function (it) {
        if ((it.stage.mask & closure$stage.mask) !== 0) {
          var isT_0 = isT;
          var name = closure$name;
          var tmp$;
          var $receiver = it.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_0;
            tmp$_0 = $receiver.iterator();
            while (tmp$_0.hasNext()) {
              var element = tmp$_0.next();
              if (equals(element.name, name) && isT_0(element)) {
                firstOrNull$result = element;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = Kotlin.orNull(isT_0)(tmp$ = firstOrNull$result) ? tmp$ : throwCCE();
          if (node != null) {
            return node;
          }}return Unit;
      };
    };
  });
  function ModeledShader(model) {
    ModeledShader$Companion_getInstance();
    Shader.call(this);
    this.model = model;
    this.onSetup = ArrayList_init_0();
  }
  ModeledShader.prototype.setup_acv7yd$ = function (mesh, buildCtx, ctx) {
    this.model.setup_f3a0ju$(mesh, buildCtx);
    return this;
  };
  ModeledShader.prototype.generateCode_1y5mwk$ = function (pipeline, ctx) {
    return ctx.shaderGenerator.generateShader_us75rd$(this.model, pipeline, ctx);
  };
  ModeledShader.prototype.createPipeline_y7vss5$ = function (mesh, builder, ctx) {
    builder.name = this.model.modelInfo;
    builder.shaderLoader = getCallableRef('setup', function ($receiver, mesh, buildCtx, ctx) {
      return $receiver.setup_acv7yd$(mesh, buildCtx, ctx);
    }.bind(null, this));
    var tmp$;
    tmp$ = this.onSetup.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element(builder);
    }
    return builder.create_sbx4mf$(mesh, ctx);
  };
  function ModeledShader$StaticColor(color, model) {
    if (color === void 0)
      color = Color$Companion_getInstance().GRAY;
    if (model === void 0)
      model = ModeledShader$Companion_getInstance().staticColorModel_0();
    ModeledShader.call(this, model);
    this.uColor_0 = null;
    this.color_cjijrc$_0 = color;
  }
  Object.defineProperty(ModeledShader$StaticColor.prototype, 'color', {
    get: function () {
      return this.color_cjijrc$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0;
      this.color_cjijrc$_0 = value;
      (tmp$_0 = (tmp$ = this.uColor_0) != null ? tmp$.value : null) != null ? tmp$_0.set_d7aj7k$(value) : null;
    }
  });
  ModeledShader$StaticColor.prototype.onPipelineCreated_lfrgcb$ = function (pipeline) {
    var tmp$, tmp$_0, tmp$_1;
    var $this = this.model;
    var name = 'uStaticColor';
    var stage;
    var findNode_3klnlw$result;
    findNode_3klnlw$break: do {
      stage = ShaderStage.ALL;
      var tmp$_2;
      tmp$_2 = $this.stages.values.iterator();
      while (tmp$_2.hasNext()) {
        var element = tmp$_2.next();
        if ((element.stage.mask & stage.mask) !== 0) {
          var tmp$_3;
          var $receiver = element.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_4;
            tmp$_4 = $receiver.iterator();
            while (tmp$_4.hasNext()) {
              var element_0 = tmp$_4.next();
              if (equals(element_0.name, name) && Kotlin.isType(element_0, PushConstantNodeColor)) {
                firstOrNull$result = element_0;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = (tmp$_3 = firstOrNull$result) == null || Kotlin.isType(tmp$_3, PushConstantNodeColor) ? tmp$_3 : throwCCE();
          if (node != null) {
            findNode_3klnlw$result = node;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result = null;
    }
     while (false);
    this.uColor_0 = (tmp$ = findNode_3klnlw$result) != null ? tmp$.uniform : null;
    (tmp$_1 = (tmp$_0 = this.uColor_0) != null ? tmp$_0.value : null) != null ? tmp$_1.set_d7aj7k$(this.color) : null;
    ModeledShader.prototype.onPipelineCreated_lfrgcb$.call(this, pipeline);
  };
  ModeledShader$StaticColor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StaticColor',
    interfaces: [ModeledShader]
  };
  function ModeledShader$VertexColor(model) {
    if (model === void 0)
      model = ModeledShader$Companion_getInstance().vertexColorModel_0();
    ModeledShader.call(this, model);
  }
  ModeledShader$VertexColor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VertexColor',
    interfaces: [ModeledShader]
  };
  function ModeledShader$TextureColor(texture, texName, model) {
    if (texture === void 0)
      texture = null;
    if (texName === void 0)
      texName = 'colorTex';
    if (model === void 0)
      model = ModeledShader$Companion_getInstance().textureColorModel_0(texName);
    ModeledShader.call(this, model);
    this.texName_0 = texName;
    this.textureSampler_0 = null;
    this.texture_smcrab$_0 = texture;
  }
  Object.defineProperty(ModeledShader$TextureColor.prototype, 'texture', {
    get: function () {
      return this.texture_smcrab$_0;
    },
    set: function (value) {
      var tmp$;
      this.texture_smcrab$_0 = value;
      (tmp$ = this.textureSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  ModeledShader$TextureColor.prototype.onPipelineCreated_lfrgcb$ = function (pipeline) {
    var tmp$, tmp$_0;
    var $this = this.model;
    var name = this.texName_0;
    var stage;
    var findNode_3klnlw$result;
    findNode_3klnlw$break: do {
      stage = ShaderStage.ALL;
      var tmp$_1;
      tmp$_1 = $this.stages.values.iterator();
      while (tmp$_1.hasNext()) {
        var element = tmp$_1.next();
        if ((element.stage.mask & stage.mask) !== 0) {
          var tmp$_2;
          var $receiver = element.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_3;
            tmp$_3 = $receiver.iterator();
            while (tmp$_3.hasNext()) {
              var element_0 = tmp$_3.next();
              if (equals(element_0.name, name) && Kotlin.isType(element_0, TextureNode)) {
                firstOrNull$result = element_0;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = (tmp$_2 = firstOrNull$result) == null || Kotlin.isType(tmp$_2, TextureNode) ? tmp$_2 : throwCCE();
          if (node != null) {
            findNode_3klnlw$result = node;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result = null;
    }
     while (false);
    this.textureSampler_0 = (tmp$ = findNode_3klnlw$result) != null ? tmp$.sampler : null;
    if ((tmp$_0 = this.textureSampler_0) != null) {
      tmp$_0.texture = this.texture;
    }ModeledShader.prototype.onPipelineCreated_lfrgcb$.call(this, pipeline);
  };
  ModeledShader$TextureColor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextureColor',
    interfaces: [ModeledShader]
  };
  function ModeledShader$CubeMapColor(texName, model) {
    if (texName === void 0)
      texName = 'cubeMap';
    if (model === void 0)
      model = ModeledShader$Companion_getInstance().cubeMapColorModel_0(texName);
    ModeledShader.call(this, model);
    this.texName_0 = texName;
    this.cubeMapSampler_1wcsvl$_0 = this.cubeMapSampler_1wcsvl$_0;
  }
  Object.defineProperty(ModeledShader$CubeMapColor.prototype, 'cubeMapSampler', {
    get: function () {
      if (this.cubeMapSampler_1wcsvl$_0 == null)
        return throwUPAE('cubeMapSampler');
      return this.cubeMapSampler_1wcsvl$_0;
    },
    set: function (cubeMapSampler) {
      this.cubeMapSampler_1wcsvl$_0 = cubeMapSampler;
    }
  });
  ModeledShader$CubeMapColor.prototype.onPipelineCreated_lfrgcb$ = function (pipeline) {
    var $this = this.model;
    var name = this.texName_0;
    var stage;
    var findNode_3klnlw$result;
    findNode_3klnlw$break: do {
      stage = ShaderStage.ALL;
      var tmp$;
      tmp$ = $this.stages.values.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if ((element.stage.mask & stage.mask) !== 0) {
          var tmp$_0;
          var $receiver = element.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_1;
            tmp$_1 = $receiver.iterator();
            while (tmp$_1.hasNext()) {
              var element_0 = tmp$_1.next();
              if (equals(element_0.name, name) && Kotlin.isType(element_0, CubeMapNode)) {
                firstOrNull$result = element_0;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = (tmp$_0 = firstOrNull$result) == null || Kotlin.isType(tmp$_0, CubeMapNode) ? tmp$_0 : throwCCE();
          if (node != null) {
            findNode_3klnlw$result = node;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result = null;
    }
     while (false);
    this.cubeMapSampler = ensureNotNull(findNode_3klnlw$result).sampler;
    ModeledShader.prototype.onPipelineCreated_lfrgcb$.call(this, pipeline);
  };
  ModeledShader$CubeMapColor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CubeMapColor',
    interfaces: [ModeledShader]
  };
  function ModeledShader$Companion() {
    ModeledShader$Companion_instance = this;
  }
  ModeledShader$Companion.prototype.staticColorModel_0 = function () {
    var $receiver = new ShaderModel('ModeledShader.staticColor()');
    var $receiver_0 = new ShaderModel$VertexStageBuilder($receiver);
    $receiver_0.positionOutput = $receiver_0.simpleVertexPositionNode().outVec4;
    var $receiver_1 = new ShaderModel$FragmentStageBuilder($receiver);
    var color = $receiver_1.pushConstantNodeColor_61zpoe$('uStaticColor');
    $receiver_1.colorOutput_a3v4si$($receiver_1.unlitMaterialNode_r20yfm$(color.output).outColor);
    return $receiver;
  };
  ModeledShader$Companion.prototype.vertexColorModel_0 = function () {
    var $receiver = new ShaderModel('ModeledShader.vertexColor()');
    var ifColors = {v: null};
    var $receiver_0 = new ShaderModel$VertexStageBuilder($receiver);
    ifColors.v = $receiver_0.stageInterfaceNode_iikjwn$('ifColors', $receiver_0.attrColors().output);
    $receiver_0.positionOutput = $receiver_0.simpleVertexPositionNode().outVec4;
    var $receiver_1 = new ShaderModel$FragmentStageBuilder($receiver);
    $receiver_1.colorOutput_a3v4si$($receiver_1.unlitMaterialNode_r20yfm$(ifColors.v.output).outColor);
    return $receiver;
  };
  ModeledShader$Companion.prototype.textureColorModel_0 = function (texName) {
    var $receiver = new ShaderModel('ModeledShader.textureColor()');
    var ifTexCoords = {v: null};
    var $receiver_0 = new ShaderModel$VertexStageBuilder($receiver);
    ifTexCoords.v = $receiver_0.stageInterfaceNode_iikjwn$('ifTexCoords', $receiver_0.attrTexCoords().output);
    $receiver_0.positionOutput = $receiver_0.simpleVertexPositionNode().outVec4;
    var $receiver_1 = new ShaderModel$FragmentStageBuilder($receiver);
    var sampler = $receiver_1.textureSamplerNode_ce41yx$($receiver_1.textureNode_61zpoe$(texName), ifTexCoords.v.output);
    $receiver_1.colorOutput_a3v4si$($receiver_1.unlitMaterialNode_r20yfm$(sampler.outColor).outColor);
    return $receiver;
  };
  ModeledShader$Companion.prototype.cubeMapColorModel_0 = function (texName) {
    var $receiver = new ShaderModel('ModeledShader.cubeMapColor()');
    var ifFragPos = {v: null};
    var $receiver_0 = new ShaderModel$VertexStageBuilder($receiver);
    var mvp = $receiver_0.mvpNode();
    var worldPos = $receiver_0.vec4TransformNode_9krp9t$($receiver_0.attrPositions().output, mvp.outModelMat, 1.0);
    ifFragPos.v = $receiver_0.stageInterfaceNode_iikjwn$('ifFragPos', worldPos.outVec4);
    $receiver_0.positionOutput = $receiver_0.vec4TransformNode_9krp9t$($receiver_0.attrPositions().output, mvp.outMvpMat).outVec4;
    var $receiver_1 = new ShaderModel$FragmentStageBuilder($receiver);
    var nrmPos = $receiver_1.normalizeNode_r20yfm$(ifFragPos.v.output);
    var sampler = $receiver_1.cubeMapSamplerNode_2z3a2t$($receiver_1.cubeMapNode_61zpoe$(texName), nrmPos.output);
    $receiver_1.colorOutput_a3v4si$($receiver_1.unlitMaterialNode_r20yfm$(sampler.outColor).outColor);
    return $receiver;
  };
  ModeledShader$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ModeledShader$Companion_instance = null;
  function ModeledShader$Companion_getInstance() {
    if (ModeledShader$Companion_instance === null) {
      new ModeledShader$Companion();
    }return ModeledShader$Companion_instance;
  }
  ModeledShader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModeledShader',
    interfaces: [PipelineFactory, Shader]
  };
  var ShaderModel$findNode$lambda_0 = wrapFunction(function () {
    var equals = Kotlin.equals;
    var throwCCE = Kotlin.throwCCE;
    return function (closure$stage, closure$name, typeClosure$T, isT) {
      return function (it) {
        if ((it.stage.mask & closure$stage.mask) !== 0) {
          var isT_0 = isT;
          var name = closure$name;
          var tmp$;
          var $receiver = it.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_0;
            tmp$_0 = $receiver.iterator();
            while (tmp$_0.hasNext()) {
              var element = tmp$_0.next();
              if (equals(element.name, name) && isT_0(element)) {
                firstOrNull$result = element;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = Kotlin.orNull(isT_0)(tmp$ = firstOrNull$result) ? tmp$ : throwCCE();
          if (node != null) {
            return node;
          }}return Unit;
      };
    };
  });
  function pbrShader(cfgBlock) {
    var cfg = new PbrShader$PbrConfig();
    cfgBlock(cfg);
    return new PbrShader(cfg);
  }
  function PbrShader(cfg, model) {
    PbrShader$Companion_getInstance();
    if (cfg === void 0)
      cfg = new PbrShader$PbrConfig();
    if (model === void 0)
      model = PbrShader$Companion_getInstance().defaultPbrModel_uisrv6$(cfg);
    ModeledShader.call(this, model);
    var array = Array_0(cfg.shadowMaps.size);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = cfg.shadowMaps.get_za3lpa$(i);
    }
    this.shadowMaps_0 = array;
    this.isReceivingShadow_0 = !cfg.shadowMaps.isEmpty();
    this.uRoughness_0 = null;
    this.uMetallic_0 = null;
    this.uAlbedo_0 = null;
    this.metallic_3y0qh7$_0 = cfg.metallic;
    this.roughness_6ti3qe$_0 = cfg.roughness;
    this.albedo_iz6fyn$_0 = cfg.albedo;
    this.albedoSampler_0 = null;
    this.normalSampler_0 = null;
    this.metallicSampler_0 = null;
    this.roughnessSampler_0 = null;
    this.ambientOcclusionSampler_0 = null;
    this.displacementSampler_0 = null;
    this.uDispStrength_0 = null;
    this.albedoMap_el88rd$_0 = cfg.albedoMap;
    this.normalMap_4f5ej9$_0 = cfg.normalMap;
    this.metallicMap_uadmur$_0 = cfg.metallicMap;
    this.roughnessMap_c1s1r6$_0 = cfg.roughnessMap;
    this.ambientOcclusionMap_e3y8fx$_0 = cfg.ambientOcclusionMap;
    this.displacementMap_lffg8r$_0 = cfg.displacementMap;
    this.displacementStrength_mpg4z2$_0 = 0.1;
    this.uAmbient_0 = null;
    var array_0 = Array_0(this.shadowMaps_0.length);
    var tmp$_0;
    tmp$_0 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array_0[i_0] = null;
    }
    this.depthSamplers_0 = array_0;
    this.ambient_5b16r2$_0 = new Color(0.03, 0.03, 0.03, 1.0);
    this.irradianceMapSampler_0 = null;
    this.reflectionMapSampler_0 = null;
    this.brdfLutSampler_0 = null;
    this.irradianceMap_wb8dgm$_0 = cfg.irradianceMap;
    this.reflectionMap_oydyp3$_0 = cfg.reflectionMap;
    this.brdfLut_qrgoz5$_0 = cfg.brdfLut;
    this.ssaoSampler_0 = null;
    this.scrSpcAmbientOcclusionMap_94u3nd$_0 = cfg.scrSpcAmbientOcclusionMap;
  }
  Object.defineProperty(PbrShader.prototype, 'metallic', {
    get: function () {
      return this.metallic_3y0qh7$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0;
      this.metallic_3y0qh7$_0 = value;
      (tmp$_0 = (tmp$ = this.uMetallic_0) != null ? tmp$.uniform : null) != null ? (tmp$_0.value = value) : null;
    }
  });
  Object.defineProperty(PbrShader.prototype, 'roughness', {
    get: function () {
      return this.roughness_6ti3qe$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0;
      this.roughness_6ti3qe$_0 = value;
      (tmp$_0 = (tmp$ = this.uRoughness_0) != null ? tmp$.uniform : null) != null ? (tmp$_0.value = value) : null;
    }
  });
  Object.defineProperty(PbrShader.prototype, 'albedo', {
    get: function () {
      return this.albedo_iz6fyn$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0, tmp$_1;
      this.albedo_iz6fyn$_0 = value;
      (tmp$_1 = (tmp$_0 = (tmp$ = this.uAlbedo_0) != null ? tmp$.uniform : null) != null ? tmp$_0.value : null) != null ? tmp$_1.set_d7aj7k$(value) : null;
    }
  });
  Object.defineProperty(PbrShader.prototype, 'albedoMap', {
    get: function () {
      return this.albedoMap_el88rd$_0;
    },
    set: function (value) {
      var tmp$;
      this.albedoMap_el88rd$_0 = value;
      (tmp$ = this.albedoSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(PbrShader.prototype, 'normalMap', {
    get: function () {
      return this.normalMap_4f5ej9$_0;
    },
    set: function (value) {
      var tmp$;
      this.normalMap_4f5ej9$_0 = value;
      (tmp$ = this.normalSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(PbrShader.prototype, 'metallicMap', {
    get: function () {
      return this.metallicMap_uadmur$_0;
    },
    set: function (value) {
      var tmp$;
      this.metallicMap_uadmur$_0 = value;
      (tmp$ = this.metallicSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(PbrShader.prototype, 'roughnessMap', {
    get: function () {
      return this.roughnessMap_c1s1r6$_0;
    },
    set: function (value) {
      var tmp$;
      this.roughnessMap_c1s1r6$_0 = value;
      (tmp$ = this.roughnessSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(PbrShader.prototype, 'ambientOcclusionMap', {
    get: function () {
      return this.ambientOcclusionMap_e3y8fx$_0;
    },
    set: function (value) {
      var tmp$;
      this.ambientOcclusionMap_e3y8fx$_0 = value;
      (tmp$ = this.ambientOcclusionSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(PbrShader.prototype, 'displacementMap', {
    get: function () {
      return this.displacementMap_lffg8r$_0;
    },
    set: function (value) {
      var tmp$;
      this.displacementMap_lffg8r$_0 = value;
      (tmp$ = this.displacementSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(PbrShader.prototype, 'displacementStrength', {
    get: function () {
      return this.displacementStrength_mpg4z2$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0;
      this.displacementStrength_mpg4z2$_0 = value;
      (tmp$_0 = (tmp$ = this.uDispStrength_0) != null ? tmp$.uniform : null) != null ? (tmp$_0.value = value) : null;
    }
  });
  Object.defineProperty(PbrShader.prototype, 'ambient', {
    get: function () {
      return this.ambient_5b16r2$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0, tmp$_1;
      this.ambient_5b16r2$_0 = value;
      (tmp$_1 = (tmp$_0 = (tmp$ = this.uAmbient_0) != null ? tmp$.uniform : null) != null ? tmp$_0.value : null) != null ? tmp$_1.set_d7aj7k$(value) : null;
    }
  });
  Object.defineProperty(PbrShader.prototype, 'irradianceMap', {
    get: function () {
      return this.irradianceMap_wb8dgm$_0;
    },
    set: function (value) {
      var tmp$;
      this.irradianceMap_wb8dgm$_0 = value;
      (tmp$ = this.irradianceMapSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(PbrShader.prototype, 'reflectionMap', {
    get: function () {
      return this.reflectionMap_oydyp3$_0;
    },
    set: function (value) {
      var tmp$;
      this.reflectionMap_oydyp3$_0 = value;
      (tmp$ = this.reflectionMapSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(PbrShader.prototype, 'brdfLut', {
    get: function () {
      return this.brdfLut_qrgoz5$_0;
    },
    set: function (value) {
      var tmp$;
      this.brdfLut_qrgoz5$_0 = value;
      (tmp$ = this.brdfLutSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(PbrShader.prototype, 'scrSpcAmbientOcclusionMap', {
    get: function () {
      return this.scrSpcAmbientOcclusionMap_94u3nd$_0;
    },
    set: function (value) {
      var tmp$;
      this.scrSpcAmbientOcclusionMap_94u3nd$_0 = value;
      (tmp$ = this.ssaoSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  PbrShader.prototype.onPipelineCreated_lfrgcb$ = function (pipeline) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20, tmp$_21, tmp$_22, tmp$_23, tmp$_24, tmp$_25, tmp$_26, tmp$_27, tmp$_28;
    var $this = this.model;
    var name = 'uMetallic';
    var stage;
    var findNode_3klnlw$result;
    findNode_3klnlw$break: do {
      stage = ShaderStage.ALL;
      var tmp$_29;
      tmp$_29 = $this.stages.values.iterator();
      while (tmp$_29.hasNext()) {
        var element = tmp$_29.next();
        if ((element.stage.mask & stage.mask) !== 0) {
          var tmp$_30;
          var $receiver = element.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_31;
            tmp$_31 = $receiver.iterator();
            while (tmp$_31.hasNext()) {
              var element_0 = tmp$_31.next();
              if (equals(element_0.name, name) && Kotlin.isType(element_0, PushConstantNode1f)) {
                firstOrNull$result = element_0;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = (tmp$_30 = firstOrNull$result) == null || Kotlin.isType(tmp$_30, PushConstantNode1f) ? tmp$_30 : throwCCE();
          if (node != null) {
            findNode_3klnlw$result = node;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result = null;
    }
     while (false);
    this.uMetallic_0 = findNode_3klnlw$result;
    if ((tmp$ = this.uMetallic_0) != null) {
      tmp$.uniform.value = this.metallic;
    }var $this_0 = this.model;
    var name_0 = 'uRoughness';
    var stage_0;
    var findNode_3klnlw$result_0;
    findNode_3klnlw$break: do {
      stage_0 = ShaderStage.ALL;
      var tmp$_32;
      tmp$_32 = $this_0.stages.values.iterator();
      while (tmp$_32.hasNext()) {
        var element_1 = tmp$_32.next();
        if ((element_1.stage.mask & stage_0.mask) !== 0) {
          var tmp$_33;
          var $receiver_0 = element_1.nodes;
          var firstOrNull$result_0;
          firstOrNull$break: do {
            var tmp$_34;
            tmp$_34 = $receiver_0.iterator();
            while (tmp$_34.hasNext()) {
              var element_2 = tmp$_34.next();
              if (equals(element_2.name, name_0) && Kotlin.isType(element_2, PushConstantNode1f)) {
                firstOrNull$result_0 = element_2;
                break firstOrNull$break;
              }}
            firstOrNull$result_0 = null;
          }
           while (false);
          var node_0 = (tmp$_33 = firstOrNull$result_0) == null || Kotlin.isType(tmp$_33, PushConstantNode1f) ? tmp$_33 : throwCCE();
          if (node_0 != null) {
            findNode_3klnlw$result_0 = node_0;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_0 = null;
    }
     while (false);
    this.uRoughness_0 = findNode_3klnlw$result_0;
    if ((tmp$_0 = this.uRoughness_0) != null) {
      tmp$_0.uniform.value = this.roughness;
    }var $this_1 = this.model;
    var stage_1;
    var findNode_3klnlw$result_1;
    findNode_3klnlw$break: do {
      stage_1 = ShaderStage.ALL;
      var tmp$_35;
      tmp$_35 = $this_1.stages.values.iterator();
      while (tmp$_35.hasNext()) {
        var element_3 = tmp$_35.next();
        if ((element_3.stage.mask & stage_1.mask) !== 0) {
          var tmp$_36;
          var $receiver_1 = element_3.nodes;
          var firstOrNull$result_1;
          firstOrNull$break: do {
            var tmp$_37;
            tmp$_37 = $receiver_1.iterator();
            while (tmp$_37.hasNext()) {
              var element_4 = tmp$_37.next();
              if (equals(element_4.name, 'uAlbedo') && Kotlin.isType(element_4, PushConstantNodeColor)) {
                firstOrNull$result_1 = element_4;
                break firstOrNull$break;
              }}
            firstOrNull$result_1 = null;
          }
           while (false);
          var node_1 = (tmp$_36 = firstOrNull$result_1) == null || Kotlin.isType(tmp$_36, PushConstantNodeColor) ? tmp$_36 : throwCCE();
          if (node_1 != null) {
            findNode_3klnlw$result_1 = node_1;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_1 = null;
    }
     while (false);
    this.uAlbedo_0 = findNode_3klnlw$result_1;
    (tmp$_3 = (tmp$_2 = (tmp$_1 = this.uAlbedo_0) != null ? tmp$_1.uniform : null) != null ? tmp$_2.value : null) != null ? tmp$_3.set_d7aj7k$(this.albedo) : null;
    var $this_2 = this.model;
    var name_1 = 'uAmbient';
    var stage_2;
    var findNode_3klnlw$result_2;
    findNode_3klnlw$break: do {
      stage_2 = ShaderStage.ALL;
      var tmp$_38;
      tmp$_38 = $this_2.stages.values.iterator();
      while (tmp$_38.hasNext()) {
        var element_5 = tmp$_38.next();
        if ((element_5.stage.mask & stage_2.mask) !== 0) {
          var tmp$_39;
          var $receiver_2 = element_5.nodes;
          var firstOrNull$result_2;
          firstOrNull$break: do {
            var tmp$_40;
            tmp$_40 = $receiver_2.iterator();
            while (tmp$_40.hasNext()) {
              var element_6 = tmp$_40.next();
              if (equals(element_6.name, name_1) && Kotlin.isType(element_6, PushConstantNodeColor)) {
                firstOrNull$result_2 = element_6;
                break firstOrNull$break;
              }}
            firstOrNull$result_2 = null;
          }
           while (false);
          var node_2 = (tmp$_39 = firstOrNull$result_2) == null || Kotlin.isType(tmp$_39, PushConstantNodeColor) ? tmp$_39 : throwCCE();
          if (node_2 != null) {
            findNode_3klnlw$result_2 = node_2;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_2 = null;
    }
     while (false);
    this.uAmbient_0 = findNode_3klnlw$result_2;
    (tmp$_6 = (tmp$_5 = (tmp$_4 = this.uAmbient_0) != null ? tmp$_4.uniform : null) != null ? tmp$_5.value : null) != null ? tmp$_6.set_d7aj7k$(this.ambient) : null;
    if (this.isReceivingShadow_0) {
      tmp$_7 = this.depthSamplers_0;
      loop_label: for (var i = 0; i !== tmp$_7.length; ++i) {
        var tmp$_41;
        var $this_3 = this.model;
        var name_2 = 'depthMap_' + i;
        var stage_3;
        var findNode_3klnlw$result_3;
        findNode_3klnlw$break: do {
          stage_3 = ShaderStage.ALL;
          var tmp$_42;
          tmp$_42 = $this_3.stages.values.iterator();
          while (tmp$_42.hasNext()) {
            var element_7 = tmp$_42.next();
            if ((element_7.stage.mask & stage_3.mask) !== 0) {
              var tmp$_43;
              var $receiver_3 = element_7.nodes;
              var firstOrNull$result_3;
              firstOrNull$break: do {
                var tmp$_44;
                tmp$_44 = $receiver_3.iterator();
                while (tmp$_44.hasNext()) {
                  var element_8 = tmp$_44.next();
                  if (equals(element_8.name, name_2) && Kotlin.isType(element_8, TextureNode)) {
                    firstOrNull$result_3 = element_8;
                    break firstOrNull$break;
                  }}
                firstOrNull$result_3 = null;
              }
               while (false);
              var node_3 = (tmp$_43 = firstOrNull$result_3) == null || Kotlin.isType(tmp$_43, TextureNode) ? tmp$_43 : throwCCE();
              if (node_3 != null) {
                findNode_3klnlw$result_3 = node_3;
                break findNode_3klnlw$break;
              }}}
          findNode_3klnlw$result_3 = null;
        }
         while (false);
        var sampler = (tmp$_41 = findNode_3klnlw$result_3) != null ? tmp$_41.sampler : null;
        this.depthSamplers_0[i] = sampler;
        this.shadowMaps_0[i].setupSampler_s70oj3$(sampler);
      }
    }var $this_4 = this.model;
    var name_3 = 'irradianceMap';
    var stage_4;
    var findNode_3klnlw$result_4;
    findNode_3klnlw$break: do {
      stage_4 = ShaderStage.ALL;
      var tmp$_45;
      tmp$_45 = $this_4.stages.values.iterator();
      while (tmp$_45.hasNext()) {
        var element_9 = tmp$_45.next();
        if ((element_9.stage.mask & stage_4.mask) !== 0) {
          var tmp$_46;
          var $receiver_4 = element_9.nodes;
          var firstOrNull$result_4;
          firstOrNull$break: do {
            var tmp$_47;
            tmp$_47 = $receiver_4.iterator();
            while (tmp$_47.hasNext()) {
              var element_10 = tmp$_47.next();
              if (equals(element_10.name, name_3) && Kotlin.isType(element_10, CubeMapNode)) {
                firstOrNull$result_4 = element_10;
                break firstOrNull$break;
              }}
            firstOrNull$result_4 = null;
          }
           while (false);
          var node_4 = (tmp$_46 = firstOrNull$result_4) == null || Kotlin.isType(tmp$_46, CubeMapNode) ? tmp$_46 : throwCCE();
          if (node_4 != null) {
            findNode_3klnlw$result_4 = node_4;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_4 = null;
    }
     while (false);
    this.irradianceMapSampler_0 = (tmp$_8 = findNode_3klnlw$result_4) != null ? tmp$_8.sampler : null;
    if ((tmp$_9 = this.irradianceMapSampler_0) != null) {
      tmp$_9.texture = this.irradianceMap;
    }var $this_5 = this.model;
    var name_4 = 'reflectionMap';
    var stage_5;
    var findNode_3klnlw$result_5;
    findNode_3klnlw$break: do {
      stage_5 = ShaderStage.ALL;
      var tmp$_48;
      tmp$_48 = $this_5.stages.values.iterator();
      while (tmp$_48.hasNext()) {
        var element_11 = tmp$_48.next();
        if ((element_11.stage.mask & stage_5.mask) !== 0) {
          var tmp$_49;
          var $receiver_5 = element_11.nodes;
          var firstOrNull$result_5;
          firstOrNull$break: do {
            var tmp$_50;
            tmp$_50 = $receiver_5.iterator();
            while (tmp$_50.hasNext()) {
              var element_12 = tmp$_50.next();
              if (equals(element_12.name, name_4) && Kotlin.isType(element_12, CubeMapNode)) {
                firstOrNull$result_5 = element_12;
                break firstOrNull$break;
              }}
            firstOrNull$result_5 = null;
          }
           while (false);
          var node_5 = (tmp$_49 = firstOrNull$result_5) == null || Kotlin.isType(tmp$_49, CubeMapNode) ? tmp$_49 : throwCCE();
          if (node_5 != null) {
            findNode_3klnlw$result_5 = node_5;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_5 = null;
    }
     while (false);
    this.reflectionMapSampler_0 = (tmp$_10 = findNode_3klnlw$result_5) != null ? tmp$_10.sampler : null;
    if ((tmp$_11 = this.reflectionMapSampler_0) != null) {
      tmp$_11.texture = this.reflectionMap;
    }var $this_6 = this.model;
    var stage_6;
    var findNode_3klnlw$result_6;
    findNode_3klnlw$break: do {
      stage_6 = ShaderStage.ALL;
      var tmp$_51;
      tmp$_51 = $this_6.stages.values.iterator();
      while (tmp$_51.hasNext()) {
        var element_13 = tmp$_51.next();
        if ((element_13.stage.mask & stage_6.mask) !== 0) {
          var tmp$_52;
          var $receiver_6 = element_13.nodes;
          var firstOrNull$result_6;
          firstOrNull$break: do {
            var tmp$_53;
            tmp$_53 = $receiver_6.iterator();
            while (tmp$_53.hasNext()) {
              var element_14 = tmp$_53.next();
              if (equals(element_14.name, 'brdfLut') && Kotlin.isType(element_14, TextureNode)) {
                firstOrNull$result_6 = element_14;
                break firstOrNull$break;
              }}
            firstOrNull$result_6 = null;
          }
           while (false);
          var node_6 = (tmp$_52 = firstOrNull$result_6) == null || Kotlin.isType(tmp$_52, TextureNode) ? tmp$_52 : throwCCE();
          if (node_6 != null) {
            findNode_3klnlw$result_6 = node_6;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_6 = null;
    }
     while (false);
    this.brdfLutSampler_0 = (tmp$_12 = findNode_3klnlw$result_6) != null ? tmp$_12.sampler : null;
    if ((tmp$_13 = this.brdfLutSampler_0) != null) {
      tmp$_13.texture = this.brdfLut;
    }var $this_7 = this.model;
    var stage_7;
    var findNode_3klnlw$result_7;
    findNode_3klnlw$break: do {
      stage_7 = ShaderStage.ALL;
      var tmp$_54;
      tmp$_54 = $this_7.stages.values.iterator();
      while (tmp$_54.hasNext()) {
        var element_15 = tmp$_54.next();
        if ((element_15.stage.mask & stage_7.mask) !== 0) {
          var tmp$_55;
          var $receiver_7 = element_15.nodes;
          var firstOrNull$result_7;
          firstOrNull$break: do {
            var tmp$_56;
            tmp$_56 = $receiver_7.iterator();
            while (tmp$_56.hasNext()) {
              var element_16 = tmp$_56.next();
              if (equals(element_16.name, 'ssaoMap') && Kotlin.isType(element_16, TextureNode)) {
                firstOrNull$result_7 = element_16;
                break firstOrNull$break;
              }}
            firstOrNull$result_7 = null;
          }
           while (false);
          var node_7 = (tmp$_55 = firstOrNull$result_7) == null || Kotlin.isType(tmp$_55, TextureNode) ? tmp$_55 : throwCCE();
          if (node_7 != null) {
            findNode_3klnlw$result_7 = node_7;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_7 = null;
    }
     while (false);
    this.ssaoSampler_0 = (tmp$_14 = findNode_3klnlw$result_7) != null ? tmp$_14.sampler : null;
    if ((tmp$_15 = this.ssaoSampler_0) != null) {
      tmp$_15.texture = this.scrSpcAmbientOcclusionMap;
    }var $this_8 = this.model;
    var stage_8;
    var findNode_3klnlw$result_8;
    findNode_3klnlw$break: do {
      stage_8 = ShaderStage.ALL;
      var tmp$_57;
      tmp$_57 = $this_8.stages.values.iterator();
      while (tmp$_57.hasNext()) {
        var element_17 = tmp$_57.next();
        if ((element_17.stage.mask & stage_8.mask) !== 0) {
          var tmp$_58;
          var $receiver_8 = element_17.nodes;
          var firstOrNull$result_8;
          firstOrNull$break: do {
            var tmp$_59;
            tmp$_59 = $receiver_8.iterator();
            while (tmp$_59.hasNext()) {
              var element_18 = tmp$_59.next();
              if (equals(element_18.name, 'tAlbedo') && Kotlin.isType(element_18, TextureNode)) {
                firstOrNull$result_8 = element_18;
                break firstOrNull$break;
              }}
            firstOrNull$result_8 = null;
          }
           while (false);
          var node_8 = (tmp$_58 = firstOrNull$result_8) == null || Kotlin.isType(tmp$_58, TextureNode) ? tmp$_58 : throwCCE();
          if (node_8 != null) {
            findNode_3klnlw$result_8 = node_8;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_8 = null;
    }
     while (false);
    this.albedoSampler_0 = (tmp$_16 = findNode_3klnlw$result_8) != null ? tmp$_16.sampler : null;
    if ((tmp$_17 = this.albedoSampler_0) != null) {
      tmp$_17.texture = this.albedoMap;
    }var $this_9 = this.model;
    var stage_9;
    var findNode_3klnlw$result_9;
    findNode_3klnlw$break: do {
      stage_9 = ShaderStage.ALL;
      var tmp$_60;
      tmp$_60 = $this_9.stages.values.iterator();
      while (tmp$_60.hasNext()) {
        var element_19 = tmp$_60.next();
        if ((element_19.stage.mask & stage_9.mask) !== 0) {
          var tmp$_61;
          var $receiver_9 = element_19.nodes;
          var firstOrNull$result_9;
          firstOrNull$break: do {
            var tmp$_62;
            tmp$_62 = $receiver_9.iterator();
            while (tmp$_62.hasNext()) {
              var element_20 = tmp$_62.next();
              if (equals(element_20.name, 'tNormal') && Kotlin.isType(element_20, TextureNode)) {
                firstOrNull$result_9 = element_20;
                break firstOrNull$break;
              }}
            firstOrNull$result_9 = null;
          }
           while (false);
          var node_9 = (tmp$_61 = firstOrNull$result_9) == null || Kotlin.isType(tmp$_61, TextureNode) ? tmp$_61 : throwCCE();
          if (node_9 != null) {
            findNode_3klnlw$result_9 = node_9;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_9 = null;
    }
     while (false);
    this.normalSampler_0 = (tmp$_18 = findNode_3klnlw$result_9) != null ? tmp$_18.sampler : null;
    if ((tmp$_19 = this.normalSampler_0) != null) {
      tmp$_19.texture = this.normalMap;
    }var $this_10 = this.model;
    var name_5 = 'tMetallic';
    var stage_10;
    var findNode_3klnlw$result_10;
    findNode_3klnlw$break: do {
      stage_10 = ShaderStage.ALL;
      var tmp$_63;
      tmp$_63 = $this_10.stages.values.iterator();
      while (tmp$_63.hasNext()) {
        var element_21 = tmp$_63.next();
        if ((element_21.stage.mask & stage_10.mask) !== 0) {
          var tmp$_64;
          var $receiver_10 = element_21.nodes;
          var firstOrNull$result_10;
          firstOrNull$break: do {
            var tmp$_65;
            tmp$_65 = $receiver_10.iterator();
            while (tmp$_65.hasNext()) {
              var element_22 = tmp$_65.next();
              if (equals(element_22.name, name_5) && Kotlin.isType(element_22, TextureNode)) {
                firstOrNull$result_10 = element_22;
                break firstOrNull$break;
              }}
            firstOrNull$result_10 = null;
          }
           while (false);
          var node_10 = (tmp$_64 = firstOrNull$result_10) == null || Kotlin.isType(tmp$_64, TextureNode) ? tmp$_64 : throwCCE();
          if (node_10 != null) {
            findNode_3klnlw$result_10 = node_10;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_10 = null;
    }
     while (false);
    this.metallicSampler_0 = (tmp$_20 = findNode_3klnlw$result_10) != null ? tmp$_20.sampler : null;
    if ((tmp$_21 = this.metallicSampler_0) != null) {
      tmp$_21.texture = this.metallicMap;
    }var $this_11 = this.model;
    var name_6 = 'tRoughness';
    var stage_11;
    var findNode_3klnlw$result_11;
    findNode_3klnlw$break: do {
      stage_11 = ShaderStage.ALL;
      var tmp$_66;
      tmp$_66 = $this_11.stages.values.iterator();
      while (tmp$_66.hasNext()) {
        var element_23 = tmp$_66.next();
        if ((element_23.stage.mask & stage_11.mask) !== 0) {
          var tmp$_67;
          var $receiver_11 = element_23.nodes;
          var firstOrNull$result_11;
          firstOrNull$break: do {
            var tmp$_68;
            tmp$_68 = $receiver_11.iterator();
            while (tmp$_68.hasNext()) {
              var element_24 = tmp$_68.next();
              if (equals(element_24.name, name_6) && Kotlin.isType(element_24, TextureNode)) {
                firstOrNull$result_11 = element_24;
                break firstOrNull$break;
              }}
            firstOrNull$result_11 = null;
          }
           while (false);
          var node_11 = (tmp$_67 = firstOrNull$result_11) == null || Kotlin.isType(tmp$_67, TextureNode) ? tmp$_67 : throwCCE();
          if (node_11 != null) {
            findNode_3klnlw$result_11 = node_11;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_11 = null;
    }
     while (false);
    this.roughnessSampler_0 = (tmp$_22 = findNode_3klnlw$result_11) != null ? tmp$_22.sampler : null;
    if ((tmp$_23 = this.roughnessSampler_0) != null) {
      tmp$_23.texture = this.roughnessMap;
    }var $this_12 = this.model;
    var name_7 = 'tAmbOccl';
    var stage_12;
    var findNode_3klnlw$result_12;
    findNode_3klnlw$break: do {
      stage_12 = ShaderStage.ALL;
      var tmp$_69;
      tmp$_69 = $this_12.stages.values.iterator();
      while (tmp$_69.hasNext()) {
        var element_25 = tmp$_69.next();
        if ((element_25.stage.mask & stage_12.mask) !== 0) {
          var tmp$_70;
          var $receiver_12 = element_25.nodes;
          var firstOrNull$result_12;
          firstOrNull$break: do {
            var tmp$_71;
            tmp$_71 = $receiver_12.iterator();
            while (tmp$_71.hasNext()) {
              var element_26 = tmp$_71.next();
              if (equals(element_26.name, name_7) && Kotlin.isType(element_26, TextureNode)) {
                firstOrNull$result_12 = element_26;
                break firstOrNull$break;
              }}
            firstOrNull$result_12 = null;
          }
           while (false);
          var node_12 = (tmp$_70 = firstOrNull$result_12) == null || Kotlin.isType(tmp$_70, TextureNode) ? tmp$_70 : throwCCE();
          if (node_12 != null) {
            findNode_3klnlw$result_12 = node_12;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_12 = null;
    }
     while (false);
    this.ambientOcclusionSampler_0 = (tmp$_24 = findNode_3klnlw$result_12) != null ? tmp$_24.sampler : null;
    if ((tmp$_25 = this.ambientOcclusionSampler_0) != null) {
      tmp$_25.texture = this.ambientOcclusionMap;
    }var $this_13 = this.model;
    var name_8 = 'tDisplacement';
    var stage_13;
    var findNode_3klnlw$result_13;
    findNode_3klnlw$break: do {
      stage_13 = ShaderStage.ALL;
      var tmp$_72;
      tmp$_72 = $this_13.stages.values.iterator();
      while (tmp$_72.hasNext()) {
        var element_27 = tmp$_72.next();
        if ((element_27.stage.mask & stage_13.mask) !== 0) {
          var tmp$_73;
          var $receiver_13 = element_27.nodes;
          var firstOrNull$result_13;
          firstOrNull$break: do {
            var tmp$_74;
            tmp$_74 = $receiver_13.iterator();
            while (tmp$_74.hasNext()) {
              var element_28 = tmp$_74.next();
              if (equals(element_28.name, name_8) && Kotlin.isType(element_28, TextureNode)) {
                firstOrNull$result_13 = element_28;
                break firstOrNull$break;
              }}
            firstOrNull$result_13 = null;
          }
           while (false);
          var node_13 = (tmp$_73 = firstOrNull$result_13) == null || Kotlin.isType(tmp$_73, TextureNode) ? tmp$_73 : throwCCE();
          if (node_13 != null) {
            findNode_3klnlw$result_13 = node_13;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_13 = null;
    }
     while (false);
    this.displacementSampler_0 = (tmp$_26 = findNode_3klnlw$result_13) != null ? tmp$_26.sampler : null;
    if ((tmp$_27 = this.displacementSampler_0) != null) {
      tmp$_27.texture = this.displacementMap;
    }var $this_14 = this.model;
    var name_9 = 'uDispStrength';
    var stage_14;
    var findNode_3klnlw$result_14;
    findNode_3klnlw$break: do {
      stage_14 = ShaderStage.ALL;
      var tmp$_75;
      tmp$_75 = $this_14.stages.values.iterator();
      while (tmp$_75.hasNext()) {
        var element_29 = tmp$_75.next();
        if ((element_29.stage.mask & stage_14.mask) !== 0) {
          var tmp$_76;
          var $receiver_14 = element_29.nodes;
          var firstOrNull$result_14;
          firstOrNull$break: do {
            var tmp$_77;
            tmp$_77 = $receiver_14.iterator();
            while (tmp$_77.hasNext()) {
              var element_30 = tmp$_77.next();
              if (equals(element_30.name, name_9) && Kotlin.isType(element_30, PushConstantNode1f)) {
                firstOrNull$result_14 = element_30;
                break firstOrNull$break;
              }}
            firstOrNull$result_14 = null;
          }
           while (false);
          var node_14 = (tmp$_76 = firstOrNull$result_14) == null || Kotlin.isType(tmp$_76, PushConstantNode1f) ? tmp$_76 : throwCCE();
          if (node_14 != null) {
            findNode_3klnlw$result_14 = node_14;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_14 = null;
    }
     while (false);
    this.uDispStrength_0 = findNode_3klnlw$result_14;
    if ((tmp$_28 = this.uDispStrength_0) != null) {
      tmp$_28.uniform.value = this.displacementStrength;
    }ModeledShader.prototype.onPipelineCreated_lfrgcb$.call(this, pipeline);
  };
  function PbrShader$Companion() {
    PbrShader$Companion_instance = this;
  }
  PbrShader$Companion.prototype.defaultPbrModel_uisrv6$ = function (cfg) {
    var $receiver = new ShaderModel('defaultPbrModel()');
    var ifColors = {v: null};
    var ifNormals = {v: null};
    var ifTangents = {v: null};
    var ifFragPos = {v: null};
    var ifTexCoords = {v: null};
    var mvpNode = {v: null};
    var shadowMapNodes = ArrayList_init_0();
    var $receiver_0 = new ShaderModel$VertexStageBuilder($receiver);
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var modelMat;
    var mvpMat;
    mvpNode.v = $receiver_0.mvpNode();
    if (cfg.isInstanced) {
      modelMat = $receiver_0.multiplyNode_ze33is$(mvpNode.v.outModelMat, $receiver_0.instanceAttrModelMat().output).output;
      mvpMat = $receiver_0.multiplyNode_ze33is$(mvpNode.v.outMvpMat, $receiver_0.instanceAttrModelMat().output).output;
    } else {
      modelMat = mvpNode.v.outModelMat;
      mvpMat = mvpNode.v.outMvpMat;
    }
    var nrm = $receiver_0.vec3TransformNode_vid4wo$($receiver_0.attrNormals().output, modelMat, 0.0);
    ifNormals.v = $receiver_0.stageInterfaceNode_iikjwn$('ifNormals', nrm.outVec3);
    if (cfg.requiresTexCoords()) {
      tmp$ = $receiver_0.stageInterfaceNode_iikjwn$('ifTexCoords', $receiver_0.attrTexCoords().output);
    } else {
      tmp$ = null;
    }
    ifTexCoords.v = tmp$;
    if (cfg.isDisplacementMapped) {
      var dispTex = $receiver_0.textureNode_61zpoe$('tDisplacement');
      var $receiver_1 = $receiver_0.displacementMapNode_7fvjbk$(dispTex, ensureNotNull(ifTexCoords.v).input, $receiver_0.attrPositions().output, $receiver_0.attrNormals().output);
      $receiver_1.inStrength = $receiver_0.pushConstantNode1f_61zpoe$('uDispStrength').output;
      var dispNd = $receiver_1;
      tmp$_0 = dispNd.outPosition;
    } else {
      tmp$_0 = $receiver_0.attrPositions().output;
    }
    var localPos = tmp$_0;
    var worldPos = $receiver_0.vec3TransformNode_vid4wo$(localPos, modelMat, 1.0).outVec3;
    ifFragPos.v = $receiver_0.stageInterfaceNode_iikjwn$('ifFragPos', worldPos);
    if (cfg.albedoSource === Albedo$VERTEX_ALBEDO_getInstance()) {
      tmp$_1 = $receiver_0.stageInterfaceNode_iikjwn$('ifColors', $receiver_0.attrColors().output);
    } else {
      tmp$_1 = null;
    }
    ifColors.v = tmp$_1;
    if (cfg.isNormalMapped) {
      var tan = $receiver_0.vec3TransformNode_vid4wo$($receiver_0.attrTangents().output, modelMat, 0.0);
      tmp$_2 = $receiver_0.stageInterfaceNode_iikjwn$('ifTangents', tan.outVec3);
    } else {
      tmp$_2 = null;
    }
    ifTangents.v = tmp$_2;
    var viewPos = $receiver_0.vec4TransformNode_9krp9t$(worldPos, mvpNode.v.outViewMat).outVec4;
    var tmp$_3, tmp$_0_0;
    var index = 0;
    tmp$_3 = cfg.shadowMaps.iterator();
    while (tmp$_3.hasNext()) {
      var item = tmp$_3.next();
      var i = checkIndexOverflow((tmp$_0_0 = index, index = tmp$_0_0 + 1 | 0, tmp$_0_0));
      if (Kotlin.isType(item, CascadedShadowMap)) {
        var element = $receiver_0.cascadedShadowMapNode_zw58l$(item, 'depthMap_' + i, viewPos, worldPos);
        shadowMapNodes.add_11rb$(element);
      } else if (Kotlin.isType(item, SimpleShadowMap)) {
        var element_0 = $receiver_0.simpleShadowMapNode_7yd351$(item, 'depthMap_' + i, worldPos);
        shadowMapNodes.add_11rb$(element_0);
      }}
    $receiver_0.positionOutput = $receiver_0.vec4TransformNode_9krp9t$(localPos, mvpMat).outVec4;
    var $receiver_2 = new ShaderModel$FragmentStageBuilder($receiver);
    var mvpFrag = mvpNode.v.addToStage_llmhyc$($receiver.fragmentStageGraph);
    var lightNode = $receiver_2.multiLightNode_za3lpa$(cfg.maxLights);
    var tmp$_4;
    tmp$_4 = shadowMapNodes.iterator();
    while (tmp$_4.hasNext()) {
      var element_1 = tmp$_4.next();
      lightNode.inShaodwFacs[element_1.lightIndex] = element_1.outShadowFac;
    }
    var reflMap;
    var brdfLut;
    var irrSampler;
    if (cfg.isImageBasedLighting) {
      var irrMap = $receiver_2.cubeMapNode_61zpoe$('irradianceMap');
      irrSampler = $receiver_2.cubeMapSamplerNode_2z3a2t$(irrMap, ifNormals.v.output);
      reflMap = $receiver_2.cubeMapNode_61zpoe$('reflectionMap');
      brdfLut = $receiver_2.textureNode_61zpoe$('brdfLut');
    } else {
      irrSampler = null;
      reflMap = null;
      brdfLut = null;
    }
    var $receiver_3 = $receiver_2.pbrMaterialNode_od0lt5$(lightNode, reflMap, brdfLut);
    var closure$irrSampler = irrSampler;
    var tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10;
    $receiver_3.flipBacksideNormals = cfg.flipBacksideNormals;
    $receiver_3.inFragPos = ifFragPos.v.output;
    $receiver_3.inCamPos = mvpFrag.outCamPos;
    $receiver_3.inIrradiance = (tmp$_5 = closure$irrSampler != null ? closure$irrSampler.outColor : null) != null ? tmp$_5 : $receiver_2.pushConstantNodeColor_61zpoe$('uAmbient').output;
    switch (cfg.albedoSource.name) {
      case 'VERTEX_ALBEDO':
        tmp$_6 = ensureNotNull(ifColors.v).output;
        break;
      case 'STATIC_ALBEDO':
        tmp$_6 = $receiver_2.pushConstantNodeColor_61zpoe$('uAlbedo').output;
        break;
      case 'TEXTURE_ALBEDO':
        var albedoSampler = $receiver_2.textureSamplerNode_ce41yx$($receiver_2.textureNode_61zpoe$('tAlbedo'), ensureNotNull(ifTexCoords.v).output);
        var albedoLin = $receiver_2.gammaNode_r20yfm$(albedoSampler.outColor);
        tmp$_6 = albedoLin.outColor;
        break;
      default:tmp$_6 = Kotlin.noWhenBranchMatched();
        break;
    }
    $receiver_3.inAlbedo = tmp$_6;
    if (cfg.isNormalMapped && ifTangents.v != null) {
      var bumpNormal = $receiver_2.normalMapNode_j8913i$($receiver_2.textureNode_61zpoe$('tNormal'), ensureNotNull(ifTexCoords.v).output, ifNormals.v.output, ifTangents.v.output);
      bumpNormal.inStrength = new ShaderNodeIoVar(new ModelVar1fConst(cfg.normalStrength));
      tmp$_7 = bumpNormal.outNormal;
    } else {
      tmp$_7 = ifNormals.v.output;
    }
    $receiver_3.inNormal = tmp$_7;
    if (cfg.isMetallicMapped) {
      tmp$_8 = $receiver_2.textureSamplerNode_ce41yx$($receiver_2.textureNode_61zpoe$('tMetallic'), ensureNotNull(ifTexCoords.v).output).outColor;
    } else {
      tmp$_8 = $receiver_2.pushConstantNode1f_61zpoe$('uMetallic').output;
    }
    $receiver_3.inMetallic = tmp$_8;
    if (cfg.isRoughnessMapped) {
      tmp$_9 = $receiver_2.textureSamplerNode_ce41yx$($receiver_2.textureNode_61zpoe$('tRoughness'), ensureNotNull(ifTexCoords.v).output).outColor;
    } else {
      tmp$_9 = $receiver_2.pushConstantNode1f_61zpoe$('uRoughness').output;
    }
    $receiver_3.inRoughness = tmp$_9;
    var aoFactor = new ShaderNodeIoVar(new ModelVar1fConst(1.0));
    if (cfg.isAmbientOcclusionMapped) {
      aoFactor = $receiver_2.textureSamplerNode_ce41yx$($receiver_2.textureNode_61zpoe$('tAmbOccl'), ensureNotNull(ifTexCoords.v).output).outColor;
    }if (cfg.isScrSpcAmbientOcclusion) {
      var aoMap = $receiver_2.textureNode_61zpoe$('ssaoMap');
      var aoNode = $receiver_2.addNode_u9w9by$(new AoMapSampleNode(aoMap, $receiver_3.graph));
      aoNode.inViewport = mvpFrag.outViewport;
      if (!cfg.isAmbientOcclusionMapped) {
        tmp$_10 = aoNode.outAo;
      } else {
        tmp$_10 = $receiver_2.multiplyNode_ze33is$(aoFactor, aoNode.outAo).output;
      }
      aoFactor = tmp$_10;
    }$receiver_3.inAmbientOccl = aoFactor;
    var mat = $receiver_3;
    $receiver_2.colorOutput_a3v4si$($receiver_2.hdrToLdrNode_r20yfm$(mat.outColor).outColor);
    return $receiver;
  };
  PbrShader$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var PbrShader$Companion_instance = null;
  function PbrShader$Companion_getInstance() {
    if (PbrShader$Companion_instance === null) {
      new PbrShader$Companion();
    }return PbrShader$Companion_instance;
  }
  function PbrShader$PbrConfig() {
    this.albedoSource = Albedo$VERTEX_ALBEDO_getInstance();
    this.isNormalMapped = false;
    this.isRoughnessMapped = false;
    this.isMetallicMapped = false;
    this.isAmbientOcclusionMapped = false;
    this.isDisplacementMapped = false;
    this.normalStrength = 1.0;
    this.isImageBasedLighting = false;
    this.isScrSpcAmbientOcclusion = false;
    this.maxLights = 4;
    this.shadowMaps = ArrayList_init_0();
    this.flipBacksideNormals = false;
    this.isInstanced = false;
    this.albedo = Color$Companion_getInstance().GRAY;
    this.roughness = 0.5;
    this.metallic = 0.0;
    this.albedoMap = null;
    this.normalMap = null;
    this.roughnessMap = null;
    this.metallicMap = null;
    this.ambientOcclusionMap = null;
    this.displacementMap = null;
    this.irradianceMap = null;
    this.reflectionMap = null;
    this.brdfLut = null;
    this.scrSpcAmbientOcclusionMap = null;
  }
  PbrShader$PbrConfig.prototype.requiresTexCoords = function () {
    return this.albedoSource === Albedo$TEXTURE_ALBEDO_getInstance() || this.isNormalMapped || this.isRoughnessMapped || this.isMetallicMapped || this.isAmbientOcclusionMapped || this.isDisplacementMapped;
  };
  PbrShader$PbrConfig.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PbrConfig',
    interfaces: []
  };
  PbrShader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PbrShader',
    interfaces: [ModeledShader]
  };
  var ShaderModel$findNode$lambda_1 = wrapFunction(function () {
    var equals = Kotlin.equals;
    var throwCCE = Kotlin.throwCCE;
    return function (closure$stage, closure$name, typeClosure$T, isT) {
      return function (it) {
        if ((it.stage.mask & closure$stage.mask) !== 0) {
          var isT_0 = isT;
          var name = closure$name;
          var tmp$;
          var $receiver = it.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_0;
            tmp$_0 = $receiver.iterator();
            while (tmp$_0.hasNext()) {
              var element = tmp$_0.next();
              if (equals(element.name, name) && isT_0(element)) {
                firstOrNull$result = element;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = Kotlin.orNull(isT_0)(tmp$ = firstOrNull$result) ? tmp$ : throwCCE();
          if (node != null) {
            return node;
          }}return Unit;
      };
    };
  });
  function phongShader(cfgBlock) {
    var cfg = new PhongShader$PhongConfig();
    cfgBlock(cfg);
    return new PhongShader(cfg);
  }
  function PhongShader(cfg, model) {
    PhongShader$Companion_getInstance();
    if (cfg === void 0)
      cfg = new PhongShader$PhongConfig();
    if (model === void 0)
      model = PhongShader$Companion_getInstance().defaultPhongModel_m663ta$(cfg);
    ModeledShader.call(this, model);
    var array = Array_0(cfg.shadowMaps.size);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = cfg.shadowMaps.get_za3lpa$(i);
    }
    this.shadowMaps_0 = array;
    this.isReceivingShadow_0 = !cfg.shadowMaps.isEmpty();
    this.uShininess_0 = null;
    this.uSpecularIntensity_0 = null;
    this.albedoSampler_0 = null;
    this.normalSampler_0 = null;
    this.uAlbedo_0 = null;
    this.shininess_9rzino$_0 = cfg.shininess;
    this.specularIntensity_immrg6$_0 = cfg.specularIntensity;
    this.albedo_xrasdd$_0 = cfg.albedo;
    this.albedoMap_wcysax$_0 = cfg.albedoMap;
    this.normalMap_dcl50b$_0 = cfg.normalMap;
    var array_0 = Array_0(this.shadowMaps_0.length);
    var tmp$_0;
    tmp$_0 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array_0[i_0] = null;
    }
    this.depthSamplers_0 = array_0;
  }
  Object.defineProperty(PhongShader.prototype, 'shininess', {
    get: function () {
      return this.shininess_9rzino$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0;
      this.shininess_9rzino$_0 = value;
      (tmp$_0 = (tmp$ = this.uShininess_0) != null ? tmp$.uniform : null) != null ? (tmp$_0.value = value) : null;
    }
  });
  Object.defineProperty(PhongShader.prototype, 'specularIntensity', {
    get: function () {
      return this.specularIntensity_immrg6$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0;
      this.specularIntensity_immrg6$_0 = value;
      (tmp$_0 = (tmp$ = this.uSpecularIntensity_0) != null ? tmp$.uniform : null) != null ? (tmp$_0.value = value) : null;
    }
  });
  Object.defineProperty(PhongShader.prototype, 'albedo', {
    get: function () {
      return this.albedo_xrasdd$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0, tmp$_1;
      this.albedo_xrasdd$_0 = value;
      (tmp$_1 = (tmp$_0 = (tmp$ = this.uAlbedo_0) != null ? tmp$.uniform : null) != null ? tmp$_0.value : null) != null ? tmp$_1.set_d7aj7k$(value) : null;
    }
  });
  Object.defineProperty(PhongShader.prototype, 'albedoMap', {
    get: function () {
      return this.albedoMap_wcysax$_0;
    },
    set: function (value) {
      var tmp$;
      this.albedoMap_wcysax$_0 = value;
      (tmp$ = this.albedoSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(PhongShader.prototype, 'normalMap', {
    get: function () {
      return this.normalMap_dcl50b$_0;
    },
    set: function (value) {
      var tmp$;
      this.normalMap_dcl50b$_0 = value;
      (tmp$ = this.normalSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  PhongShader.prototype.onPipelineCreated_lfrgcb$ = function (pipeline) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10;
    var $this = this.model;
    var name = 'uShininess';
    var stage;
    var findNode_3klnlw$result;
    findNode_3klnlw$break: do {
      stage = ShaderStage.ALL;
      var tmp$_11;
      tmp$_11 = $this.stages.values.iterator();
      while (tmp$_11.hasNext()) {
        var element = tmp$_11.next();
        if ((element.stage.mask & stage.mask) !== 0) {
          var tmp$_12;
          var $receiver = element.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_13;
            tmp$_13 = $receiver.iterator();
            while (tmp$_13.hasNext()) {
              var element_0 = tmp$_13.next();
              if (equals(element_0.name, name) && Kotlin.isType(element_0, PushConstantNode1f)) {
                firstOrNull$result = element_0;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = (tmp$_12 = firstOrNull$result) == null || Kotlin.isType(tmp$_12, PushConstantNode1f) ? tmp$_12 : throwCCE();
          if (node != null) {
            findNode_3klnlw$result = node;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result = null;
    }
     while (false);
    this.uShininess_0 = findNode_3klnlw$result;
    (tmp$_0 = (tmp$ = this.uShininess_0) != null ? tmp$.uniform : null) != null ? (tmp$_0.value = this.shininess) : null;
    var $this_0 = this.model;
    var name_0 = 'uSpecularIntensity';
    var stage_0;
    var findNode_3klnlw$result_0;
    findNode_3klnlw$break: do {
      stage_0 = ShaderStage.ALL;
      var tmp$_14;
      tmp$_14 = $this_0.stages.values.iterator();
      while (tmp$_14.hasNext()) {
        var element_1 = tmp$_14.next();
        if ((element_1.stage.mask & stage_0.mask) !== 0) {
          var tmp$_15;
          var $receiver_0 = element_1.nodes;
          var firstOrNull$result_0;
          firstOrNull$break: do {
            var tmp$_16;
            tmp$_16 = $receiver_0.iterator();
            while (tmp$_16.hasNext()) {
              var element_2 = tmp$_16.next();
              if (equals(element_2.name, name_0) && Kotlin.isType(element_2, PushConstantNode1f)) {
                firstOrNull$result_0 = element_2;
                break firstOrNull$break;
              }}
            firstOrNull$result_0 = null;
          }
           while (false);
          var node_0 = (tmp$_15 = firstOrNull$result_0) == null || Kotlin.isType(tmp$_15, PushConstantNode1f) ? tmp$_15 : throwCCE();
          if (node_0 != null) {
            findNode_3klnlw$result_0 = node_0;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_0 = null;
    }
     while (false);
    this.uSpecularIntensity_0 = findNode_3klnlw$result_0;
    (tmp$_2 = (tmp$_1 = this.uSpecularIntensity_0) != null ? tmp$_1.uniform : null) != null ? (tmp$_2.value = this.specularIntensity) : null;
    var $this_1 = this.model;
    var stage_1;
    var findNode_3klnlw$result_1;
    findNode_3klnlw$break: do {
      stage_1 = ShaderStage.ALL;
      var tmp$_17;
      tmp$_17 = $this_1.stages.values.iterator();
      while (tmp$_17.hasNext()) {
        var element_3 = tmp$_17.next();
        if ((element_3.stage.mask & stage_1.mask) !== 0) {
          var tmp$_18;
          var $receiver_1 = element_3.nodes;
          var firstOrNull$result_1;
          firstOrNull$break: do {
            var tmp$_19;
            tmp$_19 = $receiver_1.iterator();
            while (tmp$_19.hasNext()) {
              var element_4 = tmp$_19.next();
              if (equals(element_4.name, 'uAlbedo') && Kotlin.isType(element_4, PushConstantNodeColor)) {
                firstOrNull$result_1 = element_4;
                break firstOrNull$break;
              }}
            firstOrNull$result_1 = null;
          }
           while (false);
          var node_1 = (tmp$_18 = firstOrNull$result_1) == null || Kotlin.isType(tmp$_18, PushConstantNodeColor) ? tmp$_18 : throwCCE();
          if (node_1 != null) {
            findNode_3klnlw$result_1 = node_1;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_1 = null;
    }
     while (false);
    this.uAlbedo_0 = findNode_3klnlw$result_1;
    (tmp$_5 = (tmp$_4 = (tmp$_3 = this.uAlbedo_0) != null ? tmp$_3.uniform : null) != null ? tmp$_4.value : null) != null ? tmp$_5.set_d7aj7k$(this.albedo) : null;
    var $this_2 = this.model;
    var stage_2;
    var findNode_3klnlw$result_2;
    findNode_3klnlw$break: do {
      stage_2 = ShaderStage.ALL;
      var tmp$_20;
      tmp$_20 = $this_2.stages.values.iterator();
      while (tmp$_20.hasNext()) {
        var element_5 = tmp$_20.next();
        if ((element_5.stage.mask & stage_2.mask) !== 0) {
          var tmp$_21;
          var $receiver_2 = element_5.nodes;
          var firstOrNull$result_2;
          firstOrNull$break: do {
            var tmp$_22;
            tmp$_22 = $receiver_2.iterator();
            while (tmp$_22.hasNext()) {
              var element_6 = tmp$_22.next();
              if (equals(element_6.name, 'tAlbedo') && Kotlin.isType(element_6, TextureNode)) {
                firstOrNull$result_2 = element_6;
                break firstOrNull$break;
              }}
            firstOrNull$result_2 = null;
          }
           while (false);
          var node_2 = (tmp$_21 = firstOrNull$result_2) == null || Kotlin.isType(tmp$_21, TextureNode) ? tmp$_21 : throwCCE();
          if (node_2 != null) {
            findNode_3klnlw$result_2 = node_2;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_2 = null;
    }
     while (false);
    this.albedoSampler_0 = (tmp$_6 = findNode_3klnlw$result_2) != null ? tmp$_6.sampler : null;
    if ((tmp$_7 = this.albedoSampler_0) != null) {
      tmp$_7.texture = this.albedoMap;
    }var $this_3 = this.model;
    var stage_3;
    var findNode_3klnlw$result_3;
    findNode_3klnlw$break: do {
      stage_3 = ShaderStage.ALL;
      var tmp$_23;
      tmp$_23 = $this_3.stages.values.iterator();
      while (tmp$_23.hasNext()) {
        var element_7 = tmp$_23.next();
        if ((element_7.stage.mask & stage_3.mask) !== 0) {
          var tmp$_24;
          var $receiver_3 = element_7.nodes;
          var firstOrNull$result_3;
          firstOrNull$break: do {
            var tmp$_25;
            tmp$_25 = $receiver_3.iterator();
            while (tmp$_25.hasNext()) {
              var element_8 = tmp$_25.next();
              if (equals(element_8.name, 'tNormal') && Kotlin.isType(element_8, TextureNode)) {
                firstOrNull$result_3 = element_8;
                break firstOrNull$break;
              }}
            firstOrNull$result_3 = null;
          }
           while (false);
          var node_3 = (tmp$_24 = firstOrNull$result_3) == null || Kotlin.isType(tmp$_24, TextureNode) ? tmp$_24 : throwCCE();
          if (node_3 != null) {
            findNode_3klnlw$result_3 = node_3;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_3 = null;
    }
     while (false);
    this.normalSampler_0 = (tmp$_8 = findNode_3klnlw$result_3) != null ? tmp$_8.sampler : null;
    if ((tmp$_9 = this.normalSampler_0) != null) {
      tmp$_9.texture = this.normalMap;
    }if (this.isReceivingShadow_0) {
      tmp$_10 = this.depthSamplers_0;
      loop_label: for (var i = 0; i !== tmp$_10.length; ++i) {
        var tmp$_26;
        var $this_4 = this.model;
        var name_1 = 'depthMap_' + i;
        var stage_4;
        var findNode_3klnlw$result_4;
        findNode_3klnlw$break: do {
          stage_4 = ShaderStage.ALL;
          var tmp$_27;
          tmp$_27 = $this_4.stages.values.iterator();
          while (tmp$_27.hasNext()) {
            var element_9 = tmp$_27.next();
            if ((element_9.stage.mask & stage_4.mask) !== 0) {
              var tmp$_28;
              var $receiver_4 = element_9.nodes;
              var firstOrNull$result_4;
              firstOrNull$break: do {
                var tmp$_29;
                tmp$_29 = $receiver_4.iterator();
                while (tmp$_29.hasNext()) {
                  var element_10 = tmp$_29.next();
                  if (equals(element_10.name, name_1) && Kotlin.isType(element_10, TextureNode)) {
                    firstOrNull$result_4 = element_10;
                    break firstOrNull$break;
                  }}
                firstOrNull$result_4 = null;
              }
               while (false);
              var node_4 = (tmp$_28 = firstOrNull$result_4) == null || Kotlin.isType(tmp$_28, TextureNode) ? tmp$_28 : throwCCE();
              if (node_4 != null) {
                findNode_3klnlw$result_4 = node_4;
                break findNode_3klnlw$break;
              }}}
          findNode_3klnlw$result_4 = null;
        }
         while (false);
        var sampler = (tmp$_26 = findNode_3klnlw$result_4) != null ? tmp$_26.sampler : null;
        this.depthSamplers_0[i] = sampler;
        this.shadowMaps_0[i].setupSampler_s70oj3$(sampler);
      }
    }ModeledShader.prototype.onPipelineCreated_lfrgcb$.call(this, pipeline);
  };
  function PhongShader$Companion() {
    PhongShader$Companion_instance = this;
  }
  PhongShader$Companion.prototype.defaultPhongModel_m663ta$ = function (cfg) {
    var $receiver = new ShaderModel('defaultPhongModel()');
    var ifNormals = {v: null};
    var ifColors = {v: null};
    var ifTexCoords = {v: null};
    var ifTangents = {v: null};
    var ifFragPos = {v: null};
    var mvpNode = {v: null};
    var shadowMapNodes = ArrayList_init_0();
    var $receiver_0 = new ShaderModel$VertexStageBuilder($receiver);
    var tmp$, tmp$_0, tmp$_1;
    var modelMat;
    var mvpMat;
    mvpNode.v = $receiver_0.mvpNode();
    if (cfg.isInstanced) {
      modelMat = $receiver_0.multiplyNode_ze33is$(mvpNode.v.outModelMat, $receiver_0.instanceAttrModelMat().output).output;
      mvpMat = $receiver_0.multiplyNode_ze33is$(mvpNode.v.outMvpMat, $receiver_0.instanceAttrModelMat().output).output;
    } else {
      modelMat = mvpNode.v.outModelMat;
      mvpMat = mvpNode.v.outMvpMat;
    }
    if (cfg.albedoSource === Albedo$VERTEX_ALBEDO_getInstance()) {
      tmp$ = $receiver_0.stageInterfaceNode_iikjwn$('ifColors', $receiver_0.attrColors().output);
    } else {
      tmp$ = null;
    }
    ifColors.v = tmp$;
    if (cfg.requiresTexCoords()) {
      tmp$_0 = $receiver_0.stageInterfaceNode_iikjwn$('ifTexCoords', $receiver_0.attrTexCoords().output);
    } else {
      tmp$_0 = null;
    }
    ifTexCoords.v = tmp$_0;
    if (cfg.isNormalMapped) {
      var tan = $receiver_0.vec3TransformNode_vid4wo$($receiver_0.attrTangents().output, modelMat, 0.0);
      tmp$_1 = $receiver_0.stageInterfaceNode_iikjwn$('ifTangents', tan.outVec3);
    } else {
      tmp$_1 = null;
    }
    ifTangents.v = tmp$_1;
    var nrm = $receiver_0.vec3TransformNode_vid4wo$($receiver_0.attrNormals().output, modelMat, 0.0);
    ifNormals.v = $receiver_0.stageInterfaceNode_iikjwn$('ifNormals', nrm.outVec3);
    var worldPos = $receiver_0.vec3TransformNode_vid4wo$($receiver_0.attrPositions().output, modelMat, 1.0).outVec3;
    ifFragPos.v = $receiver_0.stageInterfaceNode_iikjwn$('ifFragPos', worldPos);
    var viewPos = $receiver_0.vec4TransformNode_9krp9t$(worldPos, mvpNode.v.outViewMat).outVec4;
    var tmp$_2, tmp$_0_0;
    var index = 0;
    tmp$_2 = cfg.shadowMaps.iterator();
    while (tmp$_2.hasNext()) {
      var item = tmp$_2.next();
      var i = checkIndexOverflow((tmp$_0_0 = index, index = tmp$_0_0 + 1 | 0, tmp$_0_0));
      if (Kotlin.isType(item, CascadedShadowMap)) {
        var element = $receiver_0.cascadedShadowMapNode_zw58l$(item, 'depthMap_' + i, viewPos, worldPos);
        shadowMapNodes.add_11rb$(element);
      } else if (Kotlin.isType(item, SimpleShadowMap)) {
        var element_0 = $receiver_0.simpleShadowMapNode_7yd351$(item, 'depthMap_' + i, worldPos);
        shadowMapNodes.add_11rb$(element_0);
      }}
    $receiver_0.positionOutput = $receiver_0.vec3TransformNode_vid4wo$(worldPos, mvpMat).outVec3;
    var $receiver_1 = new ShaderModel$FragmentStageBuilder($receiver);
    var tmp$_3, tmp$_4;
    var mvpFrag = mvpNode.v.addToStage_llmhyc$($receiver.fragmentStageGraph);
    var lightNode = $receiver_1.multiLightNode_za3lpa$(cfg.maxLights);
    var tmp$_5;
    tmp$_5 = shadowMapNodes.iterator();
    while (tmp$_5.hasNext()) {
      var element_1 = tmp$_5.next();
      lightNode.inShaodwFacs[element_1.lightIndex] = element_1.outShadowFac;
    }
    switch (cfg.albedoSource.name) {
      case 'VERTEX_ALBEDO':
        tmp$_3 = ensureNotNull(ifColors.v).output;
        break;
      case 'STATIC_ALBEDO':
        tmp$_3 = $receiver_1.pushConstantNodeColor_61zpoe$('uAlbedo').output;
        break;
      case 'TEXTURE_ALBEDO':
        tmp$_3 = $receiver_1.textureSamplerNode_ce41yx$($receiver_1.textureNode_61zpoe$('tAlbedo'), ensureNotNull(ifTexCoords.v).output, false).outColor;
        break;
      default:tmp$_3 = Kotlin.noWhenBranchMatched();
        break;
    }
    var albedo = tmp$_3;
    if (cfg.isNormalMapped && ifTangents.v != null) {
      var bumpNormal = $receiver_1.normalMapNode_j8913i$($receiver_1.textureNode_61zpoe$('tNormal'), ensureNotNull(ifTexCoords.v).output, ifNormals.v.output, ifTangents.v.output);
      tmp$_4 = bumpNormal.outNormal;
    } else {
      tmp$_4 = ifNormals.v.output;
    }
    var normal = tmp$_4;
    var $receiver_2 = $receiver_1.phongMaterialNode_8rwtp1$(albedo, normal, ifFragPos.v.output, mvpFrag.outCamPos, lightNode);
    $receiver_2.flipBacksideNormals = cfg.flipBacksideNormals;
    $receiver_2.inShininess = $receiver_1.pushConstantNode1f_61zpoe$('uShininess').output;
    $receiver_2.inSpecularIntensity = $receiver_1.pushConstantNode1f_61zpoe$('uSpecularIntensity').output;
    var phongMat = $receiver_2;
    $receiver_1.colorOutput_a3v4si$(phongMat.outColor);
    return $receiver;
  };
  PhongShader$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var PhongShader$Companion_instance = null;
  function PhongShader$Companion_getInstance() {
    if (PhongShader$Companion_instance === null) {
      new PhongShader$Companion();
    }return PhongShader$Companion_instance;
  }
  function PhongShader$PhongConfig() {
    this.albedoSource = Albedo$VERTEX_ALBEDO_getInstance();
    this.isNormalMapped = false;
    this.albedo = Color$Companion_getInstance().GRAY;
    this.shininess = 20.0;
    this.specularIntensity = 1.0;
    this.maxLights = 4;
    this.shadowMaps = ArrayList_init_0();
    this.flipBacksideNormals = false;
    this.isInstanced = false;
    this.albedoMap = null;
    this.normalMap = null;
  }
  PhongShader$PhongConfig.prototype.requiresTexCoords = function () {
    return this.albedoSource === Albedo$TEXTURE_ALBEDO_getInstance() || this.isNormalMapped;
  };
  PhongShader$PhongConfig.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PhongConfig',
    interfaces: []
  };
  PhongShader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PhongShader',
    interfaces: [ModeledShader]
  };
  function Shader() {
    this.onCreated = ArrayList_init_0();
  }
  Shader.prototype.onPipelineCreated_lfrgcb$ = function (pipeline) {
    var tmp$;
    tmp$ = this.onCreated.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element(pipeline);
    }
  };
  Shader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Shader',
    interfaces: []
  };
  function Std140Layout(uniforms) {
    this.elements_0 = ArrayList_init_0();
    this.size = 0;
    var tmp$;
    var start = 0;
    tmp$ = uniforms.iterator();
    while (tmp$.hasNext()) {
      var u = tmp$.next();
      var e = new Std140Layout$Element(u, start);
      this.elements_0.add_11rb$(e);
      start = start + (u.size + e.padding) | 0;
    }
    this.size = start;
  }
  Std140Layout.prototype.putTo_l6oshk$ = function (buf) {
    var tmp$;
    tmp$ = this.elements_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.elements_0.get_za3lpa$(i).putTo_l6oshk$(buf);
    }
  };
  function Std140Layout$Element(uniform, start) {
    this.uniform = uniform;
    this.offset = 0;
    this.padding = 0;
    var tmp$;
    switch (this.uniform.typeSize) {
      case 4:
        tmp$ = 4;
        break;
      case 8:
        tmp$ = 8;
        break;
      default:tmp$ = 16;
        break;
    }
    var baseAlign = tmp$;
    this.offset = Kotlin.imul((start + baseAlign - 1 | 0) / baseAlign | 0, baseAlign);
    this.padding = this.offset - start | 0;
  }
  Std140Layout$Element.prototype.putTo_l6oshk$ = function (buf) {
    var tmp$;
    tmp$ = this.padding;
    for (var i = 0; i < tmp$; i++) {
      buf.putUint8_s8j3t7$(0);
    }
    this.uniform.putTo_l6oshk$(buf);
  };
  Std140Layout$Element.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Element',
    interfaces: []
  };
  Std140Layout.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Std140Layout',
    interfaces: []
  };
  function TexFormat(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function TexFormat_initFields() {
    TexFormat_initFields = function () {
    };
    TexFormat$R_instance = new TexFormat('R', 0);
    TexFormat$RG_instance = new TexFormat('RG', 1);
    TexFormat$RGB_instance = new TexFormat('RGB', 2);
    TexFormat$RGBA_instance = new TexFormat('RGBA', 3);
    TexFormat$R_F16_instance = new TexFormat('R_F16', 4);
    TexFormat$RG_F16_instance = new TexFormat('RG_F16', 5);
    TexFormat$RGB_F16_instance = new TexFormat('RGB_F16', 6);
    TexFormat$RGBA_F16_instance = new TexFormat('RGBA_F16', 7);
  }
  var TexFormat$R_instance;
  function TexFormat$R_getInstance() {
    TexFormat_initFields();
    return TexFormat$R_instance;
  }
  var TexFormat$RG_instance;
  function TexFormat$RG_getInstance() {
    TexFormat_initFields();
    return TexFormat$RG_instance;
  }
  var TexFormat$RGB_instance;
  function TexFormat$RGB_getInstance() {
    TexFormat_initFields();
    return TexFormat$RGB_instance;
  }
  var TexFormat$RGBA_instance;
  function TexFormat$RGBA_getInstance() {
    TexFormat_initFields();
    return TexFormat$RGBA_instance;
  }
  var TexFormat$R_F16_instance;
  function TexFormat$R_F16_getInstance() {
    TexFormat_initFields();
    return TexFormat$R_F16_instance;
  }
  var TexFormat$RG_F16_instance;
  function TexFormat$RG_F16_getInstance() {
    TexFormat_initFields();
    return TexFormat$RG_F16_instance;
  }
  var TexFormat$RGB_F16_instance;
  function TexFormat$RGB_F16_getInstance() {
    TexFormat_initFields();
    return TexFormat$RGB_F16_instance;
  }
  var TexFormat$RGBA_F16_instance;
  function TexFormat$RGBA_F16_getInstance() {
    TexFormat_initFields();
    return TexFormat$RGBA_F16_instance;
  }
  TexFormat.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TexFormat',
    interfaces: [Enum]
  };
  function TexFormat$values() {
    return [TexFormat$R_getInstance(), TexFormat$RG_getInstance(), TexFormat$RGB_getInstance(), TexFormat$RGBA_getInstance(), TexFormat$R_F16_getInstance(), TexFormat$RG_F16_getInstance(), TexFormat$RGB_F16_getInstance(), TexFormat$RGBA_F16_getInstance()];
  }
  TexFormat.values = TexFormat$values;
  function TexFormat$valueOf(name) {
    switch (name) {
      case 'R':
        return TexFormat$R_getInstance();
      case 'RG':
        return TexFormat$RG_getInstance();
      case 'RGB':
        return TexFormat$RGB_getInstance();
      case 'RGBA':
        return TexFormat$RGBA_getInstance();
      case 'R_F16':
        return TexFormat$R_F16_getInstance();
      case 'RG_F16':
        return TexFormat$RG_F16_getInstance();
      case 'RGB_F16':
        return TexFormat$RGB_F16_getInstance();
      case 'RGBA_F16':
        return TexFormat$RGBA_F16_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.pipeline.TexFormat.' + name);
    }
  }
  TexFormat.valueOf_61zpoe$ = TexFormat$valueOf;
  function Texture(props, loader) {
    Texture$Companion_getInstance();
    if (props === void 0)
      props = new TextureProps();
    this.props = props;
    this.loader = loader;
    this.loadedTexture = null;
    this.loadingState = Texture$LoadingState$NOT_LOADED_getInstance();
  }
  Texture.prototype.dispose = function () {
    var tmp$;
    (tmp$ = this.loadedTexture) != null ? (tmp$.dispose(), Unit) : null;
    this.loadedTexture = null;
    this.loadingState = Texture$LoadingState$NOT_LOADED_getInstance();
  };
  function Texture$LoadingState(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Texture$LoadingState_initFields() {
    Texture$LoadingState_initFields = function () {
    };
    Texture$LoadingState$NOT_LOADED_instance = new Texture$LoadingState('NOT_LOADED', 0);
    Texture$LoadingState$LOADING_instance = new Texture$LoadingState('LOADING', 1);
    Texture$LoadingState$LOADED_instance = new Texture$LoadingState('LOADED', 2);
    Texture$LoadingState$LOADING_FAILED_instance = new Texture$LoadingState('LOADING_FAILED', 3);
  }
  var Texture$LoadingState$NOT_LOADED_instance;
  function Texture$LoadingState$NOT_LOADED_getInstance() {
    Texture$LoadingState_initFields();
    return Texture$LoadingState$NOT_LOADED_instance;
  }
  var Texture$LoadingState$LOADING_instance;
  function Texture$LoadingState$LOADING_getInstance() {
    Texture$LoadingState_initFields();
    return Texture$LoadingState$LOADING_instance;
  }
  var Texture$LoadingState$LOADED_instance;
  function Texture$LoadingState$LOADED_getInstance() {
    Texture$LoadingState_initFields();
    return Texture$LoadingState$LOADED_instance;
  }
  var Texture$LoadingState$LOADING_FAILED_instance;
  function Texture$LoadingState$LOADING_FAILED_getInstance() {
    Texture$LoadingState_initFields();
    return Texture$LoadingState$LOADING_FAILED_instance;
  }
  Texture$LoadingState.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LoadingState',
    interfaces: [Enum]
  };
  function Texture$LoadingState$values() {
    return [Texture$LoadingState$NOT_LOADED_getInstance(), Texture$LoadingState$LOADING_getInstance(), Texture$LoadingState$LOADED_getInstance(), Texture$LoadingState$LOADING_FAILED_getInstance()];
  }
  Texture$LoadingState.values = Texture$LoadingState$values;
  function Texture$LoadingState$valueOf(name) {
    switch (name) {
      case 'NOT_LOADED':
        return Texture$LoadingState$NOT_LOADED_getInstance();
      case 'LOADING':
        return Texture$LoadingState$LOADING_getInstance();
      case 'LOADED':
        return Texture$LoadingState$LOADED_getInstance();
      case 'LOADING_FAILED':
        return Texture$LoadingState$LOADING_FAILED_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.pipeline.Texture.LoadingState.' + name);
    }
  }
  Texture$LoadingState.valueOf_61zpoe$ = Texture$LoadingState$valueOf;
  function Texture$Companion() {
    Texture$Companion_instance = this;
  }
  Texture$Companion.prototype.estimatedTexSize_4qozqa$ = function (width, height, bytesPerPx, layers, mipLevels) {
    var mipFac = 1.0;
    var mipAdd = 0.25;
    for (var i = 2; i <= mipLevels; i++) {
      mipFac += mipAdd;
      mipAdd *= 0.25;
    }
    return roundToInt(Kotlin.imul(Kotlin.imul(Kotlin.imul(width, height), layers), bytesPerPx) * mipFac);
  };
  Texture$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Texture$Companion_instance = null;
  function Texture$Companion_getInstance() {
    if (Texture$Companion_instance === null) {
      new Texture$Companion();
    }return Texture$Companion_instance;
  }
  Texture.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Texture',
    interfaces: []
  };
  function SingleColorTexture(color) {
    SingleColorTexture$Companion_getInstance();
    Texture.call(this, new TextureProps(void 0, void 0, void 0, void 0, FilterMethod$NEAREST_getInstance(), FilterMethod$NEAREST_getInstance(), false, 1), SingleColorTexture_init$lambda(color));
  }
  function SingleColorTexture$Companion() {
    SingleColorTexture$Companion_instance = this;
    this.colorData_0 = LinkedHashMap_init();
  }
  SingleColorTexture$Companion.prototype.getColorTextureData_0 = function (color) {
    var $receiver = this.colorData_0;
    var tmp$;
    var value = $receiver.get_11rb$(color);
    if (value == null) {
      var answer = BufferedTextureData$Companion_getInstance().singleColor_d7aj7k$(color);
      $receiver.put_xwzc9p$(color, answer);
      tmp$ = answer;
    } else {
      tmp$ = value;
    }
    return tmp$;
  };
  SingleColorTexture$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SingleColorTexture$Companion_instance = null;
  function SingleColorTexture$Companion_getInstance() {
    if (SingleColorTexture$Companion_instance === null) {
      new SingleColorTexture$Companion();
    }return SingleColorTexture$Companion_instance;
  }
  function Coroutine$SingleColorTexture_init$lambda(closure$color_0, $receiver_0, it_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$color = closure$color_0;
  }
  Coroutine$SingleColorTexture_init$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$SingleColorTexture_init$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$SingleColorTexture_init$lambda.prototype.constructor = Coroutine$SingleColorTexture_init$lambda;
  Coroutine$SingleColorTexture_init$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return SingleColorTexture$Companion_getInstance().getColorTextureData_0(this.local$closure$color);
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function SingleColorTexture_init$lambda(closure$color_0) {
    return function ($receiver_0, it_0, continuation_0, suspended) {
      var instance = new Coroutine$SingleColorTexture_init$lambda(closure$color_0, $receiver_0, it_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  SingleColorTexture.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SingleColorTexture',
    interfaces: [Texture]
  };
  function CubeMapTexture(props, loader) {
    if (props === void 0)
      props = new TextureProps();
    Texture.call(this, props, loader);
  }
  CubeMapTexture.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CubeMapTexture',
    interfaces: [Texture]
  };
  function TextureProps(format, addressModeU, addressModeV, addressModeW, minFilter, magFilter, mipMapping, maxAnisotropy) {
    if (format === void 0)
      format = TexFormat$RGBA_getInstance();
    if (addressModeU === void 0)
      addressModeU = AddressMode$REPEAT_getInstance();
    if (addressModeV === void 0)
      addressModeV = AddressMode$REPEAT_getInstance();
    if (addressModeW === void 0)
      addressModeW = AddressMode$REPEAT_getInstance();
    if (minFilter === void 0)
      minFilter = FilterMethod$LINEAR_getInstance();
    if (magFilter === void 0)
      magFilter = FilterMethod$LINEAR_getInstance();
    if (mipMapping === void 0)
      mipMapping = true;
    if (maxAnisotropy === void 0)
      maxAnisotropy = 16;
    this.format = format;
    this.addressModeU = addressModeU;
    this.addressModeV = addressModeV;
    this.addressModeW = addressModeW;
    this.minFilter = minFilter;
    this.magFilter = magFilter;
    this.mipMapping = mipMapping;
    this.maxAnisotropy = maxAnisotropy;
  }
  TextureProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextureProps',
    interfaces: []
  };
  TextureProps.prototype.component1 = function () {
    return this.format;
  };
  TextureProps.prototype.component2 = function () {
    return this.addressModeU;
  };
  TextureProps.prototype.component3 = function () {
    return this.addressModeV;
  };
  TextureProps.prototype.component4 = function () {
    return this.addressModeW;
  };
  TextureProps.prototype.component5 = function () {
    return this.minFilter;
  };
  TextureProps.prototype.component6 = function () {
    return this.magFilter;
  };
  TextureProps.prototype.component7 = function () {
    return this.mipMapping;
  };
  TextureProps.prototype.component8 = function () {
    return this.maxAnisotropy;
  };
  TextureProps.prototype.copy_1w7iuy$ = function (format, addressModeU, addressModeV, addressModeW, minFilter, magFilter, mipMapping, maxAnisotropy) {
    return new TextureProps(format === void 0 ? this.format : format, addressModeU === void 0 ? this.addressModeU : addressModeU, addressModeV === void 0 ? this.addressModeV : addressModeV, addressModeW === void 0 ? this.addressModeW : addressModeW, minFilter === void 0 ? this.minFilter : minFilter, magFilter === void 0 ? this.magFilter : magFilter, mipMapping === void 0 ? this.mipMapping : mipMapping, maxAnisotropy === void 0 ? this.maxAnisotropy : maxAnisotropy);
  };
  TextureProps.prototype.toString = function () {
    return 'TextureProps(format=' + Kotlin.toString(this.format) + (', addressModeU=' + Kotlin.toString(this.addressModeU)) + (', addressModeV=' + Kotlin.toString(this.addressModeV)) + (', addressModeW=' + Kotlin.toString(this.addressModeW)) + (', minFilter=' + Kotlin.toString(this.minFilter)) + (', magFilter=' + Kotlin.toString(this.magFilter)) + (', mipMapping=' + Kotlin.toString(this.mipMapping)) + (', maxAnisotropy=' + Kotlin.toString(this.maxAnisotropy)) + ')';
  };
  TextureProps.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.format) | 0;
    result = result * 31 + Kotlin.hashCode(this.addressModeU) | 0;
    result = result * 31 + Kotlin.hashCode(this.addressModeV) | 0;
    result = result * 31 + Kotlin.hashCode(this.addressModeW) | 0;
    result = result * 31 + Kotlin.hashCode(this.minFilter) | 0;
    result = result * 31 + Kotlin.hashCode(this.magFilter) | 0;
    result = result * 31 + Kotlin.hashCode(this.mipMapping) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxAnisotropy) | 0;
    return result;
  };
  TextureProps.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.format, other.format) && Kotlin.equals(this.addressModeU, other.addressModeU) && Kotlin.equals(this.addressModeV, other.addressModeV) && Kotlin.equals(this.addressModeW, other.addressModeW) && Kotlin.equals(this.minFilter, other.minFilter) && Kotlin.equals(this.magFilter, other.magFilter) && Kotlin.equals(this.mipMapping, other.mipMapping) && Kotlin.equals(this.maxAnisotropy, other.maxAnisotropy)))));
  };
  function FilterMethod(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function FilterMethod_initFields() {
    FilterMethod_initFields = function () {
    };
    FilterMethod$NEAREST_instance = new FilterMethod('NEAREST', 0);
    FilterMethod$LINEAR_instance = new FilterMethod('LINEAR', 1);
  }
  var FilterMethod$NEAREST_instance;
  function FilterMethod$NEAREST_getInstance() {
    FilterMethod_initFields();
    return FilterMethod$NEAREST_instance;
  }
  var FilterMethod$LINEAR_instance;
  function FilterMethod$LINEAR_getInstance() {
    FilterMethod_initFields();
    return FilterMethod$LINEAR_instance;
  }
  FilterMethod.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FilterMethod',
    interfaces: [Enum]
  };
  function FilterMethod$values() {
    return [FilterMethod$NEAREST_getInstance(), FilterMethod$LINEAR_getInstance()];
  }
  FilterMethod.values = FilterMethod$values;
  function FilterMethod$valueOf(name) {
    switch (name) {
      case 'NEAREST':
        return FilterMethod$NEAREST_getInstance();
      case 'LINEAR':
        return FilterMethod$LINEAR_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.pipeline.FilterMethod.' + name);
    }
  }
  FilterMethod.valueOf_61zpoe$ = FilterMethod$valueOf;
  function AddressMode(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function AddressMode_initFields() {
    AddressMode_initFields = function () {
    };
    AddressMode$CLAMP_TO_BORDER_instance = new AddressMode('CLAMP_TO_BORDER', 0);
    AddressMode$CLAMP_TO_EDGE_instance = new AddressMode('CLAMP_TO_EDGE', 1);
    AddressMode$MIRRORED_REPEAT_instance = new AddressMode('MIRRORED_REPEAT', 2);
    AddressMode$REPEAT_instance = new AddressMode('REPEAT', 3);
  }
  var AddressMode$CLAMP_TO_BORDER_instance;
  function AddressMode$CLAMP_TO_BORDER_getInstance() {
    AddressMode_initFields();
    return AddressMode$CLAMP_TO_BORDER_instance;
  }
  var AddressMode$CLAMP_TO_EDGE_instance;
  function AddressMode$CLAMP_TO_EDGE_getInstance() {
    AddressMode_initFields();
    return AddressMode$CLAMP_TO_EDGE_instance;
  }
  var AddressMode$MIRRORED_REPEAT_instance;
  function AddressMode$MIRRORED_REPEAT_getInstance() {
    AddressMode_initFields();
    return AddressMode$MIRRORED_REPEAT_instance;
  }
  var AddressMode$REPEAT_instance;
  function AddressMode$REPEAT_getInstance() {
    AddressMode_initFields();
    return AddressMode$REPEAT_instance;
  }
  AddressMode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AddressMode',
    interfaces: [Enum]
  };
  function AddressMode$values() {
    return [AddressMode$CLAMP_TO_BORDER_getInstance(), AddressMode$CLAMP_TO_EDGE_getInstance(), AddressMode$MIRRORED_REPEAT_getInstance(), AddressMode$REPEAT_getInstance()];
  }
  AddressMode.values = AddressMode$values;
  function AddressMode$valueOf(name) {
    switch (name) {
      case 'CLAMP_TO_BORDER':
        return AddressMode$CLAMP_TO_BORDER_getInstance();
      case 'CLAMP_TO_EDGE':
        return AddressMode$CLAMP_TO_EDGE_getInstance();
      case 'MIRRORED_REPEAT':
        return AddressMode$MIRRORED_REPEAT_getInstance();
      case 'REPEAT':
        return AddressMode$REPEAT_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.pipeline.AddressMode.' + name);
    }
  }
  AddressMode.valueOf_61zpoe$ = AddressMode$valueOf;
  function TextureData() {
    this.width_g2mups$_0 = 0;
    this.height_9y5xsp$_0 = 0;
    this.format_yfgg89$_0 = TexFormat$RGBA_getInstance();
  }
  Object.defineProperty(TextureData.prototype, 'width', {
    get: function () {
      return this.width_g2mups$_0;
    },
    set: function (width) {
      this.width_g2mups$_0 = width;
    }
  });
  Object.defineProperty(TextureData.prototype, 'height', {
    get: function () {
      return this.height_9y5xsp$_0;
    },
    set: function (height) {
      this.height_9y5xsp$_0 = height;
    }
  });
  Object.defineProperty(TextureData.prototype, 'format', {
    get: function () {
      return this.format_yfgg89$_0;
    },
    set: function (format) {
      this.format_yfgg89$_0 = format;
    }
  });
  TextureData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextureData',
    interfaces: []
  };
  function BufferedTextureData(buffer, width, height, format) {
    BufferedTextureData$Companion_getInstance();
    TextureData.call(this);
    this.width = width;
    this.height = height;
    this.format = format;
    this.data_glz8b$_0 = buffer;
  }
  Object.defineProperty(BufferedTextureData.prototype, 'data', {
    get: function () {
      return this.data_glz8b$_0;
    }
  });
  function BufferedTextureData$Companion() {
    BufferedTextureData$Companion_instance = this;
  }
  BufferedTextureData$Companion.prototype.singleColor_d7aj7k$ = function (color) {
    var buf = createUint8Buffer(4);
    buf.set_6t1wet$(0, toByte(roundToInt(color.r * 255.0)));
    buf.set_6t1wet$(1, toByte(roundToInt(color.g * 255.0)));
    buf.set_6t1wet$(2, toByte(roundToInt(color.b * 255.0)));
    buf.set_6t1wet$(3, toByte(roundToInt(color.a * 255.0)));
    return new BufferedTextureData(buf, 1, 1, TexFormat$RGBA_getInstance());
  };
  BufferedTextureData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var BufferedTextureData$Companion_instance = null;
  function BufferedTextureData$Companion_getInstance() {
    if (BufferedTextureData$Companion_instance === null) {
      new BufferedTextureData$Companion();
    }return BufferedTextureData$Companion_instance;
  }
  BufferedTextureData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BufferedTextureData',
    interfaces: [TextureData]
  };
  function CubeMapTextureData(front, back, left, right, up, down) {
    TextureData.call(this);
    this.front = front;
    this.back = back;
    this.left = left;
    this.right = right;
    this.up = up;
    this.down = down;
    this.width = this.front.width;
    this.height = this.front.height;
    this.format = this.front.format;
  }
  Object.defineProperty(CubeMapTextureData.prototype, 'data', {
    get: function () {
      return this.front.data;
    }
  });
  CubeMapTextureData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CubeMapTextureData',
    interfaces: [TextureData]
  };
  function Uniform(value, name) {
    this.value = value;
    this.name = name;
    this.length_pgm1d5$_0 = 1;
  }
  Object.defineProperty(Uniform.prototype, 'typeSize', {
    get: function () {
      return this.size;
    }
  });
  Object.defineProperty(Uniform.prototype, 'length', {
    get: function () {
      return this.length_pgm1d5$_0;
    }
  });
  Uniform.prototype.toString = function () {
    return this.name;
  };
  Uniform.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform',
    interfaces: []
  };
  function Uniform1f(name) {
    Uniform.call(this, 0.0, name);
    this.size_i0aw35$_0 = 4;
  }
  Object.defineProperty(Uniform1f.prototype, 'size', {
    get: function () {
      return this.size_i0aw35$_0;
    }
  });
  Uniform1f.prototype.putTo_l6oshk$ = function (buffer) {
    buffer.putFloat32_mx4ult$(this.value);
  };
  Uniform1f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform1f',
    interfaces: [Uniform]
  };
  function Uniform1f_init(initValue, name, $this) {
    $this = $this || Object.create(Uniform1f.prototype);
    Uniform1f.call($this, name);
    $this.value = initValue;
    return $this;
  }
  function Uniform2f(name) {
    Uniform.call(this, MutableVec2f_init(), name);
    this.size_o76ots$_0 = 8;
  }
  Object.defineProperty(Uniform2f.prototype, 'size', {
    get: function () {
      return this.size_o76ots$_0;
    }
  });
  Uniform2f.prototype.putTo_l6oshk$ = function (buffer) {
    buffer.putFloat32_q3cr5i$(this.value.array);
  };
  Uniform2f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform2f',
    interfaces: [Uniform]
  };
  function Uniform2f_init(initValue, name, $this) {
    $this = $this || Object.create(Uniform2f.prototype);
    Uniform2f.call($this, name);
    $this.value.set_czzhjp$(initValue);
    return $this;
  }
  function Uniform3f(name) {
    Uniform.call(this, MutableVec3f_init(), name);
    this.size_4mfs8f$_0 = 16;
  }
  Object.defineProperty(Uniform3f.prototype, 'size', {
    get: function () {
      return this.size_4mfs8f$_0;
    }
  });
  Uniform3f.prototype.putTo_l6oshk$ = function (buffer) {
    buffer.putFloat32_q3cr5i$(this.value.array);
    buffer.putUint32_za3lpa$(0);
  };
  Uniform3f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform3f',
    interfaces: [Uniform]
  };
  function Uniform3f_init(initValue, name, $this) {
    $this = $this || Object.create(Uniform3f.prototype);
    Uniform3f.call($this, name);
    $this.value.set_czzhiu$(initValue);
    return $this;
  }
  function Uniform4f(name) {
    Uniform.call(this, MutableVec4f_init(), name);
    this.size_xg29am$_0 = 16;
  }
  Object.defineProperty(Uniform4f.prototype, 'size', {
    get: function () {
      return this.size_xg29am$_0;
    }
  });
  Uniform4f.prototype.putTo_l6oshk$ = function (buffer) {
    buffer.putFloat32_q3cr5i$(this.value.array);
  };
  Uniform4f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform4f',
    interfaces: [Uniform]
  };
  function Uniform4f_init(initValue, name, $this) {
    $this = $this || Object.create(Uniform4f.prototype);
    Uniform4f.call($this, name);
    $this.value.set_czzhhz$(initValue);
    return $this;
  }
  function UniformColor(name) {
    Uniform.call(this, MutableColor_init(), name);
    this.size_tg5r8j$_0 = 16;
  }
  Object.defineProperty(UniformColor.prototype, 'size', {
    get: function () {
      return this.size_tg5r8j$_0;
    }
  });
  UniformColor.prototype.putTo_l6oshk$ = function (buffer) {
    buffer.putFloat32_q3cr5i$(this.value.array);
  };
  UniformColor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UniformColor',
    interfaces: [Uniform]
  };
  function UniformColor_init(initValue, name, $this) {
    $this = $this || Object.create(UniformColor.prototype);
    UniformColor.call($this, name);
    $this.value.set_d7aj7k$(initValue);
    return $this;
  }
  function Uniform1fv(name, length) {
    Uniform.call(this, new Float32Array(length), name);
    this.length_4yln86$_0 = length;
    this.size_jukhwb$_0 = 16 * this.length | 0;
    this.typeSize_inwio1$_0 = 4;
  }
  Object.defineProperty(Uniform1fv.prototype, 'length', {
    get: function () {
      return this.length_4yln86$_0;
    }
  });
  Object.defineProperty(Uniform1fv.prototype, 'size', {
    get: function () {
      return this.size_jukhwb$_0;
    }
  });
  Object.defineProperty(Uniform1fv.prototype, 'typeSize', {
    get: function () {
      return this.typeSize_inwio1$_0;
    }
  });
  Uniform1fv.prototype.putTo_l6oshk$ = function (buffer) {
    var tmp$;
    tmp$ = this.length;
    for (var i = 0; i < tmp$; i++) {
      buffer.putFloat32_mx4ult$(this.value[i]);
      buffer.putUint32_za3lpa$(0);
      buffer.putUint32_za3lpa$(0);
      buffer.putUint32_za3lpa$(0);
    }
  };
  Uniform1fv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform1fv',
    interfaces: [Uniform]
  };
  function Uniform2fv(name, length) {
    var array = Array_0(length);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = MutableVec2f_init();
    }
    Uniform.call(this, array, name);
    this.length_or99bd$_0 = length;
    this.size_a1jiw4$_0 = 16 * this.length | 0;
  }
  Object.defineProperty(Uniform2fv.prototype, 'length', {
    get: function () {
      return this.length_or99bd$_0;
    }
  });
  Object.defineProperty(Uniform2fv.prototype, 'size', {
    get: function () {
      return this.size_a1jiw4$_0;
    }
  });
  Uniform2fv.prototype.putTo_l6oshk$ = function (buffer) {
    var tmp$;
    tmp$ = this.length;
    for (var i = 0; i < tmp$; i++) {
      buffer.putFloat32_q3cr5i$(this.value[i].array);
      buffer.putUint32_za3lpa$(0);
      buffer.putUint32_za3lpa$(0);
    }
  };
  Uniform2fv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform2fv',
    interfaces: [Uniform]
  };
  function Uniform3fv(name, length) {
    var array = Array_0(length);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = MutableVec3f_init();
    }
    Uniform.call(this, array, name);
    this.length_gjzw48$_0 = length;
    this.size_v3gial$_0 = 16 * this.length | 0;
  }
  Object.defineProperty(Uniform3fv.prototype, 'length', {
    get: function () {
      return this.length_gjzw48$_0;
    }
  });
  Object.defineProperty(Uniform3fv.prototype, 'size', {
    get: function () {
      return this.size_v3gial$_0;
    }
  });
  Uniform3fv.prototype.putTo_l6oshk$ = function (buffer) {
    var tmp$;
    tmp$ = this.length;
    for (var i = 0; i < tmp$; i++) {
      buffer.putFloat32_q3cr5i$(this.value[i].array);
      buffer.putUint32_za3lpa$(0);
    }
  };
  Uniform3fv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform3fv',
    interfaces: [Uniform]
  };
  function Uniform4fv(name, length) {
    var array = Array_0(length);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = MutableVec4f_init();
    }
    Uniform.call(this, array, name);
    this.length_d5v0fb$_0 = length;
    this.size_17chi6$_0 = 16 * this.length | 0;
  }
  Object.defineProperty(Uniform4fv.prototype, 'length', {
    get: function () {
      return this.length_d5v0fb$_0;
    }
  });
  Object.defineProperty(Uniform4fv.prototype, 'size', {
    get: function () {
      return this.size_17chi6$_0;
    }
  });
  Uniform4fv.prototype.putTo_l6oshk$ = function (buffer) {
    var tmp$;
    tmp$ = this.length;
    for (var i = 0; i < tmp$; i++) {
      buffer.putFloat32_q3cr5i$(this.value[i].array);
    }
  };
  Uniform4fv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform4fv',
    interfaces: [Uniform]
  };
  function UniformMat3f(name) {
    Uniform.call(this, new Mat3f(), name);
    this.size_aq1f2r$_0 = 36;
  }
  Object.defineProperty(UniformMat3f.prototype, 'size', {
    get: function () {
      return this.size_aq1f2r$_0;
    }
  });
  UniformMat3f.prototype.putTo_l6oshk$ = function (buffer) {
    buffer.putFloat32_q3cr5i$(this.value.matrix);
  };
  UniformMat3f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UniformMat3f',
    interfaces: [Uniform]
  };
  function UniformMat4f(name) {
    Uniform.call(this, new Mat4f(), name);
    this.size_i3l1zg$_0 = 64;
  }
  Object.defineProperty(UniformMat4f.prototype, 'size', {
    get: function () {
      return this.size_i3l1zg$_0;
    }
  });
  UniformMat4f.prototype.putTo_l6oshk$ = function (buffer) {
    buffer.putFloat32_q3cr5i$(this.value.matrix);
  };
  UniformMat4f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UniformMat4f',
    interfaces: [Uniform]
  };
  function UniformMat4fv(name, length) {
    var array = Array_0(length);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new Mat4f();
    }
    Uniform.call(this, array, name);
    this.length_m05swr$_0 = length;
    this.size_mobkps$_0 = 64 * this.length | 0;
  }
  Object.defineProperty(UniformMat4fv.prototype, 'length', {
    get: function () {
      return this.length_m05swr$_0;
    }
  });
  Object.defineProperty(UniformMat4fv.prototype, 'size', {
    get: function () {
      return this.size_mobkps$_0;
    }
  });
  UniformMat4fv.prototype.putTo_l6oshk$ = function (buffer) {
    var tmp$;
    tmp$ = this.length;
    for (var i = 0; i < tmp$; i++) {
      buffer.putFloat32_q3cr5i$(this.value[i].matrix);
    }
  };
  UniformMat4fv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UniformMat4fv',
    interfaces: [Uniform]
  };
  function Uniform1i(name) {
    Uniform.call(this, 0, name);
    this.size_8zmb7w$_0 = 4;
  }
  Object.defineProperty(Uniform1i.prototype, 'size', {
    get: function () {
      return this.size_8zmb7w$_0;
    }
  });
  Uniform1i.prototype.putTo_l6oshk$ = function (buffer) {
    buffer.putUint32_za3lpa$(this.value);
  };
  Uniform1i.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform1i',
    interfaces: [Uniform]
  };
  function Uniform1i_init(initValue, name, $this) {
    $this = $this || Object.create(Uniform1i.prototype);
    Uniform1i.call($this, name);
    $this.value = initValue;
    return $this;
  }
  function Uniform1iv(name, length) {
    Uniform.call(this, new Int32Array(length), name);
    this.length_4se959$_0 = length;
    this.size_zabv3s$_0 = 16 * this.length | 0;
    this.typeSize_p2gl9a$_0 = 4;
  }
  Object.defineProperty(Uniform1iv.prototype, 'length', {
    get: function () {
      return this.length_4se959$_0;
    }
  });
  Object.defineProperty(Uniform1iv.prototype, 'size', {
    get: function () {
      return this.size_zabv3s$_0;
    }
  });
  Object.defineProperty(Uniform1iv.prototype, 'typeSize', {
    get: function () {
      return this.typeSize_p2gl9a$_0;
    }
  });
  Uniform1iv.prototype.putTo_l6oshk$ = function (buffer) {
    var tmp$;
    tmp$ = this.length;
    for (var i = 0; i < tmp$; i++) {
      buffer.putUint32_za3lpa$(this.value[i]);
      buffer.putUint32_za3lpa$(0);
      buffer.putUint32_za3lpa$(0);
      buffer.putUint32_za3lpa$(0);
    }
  };
  Uniform1iv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uniform1iv',
    interfaces: [Uniform]
  };
  function VertexLayout(bindings, primitiveType) {
    this.bindings = bindings;
    this.primitiveType = primitiveType;
    this.longHash = null;
    var $receiver = this.primitiveType.hashCode();
    var toULong$result;
    toULong$result = new ULong(Kotlin.Long.fromInt($receiver));
    var hash = {v: new ULong((new ULong(Kotlin.Long.fromInt(71023))).data.multiply(toULong$result.data))};
    var tmp$;
    tmp$ = this.bindings.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var $this = hash.v;
      var other = new ULong(Kotlin.Long.fromInt(71023));
      var $this_0 = new ULong($this.data.multiply(other.data));
      var other_0 = element.longHash;
      hash.v = new ULong($this_0.data.add(other_0.data));
    }
    this.longHash = hash.v;
  }
  function VertexLayout$Binding(binding, inputRate, vertexAttributes, strideBytes) {
    if (strideBytes === void 0) {
      var tmp$;
      var sum = 0;
      tmp$ = vertexAttributes.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = sum + element.attribute.type.size | 0;
      }
      strideBytes = sum;
    }this.binding = binding;
    this.inputRate = inputRate;
    this.vertexAttributes = vertexAttributes;
    this.strideBytes = strideBytes;
    this.longHash = null;
    var $receiver = this.binding;
    var hash = {v: new ULong(Kotlin.Long.fromInt($receiver))};
    var $this = hash.v;
    var other = new ULong(Kotlin.Long.fromInt(71023));
    var tmp$_0 = new ULong($this.data.multiply(other.data));
    var $receiver_0 = this.inputRate.hashCode();
    var other_0 = new ULong(Kotlin.Long.fromInt($receiver_0));
    hash.v = new ULong(tmp$_0.data.add(other_0.data));
    var $this_0 = hash.v;
    var other_1 = new ULong(Kotlin.Long.fromInt(71023));
    var tmp$_1 = new ULong($this_0.data.multiply(other_1.data));
    var $receiver_1 = this.strideBytes;
    var other_2 = new ULong(Kotlin.Long.fromInt($receiver_1));
    hash.v = new ULong(tmp$_1.data.add(other_2.data));
    var tmp$_2;
    tmp$_2 = this.vertexAttributes.iterator();
    while (tmp$_2.hasNext()) {
      var element_0 = tmp$_2.next();
      var $this_1 = hash.v;
      var other_3 = new ULong(Kotlin.Long.fromInt(71023));
      var tmp$_3 = new ULong($this_1.data.multiply(other_3.data));
      var $receiver_2 = element_0.hashCode();
      var other_4 = new ULong(Kotlin.Long.fromInt($receiver_2));
      hash.v = new ULong(tmp$_3.data.add(other_4.data));
    }
    this.longHash = hash.v;
  }
  VertexLayout$Binding.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Binding',
    interfaces: []
  };
  VertexLayout$Binding.prototype.component1 = function () {
    return this.binding;
  };
  VertexLayout$Binding.prototype.component2 = function () {
    return this.inputRate;
  };
  VertexLayout$Binding.prototype.component3 = function () {
    return this.vertexAttributes;
  };
  VertexLayout$Binding.prototype.component4 = function () {
    return this.strideBytes;
  };
  VertexLayout$Binding.prototype.copy_beujkh$ = function (binding, inputRate, vertexAttributes, strideBytes) {
    return new VertexLayout$Binding(binding === void 0 ? this.binding : binding, inputRate === void 0 ? this.inputRate : inputRate, vertexAttributes === void 0 ? this.vertexAttributes : vertexAttributes, strideBytes === void 0 ? this.strideBytes : strideBytes);
  };
  VertexLayout$Binding.prototype.toString = function () {
    return 'Binding(binding=' + Kotlin.toString(this.binding) + (', inputRate=' + Kotlin.toString(this.inputRate)) + (', vertexAttributes=' + Kotlin.toString(this.vertexAttributes)) + (', strideBytes=' + Kotlin.toString(this.strideBytes)) + ')';
  };
  VertexLayout$Binding.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.binding) | 0;
    result = result * 31 + Kotlin.hashCode(this.inputRate) | 0;
    result = result * 31 + Kotlin.hashCode(this.vertexAttributes) | 0;
    result = result * 31 + Kotlin.hashCode(this.strideBytes) | 0;
    return result;
  };
  VertexLayout$Binding.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.binding, other.binding) && Kotlin.equals(this.inputRate, other.inputRate) && Kotlin.equals(this.vertexAttributes, other.vertexAttributes) && Kotlin.equals(this.strideBytes, other.strideBytes)))));
  };
  function VertexLayout$VertexAttribute(location, offset, attribute) {
    this.location = location;
    this.offset = offset;
    this.attribute = attribute;
  }
  Object.defineProperty(VertexLayout$VertexAttribute.prototype, 'name', {
    get: function () {
      return this.attribute.name;
    }
  });
  Object.defineProperty(VertexLayout$VertexAttribute.prototype, 'type', {
    get: function () {
      return this.attribute.type;
    }
  });
  VertexLayout$VertexAttribute.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VertexAttribute',
    interfaces: []
  };
  VertexLayout$VertexAttribute.prototype.component1 = function () {
    return this.location;
  };
  VertexLayout$VertexAttribute.prototype.component2 = function () {
    return this.offset;
  };
  VertexLayout$VertexAttribute.prototype.component3 = function () {
    return this.attribute;
  };
  VertexLayout$VertexAttribute.prototype.copy_767q6x$ = function (location, offset, attribute) {
    return new VertexLayout$VertexAttribute(location === void 0 ? this.location : location, offset === void 0 ? this.offset : offset, attribute === void 0 ? this.attribute : attribute);
  };
  VertexLayout$VertexAttribute.prototype.toString = function () {
    return 'VertexAttribute(location=' + Kotlin.toString(this.location) + (', offset=' + Kotlin.toString(this.offset)) + (', attribute=' + Kotlin.toString(this.attribute)) + ')';
  };
  VertexLayout$VertexAttribute.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.location) | 0;
    result = result * 31 + Kotlin.hashCode(this.offset) | 0;
    result = result * 31 + Kotlin.hashCode(this.attribute) | 0;
    return result;
  };
  VertexLayout$VertexAttribute.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.location, other.location) && Kotlin.equals(this.offset, other.offset) && Kotlin.equals(this.attribute, other.attribute)))));
  };
  function VertexLayout$Builder() {
    this.primitiveType = PrimitiveType$TRIANGLES_getInstance();
    this.bindings = ArrayList_init_0();
  }
  VertexLayout$Builder.prototype.create = function () {
    return new VertexLayout(copy(this.bindings), this.primitiveType);
  };
  VertexLayout$Builder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Builder',
    interfaces: []
  };
  VertexLayout.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VertexLayout',
    interfaces: []
  };
  function InputRate(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function InputRate_initFields() {
    InputRate_initFields = function () {
    };
    InputRate$VERTEX_instance = new InputRate('VERTEX', 0);
    InputRate$INSTANCE_instance = new InputRate('INSTANCE', 1);
  }
  var InputRate$VERTEX_instance;
  function InputRate$VERTEX_getInstance() {
    InputRate_initFields();
    return InputRate$VERTEX_instance;
  }
  var InputRate$INSTANCE_instance;
  function InputRate$INSTANCE_getInstance() {
    InputRate_initFields();
    return InputRate$INSTANCE_instance;
  }
  InputRate.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InputRate',
    interfaces: [Enum]
  };
  function InputRate$values() {
    return [InputRate$VERTEX_getInstance(), InputRate$INSTANCE_getInstance()];
  }
  InputRate.values = InputRate$values;
  function InputRate$valueOf(name) {
    switch (name) {
      case 'VERTEX':
        return InputRate$VERTEX_getInstance();
      case 'INSTANCE':
        return InputRate$INSTANCE_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.pipeline.InputRate.' + name);
    }
  }
  InputRate.valueOf_61zpoe$ = InputRate$valueOf;
  function toString_0($receiver, precision) {
    return toString_1($receiver, precision);
  }
  function Animation(duration) {
    this.duration = duration;
    this.channels = ArrayList_init_0();
    this.weight = 0.0;
  }
  Animation.prototype.apply_8ca0d4$ = function (pos, clearTransform) {
    var tmp$;
    tmp$ = this.channels;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.channels.get_za3lpa$(i).apply_g1oyt7$(pos * this.duration, this.weight, clearTransform);
    }
  };
  Animation.prototype.copy_pb6i6z$ = function (withNodes) {
    var copy = new Animation(this.duration);
    var tmp$;
    tmp$ = this.channels.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var $receiver = copy.channels;
      var element_0 = element.copy_dm1hwa$(ensureNotNull(withNodes.get_11rb$(element.name)));
      $receiver.add_11rb$(element_0);
    }
    return copy;
  };
  Animation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Animation',
    interfaces: []
  };
  function Armature(geometry, name) {
    Armature$Companion_getInstance();
    if (name === void 0)
      name = null;
    Mesh.call(this, geometry, name);
    this.rootBones = ArrayList_init_0();
    this.bones = LinkedHashMap_init();
    this.indexedBones_emt8o4$_0 = ArrayList_init_0();
    this.boneTransforms_8cyf9r$_0 = null;
    this.isCpuAnimated = false;
    this.animations_k11tmz$_0 = LinkedHashMap_init();
    this.animationList_t94xw8$_0 = ArrayList_init_0();
    this.animationPos = 0.0;
    this.animationSpeed = 1.0;
    this.transform_sr6hm6$_0 = new Mat4fStack();
    this.tmpTransform_4g4z8l$_0 = new Mat4f();
    this.tmpVec_lyxif1$_0 = MutableVec3f_init();
    this.originalGeometry_x1vy6v$_0 = geometry;
    this.meshV_mh84a9$_0 = null;
    this.origV_nmaa6d$_0 = null;
    var tmp$, tmp$_0;
    var armatureAttribs = mutableListOf([Armature$Companion_getInstance().BONE_WEIGHTS, Armature$Companion_getInstance().BONE_INDICES]);
    armatureAttribs.addAll_brywnq$(geometry.vertexAttributes);
    this.geometry = new IndexedVertexList(armatureAttribs);
    this.origV_nmaa6d$_0 = this.originalGeometry_x1vy6v$_0.get_za3lpa$(0);
    tmp$ = this.originalGeometry_x1vy6v$_0.numVertices;
    for (var i = 0; i < tmp$; i++) {
      this.origV_nmaa6d$_0.index = i;
      var $this = this.geometry;
      var tmp$_1, tmp$_2, tmp$_3;
      $this.checkBufferSizes_za3lpa$();
      tmp$_1 = $this.vertexSizeF;
      for (var i_0 = 1; i_0 <= tmp$_1; i_0++) {
        $this.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_2 = $this.vertexSizeI;
      for (var i_1 = 1; i_1 <= tmp$_2; i_1++) {
        $this.dataI.plusAssign_za3lpa$(0);
      }
      $this.vertexIt.index = (tmp$_3 = $this.numVertices, $this.numVertices = tmp$_3 + 1 | 0, tmp$_3);
      $this.vertexIt.set_fs4kvg$(this.origV_nmaa6d$_0);
      $this.bounds.add_czzhiu$($this.vertexIt.position);
      $this.hasChanged = true;
      $this.numVertices - 1 | 0;
    }
    tmp$_0 = this.originalGeometry_x1vy6v$_0.numIndices;
    for (var i_2 = 0; i_2 < tmp$_0; i_2++) {
      this.geometry.addIndex_za3lpa$(this.originalGeometry_x1vy6v$_0.indices.get_za3lpa$(i_2));
    }
    this.meshV_mh84a9$_0 = this.geometry.get_za3lpa$(0);
  }
  function Armature$BoneWeight(weight, id) {
    this.weight = weight;
    this.id = id;
  }
  Armature$BoneWeight.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BoneWeight',
    interfaces: []
  };
  Armature$BoneWeight.prototype.component1 = function () {
    return this.weight;
  };
  Armature$BoneWeight.prototype.component2 = function () {
    return this.id;
  };
  Armature$BoneWeight.prototype.copy_vjorfl$ = function (weight, id) {
    return new Armature$BoneWeight(weight === void 0 ? this.weight : weight, id === void 0 ? this.id : id);
  };
  Armature$BoneWeight.prototype.toString = function () {
    return 'BoneWeight(weight=' + Kotlin.toString(this.weight) + (', id=' + Kotlin.toString(this.id)) + ')';
  };
  Armature$BoneWeight.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.weight) | 0;
    result = result * 31 + Kotlin.hashCode(this.id) | 0;
    return result;
  };
  Armature$BoneWeight.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.weight, other.weight) && Kotlin.equals(this.id, other.id)))));
  };
  Armature.prototype.addBoneWeight_p70jd0$_0 = function (boneWeights, boneId, boneWeight) {
    for (var i = 0; i <= 3; i++) {
      if (boneWeight > boneWeights[i].weight) {
        boneWeights[i].weight = boneWeight;
        boneWeights[i].id = boneId;
        break;
      }}
  };
  Armature.prototype.copyBonesAndAnimations_rdsqcy$ = function (other) {
    var $receiver = this.bones;
    var map = other.bones;
    $receiver.putAll_a2k3zr$(map);
    addAll(this.rootBones, other.rootBones);
    this.updateBones();
    var tmp$;
    tmp$ = other.animations_k11tmz$_0.entries.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var name = element.key;
      var anim = element.value;
      this.addAnimation_z5ltv$(name, anim.copy_pb6i6z$(this.bones));
    }
  };
  Armature.prototype.updateBones = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    this.indexedBones_emt8o4$_0.clear();
    this.indexedBones_emt8o4$_0.addAll_brywnq$(this.bones.values);
    this.boneTransforms_8cyf9r$_0 = createFloat32Buffer(this.indexedBones_emt8o4$_0.size * 16 | 0);
    this.tmpTransform_4g4z8l$_0.setIdentity();
    var array = Array_0(this.geometry.numVertices);
    var tmp$_3;
    tmp$_3 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_3; i++) {
      var array_0 = Array_0(4);
      var tmp$_4;
      tmp$_4 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_4; i_0++) {
        array_0[i_0] = new Armature$BoneWeight(0.0, 0);
      }
      array[i] = array_0;
    }
    var boneWeights = array;
    var tmp$_5, tmp$_0_0;
    var index = 0;
    tmp$_5 = this.indexedBones_emt8o4$_0.iterator();
    while (tmp$_5.hasNext()) {
      var item = tmp$_5.next();
      var boneId = checkIndexOverflow((tmp$_0_0 = index, index = tmp$_0_0 + 1 | 0, tmp$_0_0));
      var tmp$_6;
      item.id = boneId;
      ensureNotNull(this.boneTransforms_8cyf9r$_0).position = boneId * 16 | 0;
      this.tmpTransform_4g4z8l$_0.toBuffer_he122g$(ensureNotNull(this.boneTransforms_8cyf9r$_0));
      ensureNotNull(this.boneTransforms_8cyf9r$_0).limit = ensureNotNull(this.boneTransforms_8cyf9r$_0).capacity;
      tmp$_6 = item.vertexIds;
      for (var i_1 = 0; i_1 !== tmp$_6.length; ++i_1) {
        var vertexId = item.vertexIds[i_1];
        this.addBoneWeight_p70jd0$_0(boneWeights[vertexId], boneId, item.vertexWeights[i_1]);
      }
    }
    for (tmp$ = 0; tmp$ !== boneWeights.length; ++tmp$) {
      var vertexBoneWeights = boneWeights[tmp$];
      var tmp$_7;
      var sum = 0.0;
      for (tmp$_7 = 0; tmp$_7 !== vertexBoneWeights.length; ++tmp$_7) {
        var element = vertexBoneWeights[tmp$_7];
        sum += element.weight;
      }
      var weightSum = sum;
      var tmp$_8;
      for (tmp$_8 = 0; tmp$_8 !== vertexBoneWeights.length; ++tmp$_8) {
        var element_0 = vertexBoneWeights[tmp$_8];
        element_0.weight = element_0.weight / weightSum;
      }
    }
    var tmp$_9, tmp$_0_1;
    var index_0 = 0;
    tmp$_9 = this.indexedBones_emt8o4$_0.iterator();
    while (tmp$_9.hasNext()) {
      var item_0 = tmp$_9.next();
      var boneId_0 = checkIndexOverflow((tmp$_0_1 = index_0, index_0 = tmp$_0_1 + 1 | 0, tmp$_0_1));
      var tmp$_10;
      tmp$_10 = item_0.vertexIds;
      for (var i_2 = 0; i_2 !== tmp$_10.length; ++i_2) {
        var tmp$_11, tmp$_12;
        var vertexId_0 = item_0.vertexIds[i_2];
        item_0.vertexWeights[i_2] = 0.0;
        tmp$_11 = boneWeights[vertexId_0];
        for (tmp$_12 = 0; tmp$_12 !== tmp$_11.length; ++tmp$_12) {
          var boneW = tmp$_11[tmp$_12];
          if (boneW.id === boneId_0) {
            item_0.vertexWeights[i_2] = boneW.weight;
            break;
          }}
      }
    }
    tmp$_0 = this.geometry.numVertices;
    for (var i_3 = 0; i_3 < tmp$_0; i_3++) {
      var boneWs = boneWeights[i_3];
      this.meshV_mh84a9$_0.index = i_3;
      (tmp$_1 = this.meshV_mh84a9$_0.getVec4fAttribute_nm2vx5$(Armature$Companion_getInstance().BONE_WEIGHTS)) != null ? tmp$_1.set_7b5o5w$(boneWs[0].weight, boneWs[1].weight, boneWs[2].weight, boneWs[3].weight) : null;
      (tmp$_2 = this.meshV_mh84a9$_0.getVec4iAttribute_nm2vx5$(Armature$Companion_getInstance().BONE_INDICES)) != null ? (tmp$_2.set_tjonv8$(boneWs[0].id, boneWs[1].id, boneWs[2].id, boneWs[3].id), Unit) : null;
    }
  };
  Armature.prototype.getAnimation_61zpoe$ = function (name) {
    return this.animations_k11tmz$_0.get_11rb$(name);
  };
  Armature.prototype.addAnimation_z5ltv$ = function (name, animation) {
    this.animations_k11tmz$_0.put_xwzc9p$(name, animation);
    this.animationList_t94xw8$_0.add_11rb$(animation);
  };
  Armature.prototype.removeAnimation_61zpoe$ = function (name) {
    var $receiver = this.animationList_t94xw8$_0;
    var element = this.animations_k11tmz$_0.remove_11rb$(name);
    var tmp$;
    (Kotlin.isType(tmp$ = $receiver, MutableCollection) ? tmp$ : throwCCE()).remove_11rb$(element);
  };
  Armature.prototype.update_oco14p$ = function (renderPass, ctx) {
    if (ctx.deltaT > 0) {
      this.applyAnimation_vkqu3b$_0(ctx);
    }Mesh.prototype.update_oco14p$.call(this, renderPass, ctx);
  };
  Armature.prototype.collectDrawCommands_oco14p$ = function (renderPass, ctx) {
    Mesh.prototype.collectDrawCommands_oco14p$.call(this, renderPass, ctx);
  };
  function Armature$applyAnimation$lambda(this$Armature) {
    return function ($receiver) {
      var tmp$;
      this$Armature.clearMesh_q44r9c$_0();
      tmp$ = this$Armature.rootBones;
      for (var i = 0; i !== tmp$.size; ++i) {
        this$Armature.applyBone_luh3jt$_0(this$Armature.rootBones.get_za3lpa$(i), this$Armature.transform_sr6hm6$_0, this$Armature.isCpuAnimated);
      }
      return Unit;
    };
  }
  Armature.prototype.applyAnimation_vkqu3b$_0 = function (ctx) {
    var tmp$, tmp$_0, tmp$_1;
    var update = false;
    var weightedDuration = 0.0;
    tmp$ = this.animationList_t94xw8$_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      var anim = this.animationList_t94xw8$_0.get_za3lpa$(i);
      if (anim.weight > 0) {
        weightedDuration += anim.duration * anim.weight;
      }}
    this.animationPos = (this.animationPos + ctx.deltaT / weightedDuration * this.animationSpeed) % 1.0;
    tmp$_0 = this.animationList_t94xw8$_0;
    for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
      var anim_0 = this.animationList_t94xw8$_0.get_za3lpa$(i_0);
      if (anim_0.weight > 0) {
        anim_0.apply_8ca0d4$(this.animationPos, !update);
        update = true;
      }}
    if (update) {
      if (this.isCpuAnimated) {
        var $this = this.geometry;
        var wasBatchUpdate = $this.isBatchUpdate;
        $this.isBatchUpdate = true;
        Armature$applyAnimation$lambda(this)($this);
        $this.hasChanged = true;
        $this.isBatchUpdate = wasBatchUpdate;
        if (false) {
          $this.rebuildBounds();
        }} else {
        tmp$_1 = this.rootBones;
        for (var i_1 = 0; i_1 !== tmp$_1.size; ++i_1) {
          this.applyBone_luh3jt$_0(this.rootBones.get_za3lpa$(i_1), this.transform_sr6hm6$_0, this.isCpuAnimated);
        }
      }
    }};
  Armature.prototype.applyBone_luh3jt$_0 = function (bone, transform, updateMesh) {
    var tmp$;
    transform.push();
    transform.mul_d4zu6j$(bone.transform).mul_93v2ma$(bone.offsetMatrix, this.tmpTransform_4g4z8l$_0);
    if (updateMesh) {
      this.softTransformMesh_u789jd$_0(bone, this.tmpTransform_4g4z8l$_0);
    } else {
      ensureNotNull(this.boneTransforms_8cyf9r$_0).position = 16 * bone.id | 0;
      this.tmpTransform_4g4z8l$_0.toBuffer_he122g$(ensureNotNull(this.boneTransforms_8cyf9r$_0));
      ensureNotNull(this.boneTransforms_8cyf9r$_0).limit = ensureNotNull(this.boneTransforms_8cyf9r$_0).capacity;
    }
    tmp$ = bone.children;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.applyBone_luh3jt$_0(bone.children.get_za3lpa$(i), transform, updateMesh);
    }
    transform.pop();
  };
  Armature.prototype.clearMesh_q44r9c$_0 = function () {
    var tmp$;
    tmp$ = this.geometry.numVertices;
    for (var i = 0; i < tmp$; i++) {
      this.meshV_mh84a9$_0.index = i;
      this.meshV_mh84a9$_0.position.set_y2kzbl$(0.0, 0.0, 0.0);
      this.meshV_mh84a9$_0.normal.set_y2kzbl$(0.0, 0.0, 0.0);
    }
  };
  Armature.prototype.softTransformMesh_u789jd$_0 = function (bone, transform) {
    var tmp$;
    tmp$ = bone.vertexIds;
    for (var i = 0; i !== tmp$.length; ++i) {
      this.meshV_mh84a9$_0.index = bone.vertexIds[i];
      this.origV_nmaa6d$_0.index = bone.vertexIds[i];
      this.tmpVec_lyxif1$_0.set_czzhiu$(this.origV_nmaa6d$_0.position);
      transform.transform_w1lst9$(this.tmpVec_lyxif1$_0);
      this.tmpVec_lyxif1$_0.timesAssign_mx4ult$(bone.vertexWeights[i]);
      this.meshV_mh84a9$_0.position.plusAssign_czzhiu$(this.tmpVec_lyxif1$_0);
      this.tmpVec_lyxif1$_0.set_czzhiu$(this.origV_nmaa6d$_0.normal);
      transform.transform_w1lst9$(this.tmpVec_lyxif1$_0, 0.0);
      this.tmpVec_lyxif1$_0.timesAssign_mx4ult$(bone.vertexWeights[i]);
      this.meshV_mh84a9$_0.normal.plusAssign_czzhiu$(this.tmpVec_lyxif1$_0);
    }
  };
  function Armature$Companion() {
    Armature$Companion_instance = this;
    this.BONE_WEIGHTS = new Attribute('attrib_bone_weights', GlslType$VEC_4F_getInstance());
    this.BONE_INDICES = new Attribute('attrib_bone_indices', GlslType$VEC_4I_getInstance());
  }
  Armature$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Armature$Companion_instance = null;
  function Armature$Companion_getInstance() {
    if (Armature$Companion_instance === null) {
      new Armature$Companion();
    }return Armature$Companion_instance;
  }
  Armature.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Armature',
    interfaces: [Mesh]
  };
  function Bone(name, numVertices) {
    this.name = name;
    this.parent = null;
    this.id = 0;
    this.children = ArrayList_init_0();
    this.offsetMatrix = new Mat4f();
    this.transform = new Mat4f();
    this.vertexIds = new Int32Array(numVertices);
    this.vertexWeights = new Float32Array(numVertices);
  }
  Bone.prototype.clearTransform = function () {
    for (var i = 0; i <= 15; i++) {
      this.transform.matrix[i] = 0.0;
    }
  };
  Bone.prototype.addTransform_8kv2li$ = function (transform, weight) {
    for (var i = 0; i <= 15; i++) {
      this.transform.matrix[i] = this.transform.matrix[i] + transform.get_za3lpa$(i) * weight;
    }
  };
  Bone.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Bone',
    interfaces: [AnimatedNode]
  };
  function AnimatedNode() {
  }
  AnimatedNode.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AnimatedNode',
    interfaces: []
  };
  function NodeAnimation(name, node) {
    this.name = name;
    this.node = node;
    this.rotationKeys = ArrayList_init_0();
    this.positionKeys = ArrayList_init_0();
    this.scalingKeys = ArrayList_init_0();
    this.tmpTransform_0 = new Mat4f();
    this.tmpMat_0 = new Mat4f();
  }
  NodeAnimation.prototype.apply_g1oyt7$ = function (time, weight, clearTransform) {
    this.tmpTransform_0.setIdentity();
    this.mul_0(this.positionKeys, time);
    this.mul_0(this.rotationKeys, time);
    this.mul_0(this.scalingKeys, time);
    if (clearTransform) {
      this.node.clearTransform();
    }this.node.addTransform_8kv2li$(this.tmpTransform_0, weight);
  };
  NodeAnimation.prototype.mul_0 = function (keys, time) {
    var tmp$;
    if (!keys.isEmpty()) {
      var idx = this.findIndex_0(time, keys);
      if ((idx + 1 | 0) < keys.size) {
        tmp$ = keys.get_za3lpa$(idx + 1 | 0);
      } else {
        tmp$ = null;
      }
      var next = tmp$;
      this.tmpTransform_0.mul_d4zu6j$(keys.get_za3lpa$(idx).mixAndSet_yh9mvs$(time, next, this.tmpMat_0));
    }};
  NodeAnimation.prototype.findIndex_0 = function (time, keys) {
    for (var i = 0; i !== keys.size; ++i) {
      if (keys.get_za3lpa$(i).time > time) {
        var b = i - 1 | 0;
        return Math_0.max(0, b);
      }}
    return keys.size - 1 | 0;
  };
  NodeAnimation.prototype.copy_dm1hwa$ = function (withNode) {
    var copy = new NodeAnimation(this.name, withNode);
    var tmp$;
    tmp$ = this.rotationKeys.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var $receiver = copy.rotationKeys;
      var element_0 = element.copy();
      $receiver.add_11rb$(element_0);
    }
    var tmp$_0;
    tmp$_0 = this.positionKeys.iterator();
    while (tmp$_0.hasNext()) {
      var element_1 = tmp$_0.next();
      var $receiver_0 = copy.positionKeys;
      var element_2 = element_1.copy();
      $receiver_0.add_11rb$(element_2);
    }
    var tmp$_1;
    tmp$_1 = this.scalingKeys.iterator();
    while (tmp$_1.hasNext()) {
      var element_3 = tmp$_1.next();
      var $receiver_1 = copy.scalingKeys;
      var element_4 = element_3.copy();
      $receiver_1.add_11rb$(element_4);
    }
    return copy;
  };
  NodeAnimation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NodeAnimation',
    interfaces: []
  };
  function AnimationKey(time, value) {
    this.time = time;
    this.value = value;
  }
  AnimationKey.prototype.weight_dleff0$ = function (pos, nextTime) {
    return (pos - this.time) / (nextTime - this.time);
  };
  AnimationKey.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AnimationKey',
    interfaces: []
  };
  function RotationKey(time, rotation) {
    AnimationKey.call(this, time, rotation);
    this.tmpRotation_0 = MutableVec4f_init();
  }
  RotationKey.prototype.mixAndSet_yh9mvs$ = function (time, next, result) {
    if (next == null) {
      result.setRotate_czzhhz$(this.value);
    } else {
      slerp(this.value, next.value, this.weight_dleff0$(time, next.time), this.tmpRotation_0);
      result.setRotate_czzhhz$(this.tmpRotation_0);
    }
    return result;
  };
  RotationKey.prototype.copy = function () {
    return new RotationKey(this.time, this.value);
  };
  RotationKey.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RotationKey',
    interfaces: [AnimationKey]
  };
  function PositionKey(time, position) {
    AnimationKey.call(this, time, position);
    this.tmpPosition_0 = MutableVec3f_init();
  }
  PositionKey.prototype.mixAndSet_yh9mvs$ = function (time, next, result) {
    if (next == null) {
      result.setIdentity().translate_czzhiu$(this.value);
    } else {
      next.value.subtract_2gj7b4$(this.value, this.tmpPosition_0).scale_mx4ult$(this.weight_dleff0$(time, next.time)).add_czzhiu$(this.value);
      result.setIdentity().translate_czzhiu$(this.tmpPosition_0);
    }
    return result;
  };
  PositionKey.prototype.copy = function () {
    return new PositionKey(this.time, this.value);
  };
  PositionKey.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PositionKey',
    interfaces: [AnimationKey]
  };
  function ScalingKey(time, scaling) {
    AnimationKey.call(this, time, scaling);
    this.tmpScaling_0 = MutableVec3f_init();
  }
  ScalingKey.prototype.mixAndSet_yh9mvs$ = function (time, next, result) {
    if (next == null) {
      result.setIdentity().scale_czzhiu$(this.value);
    } else {
      next.value.subtract_2gj7b4$(this.value, this.tmpScaling_0).scale_mx4ult$(this.weight_dleff0$(time, next.time)).add_czzhiu$(this.value);
      result.setIdentity().scale_czzhiu$(this.tmpScaling_0);
    }
    return result;
  };
  ScalingKey.prototype.copy = function () {
    return new ScalingKey(this.time, this.value);
  };
  ScalingKey.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ScalingKey',
    interfaces: [AnimationKey]
  };
  function Camera(name) {
    if (name === void 0)
      name = 'camera';
    Node.call(this, name);
    this.position = new MutableVec3f(0.0, 0.0, 1.0);
    this.lookAt = MutableVec3f_init_1(Vec3f$Companion_getInstance().ZERO);
    this.up = MutableVec3f_init_1(Vec3f$Companion_getInstance().Y_AXIS);
    this.aspectRatio = 1.0;
    this.useViewportAspectRatio = true;
    this.globalRange_4hi0xu$_0 = 0.0;
    this.globalPosMut = MutableVec3f_init();
    this.globalLookAtMut = MutableVec3f_init();
    this.globalUpMut = MutableVec3f_init();
    this.globalRightMut = MutableVec3f_init();
    this.globalLookDirMut = MutableVec3f_init();
    this.proj = new Mat4d();
    this.view = new Mat4d();
    this.lazyInvProj_tohv7i$_0 = new Camera$LazyMatrix(Camera$lazyInvProj$lambda(this));
    this.lazyInvView_trmos6$_0 = new Camera$LazyMatrix(Camera$lazyInvView$lambda(this));
    this.lazyViewProj_dqyl7q$_0 = new Camera$LazyMatrix(Camera$lazyViewProj$lambda(this));
    this.lazyInvViewProj_vy3fmv$_0 = new Camera$LazyMatrix(Camera$lazyInvViewProj$lambda(this));
    this.projCorrectionMode = Camera$ProjCorrectionMode$ONSCREEN_getInstance();
    this.projCorrected_2lfajw$_0 = new Mat4d();
    this.tmpVec3_txabpe$_0 = MutableVec3f_init();
    this.tmpVec4_txabq9$_0 = MutableVec4f_init();
  }
  Object.defineProperty(Camera.prototype, 'globalPos', {
    get: function () {
      return this.globalPosMut;
    }
  });
  Object.defineProperty(Camera.prototype, 'globalLookAt', {
    get: function () {
      return this.globalLookAtMut;
    }
  });
  Object.defineProperty(Camera.prototype, 'globalUp', {
    get: function () {
      return this.globalUpMut;
    }
  });
  Object.defineProperty(Camera.prototype, 'globalRight', {
    get: function () {
      return this.globalRightMut;
    }
  });
  Object.defineProperty(Camera.prototype, 'globalLookDir', {
    get: function () {
      return this.globalLookDirMut;
    }
  });
  Object.defineProperty(Camera.prototype, 'globalRange', {
    get: function () {
      return this.globalRange_4hi0xu$_0;
    },
    set: function (globalRange) {
      this.globalRange_4hi0xu$_0 = globalRange;
    }
  });
  Object.defineProperty(Camera.prototype, 'invProj', {
    get: function () {
      return this.lazyInvProj_tohv7i$_0.get();
    }
  });
  Object.defineProperty(Camera.prototype, 'invView', {
    get: function () {
      return this.lazyInvView_trmos6$_0.get();
    }
  });
  Object.defineProperty(Camera.prototype, 'viewProj', {
    get: function () {
      return this.lazyViewProj_dqyl7q$_0.get();
    }
  });
  Object.defineProperty(Camera.prototype, 'invViewProj', {
    get: function () {
      return this.lazyInvViewProj_vy3fmv$_0.get();
    }
  });
  Camera.prototype.updateCamera_fd1mc0$ = function (ctx, viewport) {
    if (this.useViewportAspectRatio) {
      this.aspectRatio = viewport.aspectRatio;
    }this.updateViewMatrix();
    this.updateProjectionMatrix();
    if (this.projCorrectionMode === Camera$ProjCorrectionMode$ONSCREEN_getInstance()) {
      ctx.projCorrectionMatrixScreen.mul_u47j3u$(this.proj, this.projCorrected_2lfajw$_0);
      this.proj.set_d4zu6l$(this.projCorrected_2lfajw$_0);
    } else if (this.projCorrectionMode === Camera$ProjCorrectionMode$OFFSCREEN_getInstance()) {
      ctx.projCorrectionMatrixOffscreen.mul_u47j3u$(this.proj, this.projCorrected_2lfajw$_0);
      this.proj.set_d4zu6l$(this.projCorrected_2lfajw$_0);
    }this.lazyInvProj_tohv7i$_0.isDirty = true;
    this.lazyViewProj_dqyl7q$_0.isDirty = true;
    this.lazyInvViewProj_vy3fmv$_0.isDirty = true;
  };
  Camera.prototype.updateViewMatrix = function () {
    this.toGlobalCoords_w1lst9$(this.globalPosMut.set_czzhiu$(this.position));
    this.toGlobalCoords_w1lst9$(this.globalLookAtMut.set_czzhiu$(this.lookAt));
    this.toGlobalCoords_w1lst9$(this.globalUpMut.set_czzhiu$(this.up), 0.0).norm();
    this.globalLookDirMut.set_czzhiu$(this.globalLookAtMut).subtract_czzhiu$(this.globalPosMut);
    this.globalRange = this.globalLookDirMut.length();
    this.globalLookDirMut.scale_mx4ult$(1.0 / this.globalRange);
    this.globalLookDirMut.cross_2gj7b4$(this.globalUpMut, this.globalRightMut).norm();
    this.globalRightMut.cross_2gj7b4$(this.globalLookDirMut, this.globalUpMut).norm();
    this.view.setLookAt_n440fu$(this.globalPosMut, this.globalLookAtMut, this.globalUpMut);
    this.lazyInvView_trmos6$_0.isDirty = true;
  };
  Camera.prototype.computePickRay_2cu1go$ = function (pickRay, ptr, viewport, ctx) {
    return ptr.isValid && this.computePickRay_k7d561$(pickRay, ptr.x, ptr.y, viewport, ctx);
  };
  Camera.prototype.computePickRay_k7d561$ = function (pickRay, screenX, screenY, viewport, ctx) {
    var valid = this.unProjectScreen_c0y950$(this.tmpVec3_txabpe$_0.set_y2kzbl$(screenX, screenY, 0.0), viewport, ctx, pickRay.origin);
    valid = (valid && this.unProjectScreen_c0y950$(this.tmpVec3_txabpe$_0.set_y2kzbl$(screenX, screenY, 1.0), viewport, ctx, pickRay.direction));
    if (valid) {
      pickRay.direction.subtract_czzhiu$(pickRay.origin);
      pickRay.direction.norm();
    }return valid;
  };
  Camera.prototype.initRayTes_clwnka$ = function (rayTest, ptr, viewport, ctx) {
    return ptr.isValid && this.initRayTes_r53qw5$(rayTest, ptr.x, ptr.y, viewport, ctx);
  };
  Camera.prototype.initRayTes_r53qw5$ = function (rayTest, screenX, screenY, viewport, ctx) {
    rayTest.clear();
    return this.computePickRay_k7d561$(rayTest.ray, screenX, screenY, viewport, ctx);
  };
  Camera.prototype.isInFrustum_f1kmr1$ = function (node) {
    return this.isInFrustum_2qa7tb$(node.globalCenter, node.globalRadius);
  };
  Camera.prototype.project_2gj7b4$ = function (world, result) {
    this.tmpVec4_txabq9$_0.set_7b5o5w$(world.x, world.y, world.z, 1.0);
    this.viewProj.transform_5s4mpv$(this.tmpVec4_txabq9$_0);
    var $receiver = this.tmpVec4_txabq9$_0.w;
    var eps;
    eps = package$math.FUZZY_EQ_F;
    if (Math_0.abs($receiver) <= eps) {
      return false;
    }result.set_y2kzbl$(this.tmpVec4_txabq9$_0.x, this.tmpVec4_txabq9$_0.y, this.tmpVec4_txabq9$_0.z).scale_mx4ult$(1.0 / this.tmpVec4_txabq9$_0.w);
    return true;
  };
  Camera.prototype.project_2gj7bz$ = function (world, result) {
    return this.viewProj.transform_5s4mpv$(result.set_7b5o5w$(world.x, world.y, world.z, 1.0));
  };
  Camera.prototype.projectScreen_c0y950$ = function (world, viewport, ctx, result) {
    if (!this.project_2gj7b4$(world, result)) {
      return false;
    }result.x = (1 + result.x) * 0.5 * viewport.width + viewport.x;
    result.y = ctx.windowHeight - (1 + result.y) * 0.5 * viewport.height + viewport.y;
    result.z = (1 + result.z) * 0.5;
    return true;
  };
  Camera.prototype.unProjectScreen_c0y950$ = function (screen, viewport, ctx, result) {
    var x = screen.x - viewport.x;
    var y = ctx.windowHeight - screen.y - viewport.y;
    this.tmpVec4_txabq9$_0.set_7b5o5w$(2.0 * x / viewport.width - 1.0, 2.0 * y / viewport.height - 1.0, 2.0 * screen.z - 1.0, 1.0);
    this.invViewProj.transform_5s4mpv$(this.tmpVec4_txabq9$_0);
    var s = 1.0 / this.tmpVec4_txabq9$_0.w;
    result.set_y2kzbl$(this.tmpVec4_txabq9$_0.x * s, this.tmpVec4_txabq9$_0.y * s, this.tmpVec4_txabq9$_0.z * s);
    return true;
  };
  function Camera$LazyMatrix(update) {
    this.update = update;
    this.isDirty = true;
    this.mat_0 = new Mat4d();
  }
  Camera$LazyMatrix.prototype.get = function () {
    if (this.isDirty) {
      this.update(this.mat_0);
      this.isDirty = false;
    }return this.mat_0;
  };
  Camera$LazyMatrix.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LazyMatrix',
    interfaces: []
  };
  function Camera$ProjCorrectionMode(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Camera$ProjCorrectionMode_initFields() {
    Camera$ProjCorrectionMode_initFields = function () {
    };
    Camera$ProjCorrectionMode$NONE_instance = new Camera$ProjCorrectionMode('NONE', 0);
    Camera$ProjCorrectionMode$ONSCREEN_instance = new Camera$ProjCorrectionMode('ONSCREEN', 1);
    Camera$ProjCorrectionMode$OFFSCREEN_instance = new Camera$ProjCorrectionMode('OFFSCREEN', 2);
  }
  var Camera$ProjCorrectionMode$NONE_instance;
  function Camera$ProjCorrectionMode$NONE_getInstance() {
    Camera$ProjCorrectionMode_initFields();
    return Camera$ProjCorrectionMode$NONE_instance;
  }
  var Camera$ProjCorrectionMode$ONSCREEN_instance;
  function Camera$ProjCorrectionMode$ONSCREEN_getInstance() {
    Camera$ProjCorrectionMode_initFields();
    return Camera$ProjCorrectionMode$ONSCREEN_instance;
  }
  var Camera$ProjCorrectionMode$OFFSCREEN_instance;
  function Camera$ProjCorrectionMode$OFFSCREEN_getInstance() {
    Camera$ProjCorrectionMode_initFields();
    return Camera$ProjCorrectionMode$OFFSCREEN_instance;
  }
  Camera$ProjCorrectionMode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ProjCorrectionMode',
    interfaces: [Enum]
  };
  function Camera$ProjCorrectionMode$values() {
    return [Camera$ProjCorrectionMode$NONE_getInstance(), Camera$ProjCorrectionMode$ONSCREEN_getInstance(), Camera$ProjCorrectionMode$OFFSCREEN_getInstance()];
  }
  Camera$ProjCorrectionMode.values = Camera$ProjCorrectionMode$values;
  function Camera$ProjCorrectionMode$valueOf(name) {
    switch (name) {
      case 'NONE':
        return Camera$ProjCorrectionMode$NONE_getInstance();
      case 'ONSCREEN':
        return Camera$ProjCorrectionMode$ONSCREEN_getInstance();
      case 'OFFSCREEN':
        return Camera$ProjCorrectionMode$OFFSCREEN_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.scene.Camera.ProjCorrectionMode.' + name);
    }
  }
  Camera$ProjCorrectionMode.valueOf_61zpoe$ = Camera$ProjCorrectionMode$valueOf;
  function Camera$lazyInvProj$lambda(this$Camera) {
    return function (it) {
      this$Camera.proj.invert_23yxad$(it);
      return Unit;
    };
  }
  function Camera$lazyInvView$lambda(this$Camera) {
    return function (it) {
      this$Camera.view.invert_23yxad$(it);
      return Unit;
    };
  }
  function Camera$lazyViewProj$lambda(this$Camera) {
    return function (it) {
      this$Camera.proj.mul_u47j3u$(this$Camera.view, it);
      return Unit;
    };
  }
  function Camera$lazyInvViewProj$lambda(this$Camera) {
    return function (it) {
      this$Camera.viewProj.invert_23yxad$(it);
      return Unit;
    };
  }
  Camera.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Camera',
    interfaces: [Node]
  };
  function OrthographicCamera(name) {
    if (name === void 0)
      name = 'orthographicCam';
    Camera.call(this, name);
    this.left = -10.0;
    this.right = 10.0;
    this.bottom = -10.0;
    this.top = 10.0;
    this.near = -10.0;
    this.far = 10.0;
    this.isClipToViewport = false;
    this.isKeepAspectRatio = true;
    this.tmpNodeCenter_dwzowq$_0 = MutableVec3f_init();
  }
  OrthographicCamera.prototype.setCentered_y2kzbl$ = function (height, near, far) {
    this.top = height * 0.5;
    this.bottom = -this.top;
    this.right = this.aspectRatio * this.top;
    this.left = -this.right;
    this.near = near;
    this.far = far;
  };
  OrthographicCamera.prototype.updateCamera_fd1mc0$ = function (ctx, viewport) {
    if (this.isClipToViewport) {
      this.left = 0.0;
      this.right = viewport.width;
      this.bottom = 0.0;
      this.top = viewport.height;
    } else if (this.isKeepAspectRatio) {
      var h = this.top - this.bottom;
      var w = viewport.aspectRatio * h;
      var xCenter = this.left + (this.right - this.left) * 0.5;
      this.left = xCenter - w * 0.5;
      this.right = xCenter + w * 0.5;
    }Camera.prototype.updateCamera_fd1mc0$.call(this, ctx, viewport);
  };
  OrthographicCamera.prototype.updateProjectionMatrix = function () {
    if (this.left !== this.right && this.bottom !== this.top && this.near !== this.far) {
      this.proj.setOrthographic_w8lrqs$(this.left, this.right, this.bottom, this.top, this.near, this.far);
    }};
  OrthographicCamera.prototype.computeFrustumPlane_jwr40o$ = function (z, result) {
    this.invView.transform_w1lst9$(result.upperLeft.set_y2kzbl$(this.left, this.top, -z));
    this.invView.transform_w1lst9$(result.upperRight.set_y2kzbl$(this.right, this.top, -z));
    this.invView.transform_w1lst9$(result.lowerLeft.set_y2kzbl$(this.left, this.bottom, -z));
    this.invView.transform_w1lst9$(result.lowerRight.set_y2kzbl$(this.right, this.bottom, -z));
  };
  OrthographicCamera.prototype.isInFrustum_2qa7tb$ = function (globalCenter, globalRadius) {
    this.tmpNodeCenter_dwzowq$_0.set_czzhiu$(globalCenter);
    this.tmpNodeCenter_dwzowq$_0.subtract_czzhiu$(this.globalPos);
    var x = this.tmpNodeCenter_dwzowq$_0.dot_czzhiu$(this.globalRight);
    if (x > this.right + globalRadius || x < this.left - globalRadius) {
      return false;
    }var y = this.tmpNodeCenter_dwzowq$_0.dot_czzhiu$(this.globalUp);
    if (y > this.top + globalRadius || y < this.bottom - globalRadius) {
      return false;
    }var z = this.tmpNodeCenter_dwzowq$_0.dot_czzhiu$(this.globalLookDir);
    if (z > this.far + globalRadius || z < this.near - globalRadius) {
      return false;
    }return true;
  };
  OrthographicCamera.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OrthographicCamera',
    interfaces: [Camera]
  };
  function PerspectiveCamera(name) {
    if (name === void 0)
      name = 'perspectiveCam';
    Camera.call(this, name);
    this.clipNear = 0.1;
    this.clipFar = 100.0;
    this.fovY = 60.0;
    this.fovX_7k9npl$_0 = 0.0;
    this.sphereFacX_87yued$_0 = 1.0;
    this.sphereFacY_87yuf8$_0 = 1.0;
    this.tangX_ey6fwg$_0 = 1.0;
    this.tangY_ey6fvl$_0 = 1.0;
    this.tmpNodeCenter_hw7d0$_0 = MutableVec3f_init();
  }
  Object.defineProperty(PerspectiveCamera.prototype, 'fovX', {
    get: function () {
      return this.fovX_7k9npl$_0;
    },
    set: function (fovX) {
      this.fovX_7k9npl$_0 = fovX;
    }
  });
  PerspectiveCamera.prototype.updateProjectionMatrix = function () {
    this.proj.setPerspective_7b5o5w$(this.fovY, this.aspectRatio, this.clipNear, this.clipFar);
    var angY = this.fovY * package$math.DEG_2_RAD / 2.0;
    this.sphereFacY_87yuf8$_0 = 1.0 / Math_0.cos(angY);
    this.tangY_ey6fvl$_0 = Math_0.tan(angY);
    var x = this.tangY_ey6fvl$_0 * this.aspectRatio;
    var angX = Math_0.atan(x);
    this.sphereFacX_87yued$_0 = 1.0 / Math_0.cos(angX);
    this.tangX_ey6fwg$_0 = Math_0.tan(angX);
    this.fovX = angX * 2 * package$math.RAD_2_DEG;
  };
  PerspectiveCamera.prototype.computeFrustumPlane_jwr40o$ = function (z, result) {
    var x = z * this.tangX_ey6fwg$_0;
    var y = z * this.tangY_ey6fvl$_0;
    this.invView.transform_w1lst9$(result.upperLeft.set_y2kzbl$(-x, y, -z));
    this.invView.transform_w1lst9$(result.upperRight.set_y2kzbl$(x, y, -z));
    this.invView.transform_w1lst9$(result.lowerLeft.set_y2kzbl$(-x, -y, -z));
    this.invView.transform_w1lst9$(result.lowerRight.set_y2kzbl$(x, -y, -z));
  };
  PerspectiveCamera.prototype.isInFrustum_2qa7tb$ = function (globalCenter, globalRadius) {
    this.tmpNodeCenter_hw7d0$_0.set_czzhiu$(globalCenter);
    this.tmpNodeCenter_hw7d0$_0.subtract_czzhiu$(this.globalPos);
    var z = this.tmpNodeCenter_hw7d0$_0.dot_czzhiu$(this.globalLookDir);
    if (z > this.clipFar + globalRadius || z < this.clipNear - globalRadius) {
      return false;
    }var y = this.tmpNodeCenter_hw7d0$_0.dot_czzhiu$(this.globalUp);
    var d = globalRadius * this.sphereFacY_87yuf8$_0;
    z *= this.tangY_ey6fvl$_0;
    if (y > z + d || y < -z - d) {
      return false;
    }var x = this.tmpNodeCenter_hw7d0$_0.dot_czzhiu$(this.globalRight);
    d = globalRadius * this.sphereFacX_87yued$_0;
    z *= this.aspectRatio;
    if (x > z + d || x < -z - d) {
      return false;
    }return true;
  };
  PerspectiveCamera.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PerspectiveCamera',
    interfaces: [Camera]
  };
  function FrustumPlane() {
    this.upperLeft = MutableVec3f_init();
    this.upperRight = MutableVec3f_init();
    this.lowerLeft = MutableVec3f_init();
    this.lowerRight = MutableVec3f_init();
  }
  FrustumPlane.prototype.set_lj9zd1$ = function (other) {
    this.upperLeft.set_czzhiu$(other.upperLeft);
    this.upperRight.set_czzhiu$(other.upperRight);
    this.lowerLeft.set_czzhiu$(other.lowerLeft);
    this.lowerRight.set_czzhiu$(other.lowerRight);
  };
  FrustumPlane.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FrustumPlane',
    interfaces: []
  };
  function Comparator$ObjectLiteral_0(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_0.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_0.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_0 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function group(name, block) {
    if (name === void 0)
      name = null;
    var grp = new Group(name);
    block(grp);
    return grp;
  }
  function Group(name) {
    if (name === void 0)
      name = null;
    Node.call(this, name);
    this.intChildren = ArrayList_init_0();
    this.childrenBounds = new BoundingBox();
  }
  Object.defineProperty(Group.prototype, 'children', {
    get: function () {
      return this.intChildren;
    }
  });
  Object.defineProperty(Group.prototype, 'size', {
    get: function () {
      return this.intChildren.size;
    }
  });
  Group.prototype.update_oco14p$ = function (renderPass, ctx) {
    var tmp$;
    this.childrenBounds.clear();
    tmp$ = this.intChildren;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.intChildren.get_za3lpa$(i).update_oco14p$(renderPass, ctx);
      this.childrenBounds.add_ea4od8$(this.intChildren.get_za3lpa$(i).bounds);
    }
    this.setLocalBounds();
    Node.prototype.update_oco14p$.call(this, renderPass, ctx);
  };
  Group.prototype.setLocalBounds = function () {
    this.bounds.set_ea4od8$(this.childrenBounds);
  };
  Group.prototype.collectDrawCommands_oco14p$ = function (renderPass, ctx) {
    var tmp$;
    Node.prototype.collectDrawCommands_oco14p$.call(this, renderPass, ctx);
    if (this.isRendered) {
      tmp$ = this.intChildren;
      for (var i = 0; i !== tmp$.size; ++i) {
        if (renderPass.type !== RenderPass$Type$DEPTH_getInstance() || this.intChildren.get_za3lpa$(i).isCastingShadow) {
          this.intChildren.get_za3lpa$(i).collectDrawCommands_oco14p$(renderPass, ctx);
        }}
    }};
  Group.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$;
    Node.prototype.dispose_aemszp$.call(this, ctx);
    tmp$ = this.intChildren;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.intChildren.get_za3lpa$(i).dispose_aemszp$(ctx);
    }
  };
  Group.prototype.get_61zpoe$ = function (name) {
    var tmp$;
    if (equals(name, this.name)) {
      return this;
    }tmp$ = this.intChildren;
    for (var i = 0; i !== tmp$.size; ++i) {
      var node = this.intChildren.get_za3lpa$(i).get_61zpoe$(name);
      if (node != null) {
        return node;
      }}
    return null;
  };
  Group.prototype.rayTest_jljx4v$ = function (test) {
    var tmp$;
    tmp$ = this.intChildren;
    for (var i = 0; i !== tmp$.size; ++i) {
      var child = this.intChildren.get_za3lpa$(i);
      if (child.isPickable && child.isVisible) {
        var d = child.bounds.hitDistanceSqr_nvyeur$(test.ray);
        if (d < kotlin_js_internal_FloatCompanionObject.MAX_VALUE && d <= test.hitDistanceSqr) {
          child.rayTest_jljx4v$(test);
        }}}
  };
  Group.prototype.addNode_xtids1$$default = function (node, index) {
    if (index >= 0) {
      this.intChildren.add_wxm5ur$(index, node);
    } else {
      this.intChildren.add_11rb$(node);
    }
    node.parent = this;
    this.bounds.add_ea4od8$(node.bounds);
  };
  Group.prototype.addNode_xtids1$ = function (node, index, callback$default) {
    if (index === void 0)
      index = -1;
    callback$default ? callback$default(node, index) : this.addNode_xtids1$$default(node, index);
  };
  Group.prototype.sortChildrenBy_mq7kdd$ = function (selector) {
    var $receiver = this.intChildren;
    if ($receiver.size > 1) {
      sortWith($receiver, new Comparator$ObjectLiteral_0(compareBy$lambda_0(selector)));
    }};
  Group.prototype.removeNode_f1kmr1$ = function (node) {
    if (this.intChildren.remove_11rb$(node)) {
      node.parent = null;
      return true;
    }return false;
  };
  Group.prototype.removeAllChildren = function () {
    var tmp$;
    tmp$ = this.intChildren;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.intChildren.get_za3lpa$(i).parent = null;
    }
    this.intChildren.clear();
  };
  Group.prototype.containsNode_f1kmr1$ = function (node) {
    return this.intChildren.contains_11rb$(node);
  };
  Group.prototype.plusAssign_f1kmr1$ = function (node) {
    this.addNode_xtids1$(node);
  };
  Group.prototype.minusAssign_f1kmr1$ = function (node) {
    this.removeNode_f1kmr1$(node);
  };
  Group.prototype.unaryPlus_uv0sim$ = function ($receiver) {
    this.addNode_xtids1$($receiver);
  };
  Group.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Group',
    interfaces: [Node]
  };
  function Lighting() {
    this.lights = mutableListOf([(new Light()).setDirectional_czzhiu$(Vec3f_init(-1.0)).setColor_y83vuj$(Color$Companion_getInstance().WHITE, 1.0)]);
  }
  Lighting.prototype.singleLight_q9zcvo$ = function (block) {
    this.lights.clear();
    var tmp$ = this.lights;
    var $receiver = new Light();
    block($receiver);
    tmp$.add_11rb$($receiver);
  };
  Lighting.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Lighting',
    interfaces: []
  };
  function Light() {
    this.color = MutableColor_init_0(Color$Companion_getInstance().WHITE);
    this.type = Light$Type$DIRECTIONAL_getInstance();
    this.direction = MutableVec3f_init_0(1.0);
    this.position = MutableVec3f_init();
    this.spotAngle = 60.0;
  }
  Light.prototype.setColor_y83vuj$ = function (color, intensity) {
    this.color.set_d7aj7k$(color);
    this.color.a = intensity;
    return this;
  };
  Light.prototype.setDirectional_czzhiu$ = function (dir) {
    this.type = Light$Type$DIRECTIONAL_getInstance();
    this.direction.set_czzhiu$(dir);
    this.position.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.spotAngle = 0.0;
    return this;
  };
  Light.prototype.setPoint_czzhiu$ = function (pos) {
    this.type = Light$Type$POINT_getInstance();
    this.position.set_czzhiu$(pos);
    this.direction.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.spotAngle = 0.0;
    return this;
  };
  Light.prototype.setSpot_nve3wz$ = function (pos, dir, angle) {
    this.type = Light$Type$SPOT_getInstance();
    this.position.set_czzhiu$(pos);
    this.direction.set_czzhiu$(dir);
    this.spotAngle = angle;
    return this;
  };
  function Light$Type(name, ordinal, encoded) {
    Enum.call(this);
    this.encoded = encoded;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Light$Type_initFields() {
    Light$Type_initFields = function () {
    };
    Light$Type$DIRECTIONAL_instance = new Light$Type('DIRECTIONAL', 0, 0.0);
    Light$Type$POINT_instance = new Light$Type('POINT', 1, 1.0);
    Light$Type$SPOT_instance = new Light$Type('SPOT', 2, 2.0);
  }
  var Light$Type$DIRECTIONAL_instance;
  function Light$Type$DIRECTIONAL_getInstance() {
    Light$Type_initFields();
    return Light$Type$DIRECTIONAL_instance;
  }
  var Light$Type$POINT_instance;
  function Light$Type$POINT_getInstance() {
    Light$Type_initFields();
    return Light$Type$POINT_instance;
  }
  var Light$Type$SPOT_instance;
  function Light$Type$SPOT_getInstance() {
    Light$Type_initFields();
    return Light$Type$SPOT_instance;
  }
  Light$Type.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Type',
    interfaces: [Enum]
  };
  function Light$Type$values() {
    return [Light$Type$DIRECTIONAL_getInstance(), Light$Type$POINT_getInstance(), Light$Type$SPOT_getInstance()];
  }
  Light$Type.values = Light$Type$values;
  function Light$Type$valueOf(name) {
    switch (name) {
      case 'DIRECTIONAL':
        return Light$Type$DIRECTIONAL_getInstance();
      case 'POINT':
        return Light$Type$POINT_getInstance();
      case 'SPOT':
        return Light$Type$SPOT_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.scene.Light.Type.' + name);
    }
  }
  Light$Type.valueOf_61zpoe$ = Light$Type$valueOf;
  Light.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Light',
    interfaces: []
  };
  function lineMesh(name, block) {
    if (name === void 0)
      name = null;
    var $receiver = new LineMesh(void 0, name);
    block($receiver);
    return $receiver;
  }
  function wireframeMesh(triMesh, lineColor) {
    if (lineColor === void 0)
      lineColor = null;
    var lines = new LineMesh();
    lines.addWireframe_hjnvxh$(triMesh, lineColor);
    return lines;
  }
  function normalMesh(geometry, lineColor, len) {
    if (lineColor === void 0)
      lineColor = null;
    if (len === void 0)
      len = 1.0;
    var lines = new LineMesh();
    lines.addNormals_325j0g$(geometry, lineColor, len);
    return lines;
  }
  function LineMesh(geometry, name) {
    if (geometry === void 0)
      geometry = IndexedVertexList_init([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().COLORS]);
    if (name === void 0)
      name = null;
    Mesh.call(this, geometry, name);
    geometry.primitiveType = PrimitiveType$LINES_getInstance();
    this.rayTest = MeshRayTest$Companion_getInstance().nopTest();
    this.pipelineLoader = new ModeledShader$VertexColor();
  }
  function LineMesh$addLine$lambda(closure$point0, closure$color0, closure$idx0, closure$point1, closure$color1) {
    return function ($receiver) {
      closure$idx0.v = $receiver.addVertex_lv7vxo$(closure$point0, null, closure$color0, null);
      $receiver.addVertex_lv7vxo$(closure$point1, null, closure$color1, null);
      $receiver.addIndex_za3lpa$(closure$idx0.v);
      $receiver.addIndex_za3lpa$(closure$idx0.v + 1 | 0);
      return Unit;
    };
  }
  LineMesh.prototype.addLine_b8opkg$ = function (point0, color0, point1, color1) {
    var idx0 = {v: 0};
    var $this = this.geometry;
    var wasBatchUpdate = $this.isBatchUpdate;
    $this.isBatchUpdate = true;
    LineMesh$addLine$lambda(point0, color0, idx0, point1, color1)($this);
    $this.hasChanged = true;
    $this.isBatchUpdate = wasBatchUpdate;
    if (false) {
      $this.rebuildBounds();
    }return idx0.v;
  };
  LineMesh.prototype.addLineString_k3xgzo$ = function (lineString, color) {
    var tmp$;
    tmp$ = get_lastIndex(lineString);
    for (var i = 0; i < tmp$; i++) {
      this.addLine_b8opkg$(lineString.get_za3lpa$(i), color, lineString.get_za3lpa$(i + 1 | 0), color);
    }
  };
  function LineMesh$addWireframe$lambda(closure$triMesh, this$LineMesh, closure$lineColor, closure$addedEdges) {
    return function ($receiver) {
      var tmp$, tmp$_0;
      var v = closure$triMesh.get_za3lpa$(0);
      var startI = $receiver.numVertices;
      tmp$ = closure$triMesh.numVertices;
      for (var i = 0; i < tmp$; i++) {
        v.index = i;
        var $this = this$LineMesh.geometry;
        var tmp$_1, tmp$_2, tmp$_3;
        $this.checkBufferSizes_za3lpa$();
        tmp$_1 = $this.vertexSizeF;
        for (var i_0 = 1; i_0 <= tmp$_1; i_0++) {
          $this.dataF.plusAssign_mx4ult$(0.0);
        }
        tmp$_2 = $this.vertexSizeI;
        for (var i_1 = 1; i_1 <= tmp$_2; i_1++) {
          $this.dataI.plusAssign_za3lpa$(0);
        }
        $this.vertexIt.index = (tmp$_3 = $this.numVertices, $this.numVertices = tmp$_3 + 1 | 0, tmp$_3);
        var closure$lineColor_0 = closure$lineColor;
        var $receiver_0 = $this.vertexIt;
        $receiver_0.position.set_czzhiu$(v.position);
        $receiver_0.color.set_d7aj7k$(closure$lineColor_0 != null ? closure$lineColor_0 : v.color);
        $this.bounds.add_czzhiu$($this.vertexIt.position);
        $this.hasChanged = true;
        $this.numVertices - 1 | 0;
      }
      tmp$_0 = closure$triMesh.numIndices;
      for (var i_2 = 0; i_2 < tmp$_0; i_2 += 3) {
        var i1 = startI + closure$triMesh.indices.get_za3lpa$(i_2) | 0;
        var i2 = startI + closure$triMesh.indices.get_za3lpa$(i_2 + 1 | 0) | 0;
        var i3 = startI + closure$triMesh.indices.get_za3lpa$(i_2 + 2 | 0) | 0;
        var e1 = Kotlin.Long.fromInt(Math_0.min(i1, i2)).shiftLeft(32).or(Kotlin.Long.fromInt(Math_0.max(i1, i2)));
        var e2 = Kotlin.Long.fromInt(Math_0.min(i2, i3)).shiftLeft(32).or(Kotlin.Long.fromInt(Math_0.max(i2, i3)));
        var e3 = Kotlin.Long.fromInt(Math_0.min(i3, i1)).shiftLeft(32).or(Kotlin.Long.fromInt(Math_0.max(i3, i1)));
        if (!closure$addedEdges.contains_11rb$(e1)) {
          this$LineMesh.geometry.addIndex_za3lpa$(i1);
          this$LineMesh.geometry.addIndex_za3lpa$(i2);
          closure$addedEdges.add_11rb$(e1);
        }if (!closure$addedEdges.contains_11rb$(e2)) {
          this$LineMesh.geometry.addIndex_za3lpa$(i2);
          this$LineMesh.geometry.addIndex_za3lpa$(i3);
          closure$addedEdges.add_11rb$(e2);
        }if (!closure$addedEdges.contains_11rb$(e3)) {
          this$LineMesh.geometry.addIndex_za3lpa$(i3);
          this$LineMesh.geometry.addIndex_za3lpa$(i1);
          closure$addedEdges.add_11rb$(e3);
        }}
      return Unit;
    };
  }
  LineMesh.prototype.addWireframe_hjnvxh$ = function (triMesh, lineColor) {
    if (lineColor === void 0)
      lineColor = null;
    if (triMesh.primitiveType !== PrimitiveType$TRIANGLES_getInstance()) {
      throw KoolException_init('Supplied mesh is not a triangle mesh: ' + triMesh.primitiveType);
    }var addedEdges = LinkedHashSet_init();
    var $this = this.geometry;
    var wasBatchUpdate = $this.isBatchUpdate;
    $this.isBatchUpdate = true;
    LineMesh$addWireframe$lambda(triMesh, this, lineColor, addedEdges)($this);
    $this.hasChanged = true;
    $this.isBatchUpdate = wasBatchUpdate;
    if (false) {
      $this.rebuildBounds();
    }};
  function LineMesh$addNormals$lambda(closure$geometry, closure$len, closure$lineColor, this$LineMesh) {
    return function ($receiver) {
      var tmpN = MutableVec3f_init();
      var $this = closure$geometry;
      var tmp$;
      tmp$ = $this.numVertices;
      for (var i = 0; i < tmp$; i++) {
        $this.vertexIt.index = i;
        var closure$len_0 = closure$len;
        var closure$lineColor_0 = closure$lineColor;
        var this$LineMesh_0 = this$LineMesh;
        var it = $this.vertexIt;
        tmpN.set_czzhiu$(it.normal).scale_mx4ult$(closure$len_0).add_czzhiu$(it.position);
        var color = closure$lineColor_0 != null ? closure$lineColor_0 : it.color;
        this$LineMesh_0.addLine_b8opkg$(it.position, color, tmpN, color);
      }
      return Unit;
    };
  }
  LineMesh.prototype.addNormals_325j0g$ = function (geometry, lineColor, len) {
    if (lineColor === void 0)
      lineColor = null;
    if (len === void 0)
      len = 1.0;
    var wasBatchUpdate = geometry.isBatchUpdate;
    geometry.isBatchUpdate = true;
    LineMesh$addNormals$lambda(geometry, len, lineColor, this)(geometry);
    geometry.hasChanged = true;
    geometry.isBatchUpdate = wasBatchUpdate;
    if (false) {
      geometry.rebuildBounds();
    }};
  LineMesh.prototype.clear = function () {
    this.geometry.clear();
    this.bounds.clear();
  };
  function LineMesh$addBoundingBox$lambda(closure$aabb, closure$color) {
    return function ($receiver) {
      var tmp$, tmp$_0, tmp$_1;
      $receiver.checkBufferSizes_za3lpa$();
      tmp$ = $receiver.vertexSizeF;
      for (var i = 1; i <= tmp$; i++) {
        $receiver.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_0 = $receiver.vertexSizeI;
      for (var i_0 = 1; i_0 <= tmp$_0; i_0++) {
        $receiver.dataI.plusAssign_za3lpa$(0);
      }
      $receiver.vertexIt.index = (tmp$_1 = $receiver.numVertices, $receiver.numVertices = tmp$_1 + 1 | 0, tmp$_1);
      var closure$aabb_0 = closure$aabb;
      var closure$color_0 = closure$color;
      var $receiver_0 = $receiver.vertexIt;
      $receiver_0.position.set_y2kzbl$(closure$aabb_0.min.x, closure$aabb_0.min.y, closure$aabb_0.min.z);
      $receiver_0.color.set_d7aj7k$(closure$color_0);
      $receiver.bounds.add_czzhiu$($receiver.vertexIt.position);
      $receiver.hasChanged = true;
      var i0 = $receiver.numVertices - 1 | 0;
      var tmp$_2, tmp$_3, tmp$_4;
      $receiver.checkBufferSizes_za3lpa$();
      tmp$_2 = $receiver.vertexSizeF;
      for (var i_1 = 1; i_1 <= tmp$_2; i_1++) {
        $receiver.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_3 = $receiver.vertexSizeI;
      for (var i_2 = 1; i_2 <= tmp$_3; i_2++) {
        $receiver.dataI.plusAssign_za3lpa$(0);
      }
      $receiver.vertexIt.index = (tmp$_4 = $receiver.numVertices, $receiver.numVertices = tmp$_4 + 1 | 0, tmp$_4);
      var closure$aabb_1 = closure$aabb;
      var closure$color_1 = closure$color;
      var $receiver_1 = $receiver.vertexIt;
      $receiver_1.position.set_y2kzbl$(closure$aabb_1.min.x, closure$aabb_1.min.y, closure$aabb_1.max.z);
      $receiver_1.color.set_d7aj7k$(closure$color_1);
      $receiver.bounds.add_czzhiu$($receiver.vertexIt.position);
      $receiver.hasChanged = true;
      var i1 = $receiver.numVertices - 1 | 0;
      var tmp$_5, tmp$_6, tmp$_7;
      $receiver.checkBufferSizes_za3lpa$();
      tmp$_5 = $receiver.vertexSizeF;
      for (var i_3 = 1; i_3 <= tmp$_5; i_3++) {
        $receiver.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_6 = $receiver.vertexSizeI;
      for (var i_4 = 1; i_4 <= tmp$_6; i_4++) {
        $receiver.dataI.plusAssign_za3lpa$(0);
      }
      $receiver.vertexIt.index = (tmp$_7 = $receiver.numVertices, $receiver.numVertices = tmp$_7 + 1 | 0, tmp$_7);
      var closure$aabb_2 = closure$aabb;
      var closure$color_2 = closure$color;
      var $receiver_2 = $receiver.vertexIt;
      $receiver_2.position.set_y2kzbl$(closure$aabb_2.min.x, closure$aabb_2.max.y, closure$aabb_2.max.z);
      $receiver_2.color.set_d7aj7k$(closure$color_2);
      $receiver.bounds.add_czzhiu$($receiver.vertexIt.position);
      $receiver.hasChanged = true;
      var i2 = $receiver.numVertices - 1 | 0;
      var tmp$_8, tmp$_9, tmp$_10;
      $receiver.checkBufferSizes_za3lpa$();
      tmp$_8 = $receiver.vertexSizeF;
      for (var i_5 = 1; i_5 <= tmp$_8; i_5++) {
        $receiver.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_9 = $receiver.vertexSizeI;
      for (var i_6 = 1; i_6 <= tmp$_9; i_6++) {
        $receiver.dataI.plusAssign_za3lpa$(0);
      }
      $receiver.vertexIt.index = (tmp$_10 = $receiver.numVertices, $receiver.numVertices = tmp$_10 + 1 | 0, tmp$_10);
      var closure$aabb_3 = closure$aabb;
      var closure$color_3 = closure$color;
      var $receiver_3 = $receiver.vertexIt;
      $receiver_3.position.set_y2kzbl$(closure$aabb_3.min.x, closure$aabb_3.max.y, closure$aabb_3.min.z);
      $receiver_3.color.set_d7aj7k$(closure$color_3);
      $receiver.bounds.add_czzhiu$($receiver.vertexIt.position);
      $receiver.hasChanged = true;
      var i3 = $receiver.numVertices - 1 | 0;
      var tmp$_11, tmp$_12, tmp$_13;
      $receiver.checkBufferSizes_za3lpa$();
      tmp$_11 = $receiver.vertexSizeF;
      for (var i_7 = 1; i_7 <= tmp$_11; i_7++) {
        $receiver.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_12 = $receiver.vertexSizeI;
      for (var i_8 = 1; i_8 <= tmp$_12; i_8++) {
        $receiver.dataI.plusAssign_za3lpa$(0);
      }
      $receiver.vertexIt.index = (tmp$_13 = $receiver.numVertices, $receiver.numVertices = tmp$_13 + 1 | 0, tmp$_13);
      var closure$aabb_4 = closure$aabb;
      var closure$color_4 = closure$color;
      var $receiver_4 = $receiver.vertexIt;
      $receiver_4.position.set_y2kzbl$(closure$aabb_4.max.x, closure$aabb_4.min.y, closure$aabb_4.min.z);
      $receiver_4.color.set_d7aj7k$(closure$color_4);
      $receiver.bounds.add_czzhiu$($receiver.vertexIt.position);
      $receiver.hasChanged = true;
      var i4 = $receiver.numVertices - 1 | 0;
      var tmp$_14, tmp$_15, tmp$_16;
      $receiver.checkBufferSizes_za3lpa$();
      tmp$_14 = $receiver.vertexSizeF;
      for (var i_9 = 1; i_9 <= tmp$_14; i_9++) {
        $receiver.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_15 = $receiver.vertexSizeI;
      for (var i_10 = 1; i_10 <= tmp$_15; i_10++) {
        $receiver.dataI.plusAssign_za3lpa$(0);
      }
      $receiver.vertexIt.index = (tmp$_16 = $receiver.numVertices, $receiver.numVertices = tmp$_16 + 1 | 0, tmp$_16);
      var closure$aabb_5 = closure$aabb;
      var closure$color_5 = closure$color;
      var $receiver_5 = $receiver.vertexIt;
      $receiver_5.position.set_y2kzbl$(closure$aabb_5.max.x, closure$aabb_5.min.y, closure$aabb_5.max.z);
      $receiver_5.color.set_d7aj7k$(closure$color_5);
      $receiver.bounds.add_czzhiu$($receiver.vertexIt.position);
      $receiver.hasChanged = true;
      var i5 = $receiver.numVertices - 1 | 0;
      var tmp$_17, tmp$_18, tmp$_19;
      $receiver.checkBufferSizes_za3lpa$();
      tmp$_17 = $receiver.vertexSizeF;
      for (var i_11 = 1; i_11 <= tmp$_17; i_11++) {
        $receiver.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_18 = $receiver.vertexSizeI;
      for (var i_12 = 1; i_12 <= tmp$_18; i_12++) {
        $receiver.dataI.plusAssign_za3lpa$(0);
      }
      $receiver.vertexIt.index = (tmp$_19 = $receiver.numVertices, $receiver.numVertices = tmp$_19 + 1 | 0, tmp$_19);
      var closure$aabb_6 = closure$aabb;
      var closure$color_6 = closure$color;
      var $receiver_6 = $receiver.vertexIt;
      $receiver_6.position.set_y2kzbl$(closure$aabb_6.max.x, closure$aabb_6.max.y, closure$aabb_6.max.z);
      $receiver_6.color.set_d7aj7k$(closure$color_6);
      $receiver.bounds.add_czzhiu$($receiver.vertexIt.position);
      $receiver.hasChanged = true;
      var i6 = $receiver.numVertices - 1 | 0;
      var tmp$_20, tmp$_21, tmp$_22;
      $receiver.checkBufferSizes_za3lpa$();
      tmp$_20 = $receiver.vertexSizeF;
      for (var i_13 = 1; i_13 <= tmp$_20; i_13++) {
        $receiver.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_21 = $receiver.vertexSizeI;
      for (var i_14 = 1; i_14 <= tmp$_21; i_14++) {
        $receiver.dataI.plusAssign_za3lpa$(0);
      }
      $receiver.vertexIt.index = (tmp$_22 = $receiver.numVertices, $receiver.numVertices = tmp$_22 + 1 | 0, tmp$_22);
      var closure$aabb_7 = closure$aabb;
      var closure$color_7 = closure$color;
      var $receiver_7 = $receiver.vertexIt;
      $receiver_7.position.set_y2kzbl$(closure$aabb_7.max.x, closure$aabb_7.max.y, closure$aabb_7.min.z);
      $receiver_7.color.set_d7aj7k$(closure$color_7);
      $receiver.bounds.add_czzhiu$($receiver.vertexIt.position);
      $receiver.hasChanged = true;
      var i7 = $receiver.numVertices - 1 | 0;
      $receiver.addIndices_pmhfmb$(new Int32Array([i0, i1, i1, i2, i2, i3, i3, i0, i4, i5, i5, i6, i6, i7, i7, i4, i0, i4, i1, i5, i2, i6, i3, i7]));
      return Unit;
    };
  }
  LineMesh.prototype.addBoundingBox_j1pmtk$ = function (aabb, color) {
    var $this = this.geometry;
    var wasBatchUpdate = $this.isBatchUpdate;
    $this.isBatchUpdate = true;
    LineMesh$addBoundingBox$lambda(aabb, color)($this);
    $this.hasChanged = true;
    $this.isBatchUpdate = wasBatchUpdate;
    if (false) {
      $this.rebuildBounds();
    }};
  LineMesh.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LineMesh',
    interfaces: [Mesh]
  };
  var mesh = defineInlineFunction('kool.de.fabmax.kool.scene.mesh_ycs46o$', wrapFunction(function () {
    var IndexedVertexList_init = _.de.fabmax.kool.util.IndexedVertexList;
    var Mesh_init = _.de.fabmax.kool.scene.Mesh;
    return function (attributes, name, block) {
      if (name === void 0)
        name = null;
      var mesh = new Mesh_init(new IndexedVertexList_init(attributes), name);
      block(mesh);
      return mesh;
    };
  }));
  function colorMesh(name, generate) {
    if (name === void 0)
      name = null;
    var mesh = new Mesh(new IndexedVertexList(listOf([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().NORMALS, Attribute$Companion_getInstance().COLORS])), name);
    generate(mesh);
    return mesh;
  }
  function textMesh(font, name, generate) {
    if (name === void 0)
      name = null;
    var mesh = new Mesh(new IndexedVertexList(listOf([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().NORMALS, Attribute$Companion_getInstance().COLORS, Attribute$Companion_getInstance().TEXTURE_COORDS])), name);
    generate(mesh);
    var text = mesh;
    return text;
  }
  function textureMesh(name, isNormalMapped, generate) {
    if (name === void 0)
      name = null;
    if (isNormalMapped === void 0)
      isNormalMapped = false;
    var attributes = mutableListOf([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().NORMALS, Attribute$Companion_getInstance().TEXTURE_COORDS]);
    if (isNormalMapped) {
      var element = Attribute$Companion_getInstance().TANGENTS;
      attributes.add_11rb$(element);
    }var mesh = new Mesh(new IndexedVertexList(attributes), name);
    generate(mesh);
    var mesh_0 = mesh;
    if (isNormalMapped) {
      mesh_0.geometry.generateTangents();
    }return mesh_0;
  }
  function Mesh(geometry, name) {
    Mesh$Companion_getInstance();
    if (name === void 0)
      name = null;
    Node.call(this, name);
    this.geometry = geometry;
    var tmp$;
    this.id = (tmp$ = Mesh$Companion_getInstance().instanceId_0, Mesh$Companion_getInstance().instanceId_0 = tmp$.inc(), tmp$);
    this.instances = null;
    this.pipelineLoader_6i1avl$_0 = null;
    this.pipeline_fj0dqa$_0 = null;
    this.discardedPipelines_d0j47k$_0 = ArrayList_init_0();
    this.rayTest = MeshRayTest$Companion_getInstance().boundsTest();
  }
  Object.defineProperty(Mesh.prototype, 'pipelineLoader', {
    get: function () {
      return this.pipelineLoader_6i1avl$_0;
    },
    set: function (value) {
      var tmp$;
      this.pipelineLoader_6i1avl$_0 = value;
      if ((tmp$ = this.pipeline_fj0dqa$_0) != null) {
        this.discardedPipelines_d0j47k$_0.add_11rb$(tmp$);
      }this.pipeline_fj0dqa$_0 = null;
    }
  });
  Object.defineProperty(Mesh.prototype, 'bounds', {
    get: function () {
      return this.geometry.bounds;
    }
  });
  function Mesh$generate$lambda(closure$generator) {
    return function ($receiver) {
      $receiver.clear();
      closure$generator(new MeshBuilder($receiver));
      return Unit;
    };
  }
  Mesh.prototype.generate_v2sixm$ = function (generator) {
    var $this = this.geometry;
    var wasBatchUpdate = $this.isBatchUpdate;
    $this.isBatchUpdate = true;
    Mesh$generate$lambda(generator)($this);
    $this.hasChanged = true;
    $this.isBatchUpdate = wasBatchUpdate;
    if (false) {
      $this.rebuildBounds();
    }};
  Mesh.prototype.getPipeline_aemszp$ = function (ctx) {
    var tmp$, tmp$_0;
    if (!this.discardedPipelines_d0j47k$_0.isEmpty()) {
      var tmp$_1;
      tmp$_1 = this.discardedPipelines_d0j47k$_0.iterator();
      while (tmp$_1.hasNext()) {
        var element = tmp$_1.next();
        ctx.disposePipeline_i7l2g2$(element);
      }
      this.discardedPipelines_d0j47k$_0.clear();
    }var tmp$_2;
    if ((tmp$_0 = this.pipeline_fj0dqa$_0) != null)
      tmp$_2 = tmp$_0;
    else {
      var tmp$_3;
      if ((tmp$ = this.pipelineLoader) != null) {
        var $receiver = tmp$.createPipeline_y7vss5$(this, new Pipeline$Builder(), ctx);
        this.pipeline_fj0dqa$_0 = $receiver;
        tmp$_3 = $receiver;
      } else
        tmp$_3 = null;
      tmp$_2 = tmp$_3;
    }
    return tmp$_2;
  };
  Mesh.prototype.rayTest_jljx4v$ = function (test) {
    this.rayTest.rayTest_jljx4v$(test);
  };
  Mesh.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$;
    Node.prototype.dispose_aemszp$.call(this, ctx);
    if ((tmp$ = this.pipeline_fj0dqa$_0) != null) {
      ctx.disposePipeline_i7l2g2$(tmp$);
    }this.pipeline_fj0dqa$_0 = null;
  };
  Mesh.prototype.collectDrawCommands_oco14p$ = function (renderPass, ctx) {
    Node.prototype.collectDrawCommands_oco14p$.call(this, renderPass, ctx);
    if (!this.isRendered) {
      return;
    }if (this.geometry.hasChanged && !this.geometry.isBatchUpdate) {
      if (this.geometry.isRebuildBoundsOnSync) {
        this.geometry.rebuildBounds();
      }this.rayTest.onMeshDataChanged_f1jspk$(this);
    }renderPass.drawQueue.addMesh_sbx4mf$(this, ctx);
  };
  function Mesh$Companion() {
    Mesh$Companion_instance = this;
    this.instanceId_0 = L1;
  }
  Mesh$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Mesh$Companion_instance = null;
  function Mesh$Companion_getInstance() {
    if (Mesh$Companion_instance === null) {
      new Mesh$Companion();
    }return Mesh$Companion_instance;
  }
  Mesh.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Mesh',
    interfaces: [Node]
  };
  function MeshRayTest() {
    MeshRayTest$Companion_getInstance();
  }
  MeshRayTest.prototype.onMeshDataChanged_f1jspk$ = function (mesh) {
  };
  function MeshRayTest$Companion() {
    MeshRayTest$Companion_instance = this;
  }
  function MeshRayTest$Companion$nopTest$ObjectLiteral() {
  }
  MeshRayTest$Companion$nopTest$ObjectLiteral.prototype.rayTest_jljx4v$ = function (test) {
  };
  MeshRayTest$Companion$nopTest$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [MeshRayTest]
  };
  MeshRayTest$Companion.prototype.nopTest = function () {
    return new MeshRayTest$Companion$nopTest$ObjectLiteral();
  };
  function MeshRayTest$Companion$boundsTest$ObjectLiteral() {
    this.mesh = null;
  }
  MeshRayTest$Companion$boundsTest$ObjectLiteral.prototype.onMeshDataChanged_f1jspk$ = function (mesh) {
    this.mesh = mesh;
  };
  MeshRayTest$Companion$boundsTest$ObjectLiteral.prototype.rayTest_jljx4v$ = function (test) {
    var tmp$;
    tmp$ = this.mesh;
    if (tmp$ == null) {
      return;
    }var mesh = tmp$;
    var distSqr = mesh.bounds.hitDistanceSqr_nvyeur$(test.ray);
    if (distSqr < kotlin_js_internal_FloatCompanionObject.MAX_VALUE && distSqr <= test.hitDistanceSqr) {
      test.setHit_vfk0k2$(mesh, Math_0.sqrt(distSqr));
    }};
  MeshRayTest$Companion$boundsTest$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [MeshRayTest]
  };
  MeshRayTest$Companion.prototype.boundsTest = function () {
    return new MeshRayTest$Companion$boundsTest$ObjectLiteral();
  };
  function MeshRayTest$Companion$geometryTest$ObjectLiteral(closure$mesh) {
    this.closure$mesh = closure$mesh;
    this.triangleTree = null;
    this.rayTraverser = new TriangleHitTraverser();
  }
  MeshRayTest$Companion$geometryTest$ObjectLiteral.prototype.onMeshDataChanged_f1jspk$ = function (mesh) {
    this.triangleTree = triangleKdTree_0(Triangle$Companion_getInstance().getTriangles_r7nl2o$(mesh.geometry));
  };
  MeshRayTest$Companion$geometryTest$ObjectLiteral.prototype.rayTest_jljx4v$ = function (test) {
    var tmp$;
    this.rayTraverser.setup_nvyeur$(test.ray);
    if ((tmp$ = this.triangleTree) != null) {
      this.rayTraverser.traverse_m6hlto$(tmp$);
    }if (this.rayTraverser.distanceSqr < test.hitDistanceSqr) {
      test.setHit_vfk0k2$(this.closure$mesh, this.rayTraverser.distance);
    }};
  MeshRayTest$Companion$geometryTest$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [MeshRayTest]
  };
  function MeshRayTest$Companion$geometryTest$ObjectLiteral_0(closure$mesh) {
    this.closure$mesh = closure$mesh;
    this.edgeTree = null;
    this.rayTraverser = new NearestEdgeToRayTraverser();
  }
  MeshRayTest$Companion$geometryTest$ObjectLiteral_0.prototype.onMeshDataChanged_f1jspk$ = function (mesh) {
    this.edgeTree = edgeKdTree(Edge$Companion_getInstance().getEdges_r7nl2o$(mesh.geometry));
  };
  MeshRayTest$Companion$geometryTest$ObjectLiteral_0.prototype.rayTest_jljx4v$ = function (test) {
    var tmp$;
    this.rayTraverser.setup_nvyeur$(test.ray);
    if ((tmp$ = this.edgeTree) != null) {
      this.rayTraverser.traverse_m6hlto$(tmp$);
    }if (this.rayTraverser.distanceSqr < test.hitDistanceSqr) {
      test.setHit_vfk0k2$(this.closure$mesh, this.rayTraverser.distance);
    }};
  MeshRayTest$Companion$geometryTest$ObjectLiteral_0.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [MeshRayTest]
  };
  MeshRayTest$Companion.prototype.geometryTest_f1jspk$ = function (mesh) {
    var tmp$;
    switch (mesh.geometry.primitiveType.name) {
      case 'TRIANGLES':
        tmp$ = new MeshRayTest$Companion$geometryTest$ObjectLiteral(mesh);
        break;
      case 'LINES':
        tmp$ = new MeshRayTest$Companion$geometryTest$ObjectLiteral_0(mesh);
        break;
      default:throw IllegalArgumentException_init('Mesh primitive type must be either GL_TRIANGLES or GL_LINES');
    }
    return tmp$;
  };
  MeshRayTest$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MeshRayTest$Companion_instance = null;
  function MeshRayTest$Companion_getInstance() {
    if (MeshRayTest$Companion_instance === null) {
      new MeshRayTest$Companion();
    }return MeshRayTest$Companion_instance;
  }
  MeshRayTest.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'MeshRayTest',
    interfaces: []
  };
  function Node(name) {
    Node$Companion_getInstance();
    if (name === void 0)
      name = null;
    this.name = name;
    this.onUpdate = ArrayList_init_0();
    this.onCollectDrawCommands = ArrayList_init_0();
    this.onDispose = ArrayList_init_0();
    this.onHoverEnter = ArrayList_init_0();
    this.onHover = ArrayList_init_0();
    this.onHoverExit = ArrayList_init_0();
    this.tags = new Tags();
    this.bounds_ba5obo$_0 = new BoundingBox();
    this.globalRadius_3g00fw$_0 = 0.0;
    this.globalCenterMut = MutableVec3f_init();
    this.globalExtentMut = MutableVec3f_init();
    this.modelMat = new Mat4d();
    this.modelMatDirty = false;
    this.modelMatInvLazy_yq9j4d$_0 = new Mat4d();
    this.parent_302581$_0 = null;
    this.isVisible_mqrc8j$_0 = true;
    this.isCastingShadow = true;
    this.isPickable_b77vbo$_0 = true;
    this.isFrustumChecked_un4x7a$_0 = true;
    this.isRendered = true;
  }
  Object.defineProperty(Node.prototype, 'bounds', {
    get: function () {
      return this.bounds_ba5obo$_0;
    }
  });
  Object.defineProperty(Node.prototype, 'globalCenter', {
    get: function () {
      return this.globalCenterMut;
    }
  });
  Object.defineProperty(Node.prototype, 'globalRadius', {
    get: function () {
      return this.globalRadius_3g00fw$_0;
    },
    set: function (globalRadius) {
      this.globalRadius_3g00fw$_0 = globalRadius;
    }
  });
  Object.defineProperty(Node.prototype, 'modelMatInv', {
    get: function () {
      return this.checkModelMatInv_vk7bqf$_0();
    }
  });
  Object.defineProperty(Node.prototype, 'parent', {
    get: function () {
      return this.parent_302581$_0;
    },
    set: function (parent) {
      this.parent_302581$_0 = parent;
    }
  });
  Object.defineProperty(Node.prototype, 'isVisible', {
    get: function () {
      return this.isVisible_mqrc8j$_0;
    },
    set: function (isVisible) {
      this.isVisible_mqrc8j$_0 = isVisible;
    }
  });
  Object.defineProperty(Node.prototype, 'isPickable', {
    get: function () {
      return this.isPickable_b77vbo$_0;
    },
    set: function (isPickable) {
      this.isPickable_b77vbo$_0 = isPickable;
    }
  });
  Object.defineProperty(Node.prototype, 'isFrustumChecked', {
    get: function () {
      return this.isFrustumChecked_un4x7a$_0;
    },
    set: function (isFrustumChecked) {
      this.isFrustumChecked_un4x7a$_0 = isFrustumChecked;
    }
  });
  Node.prototype.update_oco14p$ = function (renderPass, ctx) {
    var tmp$;
    tmp$ = this.onUpdate;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.onUpdate.get_za3lpa$(i)(this, renderPass, ctx);
    }
    this.updateModelMat_oco14p$(renderPass, ctx);
    this.globalCenterMut.set_czzhiu$(this.bounds.center);
    this.globalExtentMut.set_czzhiu$(this.bounds.max);
    this.modelMat.transform_w1lst9$(this.globalCenterMut);
    this.modelMat.transform_w1lst9$(this.globalExtentMut);
    this.globalRadius = this.globalCenter.distance_czzhiu$(this.globalExtentMut);
  };
  Node.prototype.updateModelMat_oco14p$ = function (renderPass, ctx) {
    var tmp$, tmp$_0;
    this.modelMat.set_d4zu6l$((tmp$_0 = (tmp$ = this.parent) != null ? tmp$.modelMat : null) != null ? tmp$_0 : Node$Companion_getInstance().MODEL_MAT_IDENTITY_0);
    this.modelMatDirty = true;
  };
  Node.prototype.collectDrawCommands_oco14p$ = function (renderPass, ctx) {
    var tmp$;
    this.isRendered = this.checkIsVisible_6otzq7$(renderPass.camera, ctx);
    if (this.isRendered) {
      tmp$ = this.onCollectDrawCommands;
      for (var i = 0; i !== tmp$.size; ++i) {
        this.onCollectDrawCommands.get_za3lpa$(i)(this, renderPass, ctx);
      }
    }};
  Node.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$;
    tmp$ = this.onDispose;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.onDispose.get_za3lpa$(i)(this, ctx);
    }
  };
  Node.prototype.toGlobalCoords_w1lst9$$default = function (vec, w) {
    this.modelMat.transform_w1lst9$(vec, w);
    return vec;
  };
  Node.prototype.toGlobalCoords_w1lst9$ = function (vec, w, callback$default) {
    if (w === void 0)
      w = 1.0;
    return callback$default ? callback$default(vec, w) : this.toGlobalCoords_w1lst9$$default(vec, w);
  };
  Node.prototype.toGlobalCoords_j7uy7i$$default = function (vec, w) {
    this.modelMat.transform_j7uy7i$(vec, w);
    return vec;
  };
  Node.prototype.toGlobalCoords_j7uy7i$ = function (vec, w, callback$default) {
    if (w === void 0)
      w = 1.0;
    return callback$default ? callback$default(vec, w) : this.toGlobalCoords_j7uy7i$$default(vec, w);
  };
  Node.prototype.toLocalCoords_w1lst9$$default = function (vec, w) {
    this.modelMatInv.transform_w1lst9$(vec, w);
    return vec;
  };
  Node.prototype.toLocalCoords_w1lst9$ = function (vec, w, callback$default) {
    if (w === void 0)
      w = 1.0;
    return callback$default ? callback$default(vec, w) : this.toLocalCoords_w1lst9$$default(vec, w);
  };
  Node.prototype.toLocalCoords_j7uy7i$$default = function (vec, w) {
    this.modelMatInv.transform_j7uy7i$(vec, w);
    return vec;
  };
  Node.prototype.toLocalCoords_j7uy7i$ = function (vec, w, callback$default) {
    if (w === void 0)
      w = 1.0;
    return callback$default ? callback$default(vec, w) : this.toLocalCoords_j7uy7i$$default(vec, w);
  };
  Node.prototype.rayTest_jljx4v$ = function (test) {
  };
  Node.prototype.get_61zpoe$ = function (name) {
    if (equals(name, this.name)) {
      return this;
    }return null;
  };
  Node.prototype.checkIsVisible_6otzq7$ = function (cam, ctx) {
    if (!this.isVisible) {
      return false;
    } else if (this.isFrustumChecked && !this.bounds.isEmpty) {
      return cam.isInFrustum_f1kmr1$(this);
    }return true;
  };
  Node.prototype.findParentOfType_287e2$ = defineInlineFunction('kool.de.fabmax.kool.scene.Node.findParentOfType_287e2$', wrapFunction(function () {
    var throwCCE = Kotlin.throwCCE;
    return function (T_0, isT) {
      var tmp$;
      var p = this.parent;
      while (p != null && !isT(p)) {
        p = p.parent;
      }
      return isT(tmp$ = p) ? tmp$ : throwCCE();
    };
  }));
  Node.prototype.checkModelMatInv_vk7bqf$_0 = function () {
    if (this.modelMatDirty) {
      this.modelMat.invert_23yxad$(this.modelMatInvLazy_yq9j4d$_0);
      this.modelMatDirty = false;
    }return this.modelMatInvLazy_yq9j4d$_0;
  };
  function Node$Companion() {
    Node$Companion_instance = this;
    this.MODEL_MAT_IDENTITY_0 = new Mat4d();
  }
  Node$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Node$Companion_instance = null;
  function Node$Companion_getInstance() {
    if (Node$Companion_instance === null) {
      new Node$Companion();
    }return Node$Companion_instance;
  }
  Node.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Node',
    interfaces: [Disposable]
  };
  function orbitInputTransform($receiver, name, block) {
    if (name === void 0)
      name = null;
    var sit = new OrbitInputTransform($receiver, name);
    block(sit);
    return sit;
  }
  function defaultCamTransform$lambda(this$defaultCamTransform) {
    return function ($receiver) {
      $receiver.setMouseRotation_dleff0$(20.0, -30.0);
      $receiver.unaryPlus_uv0sim$(this$defaultCamTransform.camera);
      return Unit;
    };
  }
  function defaultCamTransform($receiver) {
    $receiver.unaryPlus_uv0sim$(orbitInputTransform($receiver, void 0, defaultCamTransform$lambda($receiver)));
  }
  function OrbitInputTransform(scene, name) {
    if (name === void 0)
      name = null;
    TransformGroup.call(this, name);
    this.leftDragMethod = OrbitInputTransform$DragMethod$ROTATE_getInstance();
    this.middleDragMethod = OrbitInputTransform$DragMethod$NONE_getInstance();
    this.rightDragMethod = OrbitInputTransform$DragMethod$PAN_getInstance();
    this.zoomMethod = OrbitInputTransform$ZoomMethod$ZOOM_TRANSLATE_getInstance();
    this.verticalAxis = Vec3d$Companion_getInstance().Y_AXIS;
    this.horizontalAxis = Vec3d$Companion_getInstance().X_AXIS;
    this.minHorizontalRot = -90.0;
    this.maxHorizontalRot = 90.0;
    this.translation = MutableVec3d_init();
    this.verticalRotation = 0.0;
    this.horizontalRotation = 0.0;
    this.zoom_os17wm$_0 = 10.0;
    this.isKeepingStandardTransform = false;
    this.invertRotX = false;
    this.invertRotY = false;
    this.minZoom = 1.0;
    this.maxZoom = 100.0;
    this.translationBounds = null;
    this.panMethod = new CameraOrthogonalPan();
    this.vertRotAnimator = new SpringDamperDouble(0.0);
    this.horiRotAnimator = new SpringDamperDouble(0.0);
    this.zoomAnimator = new SpringDamperDouble(this.zoom);
    this.prevButtonMask_ajfzw$_0 = 0;
    this.dragMethod_errtco$_0 = OrbitInputTransform$DragMethod$NONE_getInstance();
    this.dragStart_84bd5l$_0 = false;
    this.deltaPos_l16i4v$_0 = MutableVec2f_init();
    this.deltaScroll_dymhuq$_0 = 0.0;
    this.ptrPos_jb68ux$_0 = MutableVec2f_init();
    this.panPlane_eoagge$_0 = new Plane();
    this.pointerHitStart_dvxvk5$_0 = MutableVec3f_init();
    this.pointerHit_a6l7qh$_0 = MutableVec3f_init();
    this.tmpVec1_ioqh9p$_0 = MutableVec3f_init();
    this.tmpVec2_ioqh8u$_0 = MutableVec3f_init();
    this.mouseTransform_3g2ewq$_0 = new Mat4d();
    this.mouseTransformInv_t9oczn$_0 = new Mat4d();
    this.smoothness_swf2pk$_0 = 0.0;
    this.smoothness = 0.5;
    this.panPlane_eoagge$_0.p.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.panPlane_eoagge$_0.n.set_czzhiu$(Vec3f$Companion_getInstance().Y_AXIS);
    scene.registerDragHandler_y44tw7$(this);
    this.onUpdate.add_11rb$(OrbitInputTransform_init$lambda(this));
  }
  Object.defineProperty(OrbitInputTransform.prototype, 'zoom', {
    get: function () {
      return this.zoom_os17wm$_0;
    },
    set: function (value) {
      var min = this.minZoom;
      var max = this.maxZoom;
      var clamp$result;
      if (value < min) {
        clamp$result = min;
      } else if (value > max) {
        clamp$result = max;
      } else {
        clamp$result = value;
      }
      this.zoom_os17wm$_0 = clamp$result;
    }
  });
  Object.defineProperty(OrbitInputTransform.prototype, 'smoothness', {
    get: function () {
      return this.smoothness_swf2pk$_0;
    },
    set: function (value) {
      var tmp$;
      this.smoothness_swf2pk$_0 = value;
      var eps;
      eps = package$math.FUZZY_EQ_D;
      if (!(Math_0.abs(value) <= eps)) {
        tmp$ = 50.0 / value;
      } else {
        tmp$ = 0.0;
      }
      var stiffness = tmp$;
      this.vertRotAnimator.stiffness = stiffness;
      this.horiRotAnimator.stiffness = stiffness;
      this.zoomAnimator.stiffness = stiffness;
    }
  });
  OrbitInputTransform.prototype.setMouseRotation_dleff0$ = function (vertical, horizontal) {
    this.setMouseRotation_lu1900$(vertical, horizontal);
  };
  OrbitInputTransform.prototype.setMouseRotation_lu1900$ = function (vertical, horizontal) {
    this.vertRotAnimator.set_14dthe$(vertical);
    this.horiRotAnimator.set_14dthe$(horizontal);
    this.verticalRotation = vertical;
    this.horizontalRotation = horizontal;
  };
  OrbitInputTransform.prototype.setMouseTranslation_y2kzbl$ = function (x, y, z) {
    this.setMouseTranslation_yvo9jy$(x, y, z);
  };
  OrbitInputTransform.prototype.setMouseTranslation_yvo9jy$ = function (x, y, z) {
    this.translation.set_yvo9jy$(x, y, z);
  };
  OrbitInputTransform.prototype.resetZoom_mx4ult$ = function (newZoom) {
    this.resetZoom_14dthe$(newZoom);
  };
  OrbitInputTransform.prototype.resetZoom_14dthe$ = function (newZoom) {
    this.zoom = newZoom;
    this.zoomAnimator.set_14dthe$(this.zoom);
  };
  OrbitInputTransform.prototype.updateTransform = function () {
    var tmp$;
    (tmp$ = this.translationBounds) != null ? (tmp$.clampToBounds_5s4mqs$(this.translation), Unit) : null;
    if (this.isKeepingStandardTransform) {
      this.mouseTransform_3g2ewq$_0.invert_23yxad$(this.mouseTransformInv_t9oczn$_0);
      this.mul_d4zu6l$(this.mouseTransformInv_t9oczn$_0);
    }var z = this.zoomAnimator.actual;
    var vr = this.vertRotAnimator.actual;
    var hr = this.horiRotAnimator.actual;
    this.mouseTransform_3g2ewq$_0.setIdentity();
    this.mouseTransform_3g2ewq$_0.translate_yvo9jy$(this.translation.x, this.translation.y, this.translation.z);
    this.mouseTransform_3g2ewq$_0.scale_yvo9jy$(z, z, z);
    this.mouseTransform_3g2ewq$_0.rotate_5820x2$(vr, this.verticalAxis);
    this.mouseTransform_3g2ewq$_0.rotate_5820x2$(hr, this.horizontalAxis);
    if (this.isKeepingStandardTransform) {
      this.mul_d4zu6l$(this.mouseTransform_3g2ewq$_0);
    } else {
      this.set_d4zu6l$(this.mouseTransform_3g2ewq$_0);
    }
  };
  OrbitInputTransform.prototype.doCamTransform_kff6gu$_0 = function (renderPass, ctx) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    if (this.dragMethod_errtco$_0 === OrbitInputTransform$DragMethod$PAN_getInstance() && this.panMethod.computePanPoint_467c2i$(this.pointerHit_a6l7qh$_0, renderPass, this.ptrPos_jb68ux$_0, ctx)) {
      if (this.dragStart_84bd5l$_0) {
        this.dragStart_84bd5l$_0 = false;
        this.pointerHitStart_dvxvk5$_0.set_czzhiu$(this.pointerHit_a6l7qh$_0);
        this.stopSmoothMotion_ph0bif$_0();
      } else {
        var $receiver = 1 - this.smoothness;
        var clamp$result;
        if ($receiver < 0.1) {
          clamp$result = 0.1;
        } else if ($receiver > 1.0) {
          clamp$result = 1.0;
        } else {
          clamp$result = $receiver;
        }
        var s = clamp$result;
        this.tmpVec1_ioqh9p$_0.set_czzhiu$(this.pointerHitStart_dvxvk5$_0).subtract_czzhiu$(this.pointerHit_a6l7qh$_0).scale_mx4ult$(s);
        (tmp$ = this.parent) != null ? tmp$.toLocalCoords_w1lst9$(this.tmpVec1_ioqh9p$_0, 0.0) : null;
        var tLen = this.tmpVec1_ioqh9p$_0.length();
        if (tLen > renderPass.camera.globalRange * 0.5) {
          this.tmpVec1_ioqh9p$_0.scale_mx4ult$(renderPass.camera.globalRange * 0.5 / tLen);
        }this.add_1k1qf7$_0(this.translation, this.tmpVec1_ioqh9p$_0);
      }
    } else {
      this.pointerHit_a6l7qh$_0.set_czzhiu$(renderPass.camera.globalLookAt);
    }
    var $receiver_0 = this.deltaScroll_dymhuq$_0;
    var eps;
    eps = package$math.FUZZY_EQ_F;
    if (!(Math_0.abs($receiver_0) <= eps)) {
      this.zoom = this.zoom * (1.0 - this.deltaScroll_dymhuq$_0 / 10.0);
      this.deltaScroll_dymhuq$_0 = 0.0;
    }if (this.dragMethod_errtco$_0 === OrbitInputTransform$DragMethod$ROTATE_getInstance()) {
      tmp$_2 = this.verticalRotation;
      tmp$_1 = this.deltaPos_l16i4v$_0.x / 3;
      if (this.invertRotX) {
        tmp$_0 = -1.0;
      } else {
        tmp$_0 = 1.0;
      }
      this.verticalRotation = tmp$_2 - tmp$_1 * tmp$_0;
      tmp$_5 = this.horizontalRotation;
      tmp$_4 = this.deltaPos_l16i4v$_0.y / 3;
      if (this.invertRotY) {
        tmp$_3 = -1.0;
      } else {
        tmp$_3 = 1.0;
      }
      this.horizontalRotation = tmp$_5 - tmp$_4 * tmp$_3;
      var $receiver_1 = this.horizontalRotation;
      var min = this.minHorizontalRot;
      var max = this.maxHorizontalRot;
      var clamp$result_0;
      if ($receiver_1 < min) {
        clamp$result_0 = min;
      } else if ($receiver_1 > max) {
        clamp$result_0 = max;
      } else {
        clamp$result_0 = $receiver_1;
      }
      this.horizontalRotation = clamp$result_0;
      this.deltaPos_l16i4v$_0.set_czzhjp$(Vec2f$Companion_getInstance().ZERO);
    }this.vertRotAnimator.desired = this.verticalRotation;
    this.horiRotAnimator.desired = this.horizontalRotation;
    this.zoomAnimator.desired = this.zoom;
    var oldZ = this.zoomAnimator.actual;
    var z = this.zoomAnimator.animate_mx4ult$(ctx.deltaT);
    var eps_0;
    eps_0 = package$math.FUZZY_EQ_D;
    var $receiver_2 = oldZ - z;
    if (!(Math_0.abs($receiver_2) <= eps_0) && this.zoomMethod === OrbitInputTransform$ZoomMethod$ZOOM_TRANSLATE_getInstance()) {
      this.computeZoomTranslationPerspective_axn3gs$(renderPass.camera, oldZ, z);
    }this.vertRotAnimator.animate_mx4ult$(ctx.deltaT);
    this.horiRotAnimator.animate_mx4ult$(ctx.deltaT);
    this.updateTransform();
  };
  OrbitInputTransform.prototype.computeZoomTranslationPerspective_axn3gs$ = function (camera, oldZoom, newZoom) {
    var tmp$;
    var s = newZoom / oldZoom;
    camera.globalPos.subtract_2gj7b4$(this.pointerHit_a6l7qh$_0, this.tmpVec1_ioqh9p$_0).scale_mx4ult$(s).add_czzhiu$(this.pointerHit_a6l7qh$_0);
    camera.globalPos.subtract_2gj7b4$(camera.globalLookAt, this.tmpVec2_ioqh8u$_0).scale_mx4ult$(s).add_czzhiu$(camera.globalLookAt);
    this.tmpVec1_ioqh9p$_0.subtract_czzhiu$(this.tmpVec2_ioqh8u$_0);
    (tmp$ = this.parent) != null ? tmp$.toLocalCoords_w1lst9$(this.tmpVec1_ioqh9p$_0, 0.0) : null;
    this.add_1k1qf7$_0(this.translation, this.tmpVec1_ioqh9p$_0);
  };
  OrbitInputTransform.prototype.stopSmoothMotion_ph0bif$_0 = function () {
    this.vertRotAnimator.set_14dthe$(this.vertRotAnimator.actual);
    this.horiRotAnimator.set_14dthe$(this.horiRotAnimator.actual);
    this.zoomAnimator.set_14dthe$(this.zoomAnimator.actual);
    this.verticalRotation = this.vertRotAnimator.actual;
    this.horizontalRotation = this.horiRotAnimator.actual;
    this.zoom = this.zoomAnimator.actual;
  };
  OrbitInputTransform.prototype.handleDrag_urvnay$ = function (dragPtrs, scene, ctx) {
    var tmp$;
    if (!dragPtrs.isEmpty() && !dragPtrs.get_za3lpa$(0).isConsumed_za3lpa$() && dragPtrs.get_za3lpa$(0).isInViewport_hrtwbc$(scene.mainRenderPass.viewport, ctx)) {
      if (dragPtrs.get_za3lpa$(0).buttonEventMask !== 0 || dragPtrs.get_za3lpa$(0).buttonMask !== this.prevButtonMask_ajfzw$_0) {
        if (dragPtrs.get_za3lpa$(0).isLeftButtonDown)
          tmp$ = this.leftDragMethod;
        else if (dragPtrs.get_za3lpa$(0).isRightButtonDown)
          tmp$ = this.rightDragMethod;
        else if (dragPtrs.get_za3lpa$(0).isMiddleButtonDown)
          tmp$ = this.middleDragMethod;
        else
          tmp$ = OrbitInputTransform$DragMethod$NONE_getInstance();
        this.dragMethod_errtco$_0 = tmp$;
        this.dragStart_84bd5l$_0 = this.dragMethod_errtco$_0 !== OrbitInputTransform$DragMethod$NONE_getInstance();
      }this.prevButtonMask_ajfzw$_0 = dragPtrs.get_za3lpa$(0).buttonMask;
      this.ptrPos_jb68ux$_0.set_dleff0$(dragPtrs.get_za3lpa$(0).x, dragPtrs.get_za3lpa$(0).y);
      this.deltaPos_l16i4v$_0.set_dleff0$(dragPtrs.get_za3lpa$(0).deltaX, dragPtrs.get_za3lpa$(0).deltaY);
      this.deltaScroll_dymhuq$_0 = dragPtrs.get_za3lpa$(0).deltaScroll;
      dragPtrs.get_za3lpa$(0).consume_za3lpa$();
    } else {
      this.deltaPos_l16i4v$_0.set_czzhjp$(Vec2f$Companion_getInstance().ZERO);
      this.deltaScroll_dymhuq$_0 = 0.0;
    }
  };
  OrbitInputTransform.prototype.add_1k1qf7$_0 = function ($receiver, v) {
    $receiver.x = $receiver.x + v.x;
    $receiver.y = $receiver.y + v.y;
    $receiver.z = $receiver.z + v.z;
  };
  function OrbitInputTransform$DragMethod(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function OrbitInputTransform$DragMethod_initFields() {
    OrbitInputTransform$DragMethod_initFields = function () {
    };
    OrbitInputTransform$DragMethod$NONE_instance = new OrbitInputTransform$DragMethod('NONE', 0);
    OrbitInputTransform$DragMethod$ROTATE_instance = new OrbitInputTransform$DragMethod('ROTATE', 1);
    OrbitInputTransform$DragMethod$PAN_instance = new OrbitInputTransform$DragMethod('PAN', 2);
  }
  var OrbitInputTransform$DragMethod$NONE_instance;
  function OrbitInputTransform$DragMethod$NONE_getInstance() {
    OrbitInputTransform$DragMethod_initFields();
    return OrbitInputTransform$DragMethod$NONE_instance;
  }
  var OrbitInputTransform$DragMethod$ROTATE_instance;
  function OrbitInputTransform$DragMethod$ROTATE_getInstance() {
    OrbitInputTransform$DragMethod_initFields();
    return OrbitInputTransform$DragMethod$ROTATE_instance;
  }
  var OrbitInputTransform$DragMethod$PAN_instance;
  function OrbitInputTransform$DragMethod$PAN_getInstance() {
    OrbitInputTransform$DragMethod_initFields();
    return OrbitInputTransform$DragMethod$PAN_instance;
  }
  OrbitInputTransform$DragMethod.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DragMethod',
    interfaces: [Enum]
  };
  function OrbitInputTransform$DragMethod$values() {
    return [OrbitInputTransform$DragMethod$NONE_getInstance(), OrbitInputTransform$DragMethod$ROTATE_getInstance(), OrbitInputTransform$DragMethod$PAN_getInstance()];
  }
  OrbitInputTransform$DragMethod.values = OrbitInputTransform$DragMethod$values;
  function OrbitInputTransform$DragMethod$valueOf(name) {
    switch (name) {
      case 'NONE':
        return OrbitInputTransform$DragMethod$NONE_getInstance();
      case 'ROTATE':
        return OrbitInputTransform$DragMethod$ROTATE_getInstance();
      case 'PAN':
        return OrbitInputTransform$DragMethod$PAN_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.scene.OrbitInputTransform.DragMethod.' + name);
    }
  }
  OrbitInputTransform$DragMethod.valueOf_61zpoe$ = OrbitInputTransform$DragMethod$valueOf;
  function OrbitInputTransform$ZoomMethod(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function OrbitInputTransform$ZoomMethod_initFields() {
    OrbitInputTransform$ZoomMethod_initFields = function () {
    };
    OrbitInputTransform$ZoomMethod$ZOOM_CENTER_instance = new OrbitInputTransform$ZoomMethod('ZOOM_CENTER', 0);
    OrbitInputTransform$ZoomMethod$ZOOM_TRANSLATE_instance = new OrbitInputTransform$ZoomMethod('ZOOM_TRANSLATE', 1);
  }
  var OrbitInputTransform$ZoomMethod$ZOOM_CENTER_instance;
  function OrbitInputTransform$ZoomMethod$ZOOM_CENTER_getInstance() {
    OrbitInputTransform$ZoomMethod_initFields();
    return OrbitInputTransform$ZoomMethod$ZOOM_CENTER_instance;
  }
  var OrbitInputTransform$ZoomMethod$ZOOM_TRANSLATE_instance;
  function OrbitInputTransform$ZoomMethod$ZOOM_TRANSLATE_getInstance() {
    OrbitInputTransform$ZoomMethod_initFields();
    return OrbitInputTransform$ZoomMethod$ZOOM_TRANSLATE_instance;
  }
  OrbitInputTransform$ZoomMethod.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ZoomMethod',
    interfaces: [Enum]
  };
  function OrbitInputTransform$ZoomMethod$values() {
    return [OrbitInputTransform$ZoomMethod$ZOOM_CENTER_getInstance(), OrbitInputTransform$ZoomMethod$ZOOM_TRANSLATE_getInstance()];
  }
  OrbitInputTransform$ZoomMethod.values = OrbitInputTransform$ZoomMethod$values;
  function OrbitInputTransform$ZoomMethod$valueOf(name) {
    switch (name) {
      case 'ZOOM_CENTER':
        return OrbitInputTransform$ZoomMethod$ZOOM_CENTER_getInstance();
      case 'ZOOM_TRANSLATE':
        return OrbitInputTransform$ZoomMethod$ZOOM_TRANSLATE_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.scene.OrbitInputTransform.ZoomMethod.' + name);
    }
  }
  OrbitInputTransform$ZoomMethod.valueOf_61zpoe$ = OrbitInputTransform$ZoomMethod$valueOf;
  function OrbitInputTransform_init$lambda(this$OrbitInputTransform) {
    return function ($receiver, rp, ctx) {
      this$OrbitInputTransform.doCamTransform_kff6gu$_0(rp, ctx);
      return Unit;
    };
  }
  OrbitInputTransform.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OrbitInputTransform',
    interfaces: [Scene$DragHandler, TransformGroup]
  };
  function PanBase() {
  }
  PanBase.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PanBase',
    interfaces: []
  };
  function CameraOrthogonalPan() {
    PanBase.call(this);
    this.panPlane = new Plane();
    this.pointerRay_0 = new Ray();
  }
  CameraOrthogonalPan.prototype.computePanPoint_467c2i$ = function (result, renderPass, ptrPos, ctx) {
    this.panPlane.p.set_czzhiu$(renderPass.camera.globalLookAt);
    this.panPlane.n.set_czzhiu$(renderPass.camera.globalLookDir);
    return renderPass.camera.computePickRay_k7d561$(this.pointerRay_0, ptrPos.x, ptrPos.y, renderPass.viewport, ctx) && this.panPlane.intersectionPoint_m2314x$(result, this.pointerRay_0);
  };
  CameraOrthogonalPan.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CameraOrthogonalPan',
    interfaces: [PanBase]
  };
  function FixedPlanePan(planeNormal) {
    PanBase.call(this);
    this.panPlane = new Plane();
    this.pointerRay_0 = new Ray();
    this.panPlane.n.set_czzhiu$(planeNormal);
  }
  FixedPlanePan.prototype.computePanPoint_467c2i$ = function (result, renderPass, ptrPos, ctx) {
    this.panPlane.p.set_czzhiu$(renderPass.camera.globalLookAt);
    return renderPass.camera.computePickRay_k7d561$(this.pointerRay_0, ptrPos.x, ptrPos.y, renderPass.viewport, ctx) && this.panPlane.intersectionPoint_m2314x$(result, this.pointerRay_0);
  };
  FixedPlanePan.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FixedPlanePan',
    interfaces: [PanBase]
  };
  function xPlanePan() {
    return new FixedPlanePan(Vec3f$Companion_getInstance().X_AXIS);
  }
  function yPlanePan() {
    return new FixedPlanePan(Vec3f$Companion_getInstance().Y_AXIS);
  }
  function zPlanePan() {
    return new FixedPlanePan(Vec3f$Companion_getInstance().Z_AXIS);
  }
  function pointMesh(name, block) {
    if (name === void 0)
      name = null;
    var $receiver = new PointMesh(void 0, name);
    block($receiver);
    return $receiver;
  }
  function PointMesh(geometry, name) {
    if (geometry === void 0)
      geometry = IndexedVertexList_init([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().COLORS]);
    if (name === void 0)
      name = null;
    Mesh.call(this, geometry, name);
    geometry.primitiveType = PrimitiveType$POINTS_getInstance();
    this.rayTest = MeshRayTest$Companion_getInstance().nopTest();
    this.pipelineLoader = new ModeledShader$VertexColor();
  }
  PointMesh.prototype.addPoint_tohjaj$ = function (block) {
    var $this = this.geometry;
    var tmp$, tmp$_0, tmp$_1;
    $this.checkBufferSizes_za3lpa$();
    tmp$ = $this.vertexSizeF;
    for (var i = 1; i <= tmp$; i++) {
      $this.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_0 = $this.vertexSizeI;
    for (var i_0 = 1; i_0 <= tmp$_0; i_0++) {
      $this.dataI.plusAssign_za3lpa$(0);
    }
    $this.vertexIt.index = (tmp$_1 = $this.numVertices, $this.numVertices = tmp$_1 + 1 | 0, tmp$_1);
    block($this.vertexIt);
    $this.bounds.add_czzhiu$($this.vertexIt.position);
    $this.hasChanged = true;
    var idx = $this.numVertices - 1 | 0;
    this.geometry.addIndex_za3lpa$(idx);
    return idx;
  };
  PointMesh.prototype.addPoint_4sqmhu$ = function (position, color) {
    var idx = this.geometry.addVertex_lv7vxo$(position, null, color, null);
    this.geometry.addIndex_za3lpa$(idx);
    return idx;
  };
  PointMesh.prototype.clear = function () {
    this.geometry.clear();
    this.bounds.clear();
  };
  PointMesh.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PointMesh',
    interfaces: [Mesh]
  };
  var scene = defineInlineFunction('kool.de.fabmax.kool.scene.scene_13di2z$', wrapFunction(function () {
    var Scene_init = _.de.fabmax.kool.scene.Scene;
    return function (name, block) {
      if (name === void 0)
        name = null;
      var $receiver = new Scene_init(name);
      block($receiver);
      return $receiver;
    };
  }));
  function Scene(name) {
    if (name === void 0)
      name = null;
    Group.call(this, name);
    this.lighting = new Lighting();
    this.camera = new PerspectiveCamera();
    this.onRenderScene = ArrayList_init_0();
    this.mainRenderPass = new ScreenRenderPass(this);
    this.mutOffscreenPasses_2k8cox$_0 = ArrayList_init_0();
    this.remOffscreenPasses_yrwi31$_0 = ArrayList_init_0();
    this.isPickingEnabled = true;
    this.rayTest_odjp91$_0 = new RayTest();
    this.hoverNode_ab2f3d$_0 = null;
    this.dragPtrs_mbcqtw$_0 = ArrayList_init_0();
    this.dragHandlers_ipew8g$_0 = ArrayList_init_0();
    this.disposables_mcwga4$_0 = ArrayList_init_0();
  }
  Object.defineProperty(Scene.prototype, 'offscreenPasses', {
    get: function () {
      return this.mutOffscreenPasses_2k8cox$_0;
    }
  });
  Object.defineProperty(Scene.prototype, 'isFrustumChecked', {
    get: function () {
      return false;
    },
    set: function (f) {
    }
  });
  Scene.prototype.addOffscreenPass_m1c2kf$ = function (pass) {
    if (!this.offscreenPasses.contains_11rb$(pass)) {
      this.mutOffscreenPasses_2k8cox$_0.add_11rb$(pass);
    }};
  Scene.prototype.removeOffscreenPass_m1c2kf$ = function (pass) {
    this.remOffscreenPasses_yrwi31$_0.add_11rb$(pass);
  };
  Scene.prototype.removeOffscreenPasses_fgywi7$_0 = function () {
    if (!this.remOffscreenPasses_yrwi31$_0.isEmpty()) {
      this.mutOffscreenPasses_2k8cox$_0.removeAll_brywnq$(this.remOffscreenPasses_yrwi31$_0);
      this.remOffscreenPasses_yrwi31$_0.clear();
    }};
  Scene.prototype.renderScene_aemszp$ = function (ctx) {
    var tmp$, tmp$_0;
    this.removeOffscreenPasses_fgywi7$_0();
    tmp$ = this.onRenderScene;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.onRenderScene.get_za3lpa$(i)(this, ctx);
    }
    this.mainRenderPass.update_aemszp$(ctx);
    tmp$_0 = this.offscreenPasses;
    for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
      var pass = this.offscreenPasses.get_za3lpa$(i_0);
      if (pass.isEnabled) {
        pass.update_aemszp$(ctx);
        pass.collectDrawCommands_aemszp$(ctx);
      }}
    this.mainRenderPass.collectDrawCommands_aemszp$(ctx);
  };
  Scene.prototype.processInput_aemszp$ = function (ctx) {
    this.handleInput_gqm22e$_0(ctx);
  };
  Scene.prototype.update_oco14p$ = function (renderPass, ctx) {
    var tmp$;
    tmp$ = this.disposables_mcwga4$_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.disposables_mcwga4$_0.get_za3lpa$(i).dispose_aemszp$(ctx);
    }
    this.disposables_mcwga4$_0.clear();
    Group.prototype.update_oco14p$.call(this, renderPass, ctx);
  };
  Scene.prototype.dispose_ipew3$ = function (disposable) {
    this.disposables_mcwga4$_0.add_11rb$(disposable);
  };
  Scene.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$;
    var tmp$_0;
    tmp$_0 = this.disposables_mcwga4$_0.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      element.dispose_aemszp$(ctx);
    }
    this.disposables_mcwga4$_0.clear();
    this.mainRenderPass.dispose_aemszp$(ctx);
    tmp$ = this.offscreenPasses;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.offscreenPasses.get_za3lpa$(i).dispose_aemszp$(ctx);
    }
    this.remOffscreenPasses_yrwi31$_0.clear();
    this.mutOffscreenPasses_2k8cox$_0.clear();
    Group.prototype.dispose_aemszp$.call(this, ctx);
  };
  Scene.prototype.registerDragHandler_y44tw7$ = function (handler) {
    if (!this.dragHandlers_ipew8g$_0.contains_11rb$(handler)) {
      this.dragHandlers_ipew8g$_0.add_11rb$(handler);
    }};
  Scene.prototype.removeDragHandler_y44tw7$ = function (handler) {
    this.dragHandlers_ipew8g$_0.remove_11rb$(handler);
  };
  Scene.prototype.computeRay_wswg9$ = function (pointer, ctx, result) {
    return this.camera.computePickRay_2cu1go$(result, pointer, this.mainRenderPass.viewport, ctx);
  };
  Scene.prototype.handleInput_gqm22e$_0 = function (ctx) {
    var tmp$, tmp$_0, tmp$_1;
    var hovered = null;
    var prevHovered = this.hoverNode_ab2f3d$_0;
    var ptr = ctx.inputMgr.pointerState.primaryPointer;
    if (!this.isPickingEnabled || !ptr.isValid || ptr.isConsumed_za3lpa$()) {
      return;
    }if (ptr.isInViewport_hrtwbc$(this.mainRenderPass.viewport, ctx) && this.camera.initRayTes_clwnka$(this.rayTest_odjp91$_0, ptr, this.mainRenderPass.viewport, ctx)) {
      this.rayTest_jljx4v$(this.rayTest_odjp91$_0);
      if (this.rayTest_odjp91$_0.isHit) {
        hovered = this.rayTest_odjp91$_0.hitNode;
      }}if (!equals(prevHovered, hovered)) {
      if (prevHovered != null) {
        tmp$ = prevHovered.onHoverExit;
        for (var i = 0; i !== tmp$.size; ++i) {
          prevHovered.onHoverExit.get_za3lpa$(i)(prevHovered, ptr, this.rayTest_odjp91$_0, ctx);
        }
      }if (hovered != null) {
        tmp$_0 = hovered.onHoverEnter;
        for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
          hovered.onHoverEnter.get_za3lpa$(i_0)(hovered, ptr, this.rayTest_odjp91$_0, ctx);
        }
      }this.hoverNode_ab2f3d$_0 = hovered;
    }if (hovered != null && equals(prevHovered, hovered)) {
      tmp$_1 = hovered.onHover;
      for (var i_1 = 0; i_1 !== tmp$_1.size; ++i_1) {
        hovered.onHover.get_za3lpa$(i_1)(hovered, ptr, this.rayTest_odjp91$_0, ctx);
      }
    }this.handleDrag_dsfjhm$_0(ctx);
  };
  Scene.prototype.handleDrag_dsfjhm$_0 = function (ctx) {
    var tmp$, tmp$_0;
    this.dragPtrs_mbcqtw$_0.clear();
    tmp$ = ctx.inputMgr.pointerState.pointers;
    for (var i = 0; i !== tmp$.length; ++i) {
      var ptr = ctx.inputMgr.pointerState.pointers[i];
      if (ptr.isValid && ptr.isInViewport_hrtwbc$(this.mainRenderPass.viewport, ctx) && (ptr.buttonMask !== 0 || ptr.buttonEventMask !== 0 || ptr.deltaScroll !== 0.0)) {
        this.dragPtrs_mbcqtw$_0.add_11rb$(ptr);
      }}
    tmp$_0 = reversed(get_indices(this.dragHandlers_ipew8g$_0)).iterator();
    while (tmp$_0.hasNext()) {
      var i_0 = tmp$_0.next();
      this.dragHandlers_ipew8g$_0.get_za3lpa$(i_0).handleDrag_urvnay$(this.dragPtrs_mbcqtw$_0, this, ctx);
    }
  };
  function Scene$DragHandler() {
  }
  Scene$DragHandler.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'DragHandler',
    interfaces: []
  };
  Scene.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Scene',
    interfaces: [Group]
  };
  function Skybox(environmentMap, texLod) {
    if (texLod === void 0)
      texLod = 0.0;
    Mesh.call(this, IndexedVertexList_init([Attribute$Companion_getInstance().POSITIONS]));
    this.environmentMap = environmentMap;
    this.generate_v2sixm$(Skybox_init$lambda);
    this.isFrustumChecked = false;
    this.isCastingShadow = false;
    var texName = 'envMap';
    var $receiver = new ShaderModel('Skybox Shader');
    var closure$texLod = texLod;
    var ifLocalPos = {v: null};
    var $receiver_0 = new ShaderModel$VertexStageBuilder($receiver);
    var mvp = $receiver_0.mvpNode();
    var worldPos = $receiver_0.vec3TransformNode_vid4wo$($receiver_0.attrPositions().output, mvp.outModelMat, 1.0);
    ifLocalPos.v = $receiver_0.stageInterfaceNode_iikjwn$('ifLocalPos', worldPos.outVec3);
    $receiver_0.positionOutput = $receiver_0.addNode_u9w9by$(new Skybox$SkyboxPosNode(mvp, $receiver_0.attrPositions().output, $receiver_0.stage)).outPosition;
    var $receiver_1 = new ShaderModel$FragmentStageBuilder($receiver);
    var sampler = $receiver_1.cubeMapSamplerNode_2z3a2t$($receiver_1.cubeMapNode_61zpoe$(texName), ifLocalPos.v.output, false);
    if (closure$texLod !== 0.0) {
      sampler.texLod = new ShaderNodeIoVar(new ModelVar1fConst(closure$texLod));
    }var ldr = $receiver_1.hdrToLdrNode_r20yfm$(sampler.outColor);
    $receiver_1.colorOutput_a3v4si$(ldr.outColor);
    var model = $receiver;
    var $receiver_2 = new ModeledShader$CubeMapColor(texName, model);
    $receiver_2.onSetup.add_11rb$(Skybox_init$lambda$lambda);
    $receiver_2.onCreated.add_11rb$(Skybox_init$lambda$lambda_0(this, $receiver_2));
    this.pipelineLoader = $receiver_2;
  }
  function Skybox$SkyboxPosNode(mvp, inPos, graph) {
    ShaderNode.call(this, 'skyboxPos', graph, ShaderStage$VERTEX_SHADER_getInstance().mask);
    this.mvp = mvp;
    this.inPos = inPos;
    this.outPosition = new ShaderNodeIoVar(new ModelVar4f('skyboxPos_outPosition'), this);
  }
  Skybox$SkyboxPosNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_7qvs0d$(this.inPos);
    this.dependsOn_lhtstx$(this.mvp);
  };
  Skybox$SkyboxPosNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$(this.outPosition.declare() + ' = (' + this.mvp.outProjMat + ' * ' + this.mvp.outViewMat + ' * vec4(' + this.inPos.ref3f() + ', 0.0)).xyww;');
  };
  Skybox$SkyboxPosNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SkyboxPosNode',
    interfaces: [ShaderNode]
  };
  function Skybox_init$lambda($receiver) {
    $receiver.cubeProps.defaults().centered();
    $receiver.cube_lhbb6w$($receiver.cubeProps);
    return Unit;
  }
  function Skybox_init$lambda$lambda(it) {
    it.cullMethod = CullMethod$CULL_FRONT_FACES_getInstance();
    it.depthTest = DepthCompareOp$LESS_EQUAL_getInstance();
    return Unit;
  }
  function Skybox_init$lambda$lambda_0(this$Skybox, this$) {
    return function (it) {
      this$.cubeMapSampler.texture = this$Skybox.environmentMap;
      return Unit;
    };
  }
  Skybox.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Skybox',
    interfaces: [Mesh]
  };
  function Skybox_init(ft, bk, lt, rt, up, dn, $this) {
    $this = $this || Object.create(Skybox.prototype);
    Skybox.call($this, new CubeMapTexture(void 0, Skybox_init$lambda_0(ft, bk, lt, rt, up, dn)));
    return $this;
  }
  function Coroutine$Skybox_init$lambda(closure$ft_0, closure$bk_0, closure$lt_0, closure$rt_0, closure$up_0, closure$dn_0, $receiver_0, it_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$ft = closure$ft_0;
    this.local$closure$bk = closure$bk_0;
    this.local$closure$lt = closure$lt_0;
    this.local$closure$rt = closure$rt_0;
    this.local$closure$up = closure$up_0;
    this.local$closure$dn = closure$dn_0;
    this.local$it = it_0;
  }
  Coroutine$Skybox_init$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Skybox_init$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Skybox_init$lambda.prototype.constructor = Coroutine$Skybox_init$lambda;
  Coroutine$Skybox_init$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$it.loadCubeMapTextureData_r3y0ew$(this.local$closure$ft, this.local$closure$bk, this.local$closure$lt, this.local$closure$rt, this.local$closure$up, this.local$closure$dn, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Skybox_init$lambda_0(closure$ft_0, closure$bk_0, closure$lt_0, closure$rt_0, closure$up_0, closure$dn_0) {
    return function ($receiver_0, it_0, continuation_0, suspended) {
      var instance = new Coroutine$Skybox_init$lambda(closure$ft_0, closure$bk_0, closure$lt_0, closure$rt_0, closure$up_0, closure$dn_0, $receiver_0, it_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Tags(tags) {
    if (tags === void 0) {
      tags = LinkedHashMap_init();
    }this.tags_0 = tags;
  }
  Tags.prototype.addTag_61zpoe$ = function (tag) {
    var splitIdx = indexOf(tag, 61);
    if (splitIdx >= 0) {
      var key = substring(tag, new IntRange(0, splitIdx - 1 | 0));
      var startIndex = splitIdx + 1 | 0;
      var value = tag.substring(startIndex);
      this.set_4w9ihe$(key, value);
    } else {
      this.set_4w9ihe$(tag, null);
    }
  };
  Tags.prototype.set_4w9ihe$ = function (key, value) {
    this.put_xwzc9p$(key, value != null ? value.toString() : null);
  };
  Tags.prototype.plusAssign_61zpoe$ = function (tag) {
    this.addTag_61zpoe$(tag);
  };
  Tags.prototype.hasTag_jyasbz$ = function (tag, value) {
    if (value === void 0)
      value = null;
    return this.containsKey_11rb$(tag) && equals(this.get_11rb$(tag), value);
  };
  Tags.prototype.getBoolean_ivxn3r$ = function (tag, default_0) {
    var tmp$;
    var value = this.get_11rb$(tag);
    if (value == null) {
      tmp$ = default_0;
    } else {
      try {
        tmp$ = toBoolean(value);
      } catch (e) {
        if (Kotlin.isType(e, Exception)) {
          tmp$ = default_0;
        } else
          throw e;
      }
    }
    return tmp$;
  };
  Tags.prototype.getInt_bm4lxs$ = function (tag, default_0) {
    var tmp$;
    var value = this.get_11rb$(tag);
    if (value == null) {
      tmp$ = default_0;
    } else {
      try {
        tmp$ = toInt(value);
      } catch (e) {
        if (Kotlin.isType(e, Exception)) {
          tmp$ = default_0;
        } else
          throw e;
      }
    }
    return tmp$;
  };
  Tags.prototype.getFloat_9sobi5$ = function (tag, default_0) {
    var tmp$;
    var value = this.get_11rb$(tag);
    if (value == null) {
      tmp$ = default_0;
    } else {
      try {
        tmp$ = toDouble(value);
      } catch (e) {
        if (Kotlin.isType(e, Exception)) {
          tmp$ = default_0;
        } else
          throw e;
      }
    }
    return tmp$;
  };
  Tags.prototype.getDouble_io5o9c$ = function (tag, default_0) {
    var tmp$;
    var value = this.get_11rb$(tag);
    if (value == null) {
      tmp$ = default_0;
    } else {
      try {
        tmp$ = toDouble(value);
      } catch (e) {
        if (Kotlin.isType(e, Exception)) {
          tmp$ = default_0;
        } else
          throw e;
      }
    }
    return tmp$;
  };
  Tags.prototype.getTyped_pt3pci$ = defineInlineFunction('kool.de.fabmax.kool.scene.Tags.getTyped_pt3pci$', wrapFunction(function () {
    var Exception = Kotlin.kotlin.Exception;
    return function (tag, default_0, mapper) {
      var tmp$;
      var value = this.get_11rb$(tag);
      if (value == null) {
        tmp$ = default_0;
      } else {
        try {
          tmp$ = mapper(value);
        } catch (e) {
          if (Kotlin.isType(e, Exception)) {
            tmp$ = default_0;
          } else
            throw e;
        }
      }
      return tmp$;
    };
  }));
  Tags.prototype.toString = function () {
    var str = StringBuilder_init();
    var destination = ArrayList_init(this.size);
    var tmp$;
    tmp$ = this.entries.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0 = destination.add_11rb$;
      var k = item.key;
      var v = item.value;
      tmp$_0.call(destination, v != null ? k + '=' + toString(v) : k);
    }
    joinTo(destination, str, void 0, '[', ']');
    return str.toString();
  };
  Object.defineProperty(Tags.prototype, 'entries', {
    get: function () {
      return this.tags_0.entries;
    }
  });
  Object.defineProperty(Tags.prototype, 'keys', {
    get: function () {
      return this.tags_0.keys;
    }
  });
  Object.defineProperty(Tags.prototype, 'size', {
    get: function () {
      return this.tags_0.size;
    }
  });
  Object.defineProperty(Tags.prototype, 'values', {
    get: function () {
      return this.tags_0.values;
    }
  });
  Tags.prototype.clear = function () {
    return this.tags_0.clear();
  };
  Tags.prototype.containsKey_11rb$ = function (key) {
    return this.tags_0.containsKey_11rb$(key);
  };
  Tags.prototype.containsValue_11rc$ = function (value) {
    return this.tags_0.containsValue_11rc$(value);
  };
  Tags.prototype.get_11rb$ = function (key) {
    return this.tags_0.get_11rb$(key);
  };
  Tags.prototype.isEmpty = function () {
    return this.tags_0.isEmpty();
  };
  Tags.prototype.put_xwzc9p$ = function (key, value) {
    return this.tags_0.put_xwzc9p$(key, value);
  };
  Tags.prototype.putAll_a2k3zr$ = function (from) {
    return this.tags_0.putAll_a2k3zr$(from);
  };
  Tags.prototype.remove_11rb$ = function (key) {
    return this.tags_0.remove_11rb$(key);
  };
  Tags.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Tags',
    interfaces: [MutableMap]
  };
  function transformGroup(name, block) {
    if (name === void 0)
      name = null;
    var tg = new TransformGroup(name);
    block(tg);
    return tg;
  }
  function TransformGroup(name) {
    if (name === void 0)
      name = null;
    Group.call(this, name);
    this.transform = new Mat4d();
    this.invTransform = new Mat4d();
    this.isIdentity = false;
    this.isDirty = false;
    this.tmpTransformVec_xv9rzf$_0 = MutableVec3f_init();
    this.tmpBounds_m1h34u$_0 = new BoundingBox();
    this.setIdentity();
  }
  TransformGroup.prototype.checkInverse = function () {
    if (this.isDirty) {
      this.transform.invert_23yxad$(this.invTransform);
      this.isDirty = false;
    }};
  TransformGroup.prototype.setDirty = function () {
    this.isDirty = true;
    this.isIdentity = false;
  };
  TransformGroup.prototype.update_oco14p$ = function (renderPass, ctx) {
    Group.prototype.update_oco14p$.call(this, renderPass, ctx);
    if (!this.bounds.isEmpty && !this.isIdentity) {
      this.tmpBounds_m1h34u$_0.clear();
      this.tmpBounds_m1h34u$_0.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_xv9rzf$_0.set_y2kzbl$(this.bounds.min.x, this.bounds.min.y, this.bounds.min.z), 1.0));
      this.tmpBounds_m1h34u$_0.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_xv9rzf$_0.set_y2kzbl$(this.bounds.min.x, this.bounds.min.y, this.bounds.max.z), 1.0));
      this.tmpBounds_m1h34u$_0.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_xv9rzf$_0.set_y2kzbl$(this.bounds.min.x, this.bounds.max.y, this.bounds.min.z), 1.0));
      this.tmpBounds_m1h34u$_0.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_xv9rzf$_0.set_y2kzbl$(this.bounds.min.x, this.bounds.max.y, this.bounds.max.z), 1.0));
      this.tmpBounds_m1h34u$_0.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_xv9rzf$_0.set_y2kzbl$(this.bounds.max.x, this.bounds.min.y, this.bounds.min.z), 1.0));
      this.tmpBounds_m1h34u$_0.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_xv9rzf$_0.set_y2kzbl$(this.bounds.max.x, this.bounds.min.y, this.bounds.max.z), 1.0));
      this.tmpBounds_m1h34u$_0.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_xv9rzf$_0.set_y2kzbl$(this.bounds.max.x, this.bounds.max.y, this.bounds.min.z), 1.0));
      this.tmpBounds_m1h34u$_0.add_czzhiu$(this.transform.transform_w1lst9$(this.tmpTransformVec_xv9rzf$_0.set_y2kzbl$(this.bounds.max.x, this.bounds.max.y, this.bounds.max.z), 1.0));
      this.bounds.set_ea4od8$(this.tmpBounds_m1h34u$_0);
    }};
  TransformGroup.prototype.updateModelMat_oco14p$ = function (renderPass, ctx) {
    Group.prototype.updateModelMat_oco14p$.call(this, renderPass, ctx);
    this.modelMat.mul_d4zu6l$(this.transform);
  };
  TransformGroup.prototype.rayTest_jljx4v$ = function (test) {
    if (!this.isIdentity) {
      this.checkInverse();
      test.transformBy_d4zu6l$(this.invTransform);
    }Group.prototype.rayTest_jljx4v$.call(this, test);
    if (!this.isIdentity) {
      test.transformBy_d4zu6l$(this.transform);
    }};
  TransformGroup.prototype.getTransform_d4zu6j$ = function (result) {
    return result.set_d4zu6l$(this.transform);
  };
  TransformGroup.prototype.getInverseTransform_d4zu6j$ = function (result) {
    this.checkInverse();
    return result.set_d4zu6l$(this.invTransform);
  };
  TransformGroup.prototype.translate_czzhiu$ = function (t) {
    return this.translate_y2kzbl$(t.x, t.y, t.z);
  };
  TransformGroup.prototype.translate_y2kzbl$ = function (tx, ty, tz) {
    return this.translate_yvo9jy$(tx, ty, tz);
  };
  TransformGroup.prototype.translate_czzhiw$ = function (t) {
    return this.translate_yvo9jy$(t.x, t.y, t.z);
  };
  TransformGroup.prototype.translate_yvo9jy$ = function (tx, ty, tz) {
    this.transform.translate_yvo9jy$(tx, ty, tz);
    this.setDirty();
    return this;
  };
  TransformGroup.prototype.rotate_ad55pp$ = function (angleDeg, axis) {
    return this.rotate_7b5o5w$(angleDeg, axis.x, axis.y, axis.z);
  };
  TransformGroup.prototype.rotate_7b5o5w$ = function (angleDeg, axX, axY, axZ) {
    return this.rotate_6y0v78$(angleDeg, axX, axY, axZ);
  };
  TransformGroup.prototype.rotate_5820x2$ = function (angleDeg, axis) {
    return this.rotate_6y0v78$(angleDeg, axis.x, axis.y, axis.z);
  };
  TransformGroup.prototype.rotate_6y0v78$ = function (angleDeg, axX, axY, axZ) {
    this.transform.rotate_6y0v78$(angleDeg, axX, axY, axZ);
    this.setDirty();
    return this;
  };
  TransformGroup.prototype.scale_y2kzbl$ = function (sx, sy, sz) {
    return this.scale_yvo9jy$(sx, sy, sz);
  };
  TransformGroup.prototype.scale_yvo9jy$ = function (sx, sy, sz) {
    this.transform.scale_yvo9jy$(sx, sy, sz);
    this.setDirty();
    return this;
  };
  TransformGroup.prototype.mul_d4zu6l$ = function (mat) {
    this.transform.mul_d4zu6l$(mat);
    this.setDirty();
    return this;
  };
  TransformGroup.prototype.set_d4zu6j$ = function (mat) {
    this.transform.set_d4zu6j$(mat);
    this.setDirty();
    return this;
  };
  TransformGroup.prototype.set_d4zu6l$ = function (mat) {
    this.transform.set_d4zu6l$(mat);
    this.setDirty();
    return this;
  };
  TransformGroup.prototype.setIdentity = function () {
    this.transform.setIdentity();
    this.invTransform.setIdentity();
    this.isDirty = false;
    this.isIdentity = true;
    return this;
  };
  TransformGroup.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TransformGroup',
    interfaces: [Group]
  };
  function Button(name, root) {
    Label.call(this, name, root);
    this.onClick = ArrayList_init_0();
    this.textColorHovered = new ThemeOrCustomProp(Color$Companion_getInstance().WHITE);
    this.isPressed_xi0anj$_0 = false;
    this.isHovered_k6sd62$_0 = false;
    this.ptrDownPos = MutableVec2f_init();
    this.textAlignment = new Gravity(Alignment$CENTER_getInstance(), Alignment$CENTER_getInstance());
    this.onHoverEnter.add_11rb$(Button_init$lambda(this));
    this.onHoverExit.add_11rb$(Button_init$lambda_0(this));
    this.onHover.add_11rb$(Button_init$lambda_1(this));
  }
  Object.defineProperty(Button.prototype, 'isPressed', {
    get: function () {
      return this.isPressed_xi0anj$_0;
    },
    set: function (isPressed) {
      this.isPressed_xi0anj$_0 = isPressed;
    }
  });
  Object.defineProperty(Button.prototype, 'isHovered', {
    get: function () {
      return this.isHovered_k6sd62$_0;
    },
    set: function (isHovered) {
      this.isHovered_k6sd62$_0 = isHovered;
    }
  });
  Button.prototype.fireOnClick_kjsf19$ = function (ptr, rt, ctx) {
    var tmp$;
    tmp$ = this.onClick;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.onClick.get_za3lpa$(i)(this, ptr, rt, ctx);
    }
  };
  Button.prototype.setThemeProps_aemszp$ = function (ctx) {
    Label.prototype.setThemeProps_aemszp$.call(this, ctx);
    this.textColorHovered.setTheme_11rb$(this.root.theme.accentColor);
  };
  Button.prototype.createThemeUi_aemszp$ = function (ctx) {
    return this.root.theme.newButtonUi_t4rm0v$(this);
  };
  function Button_init$lambda(this$Button) {
    return function ($receiver, f, f_0, f_1) {
      this$Button.isHovered = true;
      return Unit;
    };
  }
  function Button_init$lambda_0(this$Button) {
    return function ($receiver, f, f_0, f_1) {
      this$Button.isHovered = false;
      this$Button.isPressed = false;
      return Unit;
    };
  }
  function Button_init$lambda_1(this$Button) {
    return function ($receiver, ptr, rt, ctx) {
      if (ptr.isLeftButtonEvent) {
        if (ptr.isLeftButtonDown) {
          this$Button.ptrDownPos.set_dleff0$(rt.hitPositionLocal.x - this$Button.componentBounds.min.x, rt.hitPositionLocal.y - this$Button.componentBounds.min.y);
          this$Button.isPressed = true;
        } else if (this$Button.isPressed) {
          this$Button.isPressed = false;
          this$Button.ptrDownPos.x = this$Button.ptrDownPos.x - (rt.hitPositionLocal.x - this$Button.componentBounds.min.x);
          this$Button.ptrDownPos.y = this$Button.ptrDownPos.y - (rt.hitPositionLocal.y - this$Button.componentBounds.min.y);
          if (this$Button.ptrDownPos.length() < dp_0(this$Button, 5.0)) {
            this$Button.fireOnClick_kjsf19$(ptr, rt, ctx);
          }}}return Unit;
    };
  }
  Button.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Button',
    interfaces: [Label]
  };
  function ButtonUi(button, baseUi) {
    LabelUi.call(this, button, baseUi);
    this.button = button;
    this.hoverAnimator = new LinearAnimator(new InterpolatedFloat(0.0, 1.0));
    this.colorWeightStd = 1.0;
    this.colorWeightHovered = 0.0;
    this.hoverEnterListener = ButtonUi$hoverEnterListener$lambda(this);
    this.hoverExitListener = ButtonUi$hoverExitListener$lambda(this);
  }
  function ButtonUi$createUi$lambda(this$ButtonUi) {
    return function (v) {
      this$ButtonUi.colorWeightHovered = v;
      this$ButtonUi.colorWeightStd = 1.0 - v;
      this$ButtonUi.button.requestUiUpdate();
      return Unit;
    };
  }
  ButtonUi.prototype.createUi_aemszp$ = function (ctx) {
    LabelUi.prototype.createUi_aemszp$.call(this, ctx);
    this.hoverAnimator.speed = 0.0;
    this.hoverAnimator.value.onUpdate = ButtonUi$createUi$lambda(this);
    var $receiver = this.button.onHoverEnter;
    var element = this.hoverEnterListener;
    $receiver.add_11rb$(element);
    var $receiver_0 = this.button.onHoverExit;
    var element_0 = this.hoverExitListener;
    $receiver_0.add_11rb$(element_0);
  };
  ButtonUi.prototype.updateTextColor = function () {
    this.textColor.clear();
    this.textColor.add_y83vuj$(this.button.textColor.apply(), this.colorWeightStd);
    this.textColor.add_y83vuj$(this.button.textColorHovered.apply(), this.colorWeightHovered);
  };
  ButtonUi.prototype.dispose_aemszp$ = function (ctx) {
    LabelUi.prototype.dispose_aemszp$.call(this, ctx);
    var $receiver = this.button.onHoverEnter;
    var element = this.hoverEnterListener;
    $receiver.remove_11rb$(element);
    var $receiver_0 = this.button.onHoverExit;
    var element_0 = this.hoverExitListener;
    $receiver_0.remove_11rb$(element_0);
  };
  ButtonUi.prototype.onRender_aemszp$ = function (ctx) {
    LabelUi.prototype.onRender_aemszp$.call(this, ctx);
    this.hoverAnimator.tick_aemszp$(ctx);
  };
  function ButtonUi$hoverEnterListener$lambda(this$ButtonUi) {
    return function ($receiver, f, f_0, f_1) {
      this$ButtonUi.hoverAnimator.duration = 0.1;
      this$ButtonUi.hoverAnimator.speed = 1.0;
      return Unit;
    };
  }
  function ButtonUi$hoverExitListener$lambda(this$ButtonUi) {
    return function ($receiver, f, f_0, f_1) {
      this$ButtonUi.hoverAnimator.duration = 0.2;
      this$ButtonUi.hoverAnimator.speed = -1.0;
      return Unit;
    };
  }
  ButtonUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ButtonUi',
    interfaces: [LabelUi]
  };
  function ComponentUi() {
  }
  ComponentUi.prototype.updateComponentAlpha = function () {
  };
  ComponentUi.prototype.createUi_aemszp$ = function (ctx) {
  };
  ComponentUi.prototype.updateUi_aemszp$ = function (ctx) {
  };
  ComponentUi.prototype.onRender_aemszp$ = function (ctx) {
  };
  ComponentUi.prototype.dispose_aemszp$ = function (ctx) {
  };
  ComponentUi.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ComponentUi',
    interfaces: [Disposable]
  };
  function BlankComponentUi() {
  }
  BlankComponentUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlankComponentUi',
    interfaces: [ComponentUi]
  };
  function SimpleComponentUi(component) {
    this.component = component;
    this.geometry = new IndexedVertexList(UiShader$Companion_getInstance().UI_MESH_ATTRIBS);
    this.meshBuilder = new MeshBuilder(this.geometry);
    this.mesh = new Mesh(this.geometry);
    this.shader = new UiShader();
    this.color = new ThemeOrCustomProp(Color$Companion_getInstance().BLACK.withAlpha_mx4ult$(0.5));
  }
  SimpleComponentUi.prototype.updateComponentAlpha = function () {
    this.shader.alpha = this.component.alpha;
  };
  SimpleComponentUi.prototype.createUi_aemszp$ = function (ctx) {
    this.color.setTheme_11rb$(this.component.root.theme.backgroundColor).apply();
    this.mesh.pipelineLoader = this.shader;
    this.component.addNode_xtids1$(this.mesh, 0);
  };
  SimpleComponentUi.prototype.dispose_aemszp$ = function (ctx) {
    this.component.minusAssign_f1kmr1$(this.mesh);
    this.mesh.dispose_aemszp$(ctx);
  };
  SimpleComponentUi.prototype.updateUi_aemszp$ = function (ctx) {
    this.color.setTheme_11rb$(this.component.root.theme.backgroundColor).apply();
    this.component.setupBuilder_84rojv$(this.meshBuilder);
    this.meshBuilder.color = this.color.prop;
    var $this = this.meshBuilder;
    var $receiver = $this.rectProps.defaults();
    $receiver.size.set_dleff0$(this.component.width, this.component.height);
    $receiver.zeroTexCoords();
    $this.rect_e5k3t5$($this.rectProps);
  };
  SimpleComponentUi.prototype.onRender_aemszp$ = function (ctx) {
  };
  SimpleComponentUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SimpleComponentUi',
    interfaces: [ComponentUi]
  };
  function BlurredComponentUi(component) {
    SimpleComponentUi.call(this, component);
  }
  BlurredComponentUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlurredComponentUi',
    interfaces: [SimpleComponentUi]
  };
  function DrawerMenu(width, title, name, root) {
    UiContainer.call(this, name, root);
    this.menuAnimator_0 = new CosAnimator(new InterpolatedFloat(0.0, 1.0));
    this.menuButton_8be2vx$_2ldp8u$_0 = this.menuButton_8be2vx$_2ldp8u$_0;
    this.menuAnimator_0.duration = 0.25;
    this.menuAnimator_0.speed = -1.0;
    this.menuAnimator_0.value.onUpdate = DrawerMenu_init$lambda(this);
    this.layoutSpec.setOrigin_4ujscr$(zero(), zero(), zero());
    this.layoutSpec.setSize_4ujscr$(width, pcs(100.0, true), full());
    this.alpha = 0.0;
    if (title != null) {
      this.unaryPlus_uv0sim$(root.label_tokfmu$('title', DrawerMenu_init$lambda$lambda$lambda(title, root)));
      this.unaryPlus_uv0sim$(root.component_qphi6d$('divider', DrawerMenu_init$lambda$lambda$lambda_0(root)));
    }root.toggleButton_6j87po$(name + '-menuButton', DrawerMenu_init$lambda$lambda(this));
  }
  Object.defineProperty(DrawerMenu.prototype, 'menuButton_8be2vx$', {
    get: function () {
      if (this.menuButton_8be2vx$_2ldp8u$_0 == null)
        return throwUPAE('menuButton');
      return this.menuButton_8be2vx$_2ldp8u$_0;
    },
    set: function (menuButton) {
      this.menuButton_8be2vx$_2ldp8u$_0 = menuButton;
    }
  });
  Object.defineProperty(DrawerMenu.prototype, 'isOpen', {
    get: function () {
      return this.menuButton_8be2vx$.isEnabled;
    },
    set: function (value) {
      this.menuButton_8be2vx$.isEnabled = value;
    }
  });
  Object.defineProperty(DrawerMenu.prototype, 'animationPos', {
    get: function () {
      return this.menuAnimator_0.value.value;
    }
  });
  function DrawerMenu$MenuButtonUi($outer, tb) {
    this.$outer = $outer;
    ToggleButtonUi.call(this, tb, new BlankComponentUi());
  }
  function DrawerMenu$MenuButtonUi$createUi$lambda(this$MenuButtonUi, this$DrawerMenu) {
    return function ($receiver) {
      this$DrawerMenu.menuAnimator_0.speed = this$MenuButtonUi.tb.isEnabled ? 1.0 : -1.0;
      return Unit;
    };
  }
  DrawerMenu$MenuButtonUi.prototype.createUi_aemszp$ = function (ctx) {
    ToggleButtonUi.prototype.createUi_aemszp$.call(this, ctx);
    this.knobAnimator.duration = 0.5;
    this.knobAnimator.value.onUpdate;
    var $receiver = this.tb.onStateChange;
    var element = DrawerMenu$MenuButtonUi$createUi$lambda(this, this.$outer);
    $receiver.add_11rb$(element);
    this.mesh.pipelineLoader = new UiShader();
  };
  DrawerMenu$MenuButtonUi.prototype.onRender_aemszp$ = function (ctx) {
    ToggleButtonUi.prototype.onRender_aemszp$.call(this, ctx);
    this.$outer.menuAnimator_0.tick_aemszp$(ctx);
  };
  DrawerMenu$MenuButtonUi.prototype.updateUi_aemszp$ = function (ctx) {
    var hw = this.tb.width * 0.5;
    var hh = this.tb.height * 0.18;
    var hx = -hw / 2.0;
    var ph = dp_0(this.tb, 2.5);
    this.updateTextColor();
    this.tb.setupBuilder_84rojv$(this.meshBuilder);
    var $receiver = this.meshBuilder;
    $receiver.color = new Color(0.0, 0.0, 0.0, 0.0);
    var $receiver_0 = $receiver.circleProps.defaults();
    var a = this.tb.width;
    var b = this.tb.height;
    $receiver_0.radius = Math_0.min(a, b) / 2.0;
    $receiver_0.center.set_y2kzbl$(this.tb.width / 2.0, this.tb.height / 2.0, -4.0);
    $receiver_0.steps = 30;
    $receiver.circle_59f34t$($receiver.circleProps);
    var tx = this.knobAnimator.value.value * -hw * 0.1;
    var w = hw - this.knobAnimator.value.value * hw * 0.4;
    $receiver.color = this.textColor;
    $receiver.translate_y2kzbl$(this.tb.width / 2.0, this.tb.height / 2.0, 0.0);
    $receiver.rotate_ad55pp$(180.0 - this.knobAnimator.value.value * 180.0, Vec3f$Companion_getInstance().Z_AXIS);
    $receiver.transform.push();
    $receiver.translate_y2kzbl$(tx, hh, 0.0);
    $receiver.rotate_ad55pp$(this.knobAnimator.value.value * 45.0, Vec3f$Companion_getInstance().Z_AXIS);
    var $receiver_1 = $receiver.rectProps.defaults();
    $receiver_1.origin.set_y2kzbl$(hx, -ph / 2.0, 0.0);
    $receiver_1.size.set_dleff0$(w, ph);
    $receiver_1.zeroTexCoords();
    $receiver.rect_e5k3t5$($receiver.rectProps);
    $receiver.transform.pop();
    var $receiver_2 = $receiver.rectProps.defaults();
    $receiver_2.origin.set_y2kzbl$(hx, -ph / 2.0, 0.0);
    $receiver_2.size.set_dleff0$(hw, ph);
    $receiver.rect_e5k3t5$($receiver.rectProps);
    $receiver.transform.push();
    $receiver.translate_y2kzbl$(tx, -hh, 0.0);
    $receiver.rotate_ad55pp$(this.knobAnimator.value.value * -45.0, Vec3f$Companion_getInstance().Z_AXIS);
    var $receiver_3 = $receiver.rectProps.defaults();
    $receiver_3.origin.set_y2kzbl$(hx, -ph / 2.0, 0.0);
    $receiver_3.size.set_dleff0$(w, ph);
    $receiver.rect_e5k3t5$($receiver.rectProps);
    $receiver.transform.pop();
  };
  DrawerMenu$MenuButtonUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MenuButtonUi',
    interfaces: [ToggleButtonUi]
  };
  function DrawerMenu_init$lambda(this$DrawerMenu) {
    return function (v) {
      this$DrawerMenu.setScrollOffset_y2kzbl$(dp_0(this$DrawerMenu, 40.0) * (1.0 - v), 0.0, 0.0);
      this$DrawerMenu.alpha = v;
      return Unit;
    };
  }
  function DrawerMenu_init$lambda$lambda$lambda$lambda(closure$initFont, this$) {
    return function ($receiver, f, ctx) {
      if (closure$initFont.v) {
        closure$initFont.v = false;
        this$.font.setCustom_11rb$(titleFont(this$, ctx));
      }return Unit;
    };
  }
  function DrawerMenu_init$lambda$lambda$lambda(closure$title, this$) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(-50.0, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(pcs(100.0, true), dps(40.0, true), full());
      $receiver.textAlignment = new Gravity(Alignment$CENTER_getInstance(), Alignment$CENTER_getInstance());
      $receiver.text = closure$title;
      $receiver.textColor.setCustom_11rb$(this$.theme.accentColor);
      var initFont = {v: true};
      $receiver.onUpdate.add_11rb$(DrawerMenu_init$lambda$lambda$lambda$lambda(initFont, $receiver));
      return Unit;
    };
  }
  function DrawerMenu_init$lambda$lambda$lambda_0(this$) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(pcs(5.0), dps(-58.0, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(pcs(90.0), dps(1.0, true), full());
      var bg = new SimpleComponentUi($receiver);
      bg.color.setCustom_11rb$(this$.theme.accentColor);
      $receiver.ui.setCustom_11rb$(bg);
      return Unit;
    };
  }
  function DrawerMenu_init$lambda$lambda(this$DrawerMenu) {
    return function ($receiver) {
      this$DrawerMenu.menuButton_8be2vx$ = $receiver;
      $receiver.ui.setCustom_11rb$(new DrawerMenu$MenuButtonUi(this$DrawerMenu, $receiver));
      $receiver.layoutSpec.setOrigin_4ujscr$(dps(10.0, true), dps(-50.0, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(40.0, true), dps(40.0, true), full());
      return Unit;
    };
  }
  DrawerMenu.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DrawerMenu',
    interfaces: [UiContainer]
  };
  function Label(name, root) {
    UiComponent.call(this, name, root);
    this.text_qvo458$_0 = name;
    this.textAlignment_ux8xbn$_0 = new Gravity(Alignment$START_getInstance(), Alignment$CENTER_getInstance());
    this.font = new ThemeOrCustomProp(null);
    this.textColor = new ThemeOrCustomProp(Color$Companion_getInstance().WHITE);
  }
  Object.defineProperty(Label.prototype, 'text', {
    get: function () {
      return this.text_qvo458$_0;
    },
    set: function (value) {
      if (!equals(value, this.text_qvo458$_0)) {
        this.text_qvo458$_0 = value;
        this.requestUiUpdate();
      }}
  });
  Object.defineProperty(Label.prototype, 'textAlignment', {
    get: function () {
      return this.textAlignment_ux8xbn$_0;
    },
    set: function (value) {
      if (!(value != null ? value.equals(this.textAlignment_ux8xbn$_0) : null)) {
        this.textAlignment_ux8xbn$_0 = value;
        this.requestUiUpdate();
      }}
  });
  Label.prototype.setThemeProps_aemszp$ = function (ctx) {
    UiComponent.prototype.setThemeProps_aemszp$.call(this, ctx);
    this.font.setTheme_11rb$(standardFont(this, ctx));
    this.textColor.setTheme_11rb$(this.root.theme.foregroundColor);
  };
  Label.prototype.createThemeUi_aemszp$ = function (ctx) {
    return this.root.theme.newLabelUi_wviu0r$(this);
  };
  Label.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Label',
    interfaces: [UiComponent]
  };
  function LabelUi(label, baseUi) {
    this.label = label;
    this.baseUi_tctiu8$_0 = baseUi;
    this.font = this.label.font.prop;
    this.textColor = MutableColor_init();
    this.geom = new IndexedVertexList(UiShader$Companion_getInstance().UI_MESH_ATTRIBS);
    this.meshBuilder = new MeshBuilder(this.geom);
    this.mesh = new Mesh(this.geom);
    this.shader = new UiShader();
    this.textStartX = 0.0;
    this.textWidth = 0.0;
    this.textBaseline = 0.0;
  }
  LabelUi.prototype.updateComponentAlpha = function () {
    this.baseUi_tctiu8$_0.updateComponentAlpha();
    this.shader.alpha = this.label.alpha;
  };
  LabelUi.prototype.createUi_aemszp$ = function (ctx) {
    this.baseUi_tctiu8$_0.createUi_aemszp$(ctx);
    this.mesh.pipelineLoader = this.shader;
    this.label.plusAssign_f1kmr1$(this.mesh);
  };
  LabelUi.prototype.updateUi_aemszp$ = function (ctx) {
    this.baseUi_tctiu8$_0.updateUi_aemszp$(ctx);
    if (!this.label.font.isUpdate && this.label.font.prop == null) {
      this.label.font.setCustom_11rb$(Font$Companion_getInstance().defaultFont_aemszp$(ctx));
    }if (this.label.font.isUpdate) {
      this.font = this.label.font.apply();
      this.shader.font = this.font;
    }this.label.setupBuilder_84rojv$(this.meshBuilder);
    this.updateTextColor();
    this.computeTextMetrics();
    this.renderText_aemszp$(ctx);
  };
  LabelUi.prototype.onRender_aemszp$ = function (ctx) {
    this.baseUi_tctiu8$_0.onRender_aemszp$(ctx);
  };
  LabelUi.prototype.dispose_aemszp$ = function (ctx) {
    this.baseUi_tctiu8$_0.dispose_aemszp$(ctx);
    this.label.minusAssign_f1kmr1$(this.mesh);
    this.mesh.dispose_aemszp$(ctx);
  };
  LabelUi.prototype.computeTextMetrics = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    this.textWidth = (tmp$_0 = (tmp$ = this.font) != null ? tmp$.textWidth_61zpoe$(this.label.text) : null) != null ? tmp$_0 : 0.0;
    switch (this.label.textAlignment.xAlignment.name) {
      case 'START':
        tmp$_1 = this.label.padding.left.toUnits_dleff0$(this.label.width, this.label.dpi);
        break;
      case 'CENTER':
        tmp$_1 = (this.label.width - this.textWidth) / 2.0;
        break;
      case 'END':
        tmp$_1 = this.label.width - this.textWidth - this.label.padding.right.toUnits_dleff0$(this.label.width, this.label.dpi);
        break;
      default:tmp$_1 = Kotlin.noWhenBranchMatched();
        break;
    }
    this.textStartX = tmp$_1;
    switch (this.label.textAlignment.yAlignment.name) {
      case 'START':
        tmp$_6 = this.label.height - this.label.padding.top.toUnits_dleff0$(this.label.width, this.label.dpi) - ((tmp$_3 = (tmp$_2 = this.font) != null ? tmp$_2.normHeight : null) != null ? tmp$_3 : 0.0);
        break;
      case 'CENTER':
        tmp$_6 = (this.label.height - ((tmp$_5 = (tmp$_4 = this.font) != null ? tmp$_4.normHeight : null) != null ? tmp$_5 : 0.0)) / 2.0;
        break;
      case 'END':
        tmp$_6 = this.label.padding.bottom.toUnits_dleff0$(this.label.height, this.label.dpi);
        break;
      default:tmp$_6 = Kotlin.noWhenBranchMatched();
        break;
    }
    this.textBaseline = tmp$_6;
  };
  LabelUi.prototype.renderText_aemszp$ = function (ctx) {
    this.meshBuilder.color = this.textColor;
    var fnt = this.font;
    if (fnt != null) {
      var $this = this.meshBuilder;
      var tmp$;
      var tmp$_0;
      if ((tmp$ = $this.textProps) != null)
        tmp$_0 = tmp$;
      else {
        var $receiver = new TextProps(fnt);
        $this.textProps = $receiver;
        tmp$_0 = $receiver;
      }
      var props = tmp$_0;
      props.defaults();
      props.font = fnt;
      props.origin.set_y2kzbl$(this.textStartX, this.textBaseline, dp_0(this.label, 0.1));
      props.text = this.label.text;
      $this.text_s8z339$(props, 0.0);
    }};
  LabelUi.prototype.updateTextColor = function () {
    this.textColor.set_d7aj7k$(this.label.textColor.apply());
  };
  LabelUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LabelUi',
    interfaces: [ComponentUi]
  };
  function LayoutSpec() {
    this.width = uns(0.0);
    this.height = uns(0.0);
    this.depth = uns(0.0);
    this.x = uns(0.0);
    this.y = uns(0.0);
    this.z = uns(0.0);
  }
  LayoutSpec.prototype.setOrigin_4ujscr$ = function (x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
  };
  LayoutSpec.prototype.setSize_4ujscr$ = function (width, height, depth) {
    this.width = width;
    this.height = height;
    this.depth = depth;
  };
  LayoutSpec.prototype.set_m6ih2k$ = function (other) {
    this.width = other.width;
    this.height = other.height;
    this.depth = other.depth;
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
  };
  LayoutSpec.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LayoutSpec',
    interfaces: []
  };
  function SizeUnit(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function SizeUnit_initFields() {
    SizeUnit_initFields = function () {
    };
    SizeUnit$UN_instance = new SizeUnit('UN', 0);
    SizeUnit$DP_instance = new SizeUnit('DP', 1);
    SizeUnit$MM_instance = new SizeUnit('MM', 2);
    SizeUnit$PC_instance = new SizeUnit('PC', 3);
  }
  var SizeUnit$UN_instance;
  function SizeUnit$UN_getInstance() {
    SizeUnit_initFields();
    return SizeUnit$UN_instance;
  }
  var SizeUnit$DP_instance;
  function SizeUnit$DP_getInstance() {
    SizeUnit_initFields();
    return SizeUnit$DP_instance;
  }
  var SizeUnit$MM_instance;
  function SizeUnit$MM_getInstance() {
    SizeUnit_initFields();
    return SizeUnit$MM_instance;
  }
  var SizeUnit$PC_instance;
  function SizeUnit$PC_getInstance() {
    SizeUnit_initFields();
    return SizeUnit$PC_instance;
  }
  SizeUnit.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SizeUnit',
    interfaces: [Enum]
  };
  function SizeUnit$values() {
    return [SizeUnit$UN_getInstance(), SizeUnit$DP_getInstance(), SizeUnit$MM_getInstance(), SizeUnit$PC_getInstance()];
  }
  SizeUnit.values = SizeUnit$values;
  function SizeUnit$valueOf(name) {
    switch (name) {
      case 'UN':
        return SizeUnit$UN_getInstance();
      case 'DP':
        return SizeUnit$DP_getInstance();
      case 'MM':
        return SizeUnit$MM_getInstance();
      case 'PC':
        return SizeUnit$PC_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.scene.ui.SizeUnit.' + name);
    }
  }
  SizeUnit.valueOf_61zpoe$ = SizeUnit$valueOf;
  function zero() {
    return new SizeSpec(0.0, SizeUnit$UN_getInstance());
  }
  function full() {
    return new SizeSpec(100.0, SizeUnit$PC_getInstance());
  }
  function uns(value, roundToUnit) {
    if (roundToUnit === void 0)
      roundToUnit = true;
    return new SizeSpec(value, SizeUnit$UN_getInstance(), roundToUnit);
  }
  function dps(value, roundToUnit) {
    if (roundToUnit === void 0)
      roundToUnit = true;
    return new SizeSpec(value, SizeUnit$DP_getInstance(), roundToUnit);
  }
  function mms(value, roundToUnit) {
    if (roundToUnit === void 0)
      roundToUnit = true;
    return new SizeSpec(value, SizeUnit$MM_getInstance(), roundToUnit);
  }
  function pcs(value, roundToUnit) {
    if (roundToUnit === void 0)
      roundToUnit = true;
    return new SizeSpec(value, SizeUnit$PC_getInstance(), roundToUnit);
  }
  function pc(pc, size) {
    return size * pc / 100.0;
  }
  function dp(dp, dpi) {
    return dp * dpi / 96.0;
  }
  function mm(mm, dpi) {
    return mm * dpi / 25.4;
  }
  function pcW($receiver, pc_0) {
    return pc(pc_0, $receiver.width);
  }
  function pcH($receiver, pc_0) {
    return pc(pc_0, $receiver.height);
  }
  function pcD($receiver, pc_0) {
    return pc(pc_0, $receiver.depth);
  }
  function dp_0($receiver, pc) {
    return dp(pc, $receiver.dpi);
  }
  function mm_0($receiver, pc) {
    return mm(pc, $receiver.dpi);
  }
  function pcR(pc, size) {
    return round(size * pc / 100.0);
  }
  function dpR(dp, dpi) {
    return round(dp * dpi / 96.0);
  }
  function mmR(mm, dpi) {
    return round(mm * dpi / 25.4);
  }
  function pcWR($receiver, pc) {
    return pcR(pc, $receiver.width);
  }
  function pcHR($receiver, pc) {
    return pcR(pc, $receiver.height);
  }
  function pcDR($receiver, pc) {
    return pcR(pc, $receiver.depth);
  }
  function dpR_0($receiver, pc) {
    return dpR(pc, $receiver.dpi);
  }
  function mmR_0($receiver, pc) {
    return mmR(pc, $receiver.dpi);
  }
  function SizeSpec(value, unit, roundToUnit) {
    if (roundToUnit === void 0)
      roundToUnit = true;
    this.value = value;
    this.unit = unit;
    this.roundToUnit = roundToUnit;
  }
  SizeSpec.prototype.toUnits_dleff0$ = function (size, dpi) {
    var tmp$;
    if (this.roundToUnit) {
      switch (this.unit.name) {
        case 'UN':
          tmp$ = round(this.value);
          break;
        case 'DP':
          tmp$ = dpR(this.value, dpi);
          break;
        case 'MM':
          tmp$ = mmR(this.value, dpi);
          break;
        case 'PC':
          tmp$ = pcR(this.value, size);
          break;
        default:tmp$ = Kotlin.noWhenBranchMatched();
          break;
      }
    } else {
      switch (this.unit.name) {
        case 'UN':
          tmp$ = this.value;
          break;
        case 'DP':
          tmp$ = dp(this.value, dpi);
          break;
        case 'MM':
          tmp$ = mm(this.value, dpi);
          break;
        case 'PC':
          tmp$ = pc(this.value, size);
          break;
        default:tmp$ = Kotlin.noWhenBranchMatched();
          break;
      }
    }
    return tmp$;
  };
  SizeSpec.prototype.plus_m986jv$ = function (size) {
    return new CombSizeSpec(this, size, true);
  };
  SizeSpec.prototype.minus_m986jv$ = function (size) {
    return new CombSizeSpec(this, size, false);
  };
  SizeSpec.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!Kotlin.isType(other, SizeSpec))
      return false;
    if (this.value !== other.value)
      return false;
    if (this.unit !== other.unit)
      return false;
    if (this.roundToUnit !== other.roundToUnit)
      return false;
    return true;
  };
  SizeSpec.prototype.hashCode = function () {
    var result = hashCode(this.value);
    result = (31 * result | 0) + this.unit.hashCode() | 0;
    result = (31 * result | 0) + hashCode(this.roundToUnit) | 0;
    return result;
  };
  SizeSpec.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SizeSpec',
    interfaces: []
  };
  function CombSizeSpec(left, right, add) {
    SizeSpec.call(this, 0.0, SizeUnit$UN_getInstance());
    this.left = left;
    this.right = right;
    this.add = add;
  }
  CombSizeSpec.prototype.toUnits_dleff0$ = function (size, dpi) {
    var leftUns = this.left.toUnits_dleff0$(size, dpi);
    var rightUns = this.right.toUnits_dleff0$(size, dpi);
    if (this.add) {
      return leftUns + rightUns;
    } else {
      return leftUns - rightUns;
    }
  };
  CombSizeSpec.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CombSizeSpec',
    interfaces: [SizeSpec]
  };
  function Margin(top, bottom, left, right) {
    this.top = top;
    this.bottom = bottom;
    this.left = left;
    this.right = right;
  }
  Margin.prototype.set_m986jv$ = function (all) {
    this.set_107250$(all, all, all, all);
  };
  Margin.prototype.set_107250$ = function (top, bottom, left, right) {
    this.top = top;
    this.bottom = bottom;
    this.left = left;
    this.right = right;
  };
  Margin.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Margin',
    interfaces: []
  };
  Margin.prototype.component1 = function () {
    return this.top;
  };
  Margin.prototype.component2 = function () {
    return this.bottom;
  };
  Margin.prototype.component3 = function () {
    return this.left;
  };
  Margin.prototype.component4 = function () {
    return this.right;
  };
  Margin.prototype.copy_107250$ = function (top, bottom, left, right) {
    return new Margin(top === void 0 ? this.top : top, bottom === void 0 ? this.bottom : bottom, left === void 0 ? this.left : left, right === void 0 ? this.right : right);
  };
  Margin.prototype.toString = function () {
    return 'Margin(top=' + Kotlin.toString(this.top) + (', bottom=' + Kotlin.toString(this.bottom)) + (', left=' + Kotlin.toString(this.left)) + (', right=' + Kotlin.toString(this.right)) + ')';
  };
  Margin.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.top) | 0;
    result = result * 31 + Kotlin.hashCode(this.bottom) | 0;
    result = result * 31 + Kotlin.hashCode(this.left) | 0;
    result = result * 31 + Kotlin.hashCode(this.right) | 0;
    return result;
  };
  Margin.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.top, other.top) && Kotlin.equals(this.bottom, other.bottom) && Kotlin.equals(this.left, other.left) && Kotlin.equals(this.right, other.right)))));
  };
  function Gravity(xAlignment, yAlignment) {
    this.xAlignment = xAlignment;
    this.yAlignment = yAlignment;
  }
  Gravity.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Gravity',
    interfaces: []
  };
  Gravity.prototype.component1 = function () {
    return this.xAlignment;
  };
  Gravity.prototype.component2 = function () {
    return this.yAlignment;
  };
  Gravity.prototype.copy_9pkgn0$ = function (xAlignment, yAlignment) {
    return new Gravity(xAlignment === void 0 ? this.xAlignment : xAlignment, yAlignment === void 0 ? this.yAlignment : yAlignment);
  };
  Gravity.prototype.toString = function () {
    return 'Gravity(xAlignment=' + Kotlin.toString(this.xAlignment) + (', yAlignment=' + Kotlin.toString(this.yAlignment)) + ')';
  };
  Gravity.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.xAlignment) | 0;
    result = result * 31 + Kotlin.hashCode(this.yAlignment) | 0;
    return result;
  };
  Gravity.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.xAlignment, other.xAlignment) && Kotlin.equals(this.yAlignment, other.yAlignment)))));
  };
  function Alignment(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Alignment_initFields() {
    Alignment_initFields = function () {
    };
    Alignment$START_instance = new Alignment('START', 0);
    Alignment$CENTER_instance = new Alignment('CENTER', 1);
    Alignment$END_instance = new Alignment('END', 2);
  }
  var Alignment$START_instance;
  function Alignment$START_getInstance() {
    Alignment_initFields();
    return Alignment$START_instance;
  }
  var Alignment$CENTER_instance;
  function Alignment$CENTER_getInstance() {
    Alignment_initFields();
    return Alignment$CENTER_instance;
  }
  var Alignment$END_instance;
  function Alignment$END_getInstance() {
    Alignment_initFields();
    return Alignment$END_instance;
  }
  Alignment.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Alignment',
    interfaces: [Enum]
  };
  function Alignment$values() {
    return [Alignment$START_getInstance(), Alignment$CENTER_getInstance(), Alignment$END_getInstance()];
  }
  Alignment.values = Alignment$values;
  function Alignment$valueOf(name) {
    switch (name) {
      case 'START':
        return Alignment$START_getInstance();
      case 'CENTER':
        return Alignment$CENTER_getInstance();
      case 'END':
        return Alignment$END_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.scene.ui.Alignment.' + name);
    }
  }
  Alignment.valueOf_61zpoe$ = Alignment$valueOf;
  function ScrollHandler(scene, scrollTarget, name) {
    if (name === void 0)
      name = toString(scrollTarget.name) + '-scroll';
    UiComponent.call(this, name, scrollTarget.root);
    this.scrollTarget = scrollTarget;
    this.trackColor = Color$Companion_getInstance().GRAY.withAlpha_mx4ult$(0.2);
    this.handleColor = Color$Companion_getInstance().GRAY.withAlpha_mx4ult$(0.75);
    this.verticalTrackBounds = new BoundingBox();
    this.verticalHandleBounds = new BoundingBox();
    this.horizontalTrackBounds = new BoundingBox();
    this.horizontalHandleBounds = new BoundingBox();
    this.scrollPosY_ted4vc$_0 = new SpringDamperFloat(0.0);
    this.scrollPosYGuard_vhhi7b$_0 = new SpringDamperFloat(0.0);
    this.pickRay_m6hrch$_0 = new Ray();
    this.padding.set_m986jv$(dps(3.0));
    this.layoutSpec.setOrigin_4ujscr$(zero(), zero(), zero());
    this.layoutSpec.setSize_4ujscr$(this.scrollTarget.layoutSpec.width, this.scrollTarget.layoutSpec.height, this.scrollTarget.layoutSpec.depth);
    this.scrollPosY_ted4vc$_0.stiffness = 300.0;
    this.scrollPosYGuard_vhhi7b$_0.stiffness = 500.0;
    scene.registerDragHandler_y44tw7$(this);
  }
  ScrollHandler.prototype.createThemeUi_aemszp$ = function (ctx) {
    return this.root.theme.newScrollHandlerUi_dz938y$(this);
  };
  ScrollHandler.prototype.setDrawBoundsFromWrappedComponentBounds_hf6scw$ = function (parentContainer, ctx) {
    this.drawBounds.set_ea4od8$(this.scrollTarget.drawBounds);
    this.bounds.set_ea4od8$(this.drawBounds);
  };
  ScrollHandler.prototype.handleDrag_urvnay$ = function (dragPtrs, scene, ctx) {
    if (this.alpha === 0.0) {
      return;
    }if (!dragPtrs.isEmpty() && !dragPtrs.get_za3lpa$(0).isConsumed_za3lpa$() && this.computeLocalPickRay_wswg9$(dragPtrs.get_za3lpa$(0), ctx, this.pickRay_m6hrch$_0) && this.bounds.hitDistanceSqr_nvyeur$(this.pickRay_m6hrch$_0) < kotlin_js_internal_FloatCompanionObject.MAX_VALUE) {
      this.scrollPosY_ted4vc$_0.desired = this.scrollPosY_ted4vc$_0.desired + dragPtrs.get_za3lpa$(0).deltaScroll * 50;
      dragPtrs.get_za3lpa$(0).consume_za3lpa$();
    }var max = 0.0;
    if (this.scrollPosY_ted4vc$_0.desired > max) {
      if (this.scrollPosY_ted4vc$_0.desired > this.scrollPosYGuard_vhhi7b$_0.actual) {
        this.scrollPosYGuard_vhhi7b$_0.actual = this.scrollPosY_ted4vc$_0.desired;
      }this.scrollPosYGuard_vhhi7b$_0.desired = max;
      this.scrollPosY_ted4vc$_0.desired = this.scrollPosYGuard_vhhi7b$_0.animate_mx4ult$(ctx.deltaT);
    }var min = this.scrollTarget.drawBounds.size.y - this.scrollTarget.contentBounds.size.y;
    if (this.scrollPosY_ted4vc$_0.desired < min) {
      if (this.scrollPosY_ted4vc$_0.desired < this.scrollPosYGuard_vhhi7b$_0.actual) {
        this.scrollPosYGuard_vhhi7b$_0.actual = this.scrollPosY_ted4vc$_0.desired;
      }this.scrollPosYGuard_vhhi7b$_0.desired = min;
      this.scrollPosY_ted4vc$_0.desired = this.scrollPosYGuard_vhhi7b$_0.animate_mx4ult$(ctx.deltaT);
    }this.scrollPosY_ted4vc$_0.animate_mx4ult$(ctx.deltaT);
    var a = this.scrollTarget.scrollOffset.y;
    var b = this.scrollPosY_ted4vc$_0.actual;
    var eps;
    eps = package$math.FUZZY_EQ_F;
    var $receiver = a - b;
    if (!(Math_0.abs($receiver) <= eps)) {
      this.scrollTarget.setScrollOffset_y2kzbl$(0.0, this.scrollPosY_ted4vc$_0.actual, 0.0);
    }};
  ScrollHandler.prototype.rayTest_jljx4v$ = function (test) {
    if (this.alpha !== 0.0) {
      var a = this.verticalTrackBounds.hitDistanceSqr_nvyeur$(test.ray);
      var b = this.horizontalTrackBounds.hitDistanceSqr_nvyeur$(test.ray);
      var distSqr = Math_0.min(a, b);
      if (distSqr < kotlin_js_internal_FloatCompanionObject.MAX_VALUE && distSqr <= test.hitDistanceSqr) {
        test.setHit_vfk0k2$(this, Math_0.sqrt(distSqr));
      }}};
  ScrollHandler.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ScrollHandler',
    interfaces: [Scene$DragHandler, UiComponent]
  };
  function ScrollHandlerUi(scrollHandler) {
    this.scrollHandler = scrollHandler;
    this.geom = IndexedVertexList_init([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().NORMALS, Attribute$Companion_getInstance().COLORS]);
    this.meshBuilder = new MeshBuilder(this.geom);
    this.mesh = new Mesh(this.geom);
  }
  ScrollHandlerUi.prototype.updateComponentAlpha = function () {
  };
  ScrollHandlerUi.prototype.createUi_aemszp$ = function (ctx) {
    this.scrollHandler.plusAssign_f1kmr1$(this.mesh);
  };
  ScrollHandlerUi.prototype.updateUi_aemszp$ = function (ctx) {
    this.meshBuilder.clear();
    this.meshBuilder.identity();
    this.computeTrackBounds();
    this.drawVerticalBar();
    this.drawHorizontalBar();
  };
  ScrollHandlerUi.prototype.computeTrackBounds = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var target = this.scrollHandler.scrollTarget;
    var showVertBar = target.drawBounds.size.y < target.contentBounds.size.y;
    var showHoriBar = target.drawBounds.size.x < target.contentBounds.size.x;
    var width = target.drawBounds.size.x;
    var height = target.drawBounds.size.y;
    var paddingT = this.scrollHandler.padding.top.toUnits_dleff0$(height, this.scrollHandler.dpi);
    var paddingB = this.scrollHandler.padding.bottom.toUnits_dleff0$(height, this.scrollHandler.dpi);
    var paddingL = this.scrollHandler.padding.left.toUnits_dleff0$(width, this.scrollHandler.dpi);
    var paddingR = this.scrollHandler.padding.right.toUnits_dleff0$(width, this.scrollHandler.dpi);
    var trackW = dp_0(this.scrollHandler, 6.0);
    var trackZ = dp_0(this.scrollHandler, 0.1);
    var handleZ = dp_0(this.scrollHandler, 0.25);
    if (showVertBar) {
      var x = width - paddingR - trackW;
      tmp$_0 = this.scrollHandler.padding.bottom.toUnits_dleff0$(height, this.scrollHandler.dpi);
      if (showHoriBar) {
        tmp$ = trackW + paddingR;
      } else {
        tmp$ = 0.0;
      }
      var y = tmp$_0 + tmp$;
      var w = trackW;
      if (showHoriBar) {
        tmp$_1 = trackW + paddingR;
      } else {
        tmp$_1 = 0.0;
      }
      var h = height - paddingT - paddingB - tmp$_1;
      this.scrollHandler.verticalTrackBounds.set_w8lrqs$(x, y, trackZ, x + w, y + h, trackZ).move_czzhiu$(target.drawBounds.min);
      var handleH = target.drawBounds.size.y / target.contentBounds.size.y * h;
      var min = dp_0(this.scrollHandler, 12.0);
      var clamp$result;
      if (handleH < min) {
        clamp$result = min;
      } else if (handleH > h) {
        clamp$result = h;
      } else {
        clamp$result = handleH;
      }
      var handleHClamped = clamp$result;
      var $receiver = handleHClamped - handleH;
      var clamp$result_0;
      if ($receiver < 0.0) {
        clamp$result_0 = 0.0;
      } else if ($receiver > h) {
        clamp$result_0 = h;
      } else {
        clamp$result_0 = $receiver;
      }
      var trackHMod = h - clamp$result_0;
      var handleY = (target.drawBounds.min.y - target.contentBounds.min.y) / target.contentBounds.size.y * trackHMod + y;
      var max = y + h - handleHClamped;
      var clamp$result_1;
      if (handleY < y) {
        clamp$result_1 = y;
      } else if (handleY > max) {
        clamp$result_1 = max;
      } else {
        clamp$result_1 = handleY;
      }
      var handleYClamped = clamp$result_1;
      this.scrollHandler.verticalHandleBounds.set_w8lrqs$(x, handleYClamped, handleZ, x + w, handleYClamped + handleHClamped, handleZ).move_czzhiu$(target.drawBounds.min);
    } else {
      this.scrollHandler.verticalTrackBounds.clear();
      this.scrollHandler.verticalHandleBounds.clear();
    }
    if (showHoriBar) {
      var x_0 = paddingL;
      var y_0 = paddingB;
      tmp$_3 = this.scrollHandler.width - paddingL - paddingR;
      if (showVertBar) {
        tmp$_2 = trackW + paddingR;
      } else {
        tmp$_2 = 0.0;
      }
      var w_0 = tmp$_3 - tmp$_2;
      var h_0 = trackW;
      this.scrollHandler.horizontalTrackBounds.set_w8lrqs$(x_0, y_0, trackZ, x_0 + w_0, y_0 + h_0, trackZ).move_czzhiu$(target.drawBounds.min);
      var handleW = target.drawBounds.size.x / target.contentBounds.size.x * w_0;
      var min_0 = dp_0(this.scrollHandler, 12.0);
      var clamp$result_2;
      if (handleW < min_0) {
        clamp$result_2 = min_0;
      } else if (handleW > w_0) {
        clamp$result_2 = w_0;
      } else {
        clamp$result_2 = handleW;
      }
      var handleWClamped = clamp$result_2;
      var $receiver_0 = handleWClamped - handleW;
      var clamp$result_3;
      if ($receiver_0 < 0.0) {
        clamp$result_3 = 0.0;
      } else if ($receiver_0 > w_0) {
        clamp$result_3 = w_0;
      } else {
        clamp$result_3 = $receiver_0;
      }
      var trackWMod = w_0 - clamp$result_3;
      var handleX = (target.drawBounds.min.x - target.contentBounds.min.x) / target.contentBounds.size.x * trackWMod + x_0;
      var max_0 = x_0 + w_0 - handleWClamped;
      var clamp$result_4;
      if (handleX < x_0) {
        clamp$result_4 = x_0;
      } else if (handleX > max_0) {
        clamp$result_4 = max_0;
      } else {
        clamp$result_4 = handleX;
      }
      var handleXClamped = clamp$result_4;
      this.scrollHandler.horizontalHandleBounds.set_w8lrqs$(handleXClamped, y_0, handleZ, handleXClamped + handleWClamped, y_0 + h_0, handleZ).move_czzhiu$(target.drawBounds.min);
    } else {
      this.scrollHandler.horizontalTrackBounds.clear();
      this.scrollHandler.horizontalHandleBounds.clear();
    }
  };
  ScrollHandlerUi.prototype.drawVerticalBar = function () {
    this.drawDefaultBar_xyh9j8$_0(this.scrollHandler.verticalTrackBounds, this.scrollHandler.verticalHandleBounds);
  };
  ScrollHandlerUi.prototype.drawHorizontalBar = function () {
    this.drawDefaultBar_xyh9j8$_0(this.scrollHandler.horizontalTrackBounds, this.scrollHandler.horizontalHandleBounds);
  };
  ScrollHandlerUi.prototype.drawDefaultBar_xyh9j8$_0 = function (track, handle) {
    if (!track.isEmpty) {
      this.meshBuilder.color = this.scrollHandler.trackColor;
      var $this = this.meshBuilder;
      var $receiver = $this.rectProps.defaults();
      $receiver.origin.set_y2kzbl$(track.min.x, track.min.y, track.min.z);
      $receiver.size.set_dleff0$(track.size.x, track.size.y);
      var a = track.size.x;
      var b = track.size.y;
      $receiver.cornerRadius = Math_0.min(a, b) / 2.0;
      $receiver.cornerSteps = 4;
      $receiver.zeroTexCoords();
      $this.rect_e5k3t5$($this.rectProps);
    }if (!handle.isEmpty) {
      this.meshBuilder.color = this.scrollHandler.handleColor;
      var $this_0 = this.meshBuilder;
      var $receiver_0 = $this_0.rectProps.defaults();
      $receiver_0.origin.set_y2kzbl$(handle.min.x, handle.min.y, handle.min.z);
      $receiver_0.size.set_dleff0$(handle.size.x, handle.size.y);
      var a_0 = handle.size.x;
      var b_0 = handle.size.y;
      $receiver_0.cornerRadius = Math_0.min(a_0, b_0) / 2.0;
      $receiver_0.cornerSteps = 4;
      $receiver_0.zeroTexCoords();
      $this_0.rect_e5k3t5$($this_0.rectProps);
    }};
  ScrollHandlerUi.prototype.onRender_aemszp$ = function (ctx) {
  };
  ScrollHandlerUi.prototype.dispose_aemszp$ = function (ctx) {
    this.scrollHandler.minusAssign_f1kmr1$(this.mesh);
    this.mesh.dispose_aemszp$(ctx);
  };
  ScrollHandlerUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ScrollHandlerUi',
    interfaces: [ComponentUi]
  };
  function Slider(name, min, max, value, root) {
    UiComponent.call(this, name, root);
    this.onValueChanged = ArrayList_init_0();
    this.trackColor = Color$Companion_getInstance().GRAY;
    this.trackColorHighlighted = new ThemeOrCustomProp(Color$Companion_getInstance().LIGHT_GRAY);
    this.knobColor = new ThemeOrCustomProp(Color$Companion_getInstance().WHITE);
    this.trackWidth = 0.0;
    this.knobSize = 0.0;
    this.knobPosition = MutableVec2f_init();
    this.min_c38r2y$_0 = min;
    this.max_c38wrw$_0 = max;
    this.value_ymubdz$_0 = value;
    this.pickRay_0 = new Ray();
    this.hitPlane_0 = new Plane();
    this.hitPos_0 = MutableVec3f_init();
    this.initHitPos_0 = MutableVec3f_init();
    this.startDrag_0 = false;
    this.startDragValue_0 = 0.0;
    this.hitPlane_0.n.set_czzhiu$(Vec3f$Companion_getInstance().Z_AXIS);
    this.onHover.add_11rb$(Slider_init$lambda(this, root));
  }
  Object.defineProperty(Slider.prototype, 'min', {
    get: function () {
      return this.min_c38r2y$_0;
    },
    set: function (value) {
      if (value !== this.min_c38r2y$_0) {
        this.min_c38r2y$_0 = value;
        this.requestUiUpdate();
      }}
  });
  Object.defineProperty(Slider.prototype, 'max', {
    get: function () {
      return this.max_c38wrw$_0;
    },
    set: function (value) {
      if (value !== this.max_c38wrw$_0) {
        this.max_c38wrw$_0 = value;
        this.requestUiUpdate();
      }}
  });
  Object.defineProperty(Slider.prototype, 'value', {
    get: function () {
      return this.value_ymubdz$_0;
    },
    set: function (value) {
      var tmp$;
      if (value !== this.value_ymubdz$_0) {
        var min = this.min;
        var max = this.max;
        var clamp$result;
        if (value < min) {
          clamp$result = min;
        } else if (value > max) {
          clamp$result = max;
        } else {
          clamp$result = value;
        }
        this.value_ymubdz$_0 = clamp$result;
        this.requestUiUpdate();
        tmp$ = this.onValueChanged;
        for (var i = 0; i !== tmp$.size; ++i) {
          this.onValueChanged.get_za3lpa$(i)(this, this.value_ymubdz$_0);
        }
      }}
  });
  Slider.prototype.setValue_y2kzbl$ = function (min, max, value) {
    this.min = min;
    this.max = max;
    this.value = value;
  };
  Slider.prototype.isOverKnob_0 = function (x, y) {
    var dx = x - this.knobPosition.x;
    var dy = y - this.knobPosition.y;
    return dx * dx + dy * dy < this.knobSize * this.knobSize;
  };
  Slider.prototype.handleDrag_urvnay$ = function (dragPtrs, scene, ctx) {
    if (dragPtrs.size === 1 && !dragPtrs.get_za3lpa$(0).isConsumed_za3lpa$() && dragPtrs.get_za3lpa$(0).isLeftButtonDown && this.computeLocalPickRay_wswg9$(dragPtrs.get_za3lpa$(0), ctx, this.pickRay_0)) {
      if (this.hitPlane_0.intersectionPoint_m2314x$(this.hitPos_0, this.pickRay_0)) {
        if (this.startDrag_0) {
          this.startDrag_0 = false;
          this.initHitPos_0.set_czzhiu$(this.hitPos_0);
          this.startDragValue_0 = this.value;
        }var deltaX = this.hitPos_0.x - this.initHitPos_0.x;
        this.value = this.startDragValue_0 + deltaX / this.trackWidth * (this.max - this.min);
      }dragPtrs.get_za3lpa$(0).consume_za3lpa$();
    } else {
      scene.removeDragHandler_y44tw7$(this);
    }
  };
  Slider.prototype.setThemeProps_aemszp$ = function (ctx) {
    UiComponent.prototype.setThemeProps_aemszp$.call(this, ctx);
    this.knobColor.setTheme_11rb$(this.root.theme.accentColor);
    this.trackColorHighlighted.setTheme_11rb$(MutableColor_init().add_y83vuj$(this.root.theme.accentColor, 0.4));
  };
  Slider.prototype.createThemeUi_aemszp$ = function (ctx) {
    return this.root.theme.newSliderUi_l85jm8$(this);
  };
  function Slider_init$lambda(this$Slider, closure$root) {
    return function ($receiver, ptr, rt, f) {
      var ptX = rt.hitPositionLocal.x - this$Slider.componentBounds.min.x;
      var ptY = rt.hitPositionLocal.y - this$Slider.componentBounds.min.y;
      if (ptr.isLeftButtonEvent && ptr.isLeftButtonDown && this$Slider.isOverKnob_0(ptX, ptY)) {
        closure$root.scene.registerDragHandler_y44tw7$(this$Slider);
        this$Slider.startDrag_0 = true;
      }return Unit;
    };
  }
  Slider.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Slider',
    interfaces: [Scene$DragHandler, UiComponent]
  };
  function SliderUi(slider, baseUi) {
    this.slider = slider;
    this.baseUi = baseUi;
    this.geom = new IndexedVertexList(UiShader$Companion_getInstance().UI_MESH_ATTRIBS);
    this.meshBuilder = new MeshBuilder(this.geom);
    this.mesh = new Mesh(this.geom);
    this.shader = new UiShader();
  }
  SliderUi.prototype.updateComponentAlpha = function () {
    this.baseUi.updateComponentAlpha();
    this.shader.alpha = this.slider.alpha;
  };
  SliderUi.prototype.createUi_aemszp$ = function (ctx) {
    this.baseUi.createUi_aemszp$(ctx);
    this.mesh.pipelineLoader = this.shader;
    this.slider.plusAssign_f1kmr1$(this.mesh);
  };
  SliderUi.prototype.dispose_aemszp$ = function (ctx) {
    this.baseUi.dispose_aemszp$(ctx);
    this.mesh.dispose_aemszp$(ctx);
    this.slider.minusAssign_f1kmr1$(this.mesh);
  };
  SliderUi.prototype.updateUi_aemszp$ = function (ctx) {
    this.baseUi.updateUi_aemszp$(ctx);
    this.slider.knobSize = dp_0(this.slider, 10.0);
    var trackH = dp_0(this.slider, 6.0);
    var x = this.slider.padding.left.toUnits_dleff0$(this.slider.width, this.slider.dpi) + this.slider.knobSize;
    var y = (this.slider.height - trackH) / 2;
    var p = (this.slider.value - this.slider.min) / (this.slider.max - this.slider.min);
    this.slider.trackWidth = this.slider.width - x - this.slider.knobSize - this.slider.padding.right.toUnits_dleff0$(this.slider.width, this.slider.dpi);
    this.slider.knobPosition.set_dleff0$(x + this.slider.trackWidth * p, this.slider.height / 2.0);
    this.slider.setupBuilder_84rojv$(this.meshBuilder);
    if (this.slider.value > this.slider.min) {
      this.meshBuilder.color = this.slider.trackColorHighlighted.apply();
      var $this = this.meshBuilder;
      var $receiver = $this.rectProps.defaults();
      $receiver.origin.set_y2kzbl$(x, y, dp_0(this.slider, 0.1));
      $receiver.size.set_dleff0$(this.slider.knobPosition.x - x + trackH, trackH);
      $receiver.cornerRadius = trackH / 2.0;
      $receiver.cornerSteps = 4;
      $receiver.zeroTexCoords();
      $this.rect_e5k3t5$($this.rectProps);
    }if (this.slider.value < this.slider.max) {
      this.meshBuilder.color = this.slider.trackColor;
      var $this_0 = this.meshBuilder;
      var $receiver_0 = $this_0.rectProps.defaults();
      $receiver_0.origin.set_y2kzbl$(this.slider.knobPosition.x - trackH, y, dp_0(this.slider, 0.1));
      $receiver_0.size.set_dleff0$(this.slider.trackWidth - this.slider.knobPosition.x + x + trackH, trackH);
      $receiver_0.cornerRadius = trackH / 2.0;
      $receiver_0.cornerSteps = 4;
      $receiver_0.zeroTexCoords();
      $this_0.rect_e5k3t5$($this_0.rectProps);
    }this.meshBuilder.color = this.slider.knobColor.apply();
    var $this_1 = this.meshBuilder;
    var $receiver_1 = $this_1.circleProps.defaults();
    $receiver_1.center.set_y2kzbl$(this.slider.knobPosition.x, this.slider.knobPosition.y, dp_0(this.slider, 0.2));
    $receiver_1.radius = this.slider.knobSize;
    $receiver_1.steps = 30;
    $this_1.circle_59f34t$($this_1.circleProps);
  };
  SliderUi.prototype.onRender_aemszp$ = function (ctx) {
    this.baseUi.onRender_aemszp$(ctx);
  };
  SliderUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SliderUi',
    interfaces: [ComponentUi]
  };
  function TextField(name, root) {
    Label.call(this, name, root);
    this.editText = new EditableText();
    this.onUpdate.add_11rb$(TextField_init$lambda(this));
  }
  TextField.prototype.createThemeUi_aemszp$ = function (ctx) {
    return this.root.theme.newTextFieldUi_p39bdq$(this);
  };
  function TextField_init$lambda(this$TextField) {
    return function ($receiver, f, ctx) {
      var tmp$;
      if (!ctx.inputMgr.keyEvents.isEmpty()) {
        tmp$ = ctx.inputMgr.keyEvents.iterator();
        while (tmp$.hasNext()) {
          var e = tmp$.next();
          if (e.isCharTyped) {
            this$TextField.editText.charTyped_s8itvh$(unboxChar(e.typedChar));
          } else if (e.isPressed) {
            switch (e.keyCode) {
              case -17:
                this$TextField.editText.backspace();
                break;
              case -19:
                this$TextField.editText.deleteSelection();
                break;
              case -25:
                if (e.isCtrlDown) {
                  this$TextField.editText.moveCaret_fzusl$(3, e.isShiftDown);
                } else {
                  this$TextField.editText.moveCaret_fzusl$(1, e.isShiftDown);
                }

                break;
              case -26:
                if (e.isCtrlDown) {
                  this$TextField.editText.moveCaret_fzusl$(4, e.isShiftDown);
                } else {
                  this$TextField.editText.moveCaret_fzusl$(2, e.isShiftDown);
                }

                break;
              case -21:
                this$TextField.editText.moveCaret_fzusl$(5, e.isShiftDown);
                break;
              case -22:
                this$TextField.editText.moveCaret_fzusl$(6, e.isShiftDown);
                break;
            }
          }}
        this$TextField.text = this$TextField.editText.toString();
      }return Unit;
    };
  }
  TextField.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextField',
    interfaces: [Label]
  };
  function TextFieldUi(textField, baseUi) {
    LabelUi.call(this, textField, baseUi);
    this.textField = textField;
    this.caretAlphaAnimator_mmbcs$_0 = new CosAnimator(new InterpolatedFloat(0.0, 1.0));
    this.caretColor_qpd03i$_0 = MutableColor_init();
    this.caretDrawPos_hkh11t$_0 = new InterpolatedFloat(0.0, 0.0);
    this.caretPosAnimator_3ucebe$_0 = new LinearAnimator(this.caretDrawPos_hkh11t$_0);
    this.caretAlphaAnimator_mmbcs$_0.duration = 0.5;
    this.caretAlphaAnimator_mmbcs$_0.repeating = Animator$Companion_getInstance().REPEAT_TOGGLE_DIR;
    this.caretPosAnimator_3ucebe$_0.duration = 0.1;
  }
  TextFieldUi.prototype.onRender_aemszp$ = function (ctx) {
    this.textField.requestUiUpdate();
    LabelUi.prototype.onRender_aemszp$.call(this, ctx);
  };
  TextFieldUi.prototype.renderText_aemszp$ = function (ctx) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    var x1 = this.label.padding.left.toUnits_dleff0$(this.label.width, this.label.dpi);
    var x2 = this.label.width - this.label.padding.right.toUnits_dleff0$(this.label.width, this.label.dpi);
    var y = this.textBaseline - ((tmp$_2 = (tmp$_1 = (tmp$_0 = (tmp$ = this.font) != null ? tmp$.charMap : null) != null ? tmp$_0.fontProps : null) != null ? tmp$_1.sizePts : null) != null ? tmp$_2 : 0.0) * 0.2;
    var caretX = {v: this.textStartX};
    var selectionX = {v: this.textStartX};
    if (this.textField.editText.caretPosition > 0 || this.textField.editText.selectionStart > 0) {
      var a = this.textField.editText.caretPosition;
      var b = this.textField.editText.selectionStart;
      tmp$_3 = Math_0.max(a, b) - 1 | 0;
      for (var i = 0; i <= tmp$_3; i++) {
        var w = (tmp$_5 = (tmp$_4 = this.font) != null ? tmp$_4.charWidth_s8itvh$(unboxChar(this.textField.editText.get_za3lpa$(i))) : null) != null ? tmp$_5 : 0.0;
        if (i < this.textField.editText.caretPosition) {
          caretX.v += w;
        }if (i < this.textField.editText.selectionStart) {
          selectionX.v += w;
        }}
    }if (caretX.v !== this.caretDrawPos_hkh11t$_0.to) {
      this.caretDrawPos_hkh11t$_0.from = this.caretDrawPos_hkh11t$_0.value;
      this.caretDrawPos_hkh11t$_0.to = caretX.v;
      this.caretPosAnimator_3ucebe$_0.progress = 0.0;
      this.caretPosAnimator_3ucebe$_0.speed = 1.0;
    }caretX.v = this.caretPosAnimator_3ucebe$_0.tick_aemszp$(ctx);
    var $this = this.meshBuilder;
    $this.transform.push();
    var tmp$_6, tmp$_7, tmp$_8, tmp$_9;
    $this.translate_y2kzbl$(0.0, 0.0, dp_0(this.label, 0.1));
    this.meshBuilder.color = this.label.root.theme.accentColor;
    this.meshBuilder.line_s2l86p$(x1, y, x2, y, dp_0(this.label, 1.5));
    if (this.textField.editText.selectionStart !== this.textField.editText.caretPosition) {
      this.caretColor_qpd03i$_0.set_d7aj7k$(this.label.root.theme.accentColor);
      this.caretColor_qpd03i$_0.a = 0.4;
      this.meshBuilder.color = this.caretColor_qpd03i$_0;
      var $this_0 = this.meshBuilder;
      var $receiver = $this_0.rectProps.defaults();
      var tmp$_10, tmp$_11, tmp$_12, tmp$_13;
      $receiver.origin.set_y2kzbl$(caretX.v, y, 0.0);
      $receiver.size.set_dleff0$(selectionX.v - caretX.v, ((tmp$_13 = (tmp$_12 = (tmp$_11 = (tmp$_10 = this.font) != null ? tmp$_10.charMap : null) != null ? tmp$_11.fontProps : null) != null ? tmp$_12.sizePts : null) != null ? tmp$_13 : 0.0) * 1.2);
      $receiver.zeroTexCoords();
      $this_0.rect_e5k3t5$($this_0.rectProps);
    }this.caretColor_qpd03i$_0.set_d7aj7k$(this.label.root.theme.accentColor);
    this.caretColor_qpd03i$_0.a = this.caretAlphaAnimator_mmbcs$_0.tick_aemszp$(ctx);
    this.meshBuilder.color = this.caretColor_qpd03i$_0;
    this.meshBuilder.line_s2l86p$(caretX.v, y, caretX.v, this.textBaseline + ((tmp$_9 = (tmp$_8 = (tmp$_7 = (tmp$_6 = this.font) != null ? tmp$_6.charMap : null) != null ? tmp$_7.fontProps : null) != null ? tmp$_8.sizePts : null) != null ? tmp$_9 : 0.0), dp_0(this.label, 1.5));
    $this.transform.pop();
    LabelUi.prototype.renderText_aemszp$.call(this, ctx);
  };
  TextFieldUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextFieldUi',
    interfaces: [LabelUi]
  };
  function EditableText(txt) {
    EditableText$Companion_getInstance();
    if (txt === void 0)
      txt = '';
    this.text_x0rs8x$_0 = txt;
    this.caretPosition_lco9r8$_0 = 0;
    this.selectionStart_trwhxy$_0 = 0;
  }
  Object.defineProperty(EditableText.prototype, 'text', {
    get: function () {
      return this.text_x0rs8x$_0;
    },
    set: function (value) {
      if (this.caretPosition > value.length) {
        this.caretPosition = value.length;
      }if (this.selectionStart > value.length) {
        this.selectionStart = value.length;
      }this.text_x0rs8x$_0 = value;
    }
  });
  Object.defineProperty(EditableText.prototype, 'caretPosition', {
    get: function () {
      return this.caretPosition_lco9r8$_0;
    },
    set: function (value) {
      var max = this.text.length;
      var clamp$result;
      if (value < 0) {
        clamp$result = 0;
      } else if (value > max) {
        clamp$result = max;
      } else {
        clamp$result = value;
      }
      this.caretPosition_lco9r8$_0 = clamp$result;
    }
  });
  Object.defineProperty(EditableText.prototype, 'selectionStart', {
    get: function () {
      return this.selectionStart_trwhxy$_0;
    },
    set: function (value) {
      var max = this.text.length;
      var clamp$result;
      if (value < 0) {
        clamp$result = 0;
      } else if (value > max) {
        clamp$result = max;
      } else {
        clamp$result = value;
      }
      this.selectionStart_trwhxy$_0 = clamp$result;
    }
  });
  EditableText.prototype.charTyped_s8itvh$ = function (c) {
    this.replaceSelection_61zpoe$(String.fromCharCode(c));
  };
  EditableText.prototype.moveCaret_fzusl$ = function (mode, selection) {
    switch (mode) {
      case 1:
        this.caretPosition = this.caretPosition - 1 | 0;
        break;
      case 2:
        this.caretPosition = this.caretPosition + 1 | 0;
        break;
      case 5:
        this.caretPosition = 0;
        break;
      case 6:
        this.caretPosition = this.text.length;
        break;
      case 3:
        this.moveWordLeft_0();
        break;
      case 4:
        this.moveWordRight_0();
        break;
    }
    if (!selection) {
      this.selectionStart = this.caretPosition;
    }};
  EditableText.prototype.moveWordLeft_0 = function () {
    if (this.caretPosition > 0) {
      var $receiver = this.text;
      var endIndex = this.caretPosition;
      var idx = lastIndexOf($receiver.substring(0, endIndex), 32);
      if (idx < 0) {
        this.caretPosition = 0;
      } else {
        this.caretPosition = idx;
      }
    }};
  EditableText.prototype.moveWordRight_0 = function () {
    if (this.caretPosition < this.text.length) {
      var idx = indexOf(this.text, 32, this.caretPosition);
      if (idx < 0) {
        this.caretPosition = this.text.length;
      } else {
        this.caretPosition = idx + 1 | 0;
      }
    }};
  EditableText.prototype.backspace = function () {
    if (this.selectionStart !== this.caretPosition) {
      this.replaceSelection_61zpoe$('');
    } else if (this.caretPosition > 0) {
      this.selectionStart = (this.caretPosition = this.caretPosition - 1 | 0, this.caretPosition);
      var $receiver = this.text;
      var endIndex = this.caretPosition;
      var tmp$ = $receiver.substring(0, endIndex);
      var $receiver_0 = this.text;
      var startIndex = this.caretPosition + 1 | 0;
      this.text = tmp$ + $receiver_0.substring(startIndex);
    }};
  EditableText.prototype.deleteSelection = function () {
    if (this.selectionStart !== this.caretPosition) {
      this.replaceSelection_61zpoe$('');
    } else if (this.caretPosition < this.text.length) {
      var $receiver = this.text;
      var endIndex = this.caretPosition;
      var tmp$ = $receiver.substring(0, endIndex);
      var $receiver_0 = this.text;
      var startIndex = this.caretPosition + 1 | 0;
      this.text = tmp$ + $receiver_0.substring(startIndex);
    }};
  EditableText.prototype.replaceSelection_61zpoe$ = function (string) {
    var a = this.selectionStart;
    var b = this.caretPosition;
    var start = Math_0.min(a, b);
    var a_0 = this.selectionStart;
    var b_0 = this.caretPosition;
    var end = Math_0.max(a_0, b_0);
    this.text = this.text.substring(0, start) + string + this.text.substring(end);
    var a_1 = this.selectionStart;
    var b_1 = this.caretPosition;
    this.caretPosition = Math_0.min(a_1, b_1) + string.length | 0;
    this.selectionStart = this.caretPosition;
  };
  EditableText.prototype.get_za3lpa$ = function (index) {
    return toBoxedChar(this.text.charCodeAt(index));
  };
  EditableText.prototype.toString = function () {
    return this.text;
  };
  function EditableText$Companion() {
    EditableText$Companion_instance = this;
    this.MOVE_LEFT = 1;
    this.MOVE_RIGHT = 2;
    this.MOVE_WORD_LEFT = 3;
    this.MOVE_WORD_RIGHT = 4;
    this.MOVE_START = 5;
    this.MOVE_END = 6;
  }
  EditableText$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var EditableText$Companion_instance = null;
  function EditableText$Companion_getInstance() {
    if (EditableText$Companion_instance === null) {
      new EditableText$Companion();
    }return EditableText$Companion_instance;
  }
  EditableText.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EditableText',
    interfaces: []
  };
  function ToggleButton(name, root, initState) {
    if (initState === void 0)
      initState = false;
    Button.call(this, name, root);
    this.onStateChange = ArrayList_init_0();
    this.knobColorOn = Color$Companion_getInstance().WHITE;
    this.knobColorOff = Color$Companion_getInstance().LIGHT_GRAY;
    this.trackColor = Color$Companion_getInstance().GRAY;
    this.isEnabled_gffhto$_0 = initState;
    this.textAlignment = new Gravity(Alignment$START_getInstance(), Alignment$CENTER_getInstance());
  }
  Object.defineProperty(ToggleButton.prototype, 'isEnabled', {
    get: function () {
      return this.isEnabled_gffhto$_0;
    },
    set: function (value) {
      if (value !== this.isEnabled_gffhto$_0) {
        this.isEnabled_gffhto$_0 = value;
        this.fireStateChanged();
      }}
  });
  ToggleButton.prototype.fireStateChanged = function () {
    var tmp$;
    tmp$ = this.onStateChange;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.onStateChange.get_za3lpa$(i)(this);
    }
  };
  ToggleButton.prototype.fireOnClick_kjsf19$ = function (ptr, rt, ctx) {
    this.isEnabled = !this.isEnabled;
    Button.prototype.fireOnClick_kjsf19$.call(this, ptr, rt, ctx);
  };
  ToggleButton.prototype.setThemeProps_aemszp$ = function (ctx) {
    Button.prototype.setThemeProps_aemszp$.call(this, ctx);
    this.knobColorOn = this.root.theme.accentColor;
  };
  ToggleButton.prototype.createThemeUi_aemszp$ = function (ctx) {
    return this.root.theme.newToggleButtonUi_r83hfv$(this);
  };
  ToggleButton.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ToggleButton',
    interfaces: [Button]
  };
  function ToggleButtonUi(tb, baseUi) {
    ButtonUi.call(this, tb, baseUi);
    this.tb = tb;
    this.knobAnimator = new CosAnimator(new InterpolatedFloat(0.0, 1.0));
    this.knobColor = MutableColor_init();
    this.stateChangedListener = ToggleButtonUi$stateChangedListener$lambda(this);
  }
  function ToggleButtonUi$createUi$lambda(this$ToggleButtonUi) {
    return function (it) {
      this$ToggleButtonUi.tb.requestUiUpdate();
      return Unit;
    };
  }
  ToggleButtonUi.prototype.createUi_aemszp$ = function (ctx) {
    var tmp$, tmp$_0;
    ButtonUi.prototype.createUi_aemszp$.call(this, ctx);
    this.knobAnimator.speed = 0.0;
    this.knobAnimator.duration = 0.15;
    tmp$_0 = this.knobAnimator.value;
    if (this.tb.isEnabled) {
      tmp$ = 1.0;
    } else {
      tmp$ = 0.0;
    }
    tmp$_0.value = tmp$;
    this.knobAnimator.value.onUpdate = ToggleButtonUi$createUi$lambda(this);
    var $receiver = this.tb.onStateChange;
    var element = this.stateChangedListener;
    $receiver.add_11rb$(element);
  };
  ToggleButtonUi.prototype.dispose_aemszp$ = function (ctx) {
    ButtonUi.prototype.dispose_aemszp$.call(this, ctx);
    var $receiver = this.tb.onStateChange;
    var element = this.stateChangedListener;
    $receiver.remove_11rb$(element);
  };
  ToggleButtonUi.prototype.updateUi_aemszp$ = function (ctx) {
    ButtonUi.prototype.updateUi_aemszp$.call(this, ctx);
    var paddingR = this.tb.padding.right.toUnits_dleff0$(this.tb.width, this.tb.dpi);
    var trackW = dp_0(this.tb, 24.0);
    var trackH = dp_0(this.tb, 6.0);
    var knobR = dp_0(this.tb, 10.0);
    var x = this.tb.width - paddingR - trackW - knobR;
    var y = (this.tb.height - trackH) / 2.0;
    this.meshBuilder.color = this.tb.trackColor;
    var $this = this.meshBuilder;
    var $receiver = $this.rectProps.defaults();
    $receiver.origin.set_y2kzbl$(x, y, dp_0(this.tb, 0.1));
    $receiver.size.set_dleff0$(trackW, trackH);
    $receiver.cornerRadius = trackH / 2.0;
    $receiver.cornerSteps = 4;
    $receiver.zeroTexCoords();
    $this.rect_e5k3t5$($this.rectProps);
    var anim = this.knobAnimator.value.value;
    this.knobColor.clear();
    this.knobColor.add_y83vuj$(this.tb.knobColorOff, 1.0 - anim);
    this.knobColor.add_y83vuj$(this.tb.knobColorOn, anim);
    this.meshBuilder.color = this.knobColor;
    var $this_0 = this.meshBuilder;
    var $receiver_0 = $this_0.circleProps.defaults();
    $receiver_0.center.set_y2kzbl$(x + trackW * anim, y + trackH / 2.0, dp_0(this.tb, 0.2));
    $receiver_0.radius = knobR;
    $receiver_0.steps = 30;
    $this_0.circle_59f34t$($this_0.circleProps);
  };
  ToggleButtonUi.prototype.onRender_aemszp$ = function (ctx) {
    ButtonUi.prototype.onRender_aemszp$.call(this, ctx);
    this.knobAnimator.tick_aemszp$(ctx);
  };
  function ToggleButtonUi$stateChangedListener$lambda(this$ToggleButtonUi) {
    return function ($receiver) {
      if ($receiver.isEnabled) {
        this$ToggleButtonUi.knobAnimator.speed = 1.0;
      } else {
        this$ToggleButtonUi.knobAnimator.speed = -1.0;
      }
      return Unit;
    };
  }
  ToggleButtonUi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ToggleButtonUi',
    interfaces: [ButtonUi]
  };
  function UiComponent(name, root) {
    TransformGroup.call(this, name);
    this.root = root;
    this.componentBounds = new BoundingBox();
    this.drawBounds = new BoundingBox();
    this.layoutSpec = new LayoutSpec();
    this.padding_iyk9nn$_0 = new Margin(dps(16.0), dps(16.0), dps(16.0), dps(16.0));
    this.ui = new ThemeOrCustomProp(new BlankComponentUi());
    this.alpha_e9jtsg$_0 = 1.0;
    this.isThemeUpdate_yv706e$_0 = true;
    this.isUiUpdate_l4k16n$_0 = true;
    this.onHoverEnter.add_11rb$(UiComponent_init$lambda);
    this.onHoverExit.add_11rb$(UiComponent_init$lambda_0);
    this.onHover.add_11rb$(UiComponent_init$lambda_1);
  }
  Object.defineProperty(UiComponent.prototype, 'posX', {
    get: function () {
      return this.componentBounds.min.x;
    }
  });
  Object.defineProperty(UiComponent.prototype, 'posY', {
    get: function () {
      return this.componentBounds.min.y;
    }
  });
  Object.defineProperty(UiComponent.prototype, 'posZ', {
    get: function () {
      return this.componentBounds.min.z;
    }
  });
  Object.defineProperty(UiComponent.prototype, 'width', {
    get: function () {
      return this.componentBounds.size.x;
    }
  });
  Object.defineProperty(UiComponent.prototype, 'height', {
    get: function () {
      return this.componentBounds.size.y;
    }
  });
  Object.defineProperty(UiComponent.prototype, 'depth', {
    get: function () {
      return this.componentBounds.size.z;
    }
  });
  Object.defineProperty(UiComponent.prototype, 'padding', {
    get: function () {
      return this.padding_iyk9nn$_0;
    },
    set: function (value) {
      var tmp$;
      if (!((tmp$ = this.padding_iyk9nn$_0) != null ? tmp$.equals(value) : null)) {
        this.padding_iyk9nn$_0 = value;
        this.isUiUpdate_l4k16n$_0 = true;
      }}
  });
  Object.defineProperty(UiComponent.prototype, 'alpha', {
    get: function () {
      return this.alpha_e9jtsg$_0;
    },
    set: function (value) {
      if (this.alpha_e9jtsg$_0 !== value) {
        this.alpha_e9jtsg$_0 = value;
        this.updateComponentAlpha();
      }}
  });
  Object.defineProperty(UiComponent.prototype, 'dpi', {
    get: function () {
      return this.root.uiDpi;
    }
  });
  UiComponent.prototype.addNode_xtids1$$default = function (node, index) {
    this.addNode_xtids1$(node, index, TransformGroup.prototype.addNode_xtids1$$default.bind(this));
    if (Kotlin.isType(node, UiComponent)) {
      node.alpha = this.alpha;
    }};
  UiComponent.prototype.setupBuilder_84rojv$ = function (builder) {
    builder.clear();
    builder.identity();
    builder.translate_czzhiu$(this.componentBounds.min);
  };
  UiComponent.prototype.requestThemeUpdate = function () {
    this.isThemeUpdate_yv706e$_0 = true;
  };
  UiComponent.prototype.requestUiUpdate = function () {
    this.isUiUpdate_l4k16n$_0 = true;
  };
  UiComponent.prototype.updateComponentAlpha = function () {
    this.ui.prop.updateComponentAlpha();
  };
  UiComponent.prototype.updateUi_aemszp$ = function (ctx) {
    this.ui.prop.updateUi_aemszp$(ctx);
  };
  UiComponent.prototype.updateTheme_aemszp$ = function (ctx) {
    this.ui.prop.dispose_aemszp$(ctx);
    this.ui.setTheme_11rb$(this.createThemeUi_aemszp$(ctx)).apply();
    this.setThemeProps_aemszp$(ctx);
    this.ui.prop.createUi_aemszp$(ctx);
    this.ui.prop.updateComponentAlpha();
    this.requestUiUpdate();
  };
  UiComponent.prototype.updateComponent_aemszp$ = function (ctx) {
    var tmp$;
    if (this.isThemeUpdate_yv706e$_0) {
      this.isThemeUpdate_yv706e$_0 = false;
      this.updateTheme_aemszp$(ctx);
    }if (this.isUiUpdate_l4k16n$_0) {
      this.isUiUpdate_l4k16n$_0 = false;
      this.updateUi_aemszp$(ctx);
      this.isFrustumChecked = this.root.isFrustumChecked;
      var tmp$_0;
      tmp$_0 = this.children.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        element.isFrustumChecked = this.root.isFrustumChecked;
      }
    }this.setDrawBoundsFromWrappedComponentBounds_hf6scw$(Kotlin.isType(tmp$ = this.parent, UiContainer) ? tmp$ : null, ctx);
  };
  UiComponent.prototype.setDrawBoundsFromWrappedComponentBounds_hf6scw$ = function (parentContainer, ctx) {
    if (parentContainer != null) {
      var a = this.componentBounds.min.x;
      var b = parentContainer.drawBounds.min.x;
      var bndMinX = Math_0.max(a, b);
      var a_0 = this.componentBounds.min.y;
      var b_0 = parentContainer.drawBounds.min.y;
      var bndMinY = Math_0.max(a_0, b_0);
      var a_1 = this.componentBounds.min.z;
      var b_1 = parentContainer.drawBounds.min.z;
      var bndMinZ = Math_0.max(a_1, b_1);
      var a_2 = this.componentBounds.max.x;
      var b_2 = parentContainer.drawBounds.max.x;
      var bndMaxX = Math_0.min(a_2, b_2);
      var a_3 = this.componentBounds.max.y;
      var b_3 = parentContainer.drawBounds.max.y;
      var bndMaxY = Math_0.min(a_3, b_3);
      var a_4 = this.componentBounds.max.z;
      var b_4 = parentContainer.drawBounds.max.z;
      var bndMaxZ = Math_0.min(a_4, b_4);
      if (bndMinX >= bndMaxX || bndMinY >= bndMaxY || bndMinZ >= bndMaxZ) {
        this.drawBounds.clear();
      } else {
        this.drawBounds.set_w8lrqs$(bndMinX, bndMinY, bndMinZ, bndMaxX, bndMaxY, bndMaxZ);
      }
    } else {
      this.drawBounds.set_ea4od8$(this.componentBounds);
    }
    this.bounds.set_ea4od8$(this.drawBounds);
  };
  UiComponent.prototype.setLocalBounds = function () {
    this.bounds.set_ea4od8$(this.drawBounds);
  };
  UiComponent.prototype.setThemeProps_aemszp$ = function (ctx) {
  };
  UiComponent.prototype.createThemeUi_aemszp$ = function (ctx) {
    return this.root.theme.componentUi(this);
  };
  UiComponent.prototype.collectDrawCommands_oco14p$ = function (renderPass, ctx) {
    if (this.isVisible && this.alpha > 0.0 && !this.bounds.isEmpty) {
      this.ui.prop.onRender_aemszp$(ctx);
      TransformGroup.prototype.collectDrawCommands_oco14p$.call(this, renderPass, ctx);
    }};
  UiComponent.prototype.doLayout_sq5703$ = function (layoutBounds, ctx) {
    var tmp$;
    if (!this.componentBounds.isFuzzyEqual_ea4od8$(layoutBounds)) {
      this.componentBounds.set_ea4od8$(layoutBounds);
      this.requestUiUpdate();
    }this.setDrawBoundsFromWrappedComponentBounds_hf6scw$(Kotlin.isType(tmp$ = this.parent, UiContainer) ? tmp$ : null, ctx);
  };
  UiComponent.prototype.rayTest_jljx4v$ = function (test) {
    if (this.alpha !== 0.0) {
      var hitNode = test.hitNode;
      TransformGroup.prototype.rayTest_jljx4v$.call(this, test);
      if (hitNode !== test.hitNode && !Kotlin.isType(test.hitNode, UiComponent)) {
        test.setHit_ulhqnp$(this, test.hitPosition);
      }}};
  UiComponent.prototype.computeLocalPickRay_wswg9$ = function (pointer, ctx, result) {
    var success = this.root.scene.computeRay_wswg9$(pointer, ctx, result);
    if (success) {
      this.toLocalCoords_w1lst9$(result.origin);
      this.toLocalCoords_w1lst9$(result.direction, 0.0).norm();
    }return success;
  };
  function UiComponent_init$lambda($receiver, ptr, rt, ctx) {
    var tmp$, tmp$_0;
    var p = Kotlin.isType(tmp$ = $receiver.parent, UiComponent) ? tmp$ : null;
    if (p != null) {
      tmp$_0 = p.onHoverEnter;
      for (var i = 0; i !== tmp$_0.size; ++i) {
        p.onHoverEnter.get_za3lpa$(i)(p, ptr, rt, ctx);
      }
    }return Unit;
  }
  function UiComponent_init$lambda_0($receiver, ptr, rt, ctx) {
    var tmp$, tmp$_0;
    var p = Kotlin.isType(tmp$ = $receiver.parent, UiComponent) ? tmp$ : null;
    if (p != null) {
      tmp$_0 = p.onHoverExit;
      for (var i = 0; i !== tmp$_0.size; ++i) {
        p.onHoverExit.get_za3lpa$(i)(p, ptr, rt, ctx);
      }
    }return Unit;
  }
  function UiComponent_init$lambda_1($receiver, ptr, rt, ctx) {
    var tmp$, tmp$_0;
    var p = Kotlin.isType(tmp$ = $receiver.parent, UiComponent) ? tmp$ : null;
    if (p != null) {
      tmp$_0 = p.onHover;
      for (var i = 0; i !== tmp$_0.size; ++i) {
        p.onHover.get_za3lpa$(i)(p, ptr, rt, ctx);
      }
    }return Unit;
  }
  UiComponent.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UiComponent',
    interfaces: [TransformGroup]
  };
  function UiContainer(name, root) {
    UiComponent.call(this, name, root);
    this.posInParent = MutableVec3f_init();
    this.contentScale = 1.0;
    this.customTransform = UiContainer$customTransform$lambda;
    this.scrollOffsetMut = MutableVec3f_init();
    this.isScrollDirty = true;
    this.childComponents_65igag$_0 = ArrayList_init_0();
    this.scrollHandler_xer21f$_0 = null;
    this.tmpChildBounds_j2uogg$_0 = new BoundingBox();
    this.tmpVec1_md9h9y$_0 = MutableVec3f_init();
    this.tmpVec2_md9hat$_0 = MutableVec3f_init();
  }
  Object.defineProperty(UiContainer.prototype, 'contentBounds', {
    get: function () {
      return this.childrenBounds;
    }
  });
  Object.defineProperty(UiContainer.prototype, 'scrollOffset', {
    get: function () {
      return this.scrollOffsetMut;
    }
  });
  UiContainer.prototype.updateTheme_aemszp$ = function (ctx) {
    var tmp$;
    UiComponent.prototype.updateTheme_aemszp$.call(this, ctx);
    tmp$ = this.childComponents_65igag$_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.childComponents_65igag$_0.get_za3lpa$(i).requestThemeUpdate();
    }
  };
  UiContainer.prototype.updateComponentAlpha = function () {
    var tmp$;
    UiComponent.prototype.updateComponentAlpha.call(this);
    tmp$ = this.childComponents_65igag$_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.childComponents_65igag$_0.get_za3lpa$(i).alpha = this.alpha;
    }
  };
  UiContainer.prototype.updateComponent_aemszp$ = function (ctx) {
    var tmp$, tmp$_0;
    if (this.isScrollDirty) {
      this.isScrollDirty = false;
      (tmp$ = this.scrollHandler_xer21f$_0) != null ? (tmp$.requestUiUpdate(), Unit) : null;
      this.updateTransform();
    }UiComponent.prototype.updateComponent_aemszp$.call(this, ctx);
    tmp$_0 = this.childComponents_65igag$_0;
    for (var i = 0; i !== tmp$_0.size; ++i) {
      this.childComponents_65igag$_0.get_za3lpa$(i).updateComponent_aemszp$(ctx);
    }
  };
  UiContainer.prototype.doLayout_sq5703$ = function (layoutBounds, ctx) {
    var tmp$;
    this.applyBounds_sq5703$(layoutBounds, ctx);
    this.contentBounds.clear();
    tmp$ = this.childComponents_65igag$_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      var child = this.childComponents_65igag$_0.get_za3lpa$(i);
      this.computeChildLayoutBounds_q1axsv$(this.tmpChildBounds_j2uogg$_0, child, ctx);
      this.contentBounds.add_ea4od8$(this.tmpChildBounds_j2uogg$_0);
      child.doLayout_sq5703$(this.tmpChildBounds_j2uogg$_0, ctx);
    }
  };
  UiContainer.prototype.createThemeUi_aemszp$ = function (ctx) {
    return this.root.theme.containerUi(this);
  };
  UiContainer.prototype.setDrawBoundsFromWrappedComponentBounds_hf6scw$ = function (parentContainer, ctx) {
    UiComponent.prototype.setDrawBoundsFromWrappedComponentBounds_hf6scw$.call(this, parentContainer, ctx);
    if (!this.drawBounds.isEmpty) {
      this.drawBounds.move_czzhiu$(this.scrollOffset);
      this.syncNodeBounds_aemszp$(ctx);
    } else {
      this.bounds.clear();
    }
  };
  UiContainer.prototype.setLocalBounds = function () {
    var tmp$;
    this.childrenBounds.clear();
    tmp$ = this.childComponents_65igag$_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.childrenBounds.add_ea4od8$(this.childComponents_65igag$_0.get_za3lpa$(i).componentBounds);
    }
    this.bounds.set_ea4od8$(this.childrenBounds);
  };
  UiContainer.prototype.applyBounds_sq5703$ = function (bounds, ctx) {
    if (!bounds.size.isFuzzyEqual_2qa7tb$(this.componentBounds.size) || !bounds.min.isFuzzyEqual_2qa7tb$(this.posInParent)) {
      this.posInParent.set_czzhiu$(bounds.min);
      this.updateTransform();
      this.componentBounds.set_4lfkt4$(Vec3f$Companion_getInstance().ZERO, bounds.size);
      this.drawBounds.set_ea4od8$(this.componentBounds);
      this.syncNodeBounds_aemszp$(ctx);
      this.requestUiUpdate();
    }};
  UiContainer.prototype.syncNodeBounds_aemszp$ = function (ctx) {
    this.tmpVec1_md9h9y$_0.set_czzhiu$(this.drawBounds.min);
    this.tmpVec2_md9hat$_0.set_czzhiu$(this.drawBounds.max);
    this.transform.transform_w1lst9$(this.tmpVec1_md9h9y$_0);
    this.transform.transform_w1lst9$(this.tmpVec2_md9hat$_0);
    var minX;
    var maxX;
    var minY;
    var maxY;
    var minZ;
    var maxZ;
    if (this.tmpVec1_md9h9y$_0.x < this.tmpVec2_md9hat$_0.x) {
      minX = this.tmpVec1_md9h9y$_0.x;
      maxX = this.tmpVec2_md9hat$_0.x;
    } else {
      minX = this.tmpVec2_md9hat$_0.x;
      maxX = this.tmpVec2_md9hat$_0.x;
    }
    if (this.tmpVec1_md9h9y$_0.y < this.tmpVec2_md9hat$_0.y) {
      minY = this.tmpVec1_md9h9y$_0.y;
      maxY = this.tmpVec2_md9hat$_0.y;
    } else {
      minY = this.tmpVec2_md9hat$_0.y;
      maxY = this.tmpVec1_md9h9y$_0.y;
    }
    if (this.tmpVec1_md9h9y$_0.z < this.tmpVec2_md9hat$_0.z) {
      minZ = this.tmpVec1_md9h9y$_0.z;
      maxZ = this.tmpVec2_md9hat$_0.z;
    } else {
      minZ = this.tmpVec2_md9hat$_0.z;
      maxZ = this.tmpVec1_md9h9y$_0.z;
    }
    this.bounds.set_w8lrqs$(minX, minY, minZ, maxX, maxY, maxZ);
  };
  UiContainer.prototype.updateTransform = function () {
    this.customTransform(this.setIdentity().scale_y2kzbl$(this.contentScale, this.contentScale, this.contentScale).translate_czzhiu$(this.posInParent).translate_y2kzbl$(-this.scrollOffsetMut.x, -this.scrollOffsetMut.y, -this.scrollOffsetMut.z));
  };
  UiContainer.prototype.computeChildLayoutBounds_q1axsv$ = function (result, child, ctx) {
    var x = child.layoutSpec.x.toUnits_dleff0$(this.componentBounds.size.x, this.dpi);
    var y = child.layoutSpec.y.toUnits_dleff0$(this.componentBounds.size.y, this.dpi);
    var z = child.layoutSpec.z.toUnits_dleff0$(this.componentBounds.size.z, this.dpi);
    var w = child.layoutSpec.width.toUnits_dleff0$(this.componentBounds.size.x, this.dpi);
    var h = child.layoutSpec.height.toUnits_dleff0$(this.componentBounds.size.y, this.dpi);
    var d = child.layoutSpec.depth.toUnits_dleff0$(this.componentBounds.size.z, this.dpi);
    if (x < 0) {
      x += this.width;
    }if (y < 0) {
      y += this.height;
    }if (z < 0) {
      z += this.depth;
    }result.set_w8lrqs$(x, y, z, x + w, y + h, z + d);
  };
  UiContainer.prototype.setScrollOffset_czzhiu$ = function (offset) {
    this.setScrollOffset_y2kzbl$(offset.x, offset.y, offset.z);
  };
  UiContainer.prototype.setScrollOffset_y2kzbl$ = function (offX, offY, offZ) {
    if (offX !== this.scrollOffsetMut.x || offY !== this.scrollOffsetMut.y || offZ !== this.scrollOffsetMut.z) {
      this.scrollOffsetMut.set_y2kzbl$(offX, offY, offZ);
      this.isScrollDirty = true;
    }};
  UiContainer.prototype.requestUpdateTransform = function () {
    this.isScrollDirty = true;
  };
  UiContainer.prototype.addNode_xtids1$$default = function (node, index) {
    var tmp$;
    if (!this.children.isEmpty() && index < 0 && Kotlin.isType(last(this.children), ScrollHandler)) {
      tmp$ = get_lastIndex(this.children);
    } else {
      tmp$ = index;
    }
    var idx = tmp$;
    this.addNode_xtids1$(node, idx, UiComponent.prototype.addNode_xtids1$$default.bind(this));
    if (Kotlin.isType(node, UiComponent)) {
      this.childComponents_65igag$_0.add_11rb$(node);
      if (Kotlin.isType(node, ScrollHandler)) {
        this.scrollHandler_xer21f$_0 = node;
      }}};
  UiContainer.prototype.removeNode_f1kmr1$ = function (node) {
    if (Kotlin.isType(node, UiComponent)) {
      this.childComponents_65igag$_0.remove_11rb$(node);
      if (equals(node, this.scrollHandler_xer21f$_0)) {
        this.scrollHandler_xer21f$_0 = null;
      }}return UiComponent.prototype.removeNode_f1kmr1$.call(this, node);
  };
  UiContainer.prototype.removeAllChildren = function () {
    UiComponent.prototype.removeAllChildren.call(this);
    this.childComponents_65igag$_0.clear();
    this.scrollHandler_xer21f$_0 = null;
  };
  function UiContainer$customTransform$lambda($receiver) {
    return Unit;
  }
  UiContainer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UiContainer',
    interfaces: [UiComponent]
  };
  function embeddedUi($receiver, width, height, contentHeight, dpi, block) {
    if (dpi === void 0)
      dpi = 300.0;
    var ui = new UiRoot($receiver, dpi);
    ui.contentHeight = contentHeight;
    ui.globalWidth = width;
    ui.globalHeight = height;
    block(ui);
    return ui;
  }
  function uiScene$lambda$lambda(closure$block) {
    return function ($receiver) {
      $receiver.isFillViewport = true;
      closure$block($receiver);
      return Unit;
    };
  }
  function uiScene(dpi, name, overlay, block) {
    if (dpi === void 0)
      dpi = 96.0;
    if (name === void 0)
      name = null;
    if (overlay === void 0)
      overlay = true;
    var $receiver = new Scene(name);
    var $receiver_0 = new OrthographicCamera();
    $receiver_0.isClipToViewport = true;
    $receiver_0.near = -1000.0;
    $receiver_0.far = 1000.0;
    $receiver.camera = $receiver_0;
    if (overlay) {
      $receiver.mainRenderPass.clearColor = null;
    }$receiver.unaryPlus_uv0sim$(embeddedUi($receiver, 1.0, 1.0, null, dpi, uiScene$lambda$lambda(block)));
    return $receiver;
  }
  function UiRoot(scene, uiDpi, name) {
    if (name === void 0)
      name = 'UiRoot';
    Node.call(this, name);
    this.scene = scene;
    this.uiDpi = uiDpi;
    this.globalWidth_rlfw80$_0 = 1.0;
    this.globalHeight_5sxs8p$_0 = 1.0;
    this.globalDepth_ijlk77$_0 = 1.0;
    this.isFillViewport_fr53nm$_0 = false;
    this.theme_208sxy$_0 = UiTheme$Companion_getInstance().DARK;
    this.content = new UiContainer(name + '-content', this);
    this.contentHeight_17xsyl$_0 = null;
    this.isLayoutNeeded_0 = true;
    this.content.parent = this;
    this.content.layoutSpec.setSize_4ujscr$(pcs(100.0), pcs(100.0), pcs(100.0));
  }
  Object.defineProperty(UiRoot.prototype, 'globalWidth', {
    get: function () {
      return this.globalWidth_rlfw80$_0;
    },
    set: function (value) {
      if (value !== this.globalWidth_rlfw80$_0) {
        this.globalWidth_rlfw80$_0 = value;
        this.isLayoutNeeded_0 = true;
      }}
  });
  Object.defineProperty(UiRoot.prototype, 'globalHeight', {
    get: function () {
      return this.globalHeight_5sxs8p$_0;
    },
    set: function (value) {
      if (value !== this.globalHeight_5sxs8p$_0) {
        this.globalHeight_5sxs8p$_0 = value;
        this.isLayoutNeeded_0 = true;
      }}
  });
  Object.defineProperty(UiRoot.prototype, 'globalDepth', {
    get: function () {
      return this.globalDepth_ijlk77$_0;
    },
    set: function (value) {
      if (value !== this.globalDepth_ijlk77$_0) {
        this.globalDepth_ijlk77$_0 = value;
        this.isLayoutNeeded_0 = true;
      }}
  });
  Object.defineProperty(UiRoot.prototype, 'isFillViewport', {
    get: function () {
      return this.isFillViewport_fr53nm$_0;
    },
    set: function (value) {
      if (value !== this.isFillViewport_fr53nm$_0) {
        this.isFillViewport_fr53nm$_0 = value;
        this.isLayoutNeeded_0 = true;
      }}
  });
  Object.defineProperty(UiRoot.prototype, 'theme', {
    get: function () {
      return this.theme_208sxy$_0;
    },
    set: function (value) {
      if (!equals(value, this.theme_208sxy$_0)) {
        this.theme_208sxy$_0 = value;
        this.content.requestThemeUpdate();
      }}
  });
  Object.defineProperty(UiRoot.prototype, 'contentHeight', {
    get: function () {
      return this.contentHeight_17xsyl$_0;
    },
    set: function (value) {
      this.contentHeight_17xsyl$_0 = value;
      this.isLayoutNeeded_0 = true;
    }
  });
  Object.defineProperty(UiRoot.prototype, 'bounds', {
    get: function () {
      return this.content.bounds;
    }
  });
  UiRoot.prototype.setGlobalSize_y2kzbl$ = function (width, height, depth) {
    this.isFillViewport = false;
    this.globalWidth = width;
    this.globalHeight = height;
    this.globalDepth = depth;
  };
  UiRoot.prototype.requestLayout = function () {
    this.isLayoutNeeded_0 = true;
  };
  UiRoot.prototype.update_oco14p$ = function (renderPass, ctx) {
    var viewport = this.scene.mainRenderPass.viewport;
    if (this.isFillViewport && (this.globalWidth !== viewport.width || this.globalHeight !== viewport.height)) {
      this.globalWidth = viewport.width;
      this.globalHeight = viewport.height;
    }if (this.isLayoutNeeded_0) {
      this.isLayoutNeeded_0 = false;
      var contentScale = 1.0;
      var ch = this.contentHeight;
      if (ch != null) {
        contentScale = 1.0 / (ch.toUnits_dleff0$(this.globalHeight, this.uiDpi) / this.globalHeight);
      }var contentBounds = (new BoundingBox()).set_w8lrqs$(0.0, 0.0, 0.0, this.globalWidth / contentScale, this.globalHeight / contentScale, this.globalDepth / contentScale);
      this.content.contentScale = contentScale;
      this.content.doLayout_sq5703$(contentBounds, ctx);
    }this.content.update_oco14p$(renderPass, ctx);
    Node.prototype.update_oco14p$.call(this, renderPass, ctx);
    this.content.updateComponent_aemszp$(ctx);
  };
  UiRoot.prototype.collectDrawCommands_oco14p$ = function (renderPass, ctx) {
    Node.prototype.collectDrawCommands_oco14p$.call(this, renderPass, ctx);
    this.content.collectDrawCommands_oco14p$(renderPass, ctx);
  };
  UiRoot.prototype.dispose_aemszp$ = function (ctx) {
    Node.prototype.dispose_aemszp$.call(this, ctx);
    this.content.dispose_aemszp$(ctx);
  };
  UiRoot.prototype.rayTest_jljx4v$ = function (test) {
    Node.prototype.rayTest_jljx4v$.call(this, test);
    this.content.rayTest_jljx4v$(test);
  };
  UiRoot.prototype.unaryPlus_uv0sim$ = function ($receiver) {
    this.content.addNode_xtids1$($receiver);
  };
  UiRoot.prototype.unaryPlus_63m4fk$ = function ($receiver) {
    this.content.addNode_xtids1$($receiver);
    this.content.addNode_xtids1$($receiver.menuButton_8be2vx$);
  };
  UiRoot.prototype.component_qphi6d$ = function (name, block) {
    var $receiver = new UiComponent(name, this);
    block($receiver);
    return $receiver;
  };
  UiRoot.prototype.container_t34sov$ = function (name, block) {
    var $receiver = new UiContainer(name, this);
    block($receiver);
    return $receiver;
  };
  UiRoot.prototype.drawerMenu_enmky4$ = function (name, title, width, block) {
    if (title === void 0)
      title = null;
    if (width === void 0)
      width = dps(250.0, true);
    var $receiver = new DrawerMenu(width, title, name, this);
    block($receiver);
    return $receiver;
  };
  UiRoot.prototype.button_9zrh0o$ = function (name, block) {
    var $receiver = new Button(name, this);
    block($receiver);
    return $receiver;
  };
  UiRoot.prototype.label_tokfmu$ = function (name, block) {
    var $receiver = new Label(name, this);
    block($receiver);
    return $receiver;
  };
  UiRoot.prototype.slider_87iqh3$ = function (name, block) {
    return this.slider_91a1dk$(name, 0.0, 100.0, 50.0, block);
  };
  UiRoot.prototype.slider_91a1dk$ = function (name, min, max, value, block) {
    var $receiver = new Slider(name, min, max, value, this);
    block($receiver);
    return $receiver;
  };
  UiRoot.prototype.textField_peizi7$ = function (name, block) {
    var $receiver = new TextField(name, this);
    block($receiver);
    return $receiver;
  };
  UiRoot.prototype.toggleButton_6j87po$ = function (name, block) {
    var $receiver = new ToggleButton(name, this);
    block($receiver);
    return $receiver;
  };
  UiRoot.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UiRoot',
    interfaces: [Node]
  };
  var ShaderModel$findNode$lambda_2 = wrapFunction(function () {
    var equals = Kotlin.equals;
    var throwCCE = Kotlin.throwCCE;
    return function (closure$stage, closure$name, typeClosure$T, isT) {
      return function (it) {
        if ((it.stage.mask & closure$stage.mask) !== 0) {
          var isT_0 = isT;
          var name = closure$name;
          var tmp$;
          var $receiver = it.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_0;
            tmp$_0 = $receiver.iterator();
            while (tmp$_0.hasNext()) {
              var element = tmp$_0.next();
              if (equals(element.name, name) && isT_0(element)) {
                firstOrNull$result = element;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = Kotlin.orNull(isT_0)(tmp$ = firstOrNull$result) ? tmp$ : throwCCE();
          if (node != null) {
            return node;
          }}return Unit;
      };
    };
  });
  function UiShader(font) {
    UiShader$Companion_getInstance();
    if (font === void 0)
      font = new SingleColorTexture(Color$Companion_getInstance().WHITE);
    ModeledShader.call(this, UiShader$Companion_getInstance().uiShaderModel_0());
    this.uAlpha_0 = null;
    this.uFontSampler_0 = null;
    this.alpha_dkua5e$_0 = 1.0;
    this.font_1rx0e3$_0 = font;
  }
  Object.defineProperty(UiShader.prototype, 'alpha', {
    get: function () {
      return this.alpha_dkua5e$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0;
      this.alpha_dkua5e$_0 = value;
      (tmp$_0 = (tmp$ = this.uAlpha_0) != null ? tmp$.uniform : null) != null ? (tmp$_0.value = value) : null;
    }
  });
  Object.defineProperty(UiShader.prototype, 'font', {
    get: function () {
      return this.font_1rx0e3$_0;
    },
    set: function (value) {
      var tmp$;
      this.font_1rx0e3$_0 = value;
      (tmp$ = this.uFontSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  UiShader.prototype.createPipeline_y7vss5$ = function (mesh, builder, ctx) {
    builder.cullMethod = CullMethod$NO_CULLING_getInstance();
    builder.depthTest = DepthCompareOp$LESS_EQUAL_getInstance();
    return ModeledShader.prototype.createPipeline_y7vss5$.call(this, mesh, builder, ctx);
  };
  UiShader.prototype.onPipelineCreated_lfrgcb$ = function (pipeline) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    ModeledShader.prototype.onPipelineCreated_lfrgcb$.call(this, pipeline);
    var $this = this.model;
    var name = UiShader$Companion_getInstance().U_ALPHA_0;
    var stage;
    var findNode_3klnlw$result;
    findNode_3klnlw$break: do {
      stage = ShaderStage.ALL;
      var tmp$_3;
      tmp$_3 = $this.stages.values.iterator();
      while (tmp$_3.hasNext()) {
        var element = tmp$_3.next();
        if ((element.stage.mask & stage.mask) !== 0) {
          var tmp$_4;
          var $receiver = element.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_5;
            tmp$_5 = $receiver.iterator();
            while (tmp$_5.hasNext()) {
              var element_0 = tmp$_5.next();
              if (equals(element_0.name, name) && Kotlin.isType(element_0, PushConstantNode1f)) {
                firstOrNull$result = element_0;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = (tmp$_4 = firstOrNull$result) == null || Kotlin.isType(tmp$_4, PushConstantNode1f) ? tmp$_4 : throwCCE();
          if (node != null) {
            findNode_3klnlw$result = node;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result = null;
    }
     while (false);
    this.uAlpha_0 = findNode_3klnlw$result;
    (tmp$_0 = (tmp$ = this.uAlpha_0) != null ? tmp$.uniform : null) != null ? (tmp$_0.value = this.alpha) : null;
    var $this_0 = this.model;
    var name_0 = UiShader$Companion_getInstance().U_FONT_TEX_0;
    var stage_0;
    var findNode_3klnlw$result_0;
    findNode_3klnlw$break: do {
      stage_0 = ShaderStage.ALL;
      var tmp$_6;
      tmp$_6 = $this_0.stages.values.iterator();
      while (tmp$_6.hasNext()) {
        var element_1 = tmp$_6.next();
        if ((element_1.stage.mask & stage_0.mask) !== 0) {
          var tmp$_7;
          var $receiver_0 = element_1.nodes;
          var firstOrNull$result_0;
          firstOrNull$break: do {
            var tmp$_8;
            tmp$_8 = $receiver_0.iterator();
            while (tmp$_8.hasNext()) {
              var element_2 = tmp$_8.next();
              if (equals(element_2.name, name_0) && Kotlin.isType(element_2, TextureNode)) {
                firstOrNull$result_0 = element_2;
                break firstOrNull$break;
              }}
            firstOrNull$result_0 = null;
          }
           while (false);
          var node_0 = (tmp$_7 = firstOrNull$result_0) == null || Kotlin.isType(tmp$_7, TextureNode) ? tmp$_7 : throwCCE();
          if (node_0 != null) {
            findNode_3klnlw$result_0 = node_0;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_0 = null;
    }
     while (false);
    this.uFontSampler_0 = (tmp$_1 = findNode_3klnlw$result_0) != null ? tmp$_1.sampler : null;
    (tmp$_2 = this.uFontSampler_0) != null ? (tmp$_2.texture = this.font) : null;
  };
  function UiShader$Companion() {
    UiShader$Companion_instance = this;
    this.UI_MESH_ATTRIBS = listOf([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().TEXTURE_COORDS, Attribute$Companion_getInstance().COLORS]);
    this.U_ALPHA_0 = 'uAlpha';
    this.U_FONT_TEX_0 = 'uFontTex';
  }
  UiShader$Companion.prototype.uiShaderModel_0 = function () {
    var $receiver = new ShaderModel('UI Shader');
    var ifTexCoords = {v: null};
    var ifColors = {v: null};
    var $receiver_0 = new ShaderModel$VertexStageBuilder($receiver);
    ifTexCoords.v = $receiver_0.stageInterfaceNode_iikjwn$('ifTexCoords', $receiver_0.attrTexCoords().output);
    ifColors.v = $receiver_0.stageInterfaceNode_iikjwn$('ifColors', $receiver_0.attrColors().output);
    $receiver_0.positionOutput = $receiver_0.simpleVertexPositionNode().outVec4;
    var $receiver_1 = new ShaderModel$FragmentStageBuilder($receiver);
    var alpha = $receiver_1.pushConstantNode1f_61zpoe$(this.U_ALPHA_0);
    var fontSampler = $receiver_1.textureSamplerNode_ce41yx$($receiver_1.textureNode_61zpoe$(this.U_FONT_TEX_0), ifTexCoords.v.output);
    var mulAlpha = $receiver_1.multiplyNode_ze33is$(fontSampler.outColor, alpha.output);
    var alphaColor = $receiver_1.colorAlphaNode_ze33is$(ifColors.v.output, mulAlpha.output);
    $receiver_1.colorOutput_a3v4si$($receiver_1.unlitMaterialNode_r20yfm$(alphaColor.outAlphaColor).outColor);
    return $receiver;
  };
  UiShader$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var UiShader$Companion_instance = null;
  function UiShader$Companion_getInstance() {
    if (UiShader$Companion_instance === null) {
      new UiShader$Companion();
    }return UiShader$Companion_instance;
  }
  UiShader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UiShader',
    interfaces: [ModeledShader]
  };
  function UiTheme() {
    UiTheme$Companion_getInstance();
    this.backgroundColor_yt8dmb$_0 = Color$Companion_getInstance().BLACK;
    this.foregroundColor_sxfy5a$_0 = Color$Companion_getInstance().WHITE;
    this.accentColor_2rzgrt$_0 = Color$Companion_getInstance().LIME;
    this.standardFontProps_v4eg6a$_0 = new FontProps(Font$Companion_getInstance().SYSTEM_FONT, 20.0);
    this.titleFontProps_idgbxl$_0 = new FontProps(Font$Companion_getInstance().SYSTEM_FONT, 28.0);
    this.componentUi_rare29$_0 = getCallableRef('BlurredComponentUi', function (component) {
      return new BlurredComponentUi(component);
    });
    this.containerUi_233tf$_0 = UiTheme$containerUi$lambda;
    this.buttonUi_667cek$_0 = getCallableRef('ButtonUi', function (button, baseUi) {
      return new ButtonUi(button, baseUi);
    });
    this.labelUi_9aobqe$_0 = getCallableRef('LabelUi', function (label, baseUi) {
      return new LabelUi(label, baseUi);
    });
    this.scrollHandlerUi_k8xkq9$_0 = getCallableRef('ScrollHandlerUi', function (scrollHandler) {
      return new ScrollHandlerUi(scrollHandler);
    });
    this.sliderUi_76d1mr$_0 = getCallableRef('SliderUi', function (slider, baseUi) {
      return new SliderUi(slider, baseUi);
    });
    this.textFieldUi_fr4mch$_0 = getCallableRef('TextFieldUi', function (textField, baseUi) {
      return new TextFieldUi(textField, baseUi);
    });
    this.toggleButtonUi_2tk5m0$_0 = getCallableRef('ToggleButtonUi', function (tb, baseUi) {
      return new ToggleButtonUi(tb, baseUi);
    });
  }
  Object.defineProperty(UiTheme.prototype, 'backgroundColor', {
    get: function () {
      return this.backgroundColor_yt8dmb$_0;
    },
    set: function (backgroundColor) {
      this.backgroundColor_yt8dmb$_0 = backgroundColor;
    }
  });
  Object.defineProperty(UiTheme.prototype, 'foregroundColor', {
    get: function () {
      return this.foregroundColor_sxfy5a$_0;
    },
    set: function (foregroundColor) {
      this.foregroundColor_sxfy5a$_0 = foregroundColor;
    }
  });
  Object.defineProperty(UiTheme.prototype, 'accentColor', {
    get: function () {
      return this.accentColor_2rzgrt$_0;
    },
    set: function (accentColor) {
      this.accentColor_2rzgrt$_0 = accentColor;
    }
  });
  UiTheme.prototype.standardFont_oei9ky$ = function (uiDpi, ctx) {
    return uiFont(this.standardFontProps.family, this.standardFontProps.sizePts, uiDpi, ctx, this.standardFontProps.style, this.standardFontProps.chars);
  };
  Object.defineProperty(UiTheme.prototype, 'standardFontProps', {
    get: function () {
      return this.standardFontProps_v4eg6a$_0;
    },
    set: function (standardFontProps) {
      this.standardFontProps_v4eg6a$_0 = standardFontProps;
    }
  });
  UiTheme.prototype.titleFont_oei9ky$ = function (uiDpi, ctx) {
    return uiFont(this.titleFontProps.family, this.titleFontProps.sizePts, uiDpi, ctx, this.titleFontProps.style, this.titleFontProps.chars);
  };
  Object.defineProperty(UiTheme.prototype, 'titleFontProps', {
    get: function () {
      return this.titleFontProps_idgbxl$_0;
    },
    set: function (titleFontProps) {
      this.titleFontProps_idgbxl$_0 = titleFontProps;
    }
  });
  UiTheme.prototype.newComponentUi_gzmg0q$ = function (c) {
    return this.componentUi(c);
  };
  Object.defineProperty(UiTheme.prototype, 'componentUi', {
    get: function () {
      return this.componentUi_rare29$_0;
    },
    set: function (componentUi) {
      this.componentUi_rare29$_0 = componentUi;
    }
  });
  UiTheme.prototype.newContainerUi_xcf31a$ = function (c) {
    return this.containerUi(c);
  };
  Object.defineProperty(UiTheme.prototype, 'containerUi', {
    get: function () {
      return this.containerUi_233tf$_0;
    },
    set: function (containerUi) {
      this.containerUi_233tf$_0 = containerUi;
    }
  });
  UiTheme.prototype.newButtonUi_t4rm0v$ = function (c) {
    return this.buttonUi(c, this.newComponentUi_gzmg0q$(c));
  };
  Object.defineProperty(UiTheme.prototype, 'buttonUi', {
    get: function () {
      return this.buttonUi_667cek$_0;
    },
    set: function (buttonUi) {
      this.buttonUi_667cek$_0 = buttonUi;
    }
  });
  UiTheme.prototype.newLabelUi_wviu0r$ = function (c) {
    return this.labelUi(c, this.newComponentUi_gzmg0q$(c));
  };
  Object.defineProperty(UiTheme.prototype, 'labelUi', {
    get: function () {
      return this.labelUi_9aobqe$_0;
    },
    set: function (labelUi) {
      this.labelUi_9aobqe$_0 = labelUi;
    }
  });
  UiTheme.prototype.newScrollHandlerUi_dz938y$ = function (c) {
    return this.scrollHandlerUi(c);
  };
  Object.defineProperty(UiTheme.prototype, 'scrollHandlerUi', {
    get: function () {
      return this.scrollHandlerUi_k8xkq9$_0;
    },
    set: function (scrollHandlerUi) {
      this.scrollHandlerUi_k8xkq9$_0 = scrollHandlerUi;
    }
  });
  UiTheme.prototype.newSliderUi_l85jm8$ = function (c) {
    return this.sliderUi(c, this.newComponentUi_gzmg0q$(c));
  };
  Object.defineProperty(UiTheme.prototype, 'sliderUi', {
    get: function () {
      return this.sliderUi_76d1mr$_0;
    },
    set: function (sliderUi) {
      this.sliderUi_76d1mr$_0 = sliderUi;
    }
  });
  UiTheme.prototype.newTextFieldUi_p39bdq$ = function (c) {
    return this.textFieldUi(c, this.newComponentUi_gzmg0q$(c));
  };
  Object.defineProperty(UiTheme.prototype, 'textFieldUi', {
    get: function () {
      return this.textFieldUi_fr4mch$_0;
    },
    set: function (textFieldUi) {
      this.textFieldUi_fr4mch$_0 = textFieldUi;
    }
  });
  UiTheme.prototype.newToggleButtonUi_r83hfv$ = function (c) {
    return this.toggleButtonUi(c, this.newComponentUi_gzmg0q$(c));
  };
  Object.defineProperty(UiTheme.prototype, 'toggleButtonUi', {
    get: function () {
      return this.toggleButtonUi_2tk5m0$_0;
    },
    set: function (toggleButtonUi) {
      this.toggleButtonUi_2tk5m0$_0 = toggleButtonUi;
    }
  });
  function UiTheme$Companion() {
    UiTheme$Companion_instance = this;
    this.DARK = theme(void 0, UiTheme$Companion$DARK$lambda);
    this.DARK_SIMPLE = theme(this.DARK, UiTheme$Companion$DARK_SIMPLE$lambda);
    this.LIGHT = theme(void 0, UiTheme$Companion$LIGHT$lambda);
    this.LIGHT_SIMPLE = theme(this.LIGHT, UiTheme$Companion$LIGHT_SIMPLE$lambda);
  }
  function UiTheme$Companion$DARK$lambda($receiver) {
    $receiver.backgroundColor_d7aj7k$(Color$Companion_getInstance().fromHex_61zpoe$('00141980'));
    $receiver.foregroundColor_d7aj7k$(Color$Companion_getInstance().WHITE);
    $receiver.accentColor_d7aj7k$(Color$Companion_getInstance().LIME);
    return Unit;
  }
  function UiTheme$Companion$DARK_SIMPLE$lambda($receiver) {
    $receiver.componentUi_mloaa0$(getCallableRef('SimpleComponentUi', function (component) {
      return new SimpleComponentUi(component);
    }));
    return Unit;
  }
  function UiTheme$Companion$LIGHT$lambda($receiver) {
    $receiver.backgroundColor_d7aj7k$(Color$Companion_getInstance().WHITE.withAlpha_mx4ult$(0.6));
    $receiver.foregroundColor_d7aj7k$(Color$Companion_getInstance().MD_BLUE_GREY_900);
    $receiver.accentColor_d7aj7k$(Color$Companion_getInstance().MD_PINK);
    return Unit;
  }
  function UiTheme$Companion$LIGHT_SIMPLE$lambda($receiver) {
    $receiver.componentUi_mloaa0$(getCallableRef('SimpleComponentUi', function (component) {
      return new SimpleComponentUi(component);
    }));
    return Unit;
  }
  UiTheme$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var UiTheme$Companion_instance = null;
  function UiTheme$Companion_getInstance() {
    if (UiTheme$Companion_instance === null) {
      new UiTheme$Companion();
    }return UiTheme$Companion_instance;
  }
  function UiTheme$containerUi$lambda(it) {
    return new BlankComponentUi();
  }
  UiTheme.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UiTheme',
    interfaces: []
  };
  function standardFont($receiver, ctx) {
    return $receiver.root.theme.standardFont_oei9ky$($receiver.dpi, ctx);
  }
  function titleFont($receiver, ctx) {
    return $receiver.root.theme.titleFont_oei9ky$($receiver.dpi, ctx);
  }
  function theme(base, block) {
    if (base === void 0)
      base = null;
    var builder = new ThemeBuilder(base);
    block(builder);
    return builder;
  }
  function ThemeBuilder(base) {
    UiTheme.call(this);
    if (base != null) {
      this.backgroundColor = base.backgroundColor;
      this.foregroundColor = base.foregroundColor;
      this.accentColor = base.accentColor;
      this.standardFontProps = base.standardFontProps;
      this.titleFontProps = base.titleFontProps;
      this.componentUi = base.componentUi;
      this.containerUi = base.containerUi;
      this.buttonUi = base.buttonUi;
      this.labelUi = base.labelUi;
      this.scrollHandlerUi = base.scrollHandlerUi;
      this.sliderUi = base.sliderUi;
      this.textFieldUi = base.textFieldUi;
      this.toggleButtonUi = base.toggleButtonUi;
    }}
  ThemeBuilder.prototype.backgroundColor_d7aj7k$ = function (bgColor) {
    this.backgroundColor = bgColor;
  };
  ThemeBuilder.prototype.foregroundColor_d7aj7k$ = function (fgColor) {
    this.foregroundColor = fgColor;
  };
  ThemeBuilder.prototype.accentColor_d7aj7k$ = function (fgColor) {
    this.accentColor = fgColor;
  };
  ThemeBuilder.prototype.standardFont_ttufcy$ = function (props) {
    this.standardFontProps = props;
  };
  ThemeBuilder.prototype.titleFont_ttufcy$ = function (props) {
    this.titleFontProps = props;
  };
  ThemeBuilder.prototype.componentUi_mloaa0$ = function (fab) {
    this.componentUi = fab;
  };
  ThemeBuilder.prototype.containerUi_2t3ptw$ = function (fab) {
    this.containerUi = fab;
  };
  ThemeBuilder.prototype.buttonUi_layl6g$ = function (fab) {
    this.buttonUi = fab;
  };
  ThemeBuilder.prototype.labelUi_zicoma$ = function (fab) {
    this.labelUi = fab;
  };
  ThemeBuilder.prototype.scrollHandlerUi_4p1ygc$ = function (fab) {
    this.scrollHandlerUi = fab;
  };
  ThemeBuilder.prototype.sliderUi_artm94$ = function (fab) {
    this.sliderUi = fab;
  };
  ThemeBuilder.prototype.textFieldUi_5ax6ok$ = function (fab) {
    this.textFieldUi = fab;
  };
  ThemeBuilder.prototype.toggleButtonUi_50ge0o$ = function (fab) {
    this.toggleButtonUi = fab;
  };
  ThemeBuilder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ThemeBuilder',
    interfaces: [UiTheme]
  };
  function ThemeOrCustomProp(initVal) {
    this.prop_5ushja$_0 = initVal;
    this.themeVal_jacv1h$_0 = initVal;
    this.isThemeSet_n9zltm$_0 = false;
    this.customVal_5f7u1l$_0 = initVal;
    this.isCustom_s2c3c2$_0 = false;
  }
  Object.defineProperty(ThemeOrCustomProp.prototype, 'prop', {
    get: function () {
      return this.prop_5ushja$_0;
    },
    set: function (prop) {
      this.prop_5ushja$_0 = prop;
    }
  });
  Object.defineProperty(ThemeOrCustomProp.prototype, 'themeVal', {
    get: function () {
      return this.themeVal_jacv1h$_0;
    },
    set: function (themeVal) {
      this.themeVal_jacv1h$_0 = themeVal;
    }
  });
  Object.defineProperty(ThemeOrCustomProp.prototype, 'isThemeSet', {
    get: function () {
      return this.isThemeSet_n9zltm$_0;
    },
    set: function (isThemeSet) {
      this.isThemeSet_n9zltm$_0 = isThemeSet;
    }
  });
  Object.defineProperty(ThemeOrCustomProp.prototype, 'customVal', {
    get: function () {
      return this.customVal_5f7u1l$_0;
    },
    set: function (customVal) {
      this.customVal_5f7u1l$_0 = customVal;
    }
  });
  Object.defineProperty(ThemeOrCustomProp.prototype, 'isCustom', {
    get: function () {
      return this.isCustom_s2c3c2$_0;
    },
    set: function (isCustom) {
      this.isCustom_s2c3c2$_0 = isCustom;
    }
  });
  Object.defineProperty(ThemeOrCustomProp.prototype, 'isUpdate', {
    get: function () {
      return this.isCustom && !equals(this.prop, this.customVal) || (!this.isCustom && this.isThemeSet && !equals(this.prop, this.themeVal));
    }
  });
  ThemeOrCustomProp.prototype.setTheme_11rb$ = function (themeVal) {
    this.themeVal = themeVal;
    this.isThemeSet = true;
    return this;
  };
  ThemeOrCustomProp.prototype.setCustom_11rb$ = function (customVal) {
    this.customVal = customVal;
    this.isCustom = true;
    return this;
  };
  ThemeOrCustomProp.prototype.clearCustom = function () {
    this.isCustom = false;
  };
  ThemeOrCustomProp.prototype.apply = function () {
    if (this.isCustom) {
      this.prop = this.customVal;
    } else if (this.isThemeSet) {
      this.prop = this.themeVal;
    }return this.prop;
  };
  ThemeOrCustomProp.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ThemeOrCustomProp',
    interfaces: []
  };
  function Animator(value) {
    Animator$Companion_getInstance();
    this.value = value;
    this.duration = 1.0;
    this.speed = 1.0;
    this.repeating = Animator$Companion_getInstance().ONCE;
    this.progress = 0.0;
  }
  function Animator$Companion() {
    Animator$Companion_instance = this;
    this.ONCE = 1;
    this.REPEAT = 2;
    this.REPEAT_TOGGLE_DIR = 3;
  }
  Animator$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Animator$Companion_instance = null;
  function Animator$Companion_getInstance() {
    if (Animator$Companion_instance === null) {
      new Animator$Companion();
    }return Animator$Companion_instance;
  }
  Animator.prototype.tick_aemszp$ = function (ctx) {
    var $receiver = this.speed;
    var eps;
    eps = package$math.FUZZY_EQ_F;
    if (!(Math_0.abs($receiver) <= eps)) {
      this.progress += ctx.deltaT * this.speed / this.duration;
      if (this.progress >= 1.0 && this.speed > 0) {
        switch (this.repeating) {
          case 1:
            this.progress = 1.0;
            this.speed = 0.0;
            break;
          case 2:
            this.progress = 0.0;
            break;
          case 3:
            this.progress = 1.0;
            this.speed = -this.speed;
            break;
        }
      } else if (this.progress <= 0.0 && this.speed < 0) {
        switch (this.repeating) {
          case 1:
            this.progress = 0.0;
            this.speed = 0.0;
            break;
          case 2:
            this.progress = 1.0;
            break;
          case 3:
            this.progress = 0.0;
            this.speed = -this.speed;
            break;
        }
      }var $receiver_0 = this.progress;
      var clamp$result;
      if ($receiver_0 < 0.0) {
        clamp$result = 0.0;
      } else if ($receiver_0 > 1.0) {
        clamp$result = 1.0;
      } else {
        clamp$result = $receiver_0;
      }
      this.progress = clamp$result;
      this.value.interpolate_mx4ult$(this.interpolate_mx4ult$(this.progress));
    }return this.value.value;
  };
  Animator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Animator',
    interfaces: []
  };
  function LinearAnimator(value) {
    Animator.call(this, value);
  }
  LinearAnimator.prototype.interpolate_mx4ult$ = function (progress) {
    return progress;
  };
  LinearAnimator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LinearAnimator',
    interfaces: [Animator]
  };
  function CosAnimator(value) {
    Animator.call(this, value);
  }
  CosAnimator.prototype.interpolate_mx4ult$ = function (progress) {
    var x = progress * math.PI;
    return 0.5 - Math_0.cos(x) * 0.5;
  };
  CosAnimator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CosAnimator',
    interfaces: [Animator]
  };
  function InterpolatedValue(initial) {
    this.value = initial;
    this.onUpdate = null;
  }
  InterpolatedValue.prototype.interpolate_mx4ult$ = function (progress) {
    var tmp$;
    this.updateValue_mx4ult$(progress);
    (tmp$ = this.onUpdate) != null ? tmp$(this.value) : null;
  };
  InterpolatedValue.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InterpolatedValue',
    interfaces: []
  };
  function InterpolatedFloat(from, to) {
    InterpolatedValue.call(this, from);
    this.from = from;
    this.to = to;
  }
  InterpolatedFloat.prototype.updateValue_mx4ult$ = function (interpolationPos) {
    this.value = this.from + (this.to - this.from) * interpolationPos;
  };
  InterpolatedFloat.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InterpolatedFloat',
    interfaces: [InterpolatedValue]
  };
  function InterpolatedColor(from, to) {
    InterpolatedValue.call(this, MutableColor_init());
    this.from = from;
    this.to = to;
    this.value.set_d7aj7k$(this.from);
  }
  InterpolatedColor.prototype.updateValue_mx4ult$ = function (interpolationPos) {
    this.value.set_d7aj7k$(this.to).subtract_czzhhz$(this.from).scale_mx4ult$(interpolationPos).add_d7aj7k$(this.from);
  };
  InterpolatedColor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InterpolatedColor',
    interfaces: [InterpolatedValue]
  };
  function SpringDamperFloat(value) {
    this.desired = value;
    this.actual = value;
    this.speed_j0cmgy$_0 = 0.0;
    this.damping_0 = 0.0;
    this.stiffness_kq1inq$_0 = 0.0;
    this.stiffness = 100.0;
  }
  Object.defineProperty(SpringDamperFloat.prototype, 'speed', {
    get: function () {
      return this.speed_j0cmgy$_0;
    },
    set: function (speed) {
      this.speed_j0cmgy$_0 = speed;
    }
  });
  Object.defineProperty(SpringDamperFloat.prototype, 'stiffness', {
    get: function () {
      return this.stiffness_kq1inq$_0;
    },
    set: function (value) {
      this.stiffness_kq1inq$_0 = value;
      var x = this.stiffness;
      this.damping_0 = 2.0 * Math_0.sqrt(x);
    }
  });
  SpringDamperFloat.prototype.set_mx4ult$ = function (value) {
    this.desired = value;
    this.actual = value;
    this.speed = 0.0;
  };
  SpringDamperFloat.prototype.animate_mx4ult$ = function (deltaT) {
    if (this.stiffness === 0.0 || deltaT > 0.2) {
      this.actual = this.desired;
      return this.actual;
    }var t = 0.0;
    while (t < deltaT) {
      var b = deltaT - t;
      var dt = Math_0.min(0.05, b);
      t += dt + 0.001;
      var err = this.desired - this.actual;
      this.speed = this.speed + (err * this.stiffness - this.speed * this.damping_0) * dt;
      var delta = this.speed * dt;
      var $receiver = Math_0.abs(delta);
      var eps;
      eps = package$math.FUZZY_EQ_F;
      if (!(Math_0.abs($receiver) <= eps)) {
        this.actual += delta;
      } else {
        this.actual = this.desired;
      }
    }
    return this.actual;
  };
  SpringDamperFloat.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SpringDamperFloat',
    interfaces: []
  };
  function SpringDamperDouble(value) {
    this.desired = value;
    this.actual = value;
    this.speed_tjror7$_0 = 0.0;
    this.damping_0 = 0.0;
    this.stiffness_ruyi91$_0 = 0.0;
    this.stiffness = 100.0;
  }
  Object.defineProperty(SpringDamperDouble.prototype, 'speed', {
    get: function () {
      return this.speed_tjror7$_0;
    },
    set: function (speed) {
      this.speed_tjror7$_0 = speed;
    }
  });
  Object.defineProperty(SpringDamperDouble.prototype, 'stiffness', {
    get: function () {
      return this.stiffness_ruyi91$_0;
    },
    set: function (value) {
      this.stiffness_ruyi91$_0 = value;
      var x = this.stiffness;
      this.damping_0 = 2.0 * Math_0.sqrt(x);
    }
  });
  SpringDamperDouble.prototype.set_14dthe$ = function (value) {
    this.desired = value;
    this.actual = value;
    this.speed = 0.0;
  };
  SpringDamperDouble.prototype.animate_mx4ult$ = function (deltaT) {
    if (this.stiffness === 0.0 || deltaT > 0.2) {
      this.actual = this.desired;
      return this.actual;
    }var t = 0.0;
    while (t < deltaT) {
      var b = deltaT - t;
      var dt = Math_0.min(0.05, b);
      t += dt + 0.001;
      var err = this.desired - this.actual;
      this.speed = this.speed + (err * this.stiffness - this.speed * this.damping_0) * dt;
      var delta = this.speed * dt;
      var $receiver = Math_0.abs(delta);
      var eps;
      eps = package$math.FUZZY_EQ_D;
      if (!(Math_0.abs($receiver) <= eps)) {
        this.actual += delta;
      } else {
        this.actual = this.desired;
      }
    }
    return this.actual;
  };
  SpringDamperDouble.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SpringDamperDouble',
    interfaces: []
  };
  var ShaderModel$findNode$lambda_3 = wrapFunction(function () {
    var equals = Kotlin.equals;
    var throwCCE = Kotlin.throwCCE;
    return function (closure$stage, closure$name, typeClosure$T, isT) {
      return function (it) {
        if ((it.stage.mask & closure$stage.mask) !== 0) {
          var isT_0 = isT;
          var name = closure$name;
          var tmp$;
          var $receiver = it.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_0;
            tmp$_0 = $receiver.iterator();
            while (tmp$_0.hasNext()) {
              var element = tmp$_0.next();
              if (equals(element.name, name) && isT_0(element)) {
                firstOrNull$result = element;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = Kotlin.orNull(isT_0)(tmp$ = firstOrNull$result) ? tmp$ : throwCCE();
          if (node != null) {
            return node;
          }}return Unit;
      };
    };
  });
  function AmbientOcclusionPass(screenCam, aoSetup, width, height) {
    AmbientOcclusionPass$Companion_getInstance();
    OffscreenRenderPass2d.call(this, new Group(), width, height, TexFormat$R_getInstance());
    this.aoSetup = aoSetup;
    this.radius = 1.0;
    this.intensity = 1.5;
    this.bias = 0.05;
    this.kernelSz_cjciej$_0 = 32;
    this.aoUniforms_0 = null;
    this.aoNode_0 = null;
    var tmp$;
    var $receiver = new OrthographicCamera();
    $receiver.projCorrectionMode = Camera$ProjCorrectionMode$OFFSCREEN_getInstance();
    $receiver.isKeepAspectRatio = false;
    $receiver.left = 0.0;
    $receiver.right = 1.0;
    $receiver.top = 1.0;
    $receiver.bottom = 0.0;
    this.camera = $receiver;
    this.clearColor = Color$Companion_getInstance().WHITE;
    var $receiver_0 = Kotlin.isType(tmp$ = this.drawNode, Group) ? tmp$ : throwCCE();
    var mesh = new Mesh(new IndexedVertexList(listOf([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().TEXTURE_COORDS])), null);
    mesh.generate_v2sixm$(AmbientOcclusionPass_init$lambda$lambda$lambda);
    var $receiver_1 = new ShaderModel('AoPass');
    var ifScreenPos = {v: null};
    var $receiver_2 = new ShaderModel$VertexStageBuilder($receiver_1);
    ifScreenPos.v = $receiver_2.stageInterfaceNode_iikjwn$('ifTexCoords', $receiver_2.attrTexCoords().output);
    $receiver_2.positionOutput = $receiver_2.simpleVertexPositionNode().outVec4;
    var $receiver_3 = new ShaderModel$FragmentStageBuilder($receiver_1);
    var noiseTex = $receiver_3.textureNode_61zpoe$('noiseTex');
    var aoUnis = $receiver_3.addNode_u9w9by$(new AmbientOcclusionPass$AoUniforms(this, screenCam, true, $receiver_3.stage));
    var depthTex;
    var depthComponent;
    var origin;
    var normal;
    if (this.aoSetup.isDeferred) {
      depthTex = $receiver_3.textureNode_61zpoe$('positionTex');
      depthComponent = 'z';
      origin = $receiver_3.channelNode_500t7j$($receiver_3.textureSamplerNode_ce41yx$(depthTex, ifScreenPos.v.output).outColor, 'xyz').output;
      normal = $receiver_3.channelNode_500t7j$($receiver_3.textureSamplerNode_ce41yx$($receiver_3.textureNode_61zpoe$('normalTex'), ifScreenPos.v.output).outColor, 'xyz').output;
    } else {
      depthTex = $receiver_3.textureNode_61zpoe$('normalDepthTex');
      depthComponent = 'a';
      var normalDepth = $receiver_3.textureSamplerNode_ce41yx$(depthTex, ifScreenPos.v.output).outColor;
      normal = $receiver_3.channelNode_500t7j$(normalDepth, 'xyz').output;
      var unProj = $receiver_3.addNode_u9w9by$(new AmbientOcclusionPass$UnprojectPosNode(aoUnis, $receiver_3.stage));
      unProj.inDepth = $receiver_3.channelNode_500t7j$(normalDepth, 'a').output;
      unProj.inScreenPos = ifScreenPos.v.output;
      origin = unProj.outPosition;
    }
    var aoNd = $receiver_3.addNode_u9w9by$(new AmbientOcclusionPass$AoNode(this, aoUnis, noiseTex, depthTex, depthComponent, $receiver_3.stage));
    aoNd.inScreenPos = ifScreenPos.v.output;
    aoNd.inOrigin = origin;
    aoNd.inNormal = normal;
    $receiver_3.colorOutput_a3v4si$(aoNd.outColor);
    var model = $receiver_1;
    var $receiver_4 = new ModeledShader(model);
    $receiver_4.onCreated.add_11rb$(AmbientOcclusionPass_init$lambda$lambda$lambda$lambda(this, model));
    mesh.pipelineLoader = $receiver_4;
    $receiver_0.unaryPlus_uv0sim$(mesh);
  }
  Object.defineProperty(AmbientOcclusionPass.prototype, 'kernelSz', {
    get: function () {
      return this.kernelSz_cjciej$_0;
    },
    set: function (value) {
      this.kernelSz_cjciej$_0 = value;
      this.setKernelSize_0(value);
    }
  });
  AmbientOcclusionPass.prototype.setKernelSize_0 = function (nKernels) {
    var tmp$;
    var n = Math_0.min(nKernels, 128);
    if ((tmp$ = this.aoNode_0) != null) {
      var $receiver = until(0, n);
      var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
      var tmp$_0;
      tmp$_0 = $receiver.iterator();
      while (tmp$_0.hasNext()) {
        var item = tmp$_0.next();
        var tmp$_1 = destination.add_11rb$;
        var $receiver_0 = item / n;
        tmp$_1.call(destination, this.lerp_0(0.1, 1.0, Math_0.pow($receiver_0, 2)));
      }
      var scales = shuffled(destination, Random(17));
      for (var i = 0; i < n; i++) {
        var xi = this.hammersley_0(i, n);
        var phi = 2.0 * math.PI * xi.x;
        var x = 1.0 - xi.y;
        var cosTheta = Math_0.sqrt(x);
        var x_0 = 1.0 - cosTheta * cosTheta;
        var sinTheta = Math_0.sqrt(x_0);
        var k = new MutableVec3f(sinTheta * Math_0.cos(phi), sinTheta * Math_0.sin(phi), cosTheta);
        tmp$.aoUniforms.uKernel.value[i] = k.norm().scale_mx4ult$(scales.get_za3lpa$(i));
      }
      tmp$.aoUniforms.uKernelN.value = n;
    }};
  AmbientOcclusionPass.prototype.radicalInverse_0 = function (pBits) {
    var bits = Kotlin.Long.fromInt(pBits);
    bits = bits.shiftLeft(16).or(bits.shiftRight(16));
    bits = bits.and(L1431655765).shiftLeft(1).or(bits.and(L2863311530).shiftRight(1));
    bits = bits.and(L858993459).shiftLeft(2).or(bits.and(L3435973836).shiftRight(2));
    bits = bits.and(L252645135).shiftLeft(4).or(bits.and(L4042322160).shiftRight(4));
    bits = bits.and(L16711935).shiftLeft(8).or(bits.and(L4278255360).shiftRight(8));
    return bits.toNumber() * 2.3283064E-10;
  };
  AmbientOcclusionPass.prototype.hammersley_0 = function (i, n) {
    return new Vec2f(i / n, this.radicalInverse_0(i));
  };
  AmbientOcclusionPass.prototype.lerp_0 = function (a, b, f) {
    return a + f * (b - a);
  };
  function Coroutine$AmbientOcclusionPass$makeNoiseTexture$lambda(closure$data_0, $receiver_0, it_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$data = closure$data_0;
  }
  Coroutine$AmbientOcclusionPass$makeNoiseTexture$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AmbientOcclusionPass$makeNoiseTexture$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AmbientOcclusionPass$makeNoiseTexture$lambda.prototype.constructor = Coroutine$AmbientOcclusionPass$makeNoiseTexture$lambda;
  Coroutine$AmbientOcclusionPass$makeNoiseTexture$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$closure$data;
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AmbientOcclusionPass$makeNoiseTexture$lambda(closure$data_0) {
    return function ($receiver_0, it_0, continuation_0, suspended) {
      var instance = new Coroutine$AmbientOcclusionPass$makeNoiseTexture$lambda(closure$data_0, $receiver_0, it_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AmbientOcclusionPass.prototype.makeNoiseTexture_0 = function () {
    var buf = createUint8Buffer(64);
    var $receiver = until(0, 16);
    var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(math.PI * item / 8);
    }
    var rotAngles = shuffled_0(destination);
    for (var i = 0; i < 16; i++) {
      var ang = rotAngles.get_za3lpa$(i);
      var x = Math_0.cos(ang);
      var y = Math_0.sin(ang);
      buf.set_6t1wet$((i * 4 | 0) + 0 | 0, toByte(numberToInt((x * 0.5 + 0.5) * 255)));
      buf.set_6t1wet$((i * 4 | 0) + 1 | 0, toByte(numberToInt((y * 0.5 + 0.5) * 255)));
      buf.set_6t1wet$((i * 4 | 0) + 2 | 0, 0);
      buf.set_6t1wet$((i * 4 | 0) + 3 | 0, 1);
    }
    var data = new BufferedTextureData(buf, 4, 4, TexFormat$RGBA_getInstance());
    var texProps = new TextureProps(TexFormat$RGBA_getInstance(), AddressMode$REPEAT_getInstance(), AddressMode$REPEAT_getInstance(), void 0, FilterMethod$NEAREST_getInstance(), FilterMethod$NEAREST_getInstance());
    return new Texture(texProps, AmbientOcclusionPass$makeNoiseTexture$lambda(data));
  };
  AmbientOcclusionPass.prototype.dispose_aemszp$ = function (ctx) {
    this.drawNode.dispose_aemszp$(ctx);
    OffscreenRenderPass2d.prototype.dispose_aemszp$.call(this, ctx);
  };
  function AmbientOcclusionPass$AoUniforms($outer, cam, withInvProj, graph) {
    this.$outer = $outer;
    ShaderNode.call(this, 'aoUniforms', graph);
    this.cam = cam;
    this.withInvProj = withInvProj;
    this.uKernel = new Uniform3fv('uKernel', 128);
    this.uKernelN = Uniform1i_init(32, 'uKernelN');
    this.uProj = new UniformMat4f('uProj');
    this.uInvProj = new UniformMat4f('uInvProj');
    this.uNoiseScale = new Uniform2f('uNoiseScale');
    this.uRadius = new Uniform1f('uRadius');
    this.uIntensity = new Uniform1f('uIntensity');
    this.uBias = new Uniform1f('uBias');
  }
  function AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda(this$AoUniforms) {
    return function () {
      return this$AoUniforms.uKernel;
    };
  }
  function AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda_0(this$AoUniforms) {
    return function () {
      return this$AoUniforms.uProj;
    };
  }
  function AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda_1(this$AoUniforms) {
    return function () {
      return this$AoUniforms.uInvProj;
    };
  }
  function AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda_2(this$AoUniforms) {
    return function () {
      return this$AoUniforms.uNoiseScale;
    };
  }
  function AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda_3(this$AoUniforms) {
    return function () {
      return this$AoUniforms.uRadius;
    };
  }
  function AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda_4(this$AoUniforms) {
    return function () {
      return this$AoUniforms.uIntensity;
    };
  }
  function AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda_5(this$AoUniforms) {
    return function () {
      return this$AoUniforms.uBias;
    };
  }
  function AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda_6(this$AoUniforms) {
    return function () {
      return this$AoUniforms.uKernelN;
    };
  }
  function AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda_7(this$AoUniforms, this$AmbientOcclusionPass) {
    return function (f, f_0) {
      this$AoUniforms.uProj.value.set_d4zu6l$(this$AoUniforms.cam.proj);
      this$AoUniforms.uNoiseScale.value.set_dleff0$(this$AmbientOcclusionPass.texWidth / 4.0, this$AmbientOcclusionPass.texHeight / 4.0);
      this$AoUniforms.uRadius.value = this$AmbientOcclusionPass.radius;
      this$AoUniforms.uIntensity.value = this$AmbientOcclusionPass.intensity;
      this$AoUniforms.uBias.value = this$AmbientOcclusionPass.bias;
      if (this$AoUniforms.withInvProj) {
        this$AoUniforms.uInvProj.value.set_d4zu6l$(this$AoUniforms.cam.invProj);
      }return Unit;
    };
  }
  function AmbientOcclusionPass$AoUniforms$setup$lambda$lambda(this$AoUniforms, this$AmbientOcclusionPass) {
    return function ($receiver) {
      $receiver.unaryPlus_wq3w46$(AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda(this$AoUniforms));
      $receiver.unaryPlus_wq3w46$(AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda_0(this$AoUniforms));
      if (this$AoUniforms.withInvProj)
        $receiver.unaryPlus_wq3w46$(AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda_1(this$AoUniforms));
      $receiver.unaryPlus_wq3w46$(AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda_2(this$AoUniforms));
      $receiver.unaryPlus_wq3w46$(AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda_3(this$AoUniforms));
      $receiver.unaryPlus_wq3w46$(AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda_4(this$AoUniforms));
      $receiver.unaryPlus_wq3w46$(AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda_5(this$AoUniforms));
      $receiver.unaryPlus_wq3w46$(AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda_6(this$AoUniforms));
      $receiver.onUpdate = AmbientOcclusionPass$AoUniforms$setup$lambda$lambda$lambda_7(this$AoUniforms, this$AmbientOcclusionPass);
      return Unit;
    };
  }
  AmbientOcclusionPass$AoUniforms.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    var $receiver = shaderGraph.descriptorSet;
    this.$outer;
    var this$AmbientOcclusionPass = this.$outer;
    $receiver.uniformBuffer_2ydyu8$(this.name, [shaderGraph.stage], AmbientOcclusionPass$AoUniforms$setup$lambda$lambda(this, this$AmbientOcclusionPass));
  };
  AmbientOcclusionPass$AoUniforms.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AoUniforms',
    interfaces: [ShaderNode]
  };
  function AmbientOcclusionPass$UnprojectPosNode(aoUniforms, graph) {
    ShaderNode.call(this, 'unprojectPos', graph);
    this.aoUniforms = aoUniforms;
    this.inDepth = new ShaderNodeIoVar(new ModelVar1fConst(1.0));
    this.inScreenPos = new ShaderNodeIoVar(new ModelVar2fConst(Vec2f$Companion_getInstance().ZERO));
    this.outPosition = new ShaderNodeIoVar(new ModelVar3f(this.name + '_outPos'), this);
  }
  AmbientOcclusionPass$UnprojectPosNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$([this.inDepth, this.inScreenPos]);
  };
  AmbientOcclusionPass$UnprojectPosNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$('\n' + '                vec4 projPos = vec4(' + this.inScreenPos.ref2f() + ' * 2.0 - vec2(1.0), 1.0, 1.0);' + '\n' + '                vec4 viewPos = ' + this.aoUniforms.uInvProj + ' * projPos;' + '\n' + '                ' + this.outPosition.declare() + ' = viewPos.xyz / viewPos.w;' + '\n' + '                ' + this.outPosition + ' *= (' + this.inDepth.ref1f() + ' / ' + this.outPosition + '.z);' + '\n' + '            ');
  };
  AmbientOcclusionPass$UnprojectPosNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UnprojectPosNode',
    interfaces: [ShaderNode]
  };
  function AmbientOcclusionPass$AoNode($outer, aoUniforms, noiseTex, depthTex, depthComponent, graph) {
    this.$outer = $outer;
    ShaderNode.call(this, 'aoNode', graph);
    this.aoUniforms = aoUniforms;
    this.noiseTex = noiseTex;
    this.depthTex = depthTex;
    this.depthComponent = depthComponent;
    this.inScreenPos = new ShaderNodeIoVar(new ModelVar2fConst(Vec2f$Companion_getInstance().ZERO));
    this.inOrigin = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().ZERO));
    this.inNormal = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().Y_AXIS));
    this.outColor = new ShaderNodeIoVar(new ModelVar4f('colorOut'), this);
  }
  AmbientOcclusionPass$AoNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    this.dependsOn_lhtstx$(this.noiseTex);
    this.dependsOn_8ak6wm$([this.inScreenPos, this.inOrigin]);
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
  };
  AmbientOcclusionPass$AoNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$('\n' + '                if (' + this.inOrigin + '.z > 0.0) {' + '\n' + '                    discard;' + '\n' + '                }' + '\n' + '                ' + '\n' + '                // compute kernel rotation' + '\n' + '                vec2 noiseCoord = ' + this.inScreenPos.ref2f() + ' * ' + this.aoUniforms.uNoiseScale + ';' + '\n' + '                vec3 rotVec = ' + generator.sampleTexture2d_buzeal$(this.noiseTex.name, 'noiseCoord') + '.xyz * 2.0 - 1.0;' + '\n' + '                vec3 tangent = normalize(rotVec - ' + this.inNormal.ref3f() + ' * dot(rotVec, ' + this.inNormal.ref3f() + '));' + '\n' + '                vec3 bitangent = cross(' + this.inNormal.ref3f() + ', tangent);' + '\n' + '                mat3 tbn = mat3(tangent, bitangent, ' + this.inNormal.ref3f() + ');' + '\n' + '                ' + '\n' + '                float occlusion = 0.0;' + '\n' + '                float bias = ' + this.aoUniforms.uBias + ' * ' + this.aoUniforms.uRadius + ';' + '\n' + '                for (int i = 0; i < ' + this.aoUniforms.uKernelN + '; i++) {' + '\n' + '                    vec3 kernel = tbn * ' + this.aoUniforms.uKernel + '[i];' + '\n' + '                    vec3 samplePos = ' + this.inOrigin + ' + kernel * ' + this.aoUniforms.uRadius + ';' + '\n' + '                    ' + '\n' + '                    vec4 sampleProj = ' + this.aoUniforms.uProj + ' * vec4(samplePos, 1.0);' + '\n' + '                    sampleProj.xyz /= sampleProj.w;' + '\n' + '                    sampleProj.xy = sampleProj.xy * 0.5 + 0.5;' + '\n' + '                    ' + '\n' + '                    float sampleDepth = ' + generator.sampleTexture2d_buzeal$(this.depthTex.name, 'sampleProj.xy') + '.' + this.depthComponent + ';' + '\n' + '                    ' + '\n' + '                    float rangeCheck = 1.0 - smoothstep(0.0, 1.0, abs(' + this.inOrigin + '.z - sampleDepth) / (4.0 * ' + this.aoUniforms.uRadius + '));' + '\n' + '                    occlusion += (sampleDepth > samplePos.z + bias ? 1.0 : 0.0) * rangeCheck;' + '\n' + '                }' + '\n' + '                occlusion /= float(' + this.aoUniforms.uKernelN + ');' + '\n' + '                float occlFac = clamp(1.0 - occlusion * ' + this.aoUniforms.uIntensity + ', 0.0, 1.0);' + '\n' + '                ' + '\n' + '                ' + this.outColor.declare() + ' = vec4(occlFac, 0.0, 0.0, 1.0);' + '\n' + '            ');
  };
  AmbientOcclusionPass$AoNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AoNode',
    interfaces: [ShaderNode]
  };
  function AmbientOcclusionPass$Companion() {
    AmbientOcclusionPass$Companion_instance = this;
    this.MAX_KERNEL_SIZE = 128;
  }
  AmbientOcclusionPass$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AmbientOcclusionPass$Companion_instance = null;
  function AmbientOcclusionPass$Companion_getInstance() {
    if (AmbientOcclusionPass$Companion_instance === null) {
      new AmbientOcclusionPass$Companion();
    }return AmbientOcclusionPass$Companion_instance;
  }
  function AmbientOcclusionPass_init$lambda$lambda$lambda($receiver) {
    var $receiver_0 = $receiver.rectProps.defaults();
    $receiver_0.size.set_dleff0$(1.0, 1.0);
    $receiver_0.mirrorTexCoordsY();
    $receiver.rect_e5k3t5$($receiver.rectProps);
    return Unit;
  }
  function AmbientOcclusionPass_init$lambda$lambda$lambda$lambda(this$AmbientOcclusionPass, closure$model) {
    return function (it) {
      var tmp$, tmp$_0, tmp$_1;
      if (this$AmbientOcclusionPass.aoSetup.isForward) {
        var $this = closure$model;
        var name = 'normalDepthTex';
        var stage;
        var findNode_3klnlw$result;
        findNode_3klnlw$break: do {
          stage = ShaderStage.ALL;
          var tmp$_2;
          tmp$_2 = $this.stages.values.iterator();
          while (tmp$_2.hasNext()) {
            var element = tmp$_2.next();
            if ((element.stage.mask & stage.mask) !== 0) {
              var tmp$_3;
              var $receiver = element.nodes;
              var firstOrNull$result;
              firstOrNull$break: do {
                var tmp$_4;
                tmp$_4 = $receiver.iterator();
                while (tmp$_4.hasNext()) {
                  var element_0 = tmp$_4.next();
                  if (equals(element_0.name, name) && Kotlin.isType(element_0, TextureNode)) {
                    firstOrNull$result = element_0;
                    break firstOrNull$break;
                  }}
                firstOrNull$result = null;
              }
               while (false);
              var node = (tmp$_3 = firstOrNull$result) == null || Kotlin.isType(tmp$_3, TextureNode) ? tmp$_3 : throwCCE();
              if (node != null) {
                findNode_3klnlw$result = node;
                break findNode_3klnlw$break;
              }}}
          findNode_3klnlw$result = null;
        }
         while (false);
        ensureNotNull(findNode_3klnlw$result).sampler.texture = (tmp$ = this$AmbientOcclusionPass.aoSetup.linearDepthPass) != null ? tmp$.colorTexture : null;
      } else {
        var $this_0 = closure$model;
        var name_0 = 'positionTex';
        var stage_0;
        var findNode_3klnlw$result_0;
        findNode_3klnlw$break: do {
          stage_0 = ShaderStage.ALL;
          var tmp$_5;
          tmp$_5 = $this_0.stages.values.iterator();
          while (tmp$_5.hasNext()) {
            var element_1 = tmp$_5.next();
            if ((element_1.stage.mask & stage_0.mask) !== 0) {
              var tmp$_6;
              var $receiver_0 = element_1.nodes;
              var firstOrNull$result_0;
              firstOrNull$break: do {
                var tmp$_7;
                tmp$_7 = $receiver_0.iterator();
                while (tmp$_7.hasNext()) {
                  var element_2 = tmp$_7.next();
                  if (equals(element_2.name, name_0) && Kotlin.isType(element_2, TextureNode)) {
                    firstOrNull$result_0 = element_2;
                    break firstOrNull$break;
                  }}
                firstOrNull$result_0 = null;
              }
               while (false);
              var node_0 = (tmp$_6 = firstOrNull$result_0) == null || Kotlin.isType(tmp$_6, TextureNode) ? tmp$_6 : throwCCE();
              if (node_0 != null) {
                findNode_3klnlw$result_0 = node_0;
                break findNode_3klnlw$break;
              }}}
          findNode_3klnlw$result_0 = null;
        }
         while (false);
        ensureNotNull(findNode_3klnlw$result_0).sampler.texture = (tmp$_0 = this$AmbientOcclusionPass.aoSetup.mrtPass) != null ? tmp$_0.positionAo : null;
        var $this_1 = closure$model;
        var name_1 = 'normalTex';
        var stage_1;
        var findNode_3klnlw$result_1;
        findNode_3klnlw$break: do {
          stage_1 = ShaderStage.ALL;
          var tmp$_8;
          tmp$_8 = $this_1.stages.values.iterator();
          while (tmp$_8.hasNext()) {
            var element_3 = tmp$_8.next();
            if ((element_3.stage.mask & stage_1.mask) !== 0) {
              var tmp$_9;
              var $receiver_1 = element_3.nodes;
              var firstOrNull$result_1;
              firstOrNull$break: do {
                var tmp$_10;
                tmp$_10 = $receiver_1.iterator();
                while (tmp$_10.hasNext()) {
                  var element_4 = tmp$_10.next();
                  if (equals(element_4.name, name_1) && Kotlin.isType(element_4, TextureNode)) {
                    firstOrNull$result_1 = element_4;
                    break firstOrNull$break;
                  }}
                firstOrNull$result_1 = null;
              }
               while (false);
              var node_1 = (tmp$_9 = firstOrNull$result_1) == null || Kotlin.isType(tmp$_9, TextureNode) ? tmp$_9 : throwCCE();
              if (node_1 != null) {
                findNode_3klnlw$result_1 = node_1;
                break findNode_3klnlw$break;
              }}}
          findNode_3klnlw$result_1 = null;
        }
         while (false);
        ensureNotNull(findNode_3klnlw$result_1).sampler.texture = (tmp$_1 = this$AmbientOcclusionPass.aoSetup.mrtPass) != null ? tmp$_1.normalRoughness : null;
      }
      var $this_2 = closure$model;
      var name_2 = 'noiseTex';
      var stage_2;
      var findNode_3klnlw$result_2;
      findNode_3klnlw$break: do {
        stage_2 = ShaderStage.ALL;
        var tmp$_11;
        tmp$_11 = $this_2.stages.values.iterator();
        while (tmp$_11.hasNext()) {
          var element_5 = tmp$_11.next();
          if ((element_5.stage.mask & stage_2.mask) !== 0) {
            var tmp$_12;
            var $receiver_2 = element_5.nodes;
            var firstOrNull$result_2;
            firstOrNull$break: do {
              var tmp$_13;
              tmp$_13 = $receiver_2.iterator();
              while (tmp$_13.hasNext()) {
                var element_6 = tmp$_13.next();
                if (equals(element_6.name, name_2) && Kotlin.isType(element_6, TextureNode)) {
                  firstOrNull$result_2 = element_6;
                  break firstOrNull$break;
                }}
              firstOrNull$result_2 = null;
            }
             while (false);
            var node_2 = (tmp$_12 = firstOrNull$result_2) == null || Kotlin.isType(tmp$_12, TextureNode) ? tmp$_12 : throwCCE();
            if (node_2 != null) {
              findNode_3klnlw$result_2 = node_2;
              break findNode_3klnlw$break;
            }}}
        findNode_3klnlw$result_2 = null;
      }
       while (false);
      ensureNotNull(findNode_3klnlw$result_2).sampler.texture = this$AmbientOcclusionPass.makeNoiseTexture_0();
      var tmp$_14 = this$AmbientOcclusionPass;
      var $this_3 = closure$model;
      var name_3 = 'aoUniforms';
      var stage_3;
      var findNode_3klnlw$result_3;
      findNode_3klnlw$break: do {
        stage_3 = ShaderStage.ALL;
        var tmp$_15;
        tmp$_15 = $this_3.stages.values.iterator();
        while (tmp$_15.hasNext()) {
          var element_7 = tmp$_15.next();
          if ((element_7.stage.mask & stage_3.mask) !== 0) {
            var tmp$_16;
            var $receiver_3 = element_7.nodes;
            var firstOrNull$result_3;
            firstOrNull$break: do {
              var tmp$_17;
              tmp$_17 = $receiver_3.iterator();
              while (tmp$_17.hasNext()) {
                var element_8 = tmp$_17.next();
                if (equals(element_8.name, name_3) && Kotlin.isType(element_8, AmbientOcclusionPass$AoUniforms)) {
                  firstOrNull$result_3 = element_8;
                  break firstOrNull$break;
                }}
              firstOrNull$result_3 = null;
            }
             while (false);
            var node_3 = (tmp$_16 = firstOrNull$result_3) == null || Kotlin.isType(tmp$_16, AmbientOcclusionPass$AoUniforms) ? tmp$_16 : throwCCE();
            if (node_3 != null) {
              findNode_3klnlw$result_3 = node_3;
              break findNode_3klnlw$break;
            }}}
        findNode_3klnlw$result_3 = null;
      }
       while (false);
      tmp$_14.aoUniforms_0 = findNode_3klnlw$result_3;
      var tmp$_18 = this$AmbientOcclusionPass;
      var $this_4 = closure$model;
      var stage_4;
      var findNode_3klnlw$result_4;
      findNode_3klnlw$break: do {
        stage_4 = ShaderStage.ALL;
        var tmp$_19;
        tmp$_19 = $this_4.stages.values.iterator();
        while (tmp$_19.hasNext()) {
          var element_9 = tmp$_19.next();
          if ((element_9.stage.mask & stage_4.mask) !== 0) {
            var tmp$_20;
            var $receiver_4 = element_9.nodes;
            var firstOrNull$result_4;
            firstOrNull$break: do {
              var tmp$_21;
              tmp$_21 = $receiver_4.iterator();
              while (tmp$_21.hasNext()) {
                var element_10 = tmp$_21.next();
                if (equals(element_10.name, 'aoNode') && Kotlin.isType(element_10, AmbientOcclusionPass$AoNode)) {
                  firstOrNull$result_4 = element_10;
                  break firstOrNull$break;
                }}
              firstOrNull$result_4 = null;
            }
             while (false);
            var node_4 = (tmp$_20 = firstOrNull$result_4) == null || Kotlin.isType(tmp$_20, AmbientOcclusionPass$AoNode) ? tmp$_20 : throwCCE();
            if (node_4 != null) {
              findNode_3klnlw$result_4 = node_4;
              break findNode_3klnlw$break;
            }}}
        findNode_3klnlw$result_4 = null;
      }
       while (false);
      tmp$_18.aoNode_0 = findNode_3klnlw$result_4;
      this$AmbientOcclusionPass.setKernelSize_0(this$AmbientOcclusionPass.kernelSz);
      return Unit;
    };
  }
  AmbientOcclusionPass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AmbientOcclusionPass',
    interfaces: [OffscreenRenderPass2d]
  };
  function AoSetup(mrtPass, linearDepthPass) {
    AoSetup$Companion_getInstance();
    this.mrtPass = mrtPass;
    this.linearDepthPass = linearDepthPass;
  }
  Object.defineProperty(AoSetup.prototype, 'isDeferred', {
    get: function () {
      return this.mrtPass != null;
    }
  });
  Object.defineProperty(AoSetup.prototype, 'isForward', {
    get: function () {
      return this.linearDepthPass != null;
    }
  });
  function AoSetup$Companion() {
    AoSetup$Companion_instance = this;
  }
  AoSetup$Companion.prototype.deferred_u6tred$ = function (mrtPass) {
    return new AoSetup(mrtPass, null);
  };
  AoSetup$Companion.prototype.forward_xscw1l$ = function (linearDepthPass) {
    return new AoSetup(null, linearDepthPass);
  };
  AoSetup$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AoSetup$Companion_instance = null;
  function AoSetup$Companion_getInstance() {
    if (AoSetup$Companion_instance === null) {
      new AoSetup$Companion();
    }return AoSetup$Companion_instance;
  }
  AoSetup.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AoSetup',
    interfaces: []
  };
  var ShaderModel$findNode$lambda_4 = wrapFunction(function () {
    var equals = Kotlin.equals;
    var throwCCE = Kotlin.throwCCE;
    return function (closure$stage, closure$name, typeClosure$T, isT) {
      return function (it) {
        if ((it.stage.mask & closure$stage.mask) !== 0) {
          var isT_0 = isT;
          var name = closure$name;
          var tmp$;
          var $receiver = it.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_0;
            tmp$_0 = $receiver.iterator();
            while (tmp$_0.hasNext()) {
              var element = tmp$_0.next();
              if (equals(element.name, name) && isT_0(element)) {
                firstOrNull$result = element;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = Kotlin.orNull(isT_0)(tmp$ = firstOrNull$result) ? tmp$ : throwCCE();
          if (node != null) {
            return node;
          }}return Unit;
      };
    };
  });
  function AoDenoisePass(aoPass, depthTexture, dephtComponent) {
    OffscreenRenderPass2d.call(this, new Group(), aoPass.texWidth, aoPass.texHeight, TexFormat$R_getInstance());
    this.uRadius_0 = Uniform1f_init(1.0, 'uRadius');
    var tmp$;
    var $receiver = new OrthographicCamera();
    $receiver.projCorrectionMode = Camera$ProjCorrectionMode$OFFSCREEN_getInstance();
    $receiver.isKeepAspectRatio = false;
    $receiver.left = 0.0;
    $receiver.right = 1.0;
    $receiver.top = 1.0;
    $receiver.bottom = 0.0;
    this.camera = $receiver;
    var $receiver_0 = Kotlin.isType(tmp$ = this.drawNode, Group) ? tmp$ : throwCCE();
    var mesh = new Mesh(new IndexedVertexList(listOf([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().TEXTURE_COORDS])), null);
    mesh.generate_v2sixm$(AoDenoisePass_init$lambda$lambda$lambda);
    var $receiver_1 = new ShaderModel('AoDenoisePass');
    var ifTexCoords = {v: null};
    var $receiver_2 = new ShaderModel$VertexStageBuilder($receiver_1);
    ifTexCoords.v = $receiver_2.stageInterfaceNode_iikjwn$('ifTexCoords', $receiver_2.attrTexCoords().output);
    $receiver_2.positionOutput = $receiver_2.simpleVertexPositionNode().outVec4;
    var $receiver_3 = new ShaderModel$FragmentStageBuilder($receiver_1);
    var noisyAo = $receiver_3.textureNode_61zpoe$('noisyAo');
    var depth = $receiver_3.textureNode_61zpoe$('depth');
    var radius = $receiver_3.pushConstantNode1f_978i2u$(this.uRadius_0);
    var blurNd = $receiver_3.addNode_u9w9by$(new AoDenoisePass$BlurNode(this, noisyAo, depth, dephtComponent, $receiver_3.stage));
    blurNd.inScreenPos = ifTexCoords.v.output;
    blurNd.radius = radius.output;
    $receiver_3.colorOutput_a3v4si$(blurNd.outColor);
    var model = $receiver_1;
    var $receiver_4 = new ModeledShader(model);
    $receiver_4.onCreated.add_11rb$(AoDenoisePass_init$lambda$lambda$lambda$lambda(aoPass, model, depthTexture));
    mesh.pipelineLoader = $receiver_4;
    $receiver_0.unaryPlus_uv0sim$(mesh);
  }
  Object.defineProperty(AoDenoisePass.prototype, 'radius', {
    get: function () {
      return this.uRadius_0.value;
    },
    set: function (value) {
      this.uRadius_0.value = value;
    }
  });
  AoDenoisePass.prototype.dispose_aemszp$ = function (ctx) {
    this.drawNode.dispose_aemszp$(ctx);
    OffscreenRenderPass2d.prototype.dispose_aemszp$.call(this, ctx);
  };
  function AoDenoisePass$BlurNode($outer, noisyAo, depth, depthComponent, shaderGraph) {
    this.$outer = $outer;
    ShaderNode.call(this, 'blurNode', shaderGraph);
    this.noisyAo = noisyAo;
    this.depth = depth;
    this.depthComponent = depthComponent;
    this.inScreenPos = new ShaderNodeIoVar(new ModelVar2fConst(Vec2f$Companion_getInstance().ZERO));
    this.radius = new ShaderNodeIoVar(new ModelVar1fConst(1.0));
    this.outColor = new ShaderNodeIoVar(new ModelVar4f('colorOut'), this);
  }
  AoDenoisePass$BlurNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    this.dependsOn_lhtstx$(this.noisyAo);
    this.dependsOn_lhtstx$(this.depth);
    this.dependsOn_8ak6wm$([this.inScreenPos, this.radius]);
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
  };
  AoDenoisePass$BlurNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$('\n' + '                int blurSize = 4;' + '\n' + '                vec2 texelSize = 1.0 / vec2(textureSize(' + this.noisyAo.name + ', 0));' + '\n' + '                float depthOri = ' + generator.sampleTexture2d_buzeal$(this.depth.name, this.inScreenPos.ref2f()) + '.' + this.depthComponent + ';' + '\n' + '                float depthThreshold = ' + this.radius.ref1f() + ' * 0.1;' + '\n' + '                ' + '\n' + '                float result = 0.0;' + '\n' + '                float weight = 0.0;' + '\n' + '                vec2 hlim = vec2(float(-blurSize) * 0.5 + 0.5);' + '\n' + '                for (int x = 0; x < blurSize; x++) {' + '\n' + '                    for (int y = 0; y < blurSize; y++) {' + '\n' + '                        vec2 uv = ' + this.inScreenPos.ref2f() + ' + (hlim + vec2(float(x), float(y))) * texelSize;' + '\n' + '                        float w = 1.0 - step(depthThreshold, abs(' + generator.sampleTexture2d_buzeal$(this.depth.name, 'uv') + '.' + this.depthComponent + ' - depthOri)) * 0.99;' + '\n' + '                        ' + '\n' + '                        result += ' + generator.sampleTexture2d_buzeal$(this.noisyAo.name, 'uv') + '.r * w;' + '\n' + '                        weight += w;' + '\n' + '                    }' + '\n' + '                }' + '\n' + '                result /= weight;' + '\n' + '                ' + this.outColor.declare() + ' = vec4(result, result, result, 1.0);' + '\n' + '            ');
  };
  AoDenoisePass$BlurNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlurNode',
    interfaces: [ShaderNode]
  };
  function AoDenoisePass_init$lambda$lambda$lambda($receiver) {
    var $receiver_0 = $receiver.rectProps.defaults();
    $receiver_0.size.set_dleff0$(1.0, 1.0);
    $receiver_0.mirrorTexCoordsY();
    $receiver.rect_e5k3t5$($receiver.rectProps);
    return Unit;
  }
  function AoDenoisePass_init$lambda$lambda$lambda$lambda(closure$aoPass, closure$model, closure$depthTexture) {
    return function (it) {
      var $this = closure$model;
      var stage;
      var findNode_3klnlw$result;
      findNode_3klnlw$break: do {
        stage = ShaderStage.ALL;
        var tmp$;
        tmp$ = $this.stages.values.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if ((element.stage.mask & stage.mask) !== 0) {
            var tmp$_0;
            var $receiver = element.nodes;
            var firstOrNull$result;
            firstOrNull$break: do {
              var tmp$_1;
              tmp$_1 = $receiver.iterator();
              while (tmp$_1.hasNext()) {
                var element_0 = tmp$_1.next();
                if (equals(element_0.name, 'noisyAo') && Kotlin.isType(element_0, TextureNode)) {
                  firstOrNull$result = element_0;
                  break firstOrNull$break;
                }}
              firstOrNull$result = null;
            }
             while (false);
            var node = (tmp$_0 = firstOrNull$result) == null || Kotlin.isType(tmp$_0, TextureNode) ? tmp$_0 : throwCCE();
            if (node != null) {
              findNode_3klnlw$result = node;
              break findNode_3klnlw$break;
            }}}
        findNode_3klnlw$result = null;
      }
       while (false);
      ensureNotNull(findNode_3klnlw$result).sampler.texture = closure$aoPass.colorTexture;
      var $this_0 = closure$model;
      var stage_0;
      var findNode_3klnlw$result_0;
      findNode_3klnlw$break: do {
        stage_0 = ShaderStage.ALL;
        var tmp$_2;
        tmp$_2 = $this_0.stages.values.iterator();
        while (tmp$_2.hasNext()) {
          var element_1 = tmp$_2.next();
          if ((element_1.stage.mask & stage_0.mask) !== 0) {
            var tmp$_3;
            var $receiver_0 = element_1.nodes;
            var firstOrNull$result_0;
            firstOrNull$break: do {
              var tmp$_4;
              tmp$_4 = $receiver_0.iterator();
              while (tmp$_4.hasNext()) {
                var element_2 = tmp$_4.next();
                if (equals(element_2.name, 'depth') && Kotlin.isType(element_2, TextureNode)) {
                  firstOrNull$result_0 = element_2;
                  break firstOrNull$break;
                }}
              firstOrNull$result_0 = null;
            }
             while (false);
            var node_0 = (tmp$_3 = firstOrNull$result_0) == null || Kotlin.isType(tmp$_3, TextureNode) ? tmp$_3 : throwCCE();
            if (node_0 != null) {
              findNode_3klnlw$result_0 = node_0;
              break findNode_3klnlw$break;
            }}}
        findNode_3klnlw$result_0 = null;
      }
       while (false);
      ensureNotNull(findNode_3klnlw$result_0).sampler.texture = closure$depthTexture;
      return Unit;
    };
  }
  AoDenoisePass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AoDenoisePass',
    interfaces: [OffscreenRenderPass2d]
  };
  function AoPipeline() {
    AoPipeline$Companion_getInstance();
    this.size = 0.5;
  }
  Object.defineProperty(AoPipeline.prototype, 'aoMap', {
    get: function () {
      return this.denoisePass.colorTexture;
    }
  });
  Object.defineProperty(AoPipeline.prototype, 'radius', {
    get: function () {
      return this.aoPass.radius;
    },
    set: function (value) {
      this.aoPass.radius = value;
      this.denoisePass.radius = value;
    }
  });
  Object.defineProperty(AoPipeline.prototype, 'intensity', {
    get: function () {
      return this.aoPass.intensity;
    },
    set: function (value) {
      this.aoPass.intensity = value;
    }
  });
  Object.defineProperty(AoPipeline.prototype, 'bias', {
    get: function () {
      return this.aoPass.bias;
    },
    set: function (value) {
      this.aoPass.bias = value;
    }
  });
  Object.defineProperty(AoPipeline.prototype, 'kernelSz', {
    get: function () {
      return this.aoPass.kernelSz;
    },
    set: function (value) {
      this.aoPass.kernelSz = value;
    }
  });
  AoPipeline.prototype.setEnabled_6taknv$ = function (enabled) {
    this.aoPass.isEnabled = enabled;
    this.denoisePass.isEnabled = enabled;
  };
  function AoPipeline$ForwardAoPipeline(scene) {
    AoPipeline.call(this);
    this.depthPass = null;
    this.aoPass_i8vqld$_0 = null;
    this.denoisePass_wz7oly$_0 = null;
    this.mapWidth_0 = numberToInt(1600 * this.size);
    this.mapHeight_0 = numberToInt(900 * this.size);
    var tmp$;
    var proxyCamera = new AoPipeline$ProxyCamera(Kotlin.isType(tmp$ = scene.camera, PerspectiveCamera) ? tmp$ : throwCCE());
    this.depthPass = new NormalLinearDepthMapPass(scene, this.mapWidth_0, this.mapHeight_0);
    this.depthPass.camera = proxyCamera;
    this.depthPass.isUpdateDrawNode = false;
    this.depthPass.onBeforeCollectDrawCommands.add_11rb$(AoPipeline$AoPipeline$ForwardAoPipeline_init$lambda(proxyCamera, scene));
    this.aoPass_i8vqld$_0 = new AmbientOcclusionPass(proxyCamera, AoSetup$Companion_getInstance().forward_xscw1l$(this.depthPass), this.mapWidth_0, this.mapHeight_0);
    this.aoPass.dependsOn_yqp8fe$(this.depthPass);
    this.denoisePass_wz7oly$_0 = new AoDenoisePass(this.aoPass, this.depthPass.colorTexture, 'a');
    this.denoisePass.dependsOn_yqp8fe$(this.aoPass);
    scene.addOffscreenPass_m1c2kf$(this.depthPass);
    scene.addOffscreenPass_m1c2kf$(this.aoPass);
    scene.addOffscreenPass_m1c2kf$(this.denoisePass);
    scene.onRenderScene.add_11rb$(AoPipeline$AoPipeline$ForwardAoPipeline_init$lambda_0(this));
  }
  Object.defineProperty(AoPipeline$ForwardAoPipeline.prototype, 'aoPass', {
    get: function () {
      return this.aoPass_i8vqld$_0;
    }
  });
  Object.defineProperty(AoPipeline$ForwardAoPipeline.prototype, 'denoisePass', {
    get: function () {
      return this.denoisePass_wz7oly$_0;
    }
  });
  AoPipeline$ForwardAoPipeline.prototype.setEnabled_6taknv$ = function (enabled) {
    AoPipeline.prototype.setEnabled_6taknv$.call(this, enabled);
    this.depthPass.isEnabled = enabled;
  };
  function AoPipeline$AoPipeline$ForwardAoPipeline_init$lambda(closure$proxyCamera, closure$scene) {
    return function (ctx) {
      closure$proxyCamera.sync_hrtwbc$(closure$scene.mainRenderPass.viewport, ctx);
      return Unit;
    };
  }
  function AoPipeline$AoPipeline$ForwardAoPipeline_init$lambda_0(this$ForwardAoPipeline) {
    return function ($receiver, ctx) {
      var mapW = numberToInt($receiver.mainRenderPass.viewport.width * this$ForwardAoPipeline.size);
      var mapH = numberToInt($receiver.mainRenderPass.viewport.height * this$ForwardAoPipeline.size);
      if (mapW > 0 && mapH > 0 && (mapW !== this$ForwardAoPipeline.mapWidth_0 || mapH !== this$ForwardAoPipeline.mapHeight_0)) {
        this$ForwardAoPipeline.mapWidth_0 = mapW;
        this$ForwardAoPipeline.mapHeight_0 = mapH;
        this$ForwardAoPipeline.depthPass.resize_w70mbp$(mapW, mapH, ctx);
        this$ForwardAoPipeline.aoPass.resize_w70mbp$(mapW, mapH, ctx);
        this$ForwardAoPipeline.denoisePass.resize_w70mbp$(mapW, mapH, ctx);
      }return Unit;
    };
  }
  AoPipeline$ForwardAoPipeline.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ForwardAoPipeline',
    interfaces: [AoPipeline]
  };
  function AoPipeline$DeferredAoPipeline(scene, mrtPass) {
    AoPipeline.call(this);
    this.aoPass_6v2ifx$_0 = null;
    this.denoisePass_mxbezy$_0 = null;
    this.mapWidth_0 = numberToInt(mrtPass.texWidth * this.size);
    this.mapHeight_0 = numberToInt(mrtPass.texHeight * this.size);
    this.aoPass_6v2ifx$_0 = new AmbientOcclusionPass(mrtPass.camera, AoSetup$Companion_getInstance().deferred_u6tred$(mrtPass), this.mapWidth_0, this.mapHeight_0);
    this.aoPass.dependsOn_yqp8fe$(mrtPass);
    this.denoisePass_mxbezy$_0 = new AoDenoisePass(this.aoPass, mrtPass.positionAo, 'z');
    this.denoisePass.dependsOn_yqp8fe$(this.aoPass);
    scene.addOffscreenPass_m1c2kf$(this.aoPass);
    scene.addOffscreenPass_m1c2kf$(this.denoisePass);
    scene.onRenderScene.add_11rb$(AoPipeline$AoPipeline$DeferredAoPipeline_init$lambda(mrtPass, this));
  }
  Object.defineProperty(AoPipeline$DeferredAoPipeline.prototype, 'aoPass', {
    get: function () {
      return this.aoPass_6v2ifx$_0;
    }
  });
  Object.defineProperty(AoPipeline$DeferredAoPipeline.prototype, 'denoisePass', {
    get: function () {
      return this.denoisePass_mxbezy$_0;
    }
  });
  function AoPipeline$AoPipeline$DeferredAoPipeline_init$lambda(closure$mrtPass, this$DeferredAoPipeline) {
    return function ($receiver, ctx) {
      var mapW = numberToInt(closure$mrtPass.texWidth * this$DeferredAoPipeline.size);
      var mapH = numberToInt(closure$mrtPass.texHeight * this$DeferredAoPipeline.size);
      if (mapW > 0 && mapH > 0 && (mapW !== this$DeferredAoPipeline.mapWidth_0 || mapH !== this$DeferredAoPipeline.mapHeight_0)) {
        this$DeferredAoPipeline.mapWidth_0 = mapW;
        this$DeferredAoPipeline.mapHeight_0 = mapH;
        this$DeferredAoPipeline.aoPass.resize_w70mbp$(mapW, mapH, ctx);
        this$DeferredAoPipeline.denoisePass.resize_w70mbp$(mapW, mapH, ctx);
      }return Unit;
    };
  }
  AoPipeline$DeferredAoPipeline.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DeferredAoPipeline',
    interfaces: [AoPipeline]
  };
  function AoPipeline$ProxyCamera(master) {
    PerspectiveCamera.call(this);
    this.master = master;
    this.useViewportAspectRatio = false;
    this.projCorrectionMode = Camera$ProjCorrectionMode$OFFSCREEN_getInstance();
  }
  AoPipeline$ProxyCamera.prototype.sync_hrtwbc$ = function (viewport, ctx) {
    this.master.updateCamera_fd1mc0$(ctx, viewport);
    this.position.set_czzhiu$(this.master.globalPos);
    this.lookAt.set_czzhiu$(this.master.globalLookAt);
    this.up.set_czzhiu$(this.master.globalUp);
    this.aspectRatio = this.master.aspectRatio;
    this.fovY = this.master.fovY;
    this.clipNear = this.master.clipNear;
    this.clipFar = this.master.clipFar;
  };
  AoPipeline$ProxyCamera.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ProxyCamera',
    interfaces: [PerspectiveCamera]
  };
  function AoPipeline$Companion() {
    AoPipeline$Companion_instance = this;
  }
  AoPipeline$Companion.prototype.createForward_ushge7$ = function (scene) {
    return new AoPipeline$ForwardAoPipeline(scene);
  };
  AoPipeline$Companion.prototype.createDeferred_4lrvgg$ = function (scene, mrtPass) {
    return new AoPipeline$DeferredAoPipeline(scene, mrtPass);
  };
  AoPipeline$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AoPipeline$Companion_instance = null;
  function AoPipeline$Companion_getInstance() {
    if (AoPipeline$Companion_instance === null) {
      new AoPipeline$Companion();
    }return AoPipeline$Companion_instance;
  }
  AoPipeline.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AoPipeline',
    interfaces: []
  };
  function BoundingBox() {
    this.mutMin_0 = MutableVec3f_init();
    this.mutMax_0 = MutableVec3f_init();
    this.mutSize_0 = MutableVec3f_init();
    this.mutCenter_0 = MutableVec3f_init();
    this.isEmpty_xiuk4h$_0 = true;
    this.min = this.mutMin_0;
    this.max = this.mutMax_0;
    this.size = this.mutSize_0;
    this.center = this.mutCenter_0;
    this.isBatchUpdate_4nlnat$_0 = false;
  }
  Object.defineProperty(BoundingBox.prototype, 'isEmpty', {
    get: function () {
      return this.isEmpty_xiuk4h$_0;
    },
    set: function (isEmpty) {
      this.isEmpty_xiuk4h$_0 = isEmpty;
    }
  });
  Object.defineProperty(BoundingBox.prototype, 'isBatchUpdate', {
    get: function () {
      return this.isBatchUpdate_4nlnat$_0;
    },
    set: function (value) {
      this.isBatchUpdate_4nlnat$_0 = value;
      if (!value) {
        this.updateSizeAndCenter_0();
      }}
  });
  BoundingBox.prototype.updateSizeAndCenter_0 = function () {
    if (!this.isBatchUpdate) {
      this.mutMax_0.subtract_2gj7b4$(this.mutMin_0, this.mutSize_0);
      this.size.scale_749b8l$(0.5, this.mutCenter_0).add_czzhiu$(this.min);
    }};
  BoundingBox.prototype.addPoint_0 = function (point) {
    if (this.isEmpty) {
      this.mutMin_0.set_czzhiu$(point);
      this.mutMax_0.set_czzhiu$(point);
      this.isEmpty = false;
    } else {
      if (point.x < this.min.x) {
        this.mutMin_0.x = point.x;
      }if (point.y < this.min.y) {
        this.mutMin_0.y = point.y;
      }if (point.z < this.min.z) {
        this.mutMin_0.z = point.z;
      }if (point.x > this.max.x) {
        this.mutMax_0.x = point.x;
      }if (point.y > this.max.y) {
        this.mutMax_0.y = point.y;
      }if (point.z > this.max.z) {
        this.mutMax_0.z = point.z;
      }}
  };
  BoundingBox.prototype.batchUpdate_xanadp$ = defineInlineFunction('kool.de.fabmax.kool.util.BoundingBox.batchUpdate_xanadp$', function (block) {
    var wasBatchUpdate = this.isBatchUpdate;
    this.isBatchUpdate = true;
    block(this);
    this.isBatchUpdate = wasBatchUpdate;
  });
  BoundingBox.prototype.isFuzzyEqual_ea4od8$ = function (other) {
    return this.isEmpty === other.isEmpty && this.min.isFuzzyEqual_2qa7tb$(other.min) && this.max.isFuzzyEqual_2qa7tb$(other.max);
  };
  BoundingBox.prototype.clear = function () {
    this.isEmpty = true;
    this.mutMin_0.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.mutMax_0.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.updateSizeAndCenter_0();
    return this;
  };
  BoundingBox.prototype.add_czzhiu$ = function (point) {
    this.addPoint_0(point);
    this.updateSizeAndCenter_0();
    return this;
  };
  BoundingBox.prototype.add_uqk38n$ = function (points) {
    this.add_3y53ni$(points, get_indices(points));
    return this;
  };
  BoundingBox.prototype.add_3y53ni$ = function (points, range) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = range.first;
    tmp$_0 = range.last;
    tmp$_1 = range.step;
    for (var i = tmp$; i <= tmp$_0; i += tmp$_1) {
      this.addPoint_0(points.get_za3lpa$(i));
    }
    this.updateSizeAndCenter_0();
    return this;
  };
  BoundingBox.prototype.add_ea4od8$ = function (aabb) {
    if (!aabb.isEmpty) {
      this.addPoint_0(aabb.min);
      this.addPoint_0(aabb.max);
      this.updateSizeAndCenter_0();
    }return this;
  };
  BoundingBox.prototype.expand_czzhiu$ = function (e) {
    if (this.isEmpty) {
      throw KoolException_init('Empty BoundingBox cannot be expanded');
    }this.mutMin_0.minusAssign_czzhiu$(e);
    this.mutMax_0.plusAssign_czzhiu$(e);
    this.updateSizeAndCenter_0();
    return this;
  };
  BoundingBox.prototype.signedExpand_czzhiu$ = function (e) {
    if (this.isEmpty) {
      throw KoolException_init('Empty BoundingBox cannot be expanded');
    }if (e.x > 0)
      this.mutMax_0.x = this.mutMax_0.x + e.x;
    else
      this.mutMin_0.x = this.mutMin_0.x + e.x;
    if (e.y > 0)
      this.mutMax_0.y = this.mutMax_0.y + e.y;
    else
      this.mutMin_0.y = this.mutMin_0.y + e.y;
    if (e.z > 0)
      this.mutMax_0.z = this.mutMax_0.z + e.z;
    else
      this.mutMin_0.z = this.mutMin_0.z + e.z;
    this.updateSizeAndCenter_0();
    return this;
  };
  BoundingBox.prototype.set_ea4od8$ = function (other) {
    this.mutMin_0.set_czzhiu$(other.min);
    this.mutMax_0.set_czzhiu$(other.max);
    this.mutSize_0.set_czzhiu$(other.size);
    this.mutCenter_0.set_czzhiu$(other.center);
    this.isEmpty = other.isEmpty;
    return this;
  };
  BoundingBox.prototype.set_4lfkt4$ = function (min, max) {
    this.isEmpty = false;
    this.mutMin_0.set_czzhiu$(min);
    this.mutMax_0.set_czzhiu$(max);
    this.updateSizeAndCenter_0();
    return this;
  };
  BoundingBox.prototype.set_w8lrqs$ = function (minX, minY, minZ, maxX, maxY, maxZ) {
    this.isEmpty = false;
    this.mutMin_0.set_y2kzbl$(minX, minY, minZ);
    this.mutMax_0.set_y2kzbl$(maxX, maxY, maxZ);
    this.updateSizeAndCenter_0();
    return this;
  };
  BoundingBox.prototype.move_czzhiu$ = function (offset) {
    return this.move_y2kzbl$(offset.x, offset.y, offset.z);
  };
  BoundingBox.prototype.move_y2kzbl$ = function (x, y, z) {
    if (this.isEmpty) {
      throw KoolException_init('Empty BoundingBox cannot be moved');
    }this.mutMin_0.x = this.mutMin_0.x + x;
    this.mutMin_0.y = this.mutMin_0.y + y;
    this.mutMin_0.z = this.mutMin_0.z + z;
    this.mutMax_0.x = this.mutMax_0.x + x;
    this.mutMax_0.y = this.mutMax_0.y + y;
    this.mutMax_0.z = this.mutMax_0.z + z;
    this.mutCenter_0.x = this.mutCenter_0.x + x;
    this.mutCenter_0.y = this.mutCenter_0.y + y;
    this.mutCenter_0.z = this.mutCenter_0.z + z;
    return this;
  };
  BoundingBox.prototype.setMerged_hnxjto$ = function (aabb1, aabb2) {
    var tmp$ = this.mutMin_0;
    var a = aabb1.min.x;
    var b = aabb2.min.x;
    tmp$.x = Math_0.min(a, b);
    var tmp$_0 = this.mutMin_0;
    var a_0 = aabb1.min.y;
    var b_0 = aabb2.min.y;
    tmp$_0.y = Math_0.min(a_0, b_0);
    var tmp$_1 = this.mutMin_0;
    var a_1 = aabb1.min.z;
    var b_1 = aabb2.min.z;
    tmp$_1.z = Math_0.min(a_1, b_1);
    var tmp$_2 = this.mutMax_0;
    var a_2 = aabb1.max.x;
    var b_2 = aabb2.max.x;
    tmp$_2.x = Math_0.max(a_2, b_2);
    var tmp$_3 = this.mutMax_0;
    var a_3 = aabb1.max.y;
    var b_3 = aabb2.max.y;
    tmp$_3.y = Math_0.max(a_3, b_3);
    var tmp$_4 = this.mutMax_0;
    var a_4 = aabb1.max.z;
    var b_4 = aabb2.max.z;
    tmp$_4.z = Math_0.max(a_4, b_4);
    this.isEmpty = false;
    this.updateSizeAndCenter_0();
    return this;
  };
  BoundingBox.prototype.contains_czzhiu$ = function (point) {
    return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;
  };
  BoundingBox.prototype.contains_y2kzbl$ = function (x, y, z) {
    return x >= this.min.x && x <= this.max.x && y >= this.min.y && y <= this.max.y && z >= this.min.z && z <= this.max.z;
  };
  BoundingBox.prototype.contains_ea4od8$ = function (aabb) {
    return this.contains_czzhiu$(aabb.min) && this.contains_czzhiu$(aabb.max);
  };
  BoundingBox.prototype.isIntersecting_ea4od8$ = function (aabb) {
    return this.min.x <= aabb.max.x && this.max.x >= aabb.min.x && this.min.y <= aabb.max.y && this.max.y >= aabb.min.y && this.min.z <= aabb.max.z && this.max.z >= aabb.min.z;
  };
  BoundingBox.prototype.clampToBounds_5s4mqq$ = function (point) {
    var $receiver = point.x;
    var min = this.min.x;
    var max = this.max.x;
    var clamp$result;
    if ($receiver < min) {
      clamp$result = min;
    } else if ($receiver > max) {
      clamp$result = max;
    } else {
      clamp$result = $receiver;
    }
    point.x = clamp$result;
    var $receiver_0 = point.y;
    var min_0 = this.min.y;
    var max_0 = this.max.y;
    var clamp$result_0;
    if ($receiver_0 < min_0) {
      clamp$result_0 = min_0;
    } else if ($receiver_0 > max_0) {
      clamp$result_0 = max_0;
    } else {
      clamp$result_0 = $receiver_0;
    }
    point.y = clamp$result_0;
    var $receiver_1 = point.z;
    var min_1 = this.min.z;
    var max_1 = this.max.z;
    var clamp$result_1;
    if ($receiver_1 < min_1) {
      clamp$result_1 = min_1;
    } else if ($receiver_1 > max_1) {
      clamp$result_1 = max_1;
    } else {
      clamp$result_1 = $receiver_1;
    }
    point.z = clamp$result_1;
  };
  BoundingBox.prototype.clampToBounds_5s4mqs$ = function (point) {
    var $receiver = point.x;
    var min = this.min.x;
    var max = this.max.x;
    var clamp$result;
    if ($receiver < min) {
      clamp$result = min;
    } else if ($receiver > max) {
      clamp$result = max;
    } else {
      clamp$result = $receiver;
    }
    point.x = clamp$result;
    var $receiver_0 = point.y;
    var min_0 = this.min.y;
    var max_0 = this.max.y;
    var clamp$result_0;
    if ($receiver_0 < min_0) {
      clamp$result_0 = min_0;
    } else if ($receiver_0 > max_0) {
      clamp$result_0 = max_0;
    } else {
      clamp$result_0 = $receiver_0;
    }
    point.y = clamp$result_0;
    var $receiver_1 = point.z;
    var min_1 = this.min.z;
    var max_1 = this.max.z;
    var clamp$result_1;
    if ($receiver_1 < min_1) {
      clamp$result_1 = min_1;
    } else if ($receiver_1 > max_1) {
      clamp$result_1 = max_1;
    } else {
      clamp$result_1 = $receiver_1;
    }
    point.z = clamp$result_1;
  };
  BoundingBox.prototype.pointDistance_czzhiu$ = function (pt) {
    var x = this.pointDistanceSqr_czzhiu$(pt);
    return Math_0.sqrt(x);
  };
  BoundingBox.prototype.pointDistanceSqr_czzhiu$ = function (pt) {
    if (this.contains_czzhiu$(pt)) {
      return 0.0;
    }var x = 0.0;
    var y = 0.0;
    var z = 0.0;
    var tmp = pt.x - this.min.x;
    if (tmp < 0) {
      x = tmp;
    } else {
      tmp = this.max.x - pt.x;
      if (tmp < 0) {
        x = tmp;
      }}
    tmp = pt.y - this.min.y;
    if (tmp < 0) {
      y = tmp;
    } else {
      tmp = this.max.y - pt.y;
      if (tmp < 0) {
        y = tmp;
      }}
    tmp = pt.z - this.min.z;
    if (tmp < 0) {
      z = tmp;
    } else {
      tmp = this.max.z - pt.z;
      if (tmp < 0) {
        z = tmp;
      }}
    return x * x + y * y + z * z;
  };
  BoundingBox.prototype.hitDistanceSqr_nvyeur$ = function (ray) {
    var tmin;
    var tmax;
    var tymin;
    var tymax;
    var tzmin;
    var tzmax;
    if (this.isEmpty) {
      return kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    }if (this.contains_czzhiu$(ray.origin)) {
      return 0.0;
    }var div = 1.0 / ray.direction.x;
    if (div >= 0.0) {
      tmin = (this.min.x - ray.origin.x) * div;
      tmax = (this.max.x - ray.origin.x) * div;
    } else {
      tmin = (this.max.x - ray.origin.x) * div;
      tmax = (this.min.x - ray.origin.x) * div;
    }
    div = 1.0 / ray.direction.y;
    if (div >= 0.0) {
      tymin = (this.min.y - ray.origin.y) * div;
      tymax = (this.max.y - ray.origin.y) * div;
    } else {
      tymin = (this.max.y - ray.origin.y) * div;
      tymax = (this.min.y - ray.origin.y) * div;
    }
    if (tmin > tymax || tymin > tmax) {
      return kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    }if (tymin > tmin) {
      tmin = tymin;
    }if (tymax < tmax) {
      tmax = tymax;
    }div = 1.0 / ray.direction.z;
    if (div >= 0.0) {
      tzmin = (this.min.z - ray.origin.z) * div;
      tzmax = (this.max.z - ray.origin.z) * div;
    } else {
      tzmin = (this.max.z - ray.origin.z) * div;
      tzmax = (this.min.z - ray.origin.z) * div;
    }
    if (tmin > tzmax || tzmin > tmax) {
      return kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    }if (tzmin > tmin) {
      tmin = tzmin;
    }if (tmin > 0) {
      var comp = ray.direction.x * tmin;
      var dist = comp * comp;
      comp = ray.direction.y * tmin;
      dist += comp * comp;
      comp = ray.direction.z * tmin;
      dist += comp * comp;
      return dist / ray.direction.sqrLength();
    } else {
      return kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    }
  };
  BoundingBox.prototype.toString = function () {
    var tmp$;
    if (this.isEmpty) {
      tmp$ = '[empty]';
    } else {
      tmp$ = '[min=' + this.min + ', max=' + this.max + ']';
    }
    return tmp$;
  };
  BoundingBox.prototype.equals = function (other) {
    var tmp$, tmp$_0;
    if (this === other)
      return true;
    if (!Kotlin.isType(other, BoundingBox))
      return false;
    if (this.isEmpty !== other.isEmpty)
      return false;
    if (!((tmp$ = this.min) != null ? tmp$.equals(other.min) : null))
      return false;
    if (!((tmp$_0 = this.max) != null ? tmp$_0.equals(other.max) : null))
      return false;
    return true;
  };
  BoundingBox.prototype.hashCode = function () {
    var result = hashCode(this.isEmpty);
    result = (31 * result | 0) + this.min.hashCode() | 0;
    result = (31 * result | 0) + this.max.hashCode() | 0;
    return result;
  };
  BoundingBox.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BoundingBox',
    interfaces: []
  };
  function BoundingBox_init(min, max, $this) {
    $this = $this || Object.create(BoundingBox.prototype);
    BoundingBox.call($this);
    $this.set_4lfkt4$(min, max);
    return $this;
  }
  function Buffer() {
  }
  Buffer.prototype.removeAt_za3lpa$ = function (index) {
    if (this.position > index) {
      this.position = this.position - 1 | 0;
    }if (this.limit > index) {
      this.limit = this.limit - 1 | 0;
    }};
  Buffer.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Buffer',
    interfaces: []
  };
  function Uint8Buffer() {
  }
  Uint8Buffer.prototype.plusAssign_s8j3t7$ = function (value) {
    this.put_s8j3t7$(value);
  };
  Uint8Buffer.prototype.put_fqrh44$ = function (data) {
    return this.put_mj6st8$(data, 0, data.length);
  };
  Uint8Buffer.prototype.removeAt_za3lpa$ = function (index) {
    var tmp$;
    tmp$ = this.position;
    for (var i = index; i < tmp$; i++) {
      this.set_6t1wet$(i, this.get_za3lpa$(i + 1 | 0));
    }
    Buffer.prototype.removeAt_za3lpa$.call(this, index);
  };
  Uint8Buffer.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Uint8Buffer',
    interfaces: [Buffer]
  };
  function Uint16Buffer() {
  }
  Uint16Buffer.prototype.plusAssign_mq22fl$ = function (value) {
    this.put_mq22fl$(value);
  };
  Uint16Buffer.prototype.put_gmedm2$ = function (data) {
    return this.put_359eei$(data, 0, data.length);
  };
  Uint16Buffer.prototype.removeAt_za3lpa$ = function (index) {
    var tmp$;
    tmp$ = this.position;
    for (var i = index; i < tmp$; i++) {
      this.set_2bqt6h$(i, this.get_za3lpa$(i + 1 | 0));
    }
    Buffer.prototype.removeAt_za3lpa$.call(this, index);
  };
  Uint16Buffer.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Uint16Buffer',
    interfaces: [Buffer]
  };
  function Uint32Buffer() {
  }
  Uint32Buffer.prototype.plusAssign_za3lpa$ = function (value) {
    this.put_za3lpa$(value);
  };
  Uint32Buffer.prototype.put_q5rwfd$ = function (data) {
    return this.put_nd5v6f$(data, 0, data.length);
  };
  Uint32Buffer.prototype.removeAt_za3lpa$ = function (index) {
    var tmp$;
    tmp$ = this.position;
    for (var i = index; i < tmp$; i++) {
      this.set_vux9f0$(i, this.get_za3lpa$(i + 1 | 0));
    }
    Buffer.prototype.removeAt_za3lpa$.call(this, index);
  };
  Uint32Buffer.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Uint32Buffer',
    interfaces: [Buffer]
  };
  function Float32Buffer() {
  }
  Float32Buffer.prototype.plusAssign_mx4ult$ = function (value) {
    this.put_mx4ult$(value);
  };
  Float32Buffer.prototype.put_q3cr5i$ = function (data) {
    return this.put_kgymra$(data, 0, data.length);
  };
  Float32Buffer.prototype.removeAt_za3lpa$ = function (index) {
    var tmp$;
    tmp$ = this.position;
    for (var i = index; i < tmp$; i++) {
      this.set_24o109$(i, this.get_za3lpa$(i + 1 | 0));
    }
    Buffer.prototype.removeAt_za3lpa$.call(this, index);
  };
  Float32Buffer.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Float32Buffer',
    interfaces: [Buffer]
  };
  function MixedBuffer() {
  }
  MixedBuffer.prototype.putUint8_fqrh44$ = function (data) {
    return this.putUint8_mj6st8$(data, 0, data.length);
  };
  MixedBuffer.prototype.putUint16_gmedm2$ = function (data) {
    return this.putUint16_359eei$(data, 0, data.length);
  };
  MixedBuffer.prototype.putUint32_q5rwfd$ = function (data) {
    return this.putUint32_nd5v6f$(data, 0, data.length);
  };
  MixedBuffer.prototype.putFloat32_q3cr5i$ = function (data) {
    return this.putFloat32_kgymra$(data, 0, data.length);
  };
  MixedBuffer.prototype.removeAt_za3lpa$ = function (index) {
    throw KoolException_init('MixedBuffer does not support element removal');
  };
  MixedBuffer.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'MixedBuffer',
    interfaces: [Buffer]
  };
  function Vec2fView(buf, offset) {
    MutableVec2f_init(this);
    this.buf_0 = buf;
    this.offset = offset;
  }
  Vec2fView.prototype.get_za3lpa$ = function (i) {
    return this.buf_0.get_za3lpa$(this.offset + i | 0);
  };
  Vec2fView.prototype.set_24o109$ = function (i, v) {
    this.buf_0.set_24o109$(this.offset + i | 0, v);
  };
  Vec2fView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec2fView',
    interfaces: [MutableVec2f]
  };
  function Vec3fView(buf, offset) {
    MutableVec3f_init(this);
    this.buf_0 = buf;
    this.offset = offset;
  }
  Vec3fView.prototype.get_za3lpa$ = function (i) {
    return this.buf_0.get_za3lpa$(this.offset + i | 0);
  };
  Vec3fView.prototype.set_24o109$ = function (i, v) {
    this.buf_0.set_24o109$(this.offset + i | 0, v);
  };
  Vec3fView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec3fView',
    interfaces: [MutableVec3f]
  };
  function Vec4fView(buf, offset) {
    MutableVec4f_init(this);
    this.buf_0 = buf;
    this.offset = offset;
  }
  Vec4fView.prototype.get_za3lpa$ = function (i) {
    return this.buf_0.get_za3lpa$(this.offset + i | 0);
  };
  Vec4fView.prototype.set_24o109$ = function (i, v) {
    this.buf_0.set_24o109$(this.offset + i | 0, v);
  };
  Vec4fView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec4fView',
    interfaces: [MutableVec4f]
  };
  function copy($receiver) {
    var size = $receiver.size;
    var list = ArrayList_init(size);
    for (var index = 0; index < size; index++) {
      list.add_11rb$($receiver.get_za3lpa$(index));
    }
    return list;
  }
  function copy_0($receiver) {
    var $receiver_0 = LinkedHashSet_init();
    $receiver_0.addAll_brywnq$($receiver);
    return $receiver_0;
  }
  function Color(r, g, b, a) {
    Color$Companion_getInstance();
    if (a === void 0)
      a = 1.0;
    Vec4f.call(this, r, g, b, a);
  }
  Object.defineProperty(Color.prototype, 'r', {
    get: function () {
      return this.get_za3lpa$(0);
    }
  });
  Object.defineProperty(Color.prototype, 'g', {
    get: function () {
      return this.get_za3lpa$(1);
    }
  });
  Object.defineProperty(Color.prototype, 'b', {
    get: function () {
      return this.get_za3lpa$(2);
    }
  });
  Object.defineProperty(Color.prototype, 'a', {
    get: function () {
      return this.get_za3lpa$(3);
    }
  });
  Color.prototype.mix_y83vuj$ = function (other, weight) {
    return this.mix_jpxij3$(other, weight, MutableColor_init());
  };
  Color.prototype.mix_jpxij3$ = function (other, weight, result) {
    result.r = other.r * weight + this.r * (1.0 - weight);
    result.g = other.g * weight + this.g * (1.0 - weight);
    result.b = other.b * weight + this.b * (1.0 - weight);
    result.a = other.a * weight + this.a * (1.0 - weight);
    return result;
  };
  Color.prototype.withAlpha_mx4ult$ = function (alpha) {
    return new MutableColor(this.r, this.g, this.b, alpha);
  };
  Color.prototype.toLinear = function () {
    return this.gamma_mx4ult$(2.2);
  };
  Color.prototype.toSrgb = function () {
    return this.gamma_mx4ult$(1.0 / 2.2);
  };
  Color.prototype.gamma_mx4ult$ = function (gamma) {
    var $receiver = this.r;
    var tmp$ = Math_0.pow($receiver, gamma);
    var $receiver_0 = this.g;
    var tmp$_0 = Math_0.pow($receiver_0, gamma);
    var $receiver_1 = this.b;
    return new Color(tmp$, tmp$_0, Math_0.pow($receiver_1, gamma), this.a);
  };
  function Color$Companion() {
    Color$Companion_instance = this;
    this.BLACK = new Color(0.0, 0.0, 0.0, 1.0);
    this.DARK_GRAY = new Color(0.25, 0.25, 0.25, 1.0);
    this.GRAY = new Color(0.5, 0.5, 0.5, 1.0);
    this.LIGHT_GRAY = new Color(0.75, 0.75, 0.75, 1.0);
    this.WHITE = new Color(1.0, 1.0, 1.0, 1.0);
    this.RED = new Color(1.0, 0.0, 0.0, 1.0);
    this.GREEN = new Color(0.0, 1.0, 0.0, 1.0);
    this.BLUE = new Color(0.0, 0.0, 1.0, 1.0);
    this.YELLOW = new Color(1.0, 1.0, 0.0, 1.0);
    this.CYAN = new Color(0.0, 1.0, 1.0, 1.0);
    this.MAGENTA = new Color(1.0, 0.0, 1.0, 1.0);
    this.ORANGE = new Color(1.0, 0.5, 0.0, 1.0);
    this.LIME = new Color(0.7, 1.0, 0.0, 1.0);
    this.LIGHT_RED = new Color(1.0, 0.5, 0.5, 1.0);
    this.LIGHT_GREEN = new Color(0.5, 1.0, 0.5, 1.0);
    this.LIGHT_BLUE = new Color(0.5, 0.5, 1.0, 1.0);
    this.LIGHT_YELLOW = new Color(1.0, 1.0, 0.5, 1.0);
    this.LIGHT_CYAN = new Color(0.5, 1.0, 1.0, 1.0);
    this.LIGHT_MAGENTA = new Color(1.0, 0.5, 1.0, 1.0);
    this.LIGHT_ORANGE = new Color(1.0, 0.75, 0.5, 1.0);
    this.DARK_RED = new Color(0.5, 0.0, 0.0, 1.0);
    this.DARK_GREEN = new Color(0.0, 0.5, 0.0, 1.0);
    this.DARK_BLUE = new Color(0.0, 0.0, 0.5, 1.0);
    this.DARK_YELLOW = new Color(0.5, 0.5, 0.0, 1.0);
    this.DARK_CYAN = new Color(0.0, 0.5, 0.5, 1.0);
    this.DARK_MAGENTA = new Color(0.5, 0.0, 0.5, 1.0);
    this.DARK_ORANGE = new Color(0.5, 0.25, 0.0, 1.0);
    this.MD_RED_50 = this.fromHex_61zpoe$('FFEBEE');
    this.MD_RED_100 = this.fromHex_61zpoe$('FFCDD2');
    this.MD_RED_200 = this.fromHex_61zpoe$('EF9A9A');
    this.MD_RED_300 = this.fromHex_61zpoe$('E57373');
    this.MD_RED_400 = this.fromHex_61zpoe$('EF5350');
    this.MD_RED_500 = this.fromHex_61zpoe$('F44336');
    this.MD_RED_600 = this.fromHex_61zpoe$('E53935');
    this.MD_RED_700 = this.fromHex_61zpoe$('D32F2F');
    this.MD_RED_800 = this.fromHex_61zpoe$('C62828');
    this.MD_RED_900 = this.fromHex_61zpoe$('B71C1C');
    this.MD_RED_A100 = this.fromHex_61zpoe$('FF8A80');
    this.MD_RED_A200 = this.fromHex_61zpoe$('FF5252');
    this.MD_RED_A400 = this.fromHex_61zpoe$('FF1744');
    this.MD_RED_A700 = this.fromHex_61zpoe$('D50000');
    this.MD_RED = this.MD_RED_500;
    this.MD_PINK_50 = this.fromHex_61zpoe$('FCE4EC');
    this.MD_PINK_100 = this.fromHex_61zpoe$('F8BBD0');
    this.MD_PINK_200 = this.fromHex_61zpoe$('F48FB1');
    this.MD_PINK_300 = this.fromHex_61zpoe$('F06292');
    this.MD_PINK_400 = this.fromHex_61zpoe$('EC407A');
    this.MD_PINK_500 = this.fromHex_61zpoe$('E91E63');
    this.MD_PINK_600 = this.fromHex_61zpoe$('D81B60');
    this.MD_PINK_700 = this.fromHex_61zpoe$('C2185B');
    this.MD_PINK_800 = this.fromHex_61zpoe$('AD1457');
    this.MD_PINK_900 = this.fromHex_61zpoe$('880E4F');
    this.MD_PINK_A100 = this.fromHex_61zpoe$('FF80AB');
    this.MD_PINK_A200 = this.fromHex_61zpoe$('FF4081');
    this.MD_PINK_A400 = this.fromHex_61zpoe$('F50057');
    this.MD_PINK_A700 = this.fromHex_61zpoe$('C51162');
    this.MD_PINK = this.MD_PINK_500;
    this.MD_PURPLE_50 = this.fromHex_61zpoe$('F3E5F5');
    this.MD_PURPLE_100 = this.fromHex_61zpoe$('E1BEE7');
    this.MD_PURPLE_200 = this.fromHex_61zpoe$('CE93D8');
    this.MD_PURPLE_300 = this.fromHex_61zpoe$('BA68C8');
    this.MD_PURPLE_400 = this.fromHex_61zpoe$('AB47BC');
    this.MD_PURPLE_500 = this.fromHex_61zpoe$('9C27B0');
    this.MD_PURPLE_600 = this.fromHex_61zpoe$('8E24AA');
    this.MD_PURPLE_700 = this.fromHex_61zpoe$('7B1FA2');
    this.MD_PURPLE_800 = this.fromHex_61zpoe$('6A1B9A');
    this.MD_PURPLE_900 = this.fromHex_61zpoe$('4A148C');
    this.MD_PURPLE_A100 = this.fromHex_61zpoe$('EA80FC');
    this.MD_PURPLE_A200 = this.fromHex_61zpoe$('E040FB');
    this.MD_PURPLE_A400 = this.fromHex_61zpoe$('D500F9');
    this.MD_PURPLE_A700 = this.fromHex_61zpoe$('AA00FF');
    this.MD_PURPLE = this.MD_PURPLE_500;
    this.MD_DEEP_PURPLE_50 = this.fromHex_61zpoe$('EDE7F6');
    this.MD_DEEP_PURPLE_100 = this.fromHex_61zpoe$('D1C4E9');
    this.MD_DEEP_PURPLE_200 = this.fromHex_61zpoe$('B39DDB');
    this.MD_DEEP_PURPLE_300 = this.fromHex_61zpoe$('9575CD');
    this.MD_DEEP_PURPLE_400 = this.fromHex_61zpoe$('7E57C2');
    this.MD_DEEP_PURPLE_500 = this.fromHex_61zpoe$('673AB7');
    this.MD_DEEP_PURPLE_600 = this.fromHex_61zpoe$('5E35B1');
    this.MD_DEEP_PURPLE_700 = this.fromHex_61zpoe$('512DA8');
    this.MD_DEEP_PURPLE_800 = this.fromHex_61zpoe$('4527A0');
    this.MD_DEEP_PURPLE_900 = this.fromHex_61zpoe$('311B92');
    this.MD_DEEP_PURPLE_A100 = this.fromHex_61zpoe$('B388FF');
    this.MD_DEEP_PURPLE_A200 = this.fromHex_61zpoe$('7C4DFF');
    this.MD_DEEP_PURPLE_A400 = this.fromHex_61zpoe$('651FFF');
    this.MD_DEEP_PURPLE_A700 = this.fromHex_61zpoe$('6200EA');
    this.MD_DEEP_PURPLE = this.MD_DEEP_PURPLE_500;
    this.MD_INDIGO_50 = this.fromHex_61zpoe$('E8EAF6');
    this.MD_INDIGO_100 = this.fromHex_61zpoe$('C5CAE9');
    this.MD_INDIGO_200 = this.fromHex_61zpoe$('9FA8DA');
    this.MD_INDIGO_300 = this.fromHex_61zpoe$('7986CB');
    this.MD_INDIGO_400 = this.fromHex_61zpoe$('5C6BC0');
    this.MD_INDIGO_500 = this.fromHex_61zpoe$('3F51B5');
    this.MD_INDIGO_600 = this.fromHex_61zpoe$('3949AB');
    this.MD_INDIGO_700 = this.fromHex_61zpoe$('303F9F');
    this.MD_INDIGO_800 = this.fromHex_61zpoe$('283593');
    this.MD_INDIGO_900 = this.fromHex_61zpoe$('1A237E');
    this.MD_INDIGO_A100 = this.fromHex_61zpoe$('8C9EFF');
    this.MD_INDIGO_A200 = this.fromHex_61zpoe$('536DFE');
    this.MD_INDIGO_A400 = this.fromHex_61zpoe$('3D5AFE');
    this.MD_INDIGO_A700 = this.fromHex_61zpoe$('304FFE');
    this.MD_INDIGO = this.MD_INDIGO_500;
    this.MD_BLUE_50 = this.fromHex_61zpoe$('E3F2FD');
    this.MD_BLUE_100 = this.fromHex_61zpoe$('BBDEFB');
    this.MD_BLUE_200 = this.fromHex_61zpoe$('90CAF9');
    this.MD_BLUE_300 = this.fromHex_61zpoe$('64B5F6');
    this.MD_BLUE_400 = this.fromHex_61zpoe$('42A5F5');
    this.MD_BLUE_500 = this.fromHex_61zpoe$('2196F3');
    this.MD_BLUE_600 = this.fromHex_61zpoe$('1E88E5');
    this.MD_BLUE_700 = this.fromHex_61zpoe$('1976D2');
    this.MD_BLUE_800 = this.fromHex_61zpoe$('1565C0');
    this.MD_BLUE_900 = this.fromHex_61zpoe$('0D47A1');
    this.MD_BLUE_A100 = this.fromHex_61zpoe$('82B1FF');
    this.MD_BLUE_A200 = this.fromHex_61zpoe$('448AFF');
    this.MD_BLUE_A400 = this.fromHex_61zpoe$('2979FF');
    this.MD_BLUE_A700 = this.fromHex_61zpoe$('2962FF');
    this.MD_BLUE = this.MD_BLUE_500;
    this.MD_LIGHT_BLUE_50 = this.fromHex_61zpoe$('E1F5FE');
    this.MD_LIGHT_BLUE_100 = this.fromHex_61zpoe$('B3E5FC');
    this.MD_LIGHT_BLUE_200 = this.fromHex_61zpoe$('81D4FA');
    this.MD_LIGHT_BLUE_300 = this.fromHex_61zpoe$('4FC3F7');
    this.MD_LIGHT_BLUE_400 = this.fromHex_61zpoe$('29B6F6');
    this.MD_LIGHT_BLUE_500 = this.fromHex_61zpoe$('03A9F4');
    this.MD_LIGHT_BLUE_600 = this.fromHex_61zpoe$('039BE5');
    this.MD_LIGHT_BLUE_700 = this.fromHex_61zpoe$('0288D1');
    this.MD_LIGHT_BLUE_800 = this.fromHex_61zpoe$('0277BD');
    this.MD_LIGHT_BLUE_900 = this.fromHex_61zpoe$('01579B');
    this.MD_LIGHT_BLUE_A100 = this.fromHex_61zpoe$('80D8FF');
    this.MD_LIGHT_BLUE_A200 = this.fromHex_61zpoe$('40C4FF');
    this.MD_LIGHT_BLUE_A400 = this.fromHex_61zpoe$('00B0FF');
    this.MD_LIGHT_BLUE_A700 = this.fromHex_61zpoe$('0091EA');
    this.MD_LIGHT_BLUE = this.MD_LIGHT_BLUE_500;
    this.MD_CYAN_50 = this.fromHex_61zpoe$('E0F7FA');
    this.MD_CYAN_100 = this.fromHex_61zpoe$('B2EBF2');
    this.MD_CYAN_200 = this.fromHex_61zpoe$('80DEEA');
    this.MD_CYAN_300 = this.fromHex_61zpoe$('4DD0E1');
    this.MD_CYAN_400 = this.fromHex_61zpoe$('26C6DA');
    this.MD_CYAN_500 = this.fromHex_61zpoe$('00BCD4');
    this.MD_CYAN_600 = this.fromHex_61zpoe$('00ACC1');
    this.MD_CYAN_700 = this.fromHex_61zpoe$('0097A7');
    this.MD_CYAN_800 = this.fromHex_61zpoe$('00838F');
    this.MD_CYAN_900 = this.fromHex_61zpoe$('006064');
    this.MD_CYAN_A100 = this.fromHex_61zpoe$('84FFFF');
    this.MD_CYAN_A200 = this.fromHex_61zpoe$('18FFFF');
    this.MD_CYAN_A400 = this.fromHex_61zpoe$('00E5FF');
    this.MD_CYAN_A700 = this.fromHex_61zpoe$('00B8D4');
    this.MD_CYAN = this.MD_CYAN_500;
    this.MD_TEAL_50 = this.fromHex_61zpoe$('E0F2F1');
    this.MD_TEAL_100 = this.fromHex_61zpoe$('B2DFDB');
    this.MD_TEAL_200 = this.fromHex_61zpoe$('80CBC4');
    this.MD_TEAL_300 = this.fromHex_61zpoe$('4DB6AC');
    this.MD_TEAL_400 = this.fromHex_61zpoe$('26A69A');
    this.MD_TEAL_500 = this.fromHex_61zpoe$('009688');
    this.MD_TEAL_600 = this.fromHex_61zpoe$('00897B');
    this.MD_TEAL_700 = this.fromHex_61zpoe$('00796B');
    this.MD_TEAL_800 = this.fromHex_61zpoe$('00695C');
    this.MD_TEAL_900 = this.fromHex_61zpoe$('004D40');
    this.MD_TEAL_A100 = this.fromHex_61zpoe$('A7FFEB');
    this.MD_TEAL_A200 = this.fromHex_61zpoe$('64FFDA');
    this.MD_TEAL_A400 = this.fromHex_61zpoe$('1DE9B6');
    this.MD_TEAL_A700 = this.fromHex_61zpoe$('00BFA5');
    this.MD_TEAL = this.MD_TEAL_500;
    this.MD_GREEN_50 = this.fromHex_61zpoe$('E8F5E9');
    this.MD_GREEN_100 = this.fromHex_61zpoe$('C8E6C9');
    this.MD_GREEN_200 = this.fromHex_61zpoe$('A5D6A7');
    this.MD_GREEN_300 = this.fromHex_61zpoe$('81C784');
    this.MD_GREEN_400 = this.fromHex_61zpoe$('66BB6A');
    this.MD_GREEN_500 = this.fromHex_61zpoe$('4CAF50');
    this.MD_GREEN_600 = this.fromHex_61zpoe$('43A047');
    this.MD_GREEN_700 = this.fromHex_61zpoe$('388E3C');
    this.MD_GREEN_800 = this.fromHex_61zpoe$('2E7D32');
    this.MD_GREEN_900 = this.fromHex_61zpoe$('1B5E20');
    this.MD_GREEN_A100 = this.fromHex_61zpoe$('B9F6CA');
    this.MD_GREEN_A200 = this.fromHex_61zpoe$('69F0AE');
    this.MD_GREEN_A400 = this.fromHex_61zpoe$('00E676');
    this.MD_GREEN_A700 = this.fromHex_61zpoe$('00C853');
    this.MD_GREEN = this.MD_GREEN_500;
    this.MD_LIGHT_GREEN_50 = this.fromHex_61zpoe$('F1F8E9');
    this.MD_LIGHT_GREEN_100 = this.fromHex_61zpoe$('DCEDC8');
    this.MD_LIGHT_GREEN_200 = this.fromHex_61zpoe$('C5E1A5');
    this.MD_LIGHT_GREEN_300 = this.fromHex_61zpoe$('AED581');
    this.MD_LIGHT_GREEN_400 = this.fromHex_61zpoe$('9CCC65');
    this.MD_LIGHT_GREEN_500 = this.fromHex_61zpoe$('8BC34A');
    this.MD_LIGHT_GREEN_600 = this.fromHex_61zpoe$('7CB342');
    this.MD_LIGHT_GREEN_700 = this.fromHex_61zpoe$('689F38');
    this.MD_LIGHT_GREEN_800 = this.fromHex_61zpoe$('558B2F');
    this.MD_LIGHT_GREEN_900 = this.fromHex_61zpoe$('33691E');
    this.MD_LIGHT_GREEN_A100 = this.fromHex_61zpoe$('CCFF90');
    this.MD_LIGHT_GREEN_A200 = this.fromHex_61zpoe$('B2FF59');
    this.MD_LIGHT_GREEN_A400 = this.fromHex_61zpoe$('76FF03');
    this.MD_LIGHT_GREEN_A700 = this.fromHex_61zpoe$('64DD17');
    this.MD_LIGHT_GREEN = this.MD_LIGHT_GREEN_500;
    this.MD_LIME_50 = this.fromHex_61zpoe$('F9FBE7');
    this.MD_LIME_100 = this.fromHex_61zpoe$('F0F4C3');
    this.MD_LIME_200 = this.fromHex_61zpoe$('E6EE9C');
    this.MD_LIME_300 = this.fromHex_61zpoe$('DCE775');
    this.MD_LIME_400 = this.fromHex_61zpoe$('D4E157');
    this.MD_LIME_500 = this.fromHex_61zpoe$('CDDC39');
    this.MD_LIME_600 = this.fromHex_61zpoe$('C0CA33');
    this.MD_LIME_700 = this.fromHex_61zpoe$('AFB42B');
    this.MD_LIME_800 = this.fromHex_61zpoe$('9E9D24');
    this.MD_LIME_900 = this.fromHex_61zpoe$('827717');
    this.MD_LIME_A100 = this.fromHex_61zpoe$('F4FF81');
    this.MD_LIME_A200 = this.fromHex_61zpoe$('EEFF41');
    this.MD_LIME_A400 = this.fromHex_61zpoe$('C6FF00');
    this.MD_LIME_A700 = this.fromHex_61zpoe$('AEEA00');
    this.MD_LIME = this.MD_LIME_500;
    this.MD_YELLOW_50 = this.fromHex_61zpoe$('FFFDE7');
    this.MD_YELLOW_100 = this.fromHex_61zpoe$('FFF9C4');
    this.MD_YELLOW_200 = this.fromHex_61zpoe$('FFF59D');
    this.MD_YELLOW_300 = this.fromHex_61zpoe$('FFF176');
    this.MD_YELLOW_400 = this.fromHex_61zpoe$('FFEE58');
    this.MD_YELLOW_500 = this.fromHex_61zpoe$('FFEB3B');
    this.MD_YELLOW_600 = this.fromHex_61zpoe$('FDD835');
    this.MD_YELLOW_700 = this.fromHex_61zpoe$('FBC02D');
    this.MD_YELLOW_800 = this.fromHex_61zpoe$('F9A825');
    this.MD_YELLOW_900 = this.fromHex_61zpoe$('F57F17');
    this.MD_YELLOW_A100 = this.fromHex_61zpoe$('FFFF8D');
    this.MD_YELLOW_A200 = this.fromHex_61zpoe$('FFFF00');
    this.MD_YELLOW_A400 = this.fromHex_61zpoe$('FFEA00');
    this.MD_YELLOW_A700 = this.fromHex_61zpoe$('FFD600');
    this.MD_YELLOW = this.MD_YELLOW_500;
    this.MD_AMBER_50 = this.fromHex_61zpoe$('FFF8E1');
    this.MD_AMBER_100 = this.fromHex_61zpoe$('FFECB3');
    this.MD_AMBER_200 = this.fromHex_61zpoe$('FFE082');
    this.MD_AMBER_300 = this.fromHex_61zpoe$('FFD54F');
    this.MD_AMBER_400 = this.fromHex_61zpoe$('FFCA28');
    this.MD_AMBER_500 = this.fromHex_61zpoe$('FFC107');
    this.MD_AMBER_600 = this.fromHex_61zpoe$('FFB300');
    this.MD_AMBER_700 = this.fromHex_61zpoe$('FFA000');
    this.MD_AMBER_800 = this.fromHex_61zpoe$('FF8F00');
    this.MD_AMBER_900 = this.fromHex_61zpoe$('FF6F00');
    this.MD_AMBER_A100 = this.fromHex_61zpoe$('FFE57F');
    this.MD_AMBER_A200 = this.fromHex_61zpoe$('FFD740');
    this.MD_AMBER_A400 = this.fromHex_61zpoe$('FFC400');
    this.MD_AMBER_A700 = this.fromHex_61zpoe$('FFAB00');
    this.MD_AMBER = this.MD_AMBER_500;
    this.MD_ORANGE_50 = this.fromHex_61zpoe$('FFF3E0');
    this.MD_ORANGE_100 = this.fromHex_61zpoe$('FFE0B2');
    this.MD_ORANGE_200 = this.fromHex_61zpoe$('FFCC80');
    this.MD_ORANGE_300 = this.fromHex_61zpoe$('FFB74D');
    this.MD_ORANGE_400 = this.fromHex_61zpoe$('FFA726');
    this.MD_ORANGE_500 = this.fromHex_61zpoe$('FF9800');
    this.MD_ORANGE_600 = this.fromHex_61zpoe$('FB8C00');
    this.MD_ORANGE_700 = this.fromHex_61zpoe$('F57C00');
    this.MD_ORANGE_800 = this.fromHex_61zpoe$('EF6C00');
    this.MD_ORANGE_900 = this.fromHex_61zpoe$('E65100');
    this.MD_ORANGE_A100 = this.fromHex_61zpoe$('FFD180');
    this.MD_ORANGE_A200 = this.fromHex_61zpoe$('FFAB40');
    this.MD_ORANGE_A400 = this.fromHex_61zpoe$('FF9100');
    this.MD_ORANGE_A700 = this.fromHex_61zpoe$('FF6D00');
    this.MD_ORANGE = this.MD_ORANGE_500;
    this.MD_DEEP_ORANGE_50 = this.fromHex_61zpoe$('FBE9E7');
    this.MD_DEEP_ORANGE_100 = this.fromHex_61zpoe$('FFCCBC');
    this.MD_DEEP_ORANGE_200 = this.fromHex_61zpoe$('FFAB91');
    this.MD_DEEP_ORANGE_300 = this.fromHex_61zpoe$('FF8A65');
    this.MD_DEEP_ORANGE_400 = this.fromHex_61zpoe$('FF7043');
    this.MD_DEEP_ORANGE_500 = this.fromHex_61zpoe$('FF5722');
    this.MD_DEEP_ORANGE_600 = this.fromHex_61zpoe$('F4511E');
    this.MD_DEEP_ORANGE_700 = this.fromHex_61zpoe$('E64A19');
    this.MD_DEEP_ORANGE_800 = this.fromHex_61zpoe$('D84315');
    this.MD_DEEP_ORANGE_900 = this.fromHex_61zpoe$('BF360C');
    this.MD_DEEP_ORANGE_A100 = this.fromHex_61zpoe$('FF9E80');
    this.MD_DEEP_ORANGE_A200 = this.fromHex_61zpoe$('FF6E40');
    this.MD_DEEP_ORANGE_A400 = this.fromHex_61zpoe$('FF3D00');
    this.MD_DEEP_ORANGE_A700 = this.fromHex_61zpoe$('DD2C00');
    this.MD_DEEP_ORANGE = this.MD_DEEP_ORANGE_500;
    this.MD_BROWN_50 = this.fromHex_61zpoe$('EFEBE9');
    this.MD_BROWN_100 = this.fromHex_61zpoe$('D7CCC8');
    this.MD_BROWN_200 = this.fromHex_61zpoe$('BCAAA4');
    this.MD_BROWN_300 = this.fromHex_61zpoe$('A1887F');
    this.MD_BROWN_400 = this.fromHex_61zpoe$('8D6E63');
    this.MD_BROWN_500 = this.fromHex_61zpoe$('795548');
    this.MD_BROWN_600 = this.fromHex_61zpoe$('6D4C41');
    this.MD_BROWN_700 = this.fromHex_61zpoe$('5D4037');
    this.MD_BROWN_800 = this.fromHex_61zpoe$('4E342E');
    this.MD_BROWN_900 = this.fromHex_61zpoe$('3E2723');
    this.MD_BROWN = this.MD_BROWN_500;
    this.MD_GREY_50 = this.fromHex_61zpoe$('FAFAFA');
    this.MD_GREY_100 = this.fromHex_61zpoe$('F5F5F5');
    this.MD_GREY_200 = this.fromHex_61zpoe$('EEEEEE');
    this.MD_GREY_300 = this.fromHex_61zpoe$('E0E0E0');
    this.MD_GREY_400 = this.fromHex_61zpoe$('BDBDBD');
    this.MD_GREY_500 = this.fromHex_61zpoe$('9E9E9E');
    this.MD_GREY_600 = this.fromHex_61zpoe$('757575');
    this.MD_GREY_700 = this.fromHex_61zpoe$('616161');
    this.MD_GREY_800 = this.fromHex_61zpoe$('424242');
    this.MD_GREY_900 = this.fromHex_61zpoe$('212121');
    this.MD_GREY = this.MD_GREY_500;
    this.MD_BLUE_GREY_50 = this.fromHex_61zpoe$('ECEFF1');
    this.MD_BLUE_GREY_100 = this.fromHex_61zpoe$('CFD8DC');
    this.MD_BLUE_GREY_200 = this.fromHex_61zpoe$('B0BEC5');
    this.MD_BLUE_GREY_300 = this.fromHex_61zpoe$('90A4AE');
    this.MD_BLUE_GREY_400 = this.fromHex_61zpoe$('78909C');
    this.MD_BLUE_GREY_500 = this.fromHex_61zpoe$('607D8B');
    this.MD_BLUE_GREY_600 = this.fromHex_61zpoe$('546E7A');
    this.MD_BLUE_GREY_700 = this.fromHex_61zpoe$('455A64');
    this.MD_BLUE_GREY_800 = this.fromHex_61zpoe$('37474F');
    this.MD_BLUE_GREY_900 = this.fromHex_61zpoe$('263238');
    this.MD_BLUE_GREY = this.MD_BLUE_GREY_500;
    this.MD_COLORS = listOf([this.MD_RED, this.MD_PINK, this.MD_PURPLE, this.MD_DEEP_PURPLE, this.MD_INDIGO, this.MD_BLUE, this.MD_LIGHT_BLUE, this.MD_CYAN, this.MD_TEAL, this.MD_GREEN, this.MD_LIGHT_GREEN, this.MD_LIME, this.MD_YELLOW, this.MD_AMBER, this.MD_ORANGE, this.MD_DEEP_ORANGE, this.MD_BROWN, this.MD_GREY, this.MD_BLUE_GREY]);
  }
  Color$Companion.prototype.fromHsv_7b5o5w$ = function (h, s, v, a) {
    var color = MutableColor_init();
    return color.setHsv_7b5o5w$(h, s, v, a);
  };
  Color$Companion.prototype.fromHex_61zpoe$ = function (hex) {
    if (hex.length === 0) {
      return Color$Companion_getInstance().BLACK;
    }var str = hex;
    if (str.charCodeAt(0) === 35) {
      str = str.substring(1);
    }var r = 0.0;
    var g = 0.0;
    var b = 0.0;
    var a = 1.0;
    try {
      if (str.length === 3) {
        var r4 = toInt_0(str.substring(0, 1), 16);
        var g4 = toInt_0(str.substring(1, 2), 16);
        var b4 = toInt_0(str.substring(2, 3), 16);
        r = (r4 | r4 << 4) / 255.0;
        g = (g4 | g4 << 4) / 255.0;
        b = (b4 | b4 << 4) / 255.0;
      } else if (str.length === 4) {
        var r4_0 = toInt_0(str.substring(0, 1), 16);
        var g4_0 = toInt_0(str.substring(1, 2), 16);
        var b4_0 = toInt_0(str.substring(2, 3), 16);
        var a4 = toInt_0(str.substring(2, 3), 16);
        r = (r4_0 | r4_0 << 4) / 255.0;
        g = (g4_0 | g4_0 << 4) / 255.0;
        b = (b4_0 | b4_0 << 4) / 255.0;
        a = (a4 | a4 << 4) / 255.0;
      } else if (str.length === 6) {
        r = toInt_0(str.substring(0, 2), 16) / 255.0;
        g = toInt_0(str.substring(2, 4), 16) / 255.0;
        b = toInt_0(str.substring(4, 6), 16) / 255.0;
      } else if (str.length === 8) {
        r = toInt_0(str.substring(0, 2), 16) / 255.0;
        g = toInt_0(str.substring(2, 4), 16) / 255.0;
        b = toInt_0(str.substring(4, 6), 16) / 255.0;
        a = toInt_0(str.substring(6, 8), 16) / 255.0;
      }} catch (e) {
      if (Kotlin.isType(e, NumberFormatException)) {
        var $this = package$util.Log;
        var level = Log$Level.ERROR;
        var tag = Kotlin.getKClassFromExpression(this).simpleName;
        if (level.level >= $this.level.level) {
          $this.printer(level, tag, 'invalid color code: ' + hex + ', ' + e);
        }} else
        throw e;
    }
    return new Color(r, g, b, a);
  };
  Color$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Color$Companion_instance = null;
  function Color$Companion_getInstance() {
    if (Color$Companion_instance === null) {
      new Color$Companion();
    }return Color$Companion_instance;
  }
  Color.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Color',
    interfaces: [Vec4f]
  };
  function MutableColor(r, g, b, a) {
    Color.call(this, r, g, b, a);
  }
  Object.defineProperty(MutableColor.prototype, 'r', {
    get: function () {
      return this.get_za3lpa$(0);
    },
    set: function (value) {
      this.set_24o109$(0, value);
    }
  });
  Object.defineProperty(MutableColor.prototype, 'g', {
    get: function () {
      return this.get_za3lpa$(1);
    },
    set: function (value) {
      this.set_24o109$(1, value);
    }
  });
  Object.defineProperty(MutableColor.prototype, 'b', {
    get: function () {
      return this.get_za3lpa$(2);
    },
    set: function (value) {
      this.set_24o109$(2, value);
    }
  });
  Object.defineProperty(MutableColor.prototype, 'a', {
    get: function () {
      return this.get_za3lpa$(3);
    },
    set: function (value) {
      this.set_24o109$(3, value);
    }
  });
  Object.defineProperty(MutableColor.prototype, 'array', {
    get: function () {
      return this.fields;
    }
  });
  MutableColor.prototype.add_d7aj7k$ = function (other) {
    this.r = this.r + other.r;
    this.g = this.g + other.g;
    this.b = this.b + other.b;
    this.a = this.a + other.a;
    return this;
  };
  MutableColor.prototype.add_y83vuj$ = function (other, weight) {
    this.r = this.r + other.r * weight;
    this.g = this.g + other.g * weight;
    this.b = this.b + other.b * weight;
    this.a = this.a + other.a * weight;
    return this;
  };
  MutableColor.prototype.subtract_czzhhz$ = function (other) {
    this.r = this.r - other.x;
    this.g = this.g - other.y;
    this.b = this.b - other.z;
    this.a = this.a - other.w;
    return this;
  };
  MutableColor.prototype.scale_mx4ult$ = function (factor) {
    this.r = this.r * factor;
    this.g = this.g * factor;
    this.b = this.b * factor;
    this.a = this.a * factor;
    return this;
  };
  MutableColor.prototype.scaleRgb_mx4ult$ = function (factor) {
    this.r = this.r * factor;
    this.g = this.g * factor;
    this.b = this.b * factor;
    return this;
  };
  MutableColor.prototype.clear = function () {
    this.set_7b5o5w$(0.0, 0.0, 0.0, 0.0);
    return this;
  };
  MutableColor.prototype.set_7b5o5w$ = function (r, g, b, a) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
    return this;
  };
  MutableColor.prototype.set_d7aj7k$ = function (other) {
    this.r = other.r;
    this.g = other.g;
    this.b = other.b;
    this.a = other.a;
    return this;
  };
  MutableColor.prototype.set_24o109$ = function (i, v) {
    this.fields[i] = v;
  };
  MutableColor.prototype.setHsv_7b5o5w$ = function (h, s, v, a) {
    var hue = h % 360.0;
    if (hue < 0) {
      hue += 360.0;
    }var hi = numberToInt(hue / 60.0);
    var f = hue / 60.0 - hi;
    var p = v * (1 - s);
    var q = v * (1 - s * f);
    var t = v * (1 - s * (1 - f));
    switch (hi) {
      case 1:
        this.set_7b5o5w$(q, v, p, a);
        break;
      case 2:
        this.set_7b5o5w$(p, v, t, a);
        break;
      case 3:
        this.set_7b5o5w$(p, q, v, a);
        break;
      case 4:
        this.set_7b5o5w$(t, p, v, a);
        break;
      case 5:
        this.set_7b5o5w$(v, p, q, a);
        break;
      default:this.set_7b5o5w$(v, t, p, a);
        break;
    }
    return this;
  };
  MutableColor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MutableColor',
    interfaces: [Color]
  };
  function MutableColor_init($this) {
    $this = $this || Object.create(MutableColor.prototype);
    MutableColor.call($this, 0.0, 0.0, 0.0, 1.0);
    return $this;
  }
  function MutableColor_init_0(color, $this) {
    $this = $this || Object.create(MutableColor.prototype);
    MutableColor.call($this, color.r, color.g, color.b, color.a);
    return $this;
  }
  function Comparator$ObjectLiteral_1(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_1.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_1.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_1 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function ColorGradient(colors, n) {
    ColorGradient$Companion_getInstance();
    if (n === void 0)
      n = 256;
    var array = Array_0(n);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = MutableColor_init();
    }
    this.gradient_0 = array;
    var tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (colors.length < 2) {
      throw KoolException_init('ColorGradient requires at least two colors');
    }if (colors.length > 1) {
      sortWith_0(colors, new Comparator$ObjectLiteral_1(compareBy$lambda_1(ColorGradient_init$lambda)));
    }var mi = first_0(colors).first;
    var mx = last_0(colors).first;
    var pi = 0;
    var p0 = colors[tmp$_0 = pi, pi = tmp$_0 + 1 | 0, tmp$_0];
    var p1 = colors[tmp$_1 = pi, pi = tmp$_1 + 1 | 0, tmp$_1];
    tmp$_2 = n;
    for (var i_0 = 0; i_0 < tmp$_2; i_0++) {
      var p = i_0 / (n - 1.0) * (mx - mi) + mi;
      while (p > p1.first) {
        p0 = p1;
        var a = (tmp$_3 = pi, pi = tmp$_3 + 1 | 0, tmp$_3);
        p1 = colors[Math_0.min(a, colors.length)];
      }
      var w0 = 1.0 - (p - p0.first) / (p1.first - p0.first);
      this.gradient_0[i_0].set_d7aj7k$(p0.second).scale_mx4ult$(w0).add_y83vuj$(p1.second, 1.0 - w0);
    }
  }
  ColorGradient.prototype.getColor_y2kzbl$ = function (value, min, max) {
    if (min === void 0)
      min = 0.0;
    if (max === void 0)
      max = 1.0;
    var tmp$ = this.gradient_0;
    var $receiver = numberToInt((value - min) / (max - min) * this.gradient_0.length);
    var max_0 = this.gradient_0.length - 1 | 0;
    var clamp$result;
    if ($receiver < 0) {
      clamp$result = 0;
    } else if ($receiver > max_0) {
      clamp$result = max_0;
    } else {
      clamp$result = $receiver;
    }
    return tmp$[clamp$result];
  };
  function ColorGradient$Companion() {
    ColorGradient$Companion_instance = this;
    this.DEFAULT_N = 256;
    this.JET = ColorGradient_init([Color$Companion_getInstance().BLUE, Color$Companion_getInstance().CYAN, Color$Companion_getInstance().GREEN, Color$Companion_getInstance().YELLOW, Color$Companion_getInstance().RED, Color$Companion_getInstance().MAGENTA]);
    this.JET_MD = ColorGradient_init([Color$Companion_getInstance().MD_BLUE, Color$Companion_getInstance().MD_CYAN, Color$Companion_getInstance().MD_GREEN, Color$Companion_getInstance().MD_YELLOW, Color$Companion_getInstance().MD_RED, Color$Companion_getInstance().MD_PURPLE]);
    this.RED_YELLOW_GREEN = ColorGradient_init([Color$Companion_getInstance().RED, Color$Companion_getInstance().YELLOW, Color$Companion_getInstance().GREEN]);
    this.RED_YELLOW_GREEN_MD = ColorGradient_init([Color$Companion_getInstance().MD_RED, Color$Companion_getInstance().MD_YELLOW, Color$Companion_getInstance().MD_GREEN]);
    this.RED_WHITE_BLUE = new ColorGradient([to(0.0, new Color(0.35, 0.0, 0.0, 1.0)), to(0.35, new Color(0.81, 0.39, 0.0, 1.0)), to(0.5, Color$Companion_getInstance().WHITE), to(0.75, new Color(0.0, 0.5, 1.0, 1.0)), to(1.0, new Color(0.0, 0.18, 0.47, 1.0))]);
    this.PLASMA = ColorGradient_init([new Color(0.0504, 0.0298, 0.528, 1.0), new Color(0.1324, 0.0223, 0.5633, 1.0), new Color(0.1934, 0.0184, 0.5903, 1.0), new Color(0.2546, 0.0139, 0.6154, 1.0), new Color(0.3062, 0.0089, 0.6337, 1.0), new Color(0.3564, 0.0038, 0.6478, 1.0), new Color(0.4055, 7.0E-4, 0.657, 1.0), new Color(0.4596, 0.0036, 0.6603, 1.0), new Color(0.5065, 0.0163, 0.6562, 1.0), new Color(0.5517, 0.0431, 0.6453, 1.0), new Color(0.595, 0.0772, 0.6279, 1.0), new Color(0.636, 0.1121, 0.6052, 1.0), new Color(0.6792, 0.1518, 0.5752, 1.0), new Color(0.7149, 0.1873, 0.5463, 1.0), new Color(0.7483, 0.2227, 0.5168, 1.0), new Color(0.7796, 0.2581, 0.4875, 1.0), new Color(0.8126, 0.2979, 0.4553, 1.0), new Color(0.8402, 0.3336, 0.4275, 1.0), new Color(0.8661, 0.3697, 0.4001, 1.0), new Color(0.8903, 0.4064, 0.3731, 1.0), new Color(0.9155, 0.4488, 0.3429, 1.0), new Color(0.9356, 0.4877, 0.316, 1.0), new Color(0.9534, 0.528, 0.2889, 1.0), new Color(0.9685, 0.5697, 0.2617, 1.0), new Color(0.9806, 0.613, 0.2346, 1.0), new Color(0.9899, 0.6638, 0.2049, 1.0), new Color(0.9941, 0.7107, 0.1801, 1.0), new Color(0.9939, 0.7593, 0.1591, 1.0), new Color(0.9886, 0.8096, 0.1454, 1.0), new Color(0.9763, 0.868, 0.1434, 1.0), new Color(0.9593, 0.9214, 0.1516, 1.0), new Color(0.94, 0.9752, 0.1313, 1.0)]);
    this.VIRIDIS = ColorGradient_init([new Color(0.267, 0.0049, 0.3294, 1.0), new Color(0.277, 0.0503, 0.3757, 1.0), new Color(0.2823, 0.095, 0.4173, 1.0), new Color(0.2826, 0.1409, 0.4575, 1.0), new Color(0.278, 0.1804, 0.4867, 1.0), new Color(0.2693, 0.2188, 0.5096, 1.0), new Color(0.2573, 0.2561, 0.5266, 1.0), new Color(0.2412, 0.2965, 0.5397, 1.0), new Color(0.2259, 0.3308, 0.5473, 1.0), new Color(0.2105, 0.3637, 0.5522, 1.0), new Color(0.1959, 0.3954, 0.5553, 1.0), new Color(0.1823, 0.4262, 0.5571, 1.0), new Color(0.1681, 0.46, 0.5581, 1.0), new Color(0.1563, 0.4896, 0.5579, 1.0), new Color(0.1448, 0.5191, 0.5566, 1.0), new Color(0.1337, 0.5485, 0.5535, 1.0), new Color(0.1235, 0.5817, 0.5474, 1.0), new Color(0.1194, 0.6111, 0.539, 1.0), new Color(0.1248, 0.6405, 0.5271, 1.0), new Color(0.1433, 0.6695, 0.5112, 1.0), new Color(0.1807, 0.7014, 0.4882, 1.0), new Color(0.2264, 0.7289, 0.4628, 1.0), new Color(0.2815, 0.7552, 0.4326, 1.0), new Color(0.3441, 0.78, 0.3974, 1.0), new Color(0.4129, 0.803, 0.3573, 1.0), new Color(0.4966, 0.8264, 0.3064, 1.0), new Color(0.5756, 0.8446, 0.2564, 1.0), new Color(0.6576, 0.8602, 0.2031, 1.0), new Color(0.7414, 0.8734, 0.1496, 1.0), new Color(0.8353, 0.886, 0.1026, 1.0), new Color(0.9162, 0.8961, 0.1007, 1.0), new Color(0.9932, 0.9062, 0.1439, 1.0)]);
  }
  ColorGradient$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ColorGradient$Companion_instance = null;
  function ColorGradient$Companion_getInstance() {
    if (ColorGradient$Companion_instance === null) {
      new ColorGradient$Companion();
    }return ColorGradient$Companion_instance;
  }
  function ColorGradient_init$lambda(it) {
    return it.first;
  }
  ColorGradient.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ColorGradient',
    interfaces: []
  };
  function ColorGradient_init(colors, n, $this) {
    if (n === void 0)
      n = 256;
    $this = $this || Object.create(ColorGradient.prototype);
    var array = Array_0(colors.length);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = to(i, colors[i]);
    }
    ColorGradient.call($this, array.slice(), n);
    return $this;
  }
  function debugOverlay(ctx, position) {
    if (position === void 0)
      position = DebugOverlay$Position$UPPER_RIGHT_getInstance();
    return (new DebugOverlay(ctx, position)).ui;
  }
  function DebugOverlay(ctx, position) {
    if (position === void 0)
      position = DebugOverlay$Position$UPPER_RIGHT_getInstance();
    this.ui = null;
    this.xOffset_un9ppf$_0 = 0.0;
    this.menuContainer_pm7z9i$_0 = this.menuContainer_pm7z9i$_0;
    this.ui = uiScene(ctx.screenDpi, 'debug-overlay', void 0, DebugOverlay_init$lambda(this, ctx, position));
    this.ui.isPickingEnabled = false;
  }
  Object.defineProperty(DebugOverlay.prototype, 'xOffset', {
    get: function () {
      return this.xOffset_un9ppf$_0;
    },
    set: function (value) {
      if (this.xOffset_un9ppf$_0 !== value) {
        this.xOffset_un9ppf$_0 = value;
        this.menuContainer_0.requestUpdateTransform();
      }}
  });
  Object.defineProperty(DebugOverlay.prototype, 'menuContainer_0', {
    get: function () {
      if (this.menuContainer_pm7z9i$_0 == null)
        return throwUPAE('menuContainer');
      return this.menuContainer_pm7z9i$_0;
    },
    set: function (menuContainer) {
      this.menuContainer_pm7z9i$_0 = menuContainer;
    }
  });
  function DebugOverlay$Position(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function DebugOverlay$Position_initFields() {
    DebugOverlay$Position_initFields = function () {
    };
    DebugOverlay$Position$UPPER_LEFT_instance = new DebugOverlay$Position('UPPER_LEFT', 0);
    DebugOverlay$Position$UPPER_RIGHT_instance = new DebugOverlay$Position('UPPER_RIGHT', 1);
    DebugOverlay$Position$LOWER_LEFT_instance = new DebugOverlay$Position('LOWER_LEFT', 2);
    DebugOverlay$Position$LOWER_RIGHT_instance = new DebugOverlay$Position('LOWER_RIGHT', 3);
  }
  var DebugOverlay$Position$UPPER_LEFT_instance;
  function DebugOverlay$Position$UPPER_LEFT_getInstance() {
    DebugOverlay$Position_initFields();
    return DebugOverlay$Position$UPPER_LEFT_instance;
  }
  var DebugOverlay$Position$UPPER_RIGHT_instance;
  function DebugOverlay$Position$UPPER_RIGHT_getInstance() {
    DebugOverlay$Position_initFields();
    return DebugOverlay$Position$UPPER_RIGHT_instance;
  }
  var DebugOverlay$Position$LOWER_LEFT_instance;
  function DebugOverlay$Position$LOWER_LEFT_getInstance() {
    DebugOverlay$Position_initFields();
    return DebugOverlay$Position$LOWER_LEFT_instance;
  }
  var DebugOverlay$Position$LOWER_RIGHT_instance;
  function DebugOverlay$Position$LOWER_RIGHT_getInstance() {
    DebugOverlay$Position_initFields();
    return DebugOverlay$Position$LOWER_RIGHT_instance;
  }
  DebugOverlay$Position.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Position',
    interfaces: [Enum]
  };
  function DebugOverlay$Position$values() {
    return [DebugOverlay$Position$UPPER_LEFT_getInstance(), DebugOverlay$Position$UPPER_RIGHT_getInstance(), DebugOverlay$Position$LOWER_LEFT_getInstance(), DebugOverlay$Position$LOWER_RIGHT_getInstance()];
  }
  DebugOverlay$Position.values = DebugOverlay$Position$values;
  function DebugOverlay$Position$valueOf(name) {
    switch (name) {
      case 'UPPER_LEFT':
        return DebugOverlay$Position$UPPER_LEFT_getInstance();
      case 'UPPER_RIGHT':
        return DebugOverlay$Position$UPPER_RIGHT_getInstance();
      case 'LOWER_LEFT':
        return DebugOverlay$Position$LOWER_LEFT_getInstance();
      case 'LOWER_RIGHT':
        return DebugOverlay$Position$LOWER_RIGHT_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.util.DebugOverlay.Position.' + name);
    }
  }
  DebugOverlay$Position.valueOf_61zpoe$ = DebugOverlay$Position$valueOf;
  function DebugOverlay_init$lambda$lambda$lambda(it) {
    return new BlankComponentUi();
  }
  function DebugOverlay_init$lambda$lambda($receiver) {
    $receiver.componentUi_mloaa0$(DebugOverlay_init$lambda$lambda$lambda);
    $receiver.containerUi_2t3ptw$(getCallableRef('SimpleComponentUi', function (component) {
      return new SimpleComponentUi(component);
    }));
    $receiver.standardFont_ttufcy$(new FontProps(Font$Companion_getInstance().SYSTEM_FONT, 12.0));
    return Unit;
  }
  function DebugOverlay_init$lambda$lambda$lambda_0(this$DebugOverlay) {
    return function ($receiver) {
      $receiver.translate_y2kzbl$(this$DebugOverlay.xOffset, 0.0, 0.0);
      return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda$lambda$lambda(this$) {
    return function ($receiver, f, ctx) {
      this$.text = toString_1(ctx.fps, 1) + ' fps';
      return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda$lambda_1(closure$width, closure$ctx) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(-37.0, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(closure$width, true), dps(37.0, true), full());
      $receiver.padding = new Margin(zero(), zero(), dps(4.0, true), dps(4.0, true));
      $receiver.textAlignment = new Gravity(Alignment$CENTER_getInstance(), Alignment$CENTER_getInstance());
      $receiver.text = '';
      $receiver.font.setCustom_11rb$(UiTheme$Companion_getInstance().DARK_SIMPLE.standardFont_oei9ky$($receiver.dpi, closure$ctx));
      $receiver.textColor.setCustom_11rb$($receiver.root.theme.accentColor);
      $receiver.onUpdate.add_11rb$(DebugOverlay_init$lambda$lambda$lambda$lambda($receiver));
      return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda$lambda$lambda_0(closure$ctx, closure$i, this$) {
    return function ($receiver, f, f_0) {
      this$.text = closure$ctx.getSysInfos().get_za3lpa$(closure$i);
      return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda$lambda_2(closure$yOri, closure$width, closure$ctx, closure$i) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(closure$yOri.v, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(closure$width, true), dps(18.0, true), full());
      $receiver.padding = new Margin(zero(), zero(), dps(4.0, true), dps(4.0, true));
      $receiver.textAlignment = new Gravity(Alignment$END_getInstance(), Alignment$CENTER_getInstance());
      $receiver.text = '';
      var $receiver_0 = $receiver.onUpdate;
      var element = DebugOverlay_init$lambda$lambda$lambda$lambda_0(closure$ctx, closure$i, $receiver);
      $receiver_0.add_11rb$(element);
      return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda$lambda$lambda_1(closure$lastWndW, closure$lastWndH, this$) {
    return function ($receiver, f, ctx) {
      if (ctx.windowWidth !== closure$lastWndW.v || ctx.windowHeight !== closure$lastWndH.v) {
        closure$lastWndW.v = ctx.windowWidth;
        closure$lastWndH.v = ctx.windowHeight;
        this$.text = 'Viewport: ' + ctx.windowWidth + 'x' + ctx.windowHeight;
      }return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda$lambda_3(closure$yOri, closure$width) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(closure$yOri.v, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(closure$width, true), dps(18.0, true), full());
      $receiver.padding = new Margin(zero(), zero(), dps(4.0, true), dps(4.0, true));
      $receiver.textAlignment = new Gravity(Alignment$END_getInstance(), Alignment$CENTER_getInstance());
      var lastWndW = {v: -1};
      var lastWndH = {v: -1};
      $receiver.onUpdate.add_11rb$(DebugOverlay_init$lambda$lambda$lambda$lambda_1(lastWndW, lastWndH, $receiver));
      return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda$lambda$lambda_2(closure$updateT, this$) {
    return function ($receiver, f, ctx) {
      closure$updateT.v -= ctx.deltaT;
      if (closure$updateT.v < 0) {
        closure$updateT.v += 1.0;
        var hh = '' + toString(numberToInt(ctx.time / 3600.0));
        if (hh.length === 1) {
          hh = '0' + hh;
        }var mm = '' + toString(numberToInt(ctx.time % 3600.0 / 60.0));
        if (mm.length === 1) {
          mm = '0' + mm;
        }var ss = '' + toString(numberToInt(ctx.time % 60.0));
        if (ss.length === 1) {
          ss = '0' + ss;
        }this$.text = 'Up: ' + hh + ':' + mm + '.' + ss;
      }return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda$lambda_4(closure$yOri, closure$width) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(closure$yOri.v, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(closure$width, true), dps(18.0, true), full());
      $receiver.padding = new Margin(zero(), zero(), dps(4.0, true), dps(4.0, true));
      $receiver.textAlignment = new Gravity(Alignment$END_getInstance(), Alignment$CENTER_getInstance());
      $receiver.text = 'Up: 00:00.00';
      var updateT = {v: 1.0};
      $receiver.onUpdate.add_11rb$(DebugOverlay_init$lambda$lambda$lambda$lambda_2(updateT, $receiver));
      return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda$lambda$lambda_3(closure$last, closure$lastMem, this$) {
    return function ($receiver, f, ctx) {
      var num = ctx.engineStats.textureAllocations.size;
      var mem = ctx.engineStats.totalTextureSize.toNumber();
      if (num !== closure$last.v || mem !== closure$lastMem.v) {
        closure$last.v = num;
        closure$lastMem.v = mem;
        this$.text = num.toString() + ' Textures: ' + toString_1(mem / (1024.0 * 1024.0), 1) + 'M';
      }return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda$lambda_5(closure$yOri, closure$width) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(closure$yOri.v, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(closure$width, true), dps(18.0, true), full());
      $receiver.padding = new Margin(zero(), zero(), dps(4.0, true), dps(4.0, true));
      $receiver.textAlignment = new Gravity(Alignment$END_getInstance(), Alignment$CENTER_getInstance());
      var last = {v: -1};
      var lastMem = {v: -1.0};
      $receiver.onUpdate.add_11rb$(DebugOverlay_init$lambda$lambda$lambda$lambda_3(last, lastMem, $receiver));
      return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda$lambda$lambda_4(closure$last, closure$lastMem, this$) {
    return function ($receiver, f, ctx) {
      var num = ctx.engineStats.bufferAllocations.size;
      var mem = ctx.engineStats.totalBufferSize.toNumber();
      if (num !== closure$last.v || mem !== closure$lastMem.v) {
        closure$last.v = num;
        closure$lastMem.v = mem;
        this$.text = num.toString() + ' Buffers: ' + toString_1(mem / (1024.0 * 1024.0), 1) + 'M';
      }return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda$lambda_6(closure$yOri, closure$width) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(closure$yOri.v, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(closure$width, true), dps(18.0, true), full());
      $receiver.padding = new Margin(zero(), zero(), dps(4.0, true), dps(4.0, true));
      $receiver.textAlignment = new Gravity(Alignment$END_getInstance(), Alignment$CENTER_getInstance());
      var last = {v: -1};
      var lastMem = {v: -1.0};
      $receiver.onUpdate.add_11rb$(DebugOverlay_init$lambda$lambda$lambda$lambda_4(last, lastMem, $receiver));
      return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda$lambda$lambda_5(closure$lastInstances, closure$lastPipelines, this$) {
    return function ($receiver, f, ctx) {
      var numPipelines = ctx.engineStats.pipelines.size;
      var numDrawCmds = ctx.engineStats.numDrawCommands;
      if (numDrawCmds !== closure$lastInstances.v || numPipelines !== closure$lastPipelines.v) {
        closure$lastPipelines.v = numPipelines;
        closure$lastInstances.v = numDrawCmds;
        this$.text = numPipelines.toString() + ' Shaders / ' + numDrawCmds + ' Cmds';
      }return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda$lambda_7(closure$yOri, closure$width) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(closure$yOri.v, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(closure$width, true), dps(18.0, true), full());
      $receiver.padding = new Margin(zero(), zero(), dps(4.0, true), dps(4.0, true));
      $receiver.textAlignment = new Gravity(Alignment$END_getInstance(), Alignment$CENTER_getInstance());
      var lastPipelines = {v: -1};
      var lastInstances = {v: -1};
      $receiver.onUpdate.add_11rb$(DebugOverlay_init$lambda$lambda$lambda$lambda_5(lastInstances, lastPipelines, $receiver));
      return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda$lambda$lambda_6(closure$lastPrimitives, this$) {
    return function ($receiver, f, ctx) {
      var numPrimitives = ctx.engineStats.numPrimitives;
      if (numPrimitives !== closure$lastPrimitives.v) {
        closure$lastPrimitives.v = numPrimitives;
        this$.text = numPrimitives.toString() + ' Primitives';
      }return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda$lambda_8(closure$yOri, closure$width) {
    return function ($receiver) {
      $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(closure$yOri.v, true), zero());
      $receiver.layoutSpec.setSize_4ujscr$(dps(closure$width, true), dps(18.0, true), full());
      $receiver.padding = new Margin(zero(), zero(), dps(4.0, true), dps(4.0, true));
      $receiver.textAlignment = new Gravity(Alignment$END_getInstance(), Alignment$CENTER_getInstance());
      var lastPrimitives = {v: -1};
      $receiver.onUpdate.add_11rb$(DebugOverlay_init$lambda$lambda$lambda$lambda_6(lastPrimitives, $receiver));
      return Unit;
    };
  }
  function DebugOverlay_init$lambda$lambda_0(this$DebugOverlay, closure$ctx, closure$position, this$) {
    return function ($receiver) {
      var tmp$;
      this$DebugOverlay.menuContainer_0 = $receiver;
      $receiver.customTransform = DebugOverlay_init$lambda$lambda$lambda_0(this$DebugOverlay);
      var height = 150 + closure$ctx.getSysInfos().size * 18.0;
      var width = 180.0;
      switch (closure$position.name) {
        case 'UPPER_LEFT':
          $receiver.layoutSpec.setOrigin_4ujscr$(zero(), dps(-height, true), zero());
          break;
        case 'UPPER_RIGHT':
          $receiver.layoutSpec.setOrigin_4ujscr$(dps(-width, true), dps(-height, true), zero());
          break;
        case 'LOWER_LEFT':
          $receiver.layoutSpec.setOrigin_4ujscr$(zero(), zero(), zero());
          break;
        case 'LOWER_RIGHT':
          $receiver.layoutSpec.setOrigin_4ujscr$(dps(-width, true), zero(), zero());
          break;
      }
      $receiver.layoutSpec.setSize_4ujscr$(dps(width, true), dps(height, true), full());
      var $receiver_0 = new DeltaTGraph(this$);
      $receiver_0.layoutSpec.setOrigin_4ujscr$(zero(), dps(-40.0, true), zero());
      $receiver_0.layoutSpec.setSize_4ujscr$(dps(width, true), dps(40.0, true), full());
      $receiver.unaryPlus_uv0sim$($receiver_0);
      $receiver.unaryPlus_uv0sim$(this$.label_tokfmu$('lblFps', DebugOverlay_init$lambda$lambda$lambda_1(width, closure$ctx)));
      var yOri = {v: -60.0};
      tmp$ = closure$ctx.getSysInfos();
      for (var i = 0; i !== tmp$.size; ++i) {
        $receiver.unaryPlus_uv0sim$(this$.label_tokfmu$('lblSysInfo_' + i, DebugOverlay_init$lambda$lambda$lambda_2(yOri, width, closure$ctx, i)));
        yOri.v -= 18.0;
      }
      $receiver.unaryPlus_uv0sim$(this$.label_tokfmu$('lblVpSize', DebugOverlay_init$lambda$lambda$lambda_3(yOri, width)));
      yOri.v -= 18.0;
      $receiver.unaryPlus_uv0sim$(this$.label_tokfmu$('lblUpTime', DebugOverlay_init$lambda$lambda$lambda_4(yOri, width)));
      yOri.v -= 18.0;
      $receiver.unaryPlus_uv0sim$(this$.label_tokfmu$('lblNumTextures', DebugOverlay_init$lambda$lambda$lambda_5(yOri, width)));
      yOri.v -= 18.0;
      $receiver.unaryPlus_uv0sim$(this$.label_tokfmu$('lblNumBuffers', DebugOverlay_init$lambda$lambda$lambda_6(yOri, width)));
      yOri.v -= 18.0;
      $receiver.unaryPlus_uv0sim$(this$.label_tokfmu$('lblNumShaders', DebugOverlay_init$lambda$lambda$lambda_7(yOri, width)));
      yOri.v -= 18.0;
      $receiver.unaryPlus_uv0sim$(this$.label_tokfmu$('lblNumPrimitives', DebugOverlay_init$lambda$lambda$lambda_8(yOri, width)));
      return Unit;
    };
  }
  function DebugOverlay_init$lambda(this$DebugOverlay, closure$ctx, closure$position) {
    return function ($receiver) {
      $receiver.theme = theme(UiTheme$Companion_getInstance().DARK_SIMPLE, DebugOverlay_init$lambda$lambda);
      $receiver.content.ui.setCustom_11rb$(new BlankComponentUi());
      $receiver.unaryPlus_uv0sim$($receiver.container_t34sov$('dbgPanel', DebugOverlay_init$lambda$lambda_0(this$DebugOverlay, closure$ctx, closure$position, $receiver)));
      return Unit;
    };
  }
  DebugOverlay.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DebugOverlay',
    interfaces: []
  };
  function DeltaTGraph(root) {
    UiComponent.call(this, 'deltaT', root);
    this.graphMesh = null;
    this.graphGeom = new IndexedVertexList(UiShader$Companion_getInstance().UI_MESH_ATTRIBS);
    this.graphBuilder = new MeshBuilder(this.graphGeom);
    this.graphVertex = this.graphGeom.get_za3lpa$(0);
    this.graphIdx = 0;
    this.prevDeltaT = 0.0;
    this.graphMesh = new Mesh(this.graphGeom);
    this.graphMesh.geometry.usage = Usage$DYNAMIC_getInstance();
    this.graphMesh.pipelineLoader = new UiShader();
  }
  DeltaTGraph.prototype.collectDrawCommands_oco14p$ = function (renderPass, ctx) {
    var color = Color$Companion_getInstance().WHITE;
    if (this.prevDeltaT > 0.05) {
      color = Color$Companion_getInstance().RED;
    } else if (this.prevDeltaT > 0.025) {
      color = Color$Companion_getInstance().YELLOW;
    }this.setCurrentBarColor_d7aj7k$(color);
    this.prevDeltaT = ctx.deltaT;
    this.graphIdx = (this.graphIdx + 4 | 0) % (numberToInt(this.width) * 4 | 0);
    this.graphVertex.index = this.graphIdx;
    var y0 = this.graphVertex.position.y;
    var a = ctx.deltaT * 250;
    var b = this.height;
    var h = Math_0.min(a, b);
    var tmp$;
    tmp$ = this.graphVertex;
    tmp$.index = tmp$.index + 1 | 0;
    this.graphVertex.position.y = y0 + h;
    var tmp$_0;
    tmp$_0 = this.graphVertex;
    tmp$_0.index = tmp$_0.index + 1 | 0;
    this.graphVertex.position.y = y0 + h;
    this.setCurrentBarColor_d7aj7k$(Color$Companion_getInstance().MAGENTA);
    this.graphGeom.hasChanged = true;
    UiComponent.prototype.collectDrawCommands_oco14p$.call(this, renderPass, ctx);
  };
  DeltaTGraph.prototype.setCurrentBarColor_d7aj7k$ = function (color) {
    this.graphVertex.index = this.graphIdx;
    for (var i = 0; i <= 3; i++) {
      this.graphVertex.index = this.graphIdx + i | 0;
      this.graphVertex.color.set_d7aj7k$(color);
    }
  };
  DeltaTGraph.prototype.updateUi_aemszp$ = function (ctx) {
    UiComponent.prototype.updateUi_aemszp$.call(this, ctx);
    this.setupBuilder_84rojv$(this.graphBuilder);
    this.graphBuilder.color = Color$Companion_getInstance().WHITE;
    var $this = this.graphBuilder;
    $this.transform.push();
    var tmp$;
    $this.translate_y2kzbl$(0.0, 0.0, 10.0);
    tmp$ = numberToInt(this.width);
    for (var i = 1; i <= tmp$; i++) {
      this.graphBuilder.line_s2l86p$(i - 0.5, 0.0, i - 0.5, 1.0, 1.0);
    }
    $this.transform.pop();
  };
  DeltaTGraph.prototype.updateTheme_aemszp$ = function (ctx) {
    UiComponent.prototype.updateTheme_aemszp$.call(this, ctx);
    this.minusAssign_f1kmr1$(this.graphMesh);
    this.plusAssign_f1kmr1$(this.graphMesh);
  };
  DeltaTGraph.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DeltaTGraph',
    interfaces: [UiComponent]
  };
  var ShaderModel$findNode$lambda_5 = wrapFunction(function () {
    var equals = Kotlin.equals;
    var throwCCE = Kotlin.throwCCE;
    return function (closure$stage, closure$name, typeClosure$T, isT) {
      return function (it) {
        if ((it.stage.mask & closure$stage.mask) !== 0) {
          var isT_0 = isT;
          var name = closure$name;
          var tmp$;
          var $receiver = it.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_0;
            tmp$_0 = $receiver.iterator();
            while (tmp$_0.hasNext()) {
              var element = tmp$_0.next();
              if (equals(element.name, name) && isT_0(element)) {
                firstOrNull$result = element;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = Kotlin.orNull(isT_0)(tmp$ = firstOrNull$result) ? tmp$ : throwCCE();
          if (node != null) {
            return node;
          }}return Unit;
      };
    };
  });
  function DeferredLightShader(cfg) {
    DeferredLightShader$Companion_getInstance();
    ModeledShader.call(this, DeferredLightShader$Companion_getInstance().shaderModel_l5ebkw$(cfg));
    this.deferredCameraNode_0 = null;
    this.sceneCamera_f7edkp$_0 = cfg.sceneCamera;
    this.positionAoSampler_0 = null;
    this.normalRoughnessSampler_0 = null;
    this.albedoMetalSampler_0 = null;
    this.positionAo_ot9dej$_0 = cfg.positionAo;
    this.normalRoughness_mouyfl$_0 = cfg.normalRoughness;
    this.albedoMetal_35ktqu$_0 = cfg.albedoMetal;
  }
  Object.defineProperty(DeferredLightShader.prototype, 'sceneCamera', {
    get: function () {
      return this.sceneCamera_f7edkp$_0;
    },
    set: function (value) {
      var tmp$;
      this.sceneCamera_f7edkp$_0 = value;
      (tmp$ = this.deferredCameraNode_0) != null ? (tmp$.sceneCam = value) : null;
    }
  });
  Object.defineProperty(DeferredLightShader.prototype, 'positionAo', {
    get: function () {
      return this.positionAo_ot9dej$_0;
    },
    set: function (value) {
      var tmp$;
      this.positionAo_ot9dej$_0 = value;
      (tmp$ = this.positionAoSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(DeferredLightShader.prototype, 'normalRoughness', {
    get: function () {
      return this.normalRoughness_mouyfl$_0;
    },
    set: function (value) {
      var tmp$;
      this.normalRoughness_mouyfl$_0 = value;
      (tmp$ = this.normalRoughnessSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(DeferredLightShader.prototype, 'albedoMetal', {
    get: function () {
      return this.albedoMetal_35ktqu$_0;
    },
    set: function (value) {
      var tmp$;
      this.albedoMetal_35ktqu$_0 = value;
      (tmp$ = this.albedoMetalSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  DeferredLightShader.prototype.createPipeline_y7vss5$ = function (mesh, builder, ctx) {
    builder.blendMode = BlendMode$BLEND_ADDITIVE_getInstance();
    builder.cullMethod = CullMethod$CULL_FRONT_FACES_getInstance();
    builder.depthTest = DepthCompareOp$DISABLED_getInstance();
    return ModeledShader.prototype.createPipeline_y7vss5$.call(this, mesh, builder, ctx);
  };
  DeferredLightShader.prototype.onPipelineCreated_lfrgcb$ = function (pipeline) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    var $this = this.model;
    var name = 'deferredCam';
    var stage;
    var findNode_3klnlw$result;
    findNode_3klnlw$break: do {
      stage = ShaderStage.ALL;
      var tmp$_6;
      tmp$_6 = $this.stages.values.iterator();
      while (tmp$_6.hasNext()) {
        var element = tmp$_6.next();
        if ((element.stage.mask & stage.mask) !== 0) {
          var tmp$_7;
          var $receiver = element.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_8;
            tmp$_8 = $receiver.iterator();
            while (tmp$_8.hasNext()) {
              var element_0 = tmp$_8.next();
              if (equals(element_0.name, name) && Kotlin.isType(element_0, DeferredCameraNode)) {
                firstOrNull$result = element_0;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = (tmp$_7 = firstOrNull$result) == null || Kotlin.isType(tmp$_7, DeferredCameraNode) ? tmp$_7 : throwCCE();
          if (node != null) {
            findNode_3klnlw$result = node;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result = null;
    }
     while (false);
    this.deferredCameraNode_0 = findNode_3klnlw$result;
    if ((tmp$ = this.deferredCameraNode_0) != null) {
      tmp$.sceneCam = this.sceneCamera;
    }var $this_0 = this.model;
    var name_0 = 'positionAo';
    var stage_0;
    var findNode_3klnlw$result_0;
    findNode_3klnlw$break: do {
      stage_0 = ShaderStage.ALL;
      var tmp$_9;
      tmp$_9 = $this_0.stages.values.iterator();
      while (tmp$_9.hasNext()) {
        var element_1 = tmp$_9.next();
        if ((element_1.stage.mask & stage_0.mask) !== 0) {
          var tmp$_10;
          var $receiver_0 = element_1.nodes;
          var firstOrNull$result_0;
          firstOrNull$break: do {
            var tmp$_11;
            tmp$_11 = $receiver_0.iterator();
            while (tmp$_11.hasNext()) {
              var element_2 = tmp$_11.next();
              if (equals(element_2.name, name_0) && Kotlin.isType(element_2, TextureNode)) {
                firstOrNull$result_0 = element_2;
                break firstOrNull$break;
              }}
            firstOrNull$result_0 = null;
          }
           while (false);
          var node_0 = (tmp$_10 = firstOrNull$result_0) == null || Kotlin.isType(tmp$_10, TextureNode) ? tmp$_10 : throwCCE();
          if (node_0 != null) {
            findNode_3klnlw$result_0 = node_0;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_0 = null;
    }
     while (false);
    this.positionAoSampler_0 = (tmp$_0 = findNode_3klnlw$result_0) != null ? tmp$_0.sampler : null;
    if ((tmp$_1 = this.positionAoSampler_0) != null) {
      tmp$_1.texture = this.positionAo;
    }var $this_1 = this.model;
    var name_1 = 'normalRoughness';
    var stage_1;
    var findNode_3klnlw$result_1;
    findNode_3klnlw$break: do {
      stage_1 = ShaderStage.ALL;
      var tmp$_12;
      tmp$_12 = $this_1.stages.values.iterator();
      while (tmp$_12.hasNext()) {
        var element_3 = tmp$_12.next();
        if ((element_3.stage.mask & stage_1.mask) !== 0) {
          var tmp$_13;
          var $receiver_1 = element_3.nodes;
          var firstOrNull$result_1;
          firstOrNull$break: do {
            var tmp$_14;
            tmp$_14 = $receiver_1.iterator();
            while (tmp$_14.hasNext()) {
              var element_4 = tmp$_14.next();
              if (equals(element_4.name, name_1) && Kotlin.isType(element_4, TextureNode)) {
                firstOrNull$result_1 = element_4;
                break firstOrNull$break;
              }}
            firstOrNull$result_1 = null;
          }
           while (false);
          var node_1 = (tmp$_13 = firstOrNull$result_1) == null || Kotlin.isType(tmp$_13, TextureNode) ? tmp$_13 : throwCCE();
          if (node_1 != null) {
            findNode_3klnlw$result_1 = node_1;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_1 = null;
    }
     while (false);
    this.normalRoughnessSampler_0 = (tmp$_2 = findNode_3klnlw$result_1) != null ? tmp$_2.sampler : null;
    if ((tmp$_3 = this.normalRoughnessSampler_0) != null) {
      tmp$_3.texture = this.normalRoughness;
    }var $this_2 = this.model;
    var name_2 = 'albedoMetal';
    var stage_2;
    var findNode_3klnlw$result_2;
    findNode_3klnlw$break: do {
      stage_2 = ShaderStage.ALL;
      var tmp$_15;
      tmp$_15 = $this_2.stages.values.iterator();
      while (tmp$_15.hasNext()) {
        var element_5 = tmp$_15.next();
        if ((element_5.stage.mask & stage_2.mask) !== 0) {
          var tmp$_16;
          var $receiver_2 = element_5.nodes;
          var firstOrNull$result_2;
          firstOrNull$break: do {
            var tmp$_17;
            tmp$_17 = $receiver_2.iterator();
            while (tmp$_17.hasNext()) {
              var element_6 = tmp$_17.next();
              if (equals(element_6.name, name_2) && Kotlin.isType(element_6, TextureNode)) {
                firstOrNull$result_2 = element_6;
                break firstOrNull$break;
              }}
            firstOrNull$result_2 = null;
          }
           while (false);
          var node_2 = (tmp$_16 = firstOrNull$result_2) == null || Kotlin.isType(tmp$_16, TextureNode) ? tmp$_16 : throwCCE();
          if (node_2 != null) {
            findNode_3klnlw$result_2 = node_2;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_2 = null;
    }
     while (false);
    this.albedoMetalSampler_0 = (tmp$_4 = findNode_3klnlw$result_2) != null ? tmp$_4.sampler : null;
    if ((tmp$_5 = this.albedoMetalSampler_0) != null) {
      tmp$_5.texture = this.albedoMetal;
    }};
  function DeferredLightShader$Companion() {
    DeferredLightShader$Companion_instance = this;
    this.LIGHT_POS = new Attribute('aLightPos', GlslType$VEC_4F_getInstance());
  }
  DeferredLightShader$Companion.prototype.shaderModel_l5ebkw$ = function (cfg) {
    var $receiver = new ShaderModel('point light shader model');
    var ifFragCoords = {v: null};
    var ifLightColor = {v: null};
    var ifLightPos = {v: null};
    var $receiver_0 = new ShaderModel$VertexStageBuilder($receiver);
    var instMvp = $receiver_0.instanceAttrModelMat().output;
    var mvpMat = $receiver_0.multiplyNode_ze33is$($receiver_0.premultipliedMvpNode().outMvpMat, instMvp).output;
    $receiver_0.positionOutput = $receiver_0.vec4TransformNode_9krp9t$($receiver_0.attrPositions().output, mvpMat).outVec4;
    ifFragCoords.v = $receiver_0.stageInterfaceNode_iikjwn$('ifFragCoords', $receiver_0.positionOutput);
    ifLightColor.v = $receiver_0.stageInterfaceNode_iikjwn$('ifLightColor', $receiver_0.instanceAttributeNode_nm2vx5$(Attribute$Companion_getInstance().COLORS).output, true);
    ifLightPos.v = $receiver_0.stageInterfaceNode_iikjwn$('ifLightPos', $receiver_0.instanceAttributeNode_nm2vx5$(this.LIGHT_POS).output, true);
    var $receiver_1 = new ShaderModel$FragmentStageBuilder($receiver);
    var lightColor = ifLightColor.v.output;
    var lightPos = ifLightPos.v.output;
    var xyPos = $receiver_1.divideNode_ze33is$($receiver_1.channelNode_500t7j$(ifFragCoords.v.output, 'xy').output, $receiver_1.channelNode_500t7j$(ifFragCoords.v.output, 'w').output).output;
    var texPos = $receiver_1.addNode_ze33is$($receiver_1.multiplyNode_tuikh5$(xyPos, 0.5).output, new ShaderNodeIoVar(new ModelVar1fConst(0.5))).output;
    var coord = texPos;
    var $receiver_2 = $receiver_1.addNode_u9w9by$(new DeferredMrtShader$MrtDeMultiplexNode($receiver_1.stage));
    $receiver_2.inPositionAo = $receiver_1.textureSamplerNode_ce41yx$($receiver_1.textureNode_61zpoe$('positionAo'), coord).outColor;
    $receiver_2.inNormalRough = $receiver_1.textureSamplerNode_ce41yx$($receiver_1.textureNode_61zpoe$('normalRoughness'), coord).outColor;
    $receiver_2.inAlbedoMetallic = $receiver_1.textureSamplerNode_ce41yx$($receiver_1.textureNode_61zpoe$('albedoMetal'), coord).outColor;
    var mrtDeMultiplex = $receiver_2;
    $receiver_1.addNode_u9w9by$(new DiscardClearNode($receiver_1.stage)).inViewPos = mrtDeMultiplex.outViewPos;
    var defCam = $receiver_1.addNode_u9w9by$(new DeferredCameraNode($receiver_1.stage));
    var worldPos = $receiver_1.vec3TransformNode_vid4wo$(mrtDeMultiplex.outViewPos, defCam.outInvViewMat, 1.0).outVec3;
    var worldNrm = $receiver_1.vec3TransformNode_vid4wo$(mrtDeMultiplex.outViewNormal, defCam.outInvViewMat, 0.0).outVec3;
    var $receiver_3 = $receiver_1.singleLightNode_ycjtt8$();
    $receiver_3.isReducedSoi = true;
    $receiver_3.inLightPos = lightPos;
    $receiver_3.inLightColor = lightColor;
    var lightNode = $receiver_3;
    var $receiver_4 = $receiver_1.pbrLightNode_605fnh$(lightNode);
    $receiver_4.flipBacksideNormals = cfg.flipBacksideNormals;
    $receiver_4.inFragPos = worldPos;
    $receiver_4.inNormal = worldNrm;
    $receiver_4.inCamPos = defCam.outCamPos;
    $receiver_4.inAlbedo = mrtDeMultiplex.outAlbedo;
    $receiver_4.inMetallic = mrtDeMultiplex.outMetallic;
    $receiver_4.inRoughness = mrtDeMultiplex.outRoughness;
    var mat = $receiver_4;
    $receiver_1.colorOutput_a3v4si$(mat.outColor);
    return $receiver;
  };
  DeferredLightShader$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var DeferredLightShader$Companion_instance = null;
  function DeferredLightShader$Companion_getInstance() {
    if (DeferredLightShader$Companion_instance === null) {
      new DeferredLightShader$Companion();
    }return DeferredLightShader$Companion_instance;
  }
  function DeferredLightShader$Config() {
    this.sceneCamera = null;
    this.flipBacksideNormals = false;
    this.positionAo = null;
    this.normalRoughness = null;
    this.albedoMetal = null;
  }
  DeferredLightShader$Config.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Config',
    interfaces: []
  };
  DeferredLightShader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DeferredLightShader',
    interfaces: [ModeledShader]
  };
  function DeferredMrtPass() {
    DeferredMrtPass$Companion_getInstance();
    OffscreenRenderPass2dMrt.call(this, new Group(), 1600, 900, DeferredMrtPass$Companion_getInstance().FMTS_DEFERRED);
    var tmp$;
    this.content = Kotlin.isType(tmp$ = this.drawNode, Group) ? tmp$ : throwCCE();
    this.clearColors[0] = new Color(0.0, 0.0, 2.0, 0.0);
    this.clearColors[1] = null;
    this.clearColors[2] = null;
    this.content.isFrustumChecked = false;
  }
  Object.defineProperty(DeferredMrtPass.prototype, 'positionAo', {
    get: function () {
      return this.textures.get_za3lpa$(0);
    }
  });
  Object.defineProperty(DeferredMrtPass.prototype, 'normalRoughness', {
    get: function () {
      return this.textures.get_za3lpa$(1);
    }
  });
  Object.defineProperty(DeferredMrtPass.prototype, 'albedoMetal', {
    get: function () {
      return this.textures.get_za3lpa$(2);
    }
  });
  function DeferredMrtPass$Companion() {
    DeferredMrtPass$Companion_instance = this;
    this.FMT_POSITION_AO = TexFormat$RGBA_F16_getInstance();
    this.FMT_NORMAL_ROUGH = TexFormat$RGBA_F16_getInstance();
    this.FMT_ALBEDO_METAL = TexFormat$RGBA_getInstance();
    this.FMTS_DEFERRED = listOf([this.FMT_POSITION_AO, this.FMT_NORMAL_ROUGH, this.FMT_ALBEDO_METAL]);
  }
  DeferredMrtPass$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var DeferredMrtPass$Companion_instance = null;
  function DeferredMrtPass$Companion_getInstance() {
    if (DeferredMrtPass$Companion_instance === null) {
      new DeferredMrtPass$Companion();
    }return DeferredMrtPass$Companion_instance;
  }
  DeferredMrtPass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DeferredMrtPass',
    interfaces: [OffscreenRenderPass2dMrt]
  };
  var ShaderModel$findNode$lambda_6 = wrapFunction(function () {
    var equals = Kotlin.equals;
    var throwCCE = Kotlin.throwCCE;
    return function (closure$stage, closure$name, typeClosure$T, isT) {
      return function (it) {
        if ((it.stage.mask & closure$stage.mask) !== 0) {
          var isT_0 = isT;
          var name = closure$name;
          var tmp$;
          var $receiver = it.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_0;
            tmp$_0 = $receiver.iterator();
            while (tmp$_0.hasNext()) {
              var element = tmp$_0.next();
              if (equals(element.name, name) && isT_0(element)) {
                firstOrNull$result = element;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = Kotlin.orNull(isT_0)(tmp$ = firstOrNull$result) ? tmp$ : throwCCE();
          if (node != null) {
            return node;
          }}return Unit;
      };
    };
  });
  function DeferredMrtShader(cfg, model) {
    DeferredMrtShader$Companion_getInstance();
    if (model === void 0)
      model = DeferredMrtShader$Companion_getInstance().defaultMrtPbrModel_pg63dk$(cfg);
    ModeledShader.call(this, model);
    this.uRoughness_0 = null;
    this.uMetallic_0 = null;
    this.uAlbedo_0 = null;
    this.metallic_d07a52$_0 = cfg.metallic;
    this.roughness_a2be35$_0 = cfg.roughness;
    this.albedo_k03b7o$_0 = cfg.albedo;
    this.albedoSampler_0 = null;
    this.normalSampler_0 = null;
    this.metallicSampler_0 = null;
    this.roughnessSampler_0 = null;
    this.ambientOcclusionSampler_0 = null;
    this.displacementSampler_0 = null;
    this.uDispStrength_0 = null;
    this.albedoMap_hu1j44$_0 = cfg.albedoMap;
    this.normalMap_16c46i$_0 = cfg.normalMap;
    this.metallicMap_n78mam$_0 = cfg.metallicMap;
    this.roughnessMap_5fsqc7$_0 = cfg.roughnessMap;
    this.ambientOcclusionMap_mz2eoo$_0 = cfg.ambientOcclusionMap;
    this.displacementMap_gt8f4q$_0 = cfg.displacementMap;
    this.displacementStrength_9lp3mr$_0 = 0.1;
  }
  Object.defineProperty(DeferredMrtShader.prototype, 'metallic', {
    get: function () {
      return this.metallic_d07a52$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0;
      this.metallic_d07a52$_0 = value;
      (tmp$_0 = (tmp$ = this.uMetallic_0) != null ? tmp$.uniform : null) != null ? (tmp$_0.value = value) : null;
    }
  });
  Object.defineProperty(DeferredMrtShader.prototype, 'roughness', {
    get: function () {
      return this.roughness_a2be35$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0;
      this.roughness_a2be35$_0 = value;
      (tmp$_0 = (tmp$ = this.uRoughness_0) != null ? tmp$.uniform : null) != null ? (tmp$_0.value = value) : null;
    }
  });
  Object.defineProperty(DeferredMrtShader.prototype, 'albedo', {
    get: function () {
      return this.albedo_k03b7o$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0, tmp$_1;
      this.albedo_k03b7o$_0 = value;
      (tmp$_1 = (tmp$_0 = (tmp$ = this.uAlbedo_0) != null ? tmp$.uniform : null) != null ? tmp$_0.value : null) != null ? tmp$_1.set_d7aj7k$(value) : null;
    }
  });
  Object.defineProperty(DeferredMrtShader.prototype, 'albedoMap', {
    get: function () {
      return this.albedoMap_hu1j44$_0;
    },
    set: function (value) {
      var tmp$;
      this.albedoMap_hu1j44$_0 = value;
      (tmp$ = this.albedoSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(DeferredMrtShader.prototype, 'normalMap', {
    get: function () {
      return this.normalMap_16c46i$_0;
    },
    set: function (value) {
      var tmp$;
      this.normalMap_16c46i$_0 = value;
      (tmp$ = this.normalSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(DeferredMrtShader.prototype, 'metallicMap', {
    get: function () {
      return this.metallicMap_n78mam$_0;
    },
    set: function (value) {
      var tmp$;
      this.metallicMap_n78mam$_0 = value;
      (tmp$ = this.metallicSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(DeferredMrtShader.prototype, 'roughnessMap', {
    get: function () {
      return this.roughnessMap_5fsqc7$_0;
    },
    set: function (value) {
      var tmp$;
      this.roughnessMap_5fsqc7$_0 = value;
      (tmp$ = this.roughnessSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(DeferredMrtShader.prototype, 'ambientOcclusionMap', {
    get: function () {
      return this.ambientOcclusionMap_mz2eoo$_0;
    },
    set: function (value) {
      var tmp$;
      this.ambientOcclusionMap_mz2eoo$_0 = value;
      (tmp$ = this.ambientOcclusionSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(DeferredMrtShader.prototype, 'displacementMap', {
    get: function () {
      return this.displacementMap_gt8f4q$_0;
    },
    set: function (value) {
      var tmp$;
      this.displacementMap_gt8f4q$_0 = value;
      (tmp$ = this.displacementSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(DeferredMrtShader.prototype, 'displacementStrength', {
    get: function () {
      return this.displacementStrength_9lp3mr$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0;
      this.displacementStrength_9lp3mr$_0 = value;
      (tmp$_0 = (tmp$ = this.uDispStrength_0) != null ? tmp$.uniform : null) != null ? (tmp$_0.value = value) : null;
    }
  });
  DeferredMrtShader.prototype.createPipeline_y7vss5$ = function (mesh, builder, ctx) {
    builder.blendMode = BlendMode$DISABLED_getInstance();
    return ModeledShader.prototype.createPipeline_y7vss5$.call(this, mesh, builder, ctx);
  };
  DeferredMrtShader.prototype.onPipelineCreated_lfrgcb$ = function (pipeline) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16;
    var $this = this.model;
    var name = 'uMetallic';
    var stage;
    var findNode_3klnlw$result;
    findNode_3klnlw$break: do {
      stage = ShaderStage.ALL;
      var tmp$_17;
      tmp$_17 = $this.stages.values.iterator();
      while (tmp$_17.hasNext()) {
        var element = tmp$_17.next();
        if ((element.stage.mask & stage.mask) !== 0) {
          var tmp$_18;
          var $receiver = element.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_19;
            tmp$_19 = $receiver.iterator();
            while (tmp$_19.hasNext()) {
              var element_0 = tmp$_19.next();
              if (equals(element_0.name, name) && Kotlin.isType(element_0, PushConstantNode1f)) {
                firstOrNull$result = element_0;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = (tmp$_18 = firstOrNull$result) == null || Kotlin.isType(tmp$_18, PushConstantNode1f) ? tmp$_18 : throwCCE();
          if (node != null) {
            findNode_3klnlw$result = node;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result = null;
    }
     while (false);
    this.uMetallic_0 = findNode_3klnlw$result;
    if ((tmp$ = this.uMetallic_0) != null) {
      tmp$.uniform.value = this.metallic;
    }var $this_0 = this.model;
    var name_0 = 'uRoughness';
    var stage_0;
    var findNode_3klnlw$result_0;
    findNode_3klnlw$break: do {
      stage_0 = ShaderStage.ALL;
      var tmp$_20;
      tmp$_20 = $this_0.stages.values.iterator();
      while (tmp$_20.hasNext()) {
        var element_1 = tmp$_20.next();
        if ((element_1.stage.mask & stage_0.mask) !== 0) {
          var tmp$_21;
          var $receiver_0 = element_1.nodes;
          var firstOrNull$result_0;
          firstOrNull$break: do {
            var tmp$_22;
            tmp$_22 = $receiver_0.iterator();
            while (tmp$_22.hasNext()) {
              var element_2 = tmp$_22.next();
              if (equals(element_2.name, name_0) && Kotlin.isType(element_2, PushConstantNode1f)) {
                firstOrNull$result_0 = element_2;
                break firstOrNull$break;
              }}
            firstOrNull$result_0 = null;
          }
           while (false);
          var node_0 = (tmp$_21 = firstOrNull$result_0) == null || Kotlin.isType(tmp$_21, PushConstantNode1f) ? tmp$_21 : throwCCE();
          if (node_0 != null) {
            findNode_3klnlw$result_0 = node_0;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_0 = null;
    }
     while (false);
    this.uRoughness_0 = findNode_3klnlw$result_0;
    if ((tmp$_0 = this.uRoughness_0) != null) {
      tmp$_0.uniform.value = this.roughness;
    }var $this_1 = this.model;
    var stage_1;
    var findNode_3klnlw$result_1;
    findNode_3klnlw$break: do {
      stage_1 = ShaderStage.ALL;
      var tmp$_23;
      tmp$_23 = $this_1.stages.values.iterator();
      while (tmp$_23.hasNext()) {
        var element_3 = tmp$_23.next();
        if ((element_3.stage.mask & stage_1.mask) !== 0) {
          var tmp$_24;
          var $receiver_1 = element_3.nodes;
          var firstOrNull$result_1;
          firstOrNull$break: do {
            var tmp$_25;
            tmp$_25 = $receiver_1.iterator();
            while (tmp$_25.hasNext()) {
              var element_4 = tmp$_25.next();
              if (equals(element_4.name, 'uAlbedo') && Kotlin.isType(element_4, PushConstantNodeColor)) {
                firstOrNull$result_1 = element_4;
                break firstOrNull$break;
              }}
            firstOrNull$result_1 = null;
          }
           while (false);
          var node_1 = (tmp$_24 = firstOrNull$result_1) == null || Kotlin.isType(tmp$_24, PushConstantNodeColor) ? tmp$_24 : throwCCE();
          if (node_1 != null) {
            findNode_3klnlw$result_1 = node_1;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_1 = null;
    }
     while (false);
    this.uAlbedo_0 = findNode_3klnlw$result_1;
    (tmp$_3 = (tmp$_2 = (tmp$_1 = this.uAlbedo_0) != null ? tmp$_1.uniform : null) != null ? tmp$_2.value : null) != null ? tmp$_3.set_d7aj7k$(this.albedo) : null;
    var $this_2 = this.model;
    var stage_2;
    var findNode_3klnlw$result_2;
    findNode_3klnlw$break: do {
      stage_2 = ShaderStage.ALL;
      var tmp$_26;
      tmp$_26 = $this_2.stages.values.iterator();
      while (tmp$_26.hasNext()) {
        var element_5 = tmp$_26.next();
        if ((element_5.stage.mask & stage_2.mask) !== 0) {
          var tmp$_27;
          var $receiver_2 = element_5.nodes;
          var firstOrNull$result_2;
          firstOrNull$break: do {
            var tmp$_28;
            tmp$_28 = $receiver_2.iterator();
            while (tmp$_28.hasNext()) {
              var element_6 = tmp$_28.next();
              if (equals(element_6.name, 'tAlbedo') && Kotlin.isType(element_6, TextureNode)) {
                firstOrNull$result_2 = element_6;
                break firstOrNull$break;
              }}
            firstOrNull$result_2 = null;
          }
           while (false);
          var node_2 = (tmp$_27 = firstOrNull$result_2) == null || Kotlin.isType(tmp$_27, TextureNode) ? tmp$_27 : throwCCE();
          if (node_2 != null) {
            findNode_3klnlw$result_2 = node_2;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_2 = null;
    }
     while (false);
    this.albedoSampler_0 = (tmp$_4 = findNode_3klnlw$result_2) != null ? tmp$_4.sampler : null;
    if ((tmp$_5 = this.albedoSampler_0) != null) {
      tmp$_5.texture = this.albedoMap;
    }var $this_3 = this.model;
    var stage_3;
    var findNode_3klnlw$result_3;
    findNode_3klnlw$break: do {
      stage_3 = ShaderStage.ALL;
      var tmp$_29;
      tmp$_29 = $this_3.stages.values.iterator();
      while (tmp$_29.hasNext()) {
        var element_7 = tmp$_29.next();
        if ((element_7.stage.mask & stage_3.mask) !== 0) {
          var tmp$_30;
          var $receiver_3 = element_7.nodes;
          var firstOrNull$result_3;
          firstOrNull$break: do {
            var tmp$_31;
            tmp$_31 = $receiver_3.iterator();
            while (tmp$_31.hasNext()) {
              var element_8 = tmp$_31.next();
              if (equals(element_8.name, 'tNormal') && Kotlin.isType(element_8, TextureNode)) {
                firstOrNull$result_3 = element_8;
                break firstOrNull$break;
              }}
            firstOrNull$result_3 = null;
          }
           while (false);
          var node_3 = (tmp$_30 = firstOrNull$result_3) == null || Kotlin.isType(tmp$_30, TextureNode) ? tmp$_30 : throwCCE();
          if (node_3 != null) {
            findNode_3klnlw$result_3 = node_3;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_3 = null;
    }
     while (false);
    this.normalSampler_0 = (tmp$_6 = findNode_3klnlw$result_3) != null ? tmp$_6.sampler : null;
    if ((tmp$_7 = this.normalSampler_0) != null) {
      tmp$_7.texture = this.normalMap;
    }var $this_4 = this.model;
    var name_1 = 'tMetallic';
    var stage_4;
    var findNode_3klnlw$result_4;
    findNode_3klnlw$break: do {
      stage_4 = ShaderStage.ALL;
      var tmp$_32;
      tmp$_32 = $this_4.stages.values.iterator();
      while (tmp$_32.hasNext()) {
        var element_9 = tmp$_32.next();
        if ((element_9.stage.mask & stage_4.mask) !== 0) {
          var tmp$_33;
          var $receiver_4 = element_9.nodes;
          var firstOrNull$result_4;
          firstOrNull$break: do {
            var tmp$_34;
            tmp$_34 = $receiver_4.iterator();
            while (tmp$_34.hasNext()) {
              var element_10 = tmp$_34.next();
              if (equals(element_10.name, name_1) && Kotlin.isType(element_10, TextureNode)) {
                firstOrNull$result_4 = element_10;
                break firstOrNull$break;
              }}
            firstOrNull$result_4 = null;
          }
           while (false);
          var node_4 = (tmp$_33 = firstOrNull$result_4) == null || Kotlin.isType(tmp$_33, TextureNode) ? tmp$_33 : throwCCE();
          if (node_4 != null) {
            findNode_3klnlw$result_4 = node_4;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_4 = null;
    }
     while (false);
    this.metallicSampler_0 = (tmp$_8 = findNode_3klnlw$result_4) != null ? tmp$_8.sampler : null;
    if ((tmp$_9 = this.metallicSampler_0) != null) {
      tmp$_9.texture = this.metallicMap;
    }var $this_5 = this.model;
    var name_2 = 'tRoughness';
    var stage_5;
    var findNode_3klnlw$result_5;
    findNode_3klnlw$break: do {
      stage_5 = ShaderStage.ALL;
      var tmp$_35;
      tmp$_35 = $this_5.stages.values.iterator();
      while (tmp$_35.hasNext()) {
        var element_11 = tmp$_35.next();
        if ((element_11.stage.mask & stage_5.mask) !== 0) {
          var tmp$_36;
          var $receiver_5 = element_11.nodes;
          var firstOrNull$result_5;
          firstOrNull$break: do {
            var tmp$_37;
            tmp$_37 = $receiver_5.iterator();
            while (tmp$_37.hasNext()) {
              var element_12 = tmp$_37.next();
              if (equals(element_12.name, name_2) && Kotlin.isType(element_12, TextureNode)) {
                firstOrNull$result_5 = element_12;
                break firstOrNull$break;
              }}
            firstOrNull$result_5 = null;
          }
           while (false);
          var node_5 = (tmp$_36 = firstOrNull$result_5) == null || Kotlin.isType(tmp$_36, TextureNode) ? tmp$_36 : throwCCE();
          if (node_5 != null) {
            findNode_3klnlw$result_5 = node_5;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_5 = null;
    }
     while (false);
    this.roughnessSampler_0 = (tmp$_10 = findNode_3klnlw$result_5) != null ? tmp$_10.sampler : null;
    if ((tmp$_11 = this.roughnessSampler_0) != null) {
      tmp$_11.texture = this.roughnessMap;
    }var $this_6 = this.model;
    var name_3 = 'tAmbOccl';
    var stage_6;
    var findNode_3klnlw$result_6;
    findNode_3klnlw$break: do {
      stage_6 = ShaderStage.ALL;
      var tmp$_38;
      tmp$_38 = $this_6.stages.values.iterator();
      while (tmp$_38.hasNext()) {
        var element_13 = tmp$_38.next();
        if ((element_13.stage.mask & stage_6.mask) !== 0) {
          var tmp$_39;
          var $receiver_6 = element_13.nodes;
          var firstOrNull$result_6;
          firstOrNull$break: do {
            var tmp$_40;
            tmp$_40 = $receiver_6.iterator();
            while (tmp$_40.hasNext()) {
              var element_14 = tmp$_40.next();
              if (equals(element_14.name, name_3) && Kotlin.isType(element_14, TextureNode)) {
                firstOrNull$result_6 = element_14;
                break firstOrNull$break;
              }}
            firstOrNull$result_6 = null;
          }
           while (false);
          var node_6 = (tmp$_39 = firstOrNull$result_6) == null || Kotlin.isType(tmp$_39, TextureNode) ? tmp$_39 : throwCCE();
          if (node_6 != null) {
            findNode_3klnlw$result_6 = node_6;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_6 = null;
    }
     while (false);
    this.ambientOcclusionSampler_0 = (tmp$_12 = findNode_3klnlw$result_6) != null ? tmp$_12.sampler : null;
    if ((tmp$_13 = this.ambientOcclusionSampler_0) != null) {
      tmp$_13.texture = this.ambientOcclusionMap;
    }var $this_7 = this.model;
    var name_4 = 'tDisplacement';
    var stage_7;
    var findNode_3klnlw$result_7;
    findNode_3klnlw$break: do {
      stage_7 = ShaderStage.ALL;
      var tmp$_41;
      tmp$_41 = $this_7.stages.values.iterator();
      while (tmp$_41.hasNext()) {
        var element_15 = tmp$_41.next();
        if ((element_15.stage.mask & stage_7.mask) !== 0) {
          var tmp$_42;
          var $receiver_7 = element_15.nodes;
          var firstOrNull$result_7;
          firstOrNull$break: do {
            var tmp$_43;
            tmp$_43 = $receiver_7.iterator();
            while (tmp$_43.hasNext()) {
              var element_16 = tmp$_43.next();
              if (equals(element_16.name, name_4) && Kotlin.isType(element_16, TextureNode)) {
                firstOrNull$result_7 = element_16;
                break firstOrNull$break;
              }}
            firstOrNull$result_7 = null;
          }
           while (false);
          var node_7 = (tmp$_42 = firstOrNull$result_7) == null || Kotlin.isType(tmp$_42, TextureNode) ? tmp$_42 : throwCCE();
          if (node_7 != null) {
            findNode_3klnlw$result_7 = node_7;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_7 = null;
    }
     while (false);
    this.displacementSampler_0 = (tmp$_14 = findNode_3klnlw$result_7) != null ? tmp$_14.sampler : null;
    if ((tmp$_15 = this.displacementSampler_0) != null) {
      tmp$_15.texture = this.displacementMap;
    }var $this_8 = this.model;
    var name_5 = 'uDispStrength';
    var stage_8;
    var findNode_3klnlw$result_8;
    findNode_3klnlw$break: do {
      stage_8 = ShaderStage.ALL;
      var tmp$_44;
      tmp$_44 = $this_8.stages.values.iterator();
      while (tmp$_44.hasNext()) {
        var element_17 = tmp$_44.next();
        if ((element_17.stage.mask & stage_8.mask) !== 0) {
          var tmp$_45;
          var $receiver_8 = element_17.nodes;
          var firstOrNull$result_8;
          firstOrNull$break: do {
            var tmp$_46;
            tmp$_46 = $receiver_8.iterator();
            while (tmp$_46.hasNext()) {
              var element_18 = tmp$_46.next();
              if (equals(element_18.name, name_5) && Kotlin.isType(element_18, PushConstantNode1f)) {
                firstOrNull$result_8 = element_18;
                break firstOrNull$break;
              }}
            firstOrNull$result_8 = null;
          }
           while (false);
          var node_8 = (tmp$_45 = firstOrNull$result_8) == null || Kotlin.isType(tmp$_45, PushConstantNode1f) ? tmp$_45 : throwCCE();
          if (node_8 != null) {
            findNode_3klnlw$result_8 = node_8;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_8 = null;
    }
     while (false);
    this.uDispStrength_0 = findNode_3klnlw$result_8;
    if ((tmp$_16 = this.uDispStrength_0) != null) {
      tmp$_16.uniform.value = this.displacementStrength;
    }ModeledShader.prototype.onPipelineCreated_lfrgcb$.call(this, pipeline);
  };
  function DeferredMrtShader$Companion() {
    DeferredMrtShader$Companion_instance = this;
  }
  DeferredMrtShader$Companion.prototype.defaultMrtPbrModel_pg63dk$ = function (cfg) {
    var $receiver = new ShaderModel('defaultMrtPbrModel()');
    var ifColors = {v: null};
    var ifNormals = {v: null};
    var ifTangents = {v: null};
    var ifViewPos = {v: null};
    var ifTexCoords = {v: null};
    var mvpNode = {v: null};
    var $receiver_0 = new ShaderModel$VertexStageBuilder($receiver);
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var modelViewMat;
    var mvpMat;
    mvpNode.v = $receiver_0.mvpNode();
    if (cfg.isInstanced) {
      var modelMat = $receiver_0.multiplyNode_ze33is$(mvpNode.v.outModelMat, $receiver_0.instanceAttrModelMat().output).output;
      modelViewMat = $receiver_0.multiplyNode_ze33is$(modelMat, mvpNode.v.outViewMat).output;
      mvpMat = $receiver_0.multiplyNode_ze33is$(mvpNode.v.outMvpMat, $receiver_0.instanceAttrModelMat().output).output;
    } else {
      modelViewMat = $receiver_0.multiplyNode_ze33is$(mvpNode.v.outModelMat, mvpNode.v.outViewMat).output;
      mvpMat = mvpNode.v.outMvpMat;
    }
    var worldNrm = $receiver_0.vec3TransformNode_vid4wo$($receiver_0.attrNormals().output, modelViewMat, 0.0).outVec3;
    ifNormals.v = $receiver_0.stageInterfaceNode_iikjwn$('ifNormals', worldNrm);
    if (cfg.requiresTexCoords()) {
      tmp$ = $receiver_0.stageInterfaceNode_iikjwn$('ifTexCoords', $receiver_0.attrTexCoords().output);
    } else {
      tmp$ = null;
    }
    ifTexCoords.v = tmp$;
    if (cfg.isDisplacementMapped) {
      var dispTex = $receiver_0.textureNode_61zpoe$('tDisplacement');
      var $receiver_1 = $receiver_0.displacementMapNode_7fvjbk$(dispTex, ensureNotNull(ifTexCoords.v).input, $receiver_0.attrPositions().output, $receiver_0.attrNormals().output);
      $receiver_1.inStrength = $receiver_0.pushConstantNode1f_61zpoe$('uDispStrength').output;
      var dispNd = $receiver_1;
      tmp$_0 = dispNd.outPosition;
    } else {
      tmp$_0 = $receiver_0.attrPositions().output;
    }
    var worldPos = tmp$_0;
    var pos = $receiver_0.vec3TransformNode_vid4wo$(worldPos, modelViewMat, 1.0).outVec3;
    ifViewPos.v = $receiver_0.stageInterfaceNode_iikjwn$('ifViewPos', pos);
    if (cfg.albedoSource === Albedo$VERTEX_ALBEDO_getInstance()) {
      tmp$_1 = $receiver_0.stageInterfaceNode_iikjwn$('ifColors', $receiver_0.attrColors().output);
    } else {
      tmp$_1 = null;
    }
    ifColors.v = tmp$_1;
    if (cfg.isNormalMapped) {
      var tan = $receiver_0.vec3TransformNode_vid4wo$($receiver_0.attrTangents().output, modelViewMat, 0.0);
      tmp$_2 = $receiver_0.stageInterfaceNode_iikjwn$('ifTangents', tan.outVec3);
    } else {
      tmp$_2 = null;
    }
    ifTangents.v = tmp$_2;
    $receiver_0.positionOutput = $receiver_0.vec4TransformNode_9krp9t$(worldPos, mvpMat).outVec4;
    var $receiver_2 = new ShaderModel$FragmentStageBuilder($receiver);
    var tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7;
    var viewPos = ifViewPos.v.output;
    switch (cfg.albedoSource.name) {
      case 'VERTEX_ALBEDO':
        tmp$_3 = ensureNotNull(ifColors.v).output;
        break;
      case 'STATIC_ALBEDO':
        tmp$_3 = $receiver_2.pushConstantNodeColor_61zpoe$('uAlbedo').output;
        break;
      case 'TEXTURE_ALBEDO':
        var albedoSampler = $receiver_2.textureSamplerNode_ce41yx$($receiver_2.textureNode_61zpoe$('tAlbedo'), ensureNotNull(ifTexCoords.v).output, false);
        var albedoLin = $receiver_2.gammaNode_r20yfm$(albedoSampler.outColor);
        tmp$_3 = albedoLin.outColor;
        break;
      default:tmp$_3 = Kotlin.noWhenBranchMatched();
        break;
    }
    var albedo = tmp$_3;
    if (cfg.isNormalMapped && ifTangents.v != null) {
      var bumpNormal = $receiver_2.normalMapNode_j8913i$($receiver_2.textureNode_61zpoe$('tNormal'), ensureNotNull(ifTexCoords.v).output, ifNormals.v.output, ifTangents.v.output);
      bumpNormal.inStrength = new ShaderNodeIoVar(new ModelVar1fConst(cfg.normalStrength));
      tmp$_4 = bumpNormal.outNormal;
    } else {
      tmp$_4 = ifNormals.v.output;
    }
    var viewNormal = tmp$_4;
    if (cfg.isMetallicMapped) {
      tmp$_5 = $receiver_2.textureSamplerNode_ce41yx$($receiver_2.textureNode_61zpoe$('tMetallic'), ensureNotNull(ifTexCoords.v).output, false).outColor;
    } else {
      tmp$_5 = $receiver_2.pushConstantNode1f_61zpoe$('uMetallic').output;
    }
    var metallic = tmp$_5;
    if (cfg.isRoughnessMapped) {
      tmp$_6 = $receiver_2.textureSamplerNode_ce41yx$($receiver_2.textureNode_61zpoe$('tRoughness'), ensureNotNull(ifTexCoords.v).output, false).outColor;
    } else {
      tmp$_6 = $receiver_2.pushConstantNode1f_61zpoe$('uRoughness').output;
    }
    var roughness = tmp$_6;
    if (cfg.isAmbientOcclusionMapped) {
      tmp$_7 = $receiver_2.textureSamplerNode_ce41yx$($receiver_2.textureNode_61zpoe$('tAmbOccl'), ensureNotNull(ifTexCoords.v).output, false).outColor;
    } else {
      tmp$_7 = new ShaderNodeIoVar(new ModelVar1fConst(1.0));
    }
    var aoFactor = tmp$_7;
    var $receiver_3 = $receiver_2.addNode_u9w9by$(new DeferredMrtShader$MrtMultiplexNode($receiver_2.stage));
    $receiver_3.inViewPos = viewPos;
    $receiver_3.inAlbedo = albedo;
    $receiver_3.inViewNormal = viewNormal;
    $receiver_3.inRoughness = roughness;
    $receiver_3.inMetallic = metallic;
    $receiver_3.inAo = aoFactor;
    var mrtMultiplexNode = $receiver_3;
    var $receiver_4 = $receiver_2.colorOutput_a3v4si$(void 0, 3);
    $receiver_4.inColors[0] = mrtMultiplexNode.outPositionAo;
    $receiver_4.inColors[1] = mrtMultiplexNode.outNormalRough;
    $receiver_4.inColors[2] = mrtMultiplexNode.outAlbedoMetallic;
    return $receiver;
  };
  DeferredMrtShader$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var DeferredMrtShader$Companion_instance = null;
  function DeferredMrtShader$Companion_getInstance() {
    if (DeferredMrtShader$Companion_instance === null) {
      new DeferredMrtShader$Companion();
    }return DeferredMrtShader$Companion_instance;
  }
  function DeferredMrtShader$MrtPbrConfig() {
    this.albedoSource = Albedo$VERTEX_ALBEDO_getInstance();
    this.isNormalMapped = false;
    this.isRoughnessMapped = false;
    this.isMetallicMapped = false;
    this.isAmbientOcclusionMapped = false;
    this.isDisplacementMapped = false;
    this.normalStrength = 1.0;
    this.isInstanced = false;
    this.albedo = Color$Companion_getInstance().GRAY;
    this.roughness = 0.5;
    this.metallic = 0.0;
    this.albedoMap = null;
    this.normalMap = null;
    this.roughnessMap = null;
    this.metallicMap = null;
    this.ambientOcclusionMap = null;
    this.displacementMap = null;
  }
  DeferredMrtShader$MrtPbrConfig.prototype.requiresTexCoords = function () {
    return this.albedoSource === Albedo$TEXTURE_ALBEDO_getInstance() || this.isNormalMapped || this.isRoughnessMapped || this.isMetallicMapped || this.isAmbientOcclusionMapped || this.isDisplacementMapped;
  };
  DeferredMrtShader$MrtPbrConfig.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MrtPbrConfig',
    interfaces: []
  };
  function DeferredMrtShader$MrtMultiplexNode(graph) {
    ShaderNode.call(this, 'mrtMultiplex', graph, ShaderStage$FRAGMENT_SHADER_getInstance().mask);
    this.inViewPos = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().ZERO));
    this.inAlbedo = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().ZERO));
    this.inViewNormal = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().ZERO));
    this.inRoughness = new ShaderNodeIoVar(new ModelVar1fConst(0.5));
    this.inMetallic = new ShaderNodeIoVar(new ModelVar1fConst(0.0));
    this.inAo = new ShaderNodeIoVar(new ModelVar1fConst(1.0));
    this.outPositionAo = new ShaderNodeIoVar(new ModelVar4f('outPositionAo'), this);
    this.outNormalRough = new ShaderNodeIoVar(new ModelVar4f('outNormalRough'), this);
    this.outAlbedoMetallic = new ShaderNodeIoVar(new ModelVar4f('outAlbedoMetallic'), this);
  }
  DeferredMrtShader$MrtMultiplexNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$([this.inViewPos, this.inAlbedo, this.inViewNormal, this.inRoughness, this.inMetallic, this.inAo]);
  };
  DeferredMrtShader$MrtMultiplexNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$('\n' + '                ' + this.outPositionAo.declare() + ' = vec4(' + this.inViewPos.ref3f() + ', ' + this.inAo.ref1f() + ');' + '\n' + '                ' + this.outNormalRough.declare() + ' = vec4(normalize(' + this.inViewNormal.ref3f() + '), ' + this.inRoughness.ref1f() + ');' + '\n' + '                ' + this.outAlbedoMetallic.declare() + ' = vec4(' + this.inAlbedo.ref3f() + ', ' + this.inMetallic.ref1f() + ');' + '\n' + '            ');
  };
  DeferredMrtShader$MrtMultiplexNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MrtMultiplexNode',
    interfaces: [ShaderNode]
  };
  function DeferredMrtShader$MrtDeMultiplexNode(graph) {
    ShaderNode.call(this, 'mrtDeMultiplex', graph, ShaderStage$FRAGMENT_SHADER_getInstance().mask);
    this.inPositionAo = new ShaderNodeIoVar(new ModelVar4fConst(Vec4f$Companion_getInstance().ZERO));
    this.inNormalRough = new ShaderNodeIoVar(new ModelVar4fConst(Vec4f$Companion_getInstance().ZERO));
    this.inAlbedoMetallic = new ShaderNodeIoVar(new ModelVar4fConst(Vec4f$Companion_getInstance().ZERO));
    this.outViewPos = new ShaderNodeIoVar(new ModelVar4f('outViewPos'), this);
    this.outAlbedo = new ShaderNodeIoVar(new ModelVar4f('outAlbedo'), this);
    this.outViewNormal = new ShaderNodeIoVar(new ModelVar3f('outViewNormal'), this);
    this.outRoughness = new ShaderNodeIoVar(new ModelVar1f('outRoughness'), this);
    this.outMetallic = new ShaderNodeIoVar(new ModelVar1f('outMetallic'), this);
    this.outAo = new ShaderNodeIoVar(new ModelVar1f('outAo'), this);
  }
  DeferredMrtShader$MrtDeMultiplexNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_8ak6wm$([this.inPositionAo, this.inNormalRough, this.inAlbedoMetallic]);
  };
  DeferredMrtShader$MrtDeMultiplexNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$('\n' + '                ' + this.outViewPos.declare() + ' = vec4(' + this.inPositionAo.ref3f() + ', 1.0);' + '\n' + '                ' + this.outAlbedo.declare() + ' = vec4(' + this.inAlbedoMetallic.ref3f() + ', 1.0);' + '\n' + '                ' + this.outViewNormal.declare() + ' = vec3(' + this.inNormalRough.ref3f() + ');' + '\n' + '                ' + this.outRoughness.declare() + ' = ' + this.inNormalRough.ref4f() + '.a;' + '\n' + '                ' + this.outMetallic.declare() + ' = ' + this.inAlbedoMetallic.ref4f() + '.a;' + '\n' + '                ' + this.outAo.declare() + ' = ' + this.inPositionAo.ref4f() + '.a;' + '\n' + '            ');
  };
  DeferredMrtShader$MrtDeMultiplexNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MrtDeMultiplexNode',
    interfaces: [ShaderNode]
  };
  DeferredMrtShader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DeferredMrtShader',
    interfaces: [ModeledShader]
  };
  function DeferredPointLights(mrtPass) {
    this.lightInstances_0 = ArrayList_init_0();
    this.lightInstanceData_0 = new MeshInstanceList(listOf([MeshInstanceList$Companion_getInstance().MODEL_MAT, DeferredLightShader$Companion_getInstance().LIGHT_POS, Attribute$Companion_getInstance().COLORS]), 10000);
    this.isDynamic = true;
    this.modelMat_0 = new Mat4f();
    this.encodedColor_0 = new Float32Array(4);
    this.encodedPos_0 = new Float32Array(4);
    var mesh = new Mesh(new IndexedVertexList(listOf_0(Attribute$Companion_getInstance().POSITIONS)), null);
    mesh.isFrustumChecked = false;
    mesh.instances = this.lightInstanceData_0;
    mesh.generate_v2sixm$(DeferredPointLights$mesh$lambda$lambda);
    var $receiver = new DeferredLightShader$Config();
    $receiver.sceneCamera = mrtPass.camera;
    $receiver.positionAo = mrtPass.positionAo;
    $receiver.normalRoughness = mrtPass.normalRoughness;
    $receiver.albedoMetal = mrtPass.albedoMetal;
    var lightCfg = $receiver;
    mesh.pipelineLoader = new DeferredLightShader(lightCfg);
    mesh.onUpdate.add_11rb$(DeferredPointLights$mesh$lambda$lambda_0(this));
    this.mesh = mesh;
  }
  DeferredPointLights.prototype.updateLightData = function () {
    var tmp$;
    this.lightInstanceData_0.clear();
    var a = this.lightInstances_0.size;
    var b = this.lightInstanceData_0.maxInstances;
    tmp$ = Math_0.min(a, b);
    for (var i = 0; i < tmp$; i++) {
      var $this = this.lightInstanceData_0;
      $this.checkBufferSize_za3lpa$();
      var szBefore = $this.dataF.position;
      var $receiver = $this.dataF;
      this.encodeLight_0(this.lightInstances_0.get_za3lpa$(i));
      $receiver.put_q3cr5i$(this.modelMat_0.matrix);
      $receiver.put_q3cr5i$(this.encodedPos_0);
      $receiver.put_q3cr5i$(this.encodedColor_0);
      var growSz = $this.dataF.position - szBefore | 0;
      if (growSz !== $this.instanceSizeF) {
        throw IllegalStateException_init('Expected data to grow by ' + $this.instanceSizeF + ' elements, instead it grew by ' + growSz);
      }$this.numInstances = $this.numInstances + 1 | 0;
      $this.hasChanged = true;
    }
  };
  DeferredPointLights.prototype.encodeLight_0 = function (light) {
    this.modelMat_0.setIdentity();
    this.modelMat_0.translate_czzhiu$(light.position);
    var x = light.intensity;
    var soi = Math_0.sqrt(x);
    this.modelMat_0.scale_y2kzbl$(soi, soi, soi);
    this.encodedColor_0[0] = light.color.r;
    this.encodedColor_0[1] = light.color.g;
    this.encodedColor_0[2] = light.color.b;
    this.encodedColor_0[3] = light.intensity;
    this.encodedPos_0[0] = light.position.x;
    this.encodedPos_0[1] = light.position.y;
    this.encodedPos_0[2] = light.position.z;
    this.encodedPos_0[3] = Light$Type$POINT_getInstance().encoded;
  };
  DeferredPointLights.prototype.addPointLight_at6cwi$ = function (pointLight) {
    this.lightInstances_0.add_11rb$(pointLight);
  };
  DeferredPointLights.prototype.addPointLight_v2bnrz$ = defineInlineFunction('kool.de.fabmax.kool.util.deferred.DeferredPointLights.addPointLight_v2bnrz$', wrapFunction(function () {
    var DeferredPointLights$DeferredPointLights$PointLight_init = _.de.fabmax.kool.util.deferred.DeferredPointLights.PointLight;
    return function (block) {
      var light = new DeferredPointLights$DeferredPointLights$PointLight_init();
      block(light);
      this.addPointLight_at6cwi$(light);
      return light;
    };
  }));
  DeferredPointLights.prototype.removePointLight_at6cwi$ = function (light) {
    this.lightInstances_0.remove_11rb$(light);
  };
  function DeferredPointLights$PointLight() {
    this.position = MutableVec3f_init();
    this.color = Color$Companion_getInstance().MD_PINK;
    this.intensity = 1.0;
  }
  DeferredPointLights$PointLight.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PointLight',
    interfaces: []
  };
  function DeferredPointLights$mesh$lambda$lambda($receiver) {
    var $receiver_0 = $receiver.sphereProps.icoDefaults();
    $receiver_0.steps = 1;
    $receiver_0.radius = 1.1;
    $receiver.icoSphere_mojs8w$($receiver.sphereProps);
    return Unit;
  }
  function DeferredPointLights$mesh$lambda$lambda_0(this$DeferredPointLights) {
    return function ($receiver, f, f_0) {
      if (this$DeferredPointLights.isDynamic) {
        this$DeferredPointLights.updateLightData();
      }return Unit;
    };
  }
  DeferredPointLights.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DeferredPointLights',
    interfaces: []
  };
  function DiscardClearNode(stage) {
    ShaderNode.call(this, 'discardClear', stage);
    this.inViewPos = new ShaderNodeIoVar(new ModelVar4fConst(Vec4f$Companion_getInstance().ZERO));
  }
  DiscardClearNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_7qvs0d$(this.inViewPos);
  };
  DiscardClearNode.prototype.generateCode_626509$ = function (generator) {
    generator.appendMain_61zpoe$('if (' + this.inViewPos.name + '.z > 1.0) { discard; }');
  };
  DiscardClearNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DiscardClearNode',
    interfaces: [ShaderNode]
  };
  function DeferredCameraNode(stage) {
    ShaderNode.call(this, 'deferredCam', stage);
    this.uInvViewMat_0 = new UniformMat4f('uInvViewMat');
    this.uCamPos_0 = new Uniform4f('uCamPos');
    this.uViewport_0 = new Uniform4f('uViewport');
    this.outInvViewMat = new ShaderNodeIoVar(new ModelVarMat4f(this.uInvViewMat_0.name), this);
    this.outCamPos = new ShaderNodeIoVar(new ModelVar4f(this.uCamPos_0.name), this);
    this.outViewport = new ShaderNodeIoVar(new ModelVar4f(this.uViewport_0.name), this);
    this.sceneCam = null;
  }
  function DeferredCameraNode$setup$lambda$lambda$lambda(this$DeferredCameraNode) {
    return function () {
      return this$DeferredCameraNode.uInvViewMat_0;
    };
  }
  function DeferredCameraNode$setup$lambda$lambda$lambda_0(this$DeferredCameraNode) {
    return function () {
      return this$DeferredCameraNode.uCamPos_0;
    };
  }
  function DeferredCameraNode$setup$lambda$lambda$lambda_1(this$DeferredCameraNode) {
    return function () {
      return this$DeferredCameraNode.uViewport_0;
    };
  }
  function DeferredCameraNode$setup$lambda$lambda$lambda_2(this$DeferredCameraNode) {
    return function (f, cmd) {
      var cam = this$DeferredCameraNode.sceneCam;
      if (cam != null) {
        this$DeferredCameraNode.uInvViewMat_0.value.set_d4zu6l$(cam.invView);
        this$DeferredCameraNode.uCamPos_0.value.set_2qa7tb$(cam.globalPos, 1.0);
      }var $receiver = cmd.renderPass.viewport;
      this$DeferredCameraNode.uViewport_0.value.set_7b5o5w$($receiver.x, $receiver.y, $receiver.width, $receiver.height);
      return Unit;
    };
  }
  function DeferredCameraNode$setup$lambda$lambda(this$DeferredCameraNode) {
    return function ($receiver) {
      $receiver.unaryPlus_wq3w46$(DeferredCameraNode$setup$lambda$lambda$lambda(this$DeferredCameraNode));
      $receiver.unaryPlus_wq3w46$(DeferredCameraNode$setup$lambda$lambda$lambda_0(this$DeferredCameraNode));
      $receiver.unaryPlus_wq3w46$(DeferredCameraNode$setup$lambda$lambda$lambda_1(this$DeferredCameraNode));
      $receiver.onUpdate = DeferredCameraNode$setup$lambda$lambda$lambda_2(this$DeferredCameraNode);
      return Unit;
    };
  }
  DeferredCameraNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    shaderGraph.descriptorSet.uniformBuffer_2ydyu8$(this.name, [shaderGraph.stage], DeferredCameraNode$setup$lambda$lambda(this));
  };
  DeferredCameraNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DeferredCameraNode',
    interfaces: [ShaderNode]
  };
  function PbrLightingPass(scene, mrtPass, cfg) {
    if (cfg === void 0)
      cfg = new PbrSceneShader$DeferredPbrConfig();
    OffscreenRenderPass2d.call(this, new Group(), mrtPass.texWidth, mrtPass.texHeight, TexFormat$RGBA_F16_getInstance());
    this.mrtPass = mrtPass;
    this.dynamicPointLights = new DeferredPointLights(this.mrtPass);
    this.staticPointLights = new DeferredPointLights(this.mrtPass);
    this.dynamicPointLights.isDynamic = true;
    this.staticPointLights.isDynamic = false;
    var tmp$, tmp$_0;
    scene.onRenderScene.add_11rb$(PbrLightingPass_init$lambda(this));
    scene.addOffscreenPass_m1c2kf$(this);
    this.lighting = scene.lighting;
    this.clearColor = (tmp$ = this.clearColor) != null ? tmp$.toLinear() : null;
    this.dependsOn_yqp8fe$(this.mrtPass);
    this.camera = this.mrtPass.camera;
    var $receiver = Kotlin.isType(tmp$_0 = this.drawNode, Group) ? tmp$_0 : throwCCE();
    var closure$cfg = cfg;
    $receiver.isFrustumChecked = false;
    var mesh = new Mesh(new IndexedVertexList(listOf([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().TEXTURE_COORDS])), null);
    mesh.isFrustumChecked = false;
    mesh.generate_v2sixm$(PbrLightingPass_init$lambda$lambda$lambda);
    if (closure$cfg.sceneCamera == null) {
      closure$cfg.sceneCamera = this.mrtPass.camera;
    }if (closure$cfg.positionAo == null) {
      closure$cfg.positionAo = this.mrtPass.positionAo;
    }if (closure$cfg.normalRoughness == null) {
      closure$cfg.normalRoughness = this.mrtPass.normalRoughness;
    }if (closure$cfg.albedoMetal == null) {
      closure$cfg.albedoMetal = this.mrtPass.albedoMetal;
    }mesh.pipelineLoader = new PbrSceneShader(closure$cfg);
    $receiver.unaryPlus_uv0sim$(mesh);
    $receiver.unaryPlus_uv0sim$(this.dynamicPointLights.mesh);
    $receiver.unaryPlus_uv0sim$(this.staticPointLights.mesh);
  }
  PbrLightingPass.prototype.dispose_aemszp$ = function (ctx) {
    this.drawNode.dispose_aemszp$(ctx);
    OffscreenRenderPass2d.prototype.dispose_aemszp$.call(this, ctx);
  };
  function PbrLightingPass_init$lambda(this$PbrLightingPass) {
    return function ($receiver, ctx) {
      var mapW = $receiver.mainRenderPass.viewport.width;
      var mapH = $receiver.mainRenderPass.viewport.height;
      if (mapW > 0 && mapH > 0 && (mapW !== this$PbrLightingPass.texWidth || mapH !== this$PbrLightingPass.texHeight)) {
        this$PbrLightingPass.resize_w70mbp$(mapW, mapH, ctx);
        this$PbrLightingPass.mrtPass.resize_w70mbp$(mapW, mapH, ctx);
      }return Unit;
    };
  }
  function PbrLightingPass_init$lambda$lambda$lambda($receiver) {
    var $receiver_0 = $receiver.rectProps.defaults();
    $receiver_0.size.set_dleff0$(1.0, 1.0);
    $receiver_0.mirrorTexCoordsY();
    $receiver.rect_e5k3t5$($receiver.rectProps);
    return Unit;
  }
  PbrLightingPass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PbrLightingPass',
    interfaces: [OffscreenRenderPass2d]
  };
  var ShaderModel$findNode$lambda_7 = wrapFunction(function () {
    var equals = Kotlin.equals;
    var throwCCE = Kotlin.throwCCE;
    return function (closure$stage, closure$name, typeClosure$T, isT) {
      return function (it) {
        if ((it.stage.mask & closure$stage.mask) !== 0) {
          var isT_0 = isT;
          var name = closure$name;
          var tmp$;
          var $receiver = it.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_0;
            tmp$_0 = $receiver.iterator();
            while (tmp$_0.hasNext()) {
              var element = tmp$_0.next();
              if (equals(element.name, name) && isT_0(element)) {
                firstOrNull$result = element;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = Kotlin.orNull(isT_0)(tmp$ = firstOrNull$result) ? tmp$ : throwCCE();
          if (node != null) {
            return node;
          }}return Unit;
      };
    };
  });
  function PbrSceneShader(cfg, model) {
    PbrSceneShader$Companion_getInstance();
    if (model === void 0)
      model = PbrSceneShader$Companion_getInstance().defaultDeferredPbrModel_ijjr66$(cfg);
    ModeledShader.call(this, model);
    this.deferredCameraNode_0 = null;
    this.sceneCamera_79hi92$_0 = cfg.sceneCamera;
    this.positionAoSampler_0 = null;
    this.normalRoughnessSampler_0 = null;
    this.albedoMetalSampler_0 = null;
    this.positionAo_xpzjm6$_0 = cfg.positionAo;
    this.normalRoughness_ruv8si$_0 = cfg.normalRoughness;
    this.albedoMetal_4sc1kt$_0 = cfg.albedoMetal;
    this.uAmbient_0 = null;
    this.ambient_kdw3d9$_0 = new Color(0.03, 0.03, 0.03, 1.0);
    this.irradianceMapSampler_0 = null;
    this.reflectionMapSampler_0 = null;
    this.brdfLutSampler_0 = null;
    this.irradianceMap_33niit$_0 = cfg.irradianceMap;
    this.reflectionMap_496w8q$_0 = cfg.reflectionMap;
    this.brdfLut_bolscy$_0 = cfg.brdfLut;
    this.ssaoSampler_0 = null;
    this.scrSpcAmbientOcclusionMap_4r7yg8$_0 = cfg.scrSpcAmbientOcclusionMap;
    var array = Array_0(cfg.shadowMaps.size);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = cfg.shadowMaps.get_za3lpa$(i);
    }
    this.shadowMaps_0 = array;
    var array_0 = Array_0(this.shadowMaps_0.length);
    var tmp$_0;
    tmp$_0 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array_0[i_0] = null;
    }
    this.depthSamplers_0 = array_0;
    this.isReceivingShadow_0 = !cfg.shadowMaps.isEmpty();
  }
  Object.defineProperty(PbrSceneShader.prototype, 'sceneCamera', {
    get: function () {
      return this.sceneCamera_79hi92$_0;
    },
    set: function (value) {
      var tmp$;
      this.sceneCamera_79hi92$_0 = value;
      (tmp$ = this.deferredCameraNode_0) != null ? (tmp$.sceneCam = value) : null;
    }
  });
  Object.defineProperty(PbrSceneShader.prototype, 'positionAo', {
    get: function () {
      return this.positionAo_xpzjm6$_0;
    },
    set: function (value) {
      var tmp$;
      this.positionAo_xpzjm6$_0 = value;
      (tmp$ = this.positionAoSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(PbrSceneShader.prototype, 'normalRoughness', {
    get: function () {
      return this.normalRoughness_ruv8si$_0;
    },
    set: function (value) {
      var tmp$;
      this.normalRoughness_ruv8si$_0 = value;
      (tmp$ = this.normalRoughnessSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(PbrSceneShader.prototype, 'albedoMetal', {
    get: function () {
      return this.albedoMetal_4sc1kt$_0;
    },
    set: function (value) {
      var tmp$;
      this.albedoMetal_4sc1kt$_0 = value;
      (tmp$ = this.albedoMetalSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(PbrSceneShader.prototype, 'ambient', {
    get: function () {
      return this.ambient_kdw3d9$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0, tmp$_1;
      this.ambient_kdw3d9$_0 = value;
      (tmp$_1 = (tmp$_0 = (tmp$ = this.uAmbient_0) != null ? tmp$.uniform : null) != null ? tmp$_0.value : null) != null ? tmp$_1.set_d7aj7k$(value) : null;
    }
  });
  Object.defineProperty(PbrSceneShader.prototype, 'irradianceMap', {
    get: function () {
      return this.irradianceMap_33niit$_0;
    },
    set: function (value) {
      var tmp$;
      this.irradianceMap_33niit$_0 = value;
      (tmp$ = this.irradianceMapSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(PbrSceneShader.prototype, 'reflectionMap', {
    get: function () {
      return this.reflectionMap_496w8q$_0;
    },
    set: function (value) {
      var tmp$;
      this.reflectionMap_496w8q$_0 = value;
      (tmp$ = this.reflectionMapSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(PbrSceneShader.prototype, 'brdfLut', {
    get: function () {
      return this.brdfLut_bolscy$_0;
    },
    set: function (value) {
      var tmp$;
      this.brdfLut_bolscy$_0 = value;
      (tmp$ = this.brdfLutSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  Object.defineProperty(PbrSceneShader.prototype, 'scrSpcAmbientOcclusionMap', {
    get: function () {
      return this.scrSpcAmbientOcclusionMap_4r7yg8$_0;
    },
    set: function (value) {
      var tmp$;
      this.scrSpcAmbientOcclusionMap_4r7yg8$_0 = value;
      (tmp$ = this.ssaoSampler_0) != null ? (tmp$.texture = value) : null;
    }
  });
  PbrSceneShader.prototype.onPipelineCreated_lfrgcb$ = function (pipeline) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17;
    var $this = this.model;
    var name = 'deferredCam';
    var stage;
    var findNode_3klnlw$result;
    findNode_3klnlw$break: do {
      stage = ShaderStage.ALL;
      var tmp$_18;
      tmp$_18 = $this.stages.values.iterator();
      while (tmp$_18.hasNext()) {
        var element = tmp$_18.next();
        if ((element.stage.mask & stage.mask) !== 0) {
          var tmp$_19;
          var $receiver = element.nodes;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_20;
            tmp$_20 = $receiver.iterator();
            while (tmp$_20.hasNext()) {
              var element_0 = tmp$_20.next();
              if (equals(element_0.name, name) && Kotlin.isType(element_0, DeferredCameraNode)) {
                firstOrNull$result = element_0;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var node = (tmp$_19 = firstOrNull$result) == null || Kotlin.isType(tmp$_19, DeferredCameraNode) ? tmp$_19 : throwCCE();
          if (node != null) {
            findNode_3klnlw$result = node;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result = null;
    }
     while (false);
    this.deferredCameraNode_0 = findNode_3klnlw$result;
    if ((tmp$ = this.deferredCameraNode_0) != null) {
      tmp$.sceneCam = this.sceneCamera;
    }var $this_0 = this.model;
    var name_0 = 'positionAo';
    var stage_0;
    var findNode_3klnlw$result_0;
    findNode_3klnlw$break: do {
      stage_0 = ShaderStage.ALL;
      var tmp$_21;
      tmp$_21 = $this_0.stages.values.iterator();
      while (tmp$_21.hasNext()) {
        var element_1 = tmp$_21.next();
        if ((element_1.stage.mask & stage_0.mask) !== 0) {
          var tmp$_22;
          var $receiver_0 = element_1.nodes;
          var firstOrNull$result_0;
          firstOrNull$break: do {
            var tmp$_23;
            tmp$_23 = $receiver_0.iterator();
            while (tmp$_23.hasNext()) {
              var element_2 = tmp$_23.next();
              if (equals(element_2.name, name_0) && Kotlin.isType(element_2, TextureNode)) {
                firstOrNull$result_0 = element_2;
                break firstOrNull$break;
              }}
            firstOrNull$result_0 = null;
          }
           while (false);
          var node_0 = (tmp$_22 = firstOrNull$result_0) == null || Kotlin.isType(tmp$_22, TextureNode) ? tmp$_22 : throwCCE();
          if (node_0 != null) {
            findNode_3klnlw$result_0 = node_0;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_0 = null;
    }
     while (false);
    this.positionAoSampler_0 = (tmp$_0 = findNode_3klnlw$result_0) != null ? tmp$_0.sampler : null;
    if ((tmp$_1 = this.positionAoSampler_0) != null) {
      tmp$_1.texture = this.positionAo;
    }var $this_1 = this.model;
    var name_1 = 'normalRoughness';
    var stage_1;
    var findNode_3klnlw$result_1;
    findNode_3klnlw$break: do {
      stage_1 = ShaderStage.ALL;
      var tmp$_24;
      tmp$_24 = $this_1.stages.values.iterator();
      while (tmp$_24.hasNext()) {
        var element_3 = tmp$_24.next();
        if ((element_3.stage.mask & stage_1.mask) !== 0) {
          var tmp$_25;
          var $receiver_1 = element_3.nodes;
          var firstOrNull$result_1;
          firstOrNull$break: do {
            var tmp$_26;
            tmp$_26 = $receiver_1.iterator();
            while (tmp$_26.hasNext()) {
              var element_4 = tmp$_26.next();
              if (equals(element_4.name, name_1) && Kotlin.isType(element_4, TextureNode)) {
                firstOrNull$result_1 = element_4;
                break firstOrNull$break;
              }}
            firstOrNull$result_1 = null;
          }
           while (false);
          var node_1 = (tmp$_25 = firstOrNull$result_1) == null || Kotlin.isType(tmp$_25, TextureNode) ? tmp$_25 : throwCCE();
          if (node_1 != null) {
            findNode_3klnlw$result_1 = node_1;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_1 = null;
    }
     while (false);
    this.normalRoughnessSampler_0 = (tmp$_2 = findNode_3klnlw$result_1) != null ? tmp$_2.sampler : null;
    if ((tmp$_3 = this.normalRoughnessSampler_0) != null) {
      tmp$_3.texture = this.normalRoughness;
    }var $this_2 = this.model;
    var name_2 = 'albedoMetal';
    var stage_2;
    var findNode_3klnlw$result_2;
    findNode_3klnlw$break: do {
      stage_2 = ShaderStage.ALL;
      var tmp$_27;
      tmp$_27 = $this_2.stages.values.iterator();
      while (tmp$_27.hasNext()) {
        var element_5 = tmp$_27.next();
        if ((element_5.stage.mask & stage_2.mask) !== 0) {
          var tmp$_28;
          var $receiver_2 = element_5.nodes;
          var firstOrNull$result_2;
          firstOrNull$break: do {
            var tmp$_29;
            tmp$_29 = $receiver_2.iterator();
            while (tmp$_29.hasNext()) {
              var element_6 = tmp$_29.next();
              if (equals(element_6.name, name_2) && Kotlin.isType(element_6, TextureNode)) {
                firstOrNull$result_2 = element_6;
                break firstOrNull$break;
              }}
            firstOrNull$result_2 = null;
          }
           while (false);
          var node_2 = (tmp$_28 = firstOrNull$result_2) == null || Kotlin.isType(tmp$_28, TextureNode) ? tmp$_28 : throwCCE();
          if (node_2 != null) {
            findNode_3klnlw$result_2 = node_2;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_2 = null;
    }
     while (false);
    this.albedoMetalSampler_0 = (tmp$_4 = findNode_3klnlw$result_2) != null ? tmp$_4.sampler : null;
    if ((tmp$_5 = this.albedoMetalSampler_0) != null) {
      tmp$_5.texture = this.albedoMetal;
    }var $this_3 = this.model;
    var name_3 = 'uAmbient';
    var stage_3;
    var findNode_3klnlw$result_3;
    findNode_3klnlw$break: do {
      stage_3 = ShaderStage.ALL;
      var tmp$_30;
      tmp$_30 = $this_3.stages.values.iterator();
      while (tmp$_30.hasNext()) {
        var element_7 = tmp$_30.next();
        if ((element_7.stage.mask & stage_3.mask) !== 0) {
          var tmp$_31;
          var $receiver_3 = element_7.nodes;
          var firstOrNull$result_3;
          firstOrNull$break: do {
            var tmp$_32;
            tmp$_32 = $receiver_3.iterator();
            while (tmp$_32.hasNext()) {
              var element_8 = tmp$_32.next();
              if (equals(element_8.name, name_3) && Kotlin.isType(element_8, PushConstantNodeColor)) {
                firstOrNull$result_3 = element_8;
                break firstOrNull$break;
              }}
            firstOrNull$result_3 = null;
          }
           while (false);
          var node_3 = (tmp$_31 = firstOrNull$result_3) == null || Kotlin.isType(tmp$_31, PushConstantNodeColor) ? tmp$_31 : throwCCE();
          if (node_3 != null) {
            findNode_3klnlw$result_3 = node_3;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_3 = null;
    }
     while (false);
    this.uAmbient_0 = findNode_3klnlw$result_3;
    (tmp$_8 = (tmp$_7 = (tmp$_6 = this.uAmbient_0) != null ? tmp$_6.uniform : null) != null ? tmp$_7.value : null) != null ? tmp$_8.set_d7aj7k$(this.ambient) : null;
    var $this_4 = this.model;
    var name_4 = 'irradianceMap';
    var stage_4;
    var findNode_3klnlw$result_4;
    findNode_3klnlw$break: do {
      stage_4 = ShaderStage.ALL;
      var tmp$_33;
      tmp$_33 = $this_4.stages.values.iterator();
      while (tmp$_33.hasNext()) {
        var element_9 = tmp$_33.next();
        if ((element_9.stage.mask & stage_4.mask) !== 0) {
          var tmp$_34;
          var $receiver_4 = element_9.nodes;
          var firstOrNull$result_4;
          firstOrNull$break: do {
            var tmp$_35;
            tmp$_35 = $receiver_4.iterator();
            while (tmp$_35.hasNext()) {
              var element_10 = tmp$_35.next();
              if (equals(element_10.name, name_4) && Kotlin.isType(element_10, CubeMapNode)) {
                firstOrNull$result_4 = element_10;
                break firstOrNull$break;
              }}
            firstOrNull$result_4 = null;
          }
           while (false);
          var node_4 = (tmp$_34 = firstOrNull$result_4) == null || Kotlin.isType(tmp$_34, CubeMapNode) ? tmp$_34 : throwCCE();
          if (node_4 != null) {
            findNode_3klnlw$result_4 = node_4;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_4 = null;
    }
     while (false);
    this.irradianceMapSampler_0 = (tmp$_9 = findNode_3klnlw$result_4) != null ? tmp$_9.sampler : null;
    if ((tmp$_10 = this.irradianceMapSampler_0) != null) {
      tmp$_10.texture = this.irradianceMap;
    }var $this_5 = this.model;
    var name_5 = 'reflectionMap';
    var stage_5;
    var findNode_3klnlw$result_5;
    findNode_3klnlw$break: do {
      stage_5 = ShaderStage.ALL;
      var tmp$_36;
      tmp$_36 = $this_5.stages.values.iterator();
      while (tmp$_36.hasNext()) {
        var element_11 = tmp$_36.next();
        if ((element_11.stage.mask & stage_5.mask) !== 0) {
          var tmp$_37;
          var $receiver_5 = element_11.nodes;
          var firstOrNull$result_5;
          firstOrNull$break: do {
            var tmp$_38;
            tmp$_38 = $receiver_5.iterator();
            while (tmp$_38.hasNext()) {
              var element_12 = tmp$_38.next();
              if (equals(element_12.name, name_5) && Kotlin.isType(element_12, CubeMapNode)) {
                firstOrNull$result_5 = element_12;
                break firstOrNull$break;
              }}
            firstOrNull$result_5 = null;
          }
           while (false);
          var node_5 = (tmp$_37 = firstOrNull$result_5) == null || Kotlin.isType(tmp$_37, CubeMapNode) ? tmp$_37 : throwCCE();
          if (node_5 != null) {
            findNode_3klnlw$result_5 = node_5;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_5 = null;
    }
     while (false);
    this.reflectionMapSampler_0 = (tmp$_11 = findNode_3klnlw$result_5) != null ? tmp$_11.sampler : null;
    if ((tmp$_12 = this.reflectionMapSampler_0) != null) {
      tmp$_12.texture = this.reflectionMap;
    }var $this_6 = this.model;
    var stage_6;
    var findNode_3klnlw$result_6;
    findNode_3klnlw$break: do {
      stage_6 = ShaderStage.ALL;
      var tmp$_39;
      tmp$_39 = $this_6.stages.values.iterator();
      while (tmp$_39.hasNext()) {
        var element_13 = tmp$_39.next();
        if ((element_13.stage.mask & stage_6.mask) !== 0) {
          var tmp$_40;
          var $receiver_6 = element_13.nodes;
          var firstOrNull$result_6;
          firstOrNull$break: do {
            var tmp$_41;
            tmp$_41 = $receiver_6.iterator();
            while (tmp$_41.hasNext()) {
              var element_14 = tmp$_41.next();
              if (equals(element_14.name, 'brdfLut') && Kotlin.isType(element_14, TextureNode)) {
                firstOrNull$result_6 = element_14;
                break firstOrNull$break;
              }}
            firstOrNull$result_6 = null;
          }
           while (false);
          var node_6 = (tmp$_40 = firstOrNull$result_6) == null || Kotlin.isType(tmp$_40, TextureNode) ? tmp$_40 : throwCCE();
          if (node_6 != null) {
            findNode_3klnlw$result_6 = node_6;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_6 = null;
    }
     while (false);
    this.brdfLutSampler_0 = (tmp$_13 = findNode_3klnlw$result_6) != null ? tmp$_13.sampler : null;
    if ((tmp$_14 = this.brdfLutSampler_0) != null) {
      tmp$_14.texture = this.brdfLut;
    }var $this_7 = this.model;
    var stage_7;
    var findNode_3klnlw$result_7;
    findNode_3klnlw$break: do {
      stage_7 = ShaderStage.ALL;
      var tmp$_42;
      tmp$_42 = $this_7.stages.values.iterator();
      while (tmp$_42.hasNext()) {
        var element_15 = tmp$_42.next();
        if ((element_15.stage.mask & stage_7.mask) !== 0) {
          var tmp$_43;
          var $receiver_7 = element_15.nodes;
          var firstOrNull$result_7;
          firstOrNull$break: do {
            var tmp$_44;
            tmp$_44 = $receiver_7.iterator();
            while (tmp$_44.hasNext()) {
              var element_16 = tmp$_44.next();
              if (equals(element_16.name, 'ssaoMap') && Kotlin.isType(element_16, TextureNode)) {
                firstOrNull$result_7 = element_16;
                break firstOrNull$break;
              }}
            firstOrNull$result_7 = null;
          }
           while (false);
          var node_7 = (tmp$_43 = firstOrNull$result_7) == null || Kotlin.isType(tmp$_43, TextureNode) ? tmp$_43 : throwCCE();
          if (node_7 != null) {
            findNode_3klnlw$result_7 = node_7;
            break findNode_3klnlw$break;
          }}}
      findNode_3klnlw$result_7 = null;
    }
     while (false);
    this.ssaoSampler_0 = (tmp$_15 = findNode_3klnlw$result_7) != null ? tmp$_15.sampler : null;
    if ((tmp$_16 = this.ssaoSampler_0) != null) {
      tmp$_16.texture = this.scrSpcAmbientOcclusionMap;
    }if (this.isReceivingShadow_0) {
      tmp$_17 = this.depthSamplers_0;
      loop_label: for (var i = 0; i !== tmp$_17.length; ++i) {
        var tmp$_45;
        var $this_8 = this.model;
        var name_6 = 'depthMap_' + i;
        var stage_8;
        var findNode_3klnlw$result_8;
        findNode_3klnlw$break: do {
          stage_8 = ShaderStage.ALL;
          var tmp$_46;
          tmp$_46 = $this_8.stages.values.iterator();
          while (tmp$_46.hasNext()) {
            var element_17 = tmp$_46.next();
            if ((element_17.stage.mask & stage_8.mask) !== 0) {
              var tmp$_47;
              var $receiver_8 = element_17.nodes;
              var firstOrNull$result_8;
              firstOrNull$break: do {
                var tmp$_48;
                tmp$_48 = $receiver_8.iterator();
                while (tmp$_48.hasNext()) {
                  var element_18 = tmp$_48.next();
                  if (equals(element_18.name, name_6) && Kotlin.isType(element_18, TextureNode)) {
                    firstOrNull$result_8 = element_18;
                    break firstOrNull$break;
                  }}
                firstOrNull$result_8 = null;
              }
               while (false);
              var node_8 = (tmp$_47 = firstOrNull$result_8) == null || Kotlin.isType(tmp$_47, TextureNode) ? tmp$_47 : throwCCE();
              if (node_8 != null) {
                findNode_3klnlw$result_8 = node_8;
                break findNode_3klnlw$break;
              }}}
          findNode_3klnlw$result_8 = null;
        }
         while (false);
        var sampler = (tmp$_45 = findNode_3klnlw$result_8) != null ? tmp$_45.sampler : null;
        this.depthSamplers_0[i] = sampler;
        this.shadowMaps_0[i].setupSampler_s70oj3$(sampler);
      }
    }};
  function PbrSceneShader$Companion() {
    PbrSceneShader$Companion_instance = this;
  }
  PbrSceneShader$Companion.prototype.defaultDeferredPbrModel_ijjr66$ = function (cfg) {
    var $receiver = new ShaderModel('defaultDeferredPbrModel()');
    var ifTexCoords = {v: null};
    var $receiver_0 = new ShaderModel$VertexStageBuilder($receiver);
    ifTexCoords.v = $receiver_0.stageInterfaceNode_iikjwn$('ifTexCoords', $receiver_0.attrTexCoords().output);
    $receiver_0.positionOutput = $receiver_0.fullScreenQuadPositionNode_r20yfm$($receiver_0.attrTexCoords().output).outQuadPos;
    var $receiver_1 = new ShaderModel$FragmentStageBuilder($receiver);
    var coord = ifTexCoords.v.output;
    var $receiver_2 = $receiver_1.addNode_u9w9by$(new DeferredMrtShader$MrtDeMultiplexNode($receiver_1.stage));
    $receiver_2.inPositionAo = $receiver_1.textureSamplerNode_ce41yx$($receiver_1.textureNode_61zpoe$('positionAo'), coord).outColor;
    $receiver_2.inNormalRough = $receiver_1.textureSamplerNode_ce41yx$($receiver_1.textureNode_61zpoe$('normalRoughness'), coord).outColor;
    $receiver_2.inAlbedoMetallic = $receiver_1.textureSamplerNode_ce41yx$($receiver_1.textureNode_61zpoe$('albedoMetal'), coord).outColor;
    var mrtDeMultiplex = $receiver_2;
    $receiver_1.addNode_u9w9by$(new DiscardClearNode($receiver_1.stage)).inViewPos = mrtDeMultiplex.outViewPos;
    var defCam = $receiver_1.addNode_u9w9by$(new DeferredCameraNode($receiver_1.stage));
    var worldPos = $receiver_1.vec3TransformNode_vid4wo$(mrtDeMultiplex.outViewPos, defCam.outInvViewMat, 1.0).outVec3;
    var worldNrm = $receiver_1.vec3TransformNode_vid4wo$(mrtDeMultiplex.outViewNormal, defCam.outInvViewMat, 0.0).outVec3;
    var lightNode = $receiver_1.multiLightNode_za3lpa$(cfg.maxLights);
    var tmp$, tmp$_0;
    var index = 0;
    tmp$ = cfg.shadowMaps.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var i = checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0));
      var tmp$_1;
      if (Kotlin.isType(item, CascadedShadowMap))
        tmp$_1 = $receiver_1.deferredCascadedShadoweMapNode_y1yrn$(item, 'depthMap_' + i, mrtDeMultiplex.outViewPos, worldPos).outShadowFac;
      else if (Kotlin.isType(item, SimpleShadowMap))
        tmp$_1 = $receiver_1.deferredSimpleShadoweMapNode_dhoqzq$(item, 'depthMap_' + i, worldPos).outShadowFac;
      else
        tmp$_1 = new ShaderNodeIoVar(new ModelVar1fConst(1.0));
      lightNode.inShaodwFacs[i] = tmp$_1;
    }
    var reflMap;
    var brdfLut;
    var irrSampler;
    if (cfg.isImageBasedLighting) {
      var irrMap = $receiver_1.cubeMapNode_61zpoe$('irradianceMap');
      irrSampler = $receiver_1.cubeMapSamplerNode_2z3a2t$(irrMap, worldNrm);
      reflMap = $receiver_1.cubeMapNode_61zpoe$('reflectionMap');
      brdfLut = $receiver_1.textureNode_61zpoe$('brdfLut');
    } else {
      irrSampler = null;
      reflMap = null;
      brdfLut = null;
    }
    var $receiver_3 = $receiver_1.pbrMaterialNode_od0lt5$(lightNode, reflMap, brdfLut);
    var closure$irrSampler = irrSampler;
    var tmp$_2;
    $receiver_3.flipBacksideNormals = cfg.flipBacksideNormals;
    $receiver_3.inFragPos = worldPos;
    $receiver_3.inNormal = worldNrm;
    $receiver_3.inCamPos = defCam.outCamPos;
    $receiver_3.inIrradiance = (tmp$_2 = closure$irrSampler != null ? closure$irrSampler.outColor : null) != null ? tmp$_2 : $receiver_1.pushConstantNodeColor_61zpoe$('uAmbient').output;
    $receiver_3.inAlbedo = mrtDeMultiplex.outAlbedo;
    $receiver_3.inMetallic = mrtDeMultiplex.outMetallic;
    $receiver_3.inRoughness = mrtDeMultiplex.outRoughness;
    var aoFactor = mrtDeMultiplex.outAo;
    if (cfg.isScrSpcAmbientOcclusion) {
      var aoMap = $receiver_1.textureNode_61zpoe$('ssaoMap');
      var aoNode = $receiver_1.addNode_u9w9by$(new AoMapSampleNode(aoMap, $receiver_3.graph));
      aoNode.inViewport = defCam.outViewport;
      aoFactor = $receiver_1.multiplyNode_ze33is$(aoFactor, aoNode.outAo).output;
    }$receiver_3.inAmbientOccl = aoFactor;
    var mat = $receiver_3;
    $receiver_1.colorOutput_a3v4si$(mat.outColor);
    return $receiver;
  };
  PbrSceneShader$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var PbrSceneShader$Companion_instance = null;
  function PbrSceneShader$Companion_getInstance() {
    if (PbrSceneShader$Companion_instance === null) {
      new PbrSceneShader$Companion();
    }return PbrSceneShader$Companion_instance;
  }
  function PbrSceneShader$DeferredPbrConfig() {
    this.sceneCamera = null;
    this.isImageBasedLighting = false;
    this.isScrSpcAmbientOcclusion = false;
    this.maxLights = 4;
    this.shadowMaps = ArrayList_init_0();
    this.flipBacksideNormals = false;
    this.positionAo = null;
    this.normalRoughness = null;
    this.albedoMetal = null;
    this.irradianceMap = null;
    this.reflectionMap = null;
    this.brdfLut = null;
    this.scrSpcAmbientOcclusionMap = null;
  }
  PbrSceneShader$DeferredPbrConfig.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DeferredPbrConfig',
    interfaces: []
  };
  PbrSceneShader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PbrSceneShader',
    interfaces: [ModeledShader]
  };
  function Disposable() {
  }
  Disposable.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Disposable',
    interfaces: []
  };
  function uiFont(family, sizeDp, uiDpi, ctx, style, chars) {
    if (style === void 0)
      style = 0;
    if (chars === void 0)
      chars = Font$Companion_getInstance().STD_CHARS;
    var pts = sizeDp * uiDpi / 96.0;
    return Font_init(new FontProps(family, pts, style, chars), ctx);
  }
  function FontProps(family, sizePts, style, chars) {
    if (style === void 0)
      style = 0;
    if (chars === void 0)
      chars = Font$Companion_getInstance().STD_CHARS;
    this.family = family;
    this.sizePts = sizePts;
    this.style = style;
    this.chars = chars;
  }
  FontProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FontProps',
    interfaces: []
  };
  FontProps.prototype.component1 = function () {
    return this.family;
  };
  FontProps.prototype.component2 = function () {
    return this.sizePts;
  };
  FontProps.prototype.component3 = function () {
    return this.style;
  };
  FontProps.prototype.component4 = function () {
    return this.chars;
  };
  FontProps.prototype.copy_aw0137$ = function (family, sizePts, style, chars) {
    return new FontProps(family === void 0 ? this.family : family, sizePts === void 0 ? this.sizePts : sizePts, style === void 0 ? this.style : style, chars === void 0 ? this.chars : chars);
  };
  FontProps.prototype.toString = function () {
    return 'FontProps(family=' + Kotlin.toString(this.family) + (', sizePts=' + Kotlin.toString(this.sizePts)) + (', style=' + Kotlin.toString(this.style)) + (', chars=' + Kotlin.toString(this.chars)) + ')';
  };
  FontProps.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.family) | 0;
    result = result * 31 + Kotlin.hashCode(this.sizePts) | 0;
    result = result * 31 + Kotlin.hashCode(this.style) | 0;
    result = result * 31 + Kotlin.hashCode(this.chars) | 0;
    return result;
  };
  FontProps.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.family, other.family) && Kotlin.equals(this.sizePts, other.sizePts) && Kotlin.equals(this.style, other.style) && Kotlin.equals(this.chars, other.chars)))));
  };
  function Font(charMap) {
    Font$Companion_getInstance();
    Texture.call(this, new TextureProps(void 0, AddressMode$CLAMP_TO_EDGE_getInstance(), AddressMode$CLAMP_TO_EDGE_getInstance()), Font_init$lambda(charMap));
    this.charMap = charMap;
    this.lineSpace = this.charMap.fontProps.sizePts * 1.2;
    this.normHeight = this.charMap.fontProps.sizePts * 0.7;
  }
  Font.prototype.textWidth_61zpoe$ = function (string) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var width = 0.0;
    var maxWidth = 0.0;
    tmp$ = get_indices_1(string);
    tmp$_0 = tmp$.first;
    tmp$_1 = tmp$.last;
    tmp$_2 = tmp$.step;
    for (var i = tmp$_0; i <= tmp$_1; i += tmp$_2) {
      var c = string.charCodeAt(i);
      width += this.charWidth_s8itvh$(c);
      if (width > maxWidth) {
        maxWidth = width;
      }if (c === 10) {
        width = 0.0;
      }}
    return maxWidth;
  };
  Font.prototype.charWidth_s8itvh$ = function (char) {
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.charMap.get_11rb$(toBoxedChar(char))) != null ? tmp$.advance : null) != null ? tmp$_0 : 0.0;
  };
  Font.prototype.toString = function () {
    return 'Font(' + this.charMap.fontProps.family + ', ' + this.charMap.fontProps.sizePts + 'pts, ' + this.charMap.fontProps.style + ')';
  };
  function Font$Companion() {
    Font$Companion_instance = this;
    this.PLAIN = 0;
    this.BOLD = 1;
    this.ITALIC = 2;
    this.SYSTEM_FONT = '-apple-system, "Segoe UI", Roboto, Helvetica, Arial, sans-serif';
    this.STD_CHARS = null;
    this.DEFAULT_FONT_PROPS = null;
    var str = '';
    for (var i = 32; i <= 126; i++) {
      str += String.fromCharCode(toChar(i));
    }
    str += '\xE4\xC4\xF6\xD6\xFC\xDC\xDF\xB0\xA9';
    this.STD_CHARS = str;
    this.DEFAULT_FONT_PROPS = new FontProps(this.SYSTEM_FONT, 12.0);
  }
  Font$Companion.prototype.defaultFont_aemszp$ = function (ctx) {
    return Font_init(this.DEFAULT_FONT_PROPS, ctx);
  };
  Font$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Font$Companion_instance = null;
  function Font$Companion_getInstance() {
    if (Font$Companion_instance === null) {
      new Font$Companion();
    }return Font$Companion_instance;
  }
  function Coroutine$Font_init$lambda(closure$charMap_0, $receiver_0, it_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$charMap = closure$charMap_0;
  }
  Coroutine$Font_init$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Font_init$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Font_init$lambda.prototype.constructor = Coroutine$Font_init$lambda;
  Coroutine$Font_init$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$closure$charMap.textureData;
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Font_init$lambda(closure$charMap_0) {
    return function ($receiver_0, it_0, continuation_0, suspended) {
      var instance = new Coroutine$Font_init$lambda(closure$charMap_0, $receiver_0, it_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  Font.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Font',
    interfaces: [Texture]
  };
  function Font_init(fontProps, ctx, $this) {
    $this = $this || Object.create(Font.prototype);
    Font.call($this, ctx.assetMgr.createCharMap_ttufcy$(fontProps));
    return $this;
  }
  function CharMetrics() {
    this.width = 0.0;
    this.height = 0.0;
    this.xOffset = 0.0;
    this.yBaseline = 0.0;
    this.advance = 0.0;
    this.uvMin = MutableVec2f_init();
    this.uvMax = MutableVec2f_init();
  }
  CharMetrics.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CharMetrics',
    interfaces: []
  };
  function CharMap(textureData, map, fontProps) {
    this.textureData = textureData;
    this.map_0 = map;
    this.fontProps = fontProps;
  }
  Object.defineProperty(CharMap.prototype, 'entries', {
    get: function () {
      return this.map_0.entries;
    }
  });
  Object.defineProperty(CharMap.prototype, 'keys', {
    get: function () {
      return this.map_0.keys;
    }
  });
  Object.defineProperty(CharMap.prototype, 'size', {
    get: function () {
      return this.map_0.size;
    }
  });
  Object.defineProperty(CharMap.prototype, 'values', {
    get: function () {
      return this.map_0.values;
    }
  });
  CharMap.prototype.containsKey_11rb$ = function (key) {
    return this.map_0.containsKey_11rb$(key);
  };
  CharMap.prototype.containsValue_11rc$ = function (value) {
    return this.map_0.containsValue_11rc$(value);
  };
  CharMap.prototype.get_11rb$ = function (key) {
    return this.map_0.get_11rb$(key);
  };
  CharMap.prototype.isEmpty = function () {
    return this.map_0.isEmpty();
  };
  CharMap.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CharMap',
    interfaces: [Map]
  };
  function BrdfLutPass(parentScene) {
    OffscreenRenderPass2d.call(this, new Group(), 512, 512, TexFormat$RG_F16_getInstance(), 1);
    var tmp$;
    this.clearColor = null;
    var $receiver = new OrthographicCamera();
    $receiver.projCorrectionMode = Camera$ProjCorrectionMode$OFFSCREEN_getInstance();
    $receiver.isKeepAspectRatio = false;
    $receiver.left = 0.0;
    $receiver.right = 1.0;
    $receiver.top = 1.0;
    $receiver.bottom = 0.0;
    this.camera = $receiver;
    var $receiver_0 = Kotlin.isType(tmp$ = this.drawNode, Group) ? tmp$ : throwCCE();
    var mesh = new Mesh(new IndexedVertexList(listOf([Attribute$Companion_getInstance().POSITIONS, Attribute$Companion_getInstance().TEXTURE_COORDS])), null);
    mesh.generate_v2sixm$(BrdfLutPass_init$lambda$lambda$lambda);
    var $receiver_1 = new ShaderModel('BRDF LUT');
    var ifTexCoords = {v: null};
    var $receiver_2 = new ShaderModel$VertexStageBuilder($receiver_1);
    ifTexCoords.v = $receiver_2.stageInterfaceNode_iikjwn$('ifTexCoords', $receiver_2.attrTexCoords().output);
    $receiver_2.positionOutput = $receiver_2.simpleVertexPositionNode().outVec4;
    var $receiver_3 = new ShaderModel$FragmentStageBuilder($receiver_1);
    var $receiver_4 = $receiver_3.addNode_u9w9by$(new BrdfLutPass$BrdfLutNode($receiver_3.stage));
    $receiver_4.inTexCoords = ifTexCoords.v.output;
    var lutNd = $receiver_4;
    $receiver_3.colorOutput_a3v4si$(lutNd.outColor);
    var model = $receiver_1;
    mesh.pipelineLoader = new ModeledShader(model);
    $receiver_0.unaryPlus_uv0sim$(mesh);
    parentScene.addOffscreenPass_m1c2kf$(this);
    this.onAfterCollectDrawCommands.add_11rb$(BrdfLutPass_init$lambda(parentScene, this));
    parentScene.onDispose.add_11rb$(BrdfLutPass_init$lambda_0(this));
  }
  BrdfLutPass.prototype.dispose_aemszp$ = function (ctx) {
    this.drawNode.dispose_aemszp$(ctx);
    OffscreenRenderPass2d.prototype.dispose_aemszp$.call(this, ctx);
  };
  function BrdfLutPass$BrdfLutNode(graph) {
    ShaderNode.call(this, 'brdfLut', graph);
    this.inTexCoords = new ShaderNodeIoVar(new ModelVar2fConst(Vec2f$Companion_getInstance().ZERO));
    this.outColor = new ShaderNodeIoVar(new ModelVar4f('brdfLut_outColor'), this);
  }
  BrdfLutPass$BrdfLutNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_7qvs0d$(this.inTexCoords);
  };
  BrdfLutPass$BrdfLutNode.prototype.generateCode_626509$ = function (generator) {
    ShaderNode.prototype.generateCode_626509$.call(this, generator);
    generator.appendFunction_puj7f4$('brdfLut', '\n                float RadicalInverse_VdC(uint bits) {\n                    bits = (bits << 16u) | (bits >> 16u);\n                    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n                    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n                    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n                    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n                    return float(bits) * 2.3283064365386963e-10; // / 0x100000000\n                }\n                \n                vec2 Hammersley(uint i, uint N) {\n                    return vec2(float(i)/float(N), RadicalInverse_VdC(i));\n                }\n                \n                vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness) {\n                    float a = roughness*roughness;\n                    \n                    float phi = 2.0 * 3.141592653589793 * Xi.x;\n                    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\n                    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\n                    \n                    // from spherical coordinates to cartesian coordinates\n                    vec3 H;\n                    H.x = cos(phi) * sinTheta;\n                    H.y = sin(phi) * sinTheta;\n                    H.z = cosTheta;\n                    \n                    // from tangent-space vector to world-space sample vector\n                    vec3 up = abs(N.z) < 0.9999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n                    vec3 tangent = normalize(cross(up, N));\n                    vec3 bitangent = cross(N, tangent);\n                    \n                    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n                    return normalize(sampleVec);\n                }\n                \n                float GeometrySchlickGGX(float NdotV, float roughness) {\n                    float a = roughness;\n                    float k = (a * a) / 2.0;\n                \n                    float nom   = NdotV;\n                    float denom = NdotV * (1.0 - k) + k;\n                \n                    return nom / denom;\n                }\n                \n                float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {\n                    float NdotV = max(dot(N, V), 0.0);\n                    float NdotL = max(dot(N, L), 0.0);\n                    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n                    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n                \n                    return ggx1 * ggx2;\n                }\n                \n                vec2 IntegrateBRDF(float NdotV, float roughness) {\n                    vec3 V;\n                    V.x = sqrt(1.0 - NdotV*NdotV);\n                    V.y = 0.0;\n                    V.z = NdotV;\n                \n                    float A = 0.0;\n                    float B = 0.0;\n                \n                    vec3 N = vec3(0.0, 0.0, 1.0);\n                \n                    const uint SAMPLE_COUNT = 1024u;\n                    for(uint i = 0u; i < SAMPLE_COUNT; ++i) {\n                        vec2 Xi = Hammersley(i, SAMPLE_COUNT);\n                        vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\n                        vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n                \n                        float NdotL = max(L.z, 0.0);\n                        float NdotH = max(H.z, 0.0);\n                        float VdotH = max(dot(V, H), 0.0);\n                \n                        if(NdotL > 0.0) {\n                            float G = GeometrySmith(N, V, L, roughness);\n                            float G_Vis = (G * VdotH) / (NdotH * NdotV);\n                            float Fc = pow(1.0 - VdotH, 5.0);\n                \n                            A += (1.0 - Fc) * G_Vis;\n                            B += Fc * G_Vis;\n                        }\n                    }\n                    A /= float(SAMPLE_COUNT);\n                    B /= float(SAMPLE_COUNT);\n                    return vec2(A, B);\n                }\n            ');
    generator.appendMain_61zpoe$('\n' + '                vec2 integratedBRDF = IntegrateBRDF(' + this.inTexCoords.ref2f() + '.x, ' + this.inTexCoords.ref2f() + '.y);' + '\n' + '                ' + this.outColor.declare() + ' = vec4(integratedBRDF, 0.0, 1.0);' + '\n' + '            ');
  };
  BrdfLutPass$BrdfLutNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BrdfLutNode',
    interfaces: [ShaderNode]
  };
  function BrdfLutPass_init$lambda$lambda$lambda($receiver) {
    $receiver.rectProps.defaults().size.set_dleff0$(1.0, 1.0);
    $receiver.rect_e5k3t5$($receiver.rectProps);
    return Unit;
  }
  function BrdfLutPass_init$lambda(closure$parentScene, this$BrdfLutPass) {
    return function (it) {
      closure$parentScene.removeOffscreenPass_m1c2kf$(this$BrdfLutPass);
      return Unit;
    };
  }
  function BrdfLutPass_init$lambda_0(this$BrdfLutPass) {
    return function ($receiver, ctx) {
      this$BrdfLutPass.dispose_aemszp$(ctx);
      return Unit;
    };
  }
  BrdfLutPass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BrdfLutPass',
    interfaces: [OffscreenRenderPass2d]
  };
  function IrradianceMapPass(parentScene, hdriTexture) {
    OffscreenRenderPassCube.call(this, new Group(), 32, 32, 1, TexFormat$RGBA_F16_getInstance());
    this.parentScene_0 = parentScene;
    this.hdriTexture_bh5ebn$_0 = hdriTexture;
    this.irrMapShader_0 = null;
    var tmp$;
    this.clearColor = null;
    var $receiver = Kotlin.isType(tmp$ = this.drawNode, Group) ? tmp$ : throwCCE();
    var mesh = new Mesh(new IndexedVertexList(listOf_0(Attribute$Companion_getInstance().POSITIONS)), null);
    mesh.generate_v2sixm$(IrradianceMapPass_init$lambda$lambda$lambda);
    var texName = 'colorTex';
    var $receiver_0 = new ShaderModel('Irradiance Convolution Sampler');
    var ifLocalPos = {v: null};
    var $receiver_1 = new ShaderModel$VertexStageBuilder($receiver_0);
    ifLocalPos.v = $receiver_1.stageInterfaceNode_iikjwn$('ifLocalPos', $receiver_1.attrPositions().output);
    $receiver_1.positionOutput = $receiver_1.simpleVertexPositionNode().outVec4;
    var $receiver_2 = new ShaderModel$FragmentStageBuilder($receiver_0);
    var tex = $receiver_2.textureNode_61zpoe$(texName);
    var $receiver_3 = $receiver_2.addNode_u9w9by$(new IrradianceMapPass$ConvoluteIrradianceNode(tex, $receiver_2.stage));
    $receiver_3.inLocalPos = ifLocalPos.v.output;
    var convNd = $receiver_3;
    $receiver_2.colorOutput_a3v4si$(convNd.outColor);
    var model = $receiver_0;
    var $receiver_4 = new ModeledShader$TextureColor(hdriTexture, texName, model);
    $receiver_4.onSetup.add_11rb$(IrradianceMapPass_init$lambda$lambda$lambda$lambda);
    this.irrMapShader_0 = $receiver_4;
    mesh.pipelineLoader = this.irrMapShader_0;
    $receiver.unaryPlus_uv0sim$(mesh);
    this.update();
    this.onAfterCollectDrawCommands.add_11rb$(IrradianceMapPass_init$lambda(this));
    this.parentScene_0.onDispose.add_11rb$(IrradianceMapPass_init$lambda_0(this));
  }
  Object.defineProperty(IrradianceMapPass.prototype, 'hdriTexture', {
    get: function () {
      return this.hdriTexture_bh5ebn$_0;
    },
    set: function (value) {
      var tmp$;
      (tmp$ = this.irrMapShader_0) != null ? (tmp$.texture = value) : null;
      this.hdriTexture_bh5ebn$_0 = value;
    }
  });
  IrradianceMapPass.prototype.update = function () {
    this.parentScene_0.addOffscreenPass_m1c2kf$(this);
  };
  IrradianceMapPass.prototype.dispose_aemszp$ = function (ctx) {
    this.drawNode.dispose_aemszp$(ctx);
    OffscreenRenderPassCube.prototype.dispose_aemszp$.call(this, ctx);
  };
  function IrradianceMapPass$ConvoluteIrradianceNode(texture, graph) {
    ShaderNode.call(this, 'convIrradiance', graph);
    this.texture = texture;
    this.inLocalPos = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().X_AXIS));
    this.maxLightIntensity = new ShaderNodeIoVar(new ModelVar1fConst(5000.0));
    this.outColor = new ShaderNodeIoVar(new ModelVar4f('convIrradiance_outColor'), this);
  }
  IrradianceMapPass$ConvoluteIrradianceNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_7qvs0d$(this.inLocalPos);
    this.dependsOn_lhtstx$(this.texture);
  };
  IrradianceMapPass$ConvoluteIrradianceNode.prototype.generateCode_626509$ = function (generator) {
    ShaderNode.prototype.generateCode_626509$.call(this, generator);
    generator.appendFunction_puj7f4$('sampleEquiRect', '\n' + '                const vec2 invAtan = vec2(0.1591, 0.3183);' + '\n' + '                vec3 sampleEquiRect(vec3 texCoord) {' + '\n' + '                    vec3 equiRect_in = normalize(texCoord);' + '\n' + '                    vec2 uv = vec2(atan(equiRect_in.z, equiRect_in.x), -asin(equiRect_in.y));' + '\n' + '                    uv *= invAtan;' + '\n' + '                    uv += 0.5;' + '\n' + '                    ' + '\n' + '                    // decode rgbe' + '\n' + '                    vec4 rgbe = ' + generator.sampleTexture2d_buzeal$(this.texture.name, 'uv', '0.0') + ';' + '\n' + '                    vec3 fRgb = rgbe.rgb;' + '\n' + '                    float fExp = rgbe.a * 255.0 - 128.0;' + '\n' + '                    return min(fRgb * pow(2.0, fExp), vec3(' + this.maxLightIntensity.ref1f() + '));' + '\n' + '                }' + '\n' + '            ');
    var phiMax = 2.0 * math.PI;
    var thetaMax = 0.5 * math.PI;
    generator.appendMain_61zpoe$('\n' + '                vec3 normal = normalize(' + this.inLocalPos.ref3f() + ');' + '\n' + '                vec3 up = vec3(0.0, 1.0, 0.0);' + '\n' + '                vec3 right = normalize(cross(up, normal));' + '\n' + '                up = cross(normal, right);' + '\n' + '    ' + '\n' + '                float sampleDelta = 0.00737;' + '\n' + '                vec3 irradiance = vec3(0.0);' + '\n' + '                int nrSamples = 0; ' + '\n' + '                ' + '\n' + '                for (float theta = 0.0; theta < ' + thetaMax + '; theta += sampleDelta) {' + '\n' + '                    float deltaPhi = sampleDelta / sin(theta);' + '\n' + '                    for (float phi = 0.0; phi < ' + phiMax + '; phi += deltaPhi) {' + '\n' + '                        vec3 tempVec = cos(phi) * right + sin(phi) * up;' + '\n' + '                        vec3 sampleVector = cos(theta) * normal + sin(theta) * tempVec;' + '\n' + '                        irradiance += sampleEquiRect(sampleVector).rgb * cos(theta) * 0.6;' + '\n' + '                        nrSamples++;' + '\n' + '                    }' + '\n' + '                }' + '\n' + '                irradiance = irradiance * ' + math.PI + ' / float(nrSamples);' + '\n' + '                ' + this.outColor.declare() + ' = vec4(irradiance, 1.0);' + '\n' + '            ');
  };
  IrradianceMapPass$ConvoluteIrradianceNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ConvoluteIrradianceNode',
    interfaces: [ShaderNode]
  };
  function IrradianceMapPass_init$lambda$lambda$lambda($receiver) {
    $receiver.cubeProps.defaults().centered();
    $receiver.cube_lhbb6w$($receiver.cubeProps);
    return Unit;
  }
  function IrradianceMapPass_init$lambda$lambda$lambda$lambda(it) {
    it.cullMethod = CullMethod$CULL_FRONT_FACES_getInstance();
    return Unit;
  }
  function IrradianceMapPass_init$lambda(this$IrradianceMapPass) {
    return function (it) {
      this$IrradianceMapPass.parentScene_0.removeOffscreenPass_m1c2kf$(this$IrradianceMapPass);
      return Unit;
    };
  }
  function IrradianceMapPass_init$lambda_0(this$IrradianceMapPass) {
    return function ($receiver, ctx) {
      this$IrradianceMapPass.dispose_aemszp$(ctx);
      return Unit;
    };
  }
  IrradianceMapPass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IrradianceMapPass',
    interfaces: [OffscreenRenderPassCube]
  };
  function ReflectionMapPass(parentScene, hdriTexture) {
    OffscreenRenderPassCube.call(this, new Group(), 256, 256, 7, TexFormat$RGBA_F16_getInstance());
    this.parentScene = parentScene;
    this.hdriTexture_al3q84$_0 = hdriTexture;
    this.mipIdx_0 = 0;
    this.uRoughness_0 = Uniform1f_init(0.5, 'uRoughness');
    this.reflMapShader_0 = null;
    var tmp$;
    this.clearColor = null;
    var $receiver = Kotlin.isType(tmp$ = this.drawNode, Group) ? tmp$ : throwCCE();
    var mesh = new Mesh(new IndexedVertexList(listOf_0(Attribute$Companion_getInstance().POSITIONS)), null);
    mesh.isFrustumChecked = false;
    mesh.generate_v2sixm$(ReflectionMapPass_init$lambda$lambda$lambda);
    var texName = 'colorTex';
    var $receiver_0 = new ShaderModel('Reflectance Convolution Sampler');
    var ifLocalPos = {v: null};
    var $receiver_1 = new ShaderModel$VertexStageBuilder($receiver_0);
    ifLocalPos.v = $receiver_1.stageInterfaceNode_iikjwn$('ifLocalPos', $receiver_1.attrPositions().output);
    $receiver_1.positionOutput = $receiver_1.simpleVertexPositionNode().outVec4;
    var $receiver_2 = new ShaderModel$FragmentStageBuilder($receiver_0);
    var roughness = $receiver_2.pushConstantNode1f_978i2u$(this.uRoughness_0);
    var tex = $receiver_2.textureNode_61zpoe$(texName);
    var $receiver_3 = $receiver_2.addNode_u9w9by$(new ReflectionMapPass$ConvoluteReflectionNode(tex, $receiver_2.stage));
    $receiver_3.inLocalPos = ifLocalPos.v.output;
    $receiver_3.inRoughness = roughness.output;
    var convNd = $receiver_3;
    $receiver_2.colorOutput_a3v4si$(convNd.outColor);
    var model = $receiver_0;
    var $receiver_4 = new ModeledShader$TextureColor(hdriTexture, texName, model);
    $receiver_4.onSetup.add_11rb$(ReflectionMapPass_init$lambda$lambda$lambda$lambda);
    this.reflMapShader_0 = $receiver_4;
    mesh.pipelineLoader = this.reflMapShader_0;
    $receiver.unaryPlus_uv0sim$(mesh);
    this.update();
    this.parentScene.onDispose.add_11rb$(ReflectionMapPass_init$lambda(this));
  }
  Object.defineProperty(ReflectionMapPass.prototype, 'hdriTexture', {
    get: function () {
      return this.hdriTexture_al3q84$_0;
    },
    set: function (value) {
      var tmp$;
      (tmp$ = this.reflMapShader_0) != null ? (tmp$.texture = value) : null;
      this.hdriTexture_al3q84$_0 = value;
    }
  });
  ReflectionMapPass.prototype.collectDrawCommands_aemszp$ = function (ctx) {
    this.uRoughness_0.value = this.mipIdx_0 / (this.mipLevels - 1 | 0);
    this.targetMipLevel = this.mipIdx_0;
    if ((this.mipIdx_0 = this.mipIdx_0 + 1 | 0, this.mipIdx_0) >= this.mipLevels) {
      this.parentScene.removeOffscreenPass_m1c2kf$(this);
    }OffscreenRenderPassCube.prototype.collectDrawCommands_aemszp$.call(this, ctx);
  };
  ReflectionMapPass.prototype.update = function () {
    this.mipIdx_0 = 0;
    if (!this.parentScene.offscreenPasses.contains_11rb$(this)) {
      this.parentScene.addOffscreenPass_m1c2kf$(this);
    }};
  ReflectionMapPass.prototype.dispose_aemszp$ = function (ctx) {
    this.drawNode.dispose_aemszp$(ctx);
    OffscreenRenderPassCube.prototype.dispose_aemszp$.call(this, ctx);
  };
  function ReflectionMapPass$ConvoluteReflectionNode(texture, graph) {
    ShaderNode.call(this, 'convIrradiance', graph);
    this.texture = texture;
    this.inLocalPos = new ShaderNodeIoVar(new ModelVar3fConst(Vec3f$Companion_getInstance().X_AXIS));
    this.inRoughness = new ShaderNodeIoVar(new ModelVar1fConst(0.0));
    this.maxLightIntensity = new ShaderNodeIoVar(new ModelVar1fConst(5000.0));
    this.outColor = new ShaderNodeIoVar(new ModelVar4f('convReflection_outColor'), this);
  }
  ReflectionMapPass$ConvoluteReflectionNode.prototype.setup_llmhyc$ = function (shaderGraph) {
    ShaderNode.prototype.setup_llmhyc$.call(this, shaderGraph);
    this.dependsOn_7qvs0d$(this.inLocalPos);
    this.dependsOn_7qvs0d$(this.maxLightIntensity);
    this.dependsOn_lhtstx$(this.texture);
  };
  ReflectionMapPass$ConvoluteReflectionNode.prototype.generateCode_626509$ = function (generator) {
    ShaderNode.prototype.generateCode_626509$.call(this, generator);
    generator.appendFunction_puj7f4$('reflMapFuncs', '\n' + '                const vec2 invAtan = vec2(0.1591, 0.3183);' + '\n' + '                vec3 sampleEquiRect(vec3 texCoord, float mipLevel) {' + '\n' + '                    vec3 equiRect_in = normalize(texCoord);' + '\n' + '                    vec2 uv = vec2(atan(equiRect_in.z, equiRect_in.x), -asin(equiRect_in.y));' + '\n' + '                    uv *= invAtan;' + '\n' + '                    uv += 0.5;' + '\n' + '                    ' + '\n' + '                    // decode rgbe' + '\n' + '                    vec4 rgbe = ' + generator.sampleTexture2d_buzeal$(this.texture.name, 'uv', 'mipLevel') + ';' + '\n' + '                    vec3 fRgb = rgbe.rgb;' + '\n' + '                    float fExp = rgbe.a * 255.0 - 128.0;' + '\n' + '                    return min(fRgb * pow(2.0, fExp), vec3(' + this.maxLightIntensity.ref1f() + '));' + '\n' + '                }' + '\n' + '                ' + '\n' + '                float RadicalInverse_VdC(uint bits) {' + '\n' + '                    bits = (bits << 16u) | (bits >> 16u);' + '\n' + '                    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);' + '\n' + '                    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);' + '\n' + '                    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);' + '\n' + '                    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);' + '\n' + '                    return float(bits) * 2.3283064365386963e-10; // / 0x100000000' + '\n' + '                }' + '\n' + '                ' + '\n' + '                vec2 Hammersley(uint i, uint N) {' + '\n' + '                    return vec2(float(i)/float(N), RadicalInverse_VdC(i));' + '\n' + '                }' + '\n' + '                ' + '\n' + '                vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness) {' + '\n' + '                    float a = roughness*roughness;' + '\n' + '                    ' + '\n' + '                    float phi = 2.0 * ' + math.PI + ' * Xi.x;' + '\n' + '                    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));' + '\n' + '                    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);' + '\n' + '                    ' + '\n' + '                    // from spherical coordinates to cartesian coordinates' + '\n' + '                    vec3 H;' + '\n' + '                    H.x = cos(phi) * sinTheta;' + '\n' + '                    H.y = sin(phi) * sinTheta;' + '\n' + '                    H.z = cosTheta;' + '\n' + '                    ' + '\n' + '                    // from tangent-space vector to world-space sample vector' + '\n' + '                    vec3 up = abs(N.z) < 0.9999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);' + '\n' + '                    vec3 tangent = normalize(cross(up, N));' + '\n' + '                    vec3 bitangent = cross(N, tangent);' + '\n' + '                    ' + '\n' + '                    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;' + '\n' + '                    return normalize(sampleVec);' + '\n' + '                }' + '\n' + '            ');
    generator.appendMain_61zpoe$('\n' + '                vec3 N = normalize(' + this.inLocalPos.ref3f() + ');' + '\n' + '                vec3 R = N;' + '\n' + '                vec3 V = R;' + '\n' + '                ' + '\n' + '                float mipLevel = ' + this.inRoughness.ref1f() + ' * 16.0;' + '\n' + '                uint SAMPLE_COUNT = uint(1024.0 * (1.0 + mipLevel));' + '\n' + '                float totalWeight = 0.0;' + '\n' + '                vec3 prefilteredColor = vec3(0.0);' + '\n' + '                for(uint i = 0u; i < SAMPLE_COUNT; ++i) {' + '\n' + '                    vec2 Xi = Hammersley(i, SAMPLE_COUNT);' + '\n' + '                    vec3 H  = ImportanceSampleGGX(Xi, N, ' + this.inRoughness.ref1f() + ');' + '\n' + '                    vec3 L  = normalize(2.0 * dot(V, H) * H - V);' + '\n' + '            ' + '\n' + '                    float NdotL = max(dot(N, L), 0.0);' + '\n' + '                    if(NdotL > 0.0) {' + '\n' + '                        prefilteredColor += sampleEquiRect(L, mipLevel).rgb * NdotL;' + '\n' + '                        totalWeight += NdotL;' + '\n' + '                    }' + '\n' + '                }' + '\n' + '                prefilteredColor = prefilteredColor / totalWeight;' + '\n' + '                ' + this.outColor.declare() + ' = vec4(prefilteredColor, 1.0);' + '\n' + '            ');
  };
  ReflectionMapPass$ConvoluteReflectionNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ConvoluteReflectionNode',
    interfaces: [ShaderNode]
  };
  function ReflectionMapPass_init$lambda$lambda$lambda($receiver) {
    $receiver.cubeProps.defaults().centered();
    $receiver.cube_lhbb6w$($receiver.cubeProps);
    return Unit;
  }
  function ReflectionMapPass_init$lambda$lambda$lambda$lambda(it) {
    it.cullMethod = CullMethod$CULL_FRONT_FACES_getInstance();
    return Unit;
  }
  function ReflectionMapPass_init$lambda(this$ReflectionMapPass) {
    return function ($receiver, ctx) {
      this$ReflectionMapPass.dispose_aemszp$(ctx);
      return Unit;
    };
  }
  ReflectionMapPass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ReflectionMapPass',
    interfaces: [OffscreenRenderPassCube]
  };
  function IndexedVertexList(vertexAttributes) {
    IndexedVertexList$Companion_getInstance();
    this.vertexAttributes = vertexAttributes;
    var $receiver = this.vertexAttributes;
    var tmp$;
    var accumulator = L0;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      accumulator = accumulator.multiply(Kotlin.Long.fromInt(31)).add(Kotlin.Long.fromInt(element.hashCode()));
    }
    this.attributeHash = accumulator;
    this.vertexSizeF = 0;
    this.strideBytesF = 0;
    this.vertexSizeI = 0;
    this.strideBytesI = 0;
    this.attributeOffsets = null;
    this.primitiveType = PrimitiveType$TRIANGLES_getInstance();
    this.usage = Usage$STATIC_getInstance();
    this.numVertices = 0;
    this.dataF = null;
    this.dataI = null;
    this.indices = createUint32Buffer(1000);
    this.bounds = new BoundingBox();
    this.vertexIt = null;
    this.isRebuildBoundsOnSync = false;
    this.hasChanged = true;
    this.isBatchUpdate = false;
    var tmp$_0;
    var strideF = 0;
    var strideI = 0;
    var offsets = LinkedHashMap_init();
    tmp$_0 = this.vertexAttributes.iterator();
    while (tmp$_0.hasNext()) {
      var attrib = tmp$_0.next();
      if (attrib.type === GlslType$MAT_2F_getInstance() || attrib.type === GlslType$MAT_3F_getInstance() || attrib.type === GlslType$MAT_4F_getInstance()) {
        throw IllegalArgumentException_init('Matrix types are not supported as vertex attributes');
      }if (attrib.type.isInt) {
        var value = strideI;
        offsets.put_xwzc9p$(attrib, value);
        strideI = strideI + attrib.type.size | 0;
      } else {
        var value_0 = strideF;
        offsets.put_xwzc9p$(attrib, value_0);
        strideF = strideF + attrib.type.size | 0;
      }
    }
    this.attributeOffsets = offsets;
    this.vertexSizeF = strideF / 4 | 0;
    this.strideBytesF = strideF;
    this.vertexSizeI = strideI / 4 | 0;
    this.strideBytesI = strideI;
    this.dataF = createFloat32Buffer(strideF * 1000 | 0);
    this.dataI = createUint32Buffer(strideI * 1000 | 0);
    this.vertexIt = new VertexView(this, 0);
  }
  Object.defineProperty(IndexedVertexList.prototype, 'numIndices', {
    get: function () {
      return this.indices.position;
    }
  });
  Object.defineProperty(IndexedVertexList.prototype, 'numPrimitives', {
    get: function () {
      return this.numIndices / this.primitiveType.nVertices | 0;
    }
  });
  Object.defineProperty(IndexedVertexList.prototype, 'lastIndex', {
    get: function () {
      return this.numVertices - 1 | 0;
    }
  });
  IndexedVertexList.prototype.isEmpty = function () {
    return this.numVertices === 0 || this.numIndices === 0;
  };
  IndexedVertexList.prototype.increaseDataSizeF_0 = function (newSize) {
    var newData = createFloat32Buffer(newSize);
    this.dataF.flip();
    newData.put_he122g$(this.dataF);
    this.dataF = newData;
  };
  IndexedVertexList.prototype.increaseDataSizeI_0 = function (newSize) {
    var newData = createUint32Buffer(newSize);
    this.dataI.flip();
    newData.put_7hqxcs$(this.dataI);
    this.dataI = newData;
  };
  IndexedVertexList.prototype.increaseIndicesSize_0 = function (newSize) {
    var newIdxs = createUint32Buffer(newSize);
    this.indices.flip();
    newIdxs.put_7hqxcs$(this.indices);
    this.indices = newIdxs;
  };
  IndexedVertexList.prototype.checkBufferSizes_za3lpa$ = function (reqSpace) {
    if (reqSpace === void 0)
      reqSpace = 1;
    if (this.dataF.remaining < Kotlin.imul(this.vertexSizeF, reqSpace)) {
      var a = numberToInt(round(this.dataF.capacity * IndexedVertexList$Companion_getInstance().GROW_FACTOR_0));
      var b = Kotlin.imul(this.numVertices + reqSpace | 0, this.vertexSizeF);
      this.increaseDataSizeF_0(Math_0.max(a, b));
    }if (this.dataI.remaining < Kotlin.imul(this.vertexSizeI, reqSpace)) {
      var a_0 = numberToInt(round(this.dataI.capacity * IndexedVertexList$Companion_getInstance().GROW_FACTOR_0));
      var b_0 = Kotlin.imul(this.numVertices + reqSpace | 0, this.vertexSizeI);
      this.increaseDataSizeI_0(Math_0.max(a_0, b_0));
    }};
  IndexedVertexList.prototype.checkIndexSize_za3lpa$ = function (reqSpace) {
    if (reqSpace === void 0)
      reqSpace = 1;
    if (this.indices.remaining < reqSpace) {
      var a = numberToInt(round(this.indices.capacity * IndexedVertexList$Companion_getInstance().GROW_FACTOR_0));
      var b = this.numVertices + reqSpace | 0;
      this.increaseIndicesSize_0(Math_0.max(a, b));
    }};
  IndexedVertexList.prototype.hasAttribute_nm2vx5$ = function (attribute) {
    return this.vertexAttributes.contains_11rb$(attribute);
  };
  IndexedVertexList.prototype.batchUpdate_gj3khe$ = defineInlineFunction('kool.de.fabmax.kool.util.IndexedVertexList.batchUpdate_gj3khe$', function (rebuildBounds, block) {
    if (rebuildBounds === void 0)
      rebuildBounds = false;
    var wasBatchUpdate = this.isBatchUpdate;
    this.isBatchUpdate = true;
    block(this);
    this.hasChanged = true;
    this.isBatchUpdate = wasBatchUpdate;
    if (rebuildBounds) {
      this.rebuildBounds();
    }});
  IndexedVertexList.prototype.addVertex_tohjaj$ = defineInlineFunction('kool.de.fabmax.kool.util.IndexedVertexList.addVertex_tohjaj$', function (block) {
    var tmp$, tmp$_0, tmp$_1;
    this.checkBufferSizes_za3lpa$();
    tmp$ = this.vertexSizeF;
    for (var i = 1; i <= tmp$; i++) {
      this.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_0 = this.vertexSizeI;
    for (var i_0 = 1; i_0 <= tmp$_0; i_0++) {
      this.dataI.plusAssign_za3lpa$(0);
    }
    this.vertexIt.index = (tmp$_1 = this.numVertices, this.numVertices = tmp$_1 + 1 | 0, tmp$_1);
    block(this.vertexIt);
    this.bounds.add_czzhiu$(this.vertexIt.position);
    this.hasChanged = true;
    return this.numVertices - 1 | 0;
  });
  IndexedVertexList.prototype.addVertex_lv7vxo$ = function (position, normal, color, texCoord) {
    if (normal === void 0)
      normal = null;
    if (color === void 0)
      color = null;
    if (texCoord === void 0)
      texCoord = null;
    var tmp$, tmp$_0, tmp$_1;
    this.checkBufferSizes_za3lpa$();
    tmp$ = this.vertexSizeF;
    for (var i = 1; i <= tmp$; i++) {
      this.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_0 = this.vertexSizeI;
    for (var i_0 = 1; i_0 <= tmp$_0; i_0++) {
      this.dataI.plusAssign_za3lpa$(0);
    }
    this.vertexIt.index = (tmp$_1 = this.numVertices, this.numVertices = tmp$_1 + 1 | 0, tmp$_1);
    var $receiver = this.vertexIt;
    $receiver.position.set_czzhiu$(position);
    if (normal != null) {
      $receiver.normal.set_czzhiu$(normal);
    }if (color != null) {
      $receiver.color.set_d7aj7k$(color);
    }if (texCoord != null) {
      $receiver.texCoord.set_czzhjp$(texCoord);
    }this.bounds.add_czzhiu$(this.vertexIt.position);
    this.hasChanged = true;
    return this.numVertices - 1 | 0;
  };
  IndexedVertexList.prototype.addGeometry_r7nl2o$ = function (geometry) {
    var tmp$, tmp$_0;
    var baseIdx = this.numVertices;
    this.checkBufferSizes_za3lpa$(geometry.numVertices);
    tmp$ = geometry.numVertices;
    for (var i = 0; i < tmp$; i++) {
      var tmp$_1, tmp$_2, tmp$_3;
      this.checkBufferSizes_za3lpa$();
      tmp$_1 = this.vertexSizeF;
      for (var i_0 = 1; i_0 <= tmp$_1; i_0++) {
        this.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_2 = this.vertexSizeI;
      for (var i_1 = 1; i_1 <= tmp$_2; i_1++) {
        this.dataI.plusAssign_za3lpa$(0);
      }
      this.vertexIt.index = (tmp$_3 = this.numVertices, this.numVertices = tmp$_3 + 1 | 0, tmp$_3);
      var $receiver = this.vertexIt;
      geometry.vertexIt.index = i;
      $receiver.set_fs4kvg$(geometry.vertexIt);
      this.bounds.add_czzhiu$(this.vertexIt.position);
      this.hasChanged = true;
      this.numVertices - 1 | 0;
    }
    this.checkIndexSize_za3lpa$(geometry.indices.position);
    tmp$_0 = geometry.indices.position;
    for (var i_2 = 0; i_2 < tmp$_0; i_2++) {
      this.addIndex_za3lpa$(baseIdx + geometry.indices.get_za3lpa$(i_2) | 0);
    }
  };
  IndexedVertexList.prototype.addIndex_za3lpa$ = function (idx) {
    if (this.indices.remaining === 0) {
      this.checkIndexSize_za3lpa$();
    }this.indices.plusAssign_za3lpa$(idx);
  };
  IndexedVertexList.prototype.addIndices_pmhfmb$ = function (indices) {
    for (var idx = 0; idx !== indices.length; ++idx) {
      this.addIndex_za3lpa$(indices[idx]);
    }
    this.hasChanged = true;
  };
  IndexedVertexList.prototype.addIndices_pqoyrt$ = function (indices) {
    for (var idx = 0; idx !== indices.size; ++idx) {
      this.addIndex_za3lpa$(indices.get_za3lpa$(idx));
    }
  };
  IndexedVertexList.prototype.addTriIndices_qt1dr2$ = function (i0, i1, i2) {
    this.addIndex_za3lpa$(i0);
    this.addIndex_za3lpa$(i1);
    this.addIndex_za3lpa$(i2);
  };
  IndexedVertexList.prototype.rebuildBounds = function () {
    var tmp$;
    this.bounds.clear();
    tmp$ = this.numVertices;
    for (var i = 0; i < tmp$; i++) {
      this.vertexIt.index = i;
      this.bounds.add_czzhiu$(this.vertexIt.position);
    }
  };
  IndexedVertexList.prototype.clear = function () {
    this.numVertices = 0;
    this.dataF.position = 0;
    this.dataF.limit = this.dataF.capacity;
    this.dataI.position = 0;
    this.dataI.limit = this.dataI.capacity;
    this.indices.position = 0;
    this.indices.limit = this.indices.capacity;
    this.hasChanged = true;
  };
  IndexedVertexList.prototype.clearIndices = function () {
    this.indices.position = 0;
    this.indices.limit = this.indices.capacity;
  };
  IndexedVertexList.prototype.shrinkIndices_za3lpa$ = function (newSize) {
    if (newSize > this.indices.position) {
      throw KoolException_init('new size must be less (or equal) than old size');
    }this.indices.position = newSize;
    this.indices.limit = this.indices.capacity;
  };
  IndexedVertexList.prototype.shrinkVertices_za3lpa$ = function (newSize) {
    if (newSize > this.numVertices) {
      throw KoolException_init('new size must be less (or equal) than old size');
    }this.numVertices = newSize;
    this.dataF.position = Kotlin.imul(newSize, this.vertexSizeF);
    this.dataF.limit = this.dataF.capacity;
    this.dataI.position = Kotlin.imul(newSize, this.vertexSizeI);
    this.dataI.limit = this.dataI.capacity;
  };
  IndexedVertexList.prototype.get_za3lpa$ = function (i) {
    if (i < 0 || i >= (this.dataF.capacity / this.vertexSizeF | 0)) {
      throw KoolException_init('Vertex index out of bounds: ' + i);
    }return new VertexView(this, i);
  };
  IndexedVertexList.prototype.forEach_tohjaj$ = defineInlineFunction('kool.de.fabmax.kool.util.IndexedVertexList.forEach_tohjaj$', function (block) {
    var tmp$;
    tmp$ = this.numVertices;
    for (var i = 0; i < tmp$; i++) {
      this.vertexIt.index = i;
      block(this.vertexIt);
    }
  });
  IndexedVertexList.prototype.generateNormals = function () {
    var tmp$, tmp$_0, tmp$_1;
    if (!this.vertexAttributes.contains_11rb$(Attribute$Companion_getInstance().NORMALS)) {
      return;
    }if (this.primitiveType !== PrimitiveType$TRIANGLES_getInstance()) {
      throw KoolException_init('Normal generation is only supported for triangle meshes');
    }var v0 = this.get_za3lpa$(0);
    var v1 = this.get_za3lpa$(1);
    var v2 = this.get_za3lpa$(2);
    var e1 = MutableVec3f_init();
    var e2 = MutableVec3f_init();
    var nrm = MutableVec3f_init();
    tmp$ = this.numVertices;
    for (var i = 0; i < tmp$; i++) {
      v0.index = i;
      v0.normal.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    }
    tmp$_0 = this.numIndices;
    for (var i_0 = 0; i_0 < tmp$_0; i_0 += 3) {
      v0.index = this.indices.get_za3lpa$(i_0);
      v1.index = this.indices.get_za3lpa$(i_0 + 1 | 0);
      v2.index = this.indices.get_za3lpa$(i_0 + 2 | 0);
      if (v0.index > this.numVertices || v1.index > this.numVertices || v2.index > this.numVertices) {
        var $this = package$util.Log;
        var level = Log$Level.ERROR;
        var tag = Kotlin.getKClassFromExpression(this).simpleName;
        if (level.level >= $this.level.level) {
          $this.printer(level, tag, 'index to large ' + v0.index + ', ' + v1.index + ', ' + v2.index + ', sz: ' + this.numVertices);
        }}v1.position.subtract_2gj7b4$(v0.position, e1).norm();
      v2.position.subtract_2gj7b4$(v0.position, e2).norm();
      var a = triArea(v0.position, v1.position, v2.position);
      e1.cross_2gj7b4$(e2, nrm).norm().scale_mx4ult$(a);
      if (isNaN_0(nrm.x) || isNaN_0(nrm.y) || isNaN_0(nrm.z)) {
        var $this_0 = package$util.Log;
        var level_0 = Log$Level.WARN;
        var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_0.level >= $this_0.level.level) {
          $this_0.printer(level_0, tag_0, 'degenerated triangle');
        }} else {
        v0.normal.plusAssign_czzhiu$(nrm);
        v1.normal.plusAssign_czzhiu$(nrm);
        v2.normal.plusAssign_czzhiu$(nrm);
      }
    }
    tmp$_1 = this.numVertices;
    for (var i_1 = 0; i_1 < tmp$_1; i_1++) {
      v0.index = i_1;
      v0.normal.norm();
    }
  };
  IndexedVertexList.prototype.generateTangents = function () {
    var tmp$, tmp$_0, tmp$_1;
    if (!this.vertexAttributes.contains_11rb$(Attribute$Companion_getInstance().TANGENTS)) {
      return;
    }if (this.primitiveType !== PrimitiveType$TRIANGLES_getInstance()) {
      throw KoolException_init('Normal generation is only supported for triangle meshes');
    }var v0 = this.get_za3lpa$(0);
    var v1 = this.get_za3lpa$(1);
    var v2 = this.get_za3lpa$(2);
    var e1 = MutableVec3f_init();
    var e2 = MutableVec3f_init();
    var tan = MutableVec3f_init();
    tmp$ = this.numVertices;
    for (var i = 0; i < tmp$; i++) {
      v0.index = i;
      v0.tangent.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    }
    tmp$_0 = this.numIndices;
    for (var i_0 = 0; i_0 < tmp$_0; i_0 += 3) {
      v0.index = this.indices.get_za3lpa$(i_0);
      v1.index = this.indices.get_za3lpa$(i_0 + 1 | 0);
      v2.index = this.indices.get_za3lpa$(i_0 + 2 | 0);
      v1.position.subtract_2gj7b4$(v0.position, e1);
      v2.position.subtract_2gj7b4$(v0.position, e2);
      var du1 = v1.texCoord.x - v0.texCoord.x;
      var dv1 = v1.texCoord.y - v0.texCoord.y;
      var du2 = v2.texCoord.x - v0.texCoord.x;
      var dv2 = v2.texCoord.y - v0.texCoord.y;
      var f = 1.0 / (du1 * dv2 - du2 * dv1);
      if (isNaN_0(f)) {
        var $this = package$util.Log;
        var level = Log$Level.WARN;
        var tag = Kotlin.getKClassFromExpression(this).simpleName;
        if (level.level >= $this.level.level) {
          $this.printer(level, tag, 'degenerated triangle');
        }} else {
        tan.x = f * (dv2 * e1.x - dv1 * e2.x);
        tan.y = f * (dv2 * e1.y - dv1 * e2.y);
        tan.z = f * (dv2 * e1.z - dv1 * e2.z);
        v0.tangent.plusAssign_czzhiu$(tan);
        v1.tangent.plusAssign_czzhiu$(tan);
        v2.tangent.plusAssign_czzhiu$(tan);
      }
    }
    tmp$_1 = this.numVertices;
    for (var i_1 = 0; i_1 < tmp$_1; i_1++) {
      v0.index = i_1;
      if (v0.normal.sqrLength() === 0.0) {
        var $this_0 = package$util.Log;
        var level_0 = Log$Level.WARN;
        var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_0.level >= $this_0.level.level) {
          $this_0.printer(level_0, tag_0, 'singular normal');
        }v0.normal.set_czzhiu$(Vec3f$Companion_getInstance().Y_AXIS);
      }if (v0.tangent.sqrLength() !== 0.0) {
        v0.tangent.norm();
      } else {
        var $this_1 = package$util.Log;
        var level_1 = Log$Level.WARN;
        var tag_1 = Kotlin.getKClassFromExpression(this).simpleName;
        if (level_1.level >= $this_1.level.level) {
          $this_1.printer(level_1, tag_1, 'singular tangent');
        }v0.normal.set_czzhiu$(Vec3f$Companion_getInstance().X_AXIS);
      }
    }
  };
  function IndexedVertexList$Companion() {
    IndexedVertexList$Companion_instance = this;
    this.INITIAL_SIZE_0 = 1000;
    this.GROW_FACTOR_0 = 2.0;
  }
  IndexedVertexList$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var IndexedVertexList$Companion_instance = null;
  function IndexedVertexList$Companion_getInstance() {
    if (IndexedVertexList$Companion_instance === null) {
      new IndexedVertexList$Companion();
    }return IndexedVertexList$Companion_instance;
  }
  IndexedVertexList.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IndexedVertexList',
    interfaces: []
  };
  function IndexedVertexList_init(vertexAttributes, $this) {
    $this = $this || Object.create(IndexedVertexList.prototype);
    IndexedVertexList.call($this, toList(vertexAttributes));
    return $this;
  }
  function PrimitiveType(name, ordinal, nVertices) {
    Enum.call(this);
    this.nVertices = nVertices;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function PrimitiveType_initFields() {
    PrimitiveType_initFields = function () {
    };
    PrimitiveType$LINES_instance = new PrimitiveType('LINES', 0, 2);
    PrimitiveType$POINTS_instance = new PrimitiveType('POINTS', 1, 1);
    PrimitiveType$TRIANGLES_instance = new PrimitiveType('TRIANGLES', 2, 3);
  }
  var PrimitiveType$LINES_instance;
  function PrimitiveType$LINES_getInstance() {
    PrimitiveType_initFields();
    return PrimitiveType$LINES_instance;
  }
  var PrimitiveType$POINTS_instance;
  function PrimitiveType$POINTS_getInstance() {
    PrimitiveType_initFields();
    return PrimitiveType$POINTS_instance;
  }
  var PrimitiveType$TRIANGLES_instance;
  function PrimitiveType$TRIANGLES_getInstance() {
    PrimitiveType_initFields();
    return PrimitiveType$TRIANGLES_instance;
  }
  PrimitiveType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PrimitiveType',
    interfaces: [Enum]
  };
  function PrimitiveType$values() {
    return [PrimitiveType$LINES_getInstance(), PrimitiveType$POINTS_getInstance(), PrimitiveType$TRIANGLES_getInstance()];
  }
  PrimitiveType.values = PrimitiveType$values;
  function PrimitiveType$valueOf(name) {
    switch (name) {
      case 'LINES':
        return PrimitiveType$LINES_getInstance();
      case 'POINTS':
        return PrimitiveType$POINTS_getInstance();
      case 'TRIANGLES':
        return PrimitiveType$TRIANGLES_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.util.PrimitiveType.' + name);
    }
  }
  PrimitiveType.valueOf_61zpoe$ = PrimitiveType$valueOf;
  function Usage(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Usage_initFields() {
    Usage_initFields = function () {
    };
    Usage$DYNAMIC_instance = new Usage('DYNAMIC', 0);
    Usage$STATIC_instance = new Usage('STATIC', 1);
  }
  var Usage$DYNAMIC_instance;
  function Usage$DYNAMIC_getInstance() {
    Usage_initFields();
    return Usage$DYNAMIC_instance;
  }
  var Usage$STATIC_instance;
  function Usage$STATIC_getInstance() {
    Usage_initFields();
    return Usage$STATIC_instance;
  }
  Usage.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Usage',
    interfaces: [Enum]
  };
  function Usage$values() {
    return [Usage$DYNAMIC_getInstance(), Usage$STATIC_getInstance()];
  }
  Usage.values = Usage$values;
  function Usage$valueOf(name) {
    switch (name) {
      case 'DYNAMIC':
        return Usage$DYNAMIC_getInstance();
      case 'STATIC':
        return Usage$STATIC_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.util.Usage.' + name);
    }
  }
  Usage.valueOf_61zpoe$ = Usage$valueOf;
  function Comparator$ObjectLiteral_2(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_2.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_2.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_2 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function InstancedLodController(name) {
    if (name === void 0)
      name = null;
    Node.call(this, name);
    this.instances = ArrayList_init_0();
    this.lods_0 = ArrayList_init_0();
  }
  Object.defineProperty(InstancedLodController.prototype, 'isFrustumChecked', {
    get: function () {
      return false;
    },
    set: function (f) {
    }
  });
  InstancedLodController.prototype.getInstanceCount_za3lpa$ = function (lod) {
    if (lod < this.lods_0.size) {
      return this.lods_0.get_za3lpa$(lod).instances.size;
    }return 0;
  };
  function InstancedLodController$addLod$lambda(it) {
    return it.maxDistance;
  }
  InstancedLodController.prototype.addLod_od45r7$ = function (lodMesh, maxDistance) {
    var $receiver = this.lods_0;
    var element = new InstancedLodController$Lod(this, lodMesh, maxDistance);
    $receiver.add_11rb$(element);
    var $receiver_0 = this.lods_0;
    if ($receiver_0.size > 1) {
      sortWith($receiver_0, new Comparator$ObjectLiteral_2(compareBy$lambda_2(InstancedLodController$addLod$lambda)));
    }lodMesh.parent = this;
  };
  function InstancedLodController$update$lambda(it) {
    return it.camDistance;
  }
  InstancedLodController.prototype.update_oco14p$ = function (renderPass, ctx) {
    var tmp$, tmp$_0, tmp$_1;
    Node.prototype.update_oco14p$.call(this, renderPass, ctx);
    tmp$ = this.lods_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.lods_0.get_za3lpa$(i).instances.clear();
    }
    var cam = renderPass.camera;
    tmp$_0 = this.instances;
    for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
      var inst = this.instances.get_za3lpa$(i_0);
      inst.update_l2cg23$(this, cam, ctx);
      if (inst.isInFrustum) {
        for (var j = get_lastIndex(this.lods_0); j >= 0; j--) {
          if (j === 0 || inst.camDistance > this.lods_0.get_za3lpa$(j - 1 | 0).maxDistance) {
            this.lods_0.get_za3lpa$(j).instances.add_11rb$(inst);
            break;
          }}
      }}
    tmp$_1 = this.lods_0;
    for (var i_1 = 0; i_1 !== tmp$_1.size; ++i_1) {
      var lod = this.lods_0.get_za3lpa$(i_1);
      if (lod.instances.size > lod.maxInstances) {
        var $receiver = lod.instances;
        if ($receiver.size > 1) {
          sortWith($receiver, new Comparator$ObjectLiteral_2(compareBy$lambda_2(InstancedLodController$update$lambda)));
        }while (lod.instances.size > lod.maxInstances) {
          var rmInst = lod.instances.removeAt_za3lpa$(get_lastIndex(lod.instances));
          if (i_1 < get_lastIndex(this.lods_0)) {
            this.lods_0.get_za3lpa$(i_1 + 1 | 0).instances.add_11rb$(rmInst);
          }}
      }lod.updateInstances_2shagh$(i_1, ctx);
      lod.mesh.update_oco14p$(renderPass, ctx);
    }
  };
  InstancedLodController.prototype.collectDrawCommands_oco14p$ = function (renderPass, ctx) {
    var tmp$;
    Node.prototype.collectDrawCommands_oco14p$.call(this, renderPass, ctx);
    tmp$ = this.lods_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.lods_0.get_za3lpa$(i).mesh.collectDrawCommands_oco14p$(renderPass, ctx);
    }
  };
  InstancedLodController.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$;
    Node.prototype.dispose_aemszp$.call(this, ctx);
    tmp$ = this.lods_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.lods_0.get_za3lpa$(i).mesh.dispose_aemszp$(ctx);
    }
  };
  function InstancedLodController$Lod($outer, mesh, maxDistance) {
    this.$outer = $outer;
    this.mesh = mesh;
    this.maxDistance = maxDistance;
    this.instances = ArrayList_init_0();
  }
  Object.defineProperty(InstancedLodController$Lod.prototype, 'maxInstances', {
    get: function () {
      var tmp$, tmp$_0;
      return (tmp$_0 = (tmp$ = this.mesh.instances) != null ? tmp$.maxInstances : null) != null ? tmp$_0 : 0;
    }
  });
  InstancedLodController$Lod.prototype.updateInstances_2shagh$ = function (iLod, ctx) {
    var tmp$;
    if ((tmp$ = this.mesh.instances) != null) {
      tmp$.clear();
      var tmp$_0;
      tmp$_0 = this.instances.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        element.addInstanceData_bgc5cs$(iLod, tmp$, ctx);
      }
    }};
  InstancedLodController$Lod.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Lod',
    interfaces: []
  };
  function InstancedLodController$Instance() {
    this.instanceModelMat = new Mat4f();
    this.center = MutableVec3f_init();
    this.radius = 1.0;
    this.globalRadius_jgtua1$_0 = 0.0;
    this.camDistance_n2u3ce$_0 = 0.0;
    this.isInFrustum_77t0d9$_0 = false;
    this.globalCenterMut_46d76q$_0 = MutableVec3f_init();
    this.globalExtentMut_q2k453$_0 = MutableVec3f_init();
  }
  Object.defineProperty(InstancedLodController$Instance.prototype, 'globalCenter', {
    get: function () {
      return this.globalCenterMut_46d76q$_0;
    }
  });
  Object.defineProperty(InstancedLodController$Instance.prototype, 'globalRadius', {
    get: function () {
      return this.globalRadius_jgtua1$_0;
    },
    set: function (globalRadius) {
      this.globalRadius_jgtua1$_0 = globalRadius;
    }
  });
  Object.defineProperty(InstancedLodController$Instance.prototype, 'camDistance', {
    get: function () {
      return this.camDistance_n2u3ce$_0;
    },
    set: function (camDistance) {
      this.camDistance_n2u3ce$_0 = camDistance;
    }
  });
  Object.defineProperty(InstancedLodController$Instance.prototype, 'isInFrustum', {
    get: function () {
      return this.isInFrustum_77t0d9$_0;
    },
    set: function (isInFrustum) {
      this.isInFrustum_77t0d9$_0 = isInFrustum;
    }
  });
  InstancedLodController$Instance.prototype.update_l2cg23$ = function (lodCtrl, cam, ctx) {
    this.globalCenterMut_46d76q$_0.set_czzhiu$(this.center);
    this.globalExtentMut_q2k453$_0.set_czzhiu$(this.center).x = this.globalExtentMut_q2k453$_0.set_czzhiu$(this.center).x + this.radius;
    this.instanceModelMat.transform_w1lst9$(this.globalCenterMut_46d76q$_0);
    this.instanceModelMat.transform_w1lst9$(this.globalExtentMut_q2k453$_0);
    lodCtrl.modelMat.transform_w1lst9$(this.globalCenterMut_46d76q$_0);
    lodCtrl.modelMat.transform_w1lst9$(this.globalExtentMut_q2k453$_0);
    this.globalRadius = this.globalCenterMut_46d76q$_0.distance_czzhiu$(this.globalExtentMut_q2k453$_0);
    this.isInFrustum = cam.isInFrustum_2qa7tb$(this.globalCenterMut_46d76q$_0, this.globalRadius);
    this.camDistance = cam.globalPos.distance_czzhiu$(this.globalCenterMut_46d76q$_0);
  };
  InstancedLodController$Instance.prototype.addInstanceData_bgc5cs$ = function (lod, instanceList, ctx) {
    instanceList.checkBufferSize_za3lpa$();
    var szBefore = instanceList.dataF.position;
    instanceList.dataF.put_q3cr5i$(this.instanceModelMat.matrix);
    var growSz = instanceList.dataF.position - szBefore | 0;
    if (growSz !== instanceList.instanceSizeF) {
      throw IllegalStateException_init('Expected data to grow by ' + instanceList.instanceSizeF + ' elements, instead it grew by ' + growSz);
    }instanceList.numInstances = instanceList.numInstances + 1 | 0;
    instanceList.hasChanged = true;
  };
  InstancedLodController$Instance.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Instance',
    interfaces: []
  };
  InstancedLodController.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InstancedLodController',
    interfaces: [Node]
  };
  function KdTree(items, itemAdapter, bucketSz) {
    if (bucketSz === void 0)
      bucketSz = 20;
    SpatialTree.call(this, itemAdapter);
    this.root_qv5wxo$_0 = null;
    var size = items.size;
    var init = getCallableRef('get', function ($receiver, index) {
      return $receiver.get_za3lpa$(index);
    }.bind(null, items));
    var list = ArrayList_init(size);
    for (var index = 0; index < size; index++) {
      list.add_11rb$(init(index));
    }
    this.items_0 = list;
    this.cmpX_0 = KdTree$cmpX$lambda(itemAdapter);
    this.cmpY_0 = KdTree$cmpY$lambda(itemAdapter);
    this.cmpZ_0 = KdTree$cmpZ$lambda(itemAdapter);
    this.root_qv5wxo$_0 = new KdTree$KdNode(this, get_indices(items), 0, bucketSz);
  }
  Object.defineProperty(KdTree.prototype, 'root', {
    get: function () {
      return this.root_qv5wxo$_0;
    }
  });
  Object.defineProperty(KdTree.prototype, 'size', {
    get: function () {
      return this.items_0.size;
    }
  });
  KdTree.prototype.contains_11rb$ = function (element) {
    return this.root.contains_uargzz$(element);
  };
  KdTree.prototype.containsAll_brywnq$ = function (elements) {
    var tmp$;
    tmp$ = elements.iterator();
    while (tmp$.hasNext()) {
      var elem = tmp$.next();
      if (!this.contains_11rb$(elem)) {
        return false;
      }}
    return true;
  };
  KdTree.prototype.isEmpty = function () {
    return this.items_0.isEmpty();
  };
  KdTree.prototype.iterator = function () {
    return this.items_0.iterator();
  };
  function KdTree$KdNode($outer, nodeRange, depth, bucketSz) {
    this.$outer = $outer;
    SpatialTree$Node.call(this, this.$outer, depth);
    this.nodeRange_rt7fdu$_0 = nodeRange;
    this.children_wv5otg$_0 = ArrayList_init_0();
    this.size_zddesm$_0 = 0;
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var tmpVec = MutableVec3f_init();
    this.size_zddesm$_0 = this.nodeRange.last - this.nodeRange.first + 1 | 0;
    var $this = this.bounds;
    this.$outer;
    var wasBatchUpdate = $this.isBatchUpdate;
    $this.isBatchUpdate = true;
    var this$KdTree = this.$outer;
    var tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    tmp$_3 = this.nodeRange;
    tmp$_4 = tmp$_3.first;
    tmp$_5 = tmp$_3.last;
    tmp$_6 = tmp$_3.step;
    for (var i = tmp$_4; i <= tmp$_5; i += tmp$_6) {
      var it = this.items.get_za3lpa$(i);
      $this.add_czzhiu$(this$KdTree.itemAdapter.getMin_hm1yd1$(it, tmpVec));
      $this.add_czzhiu$(this$KdTree.itemAdapter.getMax_hm1yd1$(it, tmpVec));
    }
    $this.isBatchUpdate = wasBatchUpdate;
    if ((this.nodeRange.last - this.nodeRange.first | 0) > bucketSz) {
      var cmp = this.$outer.cmpX_0;
      if (this.bounds.size.y > this.bounds.size.x && this.bounds.size.y > this.bounds.size.z) {
        cmp = this.$outer.cmpY_0;
      } else if (this.bounds.size.z > this.bounds.size.x && this.bounds.size.z > this.bounds.size.y) {
        cmp = this.$outer.cmpZ_0;
      }var k = this.nodeRange.first + ((this.nodeRange.last - this.nodeRange.first | 0) / 2 | 0) | 0;
      partition_0(this.$outer.items_0, this.nodeRange, k, cmp);
      this.children.add_11rb$(new KdTree$KdNode(this.$outer, new IntRange(this.nodeRange.first, k), depth + 1 | 0, bucketSz));
      this.children.add_11rb$(new KdTree$KdNode(this.$outer, new IntRange(k + 1 | 0, this.nodeRange.last), depth + 1 | 0, bucketSz));
    } else {
      tmp$ = this.nodeRange;
      tmp$_0 = tmp$.first;
      tmp$_1 = tmp$.last;
      tmp$_2 = tmp$.step;
      for (var i_0 = tmp$_0; i_0 <= tmp$_1; i_0 += tmp$_2) {
        this.$outer.itemAdapter.setNode_bc9457$(this.items.get_za3lpa$(i_0), this);
      }
    }
  }
  Object.defineProperty(KdTree$KdNode.prototype, 'nodeRange', {
    get: function () {
      return this.nodeRange_rt7fdu$_0;
    }
  });
  Object.defineProperty(KdTree$KdNode.prototype, 'children', {
    get: function () {
      return this.children_wv5otg$_0;
    }
  });
  Object.defineProperty(KdTree$KdNode.prototype, 'size', {
    get: function () {
      return this.size_zddesm$_0;
    }
  });
  Object.defineProperty(KdTree$KdNode.prototype, 'items', {
    get: function () {
      return this.$outer.items_0;
    }
  });
  KdTree$KdNode.prototype.contains_uargzz$ = function (item) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (this.isLeaf) {
      tmp$ = this.nodeRange;
      tmp$_0 = tmp$.first;
      tmp$_1 = tmp$.last;
      tmp$_2 = tmp$.step;
      for (var i = tmp$_0; i <= tmp$_1; i += tmp$_2) {
        if (equals(this.items.get_za3lpa$(i), item)) {
          return true;
        }}
      return false;
    } else {
      if (this.children.get_za3lpa$(0).bounds.contains_y2kzbl$(this.$outer.itemAdapter.getMinX_trkh7z$(item), this.$outer.itemAdapter.getMinY_trkh7z$(item), this.$outer.itemAdapter.getMinZ_trkh7z$(item)))
        tmp$_3 = this.children.get_za3lpa$(0).contains_uargzz$(item);
      else if (this.children.get_za3lpa$(1).bounds.contains_y2kzbl$(this.$outer.itemAdapter.getMinX_trkh7z$(item), this.$outer.itemAdapter.getMinY_trkh7z$(item), this.$outer.itemAdapter.getMinZ_trkh7z$(item)))
        tmp$_3 = this.children.get_za3lpa$(1).contains_uargzz$(item);
      else
        tmp$_3 = false;
      return tmp$_3;
    }
  };
  KdTree$KdNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KdNode',
    interfaces: [SpatialTree$Node]
  };
  function KdTree$cmpX$lambda(closure$itemAdapter) {
    return function (a, b) {
      return Kotlin.compareTo(closure$itemAdapter.getMinX_trkh7z$(a), closure$itemAdapter.getMinX_trkh7z$(b));
    };
  }
  function KdTree$cmpY$lambda(closure$itemAdapter) {
    return function (a, b) {
      return Kotlin.compareTo(closure$itemAdapter.getMinY_trkh7z$(a), closure$itemAdapter.getMinY_trkh7z$(b));
    };
  }
  function KdTree$cmpZ$lambda(closure$itemAdapter) {
    return function (a, b) {
      return Kotlin.compareTo(closure$itemAdapter.getMinZ_trkh7z$(a), closure$itemAdapter.getMinZ_trkh7z$(b));
    };
  }
  KdTree.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KdTree',
    interfaces: [SpatialTree]
  };
  function LineString(points) {
    if (points === void 0) {
      points = ArrayList_init_0();
    }this.points_0 = points;
  }
  LineString.prototype.isSingular = function () {
    return this.size <= 1;
  };
  LineString.prototype.length = function () {
    var tmp$;
    var len = 0.0;
    tmp$ = get_lastIndex(this);
    for (var i = 0; i < tmp$; i++) {
      len += this.get_za3lpa$(i).distance_czzhiu$(this.get_za3lpa$(i + 1 | 0));
    }
    return len;
  };
  LineString.prototype.getLengthToIndex_za3lpa$ = function (index) {
    var len = 0.0;
    for (var i = 0; i < index; i++) {
      len += this.get_za3lpa$(i).distance_czzhiu$(this.get_za3lpa$(i + 1 | 0));
    }
    return len;
  };
  LineString.prototype.getLowerIndex_mx4ult$ = function (forDistance) {
    var tmp$;
    var d = forDistance;
    tmp$ = get_lastIndex(this);
    for (var i = 0; i < tmp$; i++) {
      d -= this.get_za3lpa$(i).distance_czzhiu$(this.get_za3lpa$(i + 1 | 0));
      if (d < 0) {
        return i;
      }}
    return get_lastIndex(this) - 1 | 0;
  };
  LineString.prototype.getNearestElement_mx4ult$ = function (forDistance) {
    var tmp$;
    var d = forDistance;
    tmp$ = get_lastIndex(this);
    for (var i = 0; i < tmp$; i++) {
      var l = this.get_za3lpa$(i).distance_czzhiu$(this.get_za3lpa$(i + 1 | 0));
      if (l > d) {
        return l > d * 2 ? this.get_za3lpa$(i) : this.get_za3lpa$(i + 1 | 0);
      }d -= l;
    }
    return last(this);
  };
  LineString.prototype.getNearestPoint_749b8l$ = function (forDistance, result) {
    var tmp$;
    if (forDistance < 0.0) {
      return result.set_czzhiu$(first(this));
    }var d = forDistance;
    tmp$ = get_lastIndex(this);
    for (var i = 0; i < tmp$; i++) {
      var l = this.get_za3lpa$(i).distance_czzhiu$(this.get_za3lpa$(i + 1 | 0));
      if (l > d) {
        return result.set_czzhiu$(this.get_za3lpa$(i + 1 | 0)).subtract_czzhiu$(this.get_za3lpa$(i)).scale_mx4ult$(d / l).add_czzhiu$(this.get_za3lpa$(i));
      }d -= l;
    }
    return result.set_czzhiu$(last(this));
  };
  LineString.prototype.getLowerIndex_swi9mk$ = function (forPoint, startIndex) {
    if (startIndex === void 0)
      startIndex = 0;
    var tmp$;
    var minDist = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    var bestI = startIndex;
    tmp$ = get_lastIndex(this);
    for (var i = 0; i < tmp$; i++) {
      var d = distanceToEdge_0(forPoint, this.get_za3lpa$(i), this.get_za3lpa$(i + 1 | 0));
      if (d < minDist) {
        minDist = d;
        bestI = i;
      }}
    return bestI;
  };
  LineString.prototype.getNearestElement_swi9mk$ = function (forPoint, startIndex) {
    if (startIndex === void 0)
      startIndex = 0;
    var i = this.getLowerIndex_swi9mk$(forPoint, startIndex);
    return this.get_za3lpa$(i).distance_czzhiu$(forPoint) < this.get_za3lpa$(i + 1 | 0).distance_czzhiu$(forPoint) ? this.get_za3lpa$(i) : this.get_za3lpa$(i + 1 | 0);
  };
  LineString.prototype.getNearestPoint_mxoo4y$ = function (forPoint, result, startIndex) {
    if (startIndex === void 0)
      startIndex = 0;
    var lowerI = this.getLowerIndex_swi9mk$(forPoint, startIndex);
    return nearestPointOnEdge_0(forPoint, this.get_za3lpa$(lowerI), this.get_za3lpa$(lowerI + 1 | 0), result);
  };
  Object.defineProperty(LineString.prototype, 'size', {
    get: function () {
      return this.points_0.size;
    }
  });
  LineString.prototype.add_11rb$ = function (element) {
    return this.points_0.add_11rb$(element);
  };
  LineString.prototype.add_wxm5ur$ = function (index, element) {
    return this.points_0.add_wxm5ur$(index, element);
  };
  LineString.prototype.addAll_u57x28$ = function (index, elements) {
    return this.points_0.addAll_u57x28$(index, elements);
  };
  LineString.prototype.addAll_brywnq$ = function (elements) {
    return this.points_0.addAll_brywnq$(elements);
  };
  LineString.prototype.clear = function () {
    return this.points_0.clear();
  };
  LineString.prototype.contains_11rb$ = function (element) {
    return this.points_0.contains_11rb$(element);
  };
  LineString.prototype.containsAll_brywnq$ = function (elements) {
    return this.points_0.containsAll_brywnq$(elements);
  };
  LineString.prototype.get_za3lpa$ = function (index) {
    return this.points_0.get_za3lpa$(index);
  };
  LineString.prototype.indexOf_11rb$ = function (element) {
    return this.points_0.indexOf_11rb$(element);
  };
  LineString.prototype.isEmpty = function () {
    return this.points_0.isEmpty();
  };
  LineString.prototype.iterator = function () {
    return this.points_0.iterator();
  };
  LineString.prototype.lastIndexOf_11rb$ = function (element) {
    return this.points_0.lastIndexOf_11rb$(element);
  };
  LineString.prototype.listIterator = function () {
    return this.points_0.listIterator();
  };
  LineString.prototype.listIterator_za3lpa$ = function (index) {
    return this.points_0.listIterator_za3lpa$(index);
  };
  LineString.prototype.remove_11rb$ = function (element) {
    return this.points_0.remove_11rb$(element);
  };
  LineString.prototype.removeAll_brywnq$ = function (elements) {
    return this.points_0.removeAll_brywnq$(elements);
  };
  LineString.prototype.removeAt_za3lpa$ = function (index) {
    return this.points_0.removeAt_za3lpa$(index);
  };
  LineString.prototype.retainAll_brywnq$ = function (elements) {
    return this.points_0.retainAll_brywnq$(elements);
  };
  LineString.prototype.set_wxm5ur$ = function (index, element) {
    return this.points_0.set_wxm5ur$(index, element);
  };
  LineString.prototype.subList_vux9f0$ = function (fromIndex, toIndex) {
    return this.points_0.subList_vux9f0$(fromIndex, toIndex);
  };
  LineString.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LineString',
    interfaces: [MutableList]
  };
  function Log() {
    Log_instance = this;
    this.DEFAULT_PRINTER = Log$DEFAULT_PRINTER$lambda;
    this.level = Log$Level$DEBUG_getInstance();
    this.printer = this.DEFAULT_PRINTER;
  }
  Log.prototype.tExt_jzryxz$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.tExt_jzryxz$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (src, message) {
      var level = Log$Level.TRACE;
      var tag = Kotlin.getKClassFromExpression(src).simpleName;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }};
  }));
  Log.prototype.t_fkbaij$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.t_fkbaij$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (tag, message) {
      var level = Log$Level.TRACE;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }};
  }));
  Log.prototype.dExt_jzryxz$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.dExt_jzryxz$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (src, message) {
      var level = Log$Level.DEBUG;
      var tag = Kotlin.getKClassFromExpression(src).simpleName;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }};
  }));
  Log.prototype.d_fkbaij$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.d_fkbaij$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (tag, message) {
      var level = Log$Level.DEBUG;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }};
  }));
  Log.prototype.iExt_jzryxz$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.iExt_jzryxz$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (src, message) {
      var level = Log$Level.INFO;
      var tag = Kotlin.getKClassFromExpression(src).simpleName;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }};
  }));
  Log.prototype.i_fkbaij$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.i_fkbaij$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (tag, message) {
      var level = Log$Level.INFO;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }};
  }));
  Log.prototype.wExt_jzryxz$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.wExt_jzryxz$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (src, message) {
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(src).simpleName;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }};
  }));
  Log.prototype.w_fkbaij$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.w_fkbaij$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (tag, message) {
      var level = Log$Level.WARN;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }};
  }));
  Log.prototype.eExt_jzryxz$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.eExt_jzryxz$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (src, message) {
      var level = Log$Level.ERROR;
      var tag = Kotlin.getKClassFromExpression(src).simpleName;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }};
  }));
  Log.prototype.e_fkbaij$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.e_fkbaij$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function (tag, message) {
      var level = Log$Level.ERROR;
      if (level.level >= this.level.level) {
        this.printer(level, tag, message());
      }};
  }));
  Log.prototype.logExt_askb8u$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.logExt_askb8u$', function (level, src, message) {
    var tag = Kotlin.getKClassFromExpression(src).simpleName;
    if (level.level >= this.level.level) {
      this.printer(level, tag, message());
    }});
  Log.prototype.log_f0yxhs$ = defineInlineFunction('kool.de.fabmax.kool.util.Log.log_f0yxhs$', function (level, tag, message) {
    if (level.level >= this.level.level) {
      this.printer(level, tag, message());
    }});
  function Log$Level(name, ordinal, level, indicator) {
    Enum.call(this);
    this.level = level;
    this.indicator = toBoxedChar(indicator);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Log$Level_initFields() {
    Log$Level_initFields = function () {
    };
    Log$Level$TRACE_instance = new Log$Level('TRACE', 0, 0, 84);
    Log$Level$DEBUG_instance = new Log$Level('DEBUG', 1, 1, 68);
    Log$Level$INFO_instance = new Log$Level('INFO', 2, 2, 73);
    Log$Level$WARN_instance = new Log$Level('WARN', 3, 3, 87);
    Log$Level$ERROR_instance = new Log$Level('ERROR', 4, 4, 69);
    Log$Level$OFF_instance = new Log$Level('OFF', 5, 5, 120);
  }
  var Log$Level$TRACE_instance;
  function Log$Level$TRACE_getInstance() {
    Log$Level_initFields();
    return Log$Level$TRACE_instance;
  }
  var Log$Level$DEBUG_instance;
  function Log$Level$DEBUG_getInstance() {
    Log$Level_initFields();
    return Log$Level$DEBUG_instance;
  }
  var Log$Level$INFO_instance;
  function Log$Level$INFO_getInstance() {
    Log$Level_initFields();
    return Log$Level$INFO_instance;
  }
  var Log$Level$WARN_instance;
  function Log$Level$WARN_getInstance() {
    Log$Level_initFields();
    return Log$Level$WARN_instance;
  }
  var Log$Level$ERROR_instance;
  function Log$Level$ERROR_getInstance() {
    Log$Level_initFields();
    return Log$Level$ERROR_instance;
  }
  var Log$Level$OFF_instance;
  function Log$Level$OFF_getInstance() {
    Log$Level_initFields();
    return Log$Level$OFF_instance;
  }
  Log$Level.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Level',
    interfaces: [Enum]
  };
  function Log$Level$values() {
    return [Log$Level$TRACE_getInstance(), Log$Level$DEBUG_getInstance(), Log$Level$INFO_getInstance(), Log$Level$WARN_getInstance(), Log$Level$ERROR_getInstance(), Log$Level$OFF_getInstance()];
  }
  Log$Level.values = Log$Level$values;
  function Log$Level$valueOf(name) {
    switch (name) {
      case 'TRACE':
        return Log$Level$TRACE_getInstance();
      case 'DEBUG':
        return Log$Level$DEBUG_getInstance();
      case 'INFO':
        return Log$Level$INFO_getInstance();
      case 'WARN':
        return Log$Level$WARN_getInstance();
      case 'ERROR':
        return Log$Level$ERROR_getInstance();
      case 'OFF':
        return Log$Level$OFF_getInstance();
      default:throwISE('No enum constant de.fabmax.kool.util.Log.Level.' + name);
    }
  }
  Log$Level.valueOf_61zpoe$ = Log$Level$valueOf;
  function Log$DEFAULT_PRINTER$lambda(lvl, tag, message) {
    println_0(String.fromCharCode(unboxChar(lvl.indicator)) + '/' + toString(tag) + ': ' + message);
    return Unit;
  }
  Log.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Log',
    interfaces: []
  };
  var Log_instance = null;
  function Log_getInstance() {
    if (Log_instance === null) {
      new Log();
    }return Log_instance;
  }
  var logT = defineInlineFunction('kool.de.fabmax.kool.util.logT_hbfas6$', wrapFunction(function () {
    var util = _.de.fabmax.kool.util;
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function ($receiver, message) {
      var $this = util.Log;
      var level = Log$Level.TRACE;
      var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message());
      }};
  }));
  var logD = defineInlineFunction('kool.de.fabmax.kool.util.logD_hbfas6$', wrapFunction(function () {
    var util = _.de.fabmax.kool.util;
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function ($receiver, message) {
      var $this = util.Log;
      var level = Log$Level.DEBUG;
      var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message());
      }};
  }));
  var logI = defineInlineFunction('kool.de.fabmax.kool.util.logI_hbfas6$', wrapFunction(function () {
    var util = _.de.fabmax.kool.util;
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function ($receiver, message) {
      var $this = util.Log;
      var level = Log$Level.INFO;
      var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message());
      }};
  }));
  var logW = defineInlineFunction('kool.de.fabmax.kool.util.logW_hbfas6$', wrapFunction(function () {
    var util = _.de.fabmax.kool.util;
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function ($receiver, message) {
      var $this = util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message());
      }};
  }));
  var logE = defineInlineFunction('kool.de.fabmax.kool.util.logE_hbfas6$', wrapFunction(function () {
    var util = _.de.fabmax.kool.util;
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    return function ($receiver, message) {
      var $this = util.Log;
      var level = Log$Level.ERROR;
      var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message());
      }};
  }));
  function MeshBuilder(geometry) {
    this.geometry = geometry;
    this.transform = new Mat4fStack();
    this.color = Color$Companion_getInstance().BLACK;
    this.vertexModFun = null;
    this.hasNormals_c51zdn$_0 = this.geometry.hasAttribute_nm2vx5$(Attribute$Companion_getInstance().NORMALS);
    this.tmpPos_5ud41y$_0 = MutableVec3f_init();
    this.tmpNrm_5ueby3$_0 = MutableVec3f_init();
    this.tmpUv_b9nk9x$_0 = MutableVec2f_init();
    this.circleProps = new CircleProps();
    this.cubeProps = new CubeProps();
    this.cylinderProps = new CylinderProps();
    this.gridProps = new GridProps();
    this.rectProps = new RectProps();
    this.sphereProps = new SphereProps();
    this.textProps = null;
  }
  MeshBuilder.prototype.vertex_n440gp$$default = function (pos, nrm, uv) {
    var $this = this.geometry;
    var tmp$, tmp$_0, tmp$_1;
    $this.checkBufferSizes_za3lpa$();
    tmp$ = $this.vertexSizeF;
    for (var i = 1; i <= tmp$; i++) {
      $this.dataF.plusAssign_mx4ult$(0.0);
    }
    tmp$_0 = $this.vertexSizeI;
    for (var i_0 = 1; i_0 <= tmp$_0; i_0++) {
      $this.dataI.plusAssign_za3lpa$(0);
    }
    $this.vertexIt.index = (tmp$_1 = $this.numVertices, $this.numVertices = tmp$_1 + 1 | 0, tmp$_1);
    var $receiver = $this.vertexIt;
    var tmp$_2;
    $receiver.position.set_czzhiu$(pos);
    $receiver.normal.set_czzhiu$(nrm);
    $receiver.texCoord.set_czzhjp$(uv);
    $receiver.color.set_d7aj7k$(this.color);
    this.transform.transform_w1lst9$($receiver.position);
    if (this.hasNormals_c51zdn$_0 && $receiver.normal.sqrLength() !== 0.0) {
      this.transform.transform_w1lst9$($receiver.normal, 0.0);
      $receiver.normal.norm();
    }(tmp$_2 = this.vertexModFun) != null ? tmp$_2($receiver) : null;
    $this.bounds.add_czzhiu$($this.vertexIt.position);
    $this.hasChanged = true;
    return $this.numVertices - 1 | 0;
  };
  MeshBuilder.prototype.vertex_n440gp$ = function (pos, nrm, uv, callback$default) {
    if (uv === void 0)
      uv = Vec2f$Companion_getInstance().ZERO;
    return callback$default ? callback$default(pos, nrm, uv) : this.vertex_n440gp$$default(pos, nrm, uv);
  };
  MeshBuilder.prototype.withTransform_v2sixm$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.withTransform_v2sixm$', function (block) {
    this.transform.push();
    block(this);
    this.transform.pop();
  });
  MeshBuilder.prototype.withColor_2f8443$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.withColor_2f8443$', function (color, block) {
    var c = this.color;
    if (color != null) {
      this.color = color;
    }block(this);
    this.color = c;
  });
  MeshBuilder.prototype.clear = function () {
    this.geometry.clear();
    this.identity();
  };
  MeshBuilder.prototype.identity = function () {
    return this.transform.setIdentity();
  };
  MeshBuilder.prototype.translate_czzhiu$ = function (t) {
    return this.transform.translate_y2kzbl$(t.x, t.y, t.z);
  };
  MeshBuilder.prototype.translate_y2kzbl$ = function (x, y, z) {
    return this.transform.translate_y2kzbl$(x, y, z);
  };
  MeshBuilder.prototype.rotate_ad55pp$ = function (angleDeg, axis) {
    return this.transform.rotate_ad55pp$(angleDeg, axis);
  };
  MeshBuilder.prototype.rotate_7b5o5w$ = function (angleDeg, axX, axY, axZ) {
    return this.transform.rotate_7b5o5w$(angleDeg, axX, axY, axZ);
  };
  MeshBuilder.prototype.scale_y2kzbl$ = function (x, y, z) {
    return this.transform.scale_y2kzbl$(x, y, z);
  };
  MeshBuilder.prototype.setCoordSystem_xq1mqt$ = function (origin, right, up, top) {
    if (top === void 0)
      top = null;
    var topV = top;
    if (topV == null) {
      topV = cross(right, up);
    }this.transform.setIdentity();
    this.transform.set_n0b4r3$(0, 0, right.x);
    this.transform.set_n0b4r3$(1, 0, right.y);
    this.transform.set_n0b4r3$(2, 0, right.z);
    this.transform.set_n0b4r3$(0, 1, up.x);
    this.transform.set_n0b4r3$(1, 1, up.y);
    this.transform.set_n0b4r3$(2, 1, up.z);
    this.transform.set_n0b4r3$(0, 2, topV.x);
    this.transform.set_n0b4r3$(1, 2, topV.y);
    this.transform.set_n0b4r3$(2, 2, topV.z);
    this.transform.set_n0b4r3$(0, 3, origin.x);
    this.transform.set_n0b4r3$(1, 3, origin.y);
    this.transform.set_n0b4r3$(2, 3, origin.z);
  };
  MeshBuilder.prototype.circle_5yji8k$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.circle_5yji8k$', function (props) {
    props(this.circleProps.defaults());
    this.circle_59f34t$(this.circleProps);
  });
  MeshBuilder.prototype.circle_59f34t$ = function (props) {
    var tmp$;
    var i1 = 0;
    var iCenter = this.vertex_n440gp$(props.center, Vec3f$Companion_getInstance().Z_AXIS, props.uvCenter);
    tmp$ = props.steps;
    for (var i = 0; i <= tmp$; i++) {
      var ang = (props.startDeg + props.sweepDeg * i / props.steps) * package$math.DEG_2_RAD;
      var cos = Math_0.cos(ang);
      var sin = Math_0.sin(ang);
      var px = props.center.x + props.radius * cos;
      var py = props.center.y + props.radius * sin;
      this.tmpUv_b9nk9x$_0.set_dleff0$(cos, -sin).scale_mx4ult$(props.uvRadius).add_czzhjp$(props.uvCenter);
      var idx = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(px, py, props.center.z), Vec3f$Companion_getInstance().Z_AXIS, this.tmpUv_b9nk9x$_0);
      if (i > 0) {
        this.geometry.addTriIndices_qt1dr2$(iCenter, i1, idx);
      }i1 = idx;
    }
  };
  MeshBuilder.prototype.uvSphere_ybunu9$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.uvSphere_ybunu9$', function (props) {
    props(this.sphereProps.uvDefaults());
    this.uvSphere_mojs8w$(this.sphereProps);
  });
  MeshBuilder.prototype.uvSphere_mojs8w$ = function (props) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var a = props.steps / 2 | 0;
    var steps = Math_0.max(a, 4);
    var prevIndices = new Int32Array((steps * 2 | 0) + 1 | 0);
    var rowIndices = new Int32Array((steps * 2 | 0) + 1 | 0);
    var theta = math.PI * (steps - 1 | 0) / steps;
    var x = theta;
    var r = Math_0.sin(x) * props.radius;
    var x_0 = theta;
    var y = Math_0.cos(x_0) * props.radius;
    tmp$ = steps * 2 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var phi = math.PI * i / steps;
      var x_1 = -phi;
      var x_2 = Math_0.cos(x_1) * r;
      var x_3 = -phi;
      var z = Math_0.sin(x_3) * r;
      var uv = props.texCoordGenerator(theta, phi);
      rowIndices[i] = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(x_2, y, z).add_czzhiu$(props.center), this.tmpNrm_5ueby3$_0.set_y2kzbl$(x_2, y, z).scale_mx4ult$(1.0 / props.radius), uv);
      if (i > 0) {
        uv = props.texCoordGenerator(math.PI, phi);
        this.tmpPos_5ud41y$_0.set_y2kzbl$(props.center.x, props.center.y - props.radius, props.center.z);
        var iCenter = this.vertex_n440gp$(this.tmpPos_5ud41y$_0, Vec3f$Companion_getInstance().NEG_Y_AXIS, uv);
        this.geometry.addTriIndices_qt1dr2$(iCenter, rowIndices[i], rowIndices[i - 1 | 0]);
      }}
    tmp$_0 = steps - 1 | 0;
    for (var row = 2; row <= tmp$_0; row++) {
      var tmp = prevIndices;
      prevIndices = rowIndices;
      rowIndices = tmp;
      theta = math.PI * (steps - row | 0) / steps;
      var x_4 = theta;
      r = Math_0.sin(x_4) * props.radius;
      var x_5 = theta;
      y = Math_0.cos(x_5) * props.radius;
      tmp$_1 = steps * 2 | 0;
      for (var i_0 = 0; i_0 <= tmp$_1; i_0++) {
        var phi_0 = math.PI * i_0 / steps;
        var x_6 = -phi_0;
        var x_7 = Math_0.cos(x_6) * r;
        var x_8 = -phi_0;
        var z_0 = Math_0.sin(x_8) * r;
        var uv_0 = props.texCoordGenerator(theta, phi_0);
        rowIndices[i_0] = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(x_7, y, z_0).add_czzhiu$(props.center), this.tmpNrm_5ueby3$_0.set_y2kzbl$(x_7, y, z_0).scale_mx4ult$(1.0 / props.radius), uv_0);
        if (i_0 > 0) {
          this.geometry.addTriIndices_qt1dr2$(prevIndices[i_0 - 1 | 0], rowIndices[i_0], rowIndices[i_0 - 1 | 0]);
          this.geometry.addTriIndices_qt1dr2$(prevIndices[i_0 - 1 | 0], prevIndices[i_0], rowIndices[i_0]);
        }}
    }
    tmp$_2 = steps * 2 | 0;
    for (var i_1 = 1; i_1 <= tmp$_2; i_1++) {
      var uv_1 = props.texCoordGenerator(0.0, math.PI * i_1 / steps);
      var iCenter_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.center.x, props.center.y + props.radius, props.center.z), Vec3f$Companion_getInstance().Y_AXIS, uv_1);
      this.geometry.addTriIndices_qt1dr2$(iCenter_0, rowIndices[i_1 - 1 | 0], rowIndices[i_1]);
    }
  };
  MeshBuilder.prototype.icoSphere_ybunu9$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.icoSphere_ybunu9$', function (props) {
    props(this.sphereProps.icoDefaults());
    this.icoSphere_mojs8w$(this.sphereProps);
  });
  function MeshBuilder$icoSphere$getMidVertex(closure$midVerts, closure$verts) {
    return function (fromIdx, toIdx) {
      var key = Kotlin.Long.fromInt(Math_0.min(fromIdx, toIdx)).shiftLeft(32).add(Kotlin.Long.fromInt(Math_0.max(fromIdx, toIdx)));
      var $receiver = closure$midVerts;
      var tmp$;
      var value = $receiver.get_11rb$(key);
      if (value == null) {
        var closure$verts_0 = closure$verts;
        var insertIdx = closure$verts_0.size;
        var element = MutableVec3f_init_1(closure$verts_0.get_za3lpa$(fromIdx)).add_czzhiu$(closure$verts_0.get_za3lpa$(toIdx)).norm();
        closure$verts_0.add_11rb$(element);
        var answer = insertIdx;
        $receiver.put_xwzc9p$(key, answer);
        tmp$ = answer;
      } else {
        tmp$ = value;
      }
      return tmp$;
    };
  }
  MeshBuilder.prototype.icoSphere_mojs8w$ = function (props) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var x = 0.5257311;
    var z = 0.8506508;
    var n = 0.0;
    var verts = mutableListOf([new Vec3f(-x, n, z), new Vec3f(x, n, z), new Vec3f(-x, n, -z), new Vec3f(x, n, -z), new Vec3f(n, z, x), new Vec3f(n, z, -x), new Vec3f(n, -z, x), new Vec3f(n, -z, -x), new Vec3f(z, x, n), new Vec3f(-z, x, n), new Vec3f(z, -x, n), new Vec3f(-z, -x, n)]);
    var faces = mutableListOf([4, 0, 1, 9, 0, 4, 5, 9, 4, 5, 4, 8, 8, 4, 1, 10, 8, 1, 3, 8, 10, 3, 5, 8, 2, 5, 3, 7, 2, 3, 10, 7, 3, 6, 7, 10, 11, 7, 6, 0, 11, 6, 1, 0, 6, 1, 6, 10, 0, 9, 11, 11, 9, 2, 2, 9, 5, 2, 7, 11]);
    var midVerts = LinkedHashMap_init();
    var getMidVertex = MeshBuilder$icoSphere$getMidVertex(midVerts, verts);
    if (props.steps <= 8) {
      tmp$ = props.steps;
    } else {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'clamping too large number of iterations for ico-sphere (' + props.steps + ') to 8');
      }tmp$ = 8;
    }
    var its = tmp$;
    for (var i = 0; i < its; i++) {
      var newFaces = ArrayList_init_0();
      tmp$_0 = step(get_indices(faces), 3).iterator();
      while (tmp$_0.hasNext()) {
        var j = tmp$_0.next();
        var v1 = faces.get_za3lpa$(j);
        var v2 = faces.get_za3lpa$(j + 1 | 0);
        var v3 = faces.get_za3lpa$(j + 2 | 0);
        var a = getMidVertex(v1, v2);
        var b = getMidVertex(v2, v3);
        var c = getMidVertex(v3, v1);
        newFaces.addAll_brywnq$(listOf([v1, a, c]));
        newFaces.addAll_brywnq$(listOf([v2, b, a]));
        newFaces.addAll_brywnq$(listOf([v3, c, b]));
        newFaces.addAll_brywnq$(listOf([a, b, c]));
      }
      faces = newFaces;
    }
    var pif = math.PI;
    var destination = ArrayList_init(collectionSizeOrDefault(verts, 10));
    var tmp$_4;
    tmp$_4 = verts.iterator();
    while (tmp$_4.hasNext()) {
      var item = tmp$_4.next();
      var tmp$_5 = destination.add_11rb$;
      var y = item.x;
      var x_0 = item.z;
      var tmp$_6 = (Math_0.atan2(y, x_0) + pif) / (2 * pif);
      var x_1 = item.y;
      tmp$_5.call(destination, to(item, new Vec2f(tmp$_6, Math_0.acos(x_1) / pif)));
    }
    var uvVerts = toMutableList(destination);
    tmp$_1 = step(get_indices(faces), 3).iterator();
    while (tmp$_1.hasNext()) {
      var i_0 = tmp$_1.next();
      for (var j_0 = 0; j_0 <= 2; j_0++) {
        var i1 = i_0 + j_0 | 0;
        var i2 = i_0 + (j_0 + 1 | 0) % 3 | 0;
        var i3 = i_0 + (j_0 + 2 | 0) % 3 | 0;
        var u1 = uvVerts.get_za3lpa$(faces.get_za3lpa$(i1)).second.x;
        var u2 = uvVerts.get_za3lpa$(faces.get_za3lpa$(i2)).second.x;
        var u3 = uvVerts.get_za3lpa$(faces.get_za3lpa$(i3)).second.x;
        if (u1 - u2 > 0.5 && u1 - u3 > 0.5) {
          var dv1 = Vec3f_init_0(uvVerts.get_za3lpa$(faces.get_za3lpa$(i1)).first);
          var $receiver = MutableVec2f_init_1(uvVerts.get_za3lpa$(faces.get_za3lpa$(i1)).second);
          $receiver.x = $receiver.x - 1.0;
          var du1 = $receiver;
          faces.set_wxm5ur$(i1, uvVerts.size);
          var element = to(dv1, du1);
          uvVerts.add_11rb$(element);
        } else if (u2 - u1 > 0.5 && u3 - u1 > 0.5) {
          var dv1_0 = Vec3f_init_0(uvVerts.get_za3lpa$(faces.get_za3lpa$(i1)).first);
          var $receiver_0 = MutableVec2f_init_1(uvVerts.get_za3lpa$(faces.get_za3lpa$(i1)).second);
          $receiver_0.x = $receiver_0.x + 1.0;
          var du1_0 = $receiver_0;
          faces.set_wxm5ur$(i1, uvVerts.size);
          var element_0 = to(dv1_0, du1_0);
          uvVerts.add_11rb$(element_0);
        }}
    }
    var nrm = MutableVec3f_init();
    var pos = MutableVec3f_init();
    var i0 = this.geometry.numVertices;
    tmp$_2 = uvVerts.iterator();
    while (tmp$_2.hasNext()) {
      var v = tmp$_2.next();
      nrm.set_czzhiu$(v.first).norm();
      pos.set_czzhiu$(nrm).scale_mx4ult$(props.radius).add_czzhiu$(props.center);
      var uv = props.texCoordGenerator(v.second.y * pif, v.second.x * 2 * pif);
      this.vertex_n440gp$(pos, nrm, uv);
    }
    tmp$_3 = step(get_indices(faces), 3).iterator();
    while (tmp$_3.hasNext()) {
      var i_1 = tmp$_3.next();
      this.geometry.addTriIndices_qt1dr2$(i0 + faces.get_za3lpa$(i_1) | 0, i0 + faces.get_za3lpa$(1 + i_1 | 0) | 0, i0 + faces.get_za3lpa$(2 + i_1 | 0) | 0);
    }
  };
  MeshBuilder.prototype.rect_6h1xlk$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.rect_6h1xlk$', function (props) {
    props(this.rectProps.defaults());
    this.rect_e5k3t5$(this.rectProps);
  });
  MeshBuilder.prototype.rect_e5k3t5$ = function (props) {
    props.fixNegativeSize();
    if (props.cornerRadius === 0.0) {
      var i0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y, props.origin.z), Vec3f$Companion_getInstance().Z_AXIS, props.texCoordLowerLeft);
      var i1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y, props.origin.z), Vec3f$Companion_getInstance().Z_AXIS, props.texCoordLowerRight);
      var i2 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y + props.size.y, props.origin.z), Vec3f$Companion_getInstance().Z_AXIS, props.texCoordUpperRight);
      var i3 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y + props.size.y, props.origin.z), Vec3f$Companion_getInstance().Z_AXIS, props.texCoordUpperLeft);
      this.geometry.addTriIndices_qt1dr2$(i0, i1, i2);
      this.geometry.addTriIndices_qt1dr2$(i0, i2, i3);
    } else {
      var x = props.origin.x;
      var y = props.origin.y;
      var z = props.origin.z;
      var w = props.size.x;
      var h = props.size.y;
      var xI = x + props.cornerRadius;
      var yI = y + props.cornerRadius;
      var wI = w - props.cornerRadius * 2;
      var hI = h - props.cornerRadius * 2;
      var nrm = Vec3f$Companion_getInstance().Z_AXIS;
      var uI = (props.texCoordUpperRight.x - props.texCoordUpperLeft.x) * props.cornerRadius / w;
      var vI = (props.texCoordUpperRight.y - props.texCoordLowerRight.y) * props.cornerRadius / h;
      if (hI > 0) {
        var i0_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(x, yI, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(0.0, vI).add_czzhjp$(props.texCoordLowerLeft));
        var i1_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(x + w, yI, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(0.0, vI).add_czzhjp$(props.texCoordLowerRight));
        var i2_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(x + w, yI + hI, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(0.0, -vI).add_czzhjp$(props.texCoordUpperRight));
        var i3_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(x, yI + hI, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(0.0, -vI).add_czzhjp$(props.texCoordUpperLeft));
        this.geometry.addTriIndices_qt1dr2$(i0_0, i1_0, i2_0);
        this.geometry.addTriIndices_qt1dr2$(i0_0, i2_0, i3_0);
      }if (wI > 0) {
        var i0_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(xI, y, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(uI, 0.0).add_czzhjp$(props.texCoordLowerLeft));
        var i1_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(xI + wI, y, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(-uI, 0.0).add_czzhjp$(props.texCoordLowerRight));
        var i2_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(xI + wI, yI, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(-uI, vI).add_czzhjp$(props.texCoordLowerRight));
        var i3_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(xI, yI, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(uI, vI).add_czzhjp$(props.texCoordLowerLeft));
        this.geometry.addTriIndices_qt1dr2$(i0_1, i1_1, i2_1);
        this.geometry.addTriIndices_qt1dr2$(i0_1, i2_1, i3_1);
        i0_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(xI, yI + hI, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(uI, -vI).add_czzhjp$(props.texCoordUpperLeft));
        i1_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(xI + wI, yI + hI, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(-uI, -vI).add_czzhjp$(props.texCoordUpperRight));
        i2_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(xI + wI, y + h, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(-uI, 0.0).add_czzhjp$(props.texCoordUpperRight));
        i3_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(xI, y + h, z), nrm, this.tmpUv_b9nk9x$_0.set_dleff0$(uI, 0.0).add_czzhjp$(props.texCoordUpperLeft));
        this.geometry.addTriIndices_qt1dr2$(i0_1, i1_1, i2_1);
        this.geometry.addTriIndices_qt1dr2$(i0_1, i2_1, i3_1);
      }var $receiver = this.circleProps.defaults();
      $receiver.center.set_y2kzbl$(xI + wI, yI + hI, z);
      $receiver.startDeg = 0.0;
      $receiver.sweepDeg = 90.0;
      $receiver.radius = props.cornerRadius;
      $receiver.steps = props.cornerSteps;
      $receiver.uvCenter.set_dleff0$(-uI, -vI).add_czzhjp$(props.texCoordUpperRight);
      $receiver.uvRadius = uI;
      this.circle_59f34t$(this.circleProps);
      var $receiver_0 = this.circleProps.defaults();
      $receiver_0.center.set_y2kzbl$(xI, yI + hI, z);
      $receiver_0.startDeg = 90.0;
      $receiver_0.sweepDeg = 90.0;
      $receiver_0.radius = props.cornerRadius;
      $receiver_0.steps = props.cornerSteps;
      $receiver_0.uvCenter.set_dleff0$(uI, -vI).add_czzhjp$(props.texCoordUpperLeft);
      $receiver_0.uvRadius = uI;
      this.circle_59f34t$(this.circleProps);
      var $receiver_1 = this.circleProps.defaults();
      $receiver_1.center.set_y2kzbl$(xI, yI, z);
      $receiver_1.startDeg = 180.0;
      $receiver_1.sweepDeg = 90.0;
      $receiver_1.radius = props.cornerRadius;
      $receiver_1.steps = props.cornerSteps;
      $receiver_1.uvCenter.set_dleff0$(uI, vI).add_czzhjp$(props.texCoordLowerLeft);
      $receiver_1.uvRadius = uI;
      this.circle_59f34t$(this.circleProps);
      var $receiver_2 = this.circleProps.defaults();
      $receiver_2.center.set_y2kzbl$(xI + wI, yI, z);
      $receiver_2.startDeg = 270.0;
      $receiver_2.sweepDeg = 90.0;
      $receiver_2.radius = props.cornerRadius;
      $receiver_2.steps = props.cornerSteps;
      $receiver_2.uvCenter.set_dleff0$(-uI, vI).add_czzhjp$(props.texCoordLowerRight);
      $receiver_2.uvRadius = uI;
      this.circle_59f34t$(this.circleProps);
    }
  };
  MeshBuilder.prototype.line_uy9yj5$ = function (pt1, pt2, width) {
    this.line_s2l86p$(pt1.x, pt1.y, pt2.x, pt2.y, width);
  };
  MeshBuilder.prototype.line_s2l86p$ = function (x1, y1, x2, y2, width) {
    var dx = x2 - x1;
    var dy = y2 - y1;
    var x = dx * dx + dy * dy;
    var len = Math_0.sqrt(x);
    var addX = width * 0.25 * dx / len;
    var addY = width * 0.25 * dy / len;
    dx += addX + addX;
    dy += addY + addY;
    len += width * 0.5;
    var dxu = dx / len * width / 2;
    var dyu = dy / len * width / 2;
    var qx0 = x1 - addX + dyu;
    var qy0 = y1 - addY - dxu;
    var qx1 = x2 + addX + dyu;
    var qy1 = y2 + addY - dxu;
    var qx2 = x2 + addX - dyu;
    var qy2 = y2 + addY + dxu;
    var qx3 = x1 - addX - dyu;
    var qy3 = y1 - addY + dxu;
    var i0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(qx0, qy0, 0.0), Vec3f$Companion_getInstance().Z_AXIS);
    var i1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(qx1, qy1, 0.0), Vec3f$Companion_getInstance().Z_AXIS);
    var i2 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(qx2, qy2, 0.0), Vec3f$Companion_getInstance().Z_AXIS);
    var i3 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(qx3, qy3, 0.0), Vec3f$Companion_getInstance().Z_AXIS);
    this.geometry.addTriIndices_qt1dr2$(i0, i1, i2);
    this.geometry.addTriIndices_qt1dr2$(i0, i2, i3);
  };
  MeshBuilder.prototype.lineArc_b3rrsf$ = function (centerX, centerY, radius, startDeg, sweepDeg, width, resolution) {
    if (resolution === void 0)
      resolution = 3.0;
    var b = numberToInt(round(Math_0.abs(sweepDeg) / resolution));
    var steps = Math_0.max(1, b);
    var step = sweepDeg / steps;
    var startRad = startDeg * package$math.DEG_2_RAD;
    var stepRad = step * package$math.DEG_2_RAD;
    for (var i = 0; i < steps; i++) {
      var a0 = startRad + stepRad * i;
      var a1 = a0 + stepRad;
      var x0 = centerX + Math_0.cos(a0) * radius;
      var y0 = centerY + Math_0.sin(a0) * radius;
      var x1 = centerX + Math_0.cos(a1) * radius;
      var y1 = centerY + Math_0.sin(a1) * radius;
      this.line_s2l86p$(x0, y0, x1, y1, width);
    }
  };
  MeshBuilder.prototype.cube_xdlx95$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.cube_xdlx95$', function (props) {
    props(this.cubeProps.defaults());
    this.cube_lhbb6w$(this.cubeProps);
  });
  MeshBuilder.prototype.cube_lhbb6w$ = function (props) {
    props.fixNegativeSize();
    var color = props.frontColor;
    var c = this.color;
    if (color != null) {
      this.color = color;
    }var i0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().Z_AXIS, new Vec2f(0.0, 1.0));
    var i1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().Z_AXIS, new Vec2f(1.0, 1.0));
    var i2 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y + props.size.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().Z_AXIS, new Vec2f(1.0, 0.0));
    var i3 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y + props.size.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().Z_AXIS, new Vec2f(0.0, 0.0));
    this.geometry.addTriIndices_qt1dr2$(i0, i1, i2);
    this.geometry.addTriIndices_qt1dr2$(i0, i2, i3);
    this.color = c;
    var color_0 = props.rightColor;
    var c_0 = this.color;
    if (color_0 != null) {
      this.color = color_0;
    }var i0_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y, props.origin.z), Vec3f$Companion_getInstance().X_AXIS, new Vec2f(1.0, 1.0));
    var i1_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y + props.size.y, props.origin.z), Vec3f$Companion_getInstance().X_AXIS, new Vec2f(1.0, 0.0));
    var i2_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y + props.size.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().X_AXIS, new Vec2f(0.0, 0.0));
    var i3_0 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().X_AXIS, new Vec2f(0.0, 1.0));
    this.geometry.addTriIndices_qt1dr2$(i0_0, i1_0, i2_0);
    this.geometry.addTriIndices_qt1dr2$(i0_0, i2_0, i3_0);
    this.color = c_0;
    var color_1 = props.backColor;
    var c_1 = this.color;
    if (color_1 != null) {
      this.color = color_1;
    }var i0_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y + props.size.y, props.origin.z), Vec3f$Companion_getInstance().NEG_Z_AXIS, new Vec2f(1.0, 0.0));
    var i1_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y + props.size.y, props.origin.z), Vec3f$Companion_getInstance().NEG_Z_AXIS, new Vec2f(0.0, 0.0));
    var i2_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y, props.origin.z), Vec3f$Companion_getInstance().NEG_Z_AXIS, new Vec2f(0.0, 1.0));
    var i3_1 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y, props.origin.z), Vec3f$Companion_getInstance().NEG_Z_AXIS, new Vec2f(1.0, 1.0));
    this.geometry.addTriIndices_qt1dr2$(i0_1, i1_1, i2_1);
    this.geometry.addTriIndices_qt1dr2$(i0_1, i2_1, i3_1);
    this.color = c_1;
    var color_2 = props.leftColor;
    var c_2 = this.color;
    if (color_2 != null) {
      this.color = color_2;
    }var i0_2 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().NEG_X_AXIS, new Vec2f(1.0, 1.0));
    var i1_2 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y + props.size.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().NEG_X_AXIS, new Vec2f(1.0, 0.0));
    var i2_2 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y + props.size.y, props.origin.z), Vec3f$Companion_getInstance().NEG_X_AXIS, new Vec2f(0.0, 0.0));
    var i3_2 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y, props.origin.z), Vec3f$Companion_getInstance().NEG_X_AXIS, new Vec2f(0.0, 1.0));
    this.geometry.addTriIndices_qt1dr2$(i0_2, i1_2, i2_2);
    this.geometry.addTriIndices_qt1dr2$(i0_2, i2_2, i3_2);
    this.color = c_2;
    var color_3 = props.topColor;
    var c_3 = this.color;
    if (color_3 != null) {
      this.color = color_3;
    }var i0_3 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y + props.size.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().Y_AXIS, new Vec2f(0.0, 1.0));
    var i1_3 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y + props.size.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().Y_AXIS, new Vec2f(1.0, 1.0));
    var i2_3 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y + props.size.y, props.origin.z), Vec3f$Companion_getInstance().Y_AXIS, new Vec2f(1.0, 0.0));
    var i3_3 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y + props.size.y, props.origin.z), Vec3f$Companion_getInstance().Y_AXIS, new Vec2f(0.0, 0.0));
    this.geometry.addTriIndices_qt1dr2$(i0_3, i1_3, i2_3);
    this.geometry.addTriIndices_qt1dr2$(i0_3, i2_3, i3_3);
    this.color = c_3;
    var color_4 = props.bottomColor;
    var c_4 = this.color;
    if (color_4 != null) {
      this.color = color_4;
    }var i0_4 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y, props.origin.z), Vec3f$Companion_getInstance().NEG_Y_AXIS, new Vec2f(0.0, 1.0));
    var i1_4 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y, props.origin.z), Vec3f$Companion_getInstance().NEG_Y_AXIS, new Vec2f(1.0, 1.0));
    var i2_4 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x + props.size.x, props.origin.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().NEG_Y_AXIS, new Vec2f(1.0, 0.0));
    var i3_4 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(props.origin.x, props.origin.y, props.origin.z + props.size.z), Vec3f$Companion_getInstance().NEG_Y_AXIS, new Vec2f(0.0, 0.0));
    this.geometry.addTriIndices_qt1dr2$(i0_4, i1_4, i2_4);
    this.geometry.addTriIndices_qt1dr2$(i0_4, i2_4, i3_4);
    this.color = c_4;
  };
  MeshBuilder.prototype.cylinder_z0gg86$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.cylinder_z0gg86$', function (props) {
    props(this.cylinderProps.defaults());
    this.cylinder_tnt2h$(this.cylinderProps);
  });
  MeshBuilder.prototype.cylinder_tnt2h$ = function (props) {
    var tmp$;
    props.fixNegativeSize();
    if (props.bottomFill) {
      this.transform.push();
      this.translate_czzhiu$(props.origin);
      this.rotate_ad55pp$(90.0, Vec3f$Companion_getInstance().X_AXIS);
      var $receiver = this.circleProps.defaults();
      $receiver.steps = props.steps;
      $receiver.radius = props.bottomRadius;
      this.circle_59f34t$(this.circleProps);
      this.transform.pop();
    }if (props.topFill) {
      this.transform.push();
      this.translate_y2kzbl$(props.origin.x, props.origin.y + props.height, props.origin.z);
      this.rotate_ad55pp$(-90.0, Vec3f$Companion_getInstance().X_AXIS);
      var $receiver_0 = this.circleProps.defaults();
      $receiver_0.steps = props.steps;
      $receiver_0.radius = props.topRadius;
      this.circle_59f34t$(this.circleProps);
      this.transform.pop();
    }var dr = props.bottomRadius - props.topRadius;
    var x = dr * dr + props.height * props.height;
    var x_0 = dr / Math_0.sqrt(x);
    var nrmAng = 90.0 - Math_0.acos(x_0) * package$math.RAD_2_DEG;
    var i0 = 0;
    var i1 = 0;
    tmp$ = props.steps;
    for (var i = 0; i <= tmp$; i++) {
      var x_1 = i * math.PI * 2 / props.steps;
      var c = Math_0.cos(x_1);
      var x_2 = i * math.PI * 2 / props.steps;
      var s = Math_0.sin(x_2);
      var px2 = props.origin.x + props.bottomRadius * c;
      var pz2 = props.origin.z + props.bottomRadius * s;
      var px3 = props.origin.x + props.topRadius * c;
      var pz3 = props.origin.z + props.topRadius * s;
      this.tmpNrm_5ueby3$_0.set_y2kzbl$(c, 0.0, s).rotate_7b5o5w$(nrmAng, s, 0.0, c);
      var i2 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(px2, props.origin.y, pz2), this.tmpNrm_5ueby3$_0);
      var i3 = this.vertex_n440gp$(this.tmpPos_5ud41y$_0.set_y2kzbl$(px3, props.origin.y + props.height, pz3), this.tmpNrm_5ueby3$_0);
      if (i > 0) {
        this.geometry.addTriIndices_qt1dr2$(i0, i1, i2);
        this.geometry.addTriIndices_qt1dr2$(i1, i3, i2);
      }i0 = i2;
      i1 = i3;
    }
  };
  MeshBuilder.prototype.grid_vs3byi$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.grid_vs3byi$', function (props) {
    props(this.gridProps.defaults());
    this.grid_gtbnl3$(this.gridProps);
  });
  MeshBuilder.prototype.grid_gtbnl3$ = function (props) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var bx = -props.sizeX / 2;
    var by = -props.sizeY / 2;
    var sx = props.sizeX / props.stepsX;
    var sy = props.sizeY / props.stepsY;
    var nx = props.stepsX + 1 | 0;
    props.xDir.cross_2gj7b4$(props.yDir, this.tmpNrm_5ueby3$_0).norm();
    tmp$ = props.stepsY;
    for (var y = 0; y <= tmp$; y++) {
      tmp$_0 = props.stepsX;
      for (var x = 0; x <= tmp$_0; x++) {
        var px = bx + x * sx;
        var py = by + y * sy;
        var h = props.heightFun(x, y);
        this.tmpPos_5ud41y$_0.set_czzhiu$(props.center);
        this.tmpPos_5ud41y$_0.x = this.tmpPos_5ud41y$_0.x + (props.xDir.x * px + props.yDir.x * py + this.tmpNrm_5ueby3$_0.x * h);
        this.tmpPos_5ud41y$_0.y = this.tmpPos_5ud41y$_0.y + (props.xDir.y * px + props.yDir.y * py + this.tmpNrm_5ueby3$_0.y * h);
        this.tmpPos_5ud41y$_0.z = this.tmpPos_5ud41y$_0.z + (props.xDir.z * px + props.yDir.z * py + this.tmpNrm_5ueby3$_0.z * h);
        var idx = this.vertex_n440gp$(this.tmpPos_5ud41y$_0, Vec3f$Companion_getInstance().ZERO);
        if (x > 0 && y > 0) {
          if (x % 2 === y % 2) {
            this.geometry.addTriIndices_qt1dr2$(idx - nx - 1 | 0, idx, idx - 1 | 0);
            this.geometry.addTriIndices_qt1dr2$(idx - nx | 0, idx, idx - nx - 1 | 0);
          } else {
            this.geometry.addTriIndices_qt1dr2$(idx - nx | 0, idx, idx - 1 | 0);
            this.geometry.addTriIndices_qt1dr2$(idx - nx | 0, idx - 1 | 0, idx - nx - 1 | 0);
          }
        }}
    }
    var iTri = this.geometry.numIndices - (Kotlin.imul(props.stepsX, props.stepsY) * 6 | 0) | 0;
    var e1 = MutableVec3f_init();
    var e2 = MutableVec3f_init();
    var v1 = this.geometry.get_za3lpa$(0);
    var v2 = this.geometry.get_za3lpa$(0);
    var v3 = this.geometry.get_za3lpa$(0);
    tmp$_1 = this.geometry.numIndices;
    for (var i = iTri; i < tmp$_1; i += 3) {
      v1.index = this.geometry.indices.get_za3lpa$(i);
      v2.index = this.geometry.indices.get_za3lpa$(i + 1 | 0);
      v3.index = this.geometry.indices.get_za3lpa$(i + 2 | 0);
      v2.position.subtract_2gj7b4$(v1.position, e1).norm();
      v3.position.subtract_2gj7b4$(v1.position, e2).norm();
      e1.cross_2gj7b4$(e2, this.tmpNrm_5ueby3$_0).norm();
      v1.normal.add_czzhiu$(this.tmpNrm_5ueby3$_0);
      v2.normal.add_czzhiu$(this.tmpNrm_5ueby3$_0);
      v3.normal.add_czzhiu$(this.tmpNrm_5ueby3$_0);
    }
    var iVert = this.geometry.numVertices - Kotlin.imul(props.stepsX + 1 | 0, props.stepsY + 1 | 0) | 0;
    tmp$_2 = this.geometry.numVertices;
    for (var i_0 = iVert; i_0 < tmp$_2; i_0++) {
      v1.index = i_0;
      v1.normal.norm();
    }
  };
  MeshBuilder.prototype.geometry_ejqx55$ = function (geometry, keepVertexColor) {
    if (keepVertexColor === void 0)
      keepVertexColor = false;
    var tmp$;
    if (geometry.primitiveType === PrimitiveType$TRIANGLES_getInstance()) {
      var i0 = this.geometry.numVertices;
      var beforeColor = this.color;
      var tmp$_0;
      tmp$_0 = geometry.numVertices;
      for (var i = 0; i < tmp$_0; i++) {
        geometry.vertexIt.index = i;
        var it = geometry.vertexIt;
        if (keepVertexColor) {
          this.color = it.color;
        }this.vertex_n440gp$(it.position, it.normal, it.texCoord);
      }
      tmp$ = geometry.numIndices;
      for (var i_0 = 0; i_0 < tmp$; i_0++) {
        this.geometry.addIndex_za3lpa$(i0 + geometry.indices.get_za3lpa$(i_0) | 0);
      }
      this.color = beforeColor;
    } else {
      throw KoolException_init('Only triangle geometry can be added');
    }
  };
  MeshBuilder.prototype.text_7d71kc$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshBuilder.text_7d71kc$', wrapFunction(function () {
    var TextProps_init = _.de.fabmax.kool.util.TextProps;
    return function (font, fontSizeUnits, block) {
      if (fontSizeUnits === void 0)
        fontSizeUnits = 0.0;
      var tmp$;
      var tmp$_0;
      if ((tmp$ = this.textProps) != null)
        tmp$_0 = tmp$;
      else {
        var $receiver = new TextProps_init(font);
        this.textProps = $receiver;
        tmp$_0 = $receiver;
      }
      var props = tmp$_0;
      props.defaults();
      props.font = font;
      block(props);
      this.text_s8z339$(props, fontSizeUnits);
    };
  }));
  MeshBuilder.prototype.text_s8z339$ = function (props, fontSizeUnits) {
    if (fontSizeUnits === void 0)
      fontSizeUnits = 0.0;
    this.transform.push();
    var tmp$;
    if (fontSizeUnits !== 0.0) {
      var s = fontSizeUnits / props.font.charMap.fontProps.sizePts;
      this.scale_y2kzbl$(s, s, s);
    }this.translate_czzhiu$(props.origin);
    var advanced = {v: 0.0};
    tmp$ = iterator(props.text);
    while (tmp$.hasNext()) {
      var c = unboxChar(tmp$.next());
      if (c === 10) {
        this.translate_y2kzbl$(0.0, -props.font.lineSpace, 0.0);
        advanced.v = 0.0;
      }var metrics = props.font.charMap.get_11rb$(toBoxedChar(c));
      if (metrics != null) {
        var $receiver = this.rectProps.defaults();
        $receiver.origin.set_y2kzbl$(advanced.v - metrics.xOffset, metrics.yBaseline - metrics.height, 0.0);
        $receiver.size.set_dleff0$(metrics.width, metrics.height);
        $receiver.texCoordUpperLeft.set_czzhjp$(metrics.uvMin);
        $receiver.texCoordUpperRight.set_dleff0$(metrics.uvMax.x, metrics.uvMin.y);
        $receiver.texCoordLowerLeft.set_dleff0$(metrics.uvMin.x, metrics.uvMax.y);
        $receiver.texCoordLowerRight.set_czzhjp$(metrics.uvMax);
        this.rect_e5k3t5$(this.rectProps);
        advanced.v += metrics.advance;
      }}
    this.transform.pop();
  };
  MeshBuilder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MeshBuilder',
    interfaces: []
  };
  function CircleProps() {
    this.radius = 1.0;
    this.steps = 20;
    this.center = MutableVec3f_init();
    this.startDeg = 0.0;
    this.sweepDeg = 360.0;
    this.uvCenter = MutableVec2f_init();
    this.uvRadius = 0.0;
  }
  CircleProps.prototype.defaults = function () {
    this.radius = 1.0;
    this.steps = 20;
    this.center.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.startDeg = 0.0;
    this.sweepDeg = 360.0;
    this.zeroTexCoords();
    return this;
  };
  CircleProps.prototype.zeroTexCoords = function () {
    this.uvCenter.set_czzhjp$(Vec2f$Companion_getInstance().ZERO);
    this.uvRadius = 0.0;
  };
  CircleProps.prototype.fullTexCoords = function () {
    this.uvCenter.set_dleff0$(0.5, 0.5);
    this.uvRadius = 0.5;
  };
  CircleProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CircleProps',
    interfaces: []
  };
  function GridProps() {
    GridProps$Companion_getInstance();
    this.center = MutableVec3f_init();
    this.xDir = MutableVec3f_init();
    this.yDir = MutableVec3f_init();
    this.sizeX = 0.0;
    this.sizeY = 0.0;
    this.stepsX = 0;
    this.stepsY = 0;
    this.heightFun = GridProps$Companion_getInstance().ZERO_HEIGHT;
    this.defaults();
  }
  GridProps.prototype.defaults = function () {
    this.center.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.xDir.set_czzhiu$(Vec3f$Companion_getInstance().X_AXIS);
    this.yDir.set_czzhiu$(Vec3f$Companion_getInstance().NEG_Z_AXIS);
    this.sizeX = 10.0;
    this.sizeY = 10.0;
    this.stepsX = 10;
    this.stepsY = 10;
    return this;
  };
  function GridProps$Companion() {
    GridProps$Companion_instance = this;
    this.ZERO_HEIGHT = GridProps$Companion$ZERO_HEIGHT$lambda;
  }
  function GridProps$Companion$ZERO_HEIGHT$lambda(f, f_0) {
    return 0.0;
  }
  GridProps$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var GridProps$Companion_instance = null;
  function GridProps$Companion_getInstance() {
    if (GridProps$Companion_instance === null) {
      new GridProps$Companion();
    }return GridProps$Companion_instance;
  }
  GridProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GridProps',
    interfaces: []
  };
  function SphereProps() {
    this.radius = 1.0;
    this.steps = 20;
    this.center = MutableVec3f_init();
    this.uv_0 = MutableVec2f_init();
    this.texCoordGenerator = SphereProps$texCoordGenerator$lambda(this);
  }
  SphereProps.prototype.defaultTexCoordGenerator_0 = function (theta, phi) {
    return this.uv_0.set_dleff0$(phi / (math.PI * 2.0), theta / math.PI);
  };
  function SphereProps$icoDefaults$lambda(this$SphereProps) {
    return function (t, p) {
      return this$SphereProps.defaultTexCoordGenerator_0(t, p);
    };
  }
  SphereProps.prototype.icoDefaults = function () {
    this.radius = 1.0;
    this.steps = 2;
    this.center.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.texCoordGenerator = SphereProps$icoDefaults$lambda(this);
    return this;
  };
  function SphereProps$uvDefaults$lambda(this$SphereProps) {
    return function (t, p) {
      return this$SphereProps.defaultTexCoordGenerator_0(t, p);
    };
  }
  SphereProps.prototype.uvDefaults = function () {
    this.radius = 1.0;
    this.steps = 20;
    this.center.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.texCoordGenerator = SphereProps$uvDefaults$lambda(this);
    return this;
  };
  function SphereProps$texCoordGenerator$lambda(this$SphereProps) {
    return function (t, p) {
      return this$SphereProps.defaultTexCoordGenerator_0(t, p);
    };
  }
  SphereProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SphereProps',
    interfaces: []
  };
  function RectProps() {
    this.cornerRadius = 0.0;
    this.cornerSteps = 8;
    this.origin = MutableVec3f_init();
    this.size = MutableVec2f_init();
    this.texCoordUpperLeft = MutableVec2f_init();
    this.texCoordUpperRight = MutableVec2f_init();
    this.texCoordLowerLeft = MutableVec2f_init();
    this.texCoordLowerRight = MutableVec2f_init();
    this.generateTexCoords_mx4ult$(1.0);
  }
  Object.defineProperty(RectProps.prototype, 'width', {
    get: function () {
      return this.size.x;
    },
    set: function (value) {
      this.size.x = value;
    }
  });
  Object.defineProperty(RectProps.prototype, 'height', {
    get: function () {
      return this.size.y;
    },
    set: function (value) {
      this.size.y = value;
    }
  });
  RectProps.prototype.fixNegativeSize = function () {
    if (this.size.x < 0) {
      this.origin.x = this.origin.x + this.size.x;
      this.size.x = -this.size.x;
    }if (this.size.y < 0) {
      this.origin.y = this.origin.y + this.size.y;
      this.size.y = -this.size.y;
    }};
  RectProps.prototype.zeroTexCoords = function () {
    this.generateTexCoords_mx4ult$(0.0);
  };
  RectProps.prototype.generateTexCoords_mx4ult$ = function (scale) {
    if (scale === void 0)
      scale = 1.0;
    this.texCoordUpperLeft.set_dleff0$(0.0, 0.0);
    this.texCoordUpperRight.set_dleff0$(scale, 0.0);
    this.texCoordLowerLeft.set_dleff0$(0.0, scale);
    this.texCoordLowerRight.set_dleff0$(scale, scale);
  };
  RectProps.prototype.mirrorTexCoordsX = function () {
    var xul = this.texCoordUpperLeft.x;
    var xll = this.texCoordLowerLeft.x;
    this.texCoordUpperLeft.x = this.texCoordUpperRight.x;
    this.texCoordUpperRight.x = xul;
    this.texCoordLowerLeft.x = this.texCoordLowerRight.x;
    this.texCoordLowerRight.x = xll;
  };
  RectProps.prototype.mirrorTexCoordsY = function () {
    var yul = this.texCoordUpperLeft.y;
    var yur = this.texCoordUpperRight.y;
    this.texCoordUpperLeft.y = this.texCoordLowerLeft.y;
    this.texCoordLowerLeft.y = yul;
    this.texCoordUpperRight.y = this.texCoordLowerRight.y;
    this.texCoordLowerRight.y = yur;
  };
  RectProps.prototype.defaults = function () {
    this.cornerRadius = 0.0;
    this.cornerSteps = 8;
    this.origin.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.size.set_dleff0$(1.0, 1.0);
    this.generateTexCoords_mx4ult$(1.0);
    return this;
  };
  RectProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RectProps',
    interfaces: []
  };
  function CubeProps() {
    this.origin = MutableVec3f_init();
    this.size = MutableVec3f_init();
    this.topColor = null;
    this.bottomColor = null;
    this.leftColor = null;
    this.rightColor = null;
    this.frontColor = null;
    this.backColor = null;
  }
  Object.defineProperty(CubeProps.prototype, 'width', {
    get: function () {
      return this.size.x;
    },
    set: function (value) {
      this.size.x = value;
    }
  });
  Object.defineProperty(CubeProps.prototype, 'height', {
    get: function () {
      return this.size.y;
    },
    set: function (value) {
      this.size.y = value;
    }
  });
  Object.defineProperty(CubeProps.prototype, 'depth', {
    get: function () {
      return this.size.z;
    },
    set: function (value) {
      this.size.z = value;
    }
  });
  CubeProps.prototype.fixNegativeSize = function () {
    if (this.size.x < 0) {
      this.origin.x = this.origin.x + this.size.x;
      this.size.x = -this.size.x;
    }if (this.size.y < 0) {
      this.origin.y = this.origin.y + this.size.y;
      this.size.y = -this.size.y;
    }if (this.size.z < 0) {
      this.origin.z = this.origin.z + this.size.z;
      this.size.z = -this.size.z;
    }};
  CubeProps.prototype.centered = function () {
    this.origin.x = this.origin.x - this.size.x / 2.0;
    this.origin.y = this.origin.y - this.size.y / 2.0;
    this.origin.z = this.origin.z - this.size.z / 2.0;
  };
  CubeProps.prototype.colored_6taknv$ = function (linearSpace) {
    if (linearSpace === void 0)
      linearSpace = true;
    if (linearSpace) {
      this.frontColor = Color$Companion_getInstance().MD_RED.toLinear();
      this.rightColor = Color$Companion_getInstance().MD_AMBER.toLinear();
      this.backColor = Color$Companion_getInstance().MD_INDIGO.toLinear();
      this.leftColor = Color$Companion_getInstance().MD_CYAN.toLinear();
      this.topColor = Color$Companion_getInstance().MD_PURPLE.toLinear();
      this.bottomColor = Color$Companion_getInstance().MD_GREEN.toLinear();
    } else {
      this.frontColor = Color$Companion_getInstance().MD_RED;
      this.rightColor = Color$Companion_getInstance().MD_AMBER;
      this.backColor = Color$Companion_getInstance().MD_INDIGO;
      this.leftColor = Color$Companion_getInstance().MD_CYAN;
      this.topColor = Color$Companion_getInstance().MD_PURPLE;
      this.bottomColor = Color$Companion_getInstance().MD_GREEN;
    }
  };
  CubeProps.prototype.defaults = function () {
    this.size.x = 1.0;
    this.size.y = 1.0;
    this.size.z = 1.0;
    this.origin.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    this.topColor = null;
    this.bottomColor = null;
    this.leftColor = null;
    this.rightColor = null;
    this.frontColor = null;
    this.backColor = null;
    return this;
  };
  CubeProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CubeProps',
    interfaces: []
  };
  function CylinderProps() {
    this.bottomRadius = 1.0;
    this.topRadius = 1.0;
    this.steps = 20;
    this.height = 1.0;
    this.topFill = true;
    this.bottomFill = true;
    this.origin = MutableVec3f_init();
  }
  CylinderProps.prototype.defaults = function () {
    this.bottomRadius = 1.0;
    this.topRadius = 1.0;
    this.steps = 20;
    this.height = 1.0;
    this.topFill = true;
    this.bottomFill = true;
    this.origin.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    return this;
  };
  CylinderProps.prototype.fixNegativeSize = function () {
    if (this.height < 0) {
      this.origin.y = this.origin.y + this.height;
      this.height = -this.height;
    }};
  CylinderProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CylinderProps',
    interfaces: []
  };
  function TextProps(font) {
    this.font = font;
    this.text = '';
    this.origin = MutableVec3f_init();
  }
  TextProps.prototype.defaults = function () {
    this.text = '';
    this.origin.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    return this;
  };
  TextProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextProps',
    interfaces: []
  };
  function MeshInstanceList(instanceAttributes, maxInstances) {
    MeshInstanceList$Companion_getInstance();
    if (maxInstances === void 0)
      maxInstances = 1000;
    this.instanceAttributes = instanceAttributes;
    this.maxInstances = maxInstances;
    this.attributeOffsets = null;
    this.instanceSizeF = 0;
    this.strideBytesF = 0;
    this.usage = Usage$DYNAMIC_getInstance();
    this.numInstances = 0;
    this.dataF = null;
    this.hasChanged = true;
    var tmp$;
    var strideF = 0;
    var offsets = LinkedHashMap_init();
    tmp$ = this.instanceAttributes.iterator();
    while (tmp$.hasNext()) {
      var attrib = tmp$.next();
      if (attrib.type.isInt) {
        throw IllegalArgumentException_init('For now only float attributes are supported');
      } else {
        var value = strideF;
        offsets.put_xwzc9p$(attrib, value);
        strideF = strideF + attrib.type.size | 0;
      }
    }
    this.attributeOffsets = offsets;
    this.instanceSizeF = strideF / 4 | 0;
    this.strideBytesF = strideF;
    this.dataF = createFloat32Buffer(Kotlin.imul(strideF, this.maxInstances));
  }
  MeshInstanceList.prototype.checkBufferSize_za3lpa$ = function (reqSpace) {
    if (reqSpace === void 0)
      reqSpace = 1;
    if ((this.numInstances + reqSpace | 0) > this.maxInstances) {
      throw KoolException_init('Maximum number of instances exceeded, create with increased maxInstances');
    }};
  MeshInstanceList.prototype.addInstance_u9cxs7$ = defineInlineFunction('kool.de.fabmax.kool.util.MeshInstanceList.addInstance_u9cxs7$', wrapFunction(function () {
    var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init_pdl1vj$;
    return function (block) {
      this.checkBufferSize_za3lpa$();
      var szBefore = this.dataF.position;
      block(this.dataF);
      var growSz = this.dataF.position - szBefore | 0;
      if (growSz !== this.instanceSizeF) {
        throw IllegalStateException_init('Expected data to grow by ' + this.instanceSizeF + ' elements, instead it grew by ' + growSz);
      }this.numInstances = this.numInstances + 1 | 0;
      this.hasChanged = true;
    };
  }));
  MeshInstanceList.prototype.clear = function () {
    this.numInstances = 0;
    this.dataF.position = 0;
    this.dataF.limit = this.dataF.capacity;
    this.hasChanged = true;
  };
  function MeshInstanceList$Companion() {
    MeshInstanceList$Companion_instance = this;
    this.MODEL_MAT = new Attribute('attrib_model_mat', GlslType$MAT_4F_getInstance());
  }
  MeshInstanceList$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MeshInstanceList$Companion_instance = null;
  function MeshInstanceList$Companion_getInstance() {
    if (MeshInstanceList$Companion_instance === null) {
      new MeshInstanceList$Companion();
    }return MeshInstanceList$Companion_instance;
  }
  MeshInstanceList.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MeshInstanceList',
    interfaces: []
  };
  function ObjectRecycler(maxSize, factory) {
    ObjectRecycler$Companion_getInstance();
    this.maxSize_tysx8i$_0 = maxSize;
    this.factory_vv2li5$_0 = factory;
    this.recyclingStack_cbi09h$_0 = ArrayList_init_0();
  }
  ObjectRecycler.prototype.get = function () {
    if (!this.recyclingStack_cbi09h$_0.isEmpty()) {
      return this.recyclingStack_cbi09h$_0.removeAt_za3lpa$(get_lastIndex(this.recyclingStack_cbi09h$_0));
    } else {
      return this.factory_vv2li5$_0();
    }
  };
  ObjectRecycler.prototype.recycle_trkh7z$ = function (obj) {
    if (this.recyclingStack_cbi09h$_0.size < this.maxSize_tysx8i$_0) {
      this.recyclingStack_cbi09h$_0.add_11rb$(obj);
    } else {
      var $this = package$util.Log;
      var level = Log$Level.DEBUG;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Discarding recycled object ' + Kotlin.getKClassFromExpression(obj) + ', stack is full: ' + this.recyclingStack_cbi09h$_0.size);
      }}
    return this;
  };
  function ObjectRecycler$Companion() {
    ObjectRecycler$Companion_instance = this;
    this.DEFAULT_MAX_SIZE = 10000;
  }
  ObjectRecycler$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ObjectRecycler$Companion_instance = null;
  function ObjectRecycler$Companion_getInstance() {
    if (ObjectRecycler$Companion_instance === null) {
      new ObjectRecycler$Companion();
    }return ObjectRecycler$Companion_instance;
  }
  ObjectRecycler.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ObjectRecycler',
    interfaces: []
  };
  function ObjectRecycler_init(factory, $this) {
    $this = $this || Object.create(ObjectRecycler.prototype);
    ObjectRecycler.call($this, 10000, factory);
    return $this;
  }
  function ObjectPool(factory) {
    ObjectRecycler_init(factory, this);
    this.liveObjects_0 = ArrayList_init_0();
  }
  Object.defineProperty(ObjectPool.prototype, 'size', {
    get: function () {
      return this.liveObjects_0.size;
    }
  });
  ObjectPool.prototype.get_za3lpa$ = function (index) {
    return this.liveObjects_0.get_za3lpa$(index);
  };
  ObjectPool.prototype.get = function () {
    var obj = ObjectRecycler.prototype.get.call(this);
    this.liveObjects_0.add_11rb$(obj);
    return obj;
  };
  ObjectPool.prototype.recycle_trkh7z$ = function (obj) {
    this.liveObjects_0.remove_11rb$(obj);
    return ObjectRecycler.prototype.recycle_trkh7z$.call(this, obj);
  };
  ObjectPool.prototype.use_oh3mgy$ = defineInlineFunction('kool.de.fabmax.kool.util.ObjectPool.use_oh3mgy$', function (block) {
    var item = this.get();
    block(item);
    this.recycle_trkh7z$(item);
  });
  ObjectPool.prototype.recycleAll = function () {
    var tmp$;
    tmp$ = this.liveObjects_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      ObjectRecycler.prototype.recycle_trkh7z$.call(this, this.liveObjects_0.get_za3lpa$(i));
    }
    this.liveObjects_0.clear();
  };
  ObjectPool.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ObjectPool',
    interfaces: [ObjectRecycler]
  };
  function AutoRecycler(maxSize, factory) {
    if (maxSize === void 0)
      maxSize = 10000;
    ObjectRecycler.call(this, maxSize, factory);
    this.contextRecycler = ObjectRecycler_init(AutoRecycler$contextRecycler$lambda(this));
  }
  AutoRecycler.prototype.use_al8zmf$ = defineInlineFunction('kool.de.fabmax.kool.util.AutoRecycler.use_al8zmf$', function (block) {
    var ctx = this.contextRecycler.get();
    block(ctx, ctx.get());
    ctx.free();
    this.contextRecycler.recycle_trkh7z$(ctx);
  });
  function AutoRecycler$Context($outer) {
    this.$outer = $outer;
    this.liveObjects_0 = ArrayList_init_0();
  }
  AutoRecycler$Context.prototype.get = function () {
    var o = this.$outer.get();
    this.liveObjects_0.add_11rb$(o);
    return o;
  };
  AutoRecycler$Context.prototype.free = function () {
    var tmp$;
    tmp$ = this.liveObjects_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.$outer.recycle_trkh7z$(this.liveObjects_0.get_za3lpa$(i));
    }
    this.liveObjects_0.clear();
  };
  AutoRecycler$Context.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Context',
    interfaces: []
  };
  function AutoRecycler$contextRecycler$lambda(this$AutoRecycler) {
    return function () {
      return new AutoRecycler$Context(this$AutoRecycler);
    };
  }
  AutoRecycler.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AutoRecycler',
    interfaces: [ObjectRecycler]
  };
  function OcTree(itemAdapter, items, bounds, padding, bucketSz, accurateBounds) {
    OcTree$Companion_getInstance();
    if (items === void 0)
      items = emptyList();
    if (bounds === void 0)
      bounds = new BoundingBox();
    if (padding === void 0)
      padding = 0.1;
    if (bucketSz === void 0)
      bucketSz = 20;
    if (accurateBounds === void 0)
      accurateBounds = true;
    SpatialTree.call(this, itemAdapter);
    this.accurateBounds = accurateBounds;
    this.root_be3r27$_0 = null;
    this.emptyItems_0 = ArrayList_init_0();
    var tmpPt = MutableVec3f_init();
    if (!items.isEmpty()) {
      var $this = bounds;
      var wasBatchUpdate = $this.isBatchUpdate;
      $this.isBatchUpdate = true;
      var closure$items = items;
      var closure$bounds = bounds;
      for (var i = 0; i !== closure$items.size; ++i) {
        closure$bounds.add_czzhiu$(itemAdapter.getMin_hm1yd1$(closure$items.get_za3lpa$(i), tmpPt));
        closure$bounds.add_czzhiu$(itemAdapter.getMax_hm1yd1$(closure$items.get_za3lpa$(i), tmpPt));
      }
      $this.isBatchUpdate = wasBatchUpdate;
    }if (bounds.isEmpty) {
      throw KoolException_init('OcTree bounds are empty, specify bounds manually');
    }var tmp$ = bounds.size.x;
    var a = bounds.size.y;
    var b = bounds.size.z;
    var b_0 = Math_0.max(a, b);
    var edLen = Math_0.max(tmp$, b_0);
    var pad = edLen * padding;
    bounds.set_w8lrqs$(bounds.min.x - pad, bounds.min.y - pad, bounds.min.z - pad, bounds.min.x + edLen + pad * 2, bounds.min.y + edLen + pad * 2, bounds.min.z + edLen + pad * 2);
    this.root_be3r27$_0 = new OcTree$OcNode(this, bounds, 0, bucketSz);
    for (var i_0 = 0; i_0 !== items.size; ++i_0) {
      this.root.add_bzsob0$(items.get_za3lpa$(i_0));
    }
  }
  Object.defineProperty(OcTree.prototype, 'root', {
    get: function () {
      return this.root_be3r27$_0;
    }
  });
  Object.defineProperty(OcTree.prototype, 'size', {
    get: function () {
      return this.root.size;
    }
  });
  OcTree.prototype.add_11rb$ = function (element) {
    if (!this.root.nodeBounds.contains_y2kzbl$(this.itemAdapter.getCenterX_trkh7z$(element), this.itemAdapter.getCenterY_trkh7z$(element), this.itemAdapter.getCenterZ_trkh7z$(element))) {
      var $this = package$util.Log;
      var level = Log$Level.ERROR;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Item not in tree bounds: (' + this.itemAdapter.getMinX_trkh7z$(element) + ', ' + this.itemAdapter.getMinY_trkh7z$(element) + ', ' + this.itemAdapter.getMinZ_trkh7z$(element) + '), bounds: ' + this.root.bounds);
      }return false;
    }this.root.add_bzsob0$(element);
    return true;
  };
  OcTree.prototype.remove_11rb$ = function (element) {
    var success = this.root.remove_4rla3$(element, true);
    if (!success) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Failed to remove: ' + element);
      }var it = this.iterator();
      while (it.hasNext()) {
        if (equals(it.next(), element)) {
          var $this_0 = package$util.Log;
          var level_0 = Log$Level.WARN;
          var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
          if (level_0.level >= $this_0.level.level) {
            $this_0.printer(level_0, tag_0, "Removed via brute force, did element change it's position?");
          }it.remove();
        }}
    }return success;
  };
  function OcTree$iterator$ObjectLiteral(this$OcTree) {
    this.elementIts = ArrayList_init_0();
    this.elemIt = null;
    var tmp$;
    this.collectElements_witnv0$(this$OcTree.root);
    if (!this.elementIts.isEmpty()) {
      tmp$ = this.elementIts.removeAt_za3lpa$(get_lastIndex(this.elementIts));
    } else {
      tmp$ = ArrayList_init_0().iterator();
    }
    this.elemIt = tmp$;
  }
  OcTree$iterator$ObjectLiteral.prototype.collectElements_witnv0$ = function (node) {
    var tmp$;
    if (node.isLeaf) {
      if (!node.items.isEmpty()) {
        var $receiver = this.elementIts;
        var element = node.items.iterator();
        $receiver.add_11rb$(element);
      }} else {
      tmp$ = node.children;
      for (var i = 0; i !== tmp$.size; ++i) {
        this.collectElements_witnv0$(node.children.get_za3lpa$(i));
      }
    }
  };
  OcTree$iterator$ObjectLiteral.prototype.hasNext = function () {
    if (this.elemIt.hasNext()) {
      return true;
    } else {
      while (!this.elementIts.isEmpty()) {
        this.elemIt = this.elementIts.removeAt_za3lpa$(get_lastIndex(this.elementIts));
        if (this.elemIt.hasNext()) {
          return true;
        }}
      return false;
    }
  };
  OcTree$iterator$ObjectLiteral.prototype.next = function () {
    return this.elemIt.next();
  };
  OcTree$iterator$ObjectLiteral.prototype.remove = function () {
    this.elemIt.remove();
  };
  OcTree$iterator$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [MutableIterator]
  };
  OcTree.prototype.iterator = function () {
    return new OcTree$iterator$ObjectLiteral(this);
  };
  OcTree.prototype.contains_11rb$ = function (element) {
    return this.root.contains_uargzz$(element);
  };
  OcTree.prototype.containsAll_brywnq$ = function (elements) {
    var tmp$;
    tmp$ = elements.iterator();
    while (tmp$.hasNext()) {
      var elem = tmp$.next();
      if (!this.contains_11rb$(elem)) {
        return false;
      }}
    return true;
  };
  OcTree.prototype.isEmpty = function () {
    return this.size === 0;
  };
  OcTree.prototype.addAll_brywnq$ = function (elements) {
    var tmp$;
    var anyAdded = false;
    tmp$ = elements.iterator();
    while (tmp$.hasNext()) {
      var elem = tmp$.next();
      anyAdded = anyAdded || this.add_11rb$(elem);
    }
    return anyAdded;
  };
  OcTree.prototype.clear = function () {
    this.root.clear_8be2vx$();
  };
  OcTree.prototype.removeAll_brywnq$ = function (elements) {
    var tmp$;
    var anyRemoved = false;
    tmp$ = elements.iterator();
    while (tmp$.hasNext()) {
      var elem = tmp$.next();
      anyRemoved = anyRemoved || this.remove_11rb$(elem);
    }
    return anyRemoved;
  };
  OcTree.prototype.retainAll_brywnq$ = function (elements) {
    var anyRemoved = false;
    var retainSet = LinkedHashSet_init();
    retainSet.addAll_brywnq$(elements);
    var it = this.iterator();
    while (it.hasNext()) {
      if (!retainSet.contains_11rb$(it.next())) {
        it.remove();
        anyRemoved = true;
      }}
    return anyRemoved;
  };
  function OcTree$OcNode($outer, nodeBounds, depth, bucketSz) {
    this.$outer = $outer;
    SpatialTree$Node.call(this, this.$outer, depth);
    this.nodeBounds = nodeBounds;
    this.bucketSz = bucketSz;
    this.size_yjj6gq$_0 = 0;
    this.children_oh99z0$_0 = ArrayList_init_0();
    this.tmpVec_0 = MutableVec3f_init();
    this.mutItems_0 = ArrayList_init_0();
    if (depth > 20) {
      throw KoolException_init('Octree is too deep');
    }if (!this.$outer.accurateBounds) {
      this.bounds.add_ea4od8$(this.nodeBounds);
    }}
  Object.defineProperty(OcTree$OcNode.prototype, 'size', {
    get: function () {
      return this.size_yjj6gq$_0;
    },
    set: function (size) {
      this.size_yjj6gq$_0 = size;
    }
  });
  Object.defineProperty(OcTree$OcNode.prototype, 'children', {
    get: function () {
      return this.children_oh99z0$_0;
    }
  });
  Object.defineProperty(OcTree$OcNode.prototype, 'items', {
    get: function () {
      return this.mutItems_0;
    }
  });
  Object.defineProperty(OcTree$OcNode.prototype, 'nodeRange', {
    get: function () {
      return get_indices(this.items);
    }
  });
  OcTree$OcNode.prototype.clear_8be2vx$ = function () {
    if (this.depth !== 0) {
      throw KoolException_init('clear() is only allowed for root node');
    }this.mutItems_0.clear();
    this.children.clear();
    this.size = 0;
    if (this.$outer.accurateBounds) {
      this.bounds.clear();
    }};
  OcTree$OcNode.prototype.add_bzsob0$ = function (item) {
    this.size = this.size + 1 | 0;
    if (this.isLeaf) {
      if (this.$outer.accurateBounds) {
        this.bounds.add_czzhiu$(this.$outer.itemAdapter.getMin_hm1yd1$(item, this.tmpVec_0));
        this.bounds.add_czzhiu$(this.$outer.itemAdapter.getMax_hm1yd1$(item, this.tmpVec_0));
      }if (this.mutItems_0.size < this.bucketSz || this.depth === 20) {
        this.mutItems_0.add_11rb$(item);
        this.$outer.itemAdapter.setNode_bc9457$(item, this);
      } else {
        this.split_0();
        this.children.get_za3lpa$(this.childIndexForItem_0(item)).add_bzsob0$(item);
      }
    } else {
      var child = this.children.get_za3lpa$(this.childIndexForItem_0(item));
      child.add_bzsob0$(item);
      if (this.$outer.accurateBounds) {
        this.bounds.add_ea4od8$(child.bounds);
      }}
  };
  OcTree$OcNode.prototype.remove_4rla3$ = function (item, canMerge) {
    var tmp$;
    if (this.isLeaf) {
      tmp$ = this.mutItems_0.remove_11rb$(item);
    } else {
      tmp$ = this.children.get_za3lpa$(this.childIndexForItem_0(item)).remove_4rla3$(item, canMerge);
    }
    var success = tmp$;
    if (success) {
      this.size = this.size - 1 | 0;
      if (!this.isLeaf && this.size < this.bucketSz && canMerge) {
        this.merge_0();
      }if (this.$outer.accurateBounds && this.isBorderItem_0(item)) {
        this.recomputeBounds_0();
      }}return success;
  };
  OcTree$OcNode.prototype.isBorderItem_0 = function (item) {
    this.$outer.itemAdapter.getMin_hm1yd1$(item, this.tmpVec_0);
    if (this.tmpVec_0.x <= this.bounds.min.x || this.tmpVec_0.y <= this.bounds.min.y || this.tmpVec_0.z <= this.bounds.min.z) {
      return true;
    }this.$outer.itemAdapter.getMax_hm1yd1$(item, this.tmpVec_0);
    if (this.tmpVec_0.x >= this.bounds.max.x || this.tmpVec_0.y >= this.bounds.max.y || this.tmpVec_0.z >= this.bounds.max.z) {
      return true;
    }return false;
  };
  OcTree$OcNode.prototype.recomputeBounds_0 = function () {
    var tmp$, tmp$_0;
    this.bounds.clear();
    if (this.isLeaf) {
      tmp$ = this.mutItems_0;
      for (var i = 0; i !== tmp$.size; ++i) {
        this.bounds.add_czzhiu$(this.$outer.itemAdapter.getMin_hm1yd1$(this.mutItems_0.get_za3lpa$(i), this.tmpVec_0));
        this.bounds.add_czzhiu$(this.$outer.itemAdapter.getMax_hm1yd1$(this.mutItems_0.get_za3lpa$(i), this.tmpVec_0));
      }
    } else {
      tmp$_0 = this.children;
      for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
        this.bounds.add_ea4od8$(this.children.get_za3lpa$(i_0).bounds);
      }
    }
  };
  OcTree$OcNode.prototype.contains_uargzz$ = function (item) {
    var tmp$;
    if (this.isLeaf) {
      tmp$ = this.mutItems_0.contains_11rb$(item);
    } else {
      tmp$ = this.children.get_za3lpa$(this.childIndexForItem_0(item)).contains_uargzz$(item);
    }
    return tmp$;
  };
  OcTree$OcNode.prototype.isInBounds_czzhiu$ = function (center) {
    return this.isInBounds_y2kzbl$(center.x, center.y, center.z);
  };
  OcTree$OcNode.prototype.isInBounds_y2kzbl$ = function (centerX, centerY, centerZ) {
    return centerX >= this.nodeBounds.min.x && centerX < this.nodeBounds.max.x && centerY >= this.nodeBounds.min.y && centerY < this.nodeBounds.max.y && centerZ >= this.nodeBounds.min.z && centerZ < this.nodeBounds.max.z;
  };
  OcTree$OcNode.prototype.split_0 = function () {
    var tmp$;
    var x0 = this.nodeBounds.min.x;
    var x1 = this.nodeBounds.center.x;
    var x2 = this.nodeBounds.max.x;
    var y0 = this.nodeBounds.min.y;
    var y1 = this.nodeBounds.center.y;
    var y2 = this.nodeBounds.max.y;
    var z0 = this.nodeBounds.min.z;
    var z1 = this.nodeBounds.center.z;
    var z2 = this.nodeBounds.max.z;
    var $receiver = this.children;
    var element = new OcTree$OcNode(this.$outer, BoundingBox_init(new Vec3f(x0, y0, z0), new Vec3f(x1, y1, z1)), this.depth + 1 | 0, this.bucketSz);
    $receiver.add_11rb$(element);
    var $receiver_0 = this.children;
    var element_0 = new OcTree$OcNode(this.$outer, BoundingBox_init(new Vec3f(x0, y0, z1), new Vec3f(x1, y1, z2)), this.depth + 1 | 0, this.bucketSz);
    $receiver_0.add_11rb$(element_0);
    var $receiver_1 = this.children;
    var element_1 = new OcTree$OcNode(this.$outer, BoundingBox_init(new Vec3f(x0, y1, z0), new Vec3f(x1, y2, z1)), this.depth + 1 | 0, this.bucketSz);
    $receiver_1.add_11rb$(element_1);
    var $receiver_2 = this.children;
    var element_2 = new OcTree$OcNode(this.$outer, BoundingBox_init(new Vec3f(x0, y1, z1), new Vec3f(x1, y2, z2)), this.depth + 1 | 0, this.bucketSz);
    $receiver_2.add_11rb$(element_2);
    var $receiver_3 = this.children;
    var element_3 = new OcTree$OcNode(this.$outer, BoundingBox_init(new Vec3f(x1, y0, z0), new Vec3f(x2, y1, z1)), this.depth + 1 | 0, this.bucketSz);
    $receiver_3.add_11rb$(element_3);
    var $receiver_4 = this.children;
    var element_4 = new OcTree$OcNode(this.$outer, BoundingBox_init(new Vec3f(x1, y0, z1), new Vec3f(x2, y1, z2)), this.depth + 1 | 0, this.bucketSz);
    $receiver_4.add_11rb$(element_4);
    var $receiver_5 = this.children;
    var element_5 = new OcTree$OcNode(this.$outer, BoundingBox_init(new Vec3f(x1, y1, z0), new Vec3f(x2, y2, z1)), this.depth + 1 | 0, this.bucketSz);
    $receiver_5.add_11rb$(element_5);
    var $receiver_6 = this.children;
    var element_6 = new OcTree$OcNode(this.$outer, BoundingBox_init(new Vec3f(x1, y1, z1), new Vec3f(x2, y2, z2)), this.depth + 1 | 0, this.bucketSz);
    $receiver_6.add_11rb$(element_6);
    tmp$ = this.mutItems_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.children.get_za3lpa$(this.childIndexForItem_0(this.mutItems_0.get_za3lpa$(i))).add_bzsob0$(this.mutItems_0.get_za3lpa$(i));
    }
    this.mutItems_0 = this.$outer.emptyItems_0;
  };
  OcTree$OcNode.prototype.merge_0 = function () {
    var tmp$;
    this.mutItems_0 = ArrayList_init_0();
    tmp$ = this.children;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.mutItems_0.addAll_brywnq$(this.children.get_za3lpa$(i).mutItems_0);
    }
    this.children.clear();
  };
  OcTree$OcNode.prototype.childIndexForItem_0 = function (item) {
    var tmp$, tmp$_0, tmp$_1;
    if (this.$outer.itemAdapter.getCenterX_trkh7z$(item) < this.nodeBounds.center.x) {
      tmp$ = 0;
    } else {
      tmp$ = 4;
    }
    if (this.$outer.itemAdapter.getCenterY_trkh7z$(item) < this.nodeBounds.center.y) {
      tmp$_0 = 0;
    } else {
      tmp$_0 = 2;
    }
    if (this.$outer.itemAdapter.getCenterZ_trkh7z$(item) < this.nodeBounds.center.z) {
      tmp$_1 = 0;
    } else {
      tmp$_1 = 1;
    }
    return tmp$ | tmp$_0 | tmp$_1;
  };
  OcTree$OcNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OcNode',
    interfaces: [SpatialTree$Node]
  };
  function OcTree$Companion() {
    OcTree$Companion_instance = this;
    this.MAX_DEPTH = 20;
  }
  OcTree$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var OcTree$Companion_instance = null;
  function OcTree$Companion_getInstance() {
    if (OcTree$Companion_instance === null) {
      new OcTree$Companion();
    }return OcTree$Companion_instance;
  }
  OcTree.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OcTree',
    interfaces: [MutableCollection, SpatialTree]
  };
  function PerfTimer() {
    this.tStart_0 = 0.0;
    this.reset();
  }
  PerfTimer.prototype.reset = function () {
    this.tStart_0 = now();
  };
  PerfTimer.prototype.takeSecs = function () {
    return this.takeMs() / 1000.0;
  };
  PerfTimer.prototype.takeMs = function () {
    return now() - this.tStart_0;
  };
  PerfTimer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PerfTimer',
    interfaces: []
  };
  var timedMs = defineInlineFunction('kool.de.fabmax.kool.util.timedMs_9vqa9e$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    var now = _.de.fabmax.kool.now;
    var util = _.de.fabmax.kool.util;
    var toString = _.de.fabmax.kool.toString_j6vyb1$;
    return function (message, tag, level, block) {
      if (tag === void 0)
        tag = 'PerfTimer';
      if (level === void 0)
        level = Log$Level.INFO;
      var t = now();
      var ret = block();
      var $this = util.Log;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message + ' ' + toString(now() - t, 3) + ' ms');
      }return ret;
    };
  }));
  var timedMs_0 = defineInlineFunction('kool.de.fabmax.kool.util.timedMs_v0aq7q$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    var now = _.de.fabmax.kool.now;
    var util = _.de.fabmax.kool.util;
    var toString = _.de.fabmax.kool.toString_j6vyb1$;
    return function (message, tag, level, block) {
      if (tag === void 0)
        tag = 'PerfTimer';
      if (level === void 0)
        level = Log$Level.INFO;
      var t = now();
      var ret = block();
      var $this = util.Log;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message() + ' ' + toString(now() - t, 3) + ' ms');
      }return ret;
    };
  }));
  var timedMs_1 = defineInlineFunction('kool.de.fabmax.kool.util.timedMs_sky27l$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    var now = _.de.fabmax.kool.now;
    var util = _.de.fabmax.kool.util;
    var toString = _.de.fabmax.kool.toString_j6vyb1$;
    return function ($receiver, message, level, block) {
      if (level === void 0)
        level = Log$Level.INFO;
      var t = now();
      var ret = block();
      var $this = util.Log;
      var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message + ' ' + toString(now() - t, 3) + ' ms');
      }return ret;
    };
  }));
  var timedMs_2 = defineInlineFunction('kool.de.fabmax.kool.util.timedMs_780vyl$', wrapFunction(function () {
    var Log$Level = _.de.fabmax.kool.util.Log.Level;
    var now = _.de.fabmax.kool.now;
    var util = _.de.fabmax.kool.util;
    var toString = _.de.fabmax.kool.toString_j6vyb1$;
    return function ($receiver, message, level, block) {
      if (level === void 0)
        level = Log$Level.INFO;
      var t = now();
      var ret = block();
      var $this = util.Log;
      var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, message() + ' ' + toString(now() - t, 3) + ' ms');
      }return ret;
    };
  }));
  function Comparator$ObjectLiteral_3(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_3.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_3.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  function PriorityQueue(comparator) {
    if (comparator === void 0)
      comparator = null;
    this.comparator_0 = null;
    this.elements_0 = ArrayList_init_0();
    this.comparator_0 = comparator != null ? comparator : new Comparator$ObjectLiteral_3(PriorityQueue_init$lambda);
  }
  Object.defineProperty(PriorityQueue.prototype, 'size', {
    get: function () {
      return this.elements_0.size;
    }
  });
  PriorityQueue.prototype.clear = function () {
    this.elements_0.clear();
  };
  PriorityQueue.prototype.add_11rb$ = function (element) {
    this.elements_0.add_11rb$(element);
    this.swim_0(this.size - 1 | 0);
  };
  PriorityQueue.prototype.plusAssign_11rb$ = function (element) {
    this.add_11rb$(element);
  };
  PriorityQueue.prototype.peek = function () {
    if (this.size === 0) {
      throw NoSuchElementException_init();
    }return this.elements_0.get_za3lpa$(0);
  };
  PriorityQueue.prototype.poll = function () {
    if (this.size === 0) {
      throw NoSuchElementException_init();
    }var first = this.peek();
    this.swap_0(this.elements_0, 0, get_lastIndex(this.elements_0));
    this.elements_0.removeAt_za3lpa$(get_lastIndex(this.elements_0));
    this.sink_0(0);
    return first;
  };
  PriorityQueue.prototype.swim_0 = function (n) {
    var k = n + 1 | 0;
    while (k > 1 && this.greater_0((k / 2 | 0) - 1 | 0, k - 1 | 0)) {
      this.swap_0(this.elements_0, k - 1 | 0, (k / 2 | 0) - 1 | 0);
      k = k / 2 | 0;
    }
  };
  PriorityQueue.prototype.sink_0 = function (n) {
    var k = n + 1 | 0;
    while ((2 * k | 0) <= this.size) {
      var j = 2 * k | 0;
      if (j < this.size && this.greater_0(j - 1 | 0, j)) {
        j = j + 1 | 0;
      }if (!this.greater_0(k - 1 | 0, j - 1 | 0)) {
        break;
      }this.swap_0(this.elements_0, k - 1 | 0, j - 1 | 0);
      k = j;
    }
  };
  PriorityQueue.prototype.greater_0 = function (i, j) {
    return this.comparator_0.compare(this.elements_0.get_za3lpa$(i), this.elements_0.get_za3lpa$(j)) > 0;
  };
  PriorityQueue.prototype.isEmpty = function () {
    return this.elements_0.isEmpty();
  };
  PriorityQueue.prototype.contains_11rb$ = function (element) {
    return this.elements_0.contains_11rb$(element);
  };
  PriorityQueue.prototype.containsAll_brywnq$ = function (elements) {
    return this.elements_0.containsAll_brywnq$(elements);
  };
  function PriorityQueue$iterator$ObjectLiteral(this$PriorityQueue) {
    var $receiver = new PriorityQueue(this$PriorityQueue.comparator_0);
    $receiver.elements_0.addAll_brywnq$(this$PriorityQueue.elements_0);
    this.q = $receiver;
  }
  PriorityQueue$iterator$ObjectLiteral.prototype.hasNext = function () {
    return !this.q.isEmpty();
  };
  PriorityQueue$iterator$ObjectLiteral.prototype.next = function () {
    return this.q.poll();
  };
  PriorityQueue$iterator$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [Iterator]
  };
  PriorityQueue.prototype.iterator = function () {
    return new PriorityQueue$iterator$ObjectLiteral(this);
  };
  PriorityQueue.prototype.swap_0 = function ($receiver, a, b) {
    var $receiver_0 = $receiver.get_za3lpa$(b);
    $receiver.set_wxm5ur$(b, $receiver.get_za3lpa$(a));
    $receiver.set_wxm5ur$(a, $receiver_0);
  };
  function PriorityQueue_init$lambda(a, b) {
    var tmp$;
    return Kotlin.compareTo(Kotlin.isComparable(tmp$ = a) ? tmp$ : throwCCE(), b);
  }
  PriorityQueue.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PriorityQueue',
    interfaces: [Collection]
  };
  function AnimationData(name, duration, channels) {
    AnimationData$Companion_getInstance();
    this.name = name;
    this.duration = duration;
    this.channels = channels;
  }
  AnimationData.prototype.getAnimation_wev6wz$ = function (nodes) {
    var anim = new Animation(this.duration);
    var tmp$;
    tmp$ = this.channels.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var node = nodes.get_11rb$(element.name);
      if (node != null) {
        var $receiver = anim.channels;
        var element_0 = element.getNodeAnimation_dm1hwa$(node);
        $receiver.add_11rb$(element_0);
      }}
    return anim;
  };
  function AnimationData$Companion() {
    AnimationData$Companion_instance = this;
  }
  AnimationData$Companion.prototype.serializer = function () {
    return AnimationData$$serializer_getInstance();
  };
  AnimationData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AnimationData$Companion_instance = null;
  function AnimationData$Companion_getInstance() {
    if (AnimationData$Companion_instance === null) {
      new AnimationData$Companion();
    }return AnimationData$Companion_instance;
  }
  function AnimationData$$serializer() {
    this.descriptor_kleob2$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.AnimationData', this, 3);
    this.descriptor.addElement_ivxn3r$('name', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(1));
    this.descriptor.addElement_ivxn3r$('duration', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(2));
    this.descriptor.addElement_ivxn3r$('channels', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(3));
    AnimationData$$serializer_instance = this;
  }
  Object.defineProperty(AnimationData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_kleob2$_0;
    }
  });
  AnimationData$$serializer.prototype.serialize_awe97i$ = function (encoder, value) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeStringElement_bgm7zs$(this.descriptor, 0, value.name);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 1, value.duration);
    output.encodeSerializableElement_blecud$(this.descriptor, 2, new ArrayListSerializer(NodeAnimationData$$serializer_getInstance()), value.channels);
    output.endStructure_qatsm0$(this.descriptor);
  };
  AnimationData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index;
    var bitMask0 = 0;
    var local0
    , local1
    , local2;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case 0:
          local0 = input.decodeStringElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          break;
        case 1:
          local1 = input.decodeFloatElement_3zr2iy$(this.descriptor, 1);
          bitMask0 |= 2;
          break;
        case 2:
          local2 = (bitMask0 & 4) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 2, new ArrayListSerializer(NodeAnimationData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 2, new ArrayListSerializer(NodeAnimationData$$serializer_getInstance()), local2);
          bitMask0 |= 4;
          break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return AnimationData_init(bitMask0, local0, local1, local2, null);
  };
  AnimationData$$serializer.prototype.childSerializers = function () {
    return [internal.StringSerializer, internal.FloatSerializer, new ArrayListSerializer(NodeAnimationData$$serializer_getInstance())];
  };
  AnimationData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var AnimationData$$serializer_instance = null;
  function AnimationData$$serializer_getInstance() {
    if (AnimationData$$serializer_instance === null) {
      new AnimationData$$serializer();
    }return AnimationData$$serializer_instance;
  }
  function AnimationData_init(seen1, name, duration, channels, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(AnimationData.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('name');
    else
      $this.name = name;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('duration');
    else
      $this.duration = duration;
    if ((seen1 & 4) === 0)
      throw new MissingFieldException('channels');
    else
      $this.channels = channels;
    return $this;
  }
  AnimationData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AnimationData',
    interfaces: []
  };
  AnimationData.prototype.component1 = function () {
    return this.name;
  };
  AnimationData.prototype.component2 = function () {
    return this.duration;
  };
  AnimationData.prototype.component3 = function () {
    return this.channels;
  };
  AnimationData.prototype.copy_2yxch5$ = function (name, duration, channels) {
    return new AnimationData(name === void 0 ? this.name : name, duration === void 0 ? this.duration : duration, channels === void 0 ? this.channels : channels);
  };
  AnimationData.prototype.toString = function () {
    return 'AnimationData(name=' + Kotlin.toString(this.name) + (', duration=' + Kotlin.toString(this.duration)) + (', channels=' + Kotlin.toString(this.channels)) + ')';
  };
  AnimationData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.duration) | 0;
    result = result * 31 + Kotlin.hashCode(this.channels) | 0;
    return result;
  };
  AnimationData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.duration, other.duration) && Kotlin.equals(this.channels, other.channels)))));
  };
  function NodeAnimationData(name, positionKeys, rotationKeys, scalingKeys) {
    NodeAnimationData$Companion_getInstance();
    this.name = name;
    this.positionKeys = positionKeys;
    this.rotationKeys = rotationKeys;
    this.scalingKeys = scalingKeys;
  }
  NodeAnimationData.prototype.getNodeAnimation_dm1hwa$ = function (node) {
    var nodeAnim = new NodeAnimation(this.name, node);
    var tmp$;
    tmp$ = this.positionKeys.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var $receiver = nodeAnim.positionKeys;
      var element_0 = element.getPositionKey();
      $receiver.add_11rb$(element_0);
    }
    var tmp$_0;
    tmp$_0 = this.rotationKeys.iterator();
    while (tmp$_0.hasNext()) {
      var element_1 = tmp$_0.next();
      var $receiver_0 = nodeAnim.rotationKeys;
      var element_2 = element_1.getRotationKey();
      $receiver_0.add_11rb$(element_2);
    }
    var tmp$_1;
    tmp$_1 = this.scalingKeys.iterator();
    while (tmp$_1.hasNext()) {
      var element_3 = tmp$_1.next();
      var $receiver_1 = nodeAnim.scalingKeys;
      var element_4 = element_3.getScalingKey();
      $receiver_1.add_11rb$(element_4);
    }
    return nodeAnim;
  };
  function NodeAnimationData$Companion() {
    NodeAnimationData$Companion_instance = this;
  }
  NodeAnimationData$Companion.prototype.serializer = function () {
    return NodeAnimationData$$serializer_getInstance();
  };
  NodeAnimationData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var NodeAnimationData$Companion_instance = null;
  function NodeAnimationData$Companion_getInstance() {
    if (NodeAnimationData$Companion_instance === null) {
      new NodeAnimationData$Companion();
    }return NodeAnimationData$Companion_instance;
  }
  function NodeAnimationData$$serializer() {
    this.descriptor_iysw7k$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.NodeAnimationData', this, 4);
    this.descriptor.addElement_ivxn3r$('name', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(1));
    this.descriptor.addElement_ivxn3r$('positionKeys', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(2));
    this.descriptor.addElement_ivxn3r$('rotationKeys', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(3));
    this.descriptor.addElement_ivxn3r$('scalingKeys', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(4));
    NodeAnimationData$$serializer_instance = this;
  }
  Object.defineProperty(NodeAnimationData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_iysw7k$_0;
    }
  });
  NodeAnimationData$$serializer.prototype.serialize_awe97i$ = function (encoder, value) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeStringElement_bgm7zs$(this.descriptor, 0, value.name);
    output.encodeSerializableElement_blecud$(this.descriptor, 1, new ArrayListSerializer(Vec3KeyData$$serializer_getInstance()), value.positionKeys);
    output.encodeSerializableElement_blecud$(this.descriptor, 2, new ArrayListSerializer(Vec4KeyData$$serializer_getInstance()), value.rotationKeys);
    output.encodeSerializableElement_blecud$(this.descriptor, 3, new ArrayListSerializer(Vec3KeyData$$serializer_getInstance()), value.scalingKeys);
    output.endStructure_qatsm0$(this.descriptor);
  };
  NodeAnimationData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case 0:
          local0 = input.decodeStringElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          break;
        case 1:
          local1 = (bitMask0 & 2) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 1, new ArrayListSerializer(Vec3KeyData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 1, new ArrayListSerializer(Vec3KeyData$$serializer_getInstance()), local1);
          bitMask0 |= 2;
          break;
        case 2:
          local2 = (bitMask0 & 4) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 2, new ArrayListSerializer(Vec4KeyData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 2, new ArrayListSerializer(Vec4KeyData$$serializer_getInstance()), local2);
          bitMask0 |= 4;
          break;
        case 3:
          local3 = (bitMask0 & 8) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 3, new ArrayListSerializer(Vec3KeyData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 3, new ArrayListSerializer(Vec3KeyData$$serializer_getInstance()), local3);
          bitMask0 |= 8;
          break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return NodeAnimationData_init(bitMask0, local0, local1, local2, local3, null);
  };
  NodeAnimationData$$serializer.prototype.childSerializers = function () {
    return [internal.StringSerializer, new ArrayListSerializer(Vec3KeyData$$serializer_getInstance()), new ArrayListSerializer(Vec4KeyData$$serializer_getInstance()), new ArrayListSerializer(Vec3KeyData$$serializer_getInstance())];
  };
  NodeAnimationData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var NodeAnimationData$$serializer_instance = null;
  function NodeAnimationData$$serializer_getInstance() {
    if (NodeAnimationData$$serializer_instance === null) {
      new NodeAnimationData$$serializer();
    }return NodeAnimationData$$serializer_instance;
  }
  function NodeAnimationData_init(seen1, name, positionKeys, rotationKeys, scalingKeys, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(NodeAnimationData.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('name');
    else
      $this.name = name;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('positionKeys');
    else
      $this.positionKeys = positionKeys;
    if ((seen1 & 4) === 0)
      throw new MissingFieldException('rotationKeys');
    else
      $this.rotationKeys = rotationKeys;
    if ((seen1 & 8) === 0)
      throw new MissingFieldException('scalingKeys');
    else
      $this.scalingKeys = scalingKeys;
    return $this;
  }
  NodeAnimationData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NodeAnimationData',
    interfaces: []
  };
  NodeAnimationData.prototype.component1 = function () {
    return this.name;
  };
  NodeAnimationData.prototype.component2 = function () {
    return this.positionKeys;
  };
  NodeAnimationData.prototype.component3 = function () {
    return this.rotationKeys;
  };
  NodeAnimationData.prototype.component4 = function () {
    return this.scalingKeys;
  };
  NodeAnimationData.prototype.copy_2njh0z$ = function (name, positionKeys, rotationKeys, scalingKeys) {
    return new NodeAnimationData(name === void 0 ? this.name : name, positionKeys === void 0 ? this.positionKeys : positionKeys, rotationKeys === void 0 ? this.rotationKeys : rotationKeys, scalingKeys === void 0 ? this.scalingKeys : scalingKeys);
  };
  NodeAnimationData.prototype.toString = function () {
    return 'NodeAnimationData(name=' + Kotlin.toString(this.name) + (', positionKeys=' + Kotlin.toString(this.positionKeys)) + (', rotationKeys=' + Kotlin.toString(this.rotationKeys)) + (', scalingKeys=' + Kotlin.toString(this.scalingKeys)) + ')';
  };
  NodeAnimationData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.positionKeys) | 0;
    result = result * 31 + Kotlin.hashCode(this.rotationKeys) | 0;
    result = result * 31 + Kotlin.hashCode(this.scalingKeys) | 0;
    return result;
  };
  NodeAnimationData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.positionKeys, other.positionKeys) && Kotlin.equals(this.rotationKeys, other.rotationKeys) && Kotlin.equals(this.scalingKeys, other.scalingKeys)))));
  };
  function Vec3KeyData(time, x, y, z) {
    Vec3KeyData$Companion_getInstance();
    this.time = time;
    this.x = x;
    this.y = y;
    this.z = z;
  }
  Vec3KeyData.prototype.getPositionKey = function () {
    return new PositionKey(this.time, new Vec3f(this.x, this.y, this.z));
  };
  Vec3KeyData.prototype.getScalingKey = function () {
    return new ScalingKey(this.time, new Vec3f(this.x, this.y, this.z));
  };
  function Vec3KeyData$Companion() {
    Vec3KeyData$Companion_instance = this;
  }
  Vec3KeyData$Companion.prototype.serializer = function () {
    return Vec3KeyData$$serializer_getInstance();
  };
  Vec3KeyData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vec3KeyData$Companion_instance = null;
  function Vec3KeyData$Companion_getInstance() {
    if (Vec3KeyData$Companion_instance === null) {
      new Vec3KeyData$Companion();
    }return Vec3KeyData$Companion_instance;
  }
  function Vec3KeyData$$serializer() {
    this.descriptor_e85keq$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.Vec3KeyData', this, 4);
    this.descriptor.addElement_ivxn3r$('time', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(1));
    this.descriptor.addElement_ivxn3r$('x', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(2));
    this.descriptor.addElement_ivxn3r$('y', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(3));
    this.descriptor.addElement_ivxn3r$('z', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(4));
    Vec3KeyData$$serializer_instance = this;
  }
  Object.defineProperty(Vec3KeyData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_e85keq$_0;
    }
  });
  Vec3KeyData$$serializer.prototype.serialize_awe97i$ = function (encoder, value) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 0, value.time);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 1, value.x);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 2, value.y);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 3, value.z);
    output.endStructure_qatsm0$(this.descriptor);
  };
  Vec3KeyData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case 0:
          local0 = input.decodeFloatElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          break;
        case 1:
          local1 = input.decodeFloatElement_3zr2iy$(this.descriptor, 1);
          bitMask0 |= 2;
          break;
        case 2:
          local2 = input.decodeFloatElement_3zr2iy$(this.descriptor, 2);
          bitMask0 |= 4;
          break;
        case 3:
          local3 = input.decodeFloatElement_3zr2iy$(this.descriptor, 3);
          bitMask0 |= 8;
          break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return Vec3KeyData_init(bitMask0, local0, local1, local2, local3, null);
  };
  Vec3KeyData$$serializer.prototype.childSerializers = function () {
    return [internal.FloatSerializer, internal.FloatSerializer, internal.FloatSerializer, internal.FloatSerializer];
  };
  Vec3KeyData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var Vec3KeyData$$serializer_instance = null;
  function Vec3KeyData$$serializer_getInstance() {
    if (Vec3KeyData$$serializer_instance === null) {
      new Vec3KeyData$$serializer();
    }return Vec3KeyData$$serializer_instance;
  }
  function Vec3KeyData_init(seen1, time, x, y, z, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(Vec3KeyData.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('time');
    else
      $this.time = time;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('x');
    else
      $this.x = x;
    if ((seen1 & 4) === 0)
      throw new MissingFieldException('y');
    else
      $this.y = y;
    if ((seen1 & 8) === 0)
      throw new MissingFieldException('z');
    else
      $this.z = z;
    return $this;
  }
  Vec3KeyData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec3KeyData',
    interfaces: []
  };
  Vec3KeyData.prototype.component1 = function () {
    return this.time;
  };
  Vec3KeyData.prototype.component2 = function () {
    return this.x;
  };
  Vec3KeyData.prototype.component3 = function () {
    return this.y;
  };
  Vec3KeyData.prototype.component4 = function () {
    return this.z;
  };
  Vec3KeyData.prototype.copy_7b5o5w$ = function (time, x, y, z) {
    return new Vec3KeyData(time === void 0 ? this.time : time, x === void 0 ? this.x : x, y === void 0 ? this.y : y, z === void 0 ? this.z : z);
  };
  Vec3KeyData.prototype.toString = function () {
    return 'Vec3KeyData(time=' + Kotlin.toString(this.time) + (', x=' + Kotlin.toString(this.x)) + (', y=' + Kotlin.toString(this.y)) + (', z=' + Kotlin.toString(this.z)) + ')';
  };
  Vec3KeyData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.time) | 0;
    result = result * 31 + Kotlin.hashCode(this.x) | 0;
    result = result * 31 + Kotlin.hashCode(this.y) | 0;
    result = result * 31 + Kotlin.hashCode(this.z) | 0;
    return result;
  };
  Vec3KeyData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.time, other.time) && Kotlin.equals(this.x, other.x) && Kotlin.equals(this.y, other.y) && Kotlin.equals(this.z, other.z)))));
  };
  function Vec4KeyData(time, x, y, z, w) {
    Vec4KeyData$Companion_getInstance();
    this.time = time;
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
  }
  Vec4KeyData.prototype.getRotationKey = function () {
    return new RotationKey(this.time, new Vec4f(this.x, this.y, this.z, this.w));
  };
  function Vec4KeyData$Companion() {
    Vec4KeyData$Companion_instance = this;
  }
  Vec4KeyData$Companion.prototype.serializer = function () {
    return Vec4KeyData$$serializer_getInstance();
  };
  Vec4KeyData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vec4KeyData$Companion_instance = null;
  function Vec4KeyData$Companion_getInstance() {
    if (Vec4KeyData$Companion_instance === null) {
      new Vec4KeyData$Companion();
    }return Vec4KeyData$Companion_instance;
  }
  function Vec4KeyData$$serializer() {
    this.descriptor_nk6zil$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.Vec4KeyData', this, 5);
    this.descriptor.addElement_ivxn3r$('time', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(1));
    this.descriptor.addElement_ivxn3r$('x', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(2));
    this.descriptor.addElement_ivxn3r$('y', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(3));
    this.descriptor.addElement_ivxn3r$('z', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(4));
    this.descriptor.addElement_ivxn3r$('w', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(5));
    Vec4KeyData$$serializer_instance = this;
  }
  Object.defineProperty(Vec4KeyData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_nk6zil$_0;
    }
  });
  Vec4KeyData$$serializer.prototype.serialize_awe97i$ = function (encoder, value) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 0, value.time);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 1, value.x);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 2, value.y);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 3, value.z);
    output.encodeFloatElement_t7qhdx$(this.descriptor, 4, value.w);
    output.endStructure_qatsm0$(this.descriptor);
  };
  Vec4KeyData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3
    , local4;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case 0:
          local0 = input.decodeFloatElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          break;
        case 1:
          local1 = input.decodeFloatElement_3zr2iy$(this.descriptor, 1);
          bitMask0 |= 2;
          break;
        case 2:
          local2 = input.decodeFloatElement_3zr2iy$(this.descriptor, 2);
          bitMask0 |= 4;
          break;
        case 3:
          local3 = input.decodeFloatElement_3zr2iy$(this.descriptor, 3);
          bitMask0 |= 8;
          break;
        case 4:
          local4 = input.decodeFloatElement_3zr2iy$(this.descriptor, 4);
          bitMask0 |= 16;
          break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return Vec4KeyData_init(bitMask0, local0, local1, local2, local3, local4, null);
  };
  Vec4KeyData$$serializer.prototype.childSerializers = function () {
    return [internal.FloatSerializer, internal.FloatSerializer, internal.FloatSerializer, internal.FloatSerializer, internal.FloatSerializer];
  };
  Vec4KeyData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var Vec4KeyData$$serializer_instance = null;
  function Vec4KeyData$$serializer_getInstance() {
    if (Vec4KeyData$$serializer_instance === null) {
      new Vec4KeyData$$serializer();
    }return Vec4KeyData$$serializer_instance;
  }
  function Vec4KeyData_init(seen1, time, x, y, z, w, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(Vec4KeyData.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('time');
    else
      $this.time = time;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('x');
    else
      $this.x = x;
    if ((seen1 & 4) === 0)
      throw new MissingFieldException('y');
    else
      $this.y = y;
    if ((seen1 & 8) === 0)
      throw new MissingFieldException('z');
    else
      $this.z = z;
    if ((seen1 & 16) === 0)
      throw new MissingFieldException('w');
    else
      $this.w = w;
    return $this;
  }
  Vec4KeyData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec4KeyData',
    interfaces: []
  };
  Vec4KeyData.prototype.component1 = function () {
    return this.time;
  };
  Vec4KeyData.prototype.component2 = function () {
    return this.x;
  };
  Vec4KeyData.prototype.component3 = function () {
    return this.y;
  };
  Vec4KeyData.prototype.component4 = function () {
    return this.z;
  };
  Vec4KeyData.prototype.component5 = function () {
    return this.w;
  };
  Vec4KeyData.prototype.copy_s2l86p$ = function (time, x, y, z, w) {
    return new Vec4KeyData(time === void 0 ? this.time : time, x === void 0 ? this.x : x, y === void 0 ? this.y : y, z === void 0 ? this.z : z, w === void 0 ? this.w : w);
  };
  Vec4KeyData.prototype.toString = function () {
    return 'Vec4KeyData(time=' + Kotlin.toString(this.time) + (', x=' + Kotlin.toString(this.x)) + (', y=' + Kotlin.toString(this.y)) + (', z=' + Kotlin.toString(this.z)) + (', w=' + Kotlin.toString(this.w)) + ')';
  };
  Vec4KeyData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.time) | 0;
    result = result * 31 + Kotlin.hashCode(this.x) | 0;
    result = result * 31 + Kotlin.hashCode(this.y) | 0;
    result = result * 31 + Kotlin.hashCode(this.z) | 0;
    result = result * 31 + Kotlin.hashCode(this.w) | 0;
    return result;
  };
  Vec4KeyData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.time, other.time) && Kotlin.equals(this.x, other.x) && Kotlin.equals(this.y, other.y) && Kotlin.equals(this.z, other.z) && Kotlin.equals(this.w, other.w)))));
  };
  function BoneData(name, parent, children, offsetMatrix, vertexIds, vertexWeights) {
    BoneData$Companion_getInstance();
    if (children === void 0)
      children = emptyList();
    this.name = name;
    this.parent = parent;
    this.children = children;
    this.offsetMatrix = offsetMatrix;
    this.vertexIds = vertexIds;
    this.vertexWeights = vertexWeights;
  }
  function BoneData$Companion() {
    BoneData$Companion_instance = this;
  }
  BoneData$Companion.prototype.serializer = function () {
    return BoneData$$serializer_getInstance();
  };
  BoneData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var BoneData$Companion_instance = null;
  function BoneData$Companion_getInstance() {
    if (BoneData$Companion_instance === null) {
      new BoneData$Companion();
    }return BoneData$Companion_instance;
  }
  function BoneData$$serializer() {
    this.descriptor_kdtvdg$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.BoneData', this, 6);
    this.descriptor.addElement_ivxn3r$('name', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(1));
    this.descriptor.addElement_ivxn3r$('parent', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(2));
    this.descriptor.addElement_ivxn3r$('children', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(3));
    this.descriptor.addElement_ivxn3r$('offsetMatrix', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(4));
    this.descriptor.addElement_ivxn3r$('vertexIds', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(5));
    this.descriptor.addElement_ivxn3r$('vertexWeights', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(6));
    BoneData$$serializer_instance = this;
  }
  Object.defineProperty(BoneData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_kdtvdg$_0;
    }
  });
  BoneData$$serializer.prototype.serialize_awe97i$ = function (encoder, value) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeStringElement_bgm7zs$(this.descriptor, 0, value.name);
    output.encodeStringElement_bgm7zs$(this.descriptor, 1, value.parent);
    if (!equals(value.children, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 2))
      output.encodeSerializableElement_blecud$(this.descriptor, 2, new ArrayListSerializer(internal.StringSerializer), value.children);
    output.encodeSerializableElement_blecud$(this.descriptor, 3, new ArrayListSerializer(internal.FloatSerializer), value.offsetMatrix);
    output.encodeSerializableElement_blecud$(this.descriptor, 4, new ArrayListSerializer(internal.IntSerializer), value.vertexIds);
    output.encodeSerializableElement_blecud$(this.descriptor, 5, new ArrayListSerializer(internal.FloatSerializer), value.vertexWeights);
    output.endStructure_qatsm0$(this.descriptor);
  };
  BoneData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3
    , local4
    , local5;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case 0:
          local0 = input.decodeStringElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          break;
        case 1:
          local1 = input.decodeStringElement_3zr2iy$(this.descriptor, 1);
          bitMask0 |= 2;
          break;
        case 2:
          local2 = (bitMask0 & 4) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 2, new ArrayListSerializer(internal.StringSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 2, new ArrayListSerializer(internal.StringSerializer), local2);
          bitMask0 |= 4;
          break;
        case 3:
          local3 = (bitMask0 & 8) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 3, new ArrayListSerializer(internal.FloatSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 3, new ArrayListSerializer(internal.FloatSerializer), local3);
          bitMask0 |= 8;
          break;
        case 4:
          local4 = (bitMask0 & 16) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 4, new ArrayListSerializer(internal.IntSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 4, new ArrayListSerializer(internal.IntSerializer), local4);
          bitMask0 |= 16;
          break;
        case 5:
          local5 = (bitMask0 & 32) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 5, new ArrayListSerializer(internal.FloatSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 5, new ArrayListSerializer(internal.FloatSerializer), local5);
          bitMask0 |= 32;
          break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return BoneData_init(bitMask0, local0, local1, local2, local3, local4, local5, null);
  };
  BoneData$$serializer.prototype.childSerializers = function () {
    return [internal.StringSerializer, internal.StringSerializer, new ArrayListSerializer(internal.StringSerializer), new ArrayListSerializer(internal.FloatSerializer), new ArrayListSerializer(internal.IntSerializer), new ArrayListSerializer(internal.FloatSerializer)];
  };
  BoneData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var BoneData$$serializer_instance = null;
  function BoneData$$serializer_getInstance() {
    if (BoneData$$serializer_instance === null) {
      new BoneData$$serializer();
    }return BoneData$$serializer_instance;
  }
  function BoneData_init(seen1, name, parent, children, offsetMatrix, vertexIds, vertexWeights, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(BoneData.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('name');
    else
      $this.name = name;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('parent');
    else
      $this.parent = parent;
    if ((seen1 & 4) === 0)
      $this.children = emptyList();
    else
      $this.children = children;
    if ((seen1 & 8) === 0)
      throw new MissingFieldException('offsetMatrix');
    else
      $this.offsetMatrix = offsetMatrix;
    if ((seen1 & 16) === 0)
      throw new MissingFieldException('vertexIds');
    else
      $this.vertexIds = vertexIds;
    if ((seen1 & 32) === 0)
      throw new MissingFieldException('vertexWeights');
    else
      $this.vertexWeights = vertexWeights;
    return $this;
  }
  BoneData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BoneData',
    interfaces: []
  };
  BoneData.prototype.component1 = function () {
    return this.name;
  };
  BoneData.prototype.component2 = function () {
    return this.parent;
  };
  BoneData.prototype.component3 = function () {
    return this.children;
  };
  BoneData.prototype.component4 = function () {
    return this.offsetMatrix;
  };
  BoneData.prototype.component5 = function () {
    return this.vertexIds;
  };
  BoneData.prototype.component6 = function () {
    return this.vertexWeights;
  };
  BoneData.prototype.copy_n6d2h0$ = function (name, parent, children, offsetMatrix, vertexIds, vertexWeights) {
    return new BoneData(name === void 0 ? this.name : name, parent === void 0 ? this.parent : parent, children === void 0 ? this.children : children, offsetMatrix === void 0 ? this.offsetMatrix : offsetMatrix, vertexIds === void 0 ? this.vertexIds : vertexIds, vertexWeights === void 0 ? this.vertexWeights : vertexWeights);
  };
  BoneData.prototype.toString = function () {
    return 'BoneData(name=' + Kotlin.toString(this.name) + (', parent=' + Kotlin.toString(this.parent)) + (', children=' + Kotlin.toString(this.children)) + (', offsetMatrix=' + Kotlin.toString(this.offsetMatrix)) + (', vertexIds=' + Kotlin.toString(this.vertexIds)) + (', vertexWeights=' + Kotlin.toString(this.vertexWeights)) + ')';
  };
  BoneData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.parent) | 0;
    result = result * 31 + Kotlin.hashCode(this.children) | 0;
    result = result * 31 + Kotlin.hashCode(this.offsetMatrix) | 0;
    result = result * 31 + Kotlin.hashCode(this.vertexIds) | 0;
    result = result * 31 + Kotlin.hashCode(this.vertexWeights) | 0;
    return result;
  };
  BoneData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.parent, other.parent) && Kotlin.equals(this.children, other.children) && Kotlin.equals(this.offsetMatrix, other.offsetMatrix) && Kotlin.equals(this.vertexIds, other.vertexIds) && Kotlin.equals(this.vertexWeights, other.vertexWeights)))));
  };
  function MaterialData(name, ambientColor, diffuseColor, specularColor, emissiveColor, shininess, reflectivity) {
    MaterialData$Companion_getInstance();
    if (name === void 0)
      name = '';
    if (ambientColor === void 0)
      ambientColor = emptyList();
    if (diffuseColor === void 0)
      diffuseColor = emptyList();
    if (specularColor === void 0)
      specularColor = emptyList();
    if (emissiveColor === void 0)
      emissiveColor = emptyList();
    if (shininess === void 0)
      shininess = 10.0;
    if (reflectivity === void 0)
      reflectivity = 0.0;
    this.name = name;
    this.ambientColor = ambientColor;
    this.diffuseColor = diffuseColor;
    this.specularColor = specularColor;
    this.emissiveColor = emissiveColor;
    this.shininess = shininess;
    this.reflectivity = reflectivity;
  }
  MaterialData.prototype.getAmbientColor_b0h0gw$ = function (result) {
    if (result === void 0)
      result = MutableColor_init();
    return this.getColor_0(this.ambientColor, result);
  };
  MaterialData.prototype.getDiffuseColor_b0h0gw$ = function (result) {
    if (result === void 0)
      result = MutableColor_init();
    return this.getColor_0(this.diffuseColor, result);
  };
  MaterialData.prototype.getSpecularColor_b0h0gw$ = function (result) {
    if (result === void 0)
      result = MutableColor_init();
    return this.getColor_0(this.specularColor, result);
  };
  MaterialData.prototype.getEmissiveColor_b0h0gw$ = function (result) {
    if (result === void 0)
      result = MutableColor_init();
    return this.getColor_0(this.emissiveColor, result);
  };
  MaterialData.prototype.getColor_0 = function ($receiver, result) {
    if ($receiver.isEmpty())
      result.set_d7aj7k$(Color$Companion_getInstance().GRAY);
    else if ($receiver.size === 3)
      result.set_7b5o5w$($receiver.get_za3lpa$(0), $receiver.get_za3lpa$(1), $receiver.get_za3lpa$(2), 1.0);
    else if ($receiver.size === 4)
      result.set_7b5o5w$($receiver.get_za3lpa$(0), $receiver.get_za3lpa$(1), $receiver.get_za3lpa$(2), $receiver.get_za3lpa$(3));
    return result;
  };
  function MaterialData$Companion() {
    MaterialData$Companion_instance = this;
  }
  MaterialData$Companion.prototype.serializer = function () {
    return MaterialData$$serializer_getInstance();
  };
  MaterialData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MaterialData$Companion_instance = null;
  function MaterialData$Companion_getInstance() {
    if (MaterialData$Companion_instance === null) {
      new MaterialData$Companion();
    }return MaterialData$Companion_instance;
  }
  function MaterialData$$serializer() {
    this.descriptor_tygdqh$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.MaterialData', this, 7);
    this.descriptor.addElement_ivxn3r$('name', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(1));
    this.descriptor.addElement_ivxn3r$('ambientColor', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(2));
    this.descriptor.addElement_ivxn3r$('diffuseColor', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(3));
    this.descriptor.addElement_ivxn3r$('specularColor', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(4));
    this.descriptor.addElement_ivxn3r$('emissiveColor', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(5));
    this.descriptor.addElement_ivxn3r$('shininess', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(6));
    this.descriptor.addElement_ivxn3r$('reflectivity', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(7));
    MaterialData$$serializer_instance = this;
  }
  Object.defineProperty(MaterialData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_tygdqh$_0;
    }
  });
  MaterialData$$serializer.prototype.serialize_awe97i$ = function (encoder, value) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    if (!equals(value.name, '') || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 0))
      output.encodeStringElement_bgm7zs$(this.descriptor, 0, value.name);
    if (!equals(value.ambientColor, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 1))
      output.encodeSerializableElement_blecud$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer), value.ambientColor);
    if (!equals(value.diffuseColor, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 2))
      output.encodeSerializableElement_blecud$(this.descriptor, 2, new ArrayListSerializer(internal.FloatSerializer), value.diffuseColor);
    if (!equals(value.specularColor, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 3))
      output.encodeSerializableElement_blecud$(this.descriptor, 3, new ArrayListSerializer(internal.FloatSerializer), value.specularColor);
    if (!equals(value.emissiveColor, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 4))
      output.encodeSerializableElement_blecud$(this.descriptor, 4, new ArrayListSerializer(internal.FloatSerializer), value.emissiveColor);
    if (!equals(value.shininess, 10.0) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 5))
      output.encodeFloatElement_t7qhdx$(this.descriptor, 5, value.shininess);
    if (!equals(value.reflectivity, 0.0) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 6))
      output.encodeFloatElement_t7qhdx$(this.descriptor, 6, value.reflectivity);
    output.endStructure_qatsm0$(this.descriptor);
  };
  MaterialData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3
    , local4
    , local5
    , local6;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case 0:
          local0 = input.decodeStringElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          break;
        case 1:
          local1 = (bitMask0 & 2) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer), local1);
          bitMask0 |= 2;
          break;
        case 2:
          local2 = (bitMask0 & 4) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 2, new ArrayListSerializer(internal.FloatSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 2, new ArrayListSerializer(internal.FloatSerializer), local2);
          bitMask0 |= 4;
          break;
        case 3:
          local3 = (bitMask0 & 8) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 3, new ArrayListSerializer(internal.FloatSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 3, new ArrayListSerializer(internal.FloatSerializer), local3);
          bitMask0 |= 8;
          break;
        case 4:
          local4 = (bitMask0 & 16) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 4, new ArrayListSerializer(internal.FloatSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 4, new ArrayListSerializer(internal.FloatSerializer), local4);
          bitMask0 |= 16;
          break;
        case 5:
          local5 = input.decodeFloatElement_3zr2iy$(this.descriptor, 5);
          bitMask0 |= 32;
          break;
        case 6:
          local6 = input.decodeFloatElement_3zr2iy$(this.descriptor, 6);
          bitMask0 |= 64;
          break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return MaterialData_init(bitMask0, local0, local1, local2, local3, local4, local5, local6, null);
  };
  MaterialData$$serializer.prototype.childSerializers = function () {
    return [internal.StringSerializer, new ArrayListSerializer(internal.FloatSerializer), new ArrayListSerializer(internal.FloatSerializer), new ArrayListSerializer(internal.FloatSerializer), new ArrayListSerializer(internal.FloatSerializer), internal.FloatSerializer, internal.FloatSerializer];
  };
  MaterialData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var MaterialData$$serializer_instance = null;
  function MaterialData$$serializer_getInstance() {
    if (MaterialData$$serializer_instance === null) {
      new MaterialData$$serializer();
    }return MaterialData$$serializer_instance;
  }
  function MaterialData_init(seen1, name, ambientColor, diffuseColor, specularColor, emissiveColor, shininess, reflectivity, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(MaterialData.prototype);
    if ((seen1 & 1) === 0)
      $this.name = '';
    else
      $this.name = name;
    if ((seen1 & 2) === 0)
      $this.ambientColor = emptyList();
    else
      $this.ambientColor = ambientColor;
    if ((seen1 & 4) === 0)
      $this.diffuseColor = emptyList();
    else
      $this.diffuseColor = diffuseColor;
    if ((seen1 & 8) === 0)
      $this.specularColor = emptyList();
    else
      $this.specularColor = specularColor;
    if ((seen1 & 16) === 0)
      $this.emissiveColor = emptyList();
    else
      $this.emissiveColor = emissiveColor;
    if ((seen1 & 32) === 0)
      $this.shininess = 10.0;
    else
      $this.shininess = shininess;
    if ((seen1 & 64) === 0)
      $this.reflectivity = 0.0;
    else
      $this.reflectivity = reflectivity;
    return $this;
  }
  MaterialData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MaterialData',
    interfaces: []
  };
  MaterialData.prototype.component1 = function () {
    return this.name;
  };
  MaterialData.prototype.component2 = function () {
    return this.ambientColor;
  };
  MaterialData.prototype.component3 = function () {
    return this.diffuseColor;
  };
  MaterialData.prototype.component4 = function () {
    return this.specularColor;
  };
  MaterialData.prototype.component5 = function () {
    return this.emissiveColor;
  };
  MaterialData.prototype.component6 = function () {
    return this.shininess;
  };
  MaterialData.prototype.component7 = function () {
    return this.reflectivity;
  };
  MaterialData.prototype.copy_y5640y$ = function (name, ambientColor, diffuseColor, specularColor, emissiveColor, shininess, reflectivity) {
    return new MaterialData(name === void 0 ? this.name : name, ambientColor === void 0 ? this.ambientColor : ambientColor, diffuseColor === void 0 ? this.diffuseColor : diffuseColor, specularColor === void 0 ? this.specularColor : specularColor, emissiveColor === void 0 ? this.emissiveColor : emissiveColor, shininess === void 0 ? this.shininess : shininess, reflectivity === void 0 ? this.reflectivity : reflectivity);
  };
  MaterialData.prototype.toString = function () {
    return 'MaterialData(name=' + Kotlin.toString(this.name) + (', ambientColor=' + Kotlin.toString(this.ambientColor)) + (', diffuseColor=' + Kotlin.toString(this.diffuseColor)) + (', specularColor=' + Kotlin.toString(this.specularColor)) + (', emissiveColor=' + Kotlin.toString(this.emissiveColor)) + (', shininess=' + Kotlin.toString(this.shininess)) + (', reflectivity=' + Kotlin.toString(this.reflectivity)) + ')';
  };
  MaterialData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.ambientColor) | 0;
    result = result * 31 + Kotlin.hashCode(this.diffuseColor) | 0;
    result = result * 31 + Kotlin.hashCode(this.specularColor) | 0;
    result = result * 31 + Kotlin.hashCode(this.emissiveColor) | 0;
    result = result * 31 + Kotlin.hashCode(this.shininess) | 0;
    result = result * 31 + Kotlin.hashCode(this.reflectivity) | 0;
    return result;
  };
  MaterialData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.ambientColor, other.ambientColor) && Kotlin.equals(this.diffuseColor, other.diffuseColor) && Kotlin.equals(this.specularColor, other.specularColor) && Kotlin.equals(this.emissiveColor, other.emissiveColor) && Kotlin.equals(this.shininess, other.shininess) && Kotlin.equals(this.reflectivity, other.reflectivity)))));
  };
  function ModelData(version, name, meshes, lodRootNodes, materials) {
    ModelData$Companion_getInstance();
    if (name === void 0)
      name = '';
    if (materials === void 0)
      materials = emptyList();
    this.version = version;
    this.name = name;
    this.meshes = meshes;
    this.lodRootNodes = lodRootNodes;
    this.materials = materials;
  }
  function ModelData$toModel$lambda(it) {
    return (new TransformGroup(it.name)).set_d4zu6j$(it.getTransformMatrix_d4zu6j$());
  }
  function ModelData$toModel$lambda_0(this$ModelData) {
    return function (it) {
      return it.toMesh_8p8ifh$(this$ModelData);
    };
  }
  ModelData.prototype.toModel_za3lpa$ = function (lod) {
    if (lod === void 0)
      lod = 0;
    return this.toModel_9ydiig$(lod, ModelData$toModel$lambda, ModelData$toModel$lambda_0(this));
  };
  ModelData.prototype.toModel_9ydiig$ = function (lod, nodeMapper, meshMapper) {
    return this.toGroup_0(this.lodRootNodes.get_za3lpa$(lod), nodeMapper, meshMapper);
  };
  ModelData.prototype.toGroup_0 = function ($receiver, nodeMapper, meshMapper) {
    var tmp$, tmp$_0;
    var group = nodeMapper($receiver);
    tmp$ = $receiver.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      group.plusAssign_f1kmr1$(this.toGroup_0(child, nodeMapper, meshMapper));
    }
    tmp$_0 = $receiver.meshes.iterator();
    while (tmp$_0.hasNext()) {
      var meshIdx = tmp$_0.next();
      if (get_indices(this.meshes).contains_mef7kx$(meshIdx)) {
        var mesh = meshMapper(this.meshes.get_za3lpa$(meshIdx));
        if (mesh != null) {
          group.plusAssign_f1kmr1$(mesh);
        }} else {
        var $this = package$util.Log;
        var level = Log$Level.ERROR;
        var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
        if (level.level >= $this.level.level) {
          $this.printer(level, tag, 'Invalid mesh index: ' + meshIdx);
        }}
    }
    if (!$receiver.tags.isEmpty()) {
      var tmp$_1;
      tmp$_1 = $receiver.tags.iterator();
      while (tmp$_1.hasNext()) {
        var element = tmp$_1.next();
        group.tags.plusAssign_61zpoe$(element);
      }
    }return group;
  };
  function ModelData$Companion() {
    ModelData$Companion_instance = this;
    this.VERSION = 2;
  }
  ModelData$Companion.prototype.load_fqrh44$ = function (data) {
    var $receiver = ProtoBuf.Default;
    var model = $receiver.load_dntfbn$(getContextualOrDefault($receiver.context, getKClass(ModelData)), data);
    if (model.version !== 2) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Unsupported model version: ' + model.version + ' (should be ' + '2' + ')');
      }}return model;
  };
  ModelData$Companion.prototype.serializer = function () {
    return ModelData$$serializer_getInstance();
  };
  ModelData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ModelData$Companion_instance = null;
  function ModelData$Companion_getInstance() {
    if (ModelData$Companion_instance === null) {
      new ModelData$Companion();
    }return ModelData$Companion_instance;
  }
  function ModelData$$serializer() {
    this.descriptor_mny3o7$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.ModelData', this, 5);
    this.descriptor.addElement_ivxn3r$('version', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(1));
    this.descriptor.addElement_ivxn3r$('name', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(5));
    this.descriptor.addElement_ivxn3r$('meshes', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(2));
    this.descriptor.addElement_ivxn3r$('lodRootNodes', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(3));
    this.descriptor.addElement_ivxn3r$('materials', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(4));
    ModelData$$serializer_instance = this;
  }
  Object.defineProperty(ModelData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_mny3o7$_0;
    }
  });
  ModelData$$serializer.prototype.serialize_awe97i$ = function (encoder, value) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeIntElement_4wpqag$(this.descriptor, 0, value.version);
    if (!equals(value.name, '') || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 1))
      output.encodeStringElement_bgm7zs$(this.descriptor, 1, value.name);
    output.encodeSerializableElement_blecud$(this.descriptor, 2, new ArrayListSerializer(ModelMeshData$$serializer_getInstance()), value.meshes);
    output.encodeSerializableElement_blecud$(this.descriptor, 3, new ArrayListSerializer(ModelNodeData$$serializer_getInstance()), value.lodRootNodes);
    if (!equals(value.materials, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 4))
      output.encodeSerializableElement_blecud$(this.descriptor, 4, new ArrayListSerializer(MaterialData$$serializer_getInstance()), value.materials);
    output.endStructure_qatsm0$(this.descriptor);
  };
  ModelData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3
    , local4;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case 0:
          local0 = input.decodeIntElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          break;
        case 1:
          local1 = input.decodeStringElement_3zr2iy$(this.descriptor, 1);
          bitMask0 |= 2;
          break;
        case 2:
          local2 = (bitMask0 & 4) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 2, new ArrayListSerializer(ModelMeshData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 2, new ArrayListSerializer(ModelMeshData$$serializer_getInstance()), local2);
          bitMask0 |= 4;
          break;
        case 3:
          local3 = (bitMask0 & 8) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 3, new ArrayListSerializer(ModelNodeData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 3, new ArrayListSerializer(ModelNodeData$$serializer_getInstance()), local3);
          bitMask0 |= 8;
          break;
        case 4:
          local4 = (bitMask0 & 16) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 4, new ArrayListSerializer(MaterialData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 4, new ArrayListSerializer(MaterialData$$serializer_getInstance()), local4);
          bitMask0 |= 16;
          break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return ModelData_init(bitMask0, local0, local1, local2, local3, local4, null);
  };
  ModelData$$serializer.prototype.childSerializers = function () {
    return [internal.IntSerializer, internal.StringSerializer, new ArrayListSerializer(ModelMeshData$$serializer_getInstance()), new ArrayListSerializer(ModelNodeData$$serializer_getInstance()), new ArrayListSerializer(MaterialData$$serializer_getInstance())];
  };
  ModelData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var ModelData$$serializer_instance = null;
  function ModelData$$serializer_getInstance() {
    if (ModelData$$serializer_instance === null) {
      new ModelData$$serializer();
    }return ModelData$$serializer_instance;
  }
  function ModelData_init(seen1, version, name, meshes, lodRootNodes, materials, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(ModelData.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('version');
    else
      $this.version = version;
    if ((seen1 & 2) === 0)
      $this.name = '';
    else
      $this.name = name;
    if ((seen1 & 4) === 0)
      throw new MissingFieldException('meshes');
    else
      $this.meshes = meshes;
    if ((seen1 & 8) === 0)
      throw new MissingFieldException('lodRootNodes');
    else
      $this.lodRootNodes = lodRootNodes;
    if ((seen1 & 16) === 0)
      $this.materials = emptyList();
    else
      $this.materials = materials;
    return $this;
  }
  ModelData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelData',
    interfaces: []
  };
  ModelData.prototype.component1 = function () {
    return this.version;
  };
  ModelData.prototype.component2 = function () {
    return this.name;
  };
  ModelData.prototype.component3 = function () {
    return this.meshes;
  };
  ModelData.prototype.component4 = function () {
    return this.lodRootNodes;
  };
  ModelData.prototype.component5 = function () {
    return this.materials;
  };
  ModelData.prototype.copy_1zs07a$ = function (version, name, meshes, lodRootNodes, materials) {
    return new ModelData(version === void 0 ? this.version : version, name === void 0 ? this.name : name, meshes === void 0 ? this.meshes : meshes, lodRootNodes === void 0 ? this.lodRootNodes : lodRootNodes, materials === void 0 ? this.materials : materials);
  };
  ModelData.prototype.toString = function () {
    return 'ModelData(version=' + Kotlin.toString(this.version) + (', name=' + Kotlin.toString(this.name)) + (', meshes=' + Kotlin.toString(this.meshes)) + (', lodRootNodes=' + Kotlin.toString(this.lodRootNodes)) + (', materials=' + Kotlin.toString(this.materials)) + ')';
  };
  ModelData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.version) | 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.meshes) | 0;
    result = result * 31 + Kotlin.hashCode(this.lodRootNodes) | 0;
    result = result * 31 + Kotlin.hashCode(this.materials) | 0;
    return result;
  };
  ModelData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.version, other.version) && Kotlin.equals(this.name, other.name) && Kotlin.equals(this.meshes, other.meshes) && Kotlin.equals(this.lodRootNodes, other.lodRootNodes) && Kotlin.equals(this.materials, other.materials)))));
  };
  function ModelNodeData(name, transform, children, meshes, tags) {
    ModelNodeData$Companion_getInstance();
    if (children === void 0)
      children = emptyList();
    if (meshes === void 0)
      meshes = emptyList();
    if (tags === void 0)
      tags = emptyList();
    this.name = name;
    this.transform = transform;
    this.children = children;
    this.meshes = meshes;
    this.tags = tags;
  }
  ModelNodeData.prototype.getTransformMatrix_d4zu6j$ = function (result) {
    if (result === void 0)
      result = new Mat4f();
    return result.set_hcyabg$(this.transform);
  };
  ModelNodeData.prototype.printNodeHierarchy_5d1dlw$ = function (model, indent) {
    if (indent === void 0)
      indent = '';
    println_0(indent + '+' + this.name);
    var tmp$;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.printNodeHierarchy_5d1dlw$(model, indent + '  ');
    }
    var tmp$_0;
    tmp$_0 = this.meshes.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      println_0(indent + '  -' + model.meshes.get_za3lpa$(element_0).name);
    }
  };
  ModelNodeData.prototype.countMeshesBelow = function () {
    var tmp$ = this.meshes.size;
    var tmp$_0;
    var sum = 0;
    tmp$_0 = this.children.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      sum = sum + element.countMeshesBelow() | 0;
    }
    return tmp$ + sum | 0;
  };
  function ModelNodeData$Companion() {
    ModelNodeData$Companion_instance = this;
  }
  ModelNodeData$Companion.prototype.serializer = function () {
    return ModelNodeData$$serializer_getInstance();
  };
  ModelNodeData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ModelNodeData$Companion_instance = null;
  function ModelNodeData$Companion_getInstance() {
    if (ModelNodeData$Companion_instance === null) {
      new ModelNodeData$Companion();
    }return ModelNodeData$Companion_instance;
  }
  function ModelNodeData$$serializer() {
    this.descriptor_q2xdmh$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.ModelNodeData', this, 5);
    this.descriptor.addElement_ivxn3r$('name', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(1));
    this.descriptor.addElement_ivxn3r$('transform', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(2));
    this.descriptor.addElement_ivxn3r$('children', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(3));
    this.descriptor.addElement_ivxn3r$('meshes', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(4));
    this.descriptor.addElement_ivxn3r$('tags', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(5));
    ModelNodeData$$serializer_instance = this;
  }
  Object.defineProperty(ModelNodeData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_q2xdmh$_0;
    }
  });
  ModelNodeData$$serializer.prototype.serialize_awe97i$ = function (encoder, value) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeStringElement_bgm7zs$(this.descriptor, 0, value.name);
    output.encodeSerializableElement_blecud$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer), value.transform);
    if (!equals(value.children, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 2))
      output.encodeSerializableElement_blecud$(this.descriptor, 2, new ArrayListSerializer(ModelNodeData$$serializer_getInstance()), value.children);
    if (!equals(value.meshes, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 3))
      output.encodeSerializableElement_blecud$(this.descriptor, 3, new ArrayListSerializer(internal.IntSerializer), value.meshes);
    if (!equals(value.tags, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 4))
      output.encodeSerializableElement_blecud$(this.descriptor, 4, new ArrayListSerializer(internal.StringSerializer), value.tags);
    output.endStructure_qatsm0$(this.descriptor);
  };
  ModelNodeData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3
    , local4;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case 0:
          local0 = input.decodeStringElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          break;
        case 1:
          local1 = (bitMask0 & 2) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer), local1);
          bitMask0 |= 2;
          break;
        case 2:
          local2 = (bitMask0 & 4) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 2, new ArrayListSerializer(ModelNodeData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 2, new ArrayListSerializer(ModelNodeData$$serializer_getInstance()), local2);
          bitMask0 |= 4;
          break;
        case 3:
          local3 = (bitMask0 & 8) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 3, new ArrayListSerializer(internal.IntSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 3, new ArrayListSerializer(internal.IntSerializer), local3);
          bitMask0 |= 8;
          break;
        case 4:
          local4 = (bitMask0 & 16) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 4, new ArrayListSerializer(internal.StringSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 4, new ArrayListSerializer(internal.StringSerializer), local4);
          bitMask0 |= 16;
          break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return ModelNodeData_init(bitMask0, local0, local1, local2, local3, local4, null);
  };
  ModelNodeData$$serializer.prototype.childSerializers = function () {
    return [internal.StringSerializer, new ArrayListSerializer(internal.FloatSerializer), new ArrayListSerializer(ModelNodeData$$serializer_getInstance()), new ArrayListSerializer(internal.IntSerializer), new ArrayListSerializer(internal.StringSerializer)];
  };
  ModelNodeData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var ModelNodeData$$serializer_instance = null;
  function ModelNodeData$$serializer_getInstance() {
    if (ModelNodeData$$serializer_instance === null) {
      new ModelNodeData$$serializer();
    }return ModelNodeData$$serializer_instance;
  }
  function ModelNodeData_init(seen1, name, transform, children, meshes, tags, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(ModelNodeData.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('name');
    else
      $this.name = name;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('transform');
    else
      $this.transform = transform;
    if ((seen1 & 4) === 0)
      $this.children = emptyList();
    else
      $this.children = children;
    if ((seen1 & 8) === 0)
      $this.meshes = emptyList();
    else
      $this.meshes = meshes;
    if ((seen1 & 16) === 0)
      $this.tags = emptyList();
    else
      $this.tags = tags;
    return $this;
  }
  ModelNodeData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelNodeData',
    interfaces: []
  };
  ModelNodeData.prototype.component1 = function () {
    return this.name;
  };
  ModelNodeData.prototype.component2 = function () {
    return this.transform;
  };
  ModelNodeData.prototype.component3 = function () {
    return this.children;
  };
  ModelNodeData.prototype.component4 = function () {
    return this.meshes;
  };
  ModelNodeData.prototype.component5 = function () {
    return this.tags;
  };
  ModelNodeData.prototype.copy_kwf40x$ = function (name, transform, children, meshes, tags) {
    return new ModelNodeData(name === void 0 ? this.name : name, transform === void 0 ? this.transform : transform, children === void 0 ? this.children : children, meshes === void 0 ? this.meshes : meshes, tags === void 0 ? this.tags : tags);
  };
  ModelNodeData.prototype.toString = function () {
    return 'ModelNodeData(name=' + Kotlin.toString(this.name) + (', transform=' + Kotlin.toString(this.transform)) + (', children=' + Kotlin.toString(this.children)) + (', meshes=' + Kotlin.toString(this.meshes)) + (', tags=' + Kotlin.toString(this.tags)) + ')';
  };
  ModelNodeData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.transform) | 0;
    result = result * 31 + Kotlin.hashCode(this.children) | 0;
    result = result * 31 + Kotlin.hashCode(this.meshes) | 0;
    result = result * 31 + Kotlin.hashCode(this.tags) | 0;
    return result;
  };
  ModelNodeData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.transform, other.transform) && Kotlin.equals(this.children, other.children) && Kotlin.equals(this.meshes, other.meshes) && Kotlin.equals(this.tags, other.tags)))));
  };
  function ModelMeshData(name, primitiveType, attributes, indices, armature, animations, material, tags, intAttributes) {
    ModelMeshData$Companion_getInstance();
    if (indices === void 0)
      indices = emptyList();
    if (armature === void 0)
      armature = emptyList();
    if (animations === void 0)
      animations = emptyList();
    if (material === void 0)
      material = -1;
    if (tags === void 0)
      tags = emptyList();
    if (intAttributes === void 0)
      intAttributes = emptyMap();
    this.name = name;
    this.primitiveType = primitiveType;
    this.attributes = attributes;
    this.indices = indices;
    this.armature = armature;
    this.animations = animations;
    this.material = material;
    this.tags = tags;
    this.intAttributes = intAttributes;
    this.numVertices_r5k7x2$_0 = 0;
    this.hasNormals_ijlhl3$_0 = false;
    this.hasTexCoords_7qmtnk$_0 = false;
    this.hasColors_l5uha7$_0 = false;
    this.hasTangents_bpmbxb$_0 = false;
    var tmp$, tmp$_0;
    tmp$ = this.attributes.get_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_POSITIONS);
    if (tmp$ == null) {
      throw KoolException_init('ModelMeshData does not contain positions');
    }this.numVertices = tmp$.size / 3 | 0;
    this.hasNormals = this.attributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_NORMALS) || this.intAttributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_NORMALS_OCT_COMPRESSED);
    this.hasTexCoords = this.attributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_TEXTURE_COORDS);
    this.hasColors = this.attributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_COLORS);
    this.hasTangents = this.attributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_TANGENTS);
    tmp$_0 = this.attributes.entries.iterator();
    while (tmp$_0.hasNext()) {
      var tmp$_1 = tmp$_0.next();
      var name_1 = tmp$_1.key;
      var attrib_0 = tmp$_1.value;
      var attribTypeValCnt_0 = attrib_0.type.size / 4 | 0;
      if ((attrib_0.size / attribTypeValCnt_0 | 0) !== this.numVertices) {
        throw KoolException_init('Mesh attribute ' + name_1 + ' has wrong value count: ' + attrib_0.size + ' (should be ' + Kotlin.imul(this.numVertices, attribTypeValCnt_0) + ', type: ' + attrib_0.type + ')');
      }}
  }
  Object.defineProperty(ModelMeshData.prototype, 'numVertices', {
    get: function () {
      return this.numVertices_r5k7x2$_0;
    },
    set: function (numVertices) {
      this.numVertices_r5k7x2$_0 = numVertices;
    }
  });
  Object.defineProperty(ModelMeshData.prototype, 'hasNormals', {
    get: function () {
      return this.hasNormals_ijlhl3$_0;
    },
    set: function (hasNormals) {
      this.hasNormals_ijlhl3$_0 = hasNormals;
    }
  });
  Object.defineProperty(ModelMeshData.prototype, 'hasTexCoords', {
    get: function () {
      return this.hasTexCoords_7qmtnk$_0;
    },
    set: function (hasTexCoords) {
      this.hasTexCoords_7qmtnk$_0 = hasTexCoords;
    }
  });
  Object.defineProperty(ModelMeshData.prototype, 'hasColors', {
    get: function () {
      return this.hasColors_l5uha7$_0;
    },
    set: function (hasColors) {
      this.hasColors_l5uha7$_0 = hasColors;
    }
  });
  Object.defineProperty(ModelMeshData.prototype, 'hasTangents', {
    get: function () {
      return this.hasTangents_bpmbxb$_0;
    },
    set: function (hasTangents) {
      this.hasTangents_bpmbxb$_0 = hasTangents;
    }
  });
  function ModelMeshData$toMesh$lambda(closure$model, this$ModelMeshData) {
    return function ($receiver) {
      $receiver.albedoSource = Albedo$STATIC_ALBEDO_getInstance();
      $receiver.albedo = closure$model.materials.get_za3lpa$(this$ModelMeshData.material).getDiffuseColor_b0h0gw$();
      return Unit;
    };
  }
  ModelMeshData.prototype.toMesh_8p8ifh$ = function (model, generateNormals, generateTangents) {
    if (model === void 0)
      model = null;
    if (generateNormals === void 0)
      generateNormals = true;
    if (generateTangents === void 0)
      generateTangents = false;
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var attribs = mutableListOf([Attribute$Companion_getInstance().POSITIONS]);
    if (this.hasNormals || generateNormals) {
      var element = Attribute$Companion_getInstance().NORMALS;
      attribs.add_11rb$(element);
    }if (this.hasTangents || generateTangents) {
      var element_0 = Attribute$Companion_getInstance().TANGENTS;
      attribs.add_11rb$(element_0);
    }if (this.hasColors) {
      var element_1 = Attribute$Companion_getInstance().COLORS;
      attribs.add_11rb$(element_1);
    }if (this.hasTexCoords) {
      var element_2 = Attribute$Companion_getInstance().TEXTURE_COORDS;
      attribs.add_11rb$(element_2);
    }var geometry = new IndexedVertexList(attribs);
    tmp$ = this.attributes.get_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_POSITIONS);
    if (tmp$ == null) {
      throw KoolException_init('Mesh has no positions');
    }var positions = tmp$;
    var normals = this.attributes.get_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_NORMALS);
    var texCoords = this.attributes.get_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_TEXTURE_COORDS);
    var colors = this.attributes.get_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_COLORS);
    var tangents = this.attributes.get_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_TANGENTS);
    var normalsOct = this.intAttributes.get_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_NORMALS_OCT_COMPRESSED);
    var octBits = this.getNormalOctBits_0();
    tmp$_0 = positions.size / 3 | 0;
    for (var i = 0; i < tmp$_0; i++) {
      var tmp$_3, tmp$_4, tmp$_5;
      geometry.checkBufferSizes_za3lpa$();
      tmp$_3 = geometry.vertexSizeF;
      for (var i_0 = 1; i_0 <= tmp$_3; i_0++) {
        geometry.dataF.plusAssign_mx4ult$(0.0);
      }
      tmp$_4 = geometry.vertexSizeI;
      for (var i_1 = 1; i_1 <= tmp$_4; i_1++) {
        geometry.dataI.plusAssign_za3lpa$(0);
      }
      geometry.vertexIt.index = (tmp$_5 = geometry.numVertices, geometry.numVertices = tmp$_5 + 1 | 0, tmp$_5);
      var $receiver = geometry.vertexIt;
      $receiver.position.set_y2kzbl$(positions.get_za3lpa$(i * 3 | 0), positions.get_za3lpa$((i * 3 | 0) + 1 | 0), positions.get_za3lpa$((i * 3 | 0) + 2 | 0));
      if (normals != null) {
        $receiver.normal.set_y2kzbl$(normals.get_za3lpa$(i * 3 | 0), normals.get_za3lpa$((i * 3 | 0) + 1 | 0), normals.get_za3lpa$((i * 3 | 0) + 2 | 0));
      } else if (normalsOct != null && octBits > 0) {
        NormalOctCoding_getInstance().decodeOctToNormal_rovr2w$(normalsOct.get_za3lpa$(i * 2 | 0), normalsOct.get_za3lpa$((i * 2 | 0) + 1 | 0), octBits, $receiver.normal);
      }if (texCoords != null) {
        $receiver.texCoord.set_dleff0$(texCoords.get_za3lpa$(i * 2 | 0), texCoords.get_za3lpa$((i * 2 | 0) + 1 | 0));
      }if (colors != null) {
        $receiver.color.set_7b5o5w$(colors.get_za3lpa$(i * 4 | 0), colors.get_za3lpa$((i * 4 | 0) + 1 | 0), colors.get_za3lpa$((i * 4 | 0) + 2 | 0), colors.get_za3lpa$((i * 4 | 0) + 3 | 0));
      }if (tangents != null) {
        $receiver.tangent.set_y2kzbl$(tangents.get_za3lpa$(i * 3 | 0), tangents.get_za3lpa$((i * 3 | 0) + 1 | 0), tangents.get_za3lpa$((i * 3 | 0) + 2 | 0));
      }geometry.bounds.add_czzhiu$(geometry.vertexIt.position);
      geometry.hasChanged = true;
      geometry.numVertices - 1 | 0;
    }
    if (this.indices.isEmpty()) {
      tmp$_1 = this.numVertices;
      for (var i_2 = 0; i_2 < tmp$_1; i_2++) {
        geometry.addIndex_za3lpa$(i_2);
      }
    } else {
      geometry.addIndices_pqoyrt$(this.indices);
    }
    if (!this.hasNormals && generateNormals) {
      geometry.generateNormals();
    }if (!this.hasTangents && generateTangents) {
      geometry.generateTangents();
    }if (!this.armature.isEmpty()) {
      tmp$_2 = this.buildAramature_0(geometry);
    } else {
      tmp$_2 = new Mesh(geometry, this.name);
    }
    var mesh = tmp$_2;
    if (model != null && get_indices(model.materials).contains_mef7kx$(this.material)) {
      mesh.pipelineLoader = phongShader(ModelMeshData$toMesh$lambda(model, this));
    }if (!this.tags.isEmpty()) {
      var tmp$_6;
      tmp$_6 = this.tags.iterator();
      while (tmp$_6.hasNext()) {
        var element_3 = tmp$_6.next();
        mesh.tags.plusAssign_61zpoe$(element_3);
      }
    }return mesh;
  };
  ModelMeshData.prototype.getNormalOctBits_0 = function () {
    var octBitsKey = 'normalsOct=';
    var $receiver = this.tags;
    var firstOrNull$result;
    firstOrNull$break: do {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (startsWith(element, octBitsKey)) {
          firstOrNull$result = element;
          break firstOrNull$break;
        }}
      firstOrNull$result = null;
    }
     while (false);
    var octBitsTag = firstOrNull$result;
    if (octBitsTag != null) {
      var startIndex = octBitsKey.length;
      return toInt(octBitsTag.substring(startIndex));
    }return -1;
  };
  ModelMeshData.prototype.buildAramature_0 = function (geometry) {
    var mesh = new Armature(geometry, this.name);
    var tmp$;
    tmp$ = this.armature.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0;
      var bone = new Bone(element.name, element.vertexIds.size);
      var $receiver = mesh.bones;
      var key = bone.name;
      $receiver.put_xwzc9p$(key, bone);
      bone.offsetMatrix.set_hcyabg$(element.offsetMatrix);
      tmp$_0 = element.vertexIds;
      for (var i = 0; i !== tmp$_0.size; ++i) {
        bone.vertexIds[i] = element.vertexIds.get_za3lpa$(i);
        bone.vertexWeights[i] = element.vertexWeights.get_za3lpa$(i);
      }
    }
    var tmp$_1;
    tmp$_1 = this.armature.iterator();
    while (tmp$_1.hasNext()) {
      var element_0 = tmp$_1.next();
      var bone_0 = ensureNotNull(mesh.bones.get_11rb$(element_0.name));
      bone_0.parent = mesh.bones.get_11rb$(element_0.parent);
      if (bone_0.parent == null) {
        mesh.rootBones.add_11rb$(bone_0);
      }var tmp$_2;
      tmp$_2 = element_0.children.iterator();
      while (tmp$_2.hasNext()) {
        var element_1 = tmp$_2.next();
        var child = mesh.bones.get_11rb$(element_1);
        if (child != null) {
          bone_0.children.add_11rb$(child);
        }}
    }
    mesh.updateBones();
    var tmp$_3;
    tmp$_3 = this.animations.iterator();
    while (tmp$_3.hasNext()) {
      var element_2 = tmp$_3.next();
      mesh.addAnimation_z5ltv$(element_2.name, element_2.getAnimation_wev6wz$(mesh.bones));
    }
    return mesh;
  };
  function ModelMeshData$Companion() {
    ModelMeshData$Companion_instance = this;
    this.ATTRIB_POSITIONS = 'positions';
    this.ATTRIB_NORMALS = 'normals';
    this.ATTRIB_NORMALS_OCT_COMPRESSED = 'normalsOct';
    this.ATTRIB_TEXTURE_COORDS = 'textureCoords';
    this.ATTRIB_COLORS = 'colors';
    this.ATTRIB_TANGENTS = 'tangents';
  }
  ModelMeshData$Companion.prototype.serializer = function () {
    return ModelMeshData$$serializer_getInstance();
  };
  ModelMeshData$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ModelMeshData$Companion_instance = null;
  function ModelMeshData$Companion_getInstance() {
    if (ModelMeshData$Companion_instance === null) {
      new ModelMeshData$Companion();
    }return ModelMeshData$Companion_instance;
  }
  function ModelMeshData$$serializer() {
    this.descriptor_wiyw64$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.ModelMeshData', this, 9);
    this.descriptor.addElement_ivxn3r$('name', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(1));
    this.descriptor.addElement_ivxn3r$('primitiveType', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(2));
    this.descriptor.addElement_ivxn3r$('attributes', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(3));
    this.descriptor.addElement_ivxn3r$('indices', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(4));
    this.descriptor.addElement_ivxn3r$('armature', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(5));
    this.descriptor.addElement_ivxn3r$('animations', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(6));
    this.descriptor.addElement_ivxn3r$('material', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(7));
    this.descriptor.addElement_ivxn3r$('tags', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(8));
    this.descriptor.addElement_ivxn3r$('intAttributes', true);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(9));
    ModelMeshData$$serializer_instance = this;
  }
  Object.defineProperty(ModelMeshData$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_wiyw64$_0;
    }
  });
  ModelMeshData$$serializer.prototype.serialize_awe97i$ = function (encoder, value) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeStringElement_bgm7zs$(this.descriptor, 0, value.name);
    output.encodeSerializableElement_blecud$(this.descriptor, 1, new EnumSerializer('de.fabmax.kool.util.PrimitiveType', PrimitiveType$values()), value.primitiveType);
    output.encodeSerializableElement_blecud$(this.descriptor, 2, new LinkedHashMapSerializer(internal.StringSerializer, AttributeList$$serializer_getInstance()), value.attributes);
    if (!equals(value.indices, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 3))
      output.encodeSerializableElement_blecud$(this.descriptor, 3, new ArrayListSerializer(internal.IntSerializer), value.indices);
    if (!equals(value.armature, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 4))
      output.encodeSerializableElement_blecud$(this.descriptor, 4, new ArrayListSerializer(BoneData$$serializer_getInstance()), value.armature);
    if (!equals(value.animations, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 5))
      output.encodeSerializableElement_blecud$(this.descriptor, 5, new ArrayListSerializer(AnimationData$$serializer_getInstance()), value.animations);
    if (!equals(value.material, -1) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 6))
      output.encodeIntElement_4wpqag$(this.descriptor, 6, value.material);
    if (!equals(value.tags, emptyList()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 7))
      output.encodeSerializableElement_blecud$(this.descriptor, 7, new ArrayListSerializer(internal.StringSerializer), value.tags);
    if (!equals(value.intAttributes, emptyMap()) || output.shouldEncodeElementDefault_3zr2iy$(this.descriptor, 8))
      output.encodeSerializableElement_blecud$(this.descriptor, 8, new LinkedHashMapSerializer(internal.StringSerializer, IntAttributeList$$serializer_getInstance()), value.intAttributes);
    output.endStructure_qatsm0$(this.descriptor);
  };
  ModelMeshData$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index;
    var bitMask0 = 0;
    var local0
    , local1
    , local2
    , local3
    , local4
    , local5
    , local6
    , local7
    , local8;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case 0:
          local0 = input.decodeStringElement_3zr2iy$(this.descriptor, 0);
          bitMask0 |= 1;
          break;
        case 1:
          local1 = (bitMask0 & 2) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 1, new EnumSerializer('de.fabmax.kool.util.PrimitiveType', PrimitiveType$values())) : input.updateSerializableElement_ehubvl$(this.descriptor, 1, new EnumSerializer('de.fabmax.kool.util.PrimitiveType', PrimitiveType$values()), local1);
          bitMask0 |= 2;
          break;
        case 2:
          local2 = (bitMask0 & 4) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 2, new LinkedHashMapSerializer(internal.StringSerializer, AttributeList$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 2, new LinkedHashMapSerializer(internal.StringSerializer, AttributeList$$serializer_getInstance()), local2);
          bitMask0 |= 4;
          break;
        case 3:
          local3 = (bitMask0 & 8) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 3, new ArrayListSerializer(internal.IntSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 3, new ArrayListSerializer(internal.IntSerializer), local3);
          bitMask0 |= 8;
          break;
        case 4:
          local4 = (bitMask0 & 16) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 4, new ArrayListSerializer(BoneData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 4, new ArrayListSerializer(BoneData$$serializer_getInstance()), local4);
          bitMask0 |= 16;
          break;
        case 5:
          local5 = (bitMask0 & 32) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 5, new ArrayListSerializer(AnimationData$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 5, new ArrayListSerializer(AnimationData$$serializer_getInstance()), local5);
          bitMask0 |= 32;
          break;
        case 6:
          local6 = input.decodeIntElement_3zr2iy$(this.descriptor, 6);
          bitMask0 |= 64;
          break;
        case 7:
          local7 = (bitMask0 & 128) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 7, new ArrayListSerializer(internal.StringSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 7, new ArrayListSerializer(internal.StringSerializer), local7);
          bitMask0 |= 128;
          break;
        case 8:
          local8 = (bitMask0 & 256) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 8, new LinkedHashMapSerializer(internal.StringSerializer, IntAttributeList$$serializer_getInstance())) : input.updateSerializableElement_ehubvl$(this.descriptor, 8, new LinkedHashMapSerializer(internal.StringSerializer, IntAttributeList$$serializer_getInstance()), local8);
          bitMask0 |= 256;
          break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return ModelMeshData_init(bitMask0, local0, local1, local2, local3, local4, local5, local6, local7, local8, null);
  };
  ModelMeshData$$serializer.prototype.childSerializers = function () {
    return [internal.StringSerializer, new EnumSerializer('de.fabmax.kool.util.PrimitiveType', PrimitiveType$values()), new LinkedHashMapSerializer(internal.StringSerializer, AttributeList$$serializer_getInstance()), new ArrayListSerializer(internal.IntSerializer), new ArrayListSerializer(BoneData$$serializer_getInstance()), new ArrayListSerializer(AnimationData$$serializer_getInstance()), internal.IntSerializer, new ArrayListSerializer(internal.StringSerializer), new LinkedHashMapSerializer(internal.StringSerializer, IntAttributeList$$serializer_getInstance())];
  };
  ModelMeshData$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var ModelMeshData$$serializer_instance = null;
  function ModelMeshData$$serializer_getInstance() {
    if (ModelMeshData$$serializer_instance === null) {
      new ModelMeshData$$serializer();
    }return ModelMeshData$$serializer_instance;
  }
  function ModelMeshData_init(seen1, name, primitiveType, attributes, indices, armature, animations, material, tags, intAttributes, serializationConstructorMarker) {
    var tmp$, tmp$_0;
    var $this = serializationConstructorMarker || Object.create(ModelMeshData.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('name');
    else
      $this.name = name;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('primitiveType');
    else
      $this.primitiveType = primitiveType;
    if ((seen1 & 4) === 0)
      throw new MissingFieldException('attributes');
    else
      $this.attributes = attributes;
    if ((seen1 & 8) === 0)
      $this.indices = emptyList();
    else
      $this.indices = indices;
    if ((seen1 & 16) === 0)
      $this.armature = emptyList();
    else
      $this.armature = armature;
    if ((seen1 & 32) === 0)
      $this.animations = emptyList();
    else
      $this.animations = animations;
    if ((seen1 & 64) === 0)
      $this.material = -1;
    else
      $this.material = material;
    if ((seen1 & 128) === 0)
      $this.tags = emptyList();
    else
      $this.tags = tags;
    if ((seen1 & 256) === 0)
      $this.intAttributes = emptyMap();
    else
      $this.intAttributes = intAttributes;
    $this.numVertices_r5k7x2$_0 = 0;
    $this.hasNormals_ijlhl3$_0 = false;
    $this.hasTexCoords_7qmtnk$_0 = false;
    $this.hasColors_l5uha7$_0 = false;
    $this.hasTangents_bpmbxb$_0 = false;
    tmp$ = $this.attributes.get_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_POSITIONS);
    if (tmp$ == null) {
      throw KoolException_init('ModelMeshData does not contain positions');
    }$this.numVertices = tmp$.size / 3 | 0;
    $this.hasNormals = $this.attributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_NORMALS) || $this.intAttributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_NORMALS_OCT_COMPRESSED);
    $this.hasTexCoords = $this.attributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_TEXTURE_COORDS);
    $this.hasColors = $this.attributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_COLORS);
    $this.hasTangents = $this.attributes.containsKey_11rb$(ModelMeshData$Companion_getInstance().ATTRIB_TANGENTS);
    tmp$_0 = $this.attributes.entries.iterator();
    while (tmp$_0.hasNext()) {
      var tmp$_1 = tmp$_0.next();
      var name_1 = tmp$_1.key;
      var attrib_0 = tmp$_1.value;
      var attribTypeValCnt_0 = attrib_0.type.size / 4 | 0;
      if ((attrib_0.size / attribTypeValCnt_0 | 0) !== $this.numVertices) {
        throw KoolException_init('Mesh attribute ' + name_1 + ' has wrong value count: ' + attrib_0.size + ' (should be ' + Kotlin.imul($this.numVertices, attribTypeValCnt_0) + ', type: ' + attrib_0.type + ')');
      }}
    return $this;
  }
  ModelMeshData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModelMeshData',
    interfaces: []
  };
  ModelMeshData.prototype.component1 = function () {
    return this.name;
  };
  ModelMeshData.prototype.component2 = function () {
    return this.primitiveType;
  };
  ModelMeshData.prototype.component3 = function () {
    return this.attributes;
  };
  ModelMeshData.prototype.component4 = function () {
    return this.indices;
  };
  ModelMeshData.prototype.component5 = function () {
    return this.armature;
  };
  ModelMeshData.prototype.component6 = function () {
    return this.animations;
  };
  ModelMeshData.prototype.component7 = function () {
    return this.material;
  };
  ModelMeshData.prototype.component8 = function () {
    return this.tags;
  };
  ModelMeshData.prototype.component9 = function () {
    return this.intAttributes;
  };
  ModelMeshData.prototype.copy_s9u7dr$ = function (name, primitiveType, attributes, indices, armature, animations, material, tags, intAttributes) {
    return new ModelMeshData(name === void 0 ? this.name : name, primitiveType === void 0 ? this.primitiveType : primitiveType, attributes === void 0 ? this.attributes : attributes, indices === void 0 ? this.indices : indices, armature === void 0 ? this.armature : armature, animations === void 0 ? this.animations : animations, material === void 0 ? this.material : material, tags === void 0 ? this.tags : tags, intAttributes === void 0 ? this.intAttributes : intAttributes);
  };
  ModelMeshData.prototype.toString = function () {
    return 'ModelMeshData(name=' + Kotlin.toString(this.name) + (', primitiveType=' + Kotlin.toString(this.primitiveType)) + (', attributes=' + Kotlin.toString(this.attributes)) + (', indices=' + Kotlin.toString(this.indices)) + (', armature=' + Kotlin.toString(this.armature)) + (', animations=' + Kotlin.toString(this.animations)) + (', material=' + Kotlin.toString(this.material)) + (', tags=' + Kotlin.toString(this.tags)) + (', intAttributes=' + Kotlin.toString(this.intAttributes)) + ')';
  };
  ModelMeshData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.primitiveType) | 0;
    result = result * 31 + Kotlin.hashCode(this.attributes) | 0;
    result = result * 31 + Kotlin.hashCode(this.indices) | 0;
    result = result * 31 + Kotlin.hashCode(this.armature) | 0;
    result = result * 31 + Kotlin.hashCode(this.animations) | 0;
    result = result * 31 + Kotlin.hashCode(this.material) | 0;
    result = result * 31 + Kotlin.hashCode(this.tags) | 0;
    result = result * 31 + Kotlin.hashCode(this.intAttributes) | 0;
    return result;
  };
  ModelMeshData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.primitiveType, other.primitiveType) && Kotlin.equals(this.attributes, other.attributes) && Kotlin.equals(this.indices, other.indices) && Kotlin.equals(this.armature, other.armature) && Kotlin.equals(this.animations, other.animations) && Kotlin.equals(this.material, other.material) && Kotlin.equals(this.tags, other.tags) && Kotlin.equals(this.intAttributes, other.intAttributes)))));
  };
  function AttributeList(type, values) {
    AttributeList$Companion_getInstance();
    this.type = type;
    this.values = values;
    this.size = this.values.size;
  }
  AttributeList.prototype.get_za3lpa$ = function (i) {
    return this.values.get_za3lpa$(i);
  };
  function AttributeList$Companion() {
    AttributeList$Companion_instance = this;
  }
  AttributeList$Companion.prototype.serializer = function () {
    return AttributeList$$serializer_getInstance();
  };
  AttributeList$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AttributeList$Companion_instance = null;
  function AttributeList$Companion_getInstance() {
    if (AttributeList$Companion_instance === null) {
      new AttributeList$Companion();
    }return AttributeList$Companion_instance;
  }
  function AttributeList$$serializer() {
    this.descriptor_4nzata$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.AttributeList', this, 2);
    this.descriptor.addElement_ivxn3r$('type', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(1));
    this.descriptor.addElement_ivxn3r$('values', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(2));
    AttributeList$$serializer_instance = this;
  }
  Object.defineProperty(AttributeList$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_4nzata$_0;
    }
  });
  AttributeList$$serializer.prototype.serialize_awe97i$ = function (encoder, value) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeSerializableElement_blecud$(this.descriptor, 0, new EnumSerializer('de.fabmax.kool.pipeline.GlslType', GlslType$values()), value.type);
    output.encodeSerializableElement_blecud$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer), value.values);
    output.endStructure_qatsm0$(this.descriptor);
  };
  AttributeList$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index;
    var bitMask0 = 0;
    var local0
    , local1;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case 0:
          local0 = (bitMask0 & 1) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 0, new EnumSerializer('de.fabmax.kool.pipeline.GlslType', GlslType$values())) : input.updateSerializableElement_ehubvl$(this.descriptor, 0, new EnumSerializer('de.fabmax.kool.pipeline.GlslType', GlslType$values()), local0);
          bitMask0 |= 1;
          break;
        case 1:
          local1 = (bitMask0 & 2) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 1, new ArrayListSerializer(internal.FloatSerializer), local1);
          bitMask0 |= 2;
          break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return AttributeList_init(bitMask0, local0, local1, null);
  };
  AttributeList$$serializer.prototype.childSerializers = function () {
    return [new EnumSerializer('de.fabmax.kool.pipeline.GlslType', GlslType$values()), new ArrayListSerializer(internal.FloatSerializer)];
  };
  AttributeList$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var AttributeList$$serializer_instance = null;
  function AttributeList$$serializer_getInstance() {
    if (AttributeList$$serializer_instance === null) {
      new AttributeList$$serializer();
    }return AttributeList$$serializer_instance;
  }
  function AttributeList_init(seen1, type, values, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(AttributeList.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('type');
    else
      $this.type = type;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('values');
    else
      $this.values = values;
    $this.size = $this.values.size;
    return $this;
  }
  AttributeList.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AttributeList',
    interfaces: []
  };
  AttributeList.prototype.component1 = function () {
    return this.type;
  };
  AttributeList.prototype.component2 = function () {
    return this.values;
  };
  AttributeList.prototype.copy_et7hot$ = function (type, values) {
    return new AttributeList(type === void 0 ? this.type : type, values === void 0 ? this.values : values);
  };
  AttributeList.prototype.toString = function () {
    return 'AttributeList(type=' + Kotlin.toString(this.type) + (', values=' + Kotlin.toString(this.values)) + ')';
  };
  AttributeList.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.type) | 0;
    result = result * 31 + Kotlin.hashCode(this.values) | 0;
    return result;
  };
  AttributeList.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.type, other.type) && Kotlin.equals(this.values, other.values)))));
  };
  function IntAttributeList(type, values) {
    IntAttributeList$Companion_getInstance();
    this.type = type;
    this.values = values;
    this.size = this.values.size;
  }
  IntAttributeList.prototype.get_za3lpa$ = function (i) {
    return this.values.get_za3lpa$(i);
  };
  function IntAttributeList$Companion() {
    IntAttributeList$Companion_instance = this;
  }
  IntAttributeList$Companion.prototype.serializer = function () {
    return IntAttributeList$$serializer_getInstance();
  };
  IntAttributeList$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var IntAttributeList$Companion_instance = null;
  function IntAttributeList$Companion_getInstance() {
    if (IntAttributeList$Companion_instance === null) {
      new IntAttributeList$Companion();
    }return IntAttributeList$Companion_instance;
  }
  function IntAttributeList$$serializer() {
    this.descriptor_rw0mhb$_0 = new SerialClassDescImpl('de.fabmax.kool.util.serialization.IntAttributeList', this, 2);
    this.descriptor.addElement_ivxn3r$('type', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(1));
    this.descriptor.addElement_ivxn3r$('values', false);
    this.descriptor.pushAnnotation_yj921w$(new ProtoId(2));
    IntAttributeList$$serializer_instance = this;
  }
  Object.defineProperty(IntAttributeList$$serializer.prototype, 'descriptor', {
    get: function () {
      return this.descriptor_rw0mhb$_0;
    }
  });
  IntAttributeList$$serializer.prototype.serialize_awe97i$ = function (encoder, value) {
    var output = encoder.beginStructure_r0sa6z$(this.descriptor, []);
    output.encodeSerializableElement_blecud$(this.descriptor, 0, new EnumSerializer('de.fabmax.kool.pipeline.GlslType', GlslType$values()), value.type);
    output.encodeSerializableElement_blecud$(this.descriptor, 1, new ArrayListSerializer(internal.IntSerializer), value.values);
    output.endStructure_qatsm0$(this.descriptor);
  };
  IntAttributeList$$serializer.prototype.deserialize_nts5qn$ = function (decoder) {
    var index;
    var bitMask0 = 0;
    var local0
    , local1;
    var input = decoder.beginStructure_r0sa6z$(this.descriptor, []);
    loopLabel: while (true) {
      index = input.decodeElementIndex_qatsm0$(this.descriptor);
      switch (index) {
        case 0:
          local0 = (bitMask0 & 1) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 0, new EnumSerializer('de.fabmax.kool.pipeline.GlslType', GlslType$values())) : input.updateSerializableElement_ehubvl$(this.descriptor, 0, new EnumSerializer('de.fabmax.kool.pipeline.GlslType', GlslType$values()), local0);
          bitMask0 |= 1;
          break;
        case 1:
          local1 = (bitMask0 & 2) === 0 ? input.decodeSerializableElement_s44l7r$(this.descriptor, 1, new ArrayListSerializer(internal.IntSerializer)) : input.updateSerializableElement_ehubvl$(this.descriptor, 1, new ArrayListSerializer(internal.IntSerializer), local1);
          bitMask0 |= 2;
          break;
        case -1:
          break loopLabel;
        default:throw new UnknownFieldException(index);
      }
    }
    input.endStructure_qatsm0$(this.descriptor);
    return IntAttributeList_init(bitMask0, local0, local1, null);
  };
  IntAttributeList$$serializer.prototype.childSerializers = function () {
    return [new EnumSerializer('de.fabmax.kool.pipeline.GlslType', GlslType$values()), new ArrayListSerializer(internal.IntSerializer)];
  };
  IntAttributeList$$serializer.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: '$serializer',
    interfaces: [GeneratedSerializer]
  };
  var IntAttributeList$$serializer_instance = null;
  function IntAttributeList$$serializer_getInstance() {
    if (IntAttributeList$$serializer_instance === null) {
      new IntAttributeList$$serializer();
    }return IntAttributeList$$serializer_instance;
  }
  function IntAttributeList_init(seen1, type, values, serializationConstructorMarker) {
    var $this = serializationConstructorMarker || Object.create(IntAttributeList.prototype);
    if ((seen1 & 1) === 0)
      throw new MissingFieldException('type');
    else
      $this.type = type;
    if ((seen1 & 2) === 0)
      throw new MissingFieldException('values');
    else
      $this.values = values;
    $this.size = $this.values.size;
    return $this;
  }
  IntAttributeList.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IntAttributeList',
    interfaces: []
  };
  IntAttributeList.prototype.component1 = function () {
    return this.type;
  };
  IntAttributeList.prototype.component2 = function () {
    return this.values;
  };
  IntAttributeList.prototype.copy_gsmpcq$ = function (type, values) {
    return new IntAttributeList(type === void 0 ? this.type : type, values === void 0 ? this.values : values);
  };
  IntAttributeList.prototype.toString = function () {
    return 'IntAttributeList(type=' + Kotlin.toString(this.type) + (', values=' + Kotlin.toString(this.values)) + ')';
  };
  IntAttributeList.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.type) | 0;
    result = result * 31 + Kotlin.hashCode(this.values) | 0;
    return result;
  };
  IntAttributeList.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.type, other.type) && Kotlin.equals(this.values, other.values)))));
  };
  function NormalOctCoding() {
    NormalOctCoding_instance = this;
    this.SIGN_PP_0 = new Vec2f(1.0, 1.0);
    this.SIGN_PN_0 = new Vec2f(1.0, -1.0);
    this.SIGN_NP_0 = new Vec2f(-1.0, 1.0);
    this.SIGN_NN_0 = new Vec2f(-1.0, -1.0);
  }
  NormalOctCoding.prototype.signNotZero_0 = function (x, y) {
    var tmp$;
    if (x >= 0.0 && y >= 0.0)
      tmp$ = this.SIGN_PP_0;
    else if (x >= 0.0 && y < 0.0)
      tmp$ = this.SIGN_PN_0;
    else if (x < 0.0 && y >= 0.0)
      tmp$ = this.SIGN_NP_0;
    else
      tmp$ = this.SIGN_NN_0;
    return tmp$;
  };
  NormalOctCoding.prototype.encodeNormalToOct_2gj7a9$ = function (normal, result) {
    var x = normal.x;
    var tmp$ = Math_0.abs(x);
    var x_0 = normal.y;
    var tmp$_0 = tmp$ + Math_0.abs(x_0);
    var x_1 = normal.z;
    var f = 1.0 / (tmp$_0 + Math_0.abs(x_1));
    result.set_dleff0$(normal.x * f, normal.y * f);
    if (normal.z <= 0.0) {
      var s = this.signNotZero_0(result.x, result.y);
      var x_2 = result.y;
      var x_3 = (1.0 - Math_0.abs(x_2)) * s.x;
      var x_4 = result.x;
      var y = (1.0 - Math_0.abs(x_4)) * s.y;
      result.set_dleff0$(x_3, y);
    }return result;
  };
  NormalOctCoding.prototype.decodeOctToNormal_rovr2w$ = function (x, y, bits, result) {
    var f = 1.0 / ((1 << bits) - 1 | 0);
    return NormalOctCoding_getInstance().decodeOctToNormal_4dxiiq$(x * f, y * f, result);
  };
  NormalOctCoding.prototype.decodeOctToNormal_q2ru9t$ = function (oct, result) {
    return NormalOctCoding_getInstance().decodeOctToNormal_4dxiiq$(oct.x, oct.y, result);
  };
  NormalOctCoding.prototype.decodeOctToNormal_4dxiiq$ = function (x, y, result) {
    result.set_y2kzbl$(x, y, 1.0 - Math_0.abs(x) - Math_0.abs(y));
    if (result.z < 0) {
      var s = this.signNotZero_0(result.x, result.y);
      var x_0 = result.y;
      var rx = (1.0 - Math_0.abs(x_0)) * s.x;
      var x_1 = result.x;
      var ry = (1.0 - Math_0.abs(x_1)) * s.y;
      result.x = rx;
      result.y = ry;
    }return result.norm();
  };
  NormalOctCoding.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'NormalOctCoding',
    interfaces: []
  };
  var NormalOctCoding_instance = null;
  function NormalOctCoding_getInstance() {
    if (NormalOctCoding_instance === null) {
      new NormalOctCoding();
    }return NormalOctCoding_instance;
  }
  function ShadowMap() {
  }
  ShadowMap.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ShadowMap',
    interfaces: []
  };
  function SimpleShadowMap(scene, lightIndex, mapSize, drawNode) {
    if (mapSize === void 0)
      mapSize = 1024;
    if (drawNode === void 0)
      drawNode = scene;
    DepthMapPass.call(this, drawNode, mapSize);
    this.scene = scene;
    this.lightIndex = lightIndex;
    this.lightViewProjMat = new Mat4d();
    this.sceneCam = this.scene.camera;
    this.clipNear = 1.0;
    this.clipFar = 100.0;
    this.viewMat_0 = new Mat4d();
    this.nearSceneCamPlane_0 = new FrustumPlane();
    this.farSceneCamPlane_0 = new FrustumPlane();
    this.sceneFrustumBounds_0 = new BoundingBox();
    this.isUpdateDrawNode = false;
    this.scene.addOffscreenPass_m1c2kf$(this);
    this.onBeforeCollectDrawCommands.add_11rb$(SimpleShadowMap_init$lambda(this));
  }
  Object.defineProperty(SimpleShadowMap.prototype, 'isShadowMapEnabled', {
    get: function () {
      return this.isEnabled;
    },
    set: function (value) {
      this.isEnabled = value;
    }
  });
  SimpleShadowMap.prototype.dispose_aemszp$ = function (ctx) {
    this.scene.removeOffscreenPass_m1c2kf$(this);
    DepthMapPass.prototype.dispose_aemszp$.call(this, ctx);
  };
  SimpleShadowMap.prototype.setupSampler_s70oj3$ = function (sampler) {
    sampler != null ? (sampler.texture = this.depthTexture) : null;
  };
  SimpleShadowMap.prototype.setupCamera_0 = function (light) {
    switch (light.type.name) {
      case 'DIRECTIONAL':
        this.setupDirectionalLightCamera_0(light);
        break;
      case 'SPOT':
        this.setupSpotLightCamera_0(light);
        break;
      case 'POINT':
        throw new NotImplementedError_init();
    }
  };
  SimpleShadowMap.prototype.setupSpotLightCamera_0 = function (light) {
    var cam = this.camera;
    if (!Kotlin.isType(cam, PerspectiveCamera)) {
      cam = new PerspectiveCamera();
      cam.projCorrectionMode = Camera$ProjCorrectionMode$OFFSCREEN_getInstance();
      this.camera = cam;
    }cam.position.set_czzhiu$(light.position);
    cam.lookAt.set_czzhiu$(light.position).add_czzhiu$(light.direction);
    cam.fovY = light.spotAngle;
    cam.clipNear = this.clipNear;
    cam.clipFar = this.clipFar;
  };
  SimpleShadowMap.prototype.setupDirectionalLightCamera_0 = function (light) {
    var cam = this.camera;
    if (!Kotlin.isType(cam, OrthographicCamera)) {
      cam = new OrthographicCamera();
      cam.projCorrectionMode = Camera$ProjCorrectionMode$OFFSCREEN_getInstance();
      this.camera = cam;
    }cam.position.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    cam.lookAt.set_czzhiu$(light.direction);
    this.sceneCam.computeFrustumPlane_jwr40o$(this.clipNear, this.nearSceneCamPlane_0);
    this.sceneCam.computeFrustumPlane_jwr40o$(this.clipFar, this.farSceneCamPlane_0);
    this.viewMat_0.setLookAt_n440fu$(cam.position, cam.lookAt, cam.up);
    this.transform_0(this.viewMat_0, this.nearSceneCamPlane_0);
    this.transform_0(this.viewMat_0, this.farSceneCamPlane_0);
    this.setPlanes_0(this.sceneFrustumBounds_0, this.nearSceneCamPlane_0, this.farSceneCamPlane_0);
    cam.left = this.sceneFrustumBounds_0.min.x;
    cam.right = this.sceneFrustumBounds_0.max.x;
    cam.bottom = this.sceneFrustumBounds_0.min.y;
    cam.top = this.sceneFrustumBounds_0.max.y;
    cam.near = -this.sceneFrustumBounds_0.max.z - 20;
    cam.far = -this.sceneFrustumBounds_0.min.z;
  };
  SimpleShadowMap.prototype.transform_0 = function ($receiver, plane) {
    $receiver.transform_w1lst9$(plane.upperLeft);
    $receiver.transform_w1lst9$(plane.upperRight);
    $receiver.transform_w1lst9$(plane.lowerLeft);
    $receiver.transform_w1lst9$(plane.lowerRight);
  };
  SimpleShadowMap.prototype.setPlanes_0 = function ($receiver, near, far) {
    var wasBatchUpdate = $receiver.isBatchUpdate;
    $receiver.isBatchUpdate = true;
    $receiver.clear();
    $receiver.add_czzhiu$(near.upperLeft);
    $receiver.add_czzhiu$(near.upperRight);
    $receiver.add_czzhiu$(near.lowerLeft);
    $receiver.add_czzhiu$(near.lowerRight);
    $receiver.add_czzhiu$(far.upperLeft);
    $receiver.add_czzhiu$(far.upperRight);
    $receiver.add_czzhiu$(far.lowerLeft);
    $receiver.add_czzhiu$(far.lowerRight);
    $receiver.isBatchUpdate = wasBatchUpdate;
  };
  function SimpleShadowMap_init$lambda(this$SimpleShadowMap) {
    return function (ctx) {
      if (this$SimpleShadowMap.lightIndex < this$SimpleShadowMap.scene.lighting.lights.size) {
        var light = this$SimpleShadowMap.scene.lighting.lights.get_za3lpa$(this$SimpleShadowMap.lightIndex);
        this$SimpleShadowMap.setupCamera_0(light);
        this$SimpleShadowMap.camera.updateCamera_fd1mc0$(ctx, this$SimpleShadowMap.viewport);
        ctx.depthBiasMatrix.mul_u47j3u$(this$SimpleShadowMap.camera.viewProj, this$SimpleShadowMap.lightViewProjMat);
      }return Unit;
    };
  }
  SimpleShadowMap.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SimpleShadowMap',
    interfaces: [ShadowMap, DepthMapPass]
  };
  function CascadedShadowMap(scene, lightIndex, numCascades, mapSize, drawNode) {
    if (numCascades === void 0)
      numCascades = 3;
    if (mapSize === void 0)
      mapSize = 1024;
    if (drawNode === void 0)
      drawNode = scene;
    this.lightIndex = lightIndex;
    this.numCascades = numCascades;
    var array = Array_0(this.numCascades);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var tmp$_0 = Math_0.pow(i, 2);
      var $receiver = this.numCascades;
      var near = tmp$_0 / Math_0.pow($receiver, 2);
      var $receiver_0 = i + 1 | 0;
      var tmp$_1 = Math_0.pow($receiver_0, 2);
      var $receiver_1 = this.numCascades;
      var far = tmp$_1 / Math_0.pow($receiver_1, 2);
      array[i] = new CascadedShadowMap$MapRange(near, far);
    }
    this.mapRanges = array;
    this.maxRange = 100.0;
    var array_0 = Array_0(this.numCascades);
    var tmp$_2;
    tmp$_2 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_2; i_0++) {
      array_0[i_0] = new SimpleShadowMap(scene, this.lightIndex, mapSize, drawNode);
    }
    this.cascades = array_0;
    this.viewSpaceRanges = new Float32Array(this.numCascades);
    if (this.numCascades > 8) {
      throw KoolException_init('Too many shadow cascades: ' + this.numCascades + ' (maximum is 8)');
    }this.cascades[0].onBeforeCollectDrawCommands.add_11rb$(CascadedShadowMap_init$lambda(this));
  }
  Object.defineProperty(CascadedShadowMap.prototype, 'isShadowMapEnabled', {
    get: function () {
      return this.cascades[0].isEnabled;
    },
    set: function (value) {
      var $receiver = this.cascades;
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        element.isEnabled = value;
      }
    }
  });
  CascadedShadowMap.prototype.setMapRanges_8cqhcw$ = function (farRanges) {
    var tmp$;
    var near = 0.0;
    var b = this.mapRanges.length;
    tmp$ = Math_0.min(farRanges.length, b);
    for (var i = 0; i < tmp$; i++) {
      this.mapRanges[i].near = near;
      this.mapRanges[i].far = farRanges[i];
      near = farRanges[i];
    }
  };
  CascadedShadowMap.prototype.setupSampler_s70oj3$ = function (sampler) {
    if (sampler != null) {
      var $receiver = this.cascades;
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        sampler.textures[tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0] = item.depthTexture;
      }
    }};
  function CascadedShadowMap$MapRange(near, far) {
    this.near = near;
    this.far = far;
  }
  CascadedShadowMap$MapRange.prototype.toString = function () {
    return '[' + this.near + '..' + this.far + ']';
  };
  CascadedShadowMap$MapRange.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MapRange',
    interfaces: []
  };
  function CascadedShadowMap_init$lambda(this$CascadedShadowMap) {
    return function (it) {
      var tmp$;
      tmp$ = this$CascadedShadowMap.numCascades;
      for (var i = 0; i < tmp$; i++) {
        var near = this$CascadedShadowMap.mapRanges[i].near * this$CascadedShadowMap.maxRange;
        var far = this$CascadedShadowMap.mapRanges[i].far * this$CascadedShadowMap.maxRange;
        var farOverlap = 2.0 * Math_0.sqrt(far);
        this$CascadedShadowMap.cascades[i].clipNear = near;
        this$CascadedShadowMap.cascades[i].clipFar = far + farOverlap;
        this$CascadedShadowMap.viewSpaceRanges[i] = -far;
      }
      return Unit;
    };
  }
  CascadedShadowMap.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CascadedShadowMap',
    interfaces: [ShadowMap]
  };
  function pointKdTree(points, bucketSz) {
    if (bucketSz === void 0)
      bucketSz = 20;
    return new KdTree(points, Vec3fAdapter_getInstance(), bucketSz);
  }
  function pointOcTree(points, bounds, bucketSz) {
    if (points === void 0)
      points = emptyList();
    if (bounds === void 0)
      bounds = new BoundingBox();
    if (bucketSz === void 0)
      bucketSz = 20;
    return new OcTree(Vec3fAdapter_getInstance(), points, bounds, void 0, bucketSz);
  }
  function triangleKdTree(mesh, bucketSz) {
    if (bucketSz === void 0)
      bucketSz = 10;
    var tmp$;
    var triangles = ArrayList_init_0();
    var v = mesh.get_za3lpa$(0);
    tmp$ = mesh.numIndices;
    for (var i = 0; i < tmp$; i += 3) {
      v.index = mesh.indices.get_za3lpa$(i);
      var p0 = Vec3f_init_0(v);
      v.index = mesh.indices.get_za3lpa$(i + 1 | 0);
      var p1 = Vec3f_init_0(v);
      v.index = mesh.indices.get_za3lpa$(i + 2 | 0);
      var p2 = Vec3f_init_0(v);
      var element = new Triangle(p0, p1, p2);
      triangles.add_11rb$(element);
    }
    return triangleKdTree_0(triangles, bucketSz);
  }
  function triangleKdTree_0(triangles, bucketSz) {
    if (bucketSz === void 0)
      bucketSz = 10;
    return new KdTree(triangles, TriangleAdapter_getInstance(), bucketSz);
  }
  function triangleOcTree(triangles, bounds, bucketSz) {
    if (triangles === void 0)
      triangles = emptyList();
    if (bounds === void 0)
      bounds = new BoundingBox();
    if (bucketSz === void 0)
      bucketSz = 10;
    return new OcTree(TriangleAdapter_getInstance(), triangles, bounds, void 0, bucketSz);
  }
  function triangleOcTree_0(mesh, bucketSz) {
    if (bucketSz === void 0)
      bucketSz = 10;
    var tmp$;
    var triangles = ArrayList_init_0();
    var v = mesh.get_za3lpa$(0);
    tmp$ = mesh.numIndices;
    for (var i = 0; i < tmp$; i += 3) {
      v.index = mesh.indices.get_za3lpa$(i);
      var p0 = Vec3f_init_0(v);
      v.index = mesh.indices.get_za3lpa$(i + 1 | 0);
      var p1 = Vec3f_init_0(v);
      v.index = mesh.indices.get_za3lpa$(i + 2 | 0);
      var p2 = Vec3f_init_0(v);
      var element = new Triangle(p0, p1, p2);
      triangles.add_11rb$(element);
    }
    return triangleOcTree(triangles, mesh.bounds, bucketSz);
  }
  function edgeKdTree(edges, bucketSz) {
    if (bucketSz === void 0)
      bucketSz = 10;
    return new KdTree(edges, EdgeAdapter_getInstance(), bucketSz);
  }
  function edgeOcTree(triangles, bounds, bucketSz) {
    if (triangles === void 0)
      triangles = emptyList();
    if (bounds === void 0)
      bounds = new BoundingBox();
    if (bucketSz === void 0)
      bucketSz = 10;
    return new OcTree(EdgeAdapter_getInstance(), triangles, bounds, void 0, bucketSz);
  }
  function ItemAdapter() {
  }
  ItemAdapter.prototype.getCenterX_trkh7z$ = function (item) {
    return (this.getMinX_trkh7z$(item) + this.getMaxX_trkh7z$(item)) * 0.5;
  };
  ItemAdapter.prototype.getCenterY_trkh7z$ = function (item) {
    return (this.getMinY_trkh7z$(item) + this.getMaxY_trkh7z$(item)) * 0.5;
  };
  ItemAdapter.prototype.getCenterZ_trkh7z$ = function (item) {
    return (this.getMinZ_trkh7z$(item) + this.getMaxZ_trkh7z$(item)) * 0.5;
  };
  ItemAdapter.prototype.getSzX_trkh7z$ = function (item) {
    return this.getMaxX_trkh7z$(item) - this.getMinX_trkh7z$(item);
  };
  ItemAdapter.prototype.getSzY_trkh7z$ = function (item) {
    return this.getMaxY_trkh7z$(item) - this.getMinY_trkh7z$(item);
  };
  ItemAdapter.prototype.getSzZ_trkh7z$ = function (item) {
    return this.getMaxZ_trkh7z$(item) - this.getMinZ_trkh7z$(item);
  };
  ItemAdapter.prototype.getMin_hm1yd1$ = function (item, result) {
    return result.set_y2kzbl$(this.getMinX_trkh7z$(item), this.getMinY_trkh7z$(item), this.getMinZ_trkh7z$(item));
  };
  ItemAdapter.prototype.getMax_hm1yd1$ = function (item, result) {
    return result.set_y2kzbl$(this.getMaxX_trkh7z$(item), this.getMaxY_trkh7z$(item), this.getMaxZ_trkh7z$(item));
  };
  ItemAdapter.prototype.getCenter_hm1yd1$ = function (item, result) {
    return result.set_y2kzbl$(this.getCenterX_trkh7z$(item), this.getCenterY_trkh7z$(item), this.getCenterZ_trkh7z$(item));
  };
  ItemAdapter.prototype.setNode_bc9457$ = function (item, node) {
  };
  ItemAdapter.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ItemAdapter',
    interfaces: []
  };
  function Vec3fAdapter() {
    Vec3fAdapter_instance = this;
  }
  Vec3fAdapter.prototype.getMinX_trkh7z$ = function (item) {
    return item.x;
  };
  Vec3fAdapter.prototype.getMinY_trkh7z$ = function (item) {
    return item.y;
  };
  Vec3fAdapter.prototype.getMinZ_trkh7z$ = function (item) {
    return item.z;
  };
  Vec3fAdapter.prototype.getMaxX_trkh7z$ = function (item) {
    return item.x;
  };
  Vec3fAdapter.prototype.getMaxY_trkh7z$ = function (item) {
    return item.y;
  };
  Vec3fAdapter.prototype.getMaxZ_trkh7z$ = function (item) {
    return item.z;
  };
  Vec3fAdapter.prototype.getCenterX_trkh7z$ = function (item) {
    return item.x;
  };
  Vec3fAdapter.prototype.getCenterY_trkh7z$ = function (item) {
    return item.y;
  };
  Vec3fAdapter.prototype.getCenterZ_trkh7z$ = function (item) {
    return item.z;
  };
  Vec3fAdapter.prototype.getSzX_trkh7z$ = function (item) {
    return 0.0;
  };
  Vec3fAdapter.prototype.getSzY_trkh7z$ = function (item) {
    return 0.0;
  };
  Vec3fAdapter.prototype.getSzZ_trkh7z$ = function (item) {
    return 0.0;
  };
  Vec3fAdapter.prototype.getMin_hm1yd1$ = function (item, result) {
    return result.set_czzhiu$(item);
  };
  Vec3fAdapter.prototype.getCenter_hm1yd1$ = function (item, result) {
    return result.set_czzhiu$(item);
  };
  Vec3fAdapter.prototype.getMax_hm1yd1$ = function (item, result) {
    return result.set_czzhiu$(item);
  };
  Vec3fAdapter.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Vec3fAdapter',
    interfaces: [ItemAdapter]
  };
  var Vec3fAdapter_instance = null;
  function Vec3fAdapter_getInstance() {
    if (Vec3fAdapter_instance === null) {
      new Vec3fAdapter();
    }return Vec3fAdapter_instance;
  }
  function EdgeAdapter() {
    EdgeAdapter_instance = this;
  }
  EdgeAdapter.prototype.getMinX_trkh7z$ = function (item) {
    return item.minX;
  };
  EdgeAdapter.prototype.getMinY_trkh7z$ = function (item) {
    return item.minY;
  };
  EdgeAdapter.prototype.getMinZ_trkh7z$ = function (item) {
    return item.minZ;
  };
  EdgeAdapter.prototype.getMaxX_trkh7z$ = function (item) {
    return item.maxX;
  };
  EdgeAdapter.prototype.getMaxY_trkh7z$ = function (item) {
    return item.maxY;
  };
  EdgeAdapter.prototype.getMaxZ_trkh7z$ = function (item) {
    return item.maxZ;
  };
  EdgeAdapter.prototype.getMin_hm1yd1$ = function (item, result) {
    return result.set_y2kzbl$(item.minX, item.minY, item.minZ);
  };
  EdgeAdapter.prototype.getMax_hm1yd1$ = function (item, result) {
    return result.set_y2kzbl$(item.maxX, item.maxY, item.maxZ);
  };
  EdgeAdapter.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'EdgeAdapter',
    interfaces: [ItemAdapter]
  };
  var EdgeAdapter_instance = null;
  function EdgeAdapter_getInstance() {
    if (EdgeAdapter_instance === null) {
      new EdgeAdapter();
    }return EdgeAdapter_instance;
  }
  function TriangleAdapter() {
    TriangleAdapter_instance = this;
  }
  TriangleAdapter.prototype.getMinX_trkh7z$ = function (item) {
    return item.minX;
  };
  TriangleAdapter.prototype.getMinY_trkh7z$ = function (item) {
    return item.minY;
  };
  TriangleAdapter.prototype.getMinZ_trkh7z$ = function (item) {
    return item.minZ;
  };
  TriangleAdapter.prototype.getMaxX_trkh7z$ = function (item) {
    return item.maxX;
  };
  TriangleAdapter.prototype.getMaxY_trkh7z$ = function (item) {
    return item.maxY;
  };
  TriangleAdapter.prototype.getMaxZ_trkh7z$ = function (item) {
    return item.maxZ;
  };
  TriangleAdapter.prototype.getMin_hm1yd1$ = function (item, result) {
    return result.set_y2kzbl$(item.minX, item.minY, item.minZ);
  };
  TriangleAdapter.prototype.getMax_hm1yd1$ = function (item, result) {
    return result.set_y2kzbl$(item.maxX, item.maxY, item.maxZ);
  };
  TriangleAdapter.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'TriangleAdapter',
    interfaces: [ItemAdapter]
  };
  var TriangleAdapter_instance = null;
  function TriangleAdapter_getInstance() {
    if (TriangleAdapter_instance === null) {
      new TriangleAdapter();
    }return TriangleAdapter_instance;
  }
  function Edge(pt0, pt1) {
    Edge$Companion_getInstance();
    this.pt0 = pt0;
    this.pt1 = pt1;
    this.e = null;
    this.length = 0;
    this.minX = 0;
    this.minY = 0;
    this.minZ = 0;
    this.maxX = 0;
    this.maxY = 0;
    this.maxZ = 0;
    this.tmpVec_hbsawf$_0 = MutableVec3f_init();
    this.tmpResult_ve9atw$_0 = MutableVec3f_init();
    this.e = this.pt1.subtract_2gj7b4$(this.pt0, MutableVec3f_init()).norm();
    this.length = this.pt0.distance_czzhiu$(this.pt1);
    var a = this.pt0.x;
    var b = this.pt1.x;
    this.minX = Math_0.min(a, b);
    var a_0 = this.pt0.y;
    var b_0 = this.pt1.y;
    this.minY = Math_0.min(a_0, b_0);
    var a_1 = this.pt0.z;
    var b_1 = this.pt1.z;
    this.minZ = Math_0.min(a_1, b_1);
    var a_2 = this.pt0.x;
    var b_2 = this.pt1.x;
    this.maxX = Math_0.max(a_2, b_2);
    var a_3 = this.pt0.y;
    var b_3 = this.pt1.y;
    this.maxY = Math_0.max(a_3, b_3);
    var a_4 = this.pt0.z;
    var b_4 = this.pt1.z;
    this.maxZ = Math_0.max(a_4, b_4);
  }
  Edge.prototype.rayDistanceSqr_nvyeur$ = function (ray) {
    return ray.sqrDistanceToPoint_czzhiu$(this.nearestPointOnEdge_lplggz$(ray, this.tmpResult_ve9atw$_0));
  };
  Edge.prototype.nearestPointOnEdge_lplggz$ = function (ray, result) {
    var dot = this.e.times_czzhiu$(ray.direction);
    var n = 1.0 - dot * dot;
    var eps;
    eps = package$math.FUZZY_EQ_F;
    if (Math_0.abs(n) <= eps) {
      return result.set_czzhiu$(this.pt0.sqrDistance_czzhiu$(ray.origin) < this.pt1.sqrDistance_czzhiu$(ray.origin) ? this.pt0 : this.pt1);
    }ray.origin.subtract_2gj7b4$(this.pt0, this.tmpVec_hbsawf$_0);
    var a = this.tmpVec_hbsawf$_0.times_czzhiu$(this.e);
    var b = this.tmpVec_hbsawf$_0.times_czzhiu$(ray.direction);
    var l = (a - b * dot) / n;
    var tmp$;
    if (l > 0) {
      var tmp$_0 = this.e;
      var b_0 = this.length;
      tmp$ = tmp$_0.scale_749b8l$(Math_0.min(l, b_0), result).add_czzhiu$(this.pt0);
    } else
      tmp$ = result.set_czzhiu$(this.pt0);
    return tmp$;
  };
  function Edge$Companion() {
    Edge$Companion_instance = this;
  }
  Edge$Companion.prototype.getEdges_r7nl2o$ = function (lineMeshData) {
    var tmp$;
    if (lineMeshData.primitiveType !== PrimitiveType$LINES_getInstance()) {
      throw IllegalArgumentException_init('Supplied meshData must have primitiveType GL_LINES');
    }var edges = ArrayList_init_0();
    tmp$ = lineMeshData.numIndices;
    for (var i = 0; i < tmp$; i += 2) {
      var i0 = lineMeshData.indices.get_za3lpa$(i);
      var i1 = lineMeshData.indices.get_za3lpa$(i + 1 | 0);
      var $receiver = lineMeshData.vertexIt;
      $receiver.index = i0;
      var p0 = Vec3f_init_0($receiver);
      var $receiver_0 = lineMeshData.vertexIt;
      $receiver_0.index = i1;
      var p1 = Vec3f_init_0($receiver_0);
      var element = new Edge(p0, p1);
      edges.add_11rb$(element);
    }
    return edges;
  };
  Edge$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Edge$Companion_instance = null;
  function Edge$Companion_getInstance() {
    if (Edge$Companion_instance === null) {
      new Edge$Companion();
    }return Edge$Companion_instance;
  }
  Edge.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Edge',
    interfaces: []
  };
  function Triangle(pt0, pt1, pt2) {
    Triangle$Companion_getInstance();
    this.pt0 = pt0;
    this.pt1 = pt1;
    this.pt2 = pt2;
    this.e1 = null;
    this.e2 = null;
    this.minX = 0;
    this.minY = 0;
    this.minZ = 0;
    this.maxX = 0;
    this.maxY = 0;
    this.maxZ = 0;
    this.tmpS_2u2gaj$_0 = MutableVec3f_init();
    this.tmpP_2u2g7y$_0 = MutableVec3f_init();
    this.tmpQ_2u2g8t$_0 = MutableVec3f_init();
    this.e1 = this.pt1.subtract_2gj7b4$(this.pt0, MutableVec3f_init());
    this.e2 = this.pt2.subtract_2gj7b4$(this.pt0, MutableVec3f_init());
    var a = this.pt0.x;
    var b = this.pt1.x;
    var c = this.pt2.x;
    this.minX = Math_0.min(a, b, c);
    var a_0 = this.pt0.y;
    var b_0 = this.pt1.y;
    var c_0 = this.pt2.y;
    this.minY = Math_0.min(a_0, b_0, c_0);
    var a_1 = this.pt0.z;
    var b_1 = this.pt1.z;
    var c_1 = this.pt2.z;
    this.minZ = Math_0.min(a_1, b_1, c_1);
    var a_2 = this.pt0.x;
    var b_2 = this.pt1.x;
    var c_2 = this.pt2.x;
    this.maxX = Math_0.max(a_2, b_2, c_2);
    var a_3 = this.pt0.y;
    var b_3 = this.pt1.y;
    var c_3 = this.pt2.y;
    this.maxY = Math_0.max(a_3, b_3, c_3);
    var a_4 = this.pt0.z;
    var b_4 = this.pt1.z;
    var c_4 = this.pt2.z;
    this.maxZ = Math_0.max(a_4, b_4, c_4);
  }
  Triangle.prototype.hitDistance_nvyeur$ = function (ray) {
    ray.origin.subtract_2gj7b4$(this.pt0, this.tmpS_2u2gaj$_0);
    ray.direction.cross_2gj7b4$(this.e2, this.tmpP_2u2g7y$_0);
    this.tmpS_2u2gaj$_0.cross_2gj7b4$(this.e1, this.tmpQ_2u2g8t$_0);
    var f = 1.0 / this.tmpP_2u2g7y$_0.times_czzhiu$(this.e1);
    var t = f * this.tmpQ_2u2g8t$_0.times_czzhiu$(this.e2);
    var u = f * this.tmpP_2u2g7y$_0.times_czzhiu$(this.tmpS_2u2gaj$_0);
    var v = f * this.tmpQ_2u2g8t$_0.times_czzhiu$(ray.direction);
    return u >= 0.0 && v >= 0.0 && u + v <= 1.0 && t >= 0.0 ? t : kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
  };
  function Triangle$Companion() {
    Triangle$Companion_instance = this;
  }
  Triangle$Companion.prototype.getTriangles_r7nl2o$ = function (meshData) {
    var tmp$;
    var triangles = ArrayList_init_0();
    tmp$ = meshData.numIndices;
    for (var i = 0; i < tmp$; i += 3) {
      var element = Triangle_init(meshData, i);
      triangles.add_11rb$(element);
    }
    return triangles;
  };
  Triangle$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Triangle$Companion_instance = null;
  function Triangle$Companion_getInstance() {
    if (Triangle$Companion_instance === null) {
      new Triangle$Companion();
    }return Triangle$Companion_instance;
  }
  Triangle.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Triangle',
    interfaces: []
  };
  function Triangle_init(data, idx0, $this) {
    $this = $this || Object.create(Triangle.prototype);
    var $receiver = MutableVec3f_init();
    data.vertexIt.index = data.indices.get_za3lpa$(idx0);
    $receiver.set_czzhiu$(data.vertexIt.position);
    var $receiver_0 = MutableVec3f_init();
    data.vertexIt.index = data.indices.get_za3lpa$(idx0 + 1 | 0);
    $receiver_0.set_czzhiu$(data.vertexIt.position);
    var $receiver_1 = MutableVec3f_init();
    data.vertexIt.index = data.indices.get_za3lpa$(idx0 + 2 | 0);
    $receiver_1.set_czzhiu$(data.vertexIt.position);
    Triangle.call($this, $receiver, $receiver_0, $receiver_1);
    return $this;
  }
  function SpatialTree(itemAdapter) {
    this.itemAdapter = itemAdapter;
  }
  SpatialTree.prototype.drawNodeBounds_nl2my4$ = function (lineMesh) {
    this.root.drawNodeBounds_nl2my4$(lineMesh);
  };
  function SpatialTree$Node($outer, depth) {
    this.$outer = $outer;
    this.depth = depth;
    this.bounds = new BoundingBox();
    this.traversalOrder = 0.0;
  }
  Object.defineProperty(SpatialTree$Node.prototype, 'isLeaf', {
    get: function () {
      return this.children.isEmpty();
    }
  });
  SpatialTree$Node.prototype.drawNodeBounds_nl2my4$ = function (lineMesh) {
    var tmp$;
    var color = ColorGradient$Companion_getInstance().JET_MD.getColor_y2kzbl$(this.depth % 6.7 / 6.7);
    lineMesh.addBoundingBox_j1pmtk$(this.bounds, color);
    tmp$ = this.children;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.children.get_za3lpa$(i).drawNodeBounds_nl2my4$(lineMesh);
    }
  };
  SpatialTree$Node.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Node',
    interfaces: []
  };
  SpatialTree.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SpatialTree',
    interfaces: [Collection]
  };
  function Comparator$ObjectLiteral_4(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_4.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_4.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_3 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function PointDistance() {
  }
  PointDistance.prototype.nodeSqrDistanceToPoint_m5117s$ = function (node, point) {
    return node.bounds.pointDistanceSqr_czzhiu$(point);
  };
  PointDistance.prototype.itemSqrDistanceToPoint_54x1zp$ = function (tree, item, point) {
    var dx = tree.itemAdapter.getCenterX_trkh7z$(item) - point.x;
    var dy = tree.itemAdapter.getCenterY_trkh7z$(item) - point.y;
    var dz = tree.itemAdapter.getCenterZ_trkh7z$(item) - point.z;
    return dx * dx + dy * dy + dz * dz;
  };
  PointDistance.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'PointDistance',
    interfaces: []
  };
  function BoundingSphereDistance() {
  }
  BoundingSphereDistance.prototype.itemSqrDistanceToPoint_54x1zp$ = function (tree, item, point) {
    var dx = tree.itemAdapter.getCenterX_trkh7z$(item) - point.x;
    var dy = tree.itemAdapter.getCenterY_trkh7z$(item) - point.y;
    var dz = tree.itemAdapter.getCenterZ_trkh7z$(item) - point.z;
    var rx = tree.itemAdapter.getSzX_trkh7z$(item) * 0.5;
    var ry = tree.itemAdapter.getSzY_trkh7z$(item) * 0.5;
    var rz = tree.itemAdapter.getSzZ_trkh7z$(item) * 0.5;
    var x = dx * dx + dy * dy + dz * dz;
    var tmp$ = Math_0.sqrt(x);
    var x_0 = rx * rx + ry * ry + rz * rz;
    var b = tmp$ - Math_0.sqrt(x_0);
    var d = Math_0.max(0.0, b);
    return d * d;
  };
  BoundingSphereDistance.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'BoundingSphereDistance',
    interfaces: [PointDistance]
  };
  function RayDistance() {
  }
  RayDistance.prototype.nodeSqrDistanceToRay_4lohg5$ = function (node, ray) {
    return node.bounds.hitDistanceSqr_nvyeur$(ray);
  };
  RayDistance.prototype.itemSqrDistanceToRay_t0er6w$ = function (tree, item, ray) {
    return ray.sqrDistanceToPoint_y2kzbl$(tree.itemAdapter.getCenterX_trkh7z$(item), tree.itemAdapter.getCenterY_trkh7z$(item), tree.itemAdapter.getCenterZ_trkh7z$(item));
  };
  RayDistance.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'RayDistance',
    interfaces: []
  };
  function SpatialTreeTraverser() {
  }
  SpatialTreeTraverser.prototype.traverse_m6hlto$ = function (tree) {
    this.traverseNode_h2y3v6$(tree, tree.root);
  };
  SpatialTreeTraverser.prototype.traverseNode_h2y3v6$ = function (tree, node) {
    if (node.isLeaf) {
      this.traverseLeaf_h2y3v6$(tree, node);
    } else {
      this.traverseChildren_h2y3v6$(tree, node);
    }
  };
  SpatialTreeTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SpatialTreeTraverser',
    interfaces: []
  };
  function CenterPointTraverser() {
    SpatialTreeTraverser.call(this);
    this.center = MutableVec3f_init();
    this.pointDistance = new CenterPointTraverser$pointDistance$ObjectLiteral();
  }
  CenterPointTraverser.prototype.setup_czzhiu$ = function (center) {
    this.center.set_czzhiu$(center);
  };
  function CenterPointTraverser$pointDistance$ObjectLiteral() {
  }
  CenterPointTraverser$pointDistance$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [PointDistance]
  };
  CenterPointTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CenterPointTraverser',
    interfaces: [SpatialTreeTraverser]
  };
  function InRadiusTraverser() {
    CenterPointTraverser.call(this);
    this.result = ArrayList_init_0();
    this.radius_45ks74$_0 = 1.0;
    this.radiusSqr = 1.0;
  }
  Object.defineProperty(InRadiusTraverser.prototype, 'radius', {
    get: function () {
      return this.radius_45ks74$_0;
    },
    set: function (radius) {
      this.radius_45ks74$_0 = radius;
    }
  });
  InRadiusTraverser.prototype.setup_2qa7tb$ = function (center, radius) {
    CenterPointTraverser.prototype.setup_czzhiu$.call(this, center);
    this.radius = radius;
    this.radiusSqr = radius * radius;
    return this;
  };
  InRadiusTraverser.prototype.traverse_m6hlto$ = function (tree) {
    this.result.clear();
    CenterPointTraverser.prototype.traverse_m6hlto$.call(this, tree);
  };
  InRadiusTraverser.prototype.traverseChildren_h2y3v6$ = function (tree, node) {
    var tmp$;
    tmp$ = node.children;
    for (var i = 0; i !== tmp$.size; ++i) {
      var child = node.children.get_za3lpa$(i);
      var dSqr = this.pointDistance.nodeSqrDistanceToPoint_m5117s$(child, this.center);
      if (dSqr < this.radiusSqr) {
        this.traverseNode_h2y3v6$(tree, child);
      }}
  };
  InRadiusTraverser.prototype.traverseLeaf_h2y3v6$ = function (tree, leaf) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$ = leaf.nodeRange;
    tmp$_0 = tmp$.first;
    tmp$_1 = tmp$.last;
    tmp$_2 = tmp$.step;
    for (var i = tmp$_0; i <= tmp$_1; i += tmp$_2) {
      var it = leaf.items.get_za3lpa$(i);
      if (this.pointDistance.itemSqrDistanceToPoint_54x1zp$(tree, it, this.center) < this.radiusSqr) {
        this.result.add_11rb$(it);
      }}
  };
  InRadiusTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InRadiusTraverser',
    interfaces: [CenterPointTraverser]
  };
  function BoundingSphereInRadiusTraverser() {
    InRadiusTraverser.call(this);
  }
  BoundingSphereInRadiusTraverser.prototype.traverseLeaf_h2y3v6$ = function (tree, leaf) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$ = leaf.nodeRange;
    tmp$_0 = tmp$.first;
    tmp$_1 = tmp$.last;
    tmp$_2 = tmp$.step;
    for (var i = tmp$_0; i <= tmp$_1; i += tmp$_2) {
      var it = leaf.items.get_za3lpa$(i);
      var rx = tree.itemAdapter.getSzX_trkh7z$(it) / 2;
      var ry = tree.itemAdapter.getSzY_trkh7z$(it) / 2;
      var rz = tree.itemAdapter.getSzZ_trkh7z$(it) / 2;
      var x = rx * rx + ry * ry + rz * rz;
      var itRadius = Math_0.sqrt(x);
      var x_0 = this.pointDistance.itemSqrDistanceToPoint_54x1zp$(tree, it, this.center);
      if (Math_0.sqrt(x_0) - itRadius < this.radius) {
        this.result.add_11rb$(it);
      }}
  };
  BoundingSphereInRadiusTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BoundingSphereInRadiusTraverser',
    interfaces: [InRadiusTraverser]
  };
  function KNearestTraverser() {
    KNearestTraverser$Companion_getInstance();
    CenterPointTraverser.call(this);
    this.k_lz5t59$_0 = 10;
    this.radiusSqr_9tgcx0$_0 = 9.9999998E17;
    this.result = ArrayList_init_0();
    this.maxDistance_1d7gth$_0 = 0.0;
    this.items_3hjtdu$_0 = new PriorityQueue(new Comparator$ObjectLiteral_4(compareBy$lambda_3(KNearestTraverser$items$lambda)));
    this.itemRecycler_b63bes$_0 = new ObjectPool(KNearestTraverser$itemRecycler$lambda);
    this.childLists_142w3h$_0 = new ChildNodesWithDistance(KNearestTraverser$childLists$lambda(this));
  }
  Object.defineProperty(KNearestTraverser.prototype, 'k', {
    get: function () {
      return this.k_lz5t59$_0;
    },
    set: function (k) {
      this.k_lz5t59$_0 = k;
    }
  });
  Object.defineProperty(KNearestTraverser.prototype, 'radiusSqr', {
    get: function () {
      return this.radiusSqr_9tgcx0$_0;
    },
    set: function (radiusSqr) {
      this.radiusSqr_9tgcx0$_0 = radiusSqr;
    }
  });
  Object.defineProperty(KNearestTraverser.prototype, 'maxDistance', {
    get: function () {
      return this.maxDistance_1d7gth$_0;
    },
    set: function (maxDistance) {
      this.maxDistance_1d7gth$_0 = maxDistance;
    }
  });
  KNearestTraverser.prototype.setup_w8bw21$$default = function (center, k, maxRadius) {
    CenterPointTraverser.prototype.setup_czzhiu$.call(this, center);
    this.k = k;
    this.radiusSqr = maxRadius * maxRadius;
    return this;
  };
  KNearestTraverser.prototype.setup_w8bw21$ = function (center, k, maxRadius, callback$default) {
    if (maxRadius === void 0)
      maxRadius = KNearestTraverser$Companion_getInstance().MAX_RADIUS;
    return callback$default ? callback$default(center, k, maxRadius) : this.setup_w8bw21$$default(center, k, maxRadius);
  };
  KNearestTraverser.prototype.traverse_m6hlto$ = function (tree) {
    CenterPointTraverser.prototype.traverse_m6hlto$.call(this, tree);
    this.result.clear();
    this.maxDistance = 0.0;
    if (!this.items_3hjtdu$_0.isEmpty()) {
      var x = this.items_3hjtdu$_0.peek().dSqr;
      this.maxDistance = Math_0.sqrt(x);
      while (!this.items_3hjtdu$_0.isEmpty()) {
        var $receiver = this.result;
        var element = this.items_3hjtdu$_0.poll().item;
        $receiver.add_11rb$(element);
      }
    }this.itemRecycler_b63bes$_0.recycleAll();
  };
  KNearestTraverser.prototype.traverseChildren_h2y3v6$ = function (tree, node) {
    var $this = this.childLists_142w3h$_0;
    var n = node.children.size;
    var $this_0 = $this.childListRecycler;
    var item = $this_0.get();
    var tmp$;
    if (item.size !== n) {
      if (item.size < n) {
        tmp$ = n - item.size | 0;
        for (var i = 1; i <= tmp$; i++) {
          var element = new ChildNodesWithDistance$Child($this, 0.0, null);
          item.add_11rb$(element);
        }
      } else {
        while (item.size > n) {
          item.removeAt_za3lpa$(get_lastIndex(item));
        }
      }
    }var tmp$_0, tmp$_1;
    tmp$_0 = node.children;
    for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
      item.get_za3lpa$(i_0).setChildNode_m31f86$(node.children.get_za3lpa$(i_0));
    }
    this.childLists_142w3h$_0.sortByDistance_ntxjn6$(item);
    tmp$_1 = node.children;
    for (var i_1 = 0; i_1 !== tmp$_1.size; ++i_1) {
      var tmp$_2;
      if (this.items_3hjtdu$_0.size < this.k) {
        tmp$_2 = this.radiusSqr;
      } else {
        tmp$_2 = this.items_3hjtdu$_0.peek().dSqr;
      }
      var maxDist = tmp$_2;
      var child = item.get_za3lpa$(i_1);
      if (child.dist < maxDist) {
        this.traverseNode_h2y3v6$(tree, ensureNotNull(child.node));
      } else {
        break;
      }
    }
    $this_0.recycle_trkh7z$(item);
  };
  KNearestTraverser.prototype.traverseLeaf_h2y3v6$ = function (tree, leaf) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$ = leaf.nodeRange;
    tmp$_0 = tmp$.first;
    tmp$_1 = tmp$.last;
    tmp$_2 = tmp$.step;
    for (var i = tmp$_0; i <= tmp$_1; i += tmp$_2) {
      var it = leaf.items.get_za3lpa$(i);
      var dSqr = this.pointDistance.itemSqrDistanceToPoint_54x1zp$(tree, it, this.center);
      if (dSqr < this.radiusSqr && (this.items_3hjtdu$_0.size < this.k || dSqr < this.items_3hjtdu$_0.peek().dSqr)) {
        this.insert_2aiobd$_0(it, dSqr);
      }}
  };
  KNearestTraverser.prototype.insert_2aiobd$_0 = function (value, dSqr) {
    var tmp$;
    if (this.items_3hjtdu$_0.size === this.k) {
      tmp$ = this.items_3hjtdu$_0.poll();
    } else {
      tmp$ = this.itemRecycler_b63bes$_0.get();
    }
    var insItem = tmp$;
    this.items_3hjtdu$_0.plusAssign_11rb$(insItem.set_mv9gn0$(value, dSqr));
  };
  function KNearestTraverser$Item() {
    this.item_zg5hxs$_0 = this.item_zg5hxs$_0;
    this.dSqr = 0.0;
  }
  Object.defineProperty(KNearestTraverser$Item.prototype, 'item', {
    get: function () {
      if (this.item_zg5hxs$_0 == null)
        return throwUPAE('item');
      return this.item_zg5hxs$_0;
    },
    set: function (item) {
      this.item_zg5hxs$_0 = item;
    }
  });
  KNearestTraverser$Item.prototype.set_mv9gn0$ = function (item, dSqr) {
    this.item = item;
    this.dSqr = dSqr;
    return this;
  };
  KNearestTraverser$Item.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Item',
    interfaces: []
  };
  function KNearestTraverser$Companion() {
    KNearestTraverser$Companion_instance = this;
    this.MAX_RADIUS = 1.8446743E19;
  }
  KNearestTraverser$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var KNearestTraverser$Companion_instance = null;
  function KNearestTraverser$Companion_getInstance() {
    if (KNearestTraverser$Companion_instance === null) {
      new KNearestTraverser$Companion();
    }return KNearestTraverser$Companion_instance;
  }
  function KNearestTraverser$items$lambda(it) {
    return it.dSqr;
  }
  function KNearestTraverser$itemRecycler$lambda() {
    return new KNearestTraverser$Item();
  }
  function KNearestTraverser$childLists$lambda(this$KNearestTraverser) {
    return function (it) {
      return this$KNearestTraverser.pointDistance.nodeSqrDistanceToPoint_m5117s$(it, this$KNearestTraverser.center);
    };
  }
  KNearestTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KNearestTraverser',
    interfaces: [CenterPointTraverser]
  };
  function NearestToRayTraverser() {
    SpatialTreeTraverser.call(this);
    this.ray = new Ray();
    this.nearest_pgibj6$_0 = null;
    this.distance_w4zyjn$_0 = 0.0;
    this.distanceSqr_n4v5rx$_0 = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    this.rayDistance = new NearestToRayTraverser$rayDistance$ObjectLiteral();
    this.childLists_pq2ts1$_0 = new ChildNodesWithDistance(NearestToRayTraverser$childLists$lambda(this));
  }
  Object.defineProperty(NearestToRayTraverser.prototype, 'nearest', {
    get: function () {
      return this.nearest_pgibj6$_0;
    },
    set: function (nearest) {
      this.nearest_pgibj6$_0 = nearest;
    }
  });
  Object.defineProperty(NearestToRayTraverser.prototype, 'distance', {
    get: function () {
      return this.distance_w4zyjn$_0;
    },
    set: function (distance) {
      this.distance_w4zyjn$_0 = distance;
    }
  });
  Object.defineProperty(NearestToRayTraverser.prototype, 'distanceSqr', {
    get: function () {
      return this.distanceSqr_n4v5rx$_0;
    },
    set: function (distanceSqr) {
      this.distanceSqr_n4v5rx$_0 = distanceSqr;
    }
  });
  NearestToRayTraverser.prototype.setup_nvyeur$ = function (ray) {
    this.ray.set_nvyeur$(ray);
    this.nearest = null;
    this.distanceSqr = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    return this;
  };
  NearestToRayTraverser.prototype.traverse_m6hlto$ = function (tree) {
    SpatialTreeTraverser.prototype.traverse_m6hlto$.call(this, tree);
    var tmp$;
    if (this.distanceSqr !== kotlin_js_internal_FloatCompanionObject.MAX_VALUE) {
      var x = this.distanceSqr;
      tmp$ = Math_0.sqrt(x);
    } else
      tmp$ = kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    this.distance = tmp$;
  };
  NearestToRayTraverser.prototype.traverseChildren_h2y3v6$ = function (tree, node) {
    var $this = this.childLists_pq2ts1$_0;
    var n = node.children.size;
    var $this_0 = $this.childListRecycler;
    var item = $this_0.get();
    var tmp$;
    if (item.size !== n) {
      if (item.size < n) {
        tmp$ = n - item.size | 0;
        for (var i = 1; i <= tmp$; i++) {
          var element = new ChildNodesWithDistance$Child($this, 0.0, null);
          item.add_11rb$(element);
        }
      } else {
        while (item.size > n) {
          item.removeAt_za3lpa$(get_lastIndex(item));
        }
      }
    }var tmp$_0, tmp$_1;
    tmp$_0 = node.children;
    for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
      item.get_za3lpa$(i_0).setChildNode_m31f86$(node.children.get_za3lpa$(i_0));
    }
    this.childLists_pq2ts1$_0.sortByDistance_ntxjn6$(item);
    tmp$_1 = node.children;
    for (var i_1 = 0; i_1 !== tmp$_1.size; ++i_1) {
      var child = item.get_za3lpa$(i_1);
      if (child.dist < this.distanceSqr) {
        this.traverseNode_h2y3v6$(tree, ensureNotNull(child.node));
      } else {
        break;
      }
    }
    $this_0.recycle_trkh7z$(item);
  };
  NearestToRayTraverser.prototype.traverseLeaf_h2y3v6$ = function (tree, leaf) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$ = leaf.nodeRange;
    tmp$_0 = tmp$.first;
    tmp$_1 = tmp$.last;
    tmp$_2 = tmp$.step;
    for (var i = tmp$_0; i <= tmp$_1; i += tmp$_2) {
      var it = leaf.items.get_za3lpa$(i);
      var dSqr = this.rayDistance.itemSqrDistanceToRay_t0er6w$(tree, it, this.ray);
      if (dSqr < this.distanceSqr) {
        this.nearest = it;
        this.distanceSqr = dSqr;
      }}
  };
  function NearestToRayTraverser$rayDistance$ObjectLiteral() {
  }
  NearestToRayTraverser$rayDistance$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [RayDistance]
  };
  function NearestToRayTraverser$childLists$lambda(this$NearestToRayTraverser) {
    return function (it) {
      return this$NearestToRayTraverser.rayDistance.nodeSqrDistanceToRay_4lohg5$(it, this$NearestToRayTraverser.ray);
    };
  }
  NearestToRayTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NearestToRayTraverser',
    interfaces: [SpatialTreeTraverser]
  };
  function NearestEdgeToRayTraverser() {
    NearestToRayTraverser.call(this);
    this.rayDistance = new NearestEdgeToRayTraverser_init$ObjectLiteral();
  }
  function NearestEdgeToRayTraverser_init$ObjectLiteral() {
  }
  NearestEdgeToRayTraverser_init$ObjectLiteral.prototype.itemSqrDistanceToRay_t0er6w$ = function (tree, item, ray) {
    return item.rayDistanceSqr_nvyeur$(ray);
  };
  NearestEdgeToRayTraverser_init$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [RayDistance]
  };
  NearestEdgeToRayTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NearestEdgeToRayTraverser',
    interfaces: [NearestToRayTraverser]
  };
  function TriangleHitTraverser() {
    NearestToRayTraverser.call(this);
    this.hitPoint = MutableVec3f_init();
    this.rayDistance = new TriangleHitTraverser_init$ObjectLiteral();
  }
  Object.defineProperty(TriangleHitTraverser.prototype, 'isHit', {
    get: function () {
      return this.nearest != null;
    }
  });
  TriangleHitTraverser.prototype.setup_nvyeur$ = function (ray) {
    this.hitPoint.set_czzhiu$(Vec3f$Companion_getInstance().ZERO);
    NearestToRayTraverser.prototype.setup_nvyeur$.call(this, ray);
    return this;
  };
  TriangleHitTraverser.prototype.traverse_m6hlto$ = function (tree) {
    NearestToRayTraverser.prototype.traverse_m6hlto$.call(this, tree);
    if (this.isHit) {
      this.hitPoint.set_czzhiu$(this.ray.direction).scale_mx4ult$(this.distance).add_czzhiu$(this.ray.origin);
    }};
  function TriangleHitTraverser_init$ObjectLiteral() {
  }
  TriangleHitTraverser_init$ObjectLiteral.prototype.itemSqrDistanceToRay_t0er6w$ = function (tree, item, ray) {
    var tmp$;
    var dist = item.hitDistance_nvyeur$(ray);
    if (dist < kotlin_js_internal_FloatCompanionObject.MAX_VALUE) {
      tmp$ = dist * dist;
    } else {
      return kotlin_js_internal_FloatCompanionObject.MAX_VALUE;
    }
    return tmp$;
  };
  TriangleHitTraverser_init$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [RayDistance]
  };
  TriangleHitTraverser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TriangleHitTraverser',
    interfaces: [NearestToRayTraverser]
  };
  function ChildNodesWithDistance(childDist) {
    this.childDist = childDist;
    this.childListRecycler = new ObjectPool(ChildNodesWithDistance$childListRecycler$lambda);
    this.childComparator = new Comparator$ObjectLiteral_4(compareBy$lambda_3(ChildNodesWithDistance$childComparator$lambda));
  }
  ChildNodesWithDistance.prototype.use_5wl3jr$ = defineInlineFunction('kool.de.fabmax.kool.util.ChildNodesWithDistance.use_5wl3jr$', wrapFunction(function () {
    var ChildNodesWithDistance$ChildNodesWithDistance$Child_init = _.de.fabmax.kool.util.ChildNodesWithDistance.Child;
    var get_lastIndex = Kotlin.kotlin.collections.get_lastIndex_55thoc$;
    return function (n, block) {
      var $this = this.childListRecycler;
      var item = $this.get();
      var tmp$;
      if (item.size !== n) {
        if (item.size < n) {
          tmp$ = n - item.size | 0;
          for (var i = 1; i <= tmp$; i++) {
            var element = new ChildNodesWithDistance$ChildNodesWithDistance$Child_init(this, 0.0, null);
            item.add_11rb$(element);
          }
        } else {
          while (item.size > n) {
            item.removeAt_za3lpa$(get_lastIndex(item));
          }
        }
      }block(item);
      $this.recycle_trkh7z$(item);
    };
  }));
  ChildNodesWithDistance.prototype.sortByDistance_ntxjn6$ = function (childList) {
    sortWith(childList, this.childComparator);
  };
  function ChildNodesWithDistance$Child($outer, dist, node) {
    this.$outer = $outer;
    this.dist = dist;
    this.node = node;
  }
  ChildNodesWithDistance$Child.prototype.setChildNode_m31f86$ = function (node) {
    this.node = node;
    this.dist = this.$outer.childDist(node);
  };
  ChildNodesWithDistance$Child.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Child',
    interfaces: []
  };
  function ChildNodesWithDistance$childListRecycler$lambda() {
    return ArrayList_init_0();
  }
  function ChildNodesWithDistance$childComparator$lambda(it) {
    return it.dist;
  }
  ChildNodesWithDistance.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ChildNodesWithDistance',
    interfaces: []
  };
  function TouchGestureEvaluator() {
    TouchGestureEvaluator$Companion_getInstance();
    this.currentGesture_nrwzky$_0 = new TouchGestureEvaluator$Gesture();
    this.activePointers_ajelte$_0 = ArrayList_init_0();
    this.tmpVec1_vwccvm$_0 = MutableVec2f_init();
    this.tmpVec2_vwccwh$_0 = MutableVec2f_init();
    this.startPositions = LinkedHashMap_init();
    this.screenDpi = 96.0;
  }
  Object.defineProperty(TouchGestureEvaluator.prototype, 'currentGesture', {
    get: function () {
      return this.currentGesture_nrwzky$_0;
    },
    set: function (currentGesture) {
      this.currentGesture_nrwzky$_0 = currentGesture;
    }
  });
  TouchGestureEvaluator.prototype.evaluate_19cf9$ = function (pointerState, ctx) {
    this.screenDpi = ctx.screenDpi;
    pointerState.getActivePointers_j71cmr$(this.activePointers_ajelte$_0);
    if (this.activePointers_ajelte$_0.size > 1) {
      switch (this.currentGesture.type) {
        case 0:
          this.onGestureInit_mcn869$(this.activePointers_ajelte$_0);
          break;
        case -1:
          this.onDetermineGesture_mcn869$(this.activePointers_ajelte$_0);
          break;
        case 1:
          this.handleGesture_mcn869$(this.activePointers_ajelte$_0);
          break;
        case 2:
          this.handleGesture_mcn869$(this.activePointers_ajelte$_0);
          break;
      }
    } else {
      this.currentGesture.type = 0;
      this.startPositions.clear();
    }
  };
  TouchGestureEvaluator.prototype.onGestureInit_mcn869$ = function (pointers) {
    var tmp$;
    tmp$ = pointers.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var $receiver = this.startPositions;
      var key = element.id;
      var value = new Vec2f(element.x, element.y);
      $receiver.put_xwzc9p$(key, value);
    }
    this.currentGesture.type = -1;
  };
  function TouchGestureEvaluator$onDetermineGesture$lambda(closure$pointers) {
    return function (ptrId) {
      var $receiver = closure$pointers;
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (element.id === ptrId) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result == null;
    };
  }
  TouchGestureEvaluator.prototype.onDetermineGesture_mcn869$ = function (pointers) {
    removeAll_0(this.startPositions.keys, TouchGestureEvaluator$onDetermineGesture$lambda(pointers));
    var destination = ArrayList_init_0();
    var tmp$;
    tmp$ = pointers.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (!this.startPositions.containsKey_11rb$(element.id))
        destination.add_11rb$(element);
    }
    var tmp$_0;
    tmp$_0 = destination.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      var $receiver = this.startPositions;
      var key = element_0.id;
      var value = new Vec2f(element_0.x, element_0.y);
      $receiver.put_xwzc9p$(key, value);
    }
    if (this.isPinch_mcn869$(pointers))
      this.currentGesture.type = 1;
    else if (this.isTwoFingerDrag_mcn869$(pointers))
      this.currentGesture.type = 2;
  };
  TouchGestureEvaluator.prototype.isPinch_mcn869$ = function (pointers) {
    if (pointers.size === 2) {
      this.tmpVec1_vwccvm$_0.set_dleff0$(pointers.get_za3lpa$(0).x, pointers.get_za3lpa$(0).y).subtract_czzhjp$(ensureNotNull(this.startPositions.get_11rb$(pointers.get_za3lpa$(0).id)));
      this.tmpVec2_vwccwh$_0.set_dleff0$(pointers.get_za3lpa$(1).x, pointers.get_za3lpa$(1).y).subtract_czzhjp$(ensureNotNull(this.startPositions.get_11rb$(pointers.get_za3lpa$(1).id)));
      this.tmpVec1_vwccvm$_0.scale_mx4ult$(96.0 / this.screenDpi);
      this.tmpVec2_vwccwh$_0.scale_mx4ult$(96.0 / this.screenDpi);
      if (this.tmpVec1_vwccvm$_0.length() > 5.0 && this.tmpVec2_vwccwh$_0.length() > 5.0 && this.tmpVec1_vwccvm$_0.times_czzhjp$(this.tmpVec2_vwccwh$_0) < 0) {
        this.tmpVec1_vwccvm$_0.set_czzhjp$(ensureNotNull(this.startPositions.get_11rb$(pointers.get_za3lpa$(0).id)));
        this.tmpVec2_vwccwh$_0.set_czzhjp$(ensureNotNull(this.startPositions.get_11rb$(pointers.get_za3lpa$(1).id)));
        this.currentGesture.init_4s1jvi$(1, this.tmpVec1_vwccvm$_0, this.tmpVec2_vwccwh$_0, this.screenDpi);
        this.handleGesture_mcn869$(pointers);
        return true;
      }}return false;
  };
  TouchGestureEvaluator.prototype.isTwoFingerDrag_mcn869$ = function (pointers) {
    if (pointers.size === 2) {
      this.tmpVec1_vwccvm$_0.set_dleff0$(pointers.get_za3lpa$(0).x, pointers.get_za3lpa$(0).y).subtract_czzhjp$(ensureNotNull(this.startPositions.get_11rb$(pointers.get_za3lpa$(0).id)));
      this.tmpVec2_vwccwh$_0.set_dleff0$(pointers.get_za3lpa$(1).x, pointers.get_za3lpa$(1).y).subtract_czzhjp$(ensureNotNull(this.startPositions.get_11rb$(pointers.get_za3lpa$(1).id)));
      this.tmpVec1_vwccvm$_0.scale_mx4ult$(96.0 / this.screenDpi);
      this.tmpVec2_vwccwh$_0.scale_mx4ult$(96.0 / this.screenDpi);
      if (this.tmpVec1_vwccvm$_0.length() > 5.0 && this.tmpVec2_vwccwh$_0.length() > 5.0 && this.tmpVec1_vwccvm$_0.times_czzhjp$(this.tmpVec2_vwccwh$_0) > 0) {
        this.tmpVec1_vwccvm$_0.set_czzhjp$(ensureNotNull(this.startPositions.get_11rb$(pointers.get_za3lpa$(0).id)));
        this.tmpVec2_vwccwh$_0.set_czzhjp$(ensureNotNull(this.startPositions.get_11rb$(pointers.get_za3lpa$(1).id)));
        this.currentGesture.init_4s1jvi$(2, this.tmpVec1_vwccvm$_0, this.tmpVec2_vwccwh$_0, this.screenDpi);
        this.handleGesture_mcn869$(pointers);
        return true;
      }}return false;
  };
  TouchGestureEvaluator.prototype.handleGesture_mcn869$ = function (pointers) {
    if (pointers.size === 2) {
      this.tmpVec1_vwccvm$_0.set_dleff0$(pointers.get_za3lpa$(0).x, pointers.get_za3lpa$(0).y);
      this.tmpVec2_vwccwh$_0.set_dleff0$(pointers.get_za3lpa$(1).x, pointers.get_za3lpa$(1).y);
      this.currentGesture.update_enjys2$(this.tmpVec1_vwccvm$_0, this.tmpVec2_vwccwh$_0, this.screenDpi);
      pointers.get_za3lpa$(0).consume_za3lpa$();
      pointers.get_za3lpa$(1).consume_za3lpa$();
    } else {
      this.currentGesture.type = 0;
    }
  };
  function TouchGestureEvaluator$Companion() {
    TouchGestureEvaluator$Companion_instance = this;
    this.INVALID = 0;
    this.INDETERMINATE = -1;
    this.PINCH = 1;
    this.TWO_FINGER_DRAG = 2;
  }
  TouchGestureEvaluator$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TouchGestureEvaluator$Companion_instance = null;
  function TouchGestureEvaluator$Companion_getInstance() {
    if (TouchGestureEvaluator$Companion_instance === null) {
      new TouchGestureEvaluator$Companion();
    }return TouchGestureEvaluator$Companion_instance;
  }
  function TouchGestureEvaluator$Gesture() {
    this.centerStart = MutableVec2f_init();
    this.centerCurrent = MutableVec2f_init();
    this.centerShift = MutableVec2f_init();
    this.dCenter = MutableVec2f_init();
    this.pinchAmountStart = 0.0;
    this.pinchAmountCurrent = 0.0;
    this.dPinchAmount = 0.0;
    this.type = 0;
    this.numUpdates = 0;
  }
  Object.defineProperty(TouchGestureEvaluator$Gesture.prototype, 'pinchAmountRel', {
    get: function () {
      return (this.pinchAmountCurrent - this.pinchAmountStart) / this.pinchAmountStart + 1.0;
    }
  });
  TouchGestureEvaluator$Gesture.prototype.init_4s1jvi$ = function (type, ptr1, ptr2, dpi) {
    this.type = type;
    this.centerStart.set_czzhjp$(ptr1).add_czzhjp$(ptr2).scale_mx4ult$(0.5);
    this.centerCurrent.set_czzhjp$(this.centerStart);
    this.centerShift.set_czzhjp$(Vec2f$Companion_getInstance().ZERO);
    this.dCenter.set_czzhjp$(Vec2f$Companion_getInstance().ZERO);
    this.pinchAmountStart = ptr1.distance_czzhjp$(ptr2) * 96.0 / dpi;
    this.pinchAmountCurrent = this.pinchAmountStart;
    this.dPinchAmount = 0.0;
    this.numUpdates = 0;
  };
  TouchGestureEvaluator$Gesture.prototype.update_enjys2$ = function (ptr1, ptr2, dpi) {
    this.dCenter.set_czzhjp$(ptr1).add_czzhjp$(ptr2).scale_mx4ult$(0.5).subtract_czzhjp$(this.centerCurrent);
    this.centerCurrent.set_czzhjp$(ptr1).add_czzhjp$(ptr2).scale_mx4ult$(0.5);
    this.centerShift.set_czzhjp$(this.centerCurrent).subtract_czzhjp$(this.centerStart);
    var pinch = ptr1.distance_czzhjp$(ptr2) * 96.0 / dpi;
    this.dPinchAmount = pinch - this.pinchAmountCurrent;
    this.pinchAmountCurrent = pinch;
    this.numUpdates = this.numUpdates + 1 | 0;
  };
  TouchGestureEvaluator$Gesture.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Gesture',
    interfaces: []
  };
  TouchGestureEvaluator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TouchGestureEvaluator',
    interfaces: []
  };
  function TreeMap() {
    TreeMap$Companion_getInstance();
    this.cmp_ta02bd$_0 = TreeMap$cmp$lambda;
    this.root_g0oxgl$_0 = null;
    this.size_g153xi$_0 = 0;
  }
  Object.defineProperty(TreeMap.prototype, 'size', {
    get: function () {
      return this.size_g153xi$_0;
    },
    set: function (size) {
      this.size_g153xi$_0 = size;
    }
  });
  TreeMap.prototype.clear = function () {
    this.root_g0oxgl$_0 = null;
    this.size = 0;
  };
  TreeMap.prototype.isEmpty = function () {
    return this.size === 0;
  };
  TreeMap.prototype.firstEntry = function () {
    var p = this.root_g0oxgl$_0;
    if (p != null) {
      while ((p != null ? p.left : null) != null) {
        p = ensureNotNull(p.left);
      }
    }if (p == null) {
      throw NoSuchElementException_init();
    }return p;
  };
  TreeMap.prototype.firstValue = function () {
    return this.firstEntry().value;
  };
  TreeMap.prototype.firstKey = function () {
    return this.firstEntry().key;
  };
  TreeMap.prototype.lastEntry = function () {
    var p = this.root_g0oxgl$_0;
    if (p != null) {
      while ((p != null ? p.right : null) != null) {
        p = ensureNotNull(p.right);
      }
    }if (p == null) {
      throw NoSuchElementException_init();
    }return p;
  };
  TreeMap.prototype.lastValue = function () {
    return this.lastEntry().value;
  };
  TreeMap.prototype.lastKey = function () {
    return this.lastEntry().key;
  };
  TreeMap.prototype.put_xwzc9p$ = function (key, value) {
    var tmp$;
    if (this.root_g0oxgl$_0 == null) {
      this.root_g0oxgl$_0 = new TreeMap$MapEntry(this, key, value, null);
    } else {
      var t = this.root_g0oxgl$_0;
      var parent;
      do {
        parent = ensureNotNull(t);
        if (this.cmp_ta02bd$_0(key, t.key) < 0)
          tmp$ = t.left;
        else if (this.cmp_ta02bd$_0(key, t.key) > 0)
          tmp$ = t.right;
        else {
          return t.setValue_11rc$(value);
        }
        t = tmp$;
      }
       while (t != null);
      var e = new TreeMap$MapEntry(this, key, value, parent);
      if (this.cmp_ta02bd$_0(key, parent.key) < 0) {
        parent.left = e;
      } else {
        parent.right = e;
      }
      this.fixAfterInsertion_9avj2i$_0(e);
    }
    this.size = this.size + 1 | 0;
    return null;
  };
  TreeMap.prototype.remove_11rb$ = function (key) {
    var tmp$;
    var tmp$_0;
    if ((tmp$ = this.getEntry_iowdmk$_0(key)) != null) {
      var value = tmp$.value;
      this.deleteEntry_xb9s9j$_0(tmp$);
      tmp$_0 = value;
    } else
      tmp$_0 = null;
    return tmp$_0;
  };
  TreeMap.prototype.get_11rb$ = function (key) {
    var tmp$;
    return (tmp$ = this.getEntry_iowdmk$_0(key)) != null ? tmp$.value : null;
  };
  Object.defineProperty(TreeMap.prototype, 'entries', {
    get: function () {
      var tmp$;
      var entries = LinkedHashSet_init();
      if (!this.isEmpty()) {
        var e = (tmp$ = this.firstEntry()) == null || Kotlin.isType(tmp$, TreeMap$MapEntry) ? tmp$ : throwCCE();
        while (e != null) {
          var element = e;
          entries.add_11rb$(element);
          e = this.successor_78gl9k$_0(e);
        }
      }return entries;
    }
  });
  Object.defineProperty(TreeMap.prototype, 'keys', {
    get: function () {
      var tmp$;
      var keys = LinkedHashSet_init();
      if (!this.isEmpty()) {
        var e = (tmp$ = this.firstEntry()) == null || Kotlin.isType(tmp$, TreeMap$MapEntry) ? tmp$ : throwCCE();
        while (e != null) {
          var element = e.key;
          keys.add_11rb$(element);
          e = this.successor_78gl9k$_0(e);
        }
      }return keys;
    }
  });
  Object.defineProperty(TreeMap.prototype, 'values', {
    get: function () {
      var tmp$;
      var values = LinkedHashSet_init();
      if (!this.isEmpty()) {
        var e = (tmp$ = this.firstEntry()) == null || Kotlin.isType(tmp$, TreeMap$MapEntry) ? tmp$ : throwCCE();
        while (e != null) {
          var element = e.value;
          values.add_11rb$(element);
          e = this.successor_78gl9k$_0(e);
        }
      }return values;
    }
  });
  TreeMap.prototype.containsKey_11rb$ = function (key) {
    return this.getEntry_iowdmk$_0(key) != null;
  };
  TreeMap.prototype.containsValue_11rc$ = function (value) {
    return this.values.contains_11rb$(value);
  };
  TreeMap.prototype.putAll_a2k3zr$ = function (from) {
    var tmp$;
    tmp$ = from.entries.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      this.put_xwzc9p$(element.key, element.value);
    }
  };
  TreeMap.prototype.getEntry_iowdmk$_0 = function (key) {
    var tmp$;
    var p = this.root_g0oxgl$_0;
    while (p != null) {
      if (this.cmp_ta02bd$_0(key, p.key) < 0)
        tmp$ = p.left;
      else if (this.cmp_ta02bd$_0(key, p.key) > 0)
        tmp$ = p.right;
      else
        return p;
      p = tmp$;
    }
    return null;
  };
  TreeMap.prototype.deleteEntry_xb9s9j$_0 = function (entry) {
    var p = entry;
    this.size = this.size - 1 | 0;
    if (p.left != null && p.right != null) {
      var s = ensureNotNull(this.successor_78gl9k$_0(p));
      p.key = s.key;
      p.value = s.value;
      p = s;
    }var replacement = p.left != null ? p.left : p.right;
    if (replacement != null) {
      replacement.parent = p.parent;
      if (p.parent == null)
        this.root_g0oxgl$_0 = replacement;
      else if (p === ensureNotNull(p.parent).left)
        ensureNotNull(p.parent).left = replacement;
      else
        ensureNotNull(p.parent).right = replacement;
      p.left = null;
      p.right = null;
      p.parent = null;
      if (p.color === TreeMap$Companion_getInstance().BLACK_0) {
        this.fixAfterDeletion_6ssue5$_0(replacement);
      }} else if (p.parent == null) {
      this.root_g0oxgl$_0 = null;
    } else {
      if (p.color === TreeMap$Companion_getInstance().BLACK_0) {
        this.fixAfterDeletion_6ssue5$_0(p);
      }if (p.parent != null) {
        if (p === ensureNotNull(p.parent).left) {
          ensureNotNull(p.parent).left = null;
        } else if (p === ensureNotNull(p.parent).right) {
          ensureNotNull(p.parent).right = null;
        }p.parent = null;
      }}
  };
  TreeMap.prototype.fixAfterInsertion_9avj2i$_0 = function (entry) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20, tmp$_21, tmp$_22, tmp$_23;
    var x = entry;
    x != null ? (x.color = TreeMap$Companion_getInstance().RED_0) : null;
    while (x != null && !equals(x, this.root_g0oxgl$_0) && this.color_3jivvv$_0(x.parent) === TreeMap$Companion_getInstance().RED_0) {
      if (x.parent === ((tmp$_0 = (tmp$ = x.parent) != null ? tmp$.parent : null) != null ? tmp$_0.left : null)) {
        var y = (tmp$_2 = (tmp$_1 = x.parent) != null ? tmp$_1.parent : null) != null ? tmp$_2.right : null;
        if (this.color_3jivvv$_0(y) === TreeMap$Companion_getInstance().RED_0) {
          (tmp$_3 = x.parent) != null ? (tmp$_3.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          y != null ? (y.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          (tmp$_5 = (tmp$_4 = x.parent) != null ? tmp$_4.parent : null) != null ? (tmp$_5.color = TreeMap$Companion_getInstance().RED_0) : null;
          x = (tmp$_6 = x.parent) != null ? tmp$_6.parent : null;
        } else {
          if (x === ((tmp$_7 = x.parent) != null ? tmp$_7.right : null)) {
            x = x.parent;
            this.rotateLeft_xtlw1j$_0(x);
          }(tmp$_8 = x != null ? x.parent : null) != null ? (tmp$_8.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          (tmp$_10 = (tmp$_9 = x != null ? x.parent : null) != null ? tmp$_9.parent : null) != null ? (tmp$_10.color = TreeMap$Companion_getInstance().RED_0) : null;
          this.rotateRight_ltp9a$_0((tmp$_11 = x != null ? x.parent : null) != null ? tmp$_11.parent : null);
        }
      } else {
        var y_0 = (tmp$_13 = (tmp$_12 = x.parent) != null ? tmp$_12.parent : null) != null ? tmp$_13.left : null;
        if (this.color_3jivvv$_0(y_0) === TreeMap$Companion_getInstance().RED_0) {
          (tmp$_14 = x.parent) != null ? (tmp$_14.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          y_0 != null ? (y_0.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          (tmp$_16 = (tmp$_15 = x.parent) != null ? tmp$_15.parent : null) != null ? (tmp$_16.color = TreeMap$Companion_getInstance().RED_0) : null;
          x = (tmp$_17 = x.parent) != null ? tmp$_17.parent : null;
        } else {
          if (x === ((tmp$_18 = x.parent) != null ? tmp$_18.left : null)) {
            x = x.parent;
            this.rotateRight_ltp9a$_0(x);
          }(tmp$_19 = x != null ? x.parent : null) != null ? (tmp$_19.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          (tmp$_21 = (tmp$_20 = x != null ? x.parent : null) != null ? tmp$_20.parent : null) != null ? (tmp$_21.color = TreeMap$Companion_getInstance().RED_0) : null;
          this.rotateLeft_xtlw1j$_0((tmp$_22 = x != null ? x.parent : null) != null ? tmp$_22.parent : null);
        }
      }
    }
    (tmp$_23 = this.root_g0oxgl$_0) != null ? (tmp$_23.color = TreeMap$Companion_getInstance().BLACK_0) : null;
  };
  TreeMap.prototype.fixAfterDeletion_6ssue5$_0 = function (entry) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13;
    var x = entry;
    while (!equals(x, this.root_g0oxgl$_0) && x.color === TreeMap$Companion_getInstance().BLACK_0) {
      if (equals(x, (tmp$ = x.parent) != null ? tmp$.left : null)) {
        var sib = (tmp$_0 = x.parent) != null ? tmp$_0.right : null;
        if (this.color_3jivvv$_0(sib) === TreeMap$Companion_getInstance().RED_0) {
          sib != null ? (sib.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          (tmp$_1 = x.parent) != null ? (tmp$_1.color = TreeMap$Companion_getInstance().RED_0) : null;
          this.rotateLeft_xtlw1j$_0(x.parent);
          sib = (tmp$_2 = x.parent) != null ? tmp$_2.right : null;
        }if (this.color_3jivvv$_0(sib != null ? sib.left : null) === TreeMap$Companion_getInstance().BLACK_0 && this.color_3jivvv$_0(sib != null ? sib.right : null) === TreeMap$Companion_getInstance().BLACK_0) {
          sib != null ? (sib.color = TreeMap$Companion_getInstance().RED_0) : null;
          x = ensureNotNull(x.parent);
        } else {
          if (this.color_3jivvv$_0(sib != null ? sib.right : null) === TreeMap$Companion_getInstance().BLACK_0) {
            (tmp$_3 = sib != null ? sib.left : null) != null ? (tmp$_3.color = TreeMap$Companion_getInstance().BLACK_0) : null;
            sib != null ? (sib.color = TreeMap$Companion_getInstance().RED_0) : null;
            this.rotateRight_ltp9a$_0(sib);
            sib = (tmp$_4 = x.parent) != null ? tmp$_4.right : null;
          }sib != null ? (sib.color = this.color_3jivvv$_0(x.parent)) : null;
          (tmp$_5 = x.parent) != null ? (tmp$_5.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          (tmp$_6 = sib != null ? sib.right : null) != null ? (tmp$_6.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          this.rotateLeft_xtlw1j$_0(x.parent);
          x = ensureNotNull(this.root_g0oxgl$_0);
        }
      } else {
        var sib_0 = (tmp$_7 = x.parent) != null ? tmp$_7.left : null;
        if (this.color_3jivvv$_0(sib_0) === TreeMap$Companion_getInstance().RED_0) {
          sib_0 != null ? (sib_0.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          (tmp$_8 = sib_0 != null ? sib_0.parent : null) != null ? (tmp$_8.color = TreeMap$Companion_getInstance().RED_0) : null;
          this.rotateRight_ltp9a$_0(x.parent);
          sib_0 = (tmp$_9 = x.parent) != null ? tmp$_9.left : null;
        }if (this.color_3jivvv$_0(sib_0 != null ? sib_0.right : null) === TreeMap$Companion_getInstance().BLACK_0 && this.color_3jivvv$_0(sib_0 != null ? sib_0.left : null) === TreeMap$Companion_getInstance().BLACK_0) {
          sib_0 != null ? (sib_0.color = TreeMap$Companion_getInstance().RED_0) : null;
          x = ensureNotNull(x.parent);
        } else {
          if (this.color_3jivvv$_0(sib_0 != null ? sib_0.left : null) === TreeMap$Companion_getInstance().BLACK_0) {
            (tmp$_10 = sib_0 != null ? sib_0.right : null) != null ? (tmp$_10.color = TreeMap$Companion_getInstance().BLACK_0) : null;
            sib_0 != null ? (sib_0.color = TreeMap$Companion_getInstance().RED_0) : null;
            this.rotateLeft_xtlw1j$_0(sib_0);
            sib_0 = (tmp$_11 = x.parent) != null ? tmp$_11.left : null;
          }sib_0 != null ? (sib_0.color = this.color_3jivvv$_0(x.parent)) : null;
          (tmp$_12 = x.parent) != null ? (tmp$_12.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          (tmp$_13 = sib_0 != null ? sib_0.left : null) != null ? (tmp$_13.color = TreeMap$Companion_getInstance().BLACK_0) : null;
          this.rotateRight_ltp9a$_0(x.parent);
          x = ensureNotNull(this.root_g0oxgl$_0);
        }
      }
    }
    x.color = TreeMap$Companion_getInstance().BLACK_0;
  };
  TreeMap.prototype.rotateLeft_xtlw1j$_0 = function (p) {
    var tmp$, tmp$_0, tmp$_1;
    if (p != null) {
      var r = p.right;
      p.right = r != null ? r.left : null;
      if ((r != null ? r.left : null) != null) {
        (tmp$ = r.left) != null ? (tmp$.parent = p) : null;
      }r != null ? (r.parent = p.parent) : null;
      if (p.parent == null)
        this.root_g0oxgl$_0 = r;
      else {
        var tmp$_2;
        if (((tmp$_2 = p.parent) != null ? tmp$_2.left : null) === p)
          (tmp$_0 = p.parent) != null ? (tmp$_0.left = r) : null;
        else
          (tmp$_1 = p.parent) != null ? (tmp$_1.right = r) : null;
      }
      r != null ? (r.left = p) : null;
      p.parent = r;
    }};
  TreeMap.prototype.rotateRight_ltp9a$_0 = function (p) {
    var tmp$, tmp$_0, tmp$_1;
    if (p != null) {
      var l = p.left;
      p.left = l != null ? l.right : null;
      if ((l != null ? l.right : null) != null) {
        (tmp$ = l.right) != null ? (tmp$.parent = p) : null;
      }l != null ? (l.parent = p.parent) : null;
      if (p.parent == null)
        this.root_g0oxgl$_0 = l;
      else {
        var tmp$_2;
        if (((tmp$_2 = p.parent) != null ? tmp$_2.right : null) === p)
          (tmp$_0 = p.parent) != null ? (tmp$_0.right = l) : null;
        else
          (tmp$_1 = p.parent) != null ? (tmp$_1.left = l) : null;
      }
      l != null ? (l.right = p) : null;
      p.parent = l;
    }};
  TreeMap.prototype.color_3jivvv$_0 = function ($receiver) {
    var tmp$;
    return (tmp$ = $receiver != null ? $receiver.color : null) != null ? tmp$ : TreeMap$Companion_getInstance().BLACK_0;
  };
  TreeMap.prototype.successor_78gl9k$_0 = function ($receiver) {
    var tmp$;
    if ($receiver == null)
      tmp$ = null;
    else if ($receiver.right != null) {
      var p = ensureNotNull($receiver.right);
      while (p.left != null) {
        p = ensureNotNull(p.left);
      }
      tmp$ = p;
    } else {
      var p_0 = $receiver.parent;
      var ch = $receiver;
      while (p_0 != null && equals(ch, p_0.right)) {
        ch = p_0;
        p_0 = p_0.parent;
      }
      tmp$ = p_0;
    }
    return tmp$;
  };
  TreeMap.prototype.predecessor_3j2kg5$_0 = function ($receiver) {
    var tmp$;
    if ($receiver == null)
      tmp$ = null;
    else if ($receiver.left != null) {
      var p = ensureNotNull($receiver.left);
      while (p.right != null) {
        p = ensureNotNull(p.right);
      }
      tmp$ = p;
    } else {
      var p_0 = $receiver.parent;
      var ch = $receiver;
      while (p_0 != null && equals(ch, p_0.left)) {
        ch = p_0;
        p_0 = p_0.parent;
      }
      tmp$ = p_0;
    }
    return tmp$;
  };
  function TreeMap$MapEntry($outer, key, value, parent) {
    this.$outer = $outer;
    this.parent = parent;
    this.key_qa5ejk$_0 = key;
    this.value_owqnua$_0 = value;
    this.left = null;
    this.right = null;
    this.color = TreeMap$Companion_getInstance().BLACK_0;
  }
  Object.defineProperty(TreeMap$MapEntry.prototype, 'key', {
    get: function () {
      return this.key_qa5ejk$_0;
    },
    set: function (key) {
      this.key_qa5ejk$_0 = key;
    }
  });
  Object.defineProperty(TreeMap$MapEntry.prototype, 'value', {
    get: function () {
      return this.value_owqnua$_0;
    },
    set: function (value) {
      this.value_owqnua$_0 = value;
    }
  });
  TreeMap$MapEntry.prototype.setValue_11rc$ = function (newValue) {
    var old = this.value;
    this.value = newValue;
    return old;
  };
  TreeMap$MapEntry.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MapEntry',
    interfaces: [MutableMap$MutableEntry]
  };
  function TreeMap$Companion() {
    TreeMap$Companion_instance = this;
    this.BLACK_0 = false;
    this.RED_0 = true;
  }
  TreeMap$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TreeMap$Companion_instance = null;
  function TreeMap$Companion_getInstance() {
    if (TreeMap$Companion_instance === null) {
      new TreeMap$Companion();
    }return TreeMap$Companion_instance;
  }
  function TreeMap$cmp$lambda(a, b) {
    var tmp$;
    return Kotlin.compareTo(Kotlin.isComparable(tmp$ = a) ? tmp$ : throwCCE(), b);
  }
  TreeMap.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TreeMap',
    interfaces: [MutableMap]
  };
  function UniqueId() {
    UniqueId_instance = this;
    this.nextId_0 = L1;
    this.idLock_0 = new Any();
  }
  UniqueId.prototype.nextId = function () {
    this.idLock_0;
    return this.nextId_0 = this.nextId_0.inc(), this.nextId_0;
  };
  UniqueId.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'UniqueId',
    interfaces: []
  };
  var UniqueId_instance = null;
  function UniqueId_getInstance() {
    if (UniqueId_instance === null) {
      new UniqueId();
    }return UniqueId_instance;
  }
  function VertexView(data, index) {
    MutableVec3f_init(this);
    this.data = data;
    this.offsetF_0 = Kotlin.imul(index, this.data.vertexSizeF);
    this.offsetI_0 = Kotlin.imul(index, this.data.vertexSizeI);
    this.index_qsqbze$_0 = index;
    this.position = null;
    this.normal = null;
    this.tangent = null;
    this.color = null;
    this.texCoord = null;
    this.attributeViews_0 = null;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    var attribViews = LinkedHashMap_init();
    this.attributeViews_0 = attribViews;
    tmp$ = this.data.attributeOffsets.entries.iterator();
    while (tmp$.hasNext()) {
      var offset = tmp$.next();
      switch (offset.key.type.name) {
        case 'FLOAT':
          var key = offset.key;
          var value = new VertexView$FloatView(this, offset.value / 4 | 0);
          attribViews.put_xwzc9p$(key, value);
          break;
        case 'VEC_2F':
          var key_0 = offset.key;
          var value_0 = new VertexView$Vec2fView(this, offset.value / 4 | 0);
          attribViews.put_xwzc9p$(key_0, value_0);
          break;
        case 'VEC_3F':
          var key_1 = offset.key;
          var value_1 = new VertexView$Vec3fView(this, offset.value / 4 | 0);
          attribViews.put_xwzc9p$(key_1, value_1);
          break;
        case 'VEC_4F':
          var key_2 = offset.key;
          var value_2 = new VertexView$Vec4fView(this, offset.value / 4 | 0);
          attribViews.put_xwzc9p$(key_2, value_2);
          break;
        case 'INT':
          var key_3 = offset.key;
          var value_3 = new VertexView$IntView(this, offset.value / 4 | 0);
          attribViews.put_xwzc9p$(key_3, value_3);
          break;
        case 'VEC_2I':
          var key_4 = offset.key;
          var value_4 = new VertexView$Vec2iView(this, offset.value / 4 | 0);
          attribViews.put_xwzc9p$(key_4, value_4);
          break;
        case 'VEC_3I':
          var key_5 = offset.key;
          var value_5 = new VertexView$Vec3iView(this, offset.value / 4 | 0);
          attribViews.put_xwzc9p$(key_5, value_5);
          break;
        case 'VEC_4I':
          var key_6 = offset.key;
          var value_6 = new VertexView$Vec4iView(this, offset.value / 4 | 0);
          attribViews.put_xwzc9p$(key_6, value_6);
          break;
        default:throw IllegalArgumentException_init(offset.key.type.toString() + ' is not a valid vertex attribute');
      }
    }
    this.position = (tmp$_0 = this.getVec3fAttribute_nm2vx5$(Attribute$Companion_getInstance().POSITIONS)) != null ? tmp$_0 : new VertexView$Vec3fView(this, -1);
    this.normal = (tmp$_1 = this.getVec3fAttribute_nm2vx5$(Attribute$Companion_getInstance().NORMALS)) != null ? tmp$_1 : new VertexView$Vec3fView(this, -1);
    this.tangent = (tmp$_2 = this.getVec3fAttribute_nm2vx5$(Attribute$Companion_getInstance().TANGENTS)) != null ? tmp$_2 : new VertexView$Vec3fView(this, -1);
    this.texCoord = (tmp$_3 = this.getVec2fAttribute_nm2vx5$(Attribute$Companion_getInstance().TEXTURE_COORDS)) != null ? tmp$_3 : new VertexView$Vec2fView(this, -1);
    this.color = (tmp$_4 = this.getColorAttribute_nm2vx5$(Attribute$Companion_getInstance().COLORS)) != null ? tmp$_4 : new VertexView$ColorWrapView(this, new VertexView$Vec4fView(this, -1));
  }
  Object.defineProperty(VertexView.prototype, 'index', {
    get: function () {
      return this.index_qsqbze$_0;
    },
    set: function (value) {
      this.index_qsqbze$_0 = value;
      this.offsetF_0 = Kotlin.imul(value, this.data.vertexSizeF);
      this.offsetI_0 = Kotlin.imul(value, this.data.vertexSizeI);
    }
  });
  Object.defineProperty(VertexView.prototype, 'x', {
    get: function () {
      return this.position.x;
    },
    set: function (value) {
      this.position.x = value;
    }
  });
  Object.defineProperty(VertexView.prototype, 'y', {
    get: function () {
      return this.position.y;
    },
    set: function (value) {
      this.position.y = value;
    }
  });
  Object.defineProperty(VertexView.prototype, 'z', {
    get: function () {
      return this.position.z;
    },
    set: function (value) {
      this.position.z = value;
    }
  });
  VertexView.prototype.set_fs4kvg$ = function (other) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7;
    tmp$ = this.attributeViews_0.keys.iterator();
    while (tmp$.hasNext()) {
      var attrib = tmp$.next();
      var view = other.attributeViews_0.get_11rb$(attrib);
      if (view != null) {
        if (Kotlin.isType(view, VertexView$FloatView))
          (Kotlin.isType(tmp$_0 = this.attributeViews_0.get_11rb$(attrib), VertexView$FloatView) ? tmp$_0 : throwCCE()).f = view.f;
        else if (Kotlin.isType(view, VertexView$Vec2fView))
          (Kotlin.isType(tmp$_1 = this.attributeViews_0.get_11rb$(attrib), VertexView$Vec2fView) ? tmp$_1 : throwCCE()).set_czzhjp$(view);
        else if (Kotlin.isType(view, VertexView$Vec3fView))
          (Kotlin.isType(tmp$_2 = this.attributeViews_0.get_11rb$(attrib), VertexView$Vec3fView) ? tmp$_2 : throwCCE()).set_czzhiu$(view);
        else if (Kotlin.isType(view, VertexView$Vec4fView))
          (Kotlin.isType(tmp$_3 = this.attributeViews_0.get_11rb$(attrib), VertexView$Vec4fView) ? tmp$_3 : throwCCE()).set_czzhhz$(view);
        else if (Kotlin.isType(view, VertexView$IntView))
          (Kotlin.isType(tmp$_4 = this.attributeViews_0.get_11rb$(attrib), VertexView$IntView) ? tmp$_4 : throwCCE()).i = view.i;
        else if (Kotlin.isType(view, VertexView$Vec2iView))
          (Kotlin.isType(tmp$_5 = this.attributeViews_0.get_11rb$(attrib), VertexView$Vec2iView) ? tmp$_5 : throwCCE()).set_b3xq3y$(view);
        else if (Kotlin.isType(view, VertexView$Vec3iView))
          (Kotlin.isType(tmp$_6 = this.attributeViews_0.get_11rb$(attrib), VertexView$Vec3iView) ? tmp$_6 : throwCCE()).set_bkzci5$(view);
        else if (Kotlin.isType(view, VertexView$Vec4iView))
          (Kotlin.isType(tmp$_7 = this.attributeViews_0.get_11rb$(attrib), VertexView$Vec4iView) ? tmp$_7 : throwCCE()).set_c20ywc$(view);
      }}
  };
  VertexView.prototype.getFloatAttribute_nm2vx5$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, VertexView$FloatView) ? tmp$ : throwCCE();
  };
  VertexView.prototype.getVec2fAttribute_nm2vx5$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, MutableVec2f) ? tmp$ : throwCCE();
  };
  VertexView.prototype.getVec3fAttribute_nm2vx5$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, MutableVec3f) ? tmp$ : throwCCE();
  };
  VertexView.prototype.getVec4fAttribute_nm2vx5$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, MutableVec4f) ? tmp$ : throwCCE();
  };
  VertexView.prototype.getColorAttribute_nm2vx5$ = function (attribute) {
    var tmp$;
    var tmp$_0;
    if ((tmp$ = this.attributeViews_0.get_11rb$(attribute)) != null) {
      var tmp$_1;
      tmp$_0 = new VertexView$ColorWrapView(this, Kotlin.isType(tmp$_1 = tmp$, VertexView$Vec4fView) ? tmp$_1 : throwCCE());
    } else
      tmp$_0 = null;
    return tmp$_0;
  };
  VertexView.prototype.getIntAttribute_nm2vx5$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, VertexView$IntView) ? tmp$ : throwCCE();
  };
  VertexView.prototype.getVec2iAttribute_nm2vx5$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, VertexView$Vec2iView) ? tmp$ : throwCCE();
  };
  VertexView.prototype.getVec3iAttribute_nm2vx5$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, VertexView$Vec3iView) ? tmp$ : throwCCE();
  };
  VertexView.prototype.getVec4iAttribute_nm2vx5$ = function (attribute) {
    var tmp$;
    return (tmp$ = this.attributeViews_0.get_11rb$(attribute)) == null || Kotlin.isType(tmp$, VertexView$Vec4iView) ? tmp$ : throwCCE();
  };
  function VertexView$FloatView($outer, attribOffset) {
    this.$outer = $outer;
    this.attribOffset_0 = attribOffset;
  }
  Object.defineProperty(VertexView$FloatView.prototype, 'f', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0.0;
      } else {
        return this.$outer.data.dataF.get_za3lpa$(this.$outer.offsetF_0 + this.attribOffset_0 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.data.dataF.set_24o109$(this.$outer.offsetF_0 + this.attribOffset_0 | 0, value);
      }}
  });
  VertexView$FloatView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FloatView',
    interfaces: []
  };
  function VertexView$Vec2fView($outer, attribOffset) {
    this.$outer = $outer;
    MutableVec2f_init(this);
    this.attribOffset_0 = attribOffset;
  }
  VertexView$Vec2fView.prototype.get_za3lpa$ = function (i) {
    var tmp$;
    if (this.attribOffset_0 >= 0 && (0 <= i && i <= 1)) {
      tmp$ = this.$outer.data.dataF.get_za3lpa$(this.$outer.offsetF_0 + this.attribOffset_0 + i | 0);
    } else {
      tmp$ = 0.0;
    }
    return tmp$;
  };
  VertexView$Vec2fView.prototype.set_24o109$ = function (i, v) {
    if (this.attribOffset_0 >= 0 && (0 <= i && i <= 1)) {
      this.$outer.data.dataF.set_24o109$(this.$outer.offsetF_0 + this.attribOffset_0 + i | 0, v);
    }};
  VertexView$Vec2fView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec2fView',
    interfaces: [MutableVec2f]
  };
  function VertexView$Vec3fView($outer, attribOffset) {
    this.$outer = $outer;
    MutableVec3f_init(this);
    this.attribOffset = attribOffset;
  }
  VertexView$Vec3fView.prototype.get_za3lpa$ = function (i) {
    var tmp$;
    if (this.attribOffset >= 0 && (0 <= i && i <= 2)) {
      tmp$ = this.$outer.data.dataF.get_za3lpa$(this.$outer.offsetF_0 + this.attribOffset + i | 0);
    } else {
      tmp$ = 0.0;
    }
    return tmp$;
  };
  VertexView$Vec3fView.prototype.set_24o109$ = function (i, v) {
    if (this.attribOffset >= 0 && (0 <= i && i <= 2)) {
      this.$outer.data.dataF.set_24o109$(this.$outer.offsetF_0 + this.attribOffset + i | 0, v);
    }};
  VertexView$Vec3fView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec3fView',
    interfaces: [MutableVec3f]
  };
  function VertexView$Vec4fView($outer, attribOffset) {
    this.$outer = $outer;
    MutableVec4f_init(this);
    this.attribOffset = attribOffset;
  }
  VertexView$Vec4fView.prototype.get_za3lpa$ = function (i) {
    var tmp$;
    if (this.attribOffset >= 0 && (0 <= i && i <= 3)) {
      tmp$ = this.$outer.data.dataF.get_za3lpa$(this.$outer.offsetF_0 + this.attribOffset + i | 0);
    } else {
      tmp$ = 0.0;
    }
    return tmp$;
  };
  VertexView$Vec4fView.prototype.set_24o109$ = function (i, v) {
    if (this.attribOffset >= 0 && (0 <= i && i <= 3)) {
      this.$outer.data.dataF.set_24o109$(this.$outer.offsetF_0 + this.attribOffset + i | 0, v);
    }};
  VertexView$Vec4fView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec4fView',
    interfaces: [MutableVec4f]
  };
  function VertexView$ColorWrapView($outer, vecView) {
    this.$outer = $outer;
    MutableColor_init(this);
    this.vecView = vecView;
  }
  VertexView$ColorWrapView.prototype.get_za3lpa$ = function (i) {
    return this.vecView.get_za3lpa$(i);
  };
  VertexView$ColorWrapView.prototype.set_24o109$ = function (i, v) {
    this.vecView.set_24o109$(i, v);
  };
  VertexView$ColorWrapView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ColorWrapView',
    interfaces: [MutableColor]
  };
  function VertexView$IntView($outer, attribOffset) {
    this.$outer = $outer;
    this.attribOffset_0 = attribOffset;
  }
  Object.defineProperty(VertexView$IntView.prototype, 'i', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      } else {
        return this.$outer.data.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.data.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 | 0, value);
      }}
  });
  VertexView$IntView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IntView',
    interfaces: []
  };
  function VertexView$Vec2iView($outer, attribOffset) {
    this.$outer = $outer;
    this.attribOffset_0 = attribOffset;
  }
  Object.defineProperty(VertexView$Vec2iView.prototype, 'x', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      } else {
        return this.$outer.data.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.data.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 | 0, value);
      }}
  });
  Object.defineProperty(VertexView$Vec2iView.prototype, 'y', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      } else {
        return this.$outer.data.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 + 1 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.data.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 + 1 | 0, value);
      }}
  });
  VertexView$Vec2iView.prototype.set_vux9f0$ = function (x, y) {
    this.x = x;
    this.y = y;
  };
  VertexView$Vec2iView.prototype.set_b3xq3y$ = function (other) {
    this.x = other.x;
    this.y = other.y;
  };
  VertexView$Vec2iView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec2iView',
    interfaces: []
  };
  function VertexView$Vec3iView($outer, attribOffset) {
    this.$outer = $outer;
    this.attribOffset_0 = attribOffset;
  }
  Object.defineProperty(VertexView$Vec3iView.prototype, 'x', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      } else {
        return this.$outer.data.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.data.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 | 0, value);
      }}
  });
  Object.defineProperty(VertexView$Vec3iView.prototype, 'y', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      } else {
        return this.$outer.data.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 + 1 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.data.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 + 1 | 0, value);
      }}
  });
  Object.defineProperty(VertexView$Vec3iView.prototype, 'z', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      } else {
        return this.$outer.data.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 + 2 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.data.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 + 2 | 0, value);
      }}
  });
  VertexView$Vec3iView.prototype.set_bkzci5$ = function (other) {
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
  };
  VertexView$Vec3iView.prototype.set_qt1dr2$ = function (x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
  };
  VertexView$Vec3iView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec3iView',
    interfaces: []
  };
  function VertexView$Vec4iView($outer, attribOffset) {
    this.$outer = $outer;
    this.attribOffset_0 = attribOffset;
  }
  Object.defineProperty(VertexView$Vec4iView.prototype, 'x', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      } else {
        return this.$outer.data.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.data.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 | 0, value);
      }}
  });
  Object.defineProperty(VertexView$Vec4iView.prototype, 'y', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      } else {
        return this.$outer.data.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 + 1 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.data.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 + 1 | 0, value);
      }}
  });
  Object.defineProperty(VertexView$Vec4iView.prototype, 'z', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      } else {
        return this.$outer.data.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 + 2 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.data.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 + 2 | 0, value);
      }}
  });
  Object.defineProperty(VertexView$Vec4iView.prototype, 'w', {
    get: function () {
      if (this.attribOffset_0 < 0) {
        return 0;
      } else {
        return this.$outer.data.dataI.get_za3lpa$(this.$outer.offsetI_0 + this.attribOffset_0 + 3 | 0);
      }
    },
    set: function (value) {
      if (this.attribOffset_0 >= 0) {
        this.$outer.data.dataI.set_vux9f0$(this.$outer.offsetI_0 + this.attribOffset_0 + 3 | 0, value);
      }}
  });
  VertexView$Vec4iView.prototype.set_c20ywc$ = function (other) {
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
    this.w = other.w;
  };
  VertexView$Vec4iView.prototype.set_tjonv8$ = function (x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
  };
  VertexView$Vec4iView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vec4iView',
    interfaces: []
  };
  VertexView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VertexView',
    interfaces: [MutableVec3f]
  };
  function Viewport(x, ySigned, width, heightSigned) {
    this.x = x;
    this.ySigned = ySigned;
    this.width = width;
    this.heightSigned = heightSigned;
  }
  Object.defineProperty(Viewport.prototype, 'y', {
    get: function () {
      return this.heightSigned < 0 ? this.ySigned + this.heightSigned | 0 : this.ySigned;
    }
  });
  Object.defineProperty(Viewport.prototype, 'height', {
    get: function () {
      return abs(this.heightSigned);
    }
  });
  Object.defineProperty(Viewport.prototype, 'aspectRatio', {
    get: function () {
      return this.width / this.height;
    }
  });
  Viewport.prototype.isInViewport_dleff0$ = function (x, y) {
    return x >= this.x && x < (this.x + this.width | 0) && y >= y && y < y + this.height;
  };
  Viewport.prototype.set_tjonv8$ = function (x, ySigned, width, heightSigned) {
    this.x = x;
    this.width = width;
    this.ySigned = ySigned;
    this.heightSigned = heightSigned;
  };
  Viewport.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Viewport',
    interfaces: []
  };
  function createDefaultContext() {
    return createContext(new JsContext$InitProps());
  }
  function createContext(props) {
    return JsImpl_getInstance().createContext_s8od96$(props);
  }
  function now() {
    var tmp$;
    return typeof (tmp$ = performance.now()) === 'number' ? tmp$ : throwCCE();
  }
  function toString_1($receiver, precision) {
    var clamp$result;
    if (precision < 0) {
      clamp$result = 0;
    } else if (precision > 12) {
      clamp$result = 12;
    } else {
      clamp$result = precision;
    }
    var p = clamp$result;
    var s = $receiver < 0 ? '-' : '';
    var a = Math_0.abs($receiver);
    if (p === 0) {
      return s + roundToLong(a).toString();
    }var fac = roundToLong(Math_0.pow(10.0, p));
    var fracF = roundToLong(a % 1.0 * fac.toNumber());
    if (equals(fracF, fac)) {
      fracF = L0;
      a += 1;
    }var frac = fracF.toString();
    while (frac.length < p) {
      frac = '0' + frac;
    }
    return s + Kotlin.Long.fromNumber(a).toString() + '.' + frac;
  }
  var lock = defineInlineFunction('kool.de.fabmax.kool.lock_eocq09$', function (lock, block) {
    return block();
  });
  function JsImpl() {
    JsImpl_instance = this;
    this.dpi = 0;
    this.ctx = null;
    var tmp$;
    var measure = document.getElementById('dpiMeasure');
    if (measure == null) {
      var $this = package$util.Log;
      var level = Log$Level.WARN;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'dpiMeasure element not found, falling back to 96 dpi');
      }var $this_0 = package$util.Log;
      var level_0 = Log$Level.WARN;
      var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
      if (level_0.level >= $this_0.level.level) {
        $this_0.printer(level_0, tag_0, 'Add this hidden div to your html:');
      }var $this_1 = package$util.Log;
      var level_1 = Log$Level.WARN;
      var tag_1 = Kotlin.getKClassFromExpression(this).simpleName;
      if (level_1.level >= $this_1.level.level) {
        $this_1.printer(level_1, tag_1, '<div id="dpiMeasure" style="height: 1in; width: 1in; left: 100%; position: fixed; top: 100%;"><\/div>');
      }this.dpi = 96.0;
    } else {
      this.dpi = (Kotlin.isType(tmp$ = measure, HTMLDivElement) ? tmp$ : throwCCE()).offsetWidth;
    }
  }
  Object.defineProperty(JsImpl.prototype, 'gl', {
    get: function () {
      var tmp$, tmp$_0;
      tmp$_0 = (tmp$ = this.ctx) != null ? tmp$.gl_8be2vx$ : null;
      if (tmp$_0 == null) {
        throw KoolException_init('Platform.createContext() not called');
      }return tmp$_0;
    }
  });
  JsImpl.prototype.createContext_s8od96$ = function (props) {
    if (this.ctx != null) {
      throw KoolException_init('Context was already created (multi-context is currently not supported in js');
    }this.ctx = new JsContext(props);
    return ensureNotNull(this.ctx);
  };
  JsImpl.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'JsImpl',
    interfaces: []
  };
  var JsImpl_instance = null;
  function JsImpl_getInstance() {
    if (JsImpl_instance === null) {
      new JsImpl();
    }return JsImpl_instance;
  }
  function AudioGenerator(ctx, generatorFun) {
    this.audioCtx_0 = new (window.AudioContext || window.webkitAudioContext)();
    this.sampleRate = this.audioCtx_0.sampleRate;
    this.isPaused_z77g9l$_0 = false;
    this.source_0 = null;
    this.scriptNode_0 = null;
    this.analyserNode_0 = null;
    var tmp$;
    this.powerSpectrum_0 = Kotlin.isType(tmp$ = createFloat32Buffer(1), Float32BufferImpl) ? tmp$ : throwCCE();
    this.dt_0 = 1.0 / this.sampleRate;
    this.scriptNode_0 = this.audioCtx_0.createScriptProcessor(4096, 1, 1);
    var buffer = this.audioCtx_0.createBuffer(1, this.scriptNode_0.bufferSize, this.sampleRate);
    this.scriptNode_0.onaudioprocess = AudioGenerator_init$lambda(generatorFun, this);
    this.analyserNode_0 = null;
    this.source_0 = this.audioCtx_0.createBufferSource();
    this.source_0.buffer = buffer;
    this.source_0.loop = true;
    this.source_0.connect(this.scriptNode_0);
    this.scriptNode_0.connect(this.audioCtx_0.destination);
    this.source_0.start();
  }
  Object.defineProperty(AudioGenerator.prototype, 'isPaused', {
    get: function () {
      return this.isPaused_z77g9l$_0;
    },
    set: function (value) {
      if (this.isPaused_z77g9l$_0 !== value) {
        this.isPaused_z77g9l$_0 = value;
        if (value) {
          this.source_0.stop();
        } else {
          this.source_0.start();
        }
      }}
  });
  AudioGenerator.prototype.stop = function () {
    this.scriptNode_0.disconnect();
    this.source_0.loop = false;
    this.source_0.disconnect();
    this.source_0.stop();
  };
  AudioGenerator.prototype.enableFftComputation_za3lpa$ = function (nSamples) {
    var tmp$, tmp$_0;
    if (nSamples <= 0) {
      (tmp$ = this.analyserNode_0) != null ? tmp$.disconnect() : null;
      this.analyserNode_0 = null;
    } else {
      if (this.analyserNode_0 == null) {
        this.analyserNode_0 = this.audioCtx_0.createAnalyser();
        this.analyserNode_0.minDecibels = -90;
        this.analyserNode_0.maxDecibels = 0;
        this.analyserNode_0.smoothingTimeConstant = 0.5;
        this.scriptNode_0.connect(this.analyserNode_0);
      }this.analyserNode_0.fftSize = nSamples;
      this.powerSpectrum_0 = Kotlin.isType(tmp$_0 = createFloat32Buffer(this.analyserNode_0.frequencyBinCount), Float32BufferImpl) ? tmp$_0 : throwCCE();
    }
  };
  AudioGenerator.prototype.getPowerSpectrum = function () {
    this.analyserNode_0.getFloatFrequencyData(this.powerSpectrum_0.buffer);
    return this.powerSpectrum_0;
  };
  function AudioGenerator_init$lambda(closure$generatorFun, this$AudioGenerator) {
    return function (ev) {
      var tmp$;
      var outputBuffer = ev.outputBuffer;
      var data = outputBuffer.getChannelData(0);
      tmp$ = outputBuffer.length;
      for (var i = 0; i < tmp$; i++) {
        data[i] = closure$generatorFun(this$AudioGenerator, this$AudioGenerator.dt_0);
      }
      return Unit;
    };
  }
  AudioGenerator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AudioGenerator',
    interfaces: []
  };
  function OffscreenPass2dImpl(offscreenPass) {
    this.offscreenPass = offscreenPass;
    this.texture = new OffscreenPass2dImpl$OffscreenTexture(this);
    this.depthTexture = new OffscreenPass2dImpl$OffscreenDepthTexture(this);
    this.fbos_0 = ArrayList_init_0();
    this.rbos_0 = ArrayList_init_0();
    this.isCreated_0 = false;
  }
  OffscreenPass2dImpl.prototype.create_0 = function (ctx) {
    var tmp$, tmp$_0, tmp$_1;
    var gl = ctx.gl_8be2vx$;
    Kotlin.isType(tmp$ = this.texture, OffscreenPass2dImpl$OffscreenTexture) ? tmp$ : throwCCE();
    this.texture.create_44a5h0$(ctx);
    Kotlin.isType(tmp$_0 = this.depthTexture, OffscreenPass2dImpl$OffscreenDepthTexture) ? tmp$_0 : throwCCE();
    this.depthTexture.create_44a5h0$(ctx);
    tmp$_1 = this.offscreenPass.mipLevels;
    for (var i = 0; i < tmp$_1; i++) {
      var fbo = gl.createFramebuffer();
      gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, fbo);
      gl.framebufferTexture2D(WebGLRenderingContext.FRAMEBUFFER, WebGLRenderingContext.COLOR_ATTACHMENT0, WebGLRenderingContext.TEXTURE_2D, this.texture.offscreenTex, i);
      gl.framebufferTexture2D(WebGLRenderingContext.FRAMEBUFFER, WebGLRenderingContext.DEPTH_ATTACHMENT, WebGLRenderingContext.TEXTURE_2D, this.depthTexture.offscreenDepthTex, i);
      this.fbos_0.add_11rb$(fbo);
    }
    this.isCreated_0 = true;
  };
  OffscreenPass2dImpl.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$;
    Kotlin.isType(tmp$ = ctx, JsContext) ? tmp$ : throwCCE();
    var tmp$_0;
    tmp$_0 = this.fbos_0.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      ctx.gl_8be2vx$.deleteFramebuffer(element);
    }
    var tmp$_1;
    tmp$_1 = this.rbos_0.iterator();
    while (tmp$_1.hasNext()) {
      var element_0 = tmp$_1.next();
      ctx.gl_8be2vx$.deleteRenderbuffer(element_0);
    }
    this.fbos_0.clear();
    this.rbos_0.clear();
    this.texture.dispose();
    this.depthTexture.dispose();
    this.isCreated_0 = false;
  };
  OffscreenPass2dImpl.prototype.resize_w70mbp$ = function (width, height, ctx) {
    var tmp$;
    this.dispose_aemszp$(ctx);
    this.create_0(Kotlin.isType(tmp$ = ctx, JsContext) ? tmp$ : throwCCE());
  };
  OffscreenPass2dImpl.prototype.draw_44a5h0$ = function (ctx) {
    if (!this.isCreated_0) {
      this.create_0(ctx);
    }var mipLevel = this.offscreenPass.targetMipLevel;
    var fboIdx = mipLevel < 0 ? 0 : mipLevel;
    ctx.gl_8be2vx$.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, this.fbos_0.get_za3lpa$(fboIdx));
    ctx.queueRenderer_8be2vx$.renderQueue_21v2u5$(this.offscreenPass.drawQueue);
    ctx.gl_8be2vx$.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null);
  };
  function OffscreenPass2dImpl$OffscreenTexture($outer) {
    this.$outer = $outer;
    Texture.call(this, void 0, null);
    this.offscreenTex = null;
  }
  OffscreenPass2dImpl$OffscreenTexture.prototype.create_44a5h0$ = function (ctx) {
    var gl = ctx.gl_8be2vx$;
    var intFormat = get_glInternalFormat(this.$outer.offscreenPass.colorFormat);
    var width = this.$outer.offscreenPass.texWidth;
    var height = this.$outer.offscreenPass.texHeight;
    this.offscreenTex = gl.createTexture();
    gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.offscreenTex);
    gl.texStorage2D(WebGLRenderingContext.TEXTURE_2D, this.$outer.offscreenPass.mipLevels, intFormat, width, height);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_S, WebGLRenderingContext.CLAMP_TO_EDGE);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_T, WebGLRenderingContext.CLAMP_TO_EDGE);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MIN_FILTER, WebGLRenderingContext.LINEAR_MIPMAP_LINEAR);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MAG_FILTER, WebGLRenderingContext.LINEAR);
    var estSize = Texture$Companion_getInstance().estimatedTexSize_4qozqa$(width, height, get_pxSize(this.$outer.offscreenPass.colorFormat), 1, this.$outer.offscreenPass.mipLevels);
    this.loadedTexture = new LoadedTextureWebGl(ctx, this.offscreenTex, estSize);
    this.loadingState = Texture$LoadingState$LOADED_getInstance();
  };
  OffscreenPass2dImpl$OffscreenTexture.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OffscreenTexture',
    interfaces: [Texture]
  };
  function OffscreenPass2dImpl$OffscreenDepthTexture($outer) {
    this.$outer = $outer;
    Texture.call(this, void 0, null);
    this.offscreenDepthTex = null;
  }
  OffscreenPass2dImpl$OffscreenDepthTexture.prototype.create_44a5h0$ = function (ctx) {
    var gl = ctx.gl_8be2vx$;
    var intFormat = WebGL2RenderingContext.DEPTH_COMPONENT24;
    var width = this.$outer.offscreenPass.texWidth;
    var height = this.$outer.offscreenPass.texHeight;
    this.offscreenDepthTex = gl.createTexture();
    gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.offscreenDepthTex);
    gl.texStorage2D(WebGLRenderingContext.TEXTURE_2D, this.$outer.offscreenPass.mipLevels, intFormat, width, height);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_S, WebGLRenderingContext.CLAMP_TO_EDGE);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_T, WebGLRenderingContext.CLAMP_TO_EDGE);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MIN_FILTER, WebGLRenderingContext.LINEAR);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MAG_FILTER, WebGLRenderingContext.LINEAR);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGL2RenderingContext.TEXTURE_COMPARE_MODE, WebGL2RenderingContext.COMPARE_REF_TO_TEXTURE);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGL2RenderingContext.TEXTURE_COMPARE_FUNC, WebGLRenderingContext.LESS);
    var estSize = Texture$Companion_getInstance().estimatedTexSize_4qozqa$(width, height, 4, 1, this.$outer.offscreenPass.mipLevels);
    this.loadedTexture = new LoadedTextureWebGl(ctx, this.offscreenDepthTex, estSize);
    this.loadingState = Texture$LoadingState$LOADED_getInstance();
  };
  OffscreenPass2dImpl$OffscreenDepthTexture.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OffscreenDepthTexture',
    interfaces: [Texture]
  };
  OffscreenPass2dImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OffscreenPass2dImpl',
    interfaces: []
  };
  function OffscreenPass2dMrtImpl(offscreenPass) {
    this.offscreenPass = offscreenPass;
    var size = this.offscreenPass.nAttachments;
    var list = ArrayList_init(size);
    for (var index = 0; index < size; index++) {
      list.add_11rb$(new Texture(void 0, null));
    }
    this.textures = list;
    this.depthTexture = new Texture(void 0, null);
    this.isCreated_0 = false;
    this.fbo_0 = null;
    var array = Array_0(this.offscreenPass.nAttachments);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = null;
    }
    this.glColorTexs_0 = array;
    this.glDepthTex_0 = null;
  }
  OffscreenPass2dMrtImpl.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$, tmp$_0;
    Kotlin.isType(tmp$ = ctx, JsContext) ? tmp$ : throwCCE();
    ctx.gl_8be2vx$.deleteFramebuffer(this.fbo_0);
    this.fbo_0 = null;
    var tmp$_1;
    tmp$_1 = this.textures.iterator();
    while (tmp$_1.hasNext()) {
      var element = tmp$_1.next();
      element.dispose();
    }
    this.depthTexture.dispose();
    tmp$_0 = this.glColorTexs_0;
    for (var i = 0; i !== tmp$_0.length; ++i) {
      this.glColorTexs_0[i] = null;
    }
    this.glDepthTex_0 = null;
    this.isCreated_0 = false;
  };
  OffscreenPass2dMrtImpl.prototype.resize_w70mbp$ = function (width, height, ctx) {
    var tmp$;
    this.dispose_aemszp$(ctx);
    this.create_0(Kotlin.isType(tmp$ = ctx, JsContext) ? tmp$ : throwCCE());
  };
  OffscreenPass2dMrtImpl.prototype.draw_44a5h0$ = function (ctx) {
    if (!this.isCreated_0) {
      this.create_0(ctx);
    }ctx.gl_8be2vx$.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, this.fbo_0);
    ctx.queueRenderer_8be2vx$.renderQueue_21v2u5$(this.offscreenPass.drawQueue);
    ctx.gl_8be2vx$.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null);
  };
  OffscreenPass2dMrtImpl.prototype.create_0 = function (ctx) {
    var tmp$;
    this.createColorTex_0(ctx);
    this.createDepthTex_0(ctx);
    var gl = ctx.gl_8be2vx$;
    this.fbo_0 = gl.createFramebuffer();
    gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, this.fbo_0);
    tmp$ = this.glColorTexs_0;
    for (var i = 0; i !== tmp$.length; ++i) {
      gl.framebufferTexture2D(WebGLRenderingContext.FRAMEBUFFER, WebGLRenderingContext.COLOR_ATTACHMENT0 + i | 0, WebGLRenderingContext.TEXTURE_2D, this.glColorTexs_0[i], 0);
    }
    gl.framebufferTexture2D(WebGLRenderingContext.FRAMEBUFFER, WebGLRenderingContext.DEPTH_ATTACHMENT, WebGLRenderingContext.TEXTURE_2D, this.glDepthTex_0, 0);
    var array = new Int32Array(this.glColorTexs_0.length);
    var tmp$_0;
    tmp$_0 = array.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array[i_0] = WebGLRenderingContext.COLOR_ATTACHMENT0 + i_0 | 0;
    }
    var attachments = array;
    gl.drawBuffers(attachments);
    this.isCreated_0 = true;
  };
  OffscreenPass2dMrtImpl.prototype.createColorTex_0 = function (ctx) {
    var tmp$;
    var gl = ctx.gl_8be2vx$;
    tmp$ = this.glColorTexs_0;
    for (var i = 0; i !== tmp$.length; ++i) {
      var colorFormat = this.offscreenPass.texFormats.get_za3lpa$(i);
      var intFormat = get_glInternalFormat(colorFormat);
      var width = this.offscreenPass.texWidth;
      var height = this.offscreenPass.texHeight;
      this.glColorTexs_0[i] = gl.createTexture();
      gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.glColorTexs_0[i]);
      gl.texStorage2D(WebGLRenderingContext.TEXTURE_2D, this.offscreenPass.mipLevels, intFormat, width, height);
      gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_S, WebGLRenderingContext.CLAMP_TO_EDGE);
      gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_T, WebGLRenderingContext.CLAMP_TO_EDGE);
      gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MIN_FILTER, WebGLRenderingContext.NEAREST);
      gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MAG_FILTER, WebGLRenderingContext.NEAREST);
      var estSize = Texture$Companion_getInstance().estimatedTexSize_4qozqa$(width, height, get_pxSize(colorFormat), 1, this.offscreenPass.mipLevels);
      this.textures.get_za3lpa$(i).loadedTexture = new LoadedTextureWebGl(ctx, this.glColorTexs_0[i], estSize);
      this.textures.get_za3lpa$(i).loadingState = Texture$LoadingState$LOADED_getInstance();
    }
  };
  OffscreenPass2dMrtImpl.prototype.createDepthTex_0 = function (ctx) {
    var gl = ctx.gl_8be2vx$;
    var intFormat = WebGL2RenderingContext.DEPTH_COMPONENT24;
    var width = this.offscreenPass.texWidth;
    var height = this.offscreenPass.texHeight;
    this.glDepthTex_0 = gl.createTexture();
    gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.glDepthTex_0);
    gl.texStorage2D(WebGLRenderingContext.TEXTURE_2D, this.offscreenPass.mipLevels, intFormat, width, height);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_S, WebGLRenderingContext.CLAMP_TO_EDGE);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_T, WebGLRenderingContext.CLAMP_TO_EDGE);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MIN_FILTER, WebGLRenderingContext.LINEAR);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MAG_FILTER, WebGLRenderingContext.LINEAR);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGL2RenderingContext.TEXTURE_COMPARE_MODE, WebGL2RenderingContext.COMPARE_REF_TO_TEXTURE);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGL2RenderingContext.TEXTURE_COMPARE_FUNC, WebGLRenderingContext.LESS);
    var estSize = Texture$Companion_getInstance().estimatedTexSize_4qozqa$(width, height, 4, 1, this.offscreenPass.mipLevels);
    this.depthTexture.loadedTexture = new LoadedTextureWebGl(ctx, this.glDepthTex_0, estSize);
    this.depthTexture.loadingState = Texture$LoadingState$LOADED_getInstance();
  };
  OffscreenPass2dMrtImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OffscreenPass2dMrtImpl',
    interfaces: []
  };
  function OffscreenPassCubeImpl(offscreenPass) {
    OffscreenPassCubeImpl$Companion_getInstance();
    this.offscreenPass = offscreenPass;
    this.texture = new OffscreenPassCubeImpl$OffscreenTextureCube(this);
    this.fbos_0 = ArrayList_init_0();
    this.rbos_0 = ArrayList_init_0();
    this.isCreated_0 = false;
  }
  OffscreenPassCubeImpl.prototype.create_0 = function (ctx) {
    var tmp$, tmp$_0;
    var gl = ctx.gl_8be2vx$;
    Kotlin.isType(tmp$ = this.texture, OffscreenPassCubeImpl$OffscreenTextureCube) ? tmp$ : throwCCE();
    this.texture.create_44a5h0$(ctx);
    tmp$_0 = this.offscreenPass.mipLevels;
    for (var i = 0; i < tmp$_0; i++) {
      var fbo = gl.createFramebuffer();
      var rbo = gl.createRenderbuffer();
      gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, fbo);
      gl.bindRenderbuffer(WebGLRenderingContext.RENDERBUFFER, rbo);
      gl.renderbufferStorage(WebGLRenderingContext.RENDERBUFFER, WebGL2RenderingContext.DEPTH_COMPONENT24, this.offscreenPass.texWidth >> i, this.offscreenPass.texHeight >> i);
      gl.framebufferRenderbuffer(WebGLRenderingContext.FRAMEBUFFER, WebGLRenderingContext.DEPTH_ATTACHMENT, WebGLRenderingContext.RENDERBUFFER, rbo);
      this.fbos_0.add_11rb$(fbo);
      this.rbos_0.add_11rb$(rbo);
    }
    this.isCreated_0 = true;
  };
  OffscreenPassCubeImpl.prototype.dispose_aemszp$ = function (ctx) {
    var tmp$;
    Kotlin.isType(tmp$ = ctx, JsContext) ? tmp$ : throwCCE();
    var tmp$_0;
    tmp$_0 = this.fbos_0.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      ctx.gl_8be2vx$.deleteFramebuffer(element);
    }
    var tmp$_1;
    tmp$_1 = this.rbos_0.iterator();
    while (tmp$_1.hasNext()) {
      var element_0 = tmp$_1.next();
      ctx.gl_8be2vx$.deleteRenderbuffer(element_0);
    }
    this.fbos_0.clear();
    this.rbos_0.clear();
    this.texture.dispose();
    this.isCreated_0 = false;
  };
  OffscreenPassCubeImpl.prototype.resize_w70mbp$ = function (width, height, ctx) {
    var tmp$;
    this.dispose_aemszp$(ctx);
    this.create_0(Kotlin.isType(tmp$ = ctx, JsContext) ? tmp$ : throwCCE());
  };
  OffscreenPassCubeImpl.prototype.draw_44a5h0$ = function (ctx) {
    var tmp$;
    if (!this.isCreated_0) {
      this.create_0(ctx);
    }Kotlin.isType(tmp$ = this.texture, OffscreenPassCubeImpl$OffscreenTextureCube) ? tmp$ : throwCCE();
    var mipLevel = this.offscreenPass.targetMipLevel;
    var fboIdx = mipLevel < 0 ? 0 : mipLevel;
    this.offscreenPass.setMipViewport_za3lpa$(mipLevel);
    ctx.gl_8be2vx$.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, this.fbos_0.get_za3lpa$(fboIdx));
    for (var i = 0; i < 6; i++) {
      var view = OffscreenPassCubeImpl$Companion_getInstance().VIEWS_0[i];
      var queue = this.offscreenPass.drawQueues[view.index];
      ctx.gl_8be2vx$.framebufferTexture2D(WebGLRenderingContext.FRAMEBUFFER, WebGLRenderingContext.COLOR_ATTACHMENT0, WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_X + i | 0, this.texture.offscreenTex, fboIdx);
      ctx.queueRenderer_8be2vx$.renderQueue_21v2u5$(queue);
    }
    ctx.gl_8be2vx$.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null);
  };
  function OffscreenPassCubeImpl$Companion() {
    OffscreenPassCubeImpl$Companion_instance = this;
    var array = Array_0(6);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    loop_label: for (var i = 0; i <= tmp$; i++) {
      var init$result;
      init$break: do {
        switch (i) {
          case 0:
            init$result = OffscreenRenderPassCube$ViewDirection$RIGHT_getInstance();
            break init$break;
          case 1:
            init$result = OffscreenRenderPassCube$ViewDirection$LEFT_getInstance();
            break init$break;
          case 2:
            init$result = OffscreenRenderPassCube$ViewDirection$UP_getInstance();
            break init$break;
          case 3:
            init$result = OffscreenRenderPassCube$ViewDirection$DOWN_getInstance();
            break init$break;
          case 4:
            init$result = OffscreenRenderPassCube$ViewDirection$FRONT_getInstance();
            break init$break;
          case 5:
            init$result = OffscreenRenderPassCube$ViewDirection$BACK_getInstance();
            break init$break;
          default:throw IllegalStateException_init_0();
        }
      }
       while (false);
      array[i] = init$result;
    }
    this.VIEWS_0 = array;
  }
  OffscreenPassCubeImpl$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var OffscreenPassCubeImpl$Companion_instance = null;
  function OffscreenPassCubeImpl$Companion_getInstance() {
    if (OffscreenPassCubeImpl$Companion_instance === null) {
      new OffscreenPassCubeImpl$Companion();
    }return OffscreenPassCubeImpl$Companion_instance;
  }
  function OffscreenPassCubeImpl$OffscreenTextureCube($outer) {
    this.$outer = $outer;
    CubeMapTexture.call(this, new TextureProps(void 0, AddressMode$CLAMP_TO_EDGE_getInstance(), AddressMode$CLAMP_TO_EDGE_getInstance()), null);
    this.offscreenTex = null;
  }
  OffscreenPassCubeImpl$OffscreenTextureCube.prototype.create_44a5h0$ = function (ctx) {
    var gl = ctx.gl_8be2vx$;
    var intFormat = get_glInternalFormat(this.$outer.offscreenPass.colorFormat);
    var width = this.$outer.offscreenPass.texWidth;
    var height = this.$outer.offscreenPass.texHeight;
    this.offscreenTex = gl.createTexture();
    gl.bindTexture(WebGLRenderingContext.TEXTURE_CUBE_MAP, this.offscreenTex);
    gl.texStorage2D(WebGLRenderingContext.TEXTURE_CUBE_MAP, this.$outer.offscreenPass.mipLevels, intFormat, width, height);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_CUBE_MAP, WebGLRenderingContext.TEXTURE_WRAP_S, WebGLRenderingContext.CLAMP_TO_EDGE);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_CUBE_MAP, WebGLRenderingContext.TEXTURE_WRAP_T, WebGLRenderingContext.CLAMP_TO_EDGE);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_CUBE_MAP, WebGL2RenderingContext.TEXTURE_WRAP_R, WebGLRenderingContext.CLAMP_TO_EDGE);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_CUBE_MAP, WebGLRenderingContext.TEXTURE_MIN_FILTER, WebGLRenderingContext.LINEAR_MIPMAP_LINEAR);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_CUBE_MAP, WebGLRenderingContext.TEXTURE_MAG_FILTER, WebGLRenderingContext.LINEAR);
    var estSize = Texture$Companion_getInstance().estimatedTexSize_4qozqa$(width, height, get_pxSize(this.$outer.offscreenPass.colorFormat), 6, this.$outer.offscreenPass.mipLevels);
    this.loadedTexture = new LoadedTextureWebGl(ctx, this.offscreenTex, estSize);
    this.loadingState = Texture$LoadingState$LOADED_getInstance();
  };
  OffscreenPassCubeImpl$OffscreenTextureCube.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OffscreenTextureCube',
    interfaces: [CubeMapTexture]
  };
  OffscreenPassCubeImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OffscreenPassCubeImpl',
    interfaces: []
  };
  function PlatformAttributeProps(attribute) {
    this.nSlots = 0;
    this.attribSize = 0;
    switch (attribute.type.name) {
      case 'FLOAT':
        this.nSlots = 1;
        this.attribSize = 1;
        break;
      case 'VEC_2F':
        this.nSlots = 1;
        this.attribSize = 2;
        break;
      case 'VEC_3F':
        this.nSlots = 1;
        this.attribSize = 3;
        break;
      case 'VEC_4F':
        this.nSlots = 1;
        this.attribSize = 4;
        break;
      case 'MAT_2F':
        this.nSlots = 2;
        this.attribSize = 2;
        break;
      case 'MAT_3F':
        this.nSlots = 3;
        this.attribSize = 3;
        break;
      case 'MAT_4F':
        this.nSlots = 4;
        this.attribSize = 4;
        break;
      default:throw IllegalArgumentException_init('Attribute type not supported: ' + attribute.type);
    }
  }
  PlatformAttributeProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PlatformAttributeProps',
    interfaces: []
  };
  function ShaderCode(vertexSrc, fragmentSrc) {
    this.vertexSrc = vertexSrc;
    this.fragmentSrc = fragmentSrc;
    var $receiver = hashCode(this.vertexSrc);
    var tmp$ = new ULong((new ULong(Kotlin.Long.fromInt($receiver))).data.shiftLeft(32));
    var $receiver_0 = hashCode(this.fragmentSrc);
    var other = new ULong(Kotlin.Long.fromInt($receiver_0));
    this.longHash = new ULong(tmp$.data.add(other.data));
  }
  ShaderCode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShaderCode',
    interfaces: []
  };
  function FontMapGenerator(maxWidth, maxHeight) {
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    var tmp$, tmp$_0;
    this.canvas_0 = Kotlin.isType(tmp$ = document.createElement('canvas'), HTMLCanvasElement) ? tmp$ : throwCCE();
    this.canvasCtx_0 = null;
    this.charMaps_0 = LinkedHashMap_init();
    this.canvas_0.width = this.maxWidth;
    this.canvas_0.height = this.maxHeight;
    this.canvasCtx_0 = Kotlin.isType(tmp$_0 = this.canvas_0.getContext('2d'), CanvasRenderingContext2D) ? tmp$_0 : throwCCE();
  }
  FontMapGenerator.prototype.getCharMap_ttufcy$ = function (fontProps) {
    var $receiver = this.charMaps_0;
    var tmp$;
    var value = $receiver.get_11rb$(fontProps);
    if (value == null) {
      var answer = this.generateCharMap_0(fontProps);
      $receiver.put_xwzc9p$(fontProps, answer);
      tmp$ = answer;
    } else {
      tmp$ = value;
    }
    return tmp$;
  };
  FontMapGenerator.prototype.generateCharMap_0 = function (fontProps) {
    var tmp$;
    this.canvasCtx_0.clearRect(0.0, 0.0, this.maxWidth, this.maxHeight);
    var style = 'lighter ';
    if ((fontProps.style & 1) !== 0) {
      style = 'bold ';
    }if ((fontProps.style & 2) !== 0) {
      style += 'italic ';
    }var metrics = LinkedHashMap_init();
    var texHeight = this.makeMap_0(fontProps, style, metrics);
    var data = this.canvasCtx_0.getImageData(0.0, 0.0, this.maxWidth, texHeight);
    var buffer = createUint8Buffer(Kotlin.imul(this.maxWidth, texHeight));
    tmp$ = buffer.capacity;
    for (var i = 0; i < tmp$; i++) {
      buffer.put_s8j3t7$(data.data[(i * 4 | 0) + 3 | 0]);
    }
    return new CharMap(new BufferedTextureData(buffer, this.maxWidth, texHeight, TexFormat$R_getInstance()), metrics, fontProps);
  };
  FontMapGenerator.prototype.makeMap_0 = function (fontProps, style, map) {
    var tmp$, tmp$_0;
    this.canvasCtx_0.font = style + fontProps.sizePts + 'px ' + fontProps.family;
    this.canvasCtx_0.fillStyle = '#ffffff';
    var padding = 3.0;
    var hab = round(fontProps.sizePts * 1.1);
    var hbb = round(fontProps.sizePts * 0.5);
    var height = round(fontProps.sizePts * 1.6);
    this.canvasCtx_0.beginPath();
    this.canvasCtx_0.moveTo(0.5, 0.0);
    this.canvasCtx_0.lineTo(0.5, 1.0);
    this.canvasCtx_0.stroke();
    var x = 1.0;
    var y = hab;
    tmp$ = iterator(fontProps.chars);
    while (tmp$.hasNext()) {
      var c = unboxChar(tmp$.next());
      if (c === 106) {
        x += fontProps.sizePts * 0.1;
      }var txt = String.fromCharCode(c);
      var charW = round(this.canvasCtx_0.measureText(txt).width);
      var paddedWidth = round(charW + padding * 2);
      if (x + paddedWidth > this.maxWidth) {
        x = 0.0;
        y += height + 10;
        if (y + hbb > this.maxHeight) {
          break;
        }}var widthPx = charW;
      var heightPx = height;
      var metrics = new CharMetrics();
      metrics.width = widthPx;
      metrics.height = heightPx;
      metrics.xOffset = 0.0;
      metrics.yBaseline = hab;
      metrics.advance = metrics.width;
      metrics.uvMin.set_dleff0$(x + padding, y - hab);
      metrics.uvMax.set_dleff0$(x + padding + widthPx, y - hab + heightPx);
      var key = toBoxedChar(c);
      map.put_xwzc9p$(key, metrics);
      this.canvasCtx_0.fillText(txt, x + padding, y);
      x += paddedWidth;
    }
    var texW = this.maxWidth;
    var texH = this.nextPow2_0(y + hbb);
    tmp$_0 = map.values.iterator();
    while (tmp$_0.hasNext()) {
      var cm = tmp$_0.next();
      cm.uvMin.x = cm.uvMin.x / texW;
      cm.uvMin.y = cm.uvMin.y / texH;
      cm.uvMax.x = cm.uvMax.x / texW;
      cm.uvMax.y = cm.uvMax.y / texH;
    }
    return texH;
  };
  FontMapGenerator.prototype.nextPow2_0 = function (value) {
    var pow2 = 16;
    while (pow2 < value && pow2 < this.maxHeight) {
      pow2 = pow2 << 1;
    }
    return pow2;
  };
  FontMapGenerator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FontMapGenerator',
    interfaces: []
  };
  function ImageTextureData(image) {
    TextureData.call(this);
    this.data_a0fx42$_0 = image;
    if (!image.complete) {
      throw IllegalStateException_init('Image must be comp\xFClete');
    }this.width = image.width;
    this.height = image.height;
  }
  Object.defineProperty(ImageTextureData.prototype, 'data', {
    get: function () {
      return this.data_a0fx42$_0;
    }
  });
  ImageTextureData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ImageTextureData',
    interfaces: [TextureData]
  };
  function JsAssetManager(assetsBaseDir, ctx) {
    JsAssetManager$Companion_getInstance();
    AssetManager.call(this, assetsBaseDir);
    this.ctx = ctx;
    this.pako_0 = require('pako_inflate.min');
    this.fontGenerator_0 = new FontMapGenerator(2048, 2048);
  }
  function Coroutine$loadLocalRaw_hl6yzt$($this, localRawRef_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$localRawRef = localRawRef_0;
  }
  Coroutine$loadLocalRaw_hl6yzt$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$loadLocalRaw_hl6yzt$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$loadLocalRaw_hl6yzt$.prototype.constructor = Coroutine$loadLocalRaw_hl6yzt$;
  Coroutine$loadLocalRaw_hl6yzt$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.loadRaw_0(this.local$localRawRef.url, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return new LoadedRawAsset(this.local$localRawRef, this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  JsAssetManager.prototype.loadLocalRaw_hl6yzt$ = function (localRawRef_0, continuation_0, suspended) {
    var instance = new Coroutine$loadLocalRaw_hl6yzt$(this, localRawRef_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$loadHttpRaw_ohmb7q$($this, httpRawRef_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$httpRawRef = httpRawRef_0;
  }
  Coroutine$loadHttpRaw_ohmb7q$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$loadHttpRaw_ohmb7q$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$loadHttpRaw_ohmb7q$.prototype.constructor = Coroutine$loadHttpRaw_ohmb7q$;
  Coroutine$loadHttpRaw_ohmb7q$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.loadRaw_0(this.local$httpRawRef.url, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return new LoadedRawAsset(this.local$httpRawRef, this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  JsAssetManager.prototype.loadHttpRaw_ohmb7q$ = function (httpRawRef_0, continuation_0, suspended) {
    var instance = new Coroutine$loadHttpRaw_ohmb7q$(this, httpRawRef_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$loadHttpTexture_nbaz3h$($this, httpTextureRef_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$httpTextureRef = httpTextureRef_0;
  }
  Coroutine$loadHttpTexture_nbaz3h$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$loadHttpTexture_nbaz3h$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$loadHttpTexture_nbaz3h$.prototype.constructor = Coroutine$loadHttpTexture_nbaz3h$;
  Coroutine$loadHttpTexture_nbaz3h$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.loadImage_0(this.local$httpTextureRef.url, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return new LoadedTextureAsset(this.local$httpTextureRef, this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  JsAssetManager.prototype.loadHttpTexture_nbaz3h$ = function (httpTextureRef_0, continuation_0, suspended) {
    var instance = new Coroutine$loadHttpTexture_nbaz3h$(this, httpTextureRef_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$loadLocalTexture_68kns4$($this, localTextureRef_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$localTextureRef = localTextureRef_0;
  }
  Coroutine$loadLocalTexture_68kns4$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$loadLocalTexture_68kns4$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$loadLocalTexture_68kns4$.prototype.constructor = Coroutine$loadLocalTexture_68kns4$;
  Coroutine$loadLocalTexture_68kns4$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.loadImage_0(this.local$localTextureRef.url, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return new LoadedTextureAsset(this.local$localTextureRef, this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  JsAssetManager.prototype.loadLocalTexture_68kns4$ = function (localTextureRef_0, continuation_0, suspended) {
    var instance = new Coroutine$loadLocalTexture_68kns4$(this, localTextureRef_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function JsAssetManager$loadRaw$lambda(closure$req, closure$data) {
    return function (it) {
      var tmp$, tmp$_0;
      var array = new Uint8Array(Kotlin.isType(tmp$ = closure$req.response, ArrayBuffer) ? tmp$ : throwCCE());
      var bytes = new Int8Array(array.length);
      tmp$_0 = array.length;
      for (var i = 0; i < tmp$_0; i++) {
        bytes[i] = array[i];
      }
      return closure$data.complete_11rb$(bytes);
    };
  }
  function JsAssetManager$loadRaw$lambda_0(closure$data, closure$url, this$JsAssetManager) {
    return function (it) {
      closure$data.complete_11rb$(null);
      var $receiver = this$JsAssetManager;
      var $this = package$util.Log;
      var level = Log$Level.ERROR;
      var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Failed loading resource ' + closure$url + ': ' + it);
      }return Unit;
    };
  }
  JsAssetManager.prototype.loadRaw_0 = function (url, continuation) {
    var data = CompletableDeferred(this.job);
    var req = new XMLHttpRequest();
    req.responseType = 'arraybuffer';
    req.onload = JsAssetManager$loadRaw$lambda(req, data);
    req.onerror = JsAssetManager$loadRaw$lambda_0(data, url, this);
    req.open('GET', url);
    req.send();
    return data.await(continuation);
  };
  function JsAssetManager$loadImage$lambda(closure$deferred, closure$img) {
    return function (it) {
      return closure$deferred.complete_11rb$(closure$img);
    };
  }
  function JsAssetManager$loadImage$lambda_0(closure$deferred, closure$url) {
    return function (f, f_0, f_1, f_2, f_3) {
      return closure$deferred.completeExceptionally_tcv7n7$(KoolException_init('Failed loading tex from ' + closure$url));
    };
  }
  function Coroutine$loadImage_0($this, url_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$url = url_0;
  }
  Coroutine$loadImage_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$loadImage_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$loadImage_0.prototype.constructor = Coroutine$loadImage_0;
  Coroutine$loadImage_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var deferred = CompletableDeferred();
            var img = new Image();
            img.onload = JsAssetManager$loadImage$lambda(deferred, img);
            img.onerror = JsAssetManager$loadImage$lambda_0(deferred, this.local$url);
            img.crossOrigin = '';
            if ('decoding' in img) {
              img.decoding = 'async';
            }
            img.src = this.local$url;
            this.state_0 = 2;
            this.result_0 = deferred.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return new ImageTextureData(this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  JsAssetManager.prototype.loadImage_0 = function (url_0, continuation_0, suspended) {
    var instance = new Coroutine$loadImage_0(this, url_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$JsAssetManager$loadTextureAsync$lambda(closure$loader_0, this$JsAssetManager_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$loader = closure$loader_0;
    this.local$this$JsAssetManager = this$JsAssetManager_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$JsAssetManager$loadTextureAsync$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$JsAssetManager$loadTextureAsync$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$JsAssetManager$loadTextureAsync$lambda.prototype.constructor = Coroutine$JsAssetManager$loadTextureAsync$lambda;
  Coroutine$JsAssetManager$loadTextureAsync$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$loader(this.local$$receiver, this.local$this$JsAssetManager, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function JsAssetManager$loadTextureAsync$lambda(closure$loader_0, this$JsAssetManager_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$JsAssetManager$loadTextureAsync$lambda(closure$loader_0, this$JsAssetManager_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  JsAssetManager.prototype.loadTextureAsync_72pzmk$ = function (loader) {
    return async(this, void 0, void 0, JsAssetManager$loadTextureAsync$lambda(loader, this));
  };
  JsAssetManager.prototype.createCharMap_ttufcy$ = function (fontProps) {
    return this.fontGenerator_0.getCharMap_ttufcy$(fontProps);
  };
  JsAssetManager.prototype.inflate_fqrh44$ = function (zipData) {
    var tmp$;
    var uint8Data = new Uint8Array(zipData.length);
    for (var i = 0; i !== zipData.length; ++i) {
      uint8Data[i] = zipData[i];
    }
    var inflated = Kotlin.isType(tmp$ = this.pako_0.inflate(uint8Data), Uint8Array) ? tmp$ : throwCCE();
    var array = new Int8Array(inflated.length);
    var tmp$_0;
    tmp$_0 = array.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array[i_0] = inflated[i_0];
    }
    return array;
  };
  function Coroutine$JsAssetManager$loadAndPrepareTexture$lambda(closure$assetPath_0, $receiver_0, it_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$assetPath = closure$assetPath_0;
    this.local$it = it_0;
  }
  Coroutine$JsAssetManager$loadAndPrepareTexture$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$JsAssetManager$loadAndPrepareTexture$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$JsAssetManager$loadAndPrepareTexture$lambda.prototype.constructor = Coroutine$JsAssetManager$loadAndPrepareTexture$lambda;
  Coroutine$JsAssetManager$loadAndPrepareTexture$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$it.loadTextureData_61zpoe$(this.local$closure$assetPath, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function JsAssetManager$loadAndPrepareTexture$lambda(closure$assetPath_0) {
    return function ($receiver_0, it_0, continuation_0, suspended) {
      var instance = new Coroutine$JsAssetManager$loadAndPrepareTexture$lambda(closure$assetPath_0, $receiver_0, it_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$JsAssetManager$loadAndPrepareTexture$lambda_0(closure$assetPath_0, this$JsAssetManager_0, closure$props_0, closure$tex_0, closure$recv_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$assetPath = closure$assetPath_0;
    this.local$this$JsAssetManager = this$JsAssetManager_0;
    this.local$closure$props = closure$props_0;
    this.local$closure$tex = closure$tex_0;
    this.local$closure$recv = closure$recv_0;
  }
  Coroutine$JsAssetManager$loadAndPrepareTexture$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$JsAssetManager$loadAndPrepareTexture$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$JsAssetManager$loadAndPrepareTexture$lambda_0.prototype.constructor = Coroutine$JsAssetManager$loadAndPrepareTexture$lambda_0;
  Coroutine$JsAssetManager$loadAndPrepareTexture$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$JsAssetManager.loadTextureData_61zpoe$(this.local$closure$assetPath, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var data = this.result_0;
            this.local$closure$tex.loadedTexture = TextureLoader_getInstance().loadTexture_hlfduu$(this.local$this$JsAssetManager.ctx, this.local$closure$props, data);
            this.local$closure$tex.loadingState = Texture$LoadingState$LOADED_getInstance();
            return this.local$closure$recv(this.local$closure$tex);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function JsAssetManager$loadAndPrepareTexture$lambda_0(closure$assetPath_0, this$JsAssetManager_0, closure$props_0, closure$tex_0, closure$recv_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$JsAssetManager$loadAndPrepareTexture$lambda_0(closure$assetPath_0, this$JsAssetManager_0, closure$props_0, closure$tex_0, closure$recv_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  JsAssetManager.prototype.loadAndPrepareTexture_hd4f6p$$default = function (assetPath, props, recv) {
    var tex = new Texture(props, JsAssetManager$loadAndPrepareTexture$lambda(assetPath));
    launch(this, void 0, void 0, JsAssetManager$loadAndPrepareTexture$lambda_0(assetPath, this, props, tex, recv));
  };
  function Coroutine$JsAssetManager$loadAndPrepareCubeMap$lambda(closure$ft_0, closure$bk_0, closure$lt_0, closure$rt_0, closure$up_0, closure$dn_0, $receiver_0, it_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$ft = closure$ft_0;
    this.local$closure$bk = closure$bk_0;
    this.local$closure$lt = closure$lt_0;
    this.local$closure$rt = closure$rt_0;
    this.local$closure$up = closure$up_0;
    this.local$closure$dn = closure$dn_0;
    this.local$it = it_0;
  }
  Coroutine$JsAssetManager$loadAndPrepareCubeMap$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$JsAssetManager$loadAndPrepareCubeMap$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$JsAssetManager$loadAndPrepareCubeMap$lambda.prototype.constructor = Coroutine$JsAssetManager$loadAndPrepareCubeMap$lambda;
  Coroutine$JsAssetManager$loadAndPrepareCubeMap$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$it.loadCubeMapTextureData_r3y0ew$(this.local$closure$ft, this.local$closure$bk, this.local$closure$lt, this.local$closure$rt, this.local$closure$up, this.local$closure$dn, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function JsAssetManager$loadAndPrepareCubeMap$lambda(closure$ft_0, closure$bk_0, closure$lt_0, closure$rt_0, closure$up_0, closure$dn_0) {
    return function ($receiver_0, it_0, continuation_0, suspended) {
      var instance = new Coroutine$JsAssetManager$loadAndPrepareCubeMap$lambda(closure$ft_0, closure$bk_0, closure$lt_0, closure$rt_0, closure$up_0, closure$dn_0, $receiver_0, it_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$JsAssetManager$loadAndPrepareCubeMap$lambda_0(closure$ft_0, closure$bk_0, closure$lt_0, closure$rt_0, closure$up_0, closure$dn_0, this$JsAssetManager_0, closure$props_0, closure$tex_0, closure$recv_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$ft = closure$ft_0;
    this.local$closure$bk = closure$bk_0;
    this.local$closure$lt = closure$lt_0;
    this.local$closure$rt = closure$rt_0;
    this.local$closure$up = closure$up_0;
    this.local$closure$dn = closure$dn_0;
    this.local$this$JsAssetManager = this$JsAssetManager_0;
    this.local$closure$props = closure$props_0;
    this.local$closure$tex = closure$tex_0;
    this.local$closure$recv = closure$recv_0;
  }
  Coroutine$JsAssetManager$loadAndPrepareCubeMap$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$JsAssetManager$loadAndPrepareCubeMap$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$JsAssetManager$loadAndPrepareCubeMap$lambda_0.prototype.constructor = Coroutine$JsAssetManager$loadAndPrepareCubeMap$lambda_0;
  Coroutine$JsAssetManager$loadAndPrepareCubeMap$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$JsAssetManager.loadCubeMapTextureData_r3y0ew$(this.local$closure$ft, this.local$closure$bk, this.local$closure$lt, this.local$closure$rt, this.local$closure$up, this.local$closure$dn, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var data = this.result_0;
            this.local$closure$tex.loadedTexture = TextureLoader_getInstance().loadTexture_hlfduu$(this.local$this$JsAssetManager.ctx, this.local$closure$props, data);
            this.local$closure$tex.loadingState = Texture$LoadingState$LOADED_getInstance();
            return this.local$closure$recv(this.local$closure$tex);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function JsAssetManager$loadAndPrepareCubeMap$lambda_0(closure$ft_0, closure$bk_0, closure$lt_0, closure$rt_0, closure$up_0, closure$dn_0, this$JsAssetManager_0, closure$props_0, closure$tex_0, closure$recv_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$JsAssetManager$loadAndPrepareCubeMap$lambda_0(closure$ft_0, closure$bk_0, closure$lt_0, closure$rt_0, closure$up_0, closure$dn_0, this$JsAssetManager_0, closure$props_0, closure$tex_0, closure$recv_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  JsAssetManager.prototype.loadAndPrepareCubeMap_y2tg0w$$default = function (ft, bk, lt, rt, up, dn, props, recv) {
    var tex = new CubeMapTexture(props, JsAssetManager$loadAndPrepareCubeMap$lambda(ft, bk, lt, rt, up, dn));
    launch(this, void 0, void 0, JsAssetManager$loadAndPrepareCubeMap$lambda_0(ft, bk, lt, rt, up, dn, this, props, tex, recv));
  };
  function JsAssetManager$Companion() {
    JsAssetManager$Companion_instance = this;
    this.MAX_GENERATED_TEX_WIDTH_0 = 2048;
    this.MAX_GENERATED_TEX_HEIGHT_0 = 2048;
  }
  JsAssetManager$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var JsAssetManager$Companion_instance = null;
  function JsAssetManager$Companion_getInstance() {
    if (JsAssetManager$Companion_instance === null) {
      new JsAssetManager$Companion();
    }return JsAssetManager$Companion_instance;
  }
  JsAssetManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'JsAssetManager',
    interfaces: [AssetManager]
  };
  function JsContext(props) {
    JsContext$Companion_getInstance();
    KoolContext.call(this);
    this.props = props;
    this.assetMgr_z54vt4$_0 = new JsAssetManager(this.props.assetsBaseDir, this);
    this.shaderGenerator_d0v5kq$_0 = new ShaderGeneratorImplWebGl();
    this.queueRenderer_8be2vx$ = new QueueRendererWebGl(this);
    this.afterRenderActions_8be2vx$ = ArrayList_init_0();
    this.windowWidth_7sdnb6$_0 = 0;
    this.windowHeight_xsf9ux$_0 = 0;
    this.canvas_0 = null;
    this.gl_8be2vx$ = null;
    this.sysInfo_0 = ArrayList_init_0();
    this.animationMillis_0 = 0.0;
    this.glCapabilities = new GlCapabilities();
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    this.canvas_0 = Kotlin.isType(tmp$ = document.getElementById(this.props.canvasName), HTMLCanvasElement) ? tmp$ : throwCCE();
    var webGlCtx = this.canvas_0.getContext('webgl2');
    if (webGlCtx == null) {
      webGlCtx = this.canvas_0.getContext('experimental-webgl2');
    }if (webGlCtx != null) {
      this.gl_8be2vx$ = Kotlin.isType(tmp$_0 = webGlCtx, WebGL2RenderingContext) ? tmp$_0 : throwCCE();
      var $receiver = this.sysInfo_0;
      var element = 'WebGL 2.0';
      $receiver.add_11rb$(element);
      this.glCapabilities.maxTexUnits = this.gl_8be2vx$.getParameter(WebGLRenderingContext.MAX_TEXTURE_IMAGE_UNITS);
      this.glCapabilities.hasFloatTextures = this.gl_8be2vx$.getExtension('EXT_color_buffer_float') != null;
    } else {
      alert('Unable to initialize WebGL2 context. Your browser may not support it.');
      throw KoolException_init('WebGL2 context required');
    }
    var extAnisotropic = (tmp$_2 = (tmp$_1 = this.gl_8be2vx$.getExtension('EXT_texture_filter_anisotropic')) != null ? tmp$_1 : this.gl_8be2vx$.getExtension('MOZ_EXT_texture_filter_anisotropic')) != null ? tmp$_2 : this.gl_8be2vx$.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
    if (extAnisotropic != null) {
      this.glCapabilities.maxAnisotropy = typeof (tmp$_3 = this.gl_8be2vx$.getParameter(extAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT)) === 'number' ? tmp$_3 : throwCCE();
      this.glCapabilities.glTextureMaxAnisotropyExt = extAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT;
    }this.screenDpi = JsImpl_getInstance().dpi;
    this.windowWidth = this.canvas_0.clientWidth;
    this.windowHeight = this.canvas_0.clientHeight;
    this.canvas_0.oncontextmenu = getCallableRef('preventDefault', function ($receiver) {
      return $receiver.preventDefault(), Unit;
    });
    this.canvas_0.onmousemove = JsContext_init$lambda(this);
    this.canvas_0.onmousedown = JsContext_init$lambda_0(this);
    this.canvas_0.onmouseup = JsContext_init$lambda_1(this);
    this.canvas_0.onmouseleave = JsContext_init$lambda_2(this);
    this.canvas_0.onwheel = JsContext_init$lambda_3(this);
    this.canvas_0.addEventListener('touchstart', JsContext_init$lambda_4(this), false);
    this.canvas_0.addEventListener('touchend', JsContext_init$lambda_5(this), false);
    this.canvas_0.addEventListener('touchcancel', JsContext_init$lambda_6(this), false);
    this.canvas_0.addEventListener('touchmove', JsContext_init$lambda_7(this), false);
    document.onkeydown = JsContext_init$lambda_8(this);
    document.onkeyup = JsContext_init$lambda_9(this);
  }
  Object.defineProperty(JsContext.prototype, 'assetMgr', {
    get: function () {
      return this.assetMgr_z54vt4$_0;
    }
  });
  Object.defineProperty(JsContext.prototype, 'shaderGenerator', {
    get: function () {
      return this.shaderGenerator_d0v5kq$_0;
    }
  });
  Object.defineProperty(JsContext.prototype, 'windowWidth', {
    get: function () {
      return this.windowWidth_7sdnb6$_0;
    },
    set: function (windowWidth) {
      this.windowWidth_7sdnb6$_0 = windowWidth;
    }
  });
  Object.defineProperty(JsContext.prototype, 'windowHeight', {
    get: function () {
      return this.windowHeight_xsf9ux$_0;
    },
    set: function (windowHeight) {
      this.windowHeight_xsf9ux$_0 = windowHeight;
    }
  });
  JsContext.prototype.handleKeyDown_0 = function (ev) {
    var code = this.translateKeyCode_0(ev.code);
    if (code !== 0) {
      var mods = 0;
      if (ev.altKey) {
        mods = mods | 4;
      }if (ev.ctrlKey) {
        mods = mods | 2;
      }if (ev.shiftKey) {
        mods = mods | 1;
      }if (ev.metaKey) {
        mods = mods | 8;
      }var event = 2;
      if (ev.repeat) {
        event = event | 4;
      }this.inputMgr.keyEvent_qt1dr2$(code, mods, event);
    }if (ev.key.length === 1) {
      this.inputMgr.charTyped_s8itvh$(ev.key.charCodeAt(0));
    }if (!this.props.excludedKeyCodes.contains_11rb$(ev.code)) {
      ev.preventDefault();
    }};
  JsContext.prototype.handleKeyUp_0 = function (ev) {
    var code = this.translateKeyCode_0(ev.code);
    if (code !== 0) {
      var mods = 0;
      if (ev.altKey) {
        mods = mods | 4;
      }if (ev.ctrlKey) {
        mods = mods | 2;
      }if (ev.shiftKey) {
        mods = mods | 1;
      }if (ev.metaKey) {
        mods = mods | 8;
      }this.inputMgr.keyEvent_qt1dr2$(code, mods, 1);
    }if (!this.props.excludedKeyCodes.contains_11rb$(ev.code)) {
      ev.preventDefault();
    }};
  JsContext.prototype.translateKeyCode_0 = function (code) {
    var tmp$;
    if (code.length === 4 && startsWith(code, 'Key')) {
      return code.charCodeAt(3) | 0;
    } else {
      return (tmp$ = JsContext$Companion_getInstance().KEY_CODE_MAP.get_11rb$(code)) != null ? tmp$ : 0;
    }
  };
  function JsContext$renderFrame$lambda(this$JsContext) {
    return function (t) {
      this$JsContext.renderFrame_0(t);
      return Unit;
    };
  }
  JsContext.prototype.renderFrame_0 = function (time) {
    var dt = (time - this.animationMillis_0) / 1000.0;
    this.animationMillis_0 = time;
    this.windowWidth = this.canvas_0.clientWidth;
    this.windowHeight = this.canvas_0.clientHeight;
    if (this.windowWidth !== this.canvas_0.width || this.windowHeight !== this.canvas_0.height) {
      this.canvas_0.width = this.windowWidth;
      this.canvas_0.height = this.windowHeight;
    }this.render_14dthe$(dt);
    this.draw_0();
    this.gl_8be2vx$.finish();
    window.requestAnimationFrame(JsContext$renderFrame$lambda(this));
  };
  JsContext.prototype.draw_0 = function () {
    var tmp$;
    if (!this.disposablePipelines_8be2vx$.isEmpty()) {
      this.queueRenderer_8be2vx$.disposePipelines_z4np8a$(this.disposablePipelines_8be2vx$);
      this.disposablePipelines_8be2vx$.clear();
    }this.engineStats.resetPerFrameCounts();
    tmp$ = this.scenes;
    for (var i = 0; i !== tmp$.size; ++i) {
      var tmp$_0;
      var scene = this.scenes.get_za3lpa$(i);
      tmp$_0 = scene.offscreenPasses;
      for (var j = 0; j !== tmp$_0.size; ++j) {
        if (scene.offscreenPasses.get_za3lpa$(j).isEnabled) {
          this.drawOffscreen_0(scene.offscreenPasses.get_za3lpa$(j));
        }}
      this.queueRenderer_8be2vx$.renderQueue_21v2u5$(scene.mainRenderPass.drawQueue);
    }
    if (!this.afterRenderActions_8be2vx$.isEmpty()) {
      var tmp$_1;
      tmp$_1 = this.afterRenderActions_8be2vx$.iterator();
      while (tmp$_1.hasNext()) {
        var element = tmp$_1.next();
        element();
      }
      this.afterRenderActions_8be2vx$.clear();
    }};
  JsContext.prototype.drawOffscreen_0 = function (offscreenPass) {
    if (Kotlin.isType(offscreenPass, OffscreenRenderPass2d))
      offscreenPass.impl_8be2vx$.draw_44a5h0$(this);
    else if (Kotlin.isType(offscreenPass, OffscreenRenderPass2dMrt))
      offscreenPass.impl_8be2vx$.draw_44a5h0$(this);
    else if (Kotlin.isType(offscreenPass, OffscreenRenderPassCube))
      offscreenPass.impl_8be2vx$.draw_44a5h0$(this);
    else
      throw IllegalArgumentException_init('Offscreen pass type not implemented: ' + offscreenPass);
  };
  JsContext.prototype.openUrl_61zpoe$ = function (url) {
    window.open(url);
  };
  function JsContext$run$lambda(this$JsContext) {
    return function (t) {
      this$JsContext.renderFrame_0(t);
      return Unit;
    };
  }
  JsContext.prototype.run = function () {
    window.requestAnimationFrame(JsContext$run$lambda(this));
  };
  JsContext.prototype.destroy = function () {
  };
  JsContext.prototype.getSysInfos = function () {
    return this.sysInfo_0;
  };
  JsContext.prototype.getWindowViewport_ahq5yh$ = function (result) {
    result.set_tjonv8$(0, 0, this.windowWidth, this.windowHeight);
  };
  function JsContext$InitProps() {
    this.canvasName = 'glCanvas';
    this.excludedKeyCodes = mutableSetOf(['F5']);
    this.assetsBaseDir = './assets';
  }
  JsContext$InitProps.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InitProps',
    interfaces: []
  };
  function JsContext$Companion() {
    JsContext$Companion_instance = this;
    this.KEY_CODE_MAP = mutableMapOf([to('ControlLeft', -1), to('ControlRight', -2), to('ShiftLeft', -3), to('ShiftRight', -4), to('AltLeft', -5), to('AltRight', -6), to('MetaLeft', -7), to('MetaRight', -8), to('Escape', -9), to('ContextMenu', -10), to('Enter', -11), to('NumpadEnter', -12), to('NumpadDivide', -13), to('NumpadMultiply', -14), to('NumpadAdd', -15), to('NumpadSubtract', -16), to('Backspace', -17), to('Tab', -18), to('Delete', -19), to('Insert', -20), to('Home', -21), to('End', -22), to('PageUp', -23), to('PageDown', -24), to('ArrowLeft', -25), to('ArrowRight', -26), to('ArrowUp', -27), to('ArrowDown', -28), to('F1', -29), to('F2', -30), to('F3', -31), to('F4', -32), to('F5', -33), to('F6', -34), to('F7', -35), to('F8', -36), to('F9', -37), to('F10', -38), to('F11', -39), to('F12', -40), to('Space', 32)]);
  }
  JsContext$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var JsContext$Companion_instance = null;
  function JsContext$Companion_getInstance() {
    if (JsContext$Companion_instance === null) {
      new JsContext$Companion();
    }return JsContext$Companion_instance;
  }
  function JsContext_init$lambda(this$JsContext) {
    return function (ev) {
      var bounds = this$JsContext.canvas_0.getBoundingClientRect();
      var x = ev.clientX - bounds.left;
      var y = ev.clientY - bounds.top;
      this$JsContext.inputMgr.handleMouseMove_dleff0$(x, y);
      return Unit;
    };
  }
  function JsContext_init$lambda_0(this$JsContext) {
    return function (ev) {
      this$JsContext.inputMgr.handleMouseButtonStates_za3lpa$(ev.buttons);
      return Unit;
    };
  }
  function JsContext_init$lambda_1(this$JsContext) {
    return function (ev) {
      this$JsContext.inputMgr.handleMouseButtonStates_za3lpa$(ev.buttons);
      return Unit;
    };
  }
  function JsContext_init$lambda_2(this$JsContext) {
    return function (it) {
      this$JsContext.inputMgr.handleMouseExit();
      return Unit;
    };
  }
  function JsContext_init$lambda_3(this$JsContext) {
    return function (ev) {
      var ticks = -ev.deltaY / 3.0;
      if (ev.deltaMode === 0) {
        ticks /= 30.0;
      }this$JsContext.inputMgr.handleMouseScroll_mx4ult$(ticks);
      ev.preventDefault();
      return Unit;
    };
  }
  function JsContext_init$lambda_4(this$JsContext) {
    return function (ev) {
      var tmp$, tmp$_0;
      ev.preventDefault();
      var changedTouches = (Kotlin.isType(tmp$ = ev, TouchEvent) ? tmp$ : throwCCE()).changedTouches;
      tmp$_0 = changedTouches.length;
      for (var i = 0; i < tmp$_0; i++) {
        var touch = changedTouches.item(i);
        this$JsContext.inputMgr.handleTouchStart_nhq4am$(touch.identifier, get_elementX(touch), get_elementY(touch));
      }
      return Unit;
    };
  }
  function JsContext_init$lambda_5(this$JsContext) {
    return function (ev) {
      var tmp$, tmp$_0;
      ev.preventDefault();
      var changedTouches = (Kotlin.isType(tmp$ = ev, TouchEvent) ? tmp$ : throwCCE()).changedTouches;
      tmp$_0 = changedTouches.length;
      for (var i = 0; i < tmp$_0; i++) {
        var touch = changedTouches.item(i);
        this$JsContext.inputMgr.handleTouchEnd_za3lpa$(touch.identifier);
      }
      return Unit;
    };
  }
  function JsContext_init$lambda_6(this$JsContext) {
    return function (ev) {
      var tmp$, tmp$_0;
      ev.preventDefault();
      var changedTouches = (Kotlin.isType(tmp$ = ev, TouchEvent) ? tmp$ : throwCCE()).changedTouches;
      tmp$_0 = changedTouches.length;
      for (var i = 0; i < tmp$_0; i++) {
        var touch = changedTouches.item(i);
        this$JsContext.inputMgr.handleTouchCancel_za3lpa$(touch.identifier);
      }
      return Unit;
    };
  }
  function JsContext_init$lambda_7(this$JsContext) {
    return function (ev) {
      var tmp$, tmp$_0;
      ev.preventDefault();
      var changedTouches = (Kotlin.isType(tmp$ = ev, TouchEvent) ? tmp$ : throwCCE()).changedTouches;
      tmp$_0 = changedTouches.length;
      for (var i = 0; i < tmp$_0; i++) {
        var touch = changedTouches.item(i);
        this$JsContext.inputMgr.handleTouchMove_nhq4am$(touch.identifier, get_elementX(touch), get_elementY(touch));
      }
      return Unit;
    };
  }
  function JsContext_init$lambda_8(this$JsContext) {
    return function (ev) {
      this$JsContext.handleKeyDown_0(ev);
      return Unit;
    };
  }
  function JsContext_init$lambda_9(this$JsContext) {
    return function (ev) {
      this$JsContext.handleKeyUp_0(ev);
      return Unit;
    };
  }
  JsContext.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'JsContext',
    interfaces: [KoolContext]
  };
  function GlCapabilities() {
    this.maxTexUnits_pg826n$_0 = 16;
    this.hasFloatTextures_jm9wjj$_0 = false;
    this.maxAnisotropy_q24ucr$_0 = 1;
    this.glTextureMaxAnisotropyExt_a0zvh2$_0 = 0;
  }
  Object.defineProperty(GlCapabilities.prototype, 'maxTexUnits', {
    get: function () {
      return this.maxTexUnits_pg826n$_0;
    },
    set: function (maxTexUnits) {
      this.maxTexUnits_pg826n$_0 = maxTexUnits;
    }
  });
  Object.defineProperty(GlCapabilities.prototype, 'hasFloatTextures', {
    get: function () {
      return this.hasFloatTextures_jm9wjj$_0;
    },
    set: function (hasFloatTextures) {
      this.hasFloatTextures_jm9wjj$_0 = hasFloatTextures;
    }
  });
  Object.defineProperty(GlCapabilities.prototype, 'maxAnisotropy', {
    get: function () {
      return this.maxAnisotropy_q24ucr$_0;
    },
    set: function (maxAnisotropy) {
      this.maxAnisotropy_q24ucr$_0 = maxAnisotropy;
    }
  });
  Object.defineProperty(GlCapabilities.prototype, 'glTextureMaxAnisotropyExt', {
    get: function () {
      return this.glTextureMaxAnisotropyExt_a0zvh2$_0;
    },
    set: function (glTextureMaxAnisotropyExt) {
      this.glTextureMaxAnisotropyExt_a0zvh2$_0 = glTextureMaxAnisotropyExt;
    }
  });
  GlCapabilities.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GlCapabilities',
    interfaces: []
  };
  function get_elementX($receiver) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    return $receiver.clientX - ((tmp$_2 = (tmp$_1 = (tmp$_0 = Kotlin.isType(tmp$ = $receiver.target, HTMLCanvasElement) ? tmp$ : null) != null ? tmp$_0.clientLeft : null) != null ? tmp$_1 : null) != null ? tmp$_2 : 0.0);
  }
  function get_elementY($receiver) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    return $receiver.clientY - ((tmp$_2 = (tmp$_1 = (tmp$_0 = Kotlin.isType(tmp$ = $receiver.target, HTMLCanvasElement) ? tmp$ : null) != null ? tmp$_0.clientTop : null) != null ? tmp$_1 : null) != null ? tmp$_2 : 0.0);
  }
  function get_glInternalFormat($receiver) {
    switch ($receiver.name) {
      case 'R':
        return WebGL2RenderingContext.R8;
      case 'RG':
        return WebGL2RenderingContext.RG8;
      case 'RGB':
        return WebGL2RenderingContext.RGB8;
      case 'RGBA':
        return WebGL2RenderingContext.RGBA8;
      case 'R_F16':
        return WebGL2RenderingContext.R16F;
      case 'RG_F16':
        return WebGL2RenderingContext.RG16F;
      case 'RGB_F16':
        return WebGL2RenderingContext.RGB16F;
      case 'RGBA_F16':
        return WebGL2RenderingContext.RGBA16F;
      default:return Kotlin.noWhenBranchMatched();
    }
  }
  function get_glType($receiver) {
    switch ($receiver.name) {
      case 'R':
        return WebGLRenderingContext.UNSIGNED_BYTE;
      case 'RG':
        return WebGLRenderingContext.UNSIGNED_BYTE;
      case 'RGB':
        return WebGLRenderingContext.UNSIGNED_BYTE;
      case 'RGBA':
        return WebGLRenderingContext.UNSIGNED_BYTE;
      case 'R_F16':
        return WebGLRenderingContext.FLOAT;
      case 'RG_F16':
        return WebGLRenderingContext.FLOAT;
      case 'RGB_F16':
        return WebGLRenderingContext.FLOAT;
      case 'RGBA_F16':
        return WebGLRenderingContext.FLOAT;
      default:return Kotlin.noWhenBranchMatched();
    }
  }
  function get_glFormat($receiver) {
    switch ($receiver.name) {
      case 'R':
        return WebGL2RenderingContext.RED;
      case 'RG':
        return WebGL2RenderingContext.RG;
      case 'RGB':
        return WebGLRenderingContext.RGB;
      case 'RGBA':
        return WebGLRenderingContext.RGBA;
      case 'R_F16':
        return WebGL2RenderingContext.RED;
      case 'RG_F16':
        return WebGL2RenderingContext.RG;
      case 'RGB_F16':
        return WebGLRenderingContext.RGB;
      case 'RGBA_F16':
        return WebGLRenderingContext.RGBA;
      default:return Kotlin.noWhenBranchMatched();
    }
  }
  function get_pxSize($receiver) {
    switch ($receiver.name) {
      case 'R':
        return 1;
      case 'RG':
        return 2;
      case 'RGB':
        return 3;
      case 'RGBA':
        return 4;
      case 'R_F16':
        return 2;
      case 'RG_F16':
        return 4;
      case 'RGB_F16':
        return 6;
      case 'RGBA_F16':
        return 8;
      default:return Kotlin.noWhenBranchMatched();
    }
  }
  function BufferResource(target, ctx) {
    BufferResource$Companion_getInstance();
    this.target = target;
    var tmp$;
    this.bufferId = (tmp$ = BufferResource$Companion_getInstance().nextBufferId_0, BufferResource$Companion_getInstance().nextBufferId_0 = tmp$.inc(), tmp$);
    this.buffer = ctx.gl_8be2vx$.createBuffer();
  }
  BufferResource.prototype.delete_44a5h0$ = function (ctx) {
    ctx.engineStats.bufferDeleted_s8cxhz$(this.bufferId);
    ctx.gl_8be2vx$.deleteBuffer(this.buffer);
  };
  BufferResource.prototype.bind_44a5h0$ = function (ctx) {
    ctx.gl_8be2vx$.bindBuffer(this.target, this.buffer);
  };
  BufferResource.prototype.setData_phhdsy$ = function (data, usage, ctx) {
    var tmp$;
    var limit = data.limit;
    var pos = data.position;
    data.flip();
    this.bind_44a5h0$(ctx);
    ctx.engineStats.bufferDeleted_s8cxhz$(this.bufferId);
    ctx.gl_8be2vx$.bufferData(this.target, (Kotlin.isType(tmp$ = data, Float32BufferImpl) ? tmp$ : throwCCE()).buffer, usage);
    ctx.engineStats.bufferAllocated_yhmem3$(this.bufferId, data.capacity * 4 | 0);
    data.limit = limit;
    data.position = pos;
  };
  BufferResource.prototype.setData_1p7ty3$ = function (data, usage, ctx) {
    var tmp$;
    var limit = data.limit;
    var pos = data.position;
    data.flip();
    this.bind_44a5h0$(ctx);
    ctx.engineStats.bufferDeleted_s8cxhz$(this.bufferId);
    ctx.gl_8be2vx$.bufferData(this.target, (Kotlin.isType(tmp$ = data, Uint8BufferImpl) ? tmp$ : throwCCE()).buffer, usage);
    ctx.engineStats.bufferAllocated_yhmem3$(this.bufferId, data.capacity);
    data.limit = limit;
    data.position = pos;
  };
  BufferResource.prototype.setData_8qu3as$ = function (data, usage, ctx) {
    var tmp$;
    var limit = data.limit;
    var pos = data.position;
    data.flip();
    this.bind_44a5h0$(ctx);
    ctx.engineStats.bufferDeleted_s8cxhz$(this.bufferId);
    ctx.gl_8be2vx$.bufferData(this.target, (Kotlin.isType(tmp$ = data, Uint16BufferImpl) ? tmp$ : throwCCE()).buffer, usage);
    ctx.engineStats.bufferAllocated_yhmem3$(this.bufferId, data.capacity * 2 | 0);
    data.limit = limit;
    data.position = pos;
  };
  BufferResource.prototype.setData_ysni9y$ = function (data, usage, ctx) {
    var tmp$;
    var limit = data.limit;
    var pos = data.position;
    data.flip();
    this.bind_44a5h0$(ctx);
    ctx.engineStats.bufferDeleted_s8cxhz$(this.bufferId);
    ctx.gl_8be2vx$.bufferData(this.target, (Kotlin.isType(tmp$ = data, Uint32BufferImpl) ? tmp$ : throwCCE()).buffer, usage);
    ctx.engineStats.bufferAllocated_yhmem3$(this.bufferId, data.capacity * 4 | 0);
    data.limit = limit;
    data.position = pos;
  };
  BufferResource.prototype.unbind_44a5h0$ = function (ctx) {
    ctx.gl_8be2vx$.bindBuffer(this.target, null);
  };
  function BufferResource$Companion() {
    BufferResource$Companion_instance = this;
    this.nextBufferId_0 = L1;
  }
  BufferResource$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var BufferResource$Companion_instance = null;
  function BufferResource$Companion_getInstance() {
    if (BufferResource$Companion_instance === null) {
      new BufferResource$Companion();
    }return BufferResource$Companion_instance;
  }
  BufferResource.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BufferResource',
    interfaces: []
  };
  function CompiledShader(prog, pipeline, ctx) {
    this.prog = prog;
    this.ctx = ctx;
    this.pipelineId_0 = pipeline.pipelineHash.data;
    this.attributes_0 = LinkedHashMap_init();
    this.instanceAttributes_0 = LinkedHashMap_init();
    this.uniformLocations_0 = LinkedHashMap_init();
    this.instances_0 = LinkedHashMap_init();
    var tmp$;
    tmp$ = pipeline.vertexLayout.bindings.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0;
      tmp$_0 = element.vertexAttributes.iterator();
      while (tmp$_0.hasNext()) {
        var element_0 = tmp$_0.next();
        switch (element.inputRate.name) {
          case 'VERTEX':
            var $receiver = this.attributes_0;
            var key = element_0.attribute.name;
            $receiver.put_xwzc9p$(key, element_0);
            break;
          case 'INSTANCE':
            var $receiver_0 = this.instanceAttributes_0;
            var key_0 = element_0.attribute.name;
            $receiver_0.put_xwzc9p$(key_0, element_0);
            break;
        }
      }
    }
    var tmp$_1;
    tmp$_1 = pipeline.descriptorSetLayouts.iterator();
    while (tmp$_1.hasNext()) {
      var element_1 = tmp$_1.next();
      var tmp$_2;
      tmp$_2 = element_1.descriptors.iterator();
      while (tmp$_2.hasNext()) {
        var element_2 = tmp$_2.next();
        if (Kotlin.isType(element_2, UniformBuffer)) {
          var tmp$_3;
          tmp$_3 = element_2.uniforms.iterator();
          while (tmp$_3.hasNext()) {
            var element_3 = tmp$_3.next();
            var $receiver_1 = this.uniformLocations_0;
            var key_1 = element_3.name;
            var value = listOf_0(this.ctx.gl_8be2vx$.getUniformLocation(this.prog, element_3.name));
            $receiver_1.put_xwzc9p$(key_1, value);
          }
        } else if (Kotlin.isType(element_2, TextureSampler)) {
          var $receiver_2 = this.uniformLocations_0;
          var key_2 = element_2.name;
          var value_0 = this.getUniformLocations_0(element_2.name, element_2.arraySize);
          $receiver_2.put_xwzc9p$(key_2, value_0);
        } else if (Kotlin.isType(element_2, CubeMapSampler)) {
          var $receiver_3 = this.uniformLocations_0;
          var key_3 = element_2.name;
          var value_1 = this.getUniformLocations_0(element_2.name, element_2.arraySize);
          $receiver_3.put_xwzc9p$(key_3, value_1);
        }}
    }
    var tmp$_4;
    tmp$_4 = pipeline.pushConstantRanges.iterator();
    while (tmp$_4.hasNext()) {
      var element_4 = tmp$_4.next();
      var tmp$_5;
      tmp$_5 = element_4.pushConstants.iterator();
      while (tmp$_5.hasNext()) {
        var element_5 = tmp$_5.next();
        var $receiver_4 = this.uniformLocations_0;
        var key_4 = element_5.name;
        var value_2 = listOf_0(this.ctx.gl_8be2vx$.getUniformLocation(this.prog, element_5.name));
        $receiver_4.put_xwzc9p$(key_4, value_2);
      }
    }
  }
  CompiledShader.prototype.getUniformLocations_0 = function (name, arraySize) {
    var locations = ArrayList_init_0();
    if (arraySize > 1) {
      for (var i = 0; i < arraySize; i++) {
        var element = this.ctx.gl_8be2vx$.getUniformLocation(this.prog, name + '[' + i + ']');
        locations.add_11rb$(element);
      }
    } else {
      var element_0 = this.ctx.gl_8be2vx$.getUniformLocation(this.prog, name);
      locations.add_11rb$(element_0);
    }
    return locations;
  };
  CompiledShader.prototype.use = function () {
    this.ctx.gl_8be2vx$.useProgram(this.prog);
    var tmp$;
    tmp$ = this.attributes_0.values.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0;
      tmp$_0 = element.attribute.props.nSlots;
      for (var i = 0; i < tmp$_0; i++) {
        var location = element.location + i | 0;
        this.ctx.gl_8be2vx$.enableVertexAttribArray(location);
        this.ctx.gl_8be2vx$.vertexAttribDivisor(location, 0);
      }
    }
    var tmp$_1;
    tmp$_1 = this.instanceAttributes_0.values.iterator();
    while (tmp$_1.hasNext()) {
      var element_0 = tmp$_1.next();
      var tmp$_2;
      tmp$_2 = element_0.attribute.props.nSlots;
      for (var i_0 = 0; i_0 < tmp$_2; i_0++) {
        var location_0 = element_0.location + i_0 | 0;
        this.ctx.gl_8be2vx$.enableVertexAttribArray(location_0);
        this.ctx.gl_8be2vx$.vertexAttribDivisor(location_0, 1);
      }
    }
  };
  CompiledShader.prototype.unUse = function () {
    var tmp$;
    tmp$ = this.attributes_0.values.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0;
      tmp$_0 = element.attribute.props.nSlots;
      for (var i = 0; i < tmp$_0; i++) {
        this.ctx.gl_8be2vx$.disableVertexAttribArray(element.location + i | 0);
      }
    }
    var tmp$_1;
    tmp$_1 = this.instanceAttributes_0.values.iterator();
    while (tmp$_1.hasNext()) {
      var element_0 = tmp$_1.next();
      var tmp$_2;
      tmp$_2 = element_0.attribute.props.nSlots;
      for (var i_0 = 0; i_0 < tmp$_2; i_0++) {
        this.ctx.gl_8be2vx$.disableVertexAttribArray(element_0.location + i_0 | 0);
      }
    }
  };
  CompiledShader.prototype.bindInstance_m0ahst$ = function (cmd) {
    var tmp$;
    var pipelineInst = ensureNotNull(cmd.pipeline);
    var $receiver = this.instances_0;
    var key = pipelineInst.pipelineInstanceId;
    var tmp$_0;
    var value = $receiver.get_11rb$(key);
    if (value == null) {
      var answer = new CompiledShader$ShaderInstance(this, cmd.mesh, pipelineInst);
      $receiver.put_xwzc9p$(key, answer);
      tmp$_0 = answer;
    } else {
      tmp$_0 = value;
    }
    var inst = tmp$_0;
    if (inst.bindInstance_m0ahst$(cmd)) {
      tmp$ = inst;
    } else {
      tmp$ = null;
    }
    return tmp$;
  };
  CompiledShader.prototype.destroyInstance_lfrgcb$ = function (pipeline) {
    var tmp$;
    if ((tmp$ = this.instances_0.remove_11rb$(pipeline.pipelineInstanceId)) != null) {
      tmp$.destroyInstance();
      this.ctx.engineStats.pipelineInstanceDestroyed_s8cxhz$(this.pipelineId_0);
    }};
  CompiledShader.prototype.isEmpty = function () {
    return this.instances_0.isEmpty();
  };
  CompiledShader.prototype.destroy = function () {
    this.ctx.engineStats.pipelineDestroyed_s8cxhz$(this.pipelineId_0);
    this.ctx.gl_8be2vx$.deleteProgram(this.prog);
  };
  function CompiledShader$ShaderInstance($outer, mesh, pipeline) {
    this.$outer = $outer;
    this.mesh = mesh;
    this.pipeline = pipeline;
    this.pushConstants_0 = ArrayList_init_0();
    this.ubos_0 = ArrayList_init_0();
    this.textures_0 = ArrayList_init_0();
    this.cubeMaps_0 = ArrayList_init_0();
    this.mappings_0 = ArrayList_init_0();
    this.attributeBinders_0 = ArrayList_init_0();
    this.instanceAttribBinders_0 = ArrayList_init_0();
    this.dataBufferF_0 = null;
    this.dataBufferI_0 = null;
    this.indexBuffer_0 = null;
    this.instanceBuffer_0 = null;
    this.buffersSet_0 = false;
    this.nextTexUnit_0 = WebGLRenderingContext.TEXTURE0;
    this.numIndices = 0;
    this.indexType = 0;
    this.primitiveType = 0;
    var tmp$;
    tmp$ = this.pipeline.descriptorSetLayouts.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0;
      tmp$_0 = element.descriptors.iterator();
      while (tmp$_0.hasNext()) {
        var element_0 = tmp$_0.next();
        if (Kotlin.isType(element_0, UniformBuffer))
          this.mapUbo_0(element_0);
        else if (Kotlin.isType(element_0, TextureSampler))
          this.mapTexture_0(element_0);
        else if (Kotlin.isType(element_0, CubeMapSampler))
          this.mapCubeMap_0(element_0);
        else {
          throw new NotImplementedError_init('An operation is not implemented: ' + element_0.toString());
        }
      }
    }
    var tmp$_1;
    tmp$_1 = this.pipeline.pushConstantRanges.iterator();
    while (tmp$_1.hasNext()) {
      var element_1 = tmp$_1.next();
      this.mapPushConstants_0(element_1);
    }
    this.$outer.ctx.engineStats.pipelineInstanceCreated_s8cxhz$(this.$outer.pipelineId_0);
  }
  CompiledShader$ShaderInstance.prototype.mapPushConstants_0 = function (pc) {
    this.pushConstants_0.add_11rb$(pc);
    var $receiver = pc.pushConstants;
    this.$outer;
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var this$CompiledShader = this.$outer;
      var tmp$_0;
      tmp$_0 = this.mappings_0;
      var tmp$_1;
      var element_0 = MappedUniform$Companion_getInstance().mappedUniform_lwhlub$(element, (tmp$_1 = this$CompiledShader.uniformLocations_0.get_11rb$(element.name)) != null ? tmp$_1.get_za3lpa$(0) : null);
      tmp$_0.add_11rb$(element_0);
    }
  };
  CompiledShader$ShaderInstance.prototype.mapUbo_0 = function (ubo) {
    this.ubos_0.add_11rb$(ubo);
    var $receiver = ubo.uniforms;
    this.$outer;
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var this$CompiledShader = this.$outer;
      var tmp$_0;
      tmp$_0 = this.mappings_0;
      var tmp$_1;
      var element_0 = MappedUniform$Companion_getInstance().mappedUniform_lwhlub$(element, (tmp$_1 = this$CompiledShader.uniformLocations_0.get_11rb$(element.name)) != null ? tmp$_1.get_za3lpa$(0) : null);
      tmp$_0.add_11rb$(element_0);
    }
  };
  CompiledShader$ShaderInstance.prototype.mapTexture_0 = function (tex) {
    var tmp$;
    this.textures_0.add_11rb$(tex);
    if ((tmp$ = this.$outer.uniformLocations_0.get_11rb$(tex.name)) != null) {
      var $receiver = this.mappings_0;
      var element = new MappedUniformTex2d(tex, this.nextTexUnit_0, tmp$);
      $receiver.add_11rb$(element);
      this.nextTexUnit_0 = this.nextTexUnit_0 + tmp$.size | 0;
    }};
  CompiledShader$ShaderInstance.prototype.mapCubeMap_0 = function (cubeMap) {
    var tmp$;
    this.cubeMaps_0.add_11rb$(cubeMap);
    if ((tmp$ = this.$outer.uniformLocations_0.get_11rb$(cubeMap.name)) != null) {
      var $receiver = this.mappings_0;
      var element = new MappedUniformCubeMap(cubeMap, this.nextTexUnit_0, tmp$);
      $receiver.add_11rb$(element);
      this.nextTexUnit_0 = this.nextTexUnit_0 + tmp$.size | 0;
    }};
  CompiledShader$ShaderInstance.prototype.bindInstance_m0ahst$ = function (drawCmd) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    tmp$ = this.pushConstants_0;
    for (var i = 0; i !== tmp$.size; ++i) {
      var tmp$_5;
      (tmp$_5 = this.pushConstants_0.get_za3lpa$(i).onUpdate) != null ? tmp$_5(this.pushConstants_0.get_za3lpa$(i), drawCmd) : null;
    }
    tmp$_0 = this.ubos_0;
    for (var i_0 = 0; i_0 !== tmp$_0.size; ++i_0) {
      var tmp$_6;
      (tmp$_6 = this.ubos_0.get_za3lpa$(i_0).onUpdate) != null ? tmp$_6(this.ubos_0.get_za3lpa$(i_0), drawCmd) : null;
    }
    tmp$_1 = this.textures_0;
    for (var i_1 = 0; i_1 !== tmp$_1.size; ++i_1) {
      var tmp$_7;
      (tmp$_7 = this.textures_0.get_za3lpa$(i_1).onUpdate) != null ? tmp$_7(this.textures_0.get_za3lpa$(i_1), drawCmd) : null;
    }
    tmp$_2 = this.cubeMaps_0;
    for (var i_2 = 0; i_2 !== tmp$_2.size; ++i_2) {
      var tmp$_8;
      (tmp$_8 = this.cubeMaps_0.get_za3lpa$(i_2).onUpdate) != null ? tmp$_8(this.cubeMaps_0.get_za3lpa$(i_2), drawCmd) : null;
    }
    var uniformsValid = true;
    tmp$_3 = this.mappings_0;
    for (var i_3 = 0; i_3 !== tmp$_3.size; ++i_3) {
      uniformsValid = (uniformsValid && this.mappings_0.get_za3lpa$(i_3).setUniform_44a5h0$(this.$outer.ctx));
    }
    this.checkBuffers_0();
    if (uniformsValid) {
      (tmp$_4 = this.indexBuffer_0) != null ? (tmp$_4.bind_44a5h0$(this.$outer.ctx), Unit) : null;
      var $receiver = this.attributeBinders_0;
      this.$outer;
      var tmp$_9;
      tmp$_9 = $receiver.iterator();
      while (tmp$_9.hasNext()) {
        var element = tmp$_9.next();
        element.vbo.bindAttribute_9sni52$(element.loc, this.$outer.ctx);
      }
      var $receiver_0 = this.instanceAttribBinders_0;
      this.$outer;
      var tmp$_10;
      tmp$_10 = $receiver_0.iterator();
      while (tmp$_10.hasNext()) {
        var element_0 = tmp$_10.next();
        element_0.vbo.bindAttribute_9sni52$(element_0.loc, this.$outer.ctx);
      }
    }return uniformsValid;
  };
  CompiledShader$ShaderInstance.prototype.destroyInstance = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    (tmp$ = this.dataBufferF_0) != null ? (tmp$.delete_44a5h0$(this.$outer.ctx), Unit) : null;
    (tmp$_0 = this.dataBufferI_0) != null ? (tmp$_0.delete_44a5h0$(this.$outer.ctx), Unit) : null;
    (tmp$_1 = this.indexBuffer_0) != null ? (tmp$_1.delete_44a5h0$(this.$outer.ctx), Unit) : null;
    (tmp$_2 = this.instanceBuffer_0) != null ? (tmp$_2.delete_44a5h0$(this.$outer.ctx), Unit) : null;
    this.dataBufferF_0 = null;
    this.dataBufferI_0 = null;
    this.indexBuffer_0 = null;
    this.instanceBuffer_0 = null;
    this.pushConstants_0.clear();
    this.ubos_0.clear();
    this.textures_0.clear();
    this.cubeMaps_0.clear();
    this.mappings_0.clear();
    this.attributeBinders_0.clear();
    this.instanceAttribBinders_0.clear();
  };
  function CompiledShader$ShaderInstance$checkBuffers$lambda(closure$instanceList) {
    return function () {
      closure$instanceList.hasChanged = false;
      return Unit;
    };
  }
  function CompiledShader$ShaderInstance$checkBuffers$lambda_0(closure$md) {
    return function () {
      closure$md.hasChanged = false;
      return Unit;
    };
  }
  CompiledShader$ShaderInstance.prototype.checkBuffers_0 = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    var md = this.mesh.geometry;
    if (this.indexBuffer_0 == null) {
      this.indexBuffer_0 = new BufferResource(WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, this.$outer.ctx);
    }var hasIntData = false;
    if (this.dataBufferF_0 == null) {
      this.dataBufferF_0 = new BufferResource(WebGLRenderingContext.ARRAY_BUFFER, this.$outer.ctx);
      tmp$ = md.vertexAttributes.iterator();
      while (tmp$.hasNext()) {
        var vertexAttrib = tmp$.next();
        if (vertexAttrib.type.isInt) {
          hasIntData = true;
        } else {
          var stride = md.strideBytesF;
          var offset = ensureNotNull(md.attributeOffsets.get_11rb$(vertexAttrib)) / 4 | 0;
          addAll(this.instanceAttribBinders_0, this.$outer.makeAttribBinders_0(this.$outer.attributes_0, vertexAttrib, ensureNotNull(this.dataBufferF_0), stride, offset));
        }
      }
    }if (hasIntData && this.dataBufferI_0 == null) {
      this.dataBufferI_0 = new BufferResource(WebGLRenderingContext.ARRAY_BUFFER, this.$outer.ctx);
      tmp$_0 = md.vertexAttributes.iterator();
      while (tmp$_0.hasNext()) {
        var vertexAttrib_0 = tmp$_0.next();
        if (vertexAttrib_0.type.isInt) {
          if ((tmp$_1 = this.$outer.attributes_0.get_11rb$(vertexAttrib_0.name)) != null) {
            var vbo = new VboBinder(ensureNotNull(this.dataBufferI_0), vertexAttrib_0.type.size / 4 | 0, md.strideBytesI, ensureNotNull(md.attributeOffsets.get_11rb$(vertexAttrib_0)) / 4 | 0, WebGLRenderingContext.INT);
            var $receiver = this.attributeBinders_0;
            var element = new CompiledShader$AttributeOnLocation(vbo, tmp$_1.location);
            $receiver.add_11rb$(element);
          }}}
    }var instanceList = this.mesh.instances;
    if (instanceList != null) {
      var instBuf = this.instanceBuffer_0;
      if (instBuf == null) {
        instBuf = new BufferResource(WebGLRenderingContext.ARRAY_BUFFER, this.$outer.ctx);
        this.instanceBuffer_0 = instBuf;
        tmp$_2 = instanceList.instanceAttributes.iterator();
        while (tmp$_2.hasNext()) {
          var instanceAttrib = tmp$_2.next();
          var stride_0 = instanceList.strideBytesF;
          var offset_0 = ensureNotNull(instanceList.attributeOffsets.get_11rb$(instanceAttrib)) / 4 | 0;
          addAll(this.instanceAttribBinders_0, this.$outer.makeAttribBinders_0(this.$outer.instanceAttributes_0, instanceAttrib, ensureNotNull(this.instanceBuffer_0), stride_0, offset_0));
        }
      }if (instanceList.hasChanged) {
        instBuf.setData_phhdsy$(instanceList.dataF, this.$outer.glUsage_0(instanceList.usage), this.$outer.ctx);
        this.$outer.ctx.afterRenderActions_8be2vx$.add_11rb$(CompiledShader$ShaderInstance$checkBuffers$lambda(instanceList));
      }}if (!md.isBatchUpdate && (md.hasChanged || !this.buffersSet_0)) {
      var usage = this.$outer.glUsage_0(md.usage);
      this.indexType = WebGLRenderingContext.UNSIGNED_INT;
      (tmp$_3 = this.indexBuffer_0) != null ? (tmp$_3.setData_ysni9y$(md.indices, usage, this.$outer.ctx), Unit) : null;
      this.primitiveType = this.$outer.glElemType_0(this.pipeline.vertexLayout.primitiveType);
      this.numIndices = md.numIndices;
      (tmp$_4 = this.dataBufferF_0) != null ? (tmp$_4.setData_phhdsy$(md.dataF, usage, this.$outer.ctx), Unit) : null;
      (tmp$_5 = this.dataBufferI_0) != null ? (tmp$_5.setData_ysni9y$(md.dataI, usage, this.$outer.ctx), Unit) : null;
      this.$outer.ctx.afterRenderActions_8be2vx$.add_11rb$(CompiledShader$ShaderInstance$checkBuffers$lambda_0(md));
      this.buffersSet_0 = true;
    }};
  CompiledShader$ShaderInstance.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShaderInstance',
    interfaces: []
  };
  CompiledShader.prototype.makeAttribBinders_0 = function ($receiver, attr, buffer, stride, offset) {
    var tmp$;
    var binders = ArrayList_init_0();
    if ((tmp$ = $receiver.get_11rb$(attr.name)) != null) {
      var tmp$_0;
      tmp$_0 = attr.props.nSlots;
      for (var i = 0; i < tmp$_0; i++) {
        var off = offset + Kotlin.imul(attr.props.attribSize, i) | 0;
        var vbo = new VboBinder(buffer, attr.props.attribSize, stride, off, WebGLRenderingContext.FLOAT);
        var element = new CompiledShader$AttributeOnLocation(vbo, tmp$.location + i | 0);
        binders.add_11rb$(element);
      }
    }return binders;
  };
  CompiledShader.prototype.glElemType_0 = function ($receiver) {
    var tmp$;
    switch ($receiver.name) {
      case 'LINES':
        tmp$ = WebGLRenderingContext.LINES;
        break;
      case 'POINTS':
        tmp$ = WebGLRenderingContext.POINTS;
        break;
      case 'TRIANGLES':
        tmp$ = WebGLRenderingContext.TRIANGLES;
        break;
      default:tmp$ = Kotlin.noWhenBranchMatched();
        break;
    }
    return tmp$;
  };
  CompiledShader.prototype.glUsage_0 = function ($receiver) {
    var tmp$;
    switch ($receiver.name) {
      case 'DYNAMIC':
        tmp$ = WebGLRenderingContext.DYNAMIC_DRAW;
        break;
      case 'STATIC':
        tmp$ = WebGLRenderingContext.STATIC_DRAW;
        break;
      default:tmp$ = Kotlin.noWhenBranchMatched();
        break;
    }
    return tmp$;
  };
  function CompiledShader$AttributeOnLocation(vbo, loc) {
    this.vbo = vbo;
    this.loc = loc;
  }
  CompiledShader$AttributeOnLocation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AttributeOnLocation',
    interfaces: []
  };
  CompiledShader$AttributeOnLocation.prototype.component1 = function () {
    return this.vbo;
  };
  CompiledShader$AttributeOnLocation.prototype.component2 = function () {
    return this.loc;
  };
  CompiledShader$AttributeOnLocation.prototype.copy_oubs2w$ = function (vbo, loc) {
    return new CompiledShader$AttributeOnLocation(vbo === void 0 ? this.vbo : vbo, loc === void 0 ? this.loc : loc);
  };
  CompiledShader$AttributeOnLocation.prototype.toString = function () {
    return 'AttributeOnLocation(vbo=' + Kotlin.toString(this.vbo) + (', loc=' + Kotlin.toString(this.loc)) + ')';
  };
  CompiledShader$AttributeOnLocation.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.vbo) | 0;
    result = result * 31 + Kotlin.hashCode(this.loc) | 0;
    return result;
  };
  CompiledShader$AttributeOnLocation.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.vbo, other.vbo) && Kotlin.equals(this.loc, other.loc)))));
  };
  CompiledShader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CompiledShader',
    interfaces: []
  };
  function LoadedTextureWebGl(ctx, texture, estimatedSize) {
    LoadedTextureWebGl$Companion_getInstance();
    this.ctx = ctx;
    this.texture = texture;
    var tmp$;
    this.texId = (tmp$ = LoadedTextureWebGl$Companion_getInstance().nextTexId_0, LoadedTextureWebGl$Companion_getInstance().nextTexId_0 = tmp$.inc(), tmp$);
    this.isDestroyed_hoph69$_0 = false;
    this.ctx.engineStats.textureAllocated_yhmem3$(this.texId, estimatedSize);
  }
  Object.defineProperty(LoadedTextureWebGl.prototype, 'isDestroyed', {
    get: function () {
      return this.isDestroyed_hoph69$_0;
    },
    set: function (isDestroyed) {
      this.isDestroyed_hoph69$_0 = isDestroyed;
    }
  });
  LoadedTextureWebGl.prototype.dispose = function () {
    this.isDestroyed = true;
    this.ctx.gl_8be2vx$.deleteTexture(this.texture);
    this.ctx.engineStats.textureDeleted_s8cxhz$(this.texId);
  };
  function LoadedTextureWebGl$Companion() {
    LoadedTextureWebGl$Companion_instance = this;
    this.nextTexId_0 = L1;
  }
  LoadedTextureWebGl$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var LoadedTextureWebGl$Companion_instance = null;
  function LoadedTextureWebGl$Companion_getInstance() {
    if (LoadedTextureWebGl$Companion_instance === null) {
      new LoadedTextureWebGl$Companion();
    }return LoadedTextureWebGl$Companion_instance;
  }
  LoadedTextureWebGl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LoadedTextureWebGl',
    interfaces: [LoadedTexture]
  };
  function MappedUniform() {
    MappedUniform$Companion_getInstance();
  }
  function MappedUniform$Companion() {
    MappedUniform$Companion_instance = this;
  }
  MappedUniform$Companion.prototype.mappedUniform_lwhlub$ = function (uniform, location) {
    var tmp$;
    if (Kotlin.isType(uniform, Uniform1f))
      tmp$ = new MappedUniform1f(uniform, location);
    else if (Kotlin.isType(uniform, Uniform2f))
      tmp$ = new MappedUniform2f(uniform, location);
    else if (Kotlin.isType(uniform, Uniform3f))
      tmp$ = new MappedUniform3f(uniform, location);
    else if (Kotlin.isType(uniform, Uniform4f))
      tmp$ = new MappedUniform4f(uniform, location);
    else if (Kotlin.isType(uniform, Uniform1fv))
      tmp$ = new MappedUniform1fv(uniform, location);
    else if (Kotlin.isType(uniform, Uniform2fv))
      tmp$ = new MappedUniform2fv(uniform, location);
    else if (Kotlin.isType(uniform, Uniform3fv))
      tmp$ = new MappedUniform3fv(uniform, location);
    else if (Kotlin.isType(uniform, Uniform4fv))
      tmp$ = new MappedUniform4fv(uniform, location);
    else if (Kotlin.isType(uniform, UniformColor))
      tmp$ = new MappedUniformColor(uniform, location);
    else if (Kotlin.isType(uniform, UniformMat3f))
      tmp$ = new MappedUniformMat3f(uniform, location);
    else if (Kotlin.isType(uniform, UniformMat4f))
      tmp$ = new MappedUniformMat4f(uniform, location);
    else if (Kotlin.isType(uniform, UniformMat4fv))
      tmp$ = new MappedUniformMat4fv(uniform, location);
    else if (Kotlin.isType(uniform, Uniform1i))
      tmp$ = new MappedUniform1i(uniform, location);
    else {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'Uniform type mapping not implemented');
    }
    return tmp$;
  };
  MappedUniform$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MappedUniform$Companion_instance = null;
  function MappedUniform$Companion_getInstance() {
    if (MappedUniform$Companion_instance === null) {
      new MappedUniform$Companion();
    }return MappedUniform$Companion_instance;
  }
  MappedUniform.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'MappedUniform',
    interfaces: []
  };
  function MappedUniform1f(uniform, location) {
    this.uniform = uniform;
    this.location = location;
  }
  MappedUniform1f.prototype.setUniform_44a5h0$ = function (ctx) {
    ctx.gl_8be2vx$.uniform1f(this.location, this.uniform.value);
    return true;
  };
  MappedUniform1f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MappedUniform1f',
    interfaces: [MappedUniform]
  };
  function MappedUniform2f(uniform, location) {
    this.uniform = uniform;
    this.location = location;
  }
  MappedUniform2f.prototype.setUniform_44a5h0$ = function (ctx) {
    ctx.gl_8be2vx$.uniform2f(this.location, this.uniform.value.x, this.uniform.value.y);
    return true;
  };
  MappedUniform2f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MappedUniform2f',
    interfaces: [MappedUniform]
  };
  function MappedUniform3f(uniform, location) {
    this.uniform = uniform;
    this.location = location;
  }
  MappedUniform3f.prototype.setUniform_44a5h0$ = function (ctx) {
    ctx.gl_8be2vx$.uniform3f(this.location, this.uniform.value.x, this.uniform.value.y, this.uniform.value.z);
    return true;
  };
  MappedUniform3f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MappedUniform3f',
    interfaces: [MappedUniform]
  };
  function MappedUniform4f(uniform, location) {
    this.uniform = uniform;
    this.location = location;
  }
  MappedUniform4f.prototype.setUniform_44a5h0$ = function (ctx) {
    ctx.gl_8be2vx$.uniform4f(this.location, this.uniform.value.x, this.uniform.value.y, this.uniform.value.z, this.uniform.value.w);
    return true;
  };
  MappedUniform4f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MappedUniform4f',
    interfaces: [MappedUniform]
  };
  function MappedUniform1fv(uniform, location) {
    this.uniform = uniform;
    this.location = location;
    this.buffer_0 = new Float32Array(this.uniform.length);
  }
  MappedUniform1fv.prototype.setUniform_44a5h0$ = function (ctx) {
    var tmp$;
    tmp$ = this.uniform.length;
    for (var i = 0; i < tmp$; i++) {
      this.buffer_0[i] = this.uniform.value[i];
    }
    ctx.gl_8be2vx$.uniform1fv(this.location, this.buffer_0);
    return true;
  };
  MappedUniform1fv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MappedUniform1fv',
    interfaces: [MappedUniform]
  };
  function MappedUniform2fv(uniform, location) {
    this.uniform = uniform;
    this.location = location;
    this.buffer_0 = new Float32Array(2 * this.uniform.length | 0);
  }
  MappedUniform2fv.prototype.setUniform_44a5h0$ = function (ctx) {
    var tmp$, tmp$_0, tmp$_1;
    var j = 0;
    tmp$ = this.uniform.length;
    for (var i = 0; i < tmp$; i++) {
      this.buffer_0[tmp$_0 = j, j = tmp$_0 + 1 | 0, tmp$_0] = this.uniform.value[i].x;
      this.buffer_0[tmp$_1 = j, j = tmp$_1 + 1 | 0, tmp$_1] = this.uniform.value[i].y;
    }
    ctx.gl_8be2vx$.uniform2fv(this.location, this.buffer_0);
    return true;
  };
  MappedUniform2fv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MappedUniform2fv',
    interfaces: [MappedUniform]
  };
  function MappedUniform3fv(uniform, location) {
    this.uniform = uniform;
    this.location = location;
    this.buffer_0 = new Float32Array(3 * this.uniform.length | 0);
  }
  MappedUniform3fv.prototype.setUniform_44a5h0$ = function (ctx) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var j = 0;
    tmp$ = this.uniform.length;
    for (var i = 0; i < tmp$; i++) {
      this.buffer_0[tmp$_0 = j, j = tmp$_0 + 1 | 0, tmp$_0] = this.uniform.value[i].x;
      this.buffer_0[tmp$_1 = j, j = tmp$_1 + 1 | 0, tmp$_1] = this.uniform.value[i].y;
      this.buffer_0[tmp$_2 = j, j = tmp$_2 + 1 | 0, tmp$_2] = this.uniform.value[i].z;
    }
    ctx.gl_8be2vx$.uniform3fv(this.location, this.buffer_0);
    return true;
  };
  MappedUniform3fv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MappedUniform3fv',
    interfaces: [MappedUniform]
  };
  function MappedUniform4fv(uniform, location) {
    this.uniform = uniform;
    this.location = location;
    this.buffer_0 = new Float32Array(4 * this.uniform.length | 0);
  }
  MappedUniform4fv.prototype.setUniform_44a5h0$ = function (ctx) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var j = 0;
    tmp$ = this.uniform.length;
    for (var i = 0; i < tmp$; i++) {
      this.buffer_0[tmp$_0 = j, j = tmp$_0 + 1 | 0, tmp$_0] = this.uniform.value[i].x;
      this.buffer_0[tmp$_1 = j, j = tmp$_1 + 1 | 0, tmp$_1] = this.uniform.value[i].y;
      this.buffer_0[tmp$_2 = j, j = tmp$_2 + 1 | 0, tmp$_2] = this.uniform.value[i].z;
      this.buffer_0[tmp$_3 = j, j = tmp$_3 + 1 | 0, tmp$_3] = this.uniform.value[i].w;
    }
    ctx.gl_8be2vx$.uniform4fv(this.location, this.buffer_0);
    return true;
  };
  MappedUniform4fv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MappedUniform4fv',
    interfaces: [MappedUniform]
  };
  function MappedUniformColor(uniform, location) {
    this.uniform = uniform;
    this.location = location;
  }
  MappedUniformColor.prototype.setUniform_44a5h0$ = function (ctx) {
    ctx.gl_8be2vx$.uniform4f(this.location, this.uniform.value.x, this.uniform.value.y, this.uniform.value.z, this.uniform.value.w);
    return true;
  };
  MappedUniformColor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MappedUniformColor',
    interfaces: [MappedUniform]
  };
  function MappedUniformMat3f(uniform, location) {
    this.uniform = uniform;
    this.location = location;
    this.buf_0 = new Float32Array(9);
  }
  MappedUniformMat3f.prototype.setUniform_44a5h0$ = function (ctx) {
    for (var i = 0; i <= 8; i++) {
      this.buf_0[i] = this.uniform.value.matrix[i];
    }
    ctx.gl_8be2vx$.uniformMatrix3fv(this.location, false, this.buf_0);
    return true;
  };
  MappedUniformMat3f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MappedUniformMat3f',
    interfaces: [MappedUniform]
  };
  function MappedUniformMat4f(uniform, location) {
    this.uniform = uniform;
    this.location = location;
    this.buf_0 = new Float32Array(16);
  }
  MappedUniformMat4f.prototype.setUniform_44a5h0$ = function (ctx) {
    for (var i = 0; i <= 15; i++) {
      this.buf_0[i] = this.uniform.value.matrix[i];
    }
    ctx.gl_8be2vx$.uniformMatrix4fv(this.location, false, this.buf_0);
    return true;
  };
  MappedUniformMat4f.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MappedUniformMat4f',
    interfaces: [MappedUniform]
  };
  function MappedUniformMat4fv(uniform, location) {
    this.uniform = uniform;
    this.location = location;
    this.buf_0 = new Float32Array(16 * this.uniform.length | 0);
  }
  MappedUniformMat4fv.prototype.setUniform_44a5h0$ = function (ctx) {
    var tmp$, tmp$_0;
    var bufI = 0;
    tmp$ = this.uniform.length;
    for (var i = 0; i < tmp$; i++) {
      for (var j = 0; j < 16; j++) {
        this.buf_0[tmp$_0 = bufI, bufI = tmp$_0 + 1 | 0, tmp$_0] = this.uniform.value[i].matrix[j];
      }
    }
    ctx.gl_8be2vx$.uniformMatrix4fv(this.location, false, this.buf_0);
    return true;
  };
  MappedUniformMat4fv.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MappedUniformMat4fv',
    interfaces: [MappedUniform]
  };
  function MappedUniform1i(uniform, location) {
    this.uniform = uniform;
    this.location = location;
  }
  MappedUniform1i.prototype.setUniform_44a5h0$ = function (ctx) {
    ctx.gl_8be2vx$.uniform1i(this.location, this.uniform.value);
    return true;
  };
  MappedUniform1i.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MappedUniform1i',
    interfaces: [MappedUniform]
  };
  function MappedUniformTex(texUnit, target) {
    MappedUniformTex$Companion_getInstance();
    this.texUnit = texUnit;
    this.target = target;
  }
  function MappedUniformTex$checkLoadingState$lambda$lambda(this$MappedUniformTex, closure$texture, closure$defTex, closure$ctx) {
    return function (ex) {
      if (ex != null) {
        var $receiver = this$MappedUniformTex;
        var $this = package$util.Log;
        var level = Log$Level.ERROR;
        var tag = Kotlin.getKClassFromExpression($receiver).simpleName;
        if (level.level >= $this.level.level) {
          $this.printer(level, tag, 'Texture loading failed: ' + toString(ex));
        }closure$texture.loadingState = Texture$LoadingState$LOADING_FAILED_getInstance();
      } else {
        closure$texture.loadedTexture = MappedUniformTex$Companion_getInstance().getLoadedTex_0(closure$defTex.getCompleted(), closure$texture.props, closure$ctx);
        closure$texture.loadingState = Texture$LoadingState$LOADED_getInstance();
      }
      return Unit;
    };
  }
  MappedUniformTex.prototype.checkLoadingState_1iftbi$ = function (ctx, texture, arrayIdx) {
    var tmp$, tmp$_0;
    var gl = ctx.gl_8be2vx$;
    if (texture.loadingState === Texture$LoadingState$NOT_LOADED_getInstance()) {
      if ((tmp$ = texture.loader) != null) {
        texture.loadingState = Texture$LoadingState$LOADING_getInstance();
        var defTex = ctx.assetMgr.loadTextureAsync_72pzmk$(tmp$);
        defTex.invokeOnCompletion_f05bi3$(MappedUniformTex$checkLoadingState$lambda$lambda(this, texture, defTex, ctx));
      }}if (texture.loadingState === Texture$LoadingState$LOADED_getInstance()) {
      var tex = Kotlin.isType(tmp$_0 = texture.loadedTexture, LoadedTextureWebGl) ? tmp$_0 : throwCCE();
      gl.activeTexture(this.texUnit + arrayIdx | 0);
      gl.bindTexture(this.target, tex.texture);
      return true;
    }return false;
  };
  function MappedUniformTex$Companion() {
    MappedUniformTex$Companion_instance = this;
    this.loadedTextures_0 = LinkedHashMap_init();
  }
  function MappedUniformTex$Companion$getLoadedTex$lambda(it) {
    return it.isDestroyed;
  }
  MappedUniformTex$Companion.prototype.getLoadedTex_0 = function (texData, props, ctx) {
    removeAll_0(this.loadedTextures_0.values, MappedUniformTex$Companion$getLoadedTex$lambda);
    var $receiver = this.loadedTextures_0;
    var tmp$;
    var value = $receiver.get_11rb$(texData);
    if (value == null) {
      var loaded = TextureLoader_getInstance().loadTexture_hlfduu$(ctx, props, texData);
      var answer = loaded;
      $receiver.put_xwzc9p$(texData, answer);
      tmp$ = answer;
    } else {
      tmp$ = value;
    }
    return tmp$;
  };
  MappedUniformTex$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MappedUniformTex$Companion_instance = null;
  function MappedUniformTex$Companion_getInstance() {
    if (MappedUniformTex$Companion_instance === null) {
      new MappedUniformTex$Companion();
    }return MappedUniformTex$Companion_instance;
  }
  MappedUniformTex.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MappedUniformTex',
    interfaces: [MappedUniform]
  };
  function MappedUniformTex2d(sampler2d, texUnit, locations) {
    MappedUniformTex.call(this, texUnit, WebGLRenderingContext.TEXTURE_2D);
    this.sampler2d_0 = sampler2d;
    this.locations = locations;
  }
  MappedUniformTex2d.prototype.setUniform_44a5h0$ = function (ctx) {
    var tmp$;
    var texUnit = this.texUnit;
    var isValid = true;
    tmp$ = this.sampler2d_0.arraySize;
    for (var i = 0; i < tmp$; i++) {
      var tex = this.sampler2d_0.textures[i];
      if (tex != null && this.checkLoadingState_1iftbi$(ctx, tex, i)) {
        ctx.gl_8be2vx$.uniform1i(this.locations.get_za3lpa$(i), this.texUnit - WebGLRenderingContext.TEXTURE0 + i | 0);
      } else {
        isValid = false;
      }
      texUnit = texUnit + 1 | 0;
    }
    return isValid;
  };
  MappedUniformTex2d.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MappedUniformTex2d',
    interfaces: [MappedUniformTex]
  };
  function MappedUniformCubeMap(samplerCube, texUnit, locations) {
    MappedUniformTex.call(this, texUnit, WebGLRenderingContext.TEXTURE_CUBE_MAP);
    this.samplerCube_0 = samplerCube;
    this.locations = locations;
  }
  MappedUniformCubeMap.prototype.setUniform_44a5h0$ = function (ctx) {
    var tmp$;
    var texUnit = this.texUnit;
    var isValid = true;
    tmp$ = this.samplerCube_0.arraySize;
    for (var i = 0; i < tmp$; i++) {
      var tex = this.samplerCube_0.textures[i];
      if (tex != null && this.checkLoadingState_1iftbi$(ctx, tex, i)) {
        ctx.gl_8be2vx$.uniform1i(this.locations.get_za3lpa$(i), this.texUnit - WebGLRenderingContext.TEXTURE0 + i | 0);
      } else {
        isValid = false;
      }
      texUnit = texUnit + 1 | 0;
    }
    return isValid;
  };
  MappedUniformCubeMap.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MappedUniformCubeMap',
    interfaces: [MappedUniformTex]
  };
  function QueueRendererWebGl(ctx) {
    this.ctx = ctx;
    this.glAttribs_0 = new QueueRendererWebGl$GlAttribs(this);
    this.shaderMgr_0 = new ShaderManager(this.ctx);
    this.colorBuffer_0 = new Float32Array(4);
  }
  Object.defineProperty(QueueRendererWebGl.prototype, 'gl_0', {
    get: function () {
      return this.ctx.gl_8be2vx$;
    }
  });
  QueueRendererWebGl.prototype.disposePipelines_z4np8a$ = function (pipelines) {
    var tmp$;
    tmp$ = pipelines.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      this.shaderMgr_0.deleteShader_lfrgcb$(element);
    }
  };
  QueueRendererWebGl.prototype.renderQueue_21v2u5$ = function (queue) {
    var tmp$, tmp$_0;
    var $receiver = queue.renderPass;
    var tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    this.ctx.gl_8be2vx$.viewport($receiver.viewport.x, $receiver.viewport.y, $receiver.viewport.width, $receiver.viewport.height);
    if (Kotlin.isType($receiver, OffscreenRenderPass2dMrt)) {
      tmp$_1 = $receiver.nAttachments;
      for (var i = 0; i < tmp$_1; i++) {
        if ((tmp$_3 = (tmp$_2 = $receiver.clearColors[i]) != null ? tmp$_2 : $receiver.clearColor) != null) {
          this.colorBuffer_0[0] = tmp$_3.r;
          this.colorBuffer_0[1] = tmp$_3.g;
          this.colorBuffer_0[2] = tmp$_3.b;
          this.colorBuffer_0[3] = tmp$_3.a;
          this.ctx.gl_8be2vx$.clearBufferfv(WebGL2RenderingContext.COLOR, i, this.colorBuffer_0);
        }}
      if ($receiver.clearDepth) {
        this.ctx.gl_8be2vx$.clear(WebGLRenderingContext.DEPTH_BUFFER_BIT);
      }} else {
      if ((tmp$_4 = $receiver.clearColor) != null) {
        this.ctx.gl_8be2vx$.clearColor(tmp$_4.r, tmp$_4.g, tmp$_4.b, tmp$_4.a);
      }var clearMask = this.clearMask_0($receiver);
      if (clearMask !== 0) {
        this.ctx.gl_8be2vx$.clear(clearMask);
      }}
    tmp$ = queue.commands.iterator();
    while (tmp$.hasNext()) {
      var cmd = tmp$.next();
      if ((tmp$_0 = cmd.pipeline) != null) {
        var tmp$_5;
        this.glAttribs_0.setupPipelineAttribs_lfrgcb$(tmp$_0);
        if (cmd.mesh.geometry.numIndices > 0) {
          if ((tmp$_5 = this.shaderMgr_0.setupShader_m0ahst$(cmd)) != null) {
            if (tmp$_5.primitiveType !== 0 && tmp$_5.indexType !== 0) {
              var insts = cmd.mesh.instances;
              if (insts == null) {
                this.gl_0.drawElements(tmp$_5.primitiveType, tmp$_5.numIndices, tmp$_5.indexType, 0);
                this.ctx.engineStats.addPrimitiveCount_za3lpa$(cmd.mesh.geometry.numPrimitives);
              } else if (insts.numInstances > 0) {
                this.gl_0.drawElementsInstanced(tmp$_5.primitiveType, tmp$_5.numIndices, tmp$_5.indexType, 0, insts.numInstances);
                this.ctx.engineStats.addPrimitiveCount_za3lpa$(Kotlin.imul(cmd.mesh.geometry.numPrimitives, insts.numInstances));
              }this.ctx.engineStats.addDrawCommandCount_za3lpa$(1);
            }}}}}
  };
  function QueueRendererWebGl$GlAttribs($outer) {
    this.$outer = $outer;
    this.depthTest = null;
    this.cullMethod = null;
    this.lineWidth = 0.0;
  }
  QueueRendererWebGl$GlAttribs.prototype.setupPipelineAttribs_lfrgcb$ = function (pipeline) {
    this.setBlendMode_0(pipeline.blendMode);
    this.setDepthTest_0(pipeline.depthCompareOp);
    this.setCullMethod_0(pipeline.cullMethod);
    if (this.lineWidth !== pipeline.lineWidth) {
      this.lineWidth = pipeline.lineWidth;
      this.$outer.gl_0.lineWidth(pipeline.lineWidth);
    }};
  QueueRendererWebGl$GlAttribs.prototype.setCullMethod_0 = function (cullMethod) {
    if (!equals(this.cullMethod, cullMethod)) {
      this.cullMethod = cullMethod;
      switch (cullMethod.name) {
        case 'DEFAULT':
          this.$outer.gl_0.enable(WebGLRenderingContext.CULL_FACE);
          this.$outer.gl_0.cullFace(WebGLRenderingContext.BACK);
          break;
        case 'CULL_BACK_FACES':
          this.$outer.gl_0.enable(WebGLRenderingContext.CULL_FACE);
          this.$outer.gl_0.cullFace(WebGLRenderingContext.BACK);
          break;
        case 'CULL_FRONT_FACES':
          this.$outer.gl_0.enable(WebGLRenderingContext.CULL_FACE);
          this.$outer.gl_0.cullFace(WebGLRenderingContext.FRONT);
          break;
        case 'NO_CULLING':
          this.$outer.gl_0.disable(WebGLRenderingContext.CULL_FACE);
          break;
      }
    }};
  QueueRendererWebGl$GlAttribs.prototype.setDepthTest_0 = function (depthCompareOp) {
    if (!equals(this.depthTest, depthCompareOp)) {
      this.depthTest = depthCompareOp;
      switch (depthCompareOp.name) {
        case 'DISABLED':
          this.$outer.gl_0.disable(WebGLRenderingContext.DEPTH_TEST);
          break;
        case 'ALWAYS':
          this.$outer.gl_0.enable(WebGLRenderingContext.DEPTH_TEST);
          this.$outer.gl_0.depthFunc(WebGLRenderingContext.ALWAYS);
          break;
        case 'LESS':
          this.$outer.gl_0.enable(WebGLRenderingContext.DEPTH_TEST);
          this.$outer.gl_0.depthFunc(WebGLRenderingContext.LESS);
          break;
        case 'LESS_EQUAL':
          this.$outer.gl_0.enable(WebGLRenderingContext.DEPTH_TEST);
          this.$outer.gl_0.depthFunc(WebGLRenderingContext.LEQUAL);
          break;
        case 'GREATER':
          this.$outer.gl_0.enable(WebGLRenderingContext.DEPTH_TEST);
          this.$outer.gl_0.depthFunc(WebGLRenderingContext.GREATER);
          break;
        case 'GREATER_EQUAL':
          this.$outer.gl_0.enable(WebGLRenderingContext.DEPTH_TEST);
          this.$outer.gl_0.depthFunc(WebGLRenderingContext.GEQUAL);
          break;
      }
    }};
  QueueRendererWebGl$GlAttribs.prototype.setBlendMode_0 = function (blendMode) {
    switch (blendMode.name) {
      case 'DISABLED':
        this.$outer.gl_0.disable(WebGLRenderingContext.BLEND);
        break;
      case 'BLEND_ADDITIVE':
        this.$outer.gl_0.blendFunc(WebGLRenderingContext.ONE, WebGLRenderingContext.ONE);
        this.$outer.gl_0.enable(WebGLRenderingContext.BLEND);
        break;
      case 'BLEND_MULTIPLY_ALPHA':
        this.$outer.gl_0.blendFunc(WebGLRenderingContext.SRC_ALPHA, WebGLRenderingContext.ONE_MINUS_SRC_ALPHA);
        this.$outer.gl_0.enable(WebGLRenderingContext.BLEND);
        break;
      case 'BLEND_PREMULTIPLIED_ALPHA':
        this.$outer.gl_0.blendFunc(WebGLRenderingContext.ONE, WebGLRenderingContext.ONE_MINUS_SRC_ALPHA);
        this.$outer.gl_0.enable(WebGLRenderingContext.BLEND);
        break;
      default:throw new NotImplementedError_init('An operation is not implemented: ' + ('Unimplemented blend mode: ' + blendMode));
    }
  };
  QueueRendererWebGl$GlAttribs.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GlAttribs',
    interfaces: []
  };
  QueueRendererWebGl.prototype.clearMask_0 = function ($receiver) {
    var mask = 0;
    if ($receiver.clearDepth) {
      mask = WebGLRenderingContext.DEPTH_BUFFER_BIT;
    }if ($receiver.clearColor != null) {
      mask = mask | WebGLRenderingContext.COLOR_BUFFER_BIT;
    }return mask;
  };
  QueueRendererWebGl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'QueueRendererWebGl',
    interfaces: []
  };
  function ShaderGeneratorImplWebGl() {
    ShaderGenerator.call(this);
  }
  ShaderGeneratorImplWebGl.prototype.generateShader_us75rd$ = function (model, pipeline, ctx) {
    var tmp$ = this.generateCode_0(model, pipeline);
    var vs = tmp$.component1()
    , fs = tmp$.component2();
    return new ShaderCode(vs, fs);
  };
  ShaderGeneratorImplWebGl.prototype.generateCode_0 = function (model, pipeline) {
    var vertShader = this.generateVertexShaderCode_0(model, pipeline);
    var fragShader = this.generateFragmentShaderCode_0(model, pipeline);
    if (model.dumpCode) {
      println_0('Vertex shader:' + '\n' + vertShader);
      println_0('Fragment shader:' + '\n' + fragShader);
    }return to(vertShader, fragShader);
  };
  ShaderGeneratorImplWebGl.prototype.generateVertexShaderCode_0 = function (model, pipeline) {
    var codeGen = new ShaderGeneratorImplWebGl$CodeGen();
    model.vertexStageGraph.generateCode_626509$(codeGen);
    return trimIndent('\n' + '            #version 300 es' + '\n' + '            ' + this.infoStr_0(model) + '\n' + '            ' + '\n' + '            // descriptor layout / uniforms ' + this.generateDescriptorBindings_0(pipeline, ShaderStage$VERTEX_SHADER_getInstance()) + '\n' + '            // vertex attributes ' + this.generateAttributeBindings_0(pipeline) + '\n' + '            // outputs ' + this.generateStageOutputs_0(model.vertexStageGraph) + '\n' + '            // functions' + '\n' + '            ' + codeGen.generateFunctions() + '\n' + '            ' + '\n' + '            void main() {' + '\n' + '                ' + codeGen.generateMain() + '\n' + '                gl_Position = ' + model.vertexStageGraph.positionOutput.variable.ref4f() + ';' + '\n' + '            }' + '\n' + '        ');
  };
  ShaderGeneratorImplWebGl.prototype.generateFragmentShaderCode_0 = function (model, pipeline) {
    var codeGen = new ShaderGeneratorImplWebGl$CodeGen();
    model.fragmentStageGraph.generateCode_626509$(codeGen);
    return trimIndent('\n' + '            #version 300 es' + '\n' + '            precision highp float;' + '\n' + '            precision highp sampler2DShadow;' + '\n' + '            ' + this.infoStr_0(model) + '\n' + '\n' + '            // descriptor layout / uniforms ' + this.generateDescriptorBindings_0(pipeline, ShaderStage$FRAGMENT_SHADER_getInstance()) + '\n' + '            // inputs ' + this.generateStageInputs_0(model.fragmentStageGraph) + '\n' + '            // functions' + '\n' + '            ' + codeGen.generateFunctions() + '\n' + '            ' + '\n' + '            void main() {' + '\n' + '                ' + codeGen.generateMain() + '\n' + '            }' + '\n' + '        ');
  };
  function ShaderGeneratorImplWebGl$infoStr$lambda(it) {
    return '// ' + it + '\n';
  }
  ShaderGeneratorImplWebGl.prototype.infoStr_0 = function ($receiver) {
    return joinToString(lines($receiver.modelInfo), void 0, void 0, void 0, void 0, void 0, ShaderGeneratorImplWebGl$infoStr$lambda);
  };
  ShaderGeneratorImplWebGl.prototype.generateDescriptorBindings_0 = function (pipeline, stage) {
    var srcBuilder = new StringBuilder('\n');
    var tmp$;
    tmp$ = pipeline.descriptorSetLayouts.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0;
      tmp$_0 = element.descriptors.iterator();
      while (tmp$_0.hasNext()) {
        var element_0 = tmp$_0.next();
        if (element_0.stages.contains_11rb$(stage)) {
          if (Kotlin.isType(element_0, UniformBuffer))
            srcBuilder.append_61zpoe$(this.generateUniformBuffer_0(element_0));
          else if (Kotlin.isType(element_0, TextureSampler))
            srcBuilder.append_61zpoe$(this.generateTextureSampler_0(element_0));
          else if (Kotlin.isType(element_0, CubeMapSampler))
            srcBuilder.append_61zpoe$(this.generateCubeMapSampler_0(element_0));
          else {
            throw new NotImplementedError_init('An operation is not implemented: ' + ('Descriptor type not implemented: ' + element_0));
          }
        }}
    }
    var $receiver = pipeline.pushConstantRanges;
    var destination = ArrayList_init_0();
    var tmp$_1;
    tmp$_1 = $receiver.iterator();
    while (tmp$_1.hasNext()) {
      var element_1 = tmp$_1.next();
      if (element_1.stages.contains_11rb$(stage))
        destination.add_11rb$(element_1);
    }
    var pushConstants = destination;
    if (!pushConstants.isEmpty()) {
      var tmp$_2;
      tmp$_2 = pipeline.pushConstantRanges.iterator();
      while (tmp$_2.hasNext()) {
        var element_2 = tmp$_2.next();
        var tmp$_3;
        tmp$_3 = element_2.pushConstants.iterator();
        while (tmp$_3.hasNext()) {
          var element_3 = tmp$_3.next();
          this.appendln_0(srcBuilder, 'uniform ' + this.declare_0(element_3) + ';');
        }
      }
    }return srcBuilder.toString();
  };
  ShaderGeneratorImplWebGl.prototype.generateUniformBuffer_0 = function (desc) {
    var srcBuilder = StringBuilder_init();
    var tmp$;
    tmp$ = desc.uniforms.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      this.appendln_0(srcBuilder, 'uniform ' + this.declare_0(element) + ';');
    }
    return srcBuilder.toString();
  };
  ShaderGeneratorImplWebGl.prototype.generateTextureSampler_0 = function (desc) {
    var tmp$;
    var samplerType = desc.isDepthSampler ? 'sampler2DShadow' : 'sampler2D';
    if (desc.arraySize > 1) {
      tmp$ = '[' + desc.arraySize + ']';
    } else {
      tmp$ = '';
    }
    var arraySuffix = tmp$;
    return 'uniform ' + samplerType + ' ' + desc.name + arraySuffix + ';' + '\n';
  };
  ShaderGeneratorImplWebGl.prototype.generateCubeMapSampler_0 = function (desc) {
    var tmp$;
    var samplerType = desc.isDepthSampler ? 'samplerCubeShadow' : 'samplerCube';
    if (desc.arraySize > 1) {
      tmp$ = '[' + desc.arraySize + ']';
    } else {
      tmp$ = '';
    }
    var arraySuffix = tmp$;
    return 'uniform ' + samplerType + ' ' + desc.name + arraySuffix + ';' + '\n';
  };
  ShaderGeneratorImplWebGl.prototype.generateAttributeBindings_0 = function (pipeline) {
    var srcBuilder = new StringBuilder('\n');
    var tmp$;
    tmp$ = pipeline.vertexLayout.bindings.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0;
      tmp$_0 = element.vertexAttributes.iterator();
      while (tmp$_0.hasNext()) {
        var element_0 = tmp$_0.next();
        this.appendln_0(srcBuilder, 'layout(location=' + element_0.location + ') in ' + element_0.type.glslType + ' ' + element_0.name + ';');
      }
    }
    return srcBuilder.toString();
  };
  ShaderGeneratorImplWebGl.prototype.generateStageInputs_0 = function ($receiver) {
    var srcBuilder = new StringBuilder('\n');
    var tmp$;
    tmp$ = $receiver.inputs.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var flat = element.isFlat ? 'flat' : '';
      this.appendln_0(srcBuilder, flat + ' in ' + element.variable.glslType() + ' ' + element.variable.name + ';');
    }
    return srcBuilder.toString();
  };
  ShaderGeneratorImplWebGl.prototype.generateStageOutputs_0 = function ($receiver) {
    var srcBuilder = new StringBuilder('\n');
    var tmp$;
    tmp$ = $receiver.outputs.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var flat = element.isFlat ? 'flat' : '';
      this.appendln_0(srcBuilder, flat + ' out ' + element.variable.glslType() + ' ' + element.variable.name + ';');
    }
    return srcBuilder.toString();
  };
  ShaderGeneratorImplWebGl.prototype.appendln_0 = function ($receiver, line) {
    return $receiver.append_61zpoe$(line + '\n');
  };
  ShaderGeneratorImplWebGl.prototype.declare_0 = function ($receiver) {
    var tmp$;
    if (Kotlin.isType($receiver, Uniform1f))
      tmp$ = 'float ' + $receiver.name;
    else if (Kotlin.isType($receiver, Uniform2f))
      tmp$ = 'vec2 ' + $receiver.name;
    else if (Kotlin.isType($receiver, Uniform3f))
      tmp$ = 'vec3 ' + $receiver.name;
    else if (Kotlin.isType($receiver, Uniform4f))
      tmp$ = 'vec4 ' + $receiver.name;
    else if (Kotlin.isType($receiver, UniformColor))
      tmp$ = 'vec4 ' + $receiver.name;
    else if (Kotlin.isType($receiver, Uniform1fv))
      tmp$ = 'float ' + $receiver.name + '[' + $receiver.length + ']';
    else if (Kotlin.isType($receiver, Uniform2fv))
      tmp$ = 'vec2 ' + $receiver.name + '[' + $receiver.length + ']';
    else if (Kotlin.isType($receiver, Uniform3fv))
      tmp$ = 'vec3 ' + $receiver.name + '[' + $receiver.length + ']';
    else if (Kotlin.isType($receiver, Uniform4fv))
      tmp$ = 'vec4 ' + $receiver.name + '[' + $receiver.length + ']';
    else if (Kotlin.isType($receiver, UniformMat3f))
      tmp$ = 'mat3 ' + $receiver.name;
    else if (Kotlin.isType($receiver, UniformMat4f))
      tmp$ = 'mat4 ' + $receiver.name;
    else if (Kotlin.isType($receiver, UniformMat4fv))
      tmp$ = 'mat4 ' + $receiver.name + '[' + $receiver.length + ']';
    else if (Kotlin.isType($receiver, Uniform1i))
      tmp$ = 'int ' + $receiver.name;
    else {
      throw new NotImplementedError_init('An operation is not implemented: ' + ('Uniform type name not implemented: ' + $receiver));
    }
    return tmp$;
  };
  function ShaderGeneratorImplWebGl$CodeGen() {
    this.functions = LinkedHashMap_init();
    this.mainCode = ArrayList_init_0();
  }
  ShaderGeneratorImplWebGl$CodeGen.prototype.appendFunction_puj7f4$ = function (name, glslCode) {
    this.functions.put_xwzc9p$(name, glslCode);
  };
  ShaderGeneratorImplWebGl$CodeGen.prototype.appendMain_61zpoe$ = function (glslCode) {
    this.mainCode.add_11rb$(glslCode);
  };
  ShaderGeneratorImplWebGl$CodeGen.prototype.sampleTexture2d_buzeal$$default = function (texName, texCoords, lod) {
    var tmp$;
    if (lod == null) {
      tmp$ = 'texture(' + texName + ', ' + texCoords + ')';
    } else {
      tmp$ = 'textureLod(' + texName + ', ' + texCoords + ', ' + toString(lod) + ')';
    }
    return tmp$;
  };
  ShaderGeneratorImplWebGl$CodeGen.prototype.sampleTexture2dDepth_puj7f4$ = function (texName, texCoords) {
    return 'textureProj(' + texName + ', ' + texCoords + ')';
  };
  ShaderGeneratorImplWebGl$CodeGen.prototype.sampleTextureCube_buzeal$$default = function (texName, texCoords, lod) {
    return this.sampleTexture2d_buzeal$(texName, texCoords, lod);
  };
  ShaderGeneratorImplWebGl$CodeGen.prototype.generateFunctions = function () {
    return joinToString(this.functions.values, '\n');
  };
  ShaderGeneratorImplWebGl$CodeGen.prototype.generateMain = function () {
    return joinToString(this.mainCode, '\n');
  };
  ShaderGeneratorImplWebGl$CodeGen.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CodeGen',
    interfaces: [CodeGenerator]
  };
  ShaderGeneratorImplWebGl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShaderGeneratorImplWebGl',
    interfaces: [ShaderGenerator]
  };
  function ShaderManager(ctx) {
    this.ctx = ctx;
    this.shaders = LinkedHashMap_init();
    this.currentShader = null;
  }
  Object.defineProperty(ShaderManager.prototype, 'gl_0', {
    get: function () {
      return this.ctx.gl_8be2vx$;
    }
  });
  ShaderManager.prototype.setupShader_m0ahst$ = function (cmd) {
    var tmp$;
    var pipeline = ensureNotNull(cmd.pipeline);
    var $receiver = this.shaders;
    var tmp$_0;
    var value = $receiver.get_11rb$(pipeline);
    if (value == null) {
      var answer = new CompiledShader(this.compileShader_0(pipeline.shaderCode), pipeline, this.ctx);
      $receiver.put_xwzc9p$(pipeline, answer);
      tmp$_0 = answer;
    } else {
      tmp$_0 = value;
    }
    var shader = tmp$_0;
    if (shader !== this.currentShader) {
      (tmp$ = this.currentShader) != null ? (tmp$.unUse(), Unit) : null;
      this.currentShader = shader;
      shader.use();
    }return shader.bindInstance_m0ahst$(cmd);
  };
  ShaderManager.prototype.deleteShader_lfrgcb$ = function (pipeline) {
    var shader = this.shaders.get_11rb$(pipeline);
    if (shader != null) {
      shader.destroyInstance_lfrgcb$(pipeline);
      if (shader.isEmpty()) {
        if (equals(shader, this.currentShader)) {
          shader.unUse();
          this.currentShader = null;
        }shader.destroy();
        this.shaders.remove_11rb$(pipeline);
      }}};
  ShaderManager.prototype.compileShader_0 = function (code) {
    var vert = this.gl_0.createShader(WebGLRenderingContext.VERTEX_SHADER);
    this.gl_0.shaderSource(vert, code.vertexSrc);
    this.gl_0.compileShader(vert);
    var vsStatus = this.gl_0.getShaderParameter(vert, WebGLRenderingContext.COMPILE_STATUS);
    if (!equals(vsStatus, true)) {
      var log = this.gl_0.getShaderInfoLog(vert);
      var $this = package$util.Log;
      var level = Log$Level.ERROR;
      var tag = Kotlin.getKClassFromExpression(this).simpleName;
      if (level.level >= $this.level.level) {
        $this.printer(level, tag, 'Vertex shader compilation failed:' + '\n' + toString(log));
      }var $this_0 = package$util.Log;
      var level_0 = Log$Level.ERROR;
      var tag_0 = Kotlin.getKClassFromExpression(this).simpleName;
      if (level_0.level >= $this_0.level.level) {
        $this_0.printer(level_0, tag_0, 'Shader source: ' + '\n' + this.formatShaderSrc_0(code.vertexSrc));
      }throw KoolException_init('Vertex shader compilation failed: ' + toString(log));
    }var frag = this.gl_0.createShader(WebGLRenderingContext.FRAGMENT_SHADER);
    this.gl_0.shaderSource(frag, code.fragmentSrc);
    this.gl_0.compileShader(frag);
    var fsStatus = this.gl_0.getShaderParameter(frag, WebGLRenderingContext.COMPILE_STATUS);
    if (!equals(fsStatus, true)) {
      var log_0 = this.gl_0.getShaderInfoLog(frag);
      var $this_1 = package$util.Log;
      var level_1 = Log$Level.ERROR;
      var tag_1 = Kotlin.getKClassFromExpression(this).simpleName;
      if (level_1.level >= $this_1.level.level) {
        $this_1.printer(level_1, tag_1, 'Fragment shader compilation failed:' + '\n' + toString(log_0));
      }var $this_2 = package$util.Log;
      var level_2 = Log$Level.ERROR;
      var tag_2 = Kotlin.getKClassFromExpression(this).simpleName;
      if (level_2.level >= $this_2.level.level) {
        $this_2.printer(level_2, tag_2, 'Shader source: ' + '\n' + this.formatShaderSrc_0(code.fragmentSrc));
      }throw KoolException_init('Fragment shader compilation failed: ' + toString(log_0));
    }var prog = this.gl_0.createProgram();
    this.gl_0.attachShader(prog, vert);
    this.gl_0.attachShader(prog, frag);
    this.gl_0.linkProgram(prog);
    this.gl_0.deleteShader(vert);
    this.gl_0.deleteShader(frag);
    if (!equals(this.gl_0.getProgramParameter(prog, WebGLRenderingContext.LINK_STATUS), true)) {
      var log_1 = this.gl_0.getProgramInfoLog(prog);
      var $this_3 = package$util.Log;
      var level_3 = Log$Level.ERROR;
      var tag_3 = Kotlin.getKClassFromExpression(this).simpleName;
      if (level_3.level >= $this_3.level.level) {
        $this_3.printer(level_3, tag_3, 'Shader linkage failed:' + '\n' + toString(log_1));
      }var $this_4 = package$util.Log;
      var level_4 = Log$Level.ERROR;
      var tag_4 = Kotlin.getKClassFromExpression(this).simpleName;
      if (level_4.level >= $this_4.level.level) {
        $this_4.printer(level_4, tag_4, 'Vertex shader source: ' + '\n' + this.formatShaderSrc_0(code.vertexSrc));
      }var $this_5 = package$util.Log;
      var level_5 = Log$Level.ERROR;
      var tag_5 = Kotlin.getKClassFromExpression(this).simpleName;
      if (level_5.level >= $this_5.level.level) {
        $this_5.printer(level_5, tag_5, 'Fragment shader source: ' + '\n' + this.formatShaderSrc_0(code.fragmentSrc));
      }throw KoolException_init('Shader linkage failed: ' + toString(log_1));
    }return prog;
  };
  ShaderManager.prototype.formatShaderSrc_0 = function (src) {
    var srcBuilder = StringBuilder_init();
    var tmp$, tmp$_0;
    var index = 0;
    tmp$ = lines(src).iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      srcBuilder.append_61zpoe$((checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0)) + 1 | 0).toString() + ' ' + item + '\n');
    }
    return srcBuilder.toString();
  };
  ShaderManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ShaderManager',
    interfaces: []
  };
  function TextureLoader() {
    TextureLoader_instance = this;
  }
  TextureLoader.prototype.loadTexture_hlfduu$ = function (ctx, props, data) {
    var tmp$;
    if (Kotlin.isType(data, BufferedTextureData))
      tmp$ = this.loadTexture2d_0(ctx, props, data);
    else if (Kotlin.isType(data, ImageTextureData))
      tmp$ = this.loadTexture2d_0(ctx, props, data);
    else if (Kotlin.isType(data, CubeMapTextureData))
      tmp$ = this.loadTextureCube_0(ctx, props, data);
    else
      throw IllegalArgumentException_init('TextureData type not supported: ' + data);
    return tmp$;
  };
  TextureLoader.prototype.loadTextureCube_0 = function (ctx, props, img) {
    var gl = ctx.gl_8be2vx$;
    var tex = gl.createTexture();
    gl.bindTexture(WebGLRenderingContext.TEXTURE_CUBE_MAP, tex);
    this.texImage2d_0(gl, WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_X, img.right);
    this.texImage2d_0(gl, WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_X, img.left);
    this.texImage2d_0(gl, WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Y, img.up);
    this.texImage2d_0(gl, WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Y, img.down);
    this.texImage2d_0(gl, WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Z, img.back);
    this.texImage2d_0(gl, WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Z, img.front);
    if (props.mipMapping) {
      gl.generateMipmap(WebGLRenderingContext.TEXTURE_CUBE_MAP);
    }var a = img.width;
    var b = img.height;
    var x = Math_0.max(a, b);
    var x_0 = Math_0.log2(x);
    var mipLevels = numberToInt(Math_0.floor(x_0)) + 1 | 0;
    var estSize = Texture$Companion_getInstance().estimatedTexSize_4qozqa$(img.right.width, img.right.height, get_pxSize(img.format), 6, mipLevels);
    return new LoadedTextureWebGl(ctx, tex, estSize);
  };
  TextureLoader.prototype.loadTexture2d_0 = function (ctx, props, img) {
    var gl = ctx.gl_8be2vx$;
    var tex = gl.createTexture();
    gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, tex);
    this.texImage2d_0(gl, WebGLRenderingContext.TEXTURE_2D, img);
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MIN_FILTER, this.glMinFilterMethod_0(props.minFilter, props.mipMapping));
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MAG_FILTER, this.glMagFilterMethod_0(props.magFilter));
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_S, this.glAddressMode_0(props.addressModeU));
    gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_T, this.glAddressMode_0(props.addressModeV));
    if (props.maxAnisotropy > 1 && ctx.glCapabilities.maxAnisotropy > 1.0) {
      var tmp$ = WebGLRenderingContext.TEXTURE_2D;
      var tmp$_0 = ctx.glCapabilities.glTextureMaxAnisotropyExt;
      var a = props.maxAnisotropy;
      var b = ctx.glCapabilities.maxAnisotropy;
      gl.texParameteri(tmp$, tmp$_0, Math_0.min(a, b));
    }if (props.mipMapping) {
      gl.generateMipmap(WebGLRenderingContext.TEXTURE_2D);
    }var a_0 = img.width;
    var b_0 = img.height;
    var x = Math_0.max(a_0, b_0);
    var x_0 = Math_0.log2(x);
    var mipLevels = numberToInt(Math_0.floor(x_0)) + 1 | 0;
    var estSize = Texture$Companion_getInstance().estimatedTexSize_4qozqa$(img.width, img.height, get_pxSize(img.format), 1, mipLevels);
    return new LoadedTextureWebGl(ctx, tex, estSize);
  };
  TextureLoader.prototype.glMinFilterMethod_0 = function ($receiver, mipMapping) {
    var tmp$;
    switch ($receiver.name) {
      case 'NEAREST':
        tmp$ = mipMapping ? WebGLRenderingContext.NEAREST_MIPMAP_NEAREST : WebGLRenderingContext.NEAREST;
        break;
      case 'LINEAR':
        tmp$ = mipMapping ? WebGLRenderingContext.LINEAR_MIPMAP_LINEAR : WebGLRenderingContext.LINEAR;
        break;
      default:tmp$ = Kotlin.noWhenBranchMatched();
        break;
    }
    return tmp$;
  };
  TextureLoader.prototype.glMagFilterMethod_0 = function ($receiver) {
    var tmp$;
    switch ($receiver.name) {
      case 'NEAREST':
        tmp$ = WebGLRenderingContext.NEAREST;
        break;
      case 'LINEAR':
        tmp$ = WebGLRenderingContext.LINEAR;
        break;
      default:tmp$ = Kotlin.noWhenBranchMatched();
        break;
    }
    return tmp$;
  };
  TextureLoader.prototype.glAddressMode_0 = function ($receiver) {
    var tmp$;
    switch ($receiver.name) {
      case 'CLAMP_TO_BORDER':
        tmp$ = WebGLRenderingContext.CLAMP_TO_EDGE;
        break;
      case 'CLAMP_TO_EDGE':
        tmp$ = WebGLRenderingContext.CLAMP_TO_EDGE;
        break;
      case 'MIRRORED_REPEAT':
        tmp$ = WebGLRenderingContext.MIRRORED_REPEAT;
        break;
      case 'REPEAT':
        tmp$ = WebGLRenderingContext.REPEAT;
        break;
      default:tmp$ = Kotlin.noWhenBranchMatched();
        break;
    }
    return tmp$;
  };
  TextureLoader.prototype.texImage2d_0 = function (gl, target, data) {
    var tmp$;
    if (Kotlin.isType(data, BufferedTextureData)) {
      gl.texImage2D(target, 0, get_glInternalFormat(data.format), data.width, data.height, 0, get_glFormat(data.format), get_glType(data.format), (Kotlin.isType(tmp$ = data.data, Uint8BufferImpl) ? tmp$ : throwCCE()).buffer);
    } else if (Kotlin.isType(data, ImageTextureData))
      gl.texImage2D(target, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, data.data);
    else {
      throw IllegalArgumentException_init('Invalid TextureData type for texImage2d: ' + data);
    }
  };
  TextureLoader.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'TextureLoader',
    interfaces: []
  };
  var TextureLoader_instance = null;
  function TextureLoader_getInstance() {
    if (TextureLoader_instance === null) {
      new TextureLoader();
    }return TextureLoader_instance;
  }
  function VboBinder(vbo, elemSize, strideBytes, offset, type) {
    if (offset === void 0)
      offset = 0;
    if (type === void 0)
      type = WebGLRenderingContext.FLOAT;
    this.vbo = vbo;
    this.elemSize = elemSize;
    this.strideBytes = strideBytes;
    this.offset = offset;
    this.type = type;
  }
  VboBinder.prototype.bindAttribute_9sni52$ = function (target, ctx) {
    this.vbo.bind_44a5h0$(ctx);
    if (this.type === WebGLRenderingContext.INT || this.type === WebGLRenderingContext.UNSIGNED_INT) {
      ctx.gl_8be2vx$.vertexAttribIPointer(target, this.elemSize, this.type, this.strideBytes, this.offset * 4 | 0);
    } else {
      ctx.gl_8be2vx$.vertexAttribPointer(target, this.elemSize, this.type, false, this.strideBytes, this.offset * 4 | 0);
    }
  };
  VboBinder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VboBinder',
    interfaces: []
  };
  function GenericBuffer(capacity, create) {
    this.buffer = create();
    this.capacity_tfbtga$_0 = capacity;
    this.limit_wr5sjr$_0 = capacity;
    this.position_xkur2v$_0 = 0;
  }
  Object.defineProperty(GenericBuffer.prototype, 'capacity', {
    get: function () {
      return this.capacity_tfbtga$_0;
    }
  });
  Object.defineProperty(GenericBuffer.prototype, 'limit', {
    get: function () {
      return this.limit_wr5sjr$_0;
    },
    set: function (value) {
      if (value < 0 || value > this.capacity) {
        throw KoolException_init('Limit is out of bounds: ' + value + ' (capacity: ' + this.capacity + ')');
      }this.limit_wr5sjr$_0 = value;
      if (this.position > value) {
        this.position = value;
      }}
  });
  Object.defineProperty(GenericBuffer.prototype, 'position', {
    get: function () {
      return this.position_xkur2v$_0;
    },
    set: function (position) {
      this.position_xkur2v$_0 = position;
    }
  });
  Object.defineProperty(GenericBuffer.prototype, 'remaining', {
    get: function () {
      return this.limit - this.position | 0;
    }
  });
  GenericBuffer.prototype.flip = function () {
    this.limit = this.position;
    this.position = 0;
  };
  GenericBuffer.prototype.clear = function () {
    this.limit = this.capacity;
    this.position = 0;
  };
  GenericBuffer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GenericBuffer',
    interfaces: [Buffer]
  };
  function Uint8BufferImpl(capacity) {
    GenericBuffer.call(this, capacity, Uint8BufferImpl_init$lambda(capacity));
  }
  Uint8BufferImpl.prototype.get_za3lpa$ = function (i) {
    return this.buffer[i];
  };
  Uint8BufferImpl.prototype.set_6t1wet$ = function (i, value) {
    this.buffer[i] = value;
  };
  Uint8BufferImpl.prototype.put_mj6st8$ = function (data, offset, len) {
    var tmp$, tmp$_0;
    tmp$ = offset + len - 1 | 0;
    for (var i = offset; i <= tmp$; i++) {
      this.buffer[tmp$_0 = this.position, this.position = tmp$_0 + 1 | 0, tmp$_0] = data[i];
    }
    return this;
  };
  Uint8BufferImpl.prototype.put_s8j3t7$ = function (value) {
    var tmp$;
    this.buffer[tmp$ = this.position, this.position = tmp$ + 1 | 0, tmp$] = value;
    return this;
  };
  Uint8BufferImpl.prototype.put_ay2i3f$ = function (data) {
    var tmp$, tmp$_0;
    tmp$ = data.position;
    tmp$_0 = data.limit;
    for (var i = tmp$; i < tmp$_0; i++) {
      this.put_s8j3t7$(data.get_za3lpa$(i));
    }
    return this;
  };
  function Uint8BufferImpl_init$lambda(closure$capacity) {
    return function () {
      return new Uint8Array(closure$capacity);
    };
  }
  Uint8BufferImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uint8BufferImpl',
    interfaces: [GenericBuffer, Uint8Buffer]
  };
  function Uint16BufferImpl(capacity) {
    GenericBuffer.call(this, capacity, Uint16BufferImpl_init$lambda(capacity));
  }
  Uint16BufferImpl.prototype.get_za3lpa$ = function (i) {
    return this.buffer[i];
  };
  Uint16BufferImpl.prototype.set_2bqt6h$ = function (i, value) {
    this.buffer[i] = value;
  };
  Uint16BufferImpl.prototype.put_359eei$ = function (data, offset, len) {
    var tmp$, tmp$_0;
    tmp$ = offset + len - 1 | 0;
    for (var i = offset; i <= tmp$; i++) {
      this.buffer[tmp$_0 = this.position, this.position = tmp$_0 + 1 | 0, tmp$_0] = data[i];
    }
    return this;
  };
  Uint16BufferImpl.prototype.put_mq22fl$ = function (value) {
    var tmp$;
    this.buffer[tmp$ = this.position, this.position = tmp$ + 1 | 0, tmp$] = value;
    return this;
  };
  Uint16BufferImpl.prototype.put_8k344i$ = function (data) {
    var tmp$, tmp$_0;
    tmp$ = data.position;
    tmp$_0 = data.limit;
    for (var i = tmp$; i < tmp$_0; i++) {
      this.put_mq22fl$(data.get_za3lpa$(i));
    }
    return this;
  };
  function Uint16BufferImpl_init$lambda(closure$capacity) {
    return function () {
      return new Uint16Array(closure$capacity);
    };
  }
  Uint16BufferImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uint16BufferImpl',
    interfaces: [GenericBuffer, Uint16Buffer]
  };
  function Uint32BufferImpl(capacity) {
    GenericBuffer.call(this, capacity, Uint32BufferImpl_init$lambda(capacity));
  }
  Uint32BufferImpl.prototype.get_za3lpa$ = function (i) {
    return this.buffer[i];
  };
  Uint32BufferImpl.prototype.set_vux9f0$ = function (i, value) {
    this.buffer[i] = value;
  };
  Uint32BufferImpl.prototype.put_nd5v6f$ = function (data, offset, len) {
    var tmp$, tmp$_0;
    tmp$ = offset + len - 1 | 0;
    for (var i = offset; i <= tmp$; i++) {
      this.buffer[tmp$_0 = this.position, this.position = tmp$_0 + 1 | 0, tmp$_0] = data[i];
    }
    return this;
  };
  Uint32BufferImpl.prototype.put_za3lpa$ = function (value) {
    var tmp$;
    this.buffer[tmp$ = this.position, this.position = tmp$ + 1 | 0, tmp$] = value;
    return this;
  };
  Uint32BufferImpl.prototype.put_7hqxcs$ = function (data) {
    var tmp$, tmp$_0;
    tmp$ = data.position;
    tmp$_0 = data.limit;
    for (var i = tmp$; i < tmp$_0; i++) {
      this.put_za3lpa$(data.get_za3lpa$(i));
    }
    return this;
  };
  function Uint32BufferImpl_init$lambda(closure$capacity) {
    return function () {
      return new Uint32Array(closure$capacity);
    };
  }
  Uint32BufferImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Uint32BufferImpl',
    interfaces: [GenericBuffer, Uint32Buffer]
  };
  function Float32BufferImpl(capacity) {
    GenericBuffer.call(this, capacity, Float32BufferImpl_init$lambda(capacity));
  }
  Float32BufferImpl.prototype.get_za3lpa$ = function (i) {
    return this.buffer[i];
  };
  Float32BufferImpl.prototype.set_24o109$ = function (i, value) {
    this.buffer[i] = value;
  };
  Float32BufferImpl.prototype.put_kgymra$ = function (data, offset, len) {
    var tmp$, tmp$_0;
    tmp$ = offset + len | 0;
    for (var i = offset; i < tmp$; i++) {
      this.buffer[tmp$_0 = this.position, this.position = tmp$_0 + 1 | 0, tmp$_0] = data[i];
    }
    return this;
  };
  Float32BufferImpl.prototype.put_mx4ult$ = function (value) {
    var tmp$;
    this.buffer[tmp$ = this.position, this.position = tmp$ + 1 | 0, tmp$] = value;
    return this;
  };
  Float32BufferImpl.prototype.put_he122g$ = function (data) {
    var tmp$, tmp$_0;
    tmp$ = data.position;
    tmp$_0 = data.limit;
    for (var i = tmp$; i < tmp$_0; i++) {
      this.put_mx4ult$(data.get_za3lpa$(i));
    }
    return this;
  };
  function Float32BufferImpl_init$lambda(closure$capacity) {
    return function () {
      return new Float32Array(closure$capacity);
    };
  }
  Float32BufferImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Float32BufferImpl',
    interfaces: [GenericBuffer, Float32Buffer]
  };
  function MixedBufferImpl(capacity) {
    GenericBuffer.call(this, capacity, MixedBufferImpl_init$lambda(capacity));
  }
  MixedBufferImpl.prototype.putUint8_s8j3t7$ = function (value) {
    var tmp$;
    this.buffer.setUint8((tmp$ = this.position, this.position = tmp$ + 1 | 0, tmp$), value);
    return this;
  };
  MixedBufferImpl.prototype.putUint8_mj6st8$ = function (data, offset, len) {
    var tmp$, tmp$_0;
    tmp$ = offset + len | 0;
    for (var i = offset; i < tmp$; i++) {
      this.buffer.setUint8((tmp$_0 = this.position, this.position = tmp$_0 + 1 | 0, tmp$_0), data[i]);
    }
    return this;
  };
  MixedBufferImpl.prototype.putUint8_ay2i3f$ = function (data) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = data.position;
    tmp$_0 = data.limit;
    for (var i = tmp$; i < tmp$_0; i++) {
      this.buffer.setUint8((tmp$_1 = this.position, this.position = tmp$_1 + 1 | 0, tmp$_1), data.get_za3lpa$(i));
    }
    return this;
  };
  MixedBufferImpl.prototype.putUint16_mq22fl$ = function (value) {
    this.buffer.setUint16(this.position, value);
    this.position = this.position + 2 | 0;
    return this;
  };
  MixedBufferImpl.prototype.putUint16_359eei$ = function (data, offset, len) {
    var tmp$;
    tmp$ = offset + len | 0;
    for (var i = offset; i < tmp$; i++) {
      this.buffer.setUint16(this.position, data[i]);
      this.position = this.position + 2 | 0;
    }
    return this;
  };
  MixedBufferImpl.prototype.putUint16_8k344i$ = function (data) {
    var tmp$, tmp$_0;
    tmp$ = data.position;
    tmp$_0 = data.limit;
    for (var i = tmp$; i < tmp$_0; i++) {
      this.buffer.setUint16(this.position, data.get_za3lpa$(i));
      this.position = this.position + 2 | 0;
    }
    return this;
  };
  MixedBufferImpl.prototype.putUint32_za3lpa$ = function (value) {
    this.buffer.setUint32(this.position, value);
    this.position = this.position + 4 | 0;
    return this;
  };
  MixedBufferImpl.prototype.putUint32_nd5v6f$ = function (data, offset, len) {
    var tmp$;
    tmp$ = offset + len | 0;
    for (var i = offset; i < tmp$; i++) {
      this.buffer.setUint32(this.position, data[i]);
      this.position = this.position + 4 | 0;
    }
    return this;
  };
  MixedBufferImpl.prototype.putUint32_7hqxcs$ = function (data) {
    var tmp$, tmp$_0;
    tmp$ = data.position;
    tmp$_0 = data.limit;
    for (var i = tmp$; i < tmp$_0; i++) {
      this.buffer.setUint32(this.position, data.get_za3lpa$(i));
      this.position = this.position + 4 | 0;
    }
    return this;
  };
  MixedBufferImpl.prototype.putFloat32_mx4ult$ = function (value) {
    this.buffer.setFloat32(this.position, value);
    this.position = this.position + 4 | 0;
    return this;
  };
  MixedBufferImpl.prototype.putFloat32_kgymra$ = function (data, offset, len) {
    var tmp$;
    tmp$ = offset + len | 0;
    for (var i = offset; i < tmp$; i++) {
      this.buffer.setFloat32(this.position, data[i]);
      this.position = this.position + 4 | 0;
    }
    return this;
  };
  MixedBufferImpl.prototype.putFloat32_he122g$ = function (data) {
    var tmp$, tmp$_0;
    tmp$ = data.position;
    tmp$_0 = data.limit;
    for (var i = tmp$; i < tmp$_0; i++) {
      this.buffer.setFloat32(this.position, data.get_za3lpa$(i));
      this.position = this.position + 4 | 0;
    }
    return this;
  };
  function MixedBufferImpl_init$lambda(closure$capacity) {
    return function () {
      return new DataView(new ArrayBuffer(closure$capacity));
    };
  }
  MixedBufferImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MixedBufferImpl',
    interfaces: [GenericBuffer, MixedBuffer]
  };
  function createUint8Buffer(capacity) {
    return new Uint8BufferImpl(capacity);
  }
  function createUint16Buffer(capacity) {
    return new Uint16BufferImpl(capacity);
  }
  function createUint32Buffer(capacity) {
    return new Uint32BufferImpl(capacity);
  }
  function createFloat32Buffer(capacity) {
    return new Float32BufferImpl(capacity);
  }
  function createMixedBuffer(capacity) {
    return new MixedBufferImpl(capacity);
  }
  $$importsForInline$$.kool = _;
  AssetManager.AwaitedAsset = AssetManager$AwaitedAsset;
  Object.defineProperty(AssetManager, 'Companion', {
    get: AssetManager$Companion_getInstance
  });
  $$importsForInline$$['kotlinx-coroutines-core'] = $module$kotlinx_coroutines_core;
  var package$de = _.de || (_.de = {});
  var package$fabmax = package$de.fabmax || (package$de.fabmax = {});
  var package$kool = package$fabmax.kool || (package$fabmax.kool = {});
  package$kool.AssetManager = AssetManager;
  package$kool.AssetRef = AssetRef;
  package$kool.LocalRawAssetRef = LocalRawAssetRef;
  package$kool.HttpRawAssetRef = HttpRawAssetRef;
  package$kool.LocalTextureAssetRef = LocalTextureAssetRef;
  package$kool.HttpTextureAssetRef = HttpTextureAssetRef;
  package$kool.LoadedAsset = LoadedAsset;
  package$kool.LoadedRawAsset = LoadedRawAsset;
  package$kool.LoadedTextureAsset = LoadedTextureAsset;
  var package$drawqueue = package$kool.drawqueue || (package$kool.drawqueue = {});
  package$drawqueue.DrawCommand = DrawCommand;
  package$drawqueue.DrawQueue = DrawQueue;
  Object.defineProperty(SceneSetup, 'Companion', {
    get: SceneSetup$Companion_getInstance
  });
  package$drawqueue.SceneSetup = SceneSetup;
  package$kool.EngineStats = EngineStats;
  InputManager.Pointer = InputManager$Pointer;
  Object.defineProperty(InputManager$BufferedPointerInput$UpdateState, 'STARTED', {
    get: InputManager$BufferedPointerInput$UpdateState$STARTED_getInstance
  });
  Object.defineProperty(InputManager$BufferedPointerInput$UpdateState, 'ACTIVE', {
    get: InputManager$BufferedPointerInput$UpdateState$ACTIVE_getInstance
  });
  Object.defineProperty(InputManager$BufferedPointerInput$UpdateState, 'ENDED_BEFORE_STARTED', {
    get: InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_STARTED_getInstance
  });
  Object.defineProperty(InputManager$BufferedPointerInput$UpdateState, 'ENDED_BEFORE_ACTIVE', {
    get: InputManager$BufferedPointerInput$UpdateState$ENDED_BEFORE_ACTIVE_getInstance
  });
  Object.defineProperty(InputManager$BufferedPointerInput$UpdateState, 'ENDED', {
    get: InputManager$BufferedPointerInput$UpdateState$ENDED_getInstance
  });
  Object.defineProperty(InputManager$BufferedPointerInput$UpdateState, 'INVALID', {
    get: InputManager$BufferedPointerInput$UpdateState$INVALID_getInstance
  });
  InputManager$BufferedPointerInput.UpdateState = InputManager$BufferedPointerInput$UpdateState;
  InputManager.BufferedPointerInput = InputManager$BufferedPointerInput;
  InputManager.KeyEventListener = InputManager$KeyEventListener;
  InputManager.KeyEvent = InputManager$KeyEvent;
  InputManager.PointerState = InputManager$PointerState;
  Object.defineProperty(InputManager, 'Companion', {
    get: InputManager$Companion_getInstance
  });
  package$kool.InputManager = InputManager;
  package$kool.KoolContext = KoolContext;
  package$kool.KoolException_init_61zpoe$ = KoolException_init;
  package$kool.KoolException = KoolException;
  var package$math = package$kool.math || (package$kool.math = {});
  package$math.BSpline = BSpline;
  package$math.BSplineVec2f = BSplineVec2f;
  package$math.BSplineVec3f = BSplineVec3f;
  Object.defineProperty(Mat3f, 'Companion', {
    get: Mat3f$Companion_getInstance
  });
  package$math.Mat3f = Mat3f;
  Object.defineProperty(Mat4d, 'Companion', {
    get: Mat4d$Companion_getInstance
  });
  package$math.Mat4d = Mat4d;
  Object.defineProperty(Mat4dStack, 'Companion', {
    get: Mat4dStack$Companion_getInstance
  });
  package$math.Mat4dStack = Mat4dStack;
  Object.defineProperty(Mat4f, 'Companion', {
    get: Mat4f$Companion_getInstance
  });
  package$math.Mat4f = Mat4f;
  Object.defineProperty(Mat4fStack, 'Companion', {
    get: Mat4fStack$Companion_getInstance
  });
  package$math.Mat4fStack = Mat4fStack;
  Object.defineProperty(package$math, 'DEG_2_RAD', {
    get: function () {
      return DEG_2_RAD;
    }
  });
  Object.defineProperty(package$math, 'RAD_2_DEG', {
    get: function () {
      return RAD_2_DEG;
    }
  });
  Object.defineProperty(package$math, 'FUZZY_EQ_F', {
    get: function () {
      return FUZZY_EQ_F;
    }
  });
  Object.defineProperty(package$math, 'FUZZY_EQ_D', {
    get: function () {
      return FUZZY_EQ_D;
    }
  });
  Object.defineProperty(package$math, 'FLT_EPSILON', {
    get: function () {
      return FLT_EPSILON;
    }
  });
  Object.defineProperty(package$math, 'SQRT_1_2', {
    get: function () {
      return SQRT_1_2;
    }
  });
  package$math.toDeg_81szk$ = toDeg;
  package$math.toRad_81szk$ = toRad;
  package$math.toDeg_yrwdxr$ = toDeg_0;
  package$math.toRad_yrwdxr$ = toRad_0;
  package$math.isFuzzyZero_yni7l$ = isFuzzyZero;
  package$math.isFuzzyEqual_y2kzbl$ = isFuzzyEqual;
  package$math.isFuzzyZero_38ydlf$ = isFuzzyZero_0;
  package$math.isFuzzyEqual_yvo9jy$ = isFuzzyEqual_0;
  package$math.clamp_e4yvb3$ = clamp;
  package$math.clamp_wj6e7o$ = clamp_0;
  package$math.clamp_nig4hr$ = clamp_1;
  package$math.triArea_n440fu$ = triArea;
  package$math.triAspectRatio_n440fu$ = triAspectRatio;
  package$math.barycentricWeights_qvgspy$ = barycentricWeights;
  package$math.partition_yk7sjr$ = partition;
  package$math.partition_iuu93u$ = partition_0;
  package$math.partition_sdyu2v$ = partition_1;
  package$math.partition_p3zpdg$ = partition_2;
  package$math.partition_6k0an1$ = partition_3;
  package$math.Plane = Plane;
  package$math.distanceToLine_f1pxpf$ = distanceToLine;
  package$math.sqrDistanceToLine_f1pxpf$ = sqrDistanceToLine;
  package$math.sqrDistancePointToLine_dthv57$ = sqrDistancePointToLine;
  package$math.nearestPointOnLine_lg9eux$ = nearestPointOnLine;
  package$math.distanceToRay_9gh5u0$ = distanceToRay;
  package$math.distanceToRay_f1pxpf$ = distanceToRay_0;
  package$math.sqrDistanceToRay_9gh5u0$ = sqrDistanceToRay;
  package$math.sqrDistanceToRay_f1pxpf$ = sqrDistanceToRay_0;
  package$math.sqrDistancePointToRay_dthv57$ = sqrDistancePointToRay;
  package$math.nearestPointOnRay_lg9eux$ = nearestPointOnRay;
  package$math.distanceToEdge_c0lrd2$ = distanceToEdge;
  package$math.sqrDistanceToEdge_c0lrd2$ = sqrDistanceToEdge;
  package$math.sqrDistancePointToEdge_pb7sfq$ = sqrDistancePointToEdge;
  package$math.nearestPointOnEdge_9o4vz9$ = nearestPointOnEdge;
  package$math.distanceToEdge_f1pxpf$ = distanceToEdge_0;
  package$math.sqrDistanceToEdge_f1pxpf$ = sqrDistanceToEdge_0;
  package$math.sqrDistancePointToEdge_dthv57$ = sqrDistancePointToEdge_0;
  package$math.nearestPointOnEdge_lg9eux$ = nearestPointOnEdge_0;
  package$math.PointDistribution = PointDistribution;
  package$math.CubicPointDistribution = CubicPointDistribution;
  package$math.SphericalPointDistribution = SphericalPointDistribution;
  Object.defineProperty(package$math, 'defaultRandomInstance', {
    get: function () {
      return defaultRandomInstance;
    }
  });
  package$math.randomI = randomI;
  package$math.randomI_vux9f0$ = randomI_0;
  package$math.randomI_n8acyv$ = randomI_1;
  package$math.randomD = randomD;
  package$math.randomD_lu1900$ = randomD_0;
  package$math.randomF = randomF;
  package$math.randomF_dleff0$ = randomF_0;
  package$math.Random = Random_0;
  package$math.Ray = Ray;
  package$math.RayTest = RayTest;
  Object.defineProperty(Vec2f, 'Companion', {
    get: Vec2f$Companion_getInstance
  });
  package$math.Vec2f_init_mx4ult$ = Vec2f_init;
  package$math.Vec2f_init_czzhjp$ = Vec2f_init_0;
  package$math.Vec2f = Vec2f;
  package$math.MutableVec2f_init = MutableVec2f_init;
  package$math.MutableVec2f_init_mx4ult$ = MutableVec2f_init_0;
  package$math.MutableVec2f_init_czzhjp$ = MutableVec2f_init_1;
  package$math.MutableVec2f = MutableVec2f;
  Object.defineProperty(Vec2d, 'Companion', {
    get: Vec2d$Companion_getInstance
  });
  package$math.Vec2d_init_14dthe$ = Vec2d_init;
  package$math.Vec2d_init_czzhjr$ = Vec2d_init_0;
  package$math.Vec2d = Vec2d;
  package$math.MutableVec2d_init = MutableVec2d_init;
  package$math.MutableVec2d_init_14dthe$ = MutableVec2d_init_0;
  package$math.MutableVec2d_init_czzhjr$ = MutableVec2d_init_1;
  package$math.MutableVec2d = MutableVec2d;
  Object.defineProperty(Vec3f, 'Companion', {
    get: Vec3f$Companion_getInstance
  });
  package$math.Vec3f_init_mx4ult$ = Vec3f_init;
  package$math.Vec3f_init_czzhiu$ = Vec3f_init_0;
  package$math.Vec3f = Vec3f;
  package$math.MutableVec3f_init = MutableVec3f_init;
  package$math.MutableVec3f_init_mx4ult$ = MutableVec3f_init_0;
  package$math.MutableVec3f_init_czzhiu$ = MutableVec3f_init_1;
  package$math.MutableVec3f = MutableVec3f;
  Object.defineProperty(Vec3d, 'Companion', {
    get: Vec3d$Companion_getInstance
  });
  package$math.Vec3d_init_14dthe$ = Vec3d_init;
  package$math.Vec3d_init_czzhiw$ = Vec3d_init_0;
  package$math.Vec3d = Vec3d;
  package$math.MutableVec3d_init = MutableVec3d_init;
  package$math.MutableVec3d_init_14dthe$ = MutableVec3d_init_0;
  package$math.MutableVec3d_init_czzhiw$ = MutableVec3d_init_1;
  package$math.MutableVec3d = MutableVec3d;
  Object.defineProperty(Vec4f, 'Companion', {
    get: Vec4f$Companion_getInstance
  });
  package$math.Vec4f_init_mx4ult$ = Vec4f_init;
  package$math.Vec4f_init_2qa7tb$ = Vec4f_init_0;
  package$math.Vec4f_init_czzhhz$ = Vec4f_init_1;
  package$math.Vec4f = Vec4f;
  package$math.MutableVec4f_init = MutableVec4f_init;
  package$math.MutableVec4f_init_mx4ult$ = MutableVec4f_init_0;
  package$math.MutableVec4f_init_2qa7tb$ = MutableVec4f_init_1;
  package$math.MutableVec4f_init_czzhhz$ = MutableVec4f_init_2;
  package$math.MutableVec4f = MutableVec4f;
  Object.defineProperty(Vec4d, 'Companion', {
    get: Vec4d$Companion_getInstance
  });
  package$math.Vec4d_init_14dthe$ = Vec4d_init;
  package$math.Vec4d_init_6nz8ey$ = Vec4d_init_0;
  package$math.Vec4d_init_czzhi1$ = Vec4d_init_1;
  package$math.Vec4d = Vec4d;
  package$math.MutableVec4d_init = MutableVec4d_init;
  package$math.MutableVec4d_init_14dthe$ = MutableVec4d_init_0;
  package$math.MutableVec4d_init_6nz8ey$ = MutableVec4d_init_1;
  package$math.MutableVec4d_init_czzhi1$ = MutableVec4d_init_2;
  package$math.MutableVec4d = MutableVec4d;
  package$math.add_drouu$ = add;
  package$math.add_4lfkt4$ = add_0;
  package$math.add_8t3gre$ = add_1;
  package$math.add_w6t53u$ = add_2;
  package$math.add_ymn0x0$ = add_3;
  package$math.add_uez4yq$ = add_4;
  package$math.subtract_drouu$ = subtract;
  package$math.subtract_4lfkt4$ = subtract_0;
  package$math.subtract_8t3gre$ = subtract_1;
  package$math.subtract_w6t53u$ = subtract_2;
  package$math.subtract_ymn0x0$ = subtract_3;
  package$math.subtract_uez4yq$ = subtract_4;
  package$math.scale_rnua8g$ = scale;
  package$math.scale_2qa7tb$ = scale_0;
  package$math.scale_m79ulu$ = scale_1;
  package$math.scale_f3xr3v$ = scale_2;
  package$math.scale_6nz8ey$ = scale_3;
  package$math.scale_1rza9z$ = scale_4;
  package$math.norm_czzhjp$ = norm;
  package$math.norm_czzhiu$ = norm_0;
  package$math.norm_czzhjr$ = norm_1;
  package$math.norm_czzhiw$ = norm_2;
  package$math.cross_4lfkt4$ = cross;
  package$math.cross_ymn0x0$ = cross_0;
  package$math.xy_n748o5$ = xy;
  package$math.xy_xvcky9$ = xy_0;
  package$math.slerp_m26pjg$ = slerp;
  package$math.slerp_nr5s3x$ = slerp_0;
  var package$modules = package$kool.modules || (package$kool.modules = {});
  var package$audio = package$modules.audio || (package$modules.audio = {});
  package$audio.LowPassFilter = LowPassFilter;
  package$audio.HighPassFilter = HighPassFilter;
  Object.defineProperty(MoodFilter, 'Companion', {
    get: MoodFilter$Companion_getInstance
  });
  package$audio.MoodFilter = MoodFilter;
  package$audio.HiHat = HiHat;
  package$audio.Kick = Kick;
  package$audio.Melody = Melody;
  package$audio.Oscillator = Oscillator;
  package$audio.Pad = Pad;
  Object.defineProperty(SampleNode, 'Companion', {
    get: SampleNode$Companion_getInstance
  });
  package$audio.SampleNode = SampleNode;
  package$audio.Shaker = Shaker;
  package$audio.Snare = Snare;
  Object.defineProperty(Wave, 'Companion', {
    get: Wave$Companion_getInstance
  });
  package$audio.Wave = Wave;
  HalfEdgeMesh.EdgeHandler = HalfEdgeMesh$EdgeHandler;
  HalfEdgeMesh.HalfEdgeVertex = HalfEdgeMesh$HalfEdgeVertex;
  HalfEdgeMesh.HalfEdge = HalfEdgeMesh$HalfEdge;
  var package$mesh = package$modules.mesh || (package$modules.mesh = {});
  package$mesh.HalfEdgeMesh = HalfEdgeMesh;
  package$mesh.ListEdgeHandler = ListEdgeHandler;
  Object.defineProperty(MeshCutXy, 'Companion', {
    get: MeshCutXy$Companion_getInstance
  });
  package$mesh.MeshCutXy = MeshCutXy;
  Object.defineProperty(OcTreeEdgeHandler$Companion.prototype, 'HalfEdgeAdapter', {
    get: OcTreeEdgeHandler$Companion$HalfEdgeAdapter_getInstance
  });
  Object.defineProperty(OcTreeEdgeHandler, 'Companion', {
    get: OcTreeEdgeHandler$Companion_getInstance
  });
  package$mesh.OcTreeEdgeHandler_init_r7nl2o$ = OcTreeEdgeHandler_init;
  package$mesh.OcTreeEdgeHandler = OcTreeEdgeHandler;
  var package$simplification = package$mesh.simplification || (package$mesh.simplification = {});
  package$simplification.CollapseStrategy = CollapseStrategy;
  package$simplification.defaultCollapseStrategy = defaultCollapseStrategy;
  package$simplification.ErrorQuadric = ErrorQuadric;
  package$simplification.simplify_3lj9ku$ = simplify;
  package$simplification.simplify_hem9$ = simplify_0;
  package$simplification.MeshSimplifier = MeshSimplifier;
  package$simplification.TermCriterion = TermCriterion;
  package$simplification.terminateOnFaceCountRel_14dthe$ = terminateOnFaceCountRel;
  package$simplification.terminateOnFaceCountAbs_za3lpa$ = terminateOnFaceCountAbs;
  package$simplification.terminateOnError_14dthe$ = terminateOnError;
  Object.defineProperty(GlslType, 'FLOAT', {
    get: GlslType$FLOAT_getInstance
  });
  Object.defineProperty(GlslType, 'VEC_2F', {
    get: GlslType$VEC_2F_getInstance
  });
  Object.defineProperty(GlslType, 'VEC_3F', {
    get: GlslType$VEC_3F_getInstance
  });
  Object.defineProperty(GlslType, 'VEC_4F', {
    get: GlslType$VEC_4F_getInstance
  });
  Object.defineProperty(GlslType, 'INT', {
    get: GlslType$INT_getInstance
  });
  Object.defineProperty(GlslType, 'VEC_2I', {
    get: GlslType$VEC_2I_getInstance
  });
  Object.defineProperty(GlslType, 'VEC_3I', {
    get: GlslType$VEC_3I_getInstance
  });
  Object.defineProperty(GlslType, 'VEC_4I', {
    get: GlslType$VEC_4I_getInstance
  });
  Object.defineProperty(GlslType, 'MAT_2F', {
    get: GlslType$MAT_2F_getInstance
  });
  Object.defineProperty(GlslType, 'MAT_3F', {
    get: GlslType$MAT_3F_getInstance
  });
  Object.defineProperty(GlslType, 'MAT_4F', {
    get: GlslType$MAT_4F_getInstance
  });
  var package$pipeline = package$kool.pipeline || (package$kool.pipeline = {});
  package$pipeline.GlslType = GlslType;
  Object.defineProperty(Attribute, 'Companion', {
    get: Attribute$Companion_getInstance
  });
  package$pipeline.Attribute = Attribute;
  package$pipeline.DepthMapPass = DepthMapPass;
  package$pipeline.LinearDepthMapPass = LinearDepthMapPass;
  package$pipeline.NormalLinearDepthMapPass = NormalLinearDepthMapPass;
  DescriptorSetLayout.Builder = DescriptorSetLayout$Builder;
  package$pipeline.DescriptorSetLayout = DescriptorSetLayout;
  Descriptor.Builder = Descriptor$Builder;
  package$pipeline.Descriptor = Descriptor;
  TextureSampler.Builder = TextureSampler$Builder;
  package$pipeline.TextureSampler = TextureSampler;
  CubeMapSampler.Builder = CubeMapSampler$Builder;
  package$pipeline.CubeMapSampler = CubeMapSampler;
  UniformBuffer.Builder = UniformBuffer$Builder;
  package$pipeline.UniformBuffer = UniformBuffer;
  Object.defineProperty(DescriptorType, 'IMAGE_SAMPLER', {
    get: DescriptorType$IMAGE_SAMPLER_getInstance
  });
  Object.defineProperty(DescriptorType, 'CUBE_IMAGE_SAMPLER', {
    get: DescriptorType$CUBE_IMAGE_SAMPLER_getInstance
  });
  Object.defineProperty(DescriptorType, 'UNIFORM_BUFFER', {
    get: DescriptorType$UNIFORM_BUFFER_getInstance
  });
  package$pipeline.DescriptorType = DescriptorType;
  package$pipeline.LoadedTexture = LoadedTexture;
  package$pipeline.OffscreenRenderPass = OffscreenRenderPass;
  package$pipeline.OffscreenRenderPass2d = OffscreenRenderPass2d;
  package$pipeline.OffscreenRenderPass2dMrt = OffscreenRenderPass2dMrt;
  Object.defineProperty(OffscreenRenderPassCube$ViewDirection, 'FRONT', {
    get: OffscreenRenderPassCube$ViewDirection$FRONT_getInstance
  });
  Object.defineProperty(OffscreenRenderPassCube$ViewDirection, 'BACK', {
    get: OffscreenRenderPassCube$ViewDirection$BACK_getInstance
  });
  Object.defineProperty(OffscreenRenderPassCube$ViewDirection, 'LEFT', {
    get: OffscreenRenderPassCube$ViewDirection$LEFT_getInstance
  });
  Object.defineProperty(OffscreenRenderPassCube$ViewDirection, 'RIGHT', {
    get: OffscreenRenderPassCube$ViewDirection$RIGHT_getInstance
  });
  Object.defineProperty(OffscreenRenderPassCube$ViewDirection, 'UP', {
    get: OffscreenRenderPassCube$ViewDirection$UP_getInstance
  });
  Object.defineProperty(OffscreenRenderPassCube$ViewDirection, 'DOWN', {
    get: OffscreenRenderPassCube$ViewDirection$DOWN_getInstance
  });
  OffscreenRenderPassCube.ViewDirection = OffscreenRenderPassCube$ViewDirection;
  package$pipeline.OffscreenRenderPassCube = OffscreenRenderPassCube;
  Pipeline.BuildContext = Pipeline$BuildContext;
  Pipeline.Builder = Pipeline$Builder;
  Object.defineProperty(Pipeline, 'Companion', {
    get: Pipeline$Companion_getInstance
  });
  package$pipeline.Pipeline = Pipeline;
  package$pipeline.PipelineFactory = PipelineFactory;
  Object.defineProperty(BlendMode, 'DISABLED', {
    get: BlendMode$DISABLED_getInstance
  });
  Object.defineProperty(BlendMode, 'BLEND_ADDITIVE', {
    get: BlendMode$BLEND_ADDITIVE_getInstance
  });
  Object.defineProperty(BlendMode, 'BLEND_MULTIPLY_ALPHA', {
    get: BlendMode$BLEND_MULTIPLY_ALPHA_getInstance
  });
  Object.defineProperty(BlendMode, 'BLEND_PREMULTIPLIED_ALPHA', {
    get: BlendMode$BLEND_PREMULTIPLIED_ALPHA_getInstance
  });
  package$pipeline.BlendMode = BlendMode;
  Object.defineProperty(DepthCompareOp, 'DISABLED', {
    get: DepthCompareOp$DISABLED_getInstance
  });
  Object.defineProperty(DepthCompareOp, 'ALWAYS', {
    get: DepthCompareOp$ALWAYS_getInstance
  });
  Object.defineProperty(DepthCompareOp, 'LESS', {
    get: DepthCompareOp$LESS_getInstance
  });
  Object.defineProperty(DepthCompareOp, 'LESS_EQUAL', {
    get: DepthCompareOp$LESS_EQUAL_getInstance
  });
  Object.defineProperty(DepthCompareOp, 'GREATER', {
    get: DepthCompareOp$GREATER_getInstance
  });
  Object.defineProperty(DepthCompareOp, 'GREATER_EQUAL', {
    get: DepthCompareOp$GREATER_EQUAL_getInstance
  });
  package$pipeline.DepthCompareOp = DepthCompareOp;
  Object.defineProperty(CullMethod, 'DEFAULT', {
    get: CullMethod$DEFAULT_getInstance
  });
  Object.defineProperty(CullMethod, 'CULL_BACK_FACES', {
    get: CullMethod$CULL_BACK_FACES_getInstance
  });
  Object.defineProperty(CullMethod, 'CULL_FRONT_FACES', {
    get: CullMethod$CULL_FRONT_FACES_getInstance
  });
  Object.defineProperty(CullMethod, 'NO_CULLING', {
    get: CullMethod$NO_CULLING_getInstance
  });
  package$pipeline.CullMethod = CullMethod;
  PushConstantRange.Builder = PushConstantRange$Builder;
  package$pipeline.PushConstantRange = PushConstantRange;
  Object.defineProperty(RenderPass$Type, 'COLOR', {
    get: RenderPass$Type$COLOR_getInstance
  });
  Object.defineProperty(RenderPass$Type, 'DEPTH', {
    get: RenderPass$Type$DEPTH_getInstance
  });
  RenderPass.Type = RenderPass$Type;
  package$pipeline.RenderPass = RenderPass;
  package$pipeline.ScreenRenderPass = ScreenRenderPass;
  Object.defineProperty(CodeGenerator$ClipSpaceOrientation, 'Y_UP', {
    get: CodeGenerator$ClipSpaceOrientation$Y_UP_getInstance
  });
  Object.defineProperty(CodeGenerator$ClipSpaceOrientation, 'Y_DOWN', {
    get: CodeGenerator$ClipSpaceOrientation$Y_DOWN_getInstance
  });
  CodeGenerator.ClipSpaceOrientation = CodeGenerator$ClipSpaceOrientation;
  var package$shadermodel = package$pipeline.shadermodel || (package$pipeline.shadermodel = {});
  package$shadermodel.CodeGenerator = CodeGenerator;
  package$shadermodel.ColorAlphaNode = ColorAlphaNode;
  package$shadermodel.PremultiplyColorNode = PremultiplyColorNode;
  package$shadermodel.GammaNode = GammaNode;
  package$shadermodel.HdrToLdrNode = HdrToLdrNode;
  package$shadermodel.FragmentColorOutNode = FragmentColorOutNode;
  package$shadermodel.FragmentDepthOutNode = FragmentDepthOutNode;
  package$shadermodel.LightNode = LightNode;
  package$shadermodel.MultiLightNode = MultiLightNode;
  package$shadermodel.SingleLightUniformDataNode = SingleLightUniformDataNode;
  package$shadermodel.SingleLightNode = SingleLightNode;
  package$shadermodel.UnlitMaterialNode = UnlitMaterialNode;
  package$shadermodel.PhongMaterialNode = PhongMaterialNode;
  package$shadermodel.PbrMaterialNode = PbrMaterialNode;
  package$shadermodel.PbrLightNode = PbrLightNode;
  package$shadermodel.MathOpNode = MathOpNode;
  package$shadermodel.AddNode = AddNode;
  package$shadermodel.SubtractNode = SubtractNode;
  package$shadermodel.DivideNode = DivideNode;
  package$shadermodel.MultiplyNode = MultiplyNode;
  package$shadermodel.NormalizeNode = NormalizeNode;
  package$shadermodel.ModelVar = ModelVar;
  package$shadermodel.ModelVar1f = ModelVar1f;
  package$shadermodel.ModelVar2f = ModelVar2f;
  package$shadermodel.ModelVar3f = ModelVar3f;
  package$shadermodel.ModelVar4f = ModelVar4f;
  package$shadermodel.ModelVar1i = ModelVar1i;
  package$shadermodel.ModelVar2i = ModelVar2i;
  package$shadermodel.ModelVar3i = ModelVar3i;
  package$shadermodel.ModelVar4i = ModelVar4i;
  package$shadermodel.ModelVarMat2f = ModelVarMat2f;
  package$shadermodel.ModelVarMat3f = ModelVarMat3f;
  package$shadermodel.ModelVarMat4f = ModelVarMat4f;
  package$shadermodel.ModelVar1fConst = ModelVar1fConst;
  package$shadermodel.ModelVar2fConst = ModelVar2fConst;
  package$shadermodel.ModelVar3fConst = ModelVar3fConst;
  package$shadermodel.ModelVar4fConst = ModelVar4fConst;
  package$shadermodel.ModelVar1iConst = ModelVar1iConst;
  package$shadermodel.ModelVar2iConst = ModelVar2iConst;
  package$shadermodel.ModelVar3iConst = ModelVar3iConst;
  package$shadermodel.ModelVar4iConst = ModelVar4iConst;
  package$shadermodel.ShaderGenerator = ShaderGenerator;
  package$shadermodel.ShaderInterfaceIoVar = ShaderInterfaceIoVar;
  package$shadermodel.ShaderGraph = ShaderGraph;
  package$shadermodel.VertexShaderGraph = VertexShaderGraph;
  package$shadermodel.FragmentShaderGraph = FragmentShaderGraph;
  package$pipeline.ShaderStage = ShaderStage;
  ShaderModel.StageBuilder = ShaderModel$StageBuilder;
  ShaderModel.VertexStageBuilder = ShaderModel$VertexStageBuilder;
  ShaderModel.FragmentStageBuilder = ShaderModel$FragmentStageBuilder;
  package$shadermodel.ShaderModel = ShaderModel;
  package$shadermodel.vertexStage_u626m1$ = vertexStage;
  package$shadermodel.fragmentStage_9jxysb$ = fragmentStage;
  package$shadermodel.ShaderNode = ShaderNode;
  package$shadermodel.ShaderNodeIoVar = ShaderNodeIoVar;
  package$shadermodel.ShadowMapNode = ShadowMapNode;
  package$shadermodel.SimpleShadowMapNode = SimpleShadowMapNode;
  package$shadermodel.SimpleShadowMapTransformNode = SimpleShadowMapTransformNode;
  package$shadermodel.SimpleShadowMapFragmentNode = SimpleShadowMapFragmentNode;
  package$shadermodel.CascadedShadowMapNode = CascadedShadowMapNode;
  package$shadermodel.CascadedShadowMapTransformNode = CascadedShadowMapTransformNode;
  package$shadermodel.CascadedShadowMapFragmentNode = CascadedShadowMapFragmentNode;
  package$shadermodel.Vec3TransformNode = Vec3TransformNode;
  package$shadermodel.Vec4TransformNode = Vec4TransformNode;
  UniformBufferPremultipliedMvp.StageCopy = UniformBufferPremultipliedMvp$StageCopy;
  package$shadermodel.UniformBufferPremultipliedMvp = UniformBufferPremultipliedMvp;
  UniformBufferMvp.StageCopy = UniformBufferMvp$StageCopy;
  package$shadermodel.UniformBufferMvp = UniformBufferMvp;
  package$shadermodel.TextureNode = TextureNode;
  package$shadermodel.CubeMapNode = CubeMapNode;
  package$shadermodel.PushConstantNode = PushConstantNode;
  package$shadermodel.PushConstantNode1f = PushConstantNode1f;
  package$shadermodel.PushConstantNode2f = PushConstantNode2f;
  package$shadermodel.PushConstantNode3f = PushConstantNode3f;
  package$shadermodel.PushConstantNode4f = PushConstantNode4f;
  package$shadermodel.PushConstantNodeColor = PushConstantNodeColor;
  package$shadermodel.TextureSamplerNode = TextureSamplerNode;
  package$shadermodel.CubeMapSamplerNode = CubeMapSamplerNode;
  package$shadermodel.EquiRectSamplerNode = EquiRectSamplerNode;
  package$shadermodel.AoMapSampleNode = AoMapSampleNode;
  package$shadermodel.NormalMapNode = NormalMapNode;
  package$shadermodel.DisplacementMapNode = DisplacementMapNode;
  package$shadermodel.ChannelNode = ChannelNode;
  package$shadermodel.AttributeNode = AttributeNode;
  package$shadermodel.InstanceAttributeNode = InstanceAttributeNode;
  package$shadermodel.StageInterfaceNode = StageInterfaceNode;
  package$shadermodel.FullScreenQuadTexPosNode = FullScreenQuadTexPosNode;
  Object.defineProperty(ShaderStage, 'VERTEX_SHADER', {
    get: ShaderStage$VERTEX_SHADER_getInstance
  });
  Object.defineProperty(ShaderStage, 'TESSELEATION_CTRL', {
    get: ShaderStage$TESSELEATION_CTRL_getInstance
  });
  Object.defineProperty(ShaderStage, 'TESSELATION_EVAL', {
    get: ShaderStage$TESSELATION_EVAL_getInstance
  });
  Object.defineProperty(ShaderStage, 'GEOMETRY_SHADER', {
    get: ShaderStage$GEOMETRY_SHADER_getInstance
  });
  Object.defineProperty(ShaderStage, 'FRAGMENT_SHADER', {
    get: ShaderStage$FRAGMENT_SHADER_getInstance
  });
  Object.defineProperty(ShaderStage, 'ALL', {
    get: ShaderStage$ALL_getInstance
  });
  Object.defineProperty(Albedo, 'STATIC_ALBEDO', {
    get: Albedo$STATIC_ALBEDO_getInstance
  });
  Object.defineProperty(Albedo, 'TEXTURE_ALBEDO', {
    get: Albedo$TEXTURE_ALBEDO_getInstance
  });
  Object.defineProperty(Albedo, 'VERTEX_ALBEDO', {
    get: Albedo$VERTEX_ALBEDO_getInstance
  });
  var package$shading = package$pipeline.shading || (package$pipeline.shading = {});
  package$shading.Albedo = Albedo;
  package$shading.CustomShader = CustomShader;
  ModeledShader.StaticColor = ModeledShader$StaticColor;
  ModeledShader.VertexColor = ModeledShader$VertexColor;
  ModeledShader.TextureColor = ModeledShader$TextureColor;
  ModeledShader.CubeMapColor = ModeledShader$CubeMapColor;
  Object.defineProperty(ModeledShader, 'Companion', {
    get: ModeledShader$Companion_getInstance
  });
  package$shading.ModeledShader = ModeledShader;
  package$shading.pbrShader_zfwrfj$ = pbrShader;
  Object.defineProperty(PbrShader, 'Companion', {
    get: PbrShader$Companion_getInstance
  });
  PbrShader.PbrConfig = PbrShader$PbrConfig;
  package$shading.PbrShader = PbrShader;
  package$shading.phongShader_avt1hd$ = phongShader;
  Object.defineProperty(PhongShader, 'Companion', {
    get: PhongShader$Companion_getInstance
  });
  PhongShader.PhongConfig = PhongShader$PhongConfig;
  package$shading.PhongShader = PhongShader;
  package$shading.Shader = Shader;
  package$pipeline.Std140Layout = Std140Layout;
  Object.defineProperty(TexFormat, 'R', {
    get: TexFormat$R_getInstance
  });
  Object.defineProperty(TexFormat, 'RG', {
    get: TexFormat$RG_getInstance
  });
  Object.defineProperty(TexFormat, 'RGB', {
    get: TexFormat$RGB_getInstance
  });
  Object.defineProperty(TexFormat, 'RGBA', {
    get: TexFormat$RGBA_getInstance
  });
  Object.defineProperty(TexFormat, 'R_F16', {
    get: TexFormat$R_F16_getInstance
  });
  Object.defineProperty(TexFormat, 'RG_F16', {
    get: TexFormat$RG_F16_getInstance
  });
  Object.defineProperty(TexFormat, 'RGB_F16', {
    get: TexFormat$RGB_F16_getInstance
  });
  Object.defineProperty(TexFormat, 'RGBA_F16', {
    get: TexFormat$RGBA_F16_getInstance
  });
  package$pipeline.TexFormat = TexFormat;
  Object.defineProperty(Texture$LoadingState, 'NOT_LOADED', {
    get: Texture$LoadingState$NOT_LOADED_getInstance
  });
  Object.defineProperty(Texture$LoadingState, 'LOADING', {
    get: Texture$LoadingState$LOADING_getInstance
  });
  Object.defineProperty(Texture$LoadingState, 'LOADED', {
    get: Texture$LoadingState$LOADED_getInstance
  });
  Object.defineProperty(Texture$LoadingState, 'LOADING_FAILED', {
    get: Texture$LoadingState$LOADING_FAILED_getInstance
  });
  Texture.LoadingState = Texture$LoadingState;
  Object.defineProperty(Texture, 'Companion', {
    get: Texture$Companion_getInstance
  });
  package$pipeline.Texture = Texture;
  Object.defineProperty(SingleColorTexture, 'Companion', {
    get: SingleColorTexture$Companion_getInstance
  });
  package$pipeline.SingleColorTexture = SingleColorTexture;
  package$pipeline.CubeMapTexture = CubeMapTexture;
  package$pipeline.TextureProps = TextureProps;
  Object.defineProperty(FilterMethod, 'NEAREST', {
    get: FilterMethod$NEAREST_getInstance
  });
  Object.defineProperty(FilterMethod, 'LINEAR', {
    get: FilterMethod$LINEAR_getInstance
  });
  package$pipeline.FilterMethod = FilterMethod;
  Object.defineProperty(AddressMode, 'CLAMP_TO_BORDER', {
    get: AddressMode$CLAMP_TO_BORDER_getInstance
  });
  Object.defineProperty(AddressMode, 'CLAMP_TO_EDGE', {
    get: AddressMode$CLAMP_TO_EDGE_getInstance
  });
  Object.defineProperty(AddressMode, 'MIRRORED_REPEAT', {
    get: AddressMode$MIRRORED_REPEAT_getInstance
  });
  Object.defineProperty(AddressMode, 'REPEAT', {
    get: AddressMode$REPEAT_getInstance
  });
  package$pipeline.AddressMode = AddressMode;
  package$pipeline.TextureData = TextureData;
  Object.defineProperty(BufferedTextureData, 'Companion', {
    get: BufferedTextureData$Companion_getInstance
  });
  package$pipeline.BufferedTextureData = BufferedTextureData;
  package$pipeline.CubeMapTextureData = CubeMapTextureData;
  package$pipeline.Uniform = Uniform;
  package$pipeline.Uniform1f_init_1isgrl$ = Uniform1f_init;
  package$pipeline.Uniform1f = Uniform1f;
  package$pipeline.Uniform2f_init_14bd4t$ = Uniform2f_init;
  package$pipeline.Uniform2f = Uniform2f;
  package$pipeline.Uniform3f_init_7bn5k4$ = Uniform3f_init;
  package$pipeline.Uniform3f = Uniform3f;
  package$pipeline.Uniform4f_init_frlo91$ = Uniform4f_init;
  package$pipeline.Uniform4f = Uniform4f;
  package$pipeline.UniformColor_init_1sp4cy$ = UniformColor_init;
  package$pipeline.UniformColor = UniformColor;
  package$pipeline.Uniform1fv = Uniform1fv;
  package$pipeline.Uniform2fv = Uniform2fv;
  package$pipeline.Uniform3fv = Uniform3fv;
  package$pipeline.Uniform4fv = Uniform4fv;
  package$pipeline.UniformMat3f = UniformMat3f;
  package$pipeline.UniformMat4f = UniformMat4f;
  package$pipeline.UniformMat4fv = UniformMat4fv;
  package$pipeline.Uniform1i_init_19mbxw$ = Uniform1i_init;
  package$pipeline.Uniform1i = Uniform1i;
  package$pipeline.Uniform1iv = Uniform1iv;
  VertexLayout.Binding = VertexLayout$Binding;
  VertexLayout.VertexAttribute = VertexLayout$VertexAttribute;
  VertexLayout.Builder = VertexLayout$Builder;
  package$pipeline.VertexLayout = VertexLayout;
  Object.defineProperty(InputRate, 'VERTEX', {
    get: InputRate$VERTEX_getInstance
  });
  Object.defineProperty(InputRate, 'INSTANCE', {
    get: InputRate$INSTANCE_getInstance
  });
  package$pipeline.InputRate = InputRate;
  package$kool.toString_lcymw2$ = toString_0;
  var package$scene = package$kool.scene || (package$kool.scene = {});
  var package$animation = package$scene.animation || (package$scene.animation = {});
  package$animation.Animation = Animation;
  Object.defineProperty(Armature, 'Companion', {
    get: Armature$Companion_getInstance
  });
  package$animation.Armature = Armature;
  package$animation.Bone = Bone;
  package$animation.AnimatedNode = AnimatedNode;
  package$animation.NodeAnimation = NodeAnimation;
  package$animation.AnimationKey = AnimationKey;
  package$animation.RotationKey = RotationKey;
  package$animation.PositionKey = PositionKey;
  package$animation.ScalingKey = ScalingKey;
  Object.defineProperty(Camera$ProjCorrectionMode, 'NONE', {
    get: Camera$ProjCorrectionMode$NONE_getInstance
  });
  Object.defineProperty(Camera$ProjCorrectionMode, 'ONSCREEN', {
    get: Camera$ProjCorrectionMode$ONSCREEN_getInstance
  });
  Object.defineProperty(Camera$ProjCorrectionMode, 'OFFSCREEN', {
    get: Camera$ProjCorrectionMode$OFFSCREEN_getInstance
  });
  Camera.ProjCorrectionMode = Camera$ProjCorrectionMode;
  package$scene.Camera = Camera;
  package$scene.OrthographicCamera = OrthographicCamera;
  package$scene.PerspectiveCamera = PerspectiveCamera;
  package$scene.FrustumPlane = FrustumPlane;
  package$scene.group_2ylazs$ = group;
  package$scene.Group = Group;
  package$scene.Lighting = Lighting;
  Object.defineProperty(Light$Type, 'DIRECTIONAL', {
    get: Light$Type$DIRECTIONAL_getInstance
  });
  Object.defineProperty(Light$Type, 'POINT', {
    get: Light$Type$POINT_getInstance
  });
  Object.defineProperty(Light$Type, 'SPOT', {
    get: Light$Type$SPOT_getInstance
  });
  Light.Type = Light$Type;
  package$scene.Light = Light;
  package$scene.lineMesh_sokaj4$ = lineMesh;
  package$scene.wireframeMesh_hjnvxh$ = wireframeMesh;
  package$scene.normalMesh_325j0g$ = normalMesh;
  package$scene.LineMesh = LineMesh;
  package$scene.mesh_ycs46o$ = mesh;
  package$scene.colorMesh_gp9ews$ = colorMesh;
  package$scene.textMesh_8mgi8m$ = textMesh;
  package$scene.textureMesh_pyaqjj$ = textureMesh;
  Object.defineProperty(Mesh, 'Companion', {
    get: Mesh$Companion_getInstance
  });
  package$scene.Mesh = Mesh;
  Object.defineProperty(MeshRayTest, 'Companion', {
    get: MeshRayTest$Companion_getInstance
  });
  package$scene.MeshRayTest = MeshRayTest;
  Object.defineProperty(Node, 'Companion', {
    get: Node$Companion_getInstance
  });
  package$scene.Node = Node;
  package$scene.orbitInputTransform_uj7ww7$ = orbitInputTransform;
  package$scene.defaultCamTransform_v4keia$ = defaultCamTransform;
  Object.defineProperty(OrbitInputTransform$DragMethod, 'NONE', {
    get: OrbitInputTransform$DragMethod$NONE_getInstance
  });
  Object.defineProperty(OrbitInputTransform$DragMethod, 'ROTATE', {
    get: OrbitInputTransform$DragMethod$ROTATE_getInstance
  });
  Object.defineProperty(OrbitInputTransform$DragMethod, 'PAN', {
    get: OrbitInputTransform$DragMethod$PAN_getInstance
  });
  OrbitInputTransform.DragMethod = OrbitInputTransform$DragMethod;
  Object.defineProperty(OrbitInputTransform$ZoomMethod, 'ZOOM_CENTER', {
    get: OrbitInputTransform$ZoomMethod$ZOOM_CENTER_getInstance
  });
  Object.defineProperty(OrbitInputTransform$ZoomMethod, 'ZOOM_TRANSLATE', {
    get: OrbitInputTransform$ZoomMethod$ZOOM_TRANSLATE_getInstance
  });
  OrbitInputTransform.ZoomMethod = OrbitInputTransform$ZoomMethod;
  package$scene.OrbitInputTransform = OrbitInputTransform;
  package$scene.PanBase = PanBase;
  package$scene.CameraOrthogonalPan = CameraOrthogonalPan;
  package$scene.FixedPlanePan = FixedPlanePan;
  package$scene.xPlanePan = xPlanePan;
  package$scene.yPlanePan = yPlanePan;
  package$scene.zPlanePan = zPlanePan;
  package$scene.pointMesh_zhxjay$ = pointMesh;
  package$scene.PointMesh = PointMesh;
  package$scene.scene_13di2z$ = scene;
  Scene.DragHandler = Scene$DragHandler;
  package$scene.Scene = Scene;
  package$scene.Skybox_init_r3y0ew$ = Skybox_init;
  package$scene.Skybox = Skybox;
  package$scene.Tags = Tags;
  package$scene.transformGroup_zaezuq$ = transformGroup;
  package$scene.TransformGroup = TransformGroup;
  var package$ui = package$scene.ui || (package$scene.ui = {});
  package$ui.Button = Button;
  package$ui.ButtonUi = ButtonUi;
  package$ui.ComponentUi = ComponentUi;
  package$ui.BlankComponentUi = BlankComponentUi;
  package$ui.SimpleComponentUi = SimpleComponentUi;
  package$ui.BlurredComponentUi = BlurredComponentUi;
  package$ui.DrawerMenu = DrawerMenu;
  package$ui.Label = Label;
  package$ui.LabelUi = LabelUi;
  package$ui.LayoutSpec = LayoutSpec;
  Object.defineProperty(SizeUnit, 'UN', {
    get: SizeUnit$UN_getInstance
  });
  Object.defineProperty(SizeUnit, 'DP', {
    get: SizeUnit$DP_getInstance
  });
  Object.defineProperty(SizeUnit, 'MM', {
    get: SizeUnit$MM_getInstance
  });
  Object.defineProperty(SizeUnit, 'PC', {
    get: SizeUnit$PC_getInstance
  });
  package$ui.SizeUnit = SizeUnit;
  package$ui.zero = zero;
  package$ui.full = full;
  package$ui.uns_8ca0d4$ = uns;
  package$ui.dps_8ca0d4$ = dps;
  package$ui.mms_8ca0d4$ = mms;
  package$ui.pcs_8ca0d4$ = pcs;
  package$ui.pc_dleff0$ = pc;
  package$ui.dp_dleff0$ = dp;
  package$ui.mm_dleff0$ = mm;
  package$ui.pcW_wl4j30$ = pcW;
  package$ui.pcH_wl4j30$ = pcH;
  package$ui.pcD_wl4j30$ = pcD;
  package$ui.dp_wl4j30$ = dp_0;
  package$ui.mm_wl4j30$ = mm_0;
  package$ui.pcR_dleff0$ = pcR;
  package$ui.dpR_dleff0$ = dpR;
  package$ui.mmR_dleff0$ = mmR;
  package$ui.pcWR_wl4j30$ = pcWR;
  package$ui.pcHR_wl4j30$ = pcHR;
  package$ui.pcDR_wl4j30$ = pcDR;
  package$ui.dpR_wl4j30$ = dpR_0;
  package$ui.mmR_wl4j30$ = mmR_0;
  package$ui.SizeSpec = SizeSpec;
  package$ui.Margin = Margin;
  package$ui.Gravity = Gravity;
  Object.defineProperty(Alignment, 'START', {
    get: Alignment$START_getInstance
  });
  Object.defineProperty(Alignment, 'CENTER', {
    get: Alignment$CENTER_getInstance
  });
  Object.defineProperty(Alignment, 'END', {
    get: Alignment$END_getInstance
  });
  package$ui.Alignment = Alignment;
  package$ui.ScrollHandler = ScrollHandler;
  package$ui.ScrollHandlerUi = ScrollHandlerUi;
  package$ui.Slider = Slider;
  package$ui.SliderUi = SliderUi;
  package$ui.TextField = TextField;
  package$ui.TextFieldUi = TextFieldUi;
  Object.defineProperty(EditableText, 'Companion', {
    get: EditableText$Companion_getInstance
  });
  package$ui.EditableText = EditableText;
  package$ui.ToggleButton = ToggleButton;
  package$ui.ToggleButtonUi = ToggleButtonUi;
  package$ui.UiComponent = UiComponent;
  package$ui.UiContainer = UiContainer;
  package$ui.embeddedUi_4gy91$ = embeddedUi;
  package$ui.uiScene_m9o5w1$ = uiScene;
  package$ui.UiRoot = UiRoot;
  Object.defineProperty(UiShader, 'Companion', {
    get: UiShader$Companion_getInstance
  });
  package$ui.UiShader = UiShader;
  Object.defineProperty(UiTheme, 'Companion', {
    get: UiTheme$Companion_getInstance
  });
  package$ui.UiTheme = UiTheme;
  package$ui.standardFont_mt8j6u$ = standardFont;
  package$ui.titleFont_mt8j6u$ = titleFont;
  package$ui.theme_vvurn$ = theme;
  package$ui.ThemeBuilder = ThemeBuilder;
  package$ui.ThemeOrCustomProp = ThemeOrCustomProp;
  Object.defineProperty(Animator, 'Companion', {
    get: Animator$Companion_getInstance
  });
  var package$util = package$kool.util || (package$kool.util = {});
  package$util.Animator = Animator;
  package$util.LinearAnimator = LinearAnimator;
  package$util.CosAnimator = CosAnimator;
  package$util.InterpolatedValue = InterpolatedValue;
  package$util.InterpolatedFloat = InterpolatedFloat;
  package$util.InterpolatedColor = InterpolatedColor;
  package$util.SpringDamperFloat = SpringDamperFloat;
  package$util.SpringDamperDouble = SpringDamperDouble;
  Object.defineProperty(AmbientOcclusionPass, 'Companion', {
    get: AmbientOcclusionPass$Companion_getInstance
  });
  var package$ao = package$util.ao || (package$util.ao = {});
  package$ao.AmbientOcclusionPass = AmbientOcclusionPass;
  Object.defineProperty(AoSetup, 'Companion', {
    get: AoSetup$Companion_getInstance
  });
  package$ao.AoSetup = AoSetup;
  package$ao.AoDenoisePass = AoDenoisePass;
  AoPipeline.ForwardAoPipeline = AoPipeline$ForwardAoPipeline;
  AoPipeline.DeferredAoPipeline = AoPipeline$DeferredAoPipeline;
  Object.defineProperty(AoPipeline, 'Companion', {
    get: AoPipeline$Companion_getInstance
  });
  package$ao.AoPipeline = AoPipeline;
  package$util.BoundingBox_init_4lfkt4$ = BoundingBox_init;
  package$util.BoundingBox = BoundingBox;
  package$util.Buffer = Buffer;
  package$util.Uint8Buffer = Uint8Buffer;
  package$util.Uint16Buffer = Uint16Buffer;
  package$util.Uint32Buffer = Uint32Buffer;
  package$util.Float32Buffer = Float32Buffer;
  package$util.MixedBuffer = MixedBuffer;
  package$util.Vec2fView = Vec2fView;
  package$util.Vec3fView = Vec3fView;
  package$util.Vec4fView = Vec4fView;
  package$util.copy_2p1efm$ = copy;
  package$util.copy_cgavii$ = copy_0;
  Object.defineProperty(Color, 'Companion', {
    get: Color$Companion_getInstance
  });
  package$util.Color = Color;
  package$util.MutableColor_init = MutableColor_init;
  package$util.MutableColor_init_d7aj7k$ = MutableColor_init_0;
  package$util.MutableColor = MutableColor;
  Object.defineProperty(ColorGradient, 'Companion', {
    get: ColorGradient$Companion_getInstance
  });
  package$util.ColorGradient_init_5tenyj$ = ColorGradient_init;
  package$util.ColorGradient = ColorGradient;
  package$util.debugOverlay_44u2pc$ = debugOverlay;
  Object.defineProperty(DebugOverlay$Position, 'UPPER_LEFT', {
    get: DebugOverlay$Position$UPPER_LEFT_getInstance
  });
  Object.defineProperty(DebugOverlay$Position, 'UPPER_RIGHT', {
    get: DebugOverlay$Position$UPPER_RIGHT_getInstance
  });
  Object.defineProperty(DebugOverlay$Position, 'LOWER_LEFT', {
    get: DebugOverlay$Position$LOWER_LEFT_getInstance
  });
  Object.defineProperty(DebugOverlay$Position, 'LOWER_RIGHT', {
    get: DebugOverlay$Position$LOWER_RIGHT_getInstance
  });
  DebugOverlay.Position = DebugOverlay$Position;
  package$util.DebugOverlay = DebugOverlay;
  Object.defineProperty(DeferredLightShader, 'Companion', {
    get: DeferredLightShader$Companion_getInstance
  });
  DeferredLightShader.Config = DeferredLightShader$Config;
  var package$deferred = package$util.deferred || (package$util.deferred = {});
  package$deferred.DeferredLightShader = DeferredLightShader;
  Object.defineProperty(DeferredMrtPass, 'Companion', {
    get: DeferredMrtPass$Companion_getInstance
  });
  package$deferred.DeferredMrtPass = DeferredMrtPass;
  Object.defineProperty(DeferredMrtShader, 'Companion', {
    get: DeferredMrtShader$Companion_getInstance
  });
  DeferredMrtShader.MrtPbrConfig = DeferredMrtShader$MrtPbrConfig;
  DeferredMrtShader.MrtMultiplexNode = DeferredMrtShader$MrtMultiplexNode;
  DeferredMrtShader.MrtDeMultiplexNode = DeferredMrtShader$MrtDeMultiplexNode;
  package$deferred.DeferredMrtShader = DeferredMrtShader;
  package$deferred.DeferredPointLights = DeferredPointLights;
  DeferredPointLights.PointLight = DeferredPointLights$PointLight;
  package$deferred.DiscardClearNode = DiscardClearNode;
  package$deferred.DeferredCameraNode = DeferredCameraNode;
  package$deferred.PbrLightingPass = PbrLightingPass;
  Object.defineProperty(PbrSceneShader, 'Companion', {
    get: PbrSceneShader$Companion_getInstance
  });
  PbrSceneShader.DeferredPbrConfig = PbrSceneShader$DeferredPbrConfig;
  package$deferred.PbrSceneShader = PbrSceneShader;
  package$util.Disposable = Disposable;
  package$util.uiFont_a4r08d$ = uiFont;
  package$util.FontProps = FontProps;
  Object.defineProperty(Font, 'Companion', {
    get: Font$Companion_getInstance
  });
  package$util.Font_init_8tzsp9$ = Font_init;
  package$util.Font = Font;
  package$util.CharMetrics = CharMetrics;
  package$util.CharMap = CharMap;
  var package$ibl = package$util.ibl || (package$util.ibl = {});
  package$ibl.BrdfLutPass = BrdfLutPass;
  package$ibl.IrradianceMapPass = IrradianceMapPass;
  package$ibl.ReflectionMapPass = ReflectionMapPass;
  Object.defineProperty(IndexedVertexList, 'Companion', {
    get: IndexedVertexList$Companion_getInstance
  });
  package$util.IndexedVertexList_init_5jr6ei$ = IndexedVertexList_init;
  package$util.IndexedVertexList = IndexedVertexList;
  Object.defineProperty(PrimitiveType, 'LINES', {
    get: PrimitiveType$LINES_getInstance
  });
  Object.defineProperty(PrimitiveType, 'POINTS', {
    get: PrimitiveType$POINTS_getInstance
  });
  Object.defineProperty(PrimitiveType, 'TRIANGLES', {
    get: PrimitiveType$TRIANGLES_getInstance
  });
  package$util.PrimitiveType = PrimitiveType;
  Object.defineProperty(Usage, 'DYNAMIC', {
    get: Usage$DYNAMIC_getInstance
  });
  Object.defineProperty(Usage, 'STATIC', {
    get: Usage$STATIC_getInstance
  });
  package$util.Usage = Usage;
  InstancedLodController.Instance = InstancedLodController$Instance;
  package$util.InstancedLodController = InstancedLodController;
  KdTree.KdNode = KdTree$KdNode;
  package$util.KdTree = KdTree;
  package$util.LineString = LineString;
  Log.prototype.Level = Log$Level;
  Object.defineProperty(Log$Level, 'TRACE', {
    get: Log$Level$TRACE_getInstance
  });
  Object.defineProperty(Log$Level, 'DEBUG', {
    get: Log$Level$DEBUG_getInstance
  });
  Object.defineProperty(Log$Level, 'INFO', {
    get: Log$Level$INFO_getInstance
  });
  Object.defineProperty(Log$Level, 'WARN', {
    get: Log$Level$WARN_getInstance
  });
  Object.defineProperty(Log$Level, 'ERROR', {
    get: Log$Level$ERROR_getInstance
  });
  Object.defineProperty(Log$Level, 'OFF', {
    get: Log$Level$OFF_getInstance
  });
  Object.defineProperty(package$util, 'Log', {
    get: Log_getInstance
  });
  package$util.logT_hbfas6$ = logT;
  package$util.logD_hbfas6$ = logD;
  package$util.logI_hbfas6$ = logI;
  package$util.logW_hbfas6$ = logW;
  package$util.logE_hbfas6$ = logE;
  package$util.MeshBuilder = MeshBuilder;
  package$util.CircleProps = CircleProps;
  Object.defineProperty(GridProps, 'Companion', {
    get: GridProps$Companion_getInstance
  });
  package$util.GridProps = GridProps;
  package$util.SphereProps = SphereProps;
  package$util.RectProps = RectProps;
  package$util.CubeProps = CubeProps;
  package$util.CylinderProps = CylinderProps;
  package$util.TextProps = TextProps;
  Object.defineProperty(MeshInstanceList, 'Companion', {
    get: MeshInstanceList$Companion_getInstance
  });
  package$util.MeshInstanceList = MeshInstanceList;
  Object.defineProperty(ObjectRecycler, 'Companion', {
    get: ObjectRecycler$Companion_getInstance
  });
  package$util.ObjectRecycler_init_9ce4rd$ = ObjectRecycler_init;
  package$util.ObjectRecycler = ObjectRecycler;
  package$util.ObjectPool = ObjectPool;
  AutoRecycler.Context = AutoRecycler$Context;
  package$util.AutoRecycler = AutoRecycler;
  OcTree.OcNode = OcTree$OcNode;
  Object.defineProperty(OcTree, 'Companion', {
    get: OcTree$Companion_getInstance
  });
  package$util.OcTree = OcTree;
  package$util.PerfTimer = PerfTimer;
  package$kool.now = now;
  package$kool.toString_j6vyb1$ = toString_1;
  package$util.timedMs_9vqa9e$ = timedMs;
  package$util.timedMs_v0aq7q$ = timedMs_0;
  package$util.timedMs_sky27l$ = timedMs_1;
  package$util.timedMs_780vyl$ = timedMs_2;
  package$util.PriorityQueue = PriorityQueue;
  Object.defineProperty(AnimationData, 'Companion', {
    get: AnimationData$Companion_getInstance
  });
  Object.defineProperty(AnimationData, '$serializer', {
    get: AnimationData$$serializer_getInstance
  });
  var package$serialization = package$util.serialization || (package$util.serialization = {});
  package$serialization.AnimationData_init_14elwv$ = AnimationData_init;
  package$serialization.AnimationData = AnimationData;
  Object.defineProperty(NodeAnimationData, 'Companion', {
    get: NodeAnimationData$Companion_getInstance
  });
  Object.defineProperty(NodeAnimationData, '$serializer', {
    get: NodeAnimationData$$serializer_getInstance
  });
  package$serialization.NodeAnimationData_init_y5fm6r$ = NodeAnimationData_init;
  package$serialization.NodeAnimationData = NodeAnimationData;
  Object.defineProperty(Vec3KeyData, 'Companion', {
    get: Vec3KeyData$Companion_getInstance
  });
  Object.defineProperty(Vec3KeyData, '$serializer', {
    get: Vec3KeyData$$serializer_getInstance
  });
  package$serialization.Vec3KeyData_init_cp3pdw$ = Vec3KeyData_init;
  package$serialization.Vec3KeyData = Vec3KeyData;
  Object.defineProperty(Vec4KeyData, 'Companion', {
    get: Vec4KeyData$Companion_getInstance
  });
  Object.defineProperty(Vec4KeyData, '$serializer', {
    get: Vec4KeyData$$serializer_getInstance
  });
  package$serialization.Vec4KeyData_init_orydo3$ = Vec4KeyData_init;
  package$serialization.Vec4KeyData = Vec4KeyData;
  Object.defineProperty(BoneData, 'Companion', {
    get: BoneData$Companion_getInstance
  });
  Object.defineProperty(BoneData, '$serializer', {
    get: BoneData$$serializer_getInstance
  });
  package$serialization.BoneData_init_ekms6w$ = BoneData_init;
  package$serialization.BoneData = BoneData;
  Object.defineProperty(MaterialData, 'Companion', {
    get: MaterialData$Companion_getInstance
  });
  Object.defineProperty(MaterialData, '$serializer', {
    get: MaterialData$$serializer_getInstance
  });
  package$serialization.MaterialData_init_t6brj5$ = MaterialData_init;
  package$serialization.MaterialData = MaterialData;
  $$importsForInline$$['kotlinx-serialization-kotlinx-serialization-runtime'] = $module$kotlinx_serialization_kotlinx_serialization_runtime;
  Object.defineProperty(ModelData, 'Companion', {
    get: ModelData$Companion_getInstance
  });
  Object.defineProperty(ModelData, '$serializer', {
    get: ModelData$$serializer_getInstance
  });
  package$serialization.ModelData_init_totb9m$ = ModelData_init;
  package$serialization.ModelData = ModelData;
  Object.defineProperty(ModelNodeData, 'Companion', {
    get: ModelNodeData$Companion_getInstance
  });
  Object.defineProperty(ModelNodeData, '$serializer', {
    get: ModelNodeData$$serializer_getInstance
  });
  package$serialization.ModelNodeData_init_ahcxlw$ = ModelNodeData_init;
  package$serialization.ModelNodeData = ModelNodeData;
  Object.defineProperty(ModelMeshData, 'Companion', {
    get: ModelMeshData$Companion_getInstance
  });
  Object.defineProperty(ModelMeshData, '$serializer', {
    get: ModelMeshData$$serializer_getInstance
  });
  package$serialization.ModelMeshData_init_5z3ca5$ = ModelMeshData_init;
  package$serialization.ModelMeshData = ModelMeshData;
  Object.defineProperty(AttributeList, 'Companion', {
    get: AttributeList$Companion_getInstance
  });
  Object.defineProperty(AttributeList, '$serializer', {
    get: AttributeList$$serializer_getInstance
  });
  package$serialization.AttributeList_init_hnl6bv$ = AttributeList_init;
  package$serialization.AttributeList = AttributeList;
  Object.defineProperty(IntAttributeList, 'Companion', {
    get: IntAttributeList$Companion_getInstance
  });
  Object.defineProperty(IntAttributeList, '$serializer', {
    get: IntAttributeList$$serializer_getInstance
  });
  package$serialization.IntAttributeList_init_3t0jky$ = IntAttributeList_init;
  package$serialization.IntAttributeList = IntAttributeList;
  Object.defineProperty(package$serialization, 'NormalOctCoding', {
    get: NormalOctCoding_getInstance
  });
  package$util.ShadowMap = ShadowMap;
  package$util.SimpleShadowMap = SimpleShadowMap;
  CascadedShadowMap.MapRange = CascadedShadowMap$MapRange;
  package$util.CascadedShadowMap = CascadedShadowMap;
  package$util.pointKdTree_ffk80x$ = pointKdTree;
  package$util.pointOcTree_aygcrt$ = pointOcTree;
  package$util.triangleKdTree_olctmm$ = triangleKdTree;
  package$util.triangleKdTree_4kw5be$ = triangleKdTree_0;
  package$util.triangleOcTree_8pbc9u$ = triangleOcTree;
  package$util.triangleOcTree_olctmm$ = triangleOcTree_0;
  package$util.edgeKdTree_dvmecb$ = edgeKdTree;
  package$util.edgeOcTree_oxvlct$ = edgeOcTree;
  package$util.ItemAdapter = ItemAdapter;
  Object.defineProperty(package$util, 'Vec3fAdapter', {
    get: Vec3fAdapter_getInstance
  });
  Object.defineProperty(package$util, 'EdgeAdapter', {
    get: EdgeAdapter_getInstance
  });
  Object.defineProperty(package$util, 'TriangleAdapter', {
    get: TriangleAdapter_getInstance
  });
  Object.defineProperty(Edge, 'Companion', {
    get: Edge$Companion_getInstance
  });
  package$util.Edge = Edge;
  Object.defineProperty(Triangle, 'Companion', {
    get: Triangle$Companion_getInstance
  });
  package$util.Triangle_init_olctmm$ = Triangle_init;
  package$util.Triangle = Triangle;
  SpatialTree.Node = SpatialTree$Node;
  package$util.SpatialTree = SpatialTree;
  package$util.PointDistance = PointDistance;
  package$util.BoundingSphereDistance = BoundingSphereDistance;
  package$util.RayDistance = RayDistance;
  package$util.SpatialTreeTraverser = SpatialTreeTraverser;
  package$util.CenterPointTraverser = CenterPointTraverser;
  package$util.InRadiusTraverser = InRadiusTraverser;
  package$util.BoundingSphereInRadiusTraverser = BoundingSphereInRadiusTraverser;
  Object.defineProperty(KNearestTraverser, 'Companion', {
    get: KNearestTraverser$Companion_getInstance
  });
  package$util.KNearestTraverser = KNearestTraverser;
  package$util.NearestToRayTraverser = NearestToRayTraverser;
  package$util.NearestEdgeToRayTraverser = NearestEdgeToRayTraverser;
  package$util.TriangleHitTraverser = TriangleHitTraverser;
  ChildNodesWithDistance.Child = ChildNodesWithDistance$Child;
  package$util.ChildNodesWithDistance = ChildNodesWithDistance;
  Object.defineProperty(TouchGestureEvaluator, 'Companion', {
    get: TouchGestureEvaluator$Companion_getInstance
  });
  TouchGestureEvaluator.Gesture = TouchGestureEvaluator$Gesture;
  package$util.TouchGestureEvaluator = TouchGestureEvaluator;
  Object.defineProperty(TreeMap, 'Companion', {
    get: TreeMap$Companion_getInstance
  });
  package$util.TreeMap = TreeMap;
  Object.defineProperty(package$util, 'UniqueId', {
    get: UniqueId_getInstance
  });
  VertexView.FloatView = VertexView$FloatView;
  VertexView.IntView = VertexView$IntView;
  VertexView.Vec2iView = VertexView$Vec2iView;
  VertexView.Vec3iView = VertexView$Vec3iView;
  VertexView.Vec4iView = VertexView$Vec4iView;
  package$util.VertexView = VertexView;
  package$util.Viewport = Viewport;
  package$kool.createDefaultContext = createDefaultContext;
  package$kool.createContext_s8od96$ = createContext;
  package$kool.lock_eocq09$ = lock;
  Object.defineProperty(package$kool, 'JsImpl', {
    get: JsImpl_getInstance
  });
  package$audio.AudioGenerator = AudioGenerator;
  package$pipeline.OffscreenPass2dImpl = OffscreenPass2dImpl;
  package$pipeline.OffscreenPass2dMrtImpl = OffscreenPass2dMrtImpl;
  Object.defineProperty(OffscreenPassCubeImpl, 'Companion', {
    get: OffscreenPassCubeImpl$Companion_getInstance
  });
  package$pipeline.OffscreenPassCubeImpl = OffscreenPassCubeImpl;
  package$pipeline.PlatformAttributeProps = PlatformAttributeProps;
  package$pipeline.ShaderCode = ShaderCode;
  var package$platform = package$kool.platform || (package$kool.platform = {});
  package$platform.FontMapGenerator = FontMapGenerator;
  package$platform.ImageTextureData = ImageTextureData;
  Object.defineProperty(JsAssetManager, 'Companion', {
    get: JsAssetManager$Companion_getInstance
  });
  package$platform.JsAssetManager = JsAssetManager;
  JsContext.InitProps = JsContext$InitProps;
  Object.defineProperty(JsContext, 'Companion', {
    get: JsContext$Companion_getInstance
  });
  package$platform.JsContext = JsContext;
  package$platform.GlCapabilities = GlCapabilities;
  package$platform.get_elementX_wgrwqm$ = get_elementX;
  package$platform.get_elementY_wgrwqm$ = get_elementY;
  package$platform.get_glInternalFormat_my8d90$ = get_glInternalFormat;
  package$platform.get_glType_my8d90$ = get_glType;
  package$platform.get_glFormat_my8d90$ = get_glFormat;
  package$platform.get_pxSize_my8d90$ = get_pxSize;
  Object.defineProperty(BufferResource, 'Companion', {
    get: BufferResource$Companion_getInstance
  });
  var package$webgl = package$platform.webgl || (package$platform.webgl = {});
  package$webgl.BufferResource = BufferResource;
  CompiledShader.ShaderInstance = CompiledShader$ShaderInstance;
  package$webgl.CompiledShader = CompiledShader;
  Object.defineProperty(LoadedTextureWebGl, 'Companion', {
    get: LoadedTextureWebGl$Companion_getInstance
  });
  package$webgl.LoadedTextureWebGl = LoadedTextureWebGl;
  Object.defineProperty(MappedUniform, 'Companion', {
    get: MappedUniform$Companion_getInstance
  });
  package$webgl.MappedUniform = MappedUniform;
  package$webgl.MappedUniform1f = MappedUniform1f;
  package$webgl.MappedUniform2f = MappedUniform2f;
  package$webgl.MappedUniform3f = MappedUniform3f;
  package$webgl.MappedUniform4f = MappedUniform4f;
  package$webgl.MappedUniform1fv = MappedUniform1fv;
  package$webgl.MappedUniform2fv = MappedUniform2fv;
  package$webgl.MappedUniform3fv = MappedUniform3fv;
  package$webgl.MappedUniform4fv = MappedUniform4fv;
  package$webgl.MappedUniformColor = MappedUniformColor;
  package$webgl.MappedUniformMat3f = MappedUniformMat3f;
  package$webgl.MappedUniformMat4f = MappedUniformMat4f;
  package$webgl.MappedUniformMat4fv = MappedUniformMat4fv;
  package$webgl.MappedUniform1i = MappedUniform1i;
  Object.defineProperty(MappedUniformTex, 'Companion', {
    get: MappedUniformTex$Companion_getInstance
  });
  package$webgl.MappedUniformTex = MappedUniformTex;
  package$webgl.MappedUniformTex2d = MappedUniformTex2d;
  package$webgl.MappedUniformCubeMap = MappedUniformCubeMap;
  package$webgl.QueueRendererWebGl = QueueRendererWebGl;
  package$webgl.ShaderGeneratorImplWebGl = ShaderGeneratorImplWebGl;
  package$webgl.ShaderManager = ShaderManager;
  Object.defineProperty(package$webgl, 'TextureLoader', {
    get: TextureLoader_getInstance
  });
  package$webgl.VboBinder = VboBinder;
  package$util.GenericBuffer = GenericBuffer;
  package$util.Uint8BufferImpl = Uint8BufferImpl;
  package$util.Uint16BufferImpl = Uint16BufferImpl;
  package$util.Uint32BufferImpl = Uint32BufferImpl;
  package$util.Float32BufferImpl = Float32BufferImpl;
  package$util.MixedBufferImpl = MixedBufferImpl;
  package$util.createUint8Buffer_za3lpa$ = createUint8Buffer;
  package$util.createUint16Buffer_za3lpa$ = createUint16Buffer;
  package$util.createUint32Buffer_za3lpa$ = createUint32Buffer;
  package$util.createFloat32Buffer_za3lpa$ = createFloat32Buffer;
  package$util.createMixedBuffer_za3lpa$ = createMixedBuffer;
  ListEdgeHandler.prototype.distinctTriangleEdges = HalfEdgeMesh$EdgeHandler.prototype.distinctTriangleEdges;
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getMin_hm1yd1$ = ItemAdapter.prototype.getMin_hm1yd1$;
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getMax_hm1yd1$ = ItemAdapter.prototype.getMax_hm1yd1$;
  OcTreeEdgeHandler$Companion$HalfEdgeAdapter.prototype.getCenter_hm1yd1$ = ItemAdapter.prototype.getCenter_hm1yd1$;
  OcTreeEdgeHandler.prototype.distinctTriangleEdges = HalfEdgeMesh$EdgeHandler.prototype.distinctTriangleEdges;
  terminateOnFaceCountAbs$ObjectLiteral.prototype.init_nbf0q6$ = TermCriterion.prototype.init_nbf0q6$;
  terminateOnError$ObjectLiteral.prototype.init_nbf0q6$ = TermCriterion.prototype.init_nbf0q6$;
  MeshRayTest$Companion$nopTest$ObjectLiteral.prototype.onMeshDataChanged_f1jspk$ = MeshRayTest.prototype.onMeshDataChanged_f1jspk$;
  BlankComponentUi.prototype.updateComponentAlpha = ComponentUi.prototype.updateComponentAlpha;
  BlankComponentUi.prototype.createUi_aemszp$ = ComponentUi.prototype.createUi_aemszp$;
  BlankComponentUi.prototype.updateUi_aemszp$ = ComponentUi.prototype.updateUi_aemszp$;
  BlankComponentUi.prototype.onRender_aemszp$ = ComponentUi.prototype.onRender_aemszp$;
  BlankComponentUi.prototype.dispose_aemszp$ = ComponentUi.prototype.dispose_aemszp$;
  AnimationData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  NodeAnimationData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  Vec3KeyData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  Vec4KeyData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  BoneData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  MaterialData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  ModelData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  ModelNodeData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  ModelMeshData$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  AttributeList$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  IntAttributeList$$serializer.prototype.patch_mynpiu$ = GeneratedSerializer.prototype.patch_mynpiu$;
  Vec3fAdapter.prototype.setNode_bc9457$ = ItemAdapter.prototype.setNode_bc9457$;
  EdgeAdapter.prototype.getCenterX_trkh7z$ = ItemAdapter.prototype.getCenterX_trkh7z$;
  EdgeAdapter.prototype.getCenterY_trkh7z$ = ItemAdapter.prototype.getCenterY_trkh7z$;
  EdgeAdapter.prototype.getCenterZ_trkh7z$ = ItemAdapter.prototype.getCenterZ_trkh7z$;
  EdgeAdapter.prototype.getSzX_trkh7z$ = ItemAdapter.prototype.getSzX_trkh7z$;
  EdgeAdapter.prototype.getSzY_trkh7z$ = ItemAdapter.prototype.getSzY_trkh7z$;
  EdgeAdapter.prototype.getSzZ_trkh7z$ = ItemAdapter.prototype.getSzZ_trkh7z$;
  EdgeAdapter.prototype.getCenter_hm1yd1$ = ItemAdapter.prototype.getCenter_hm1yd1$;
  EdgeAdapter.prototype.setNode_bc9457$ = ItemAdapter.prototype.setNode_bc9457$;
  TriangleAdapter.prototype.getCenterX_trkh7z$ = ItemAdapter.prototype.getCenterX_trkh7z$;
  TriangleAdapter.prototype.getCenterY_trkh7z$ = ItemAdapter.prototype.getCenterY_trkh7z$;
  TriangleAdapter.prototype.getCenterZ_trkh7z$ = ItemAdapter.prototype.getCenterZ_trkh7z$;
  TriangleAdapter.prototype.getSzX_trkh7z$ = ItemAdapter.prototype.getSzX_trkh7z$;
  TriangleAdapter.prototype.getSzY_trkh7z$ = ItemAdapter.prototype.getSzY_trkh7z$;
  TriangleAdapter.prototype.getSzZ_trkh7z$ = ItemAdapter.prototype.getSzZ_trkh7z$;
  TriangleAdapter.prototype.getCenter_hm1yd1$ = ItemAdapter.prototype.getCenter_hm1yd1$;
  TriangleAdapter.prototype.setNode_bc9457$ = ItemAdapter.prototype.setNode_bc9457$;
  BoundingSphereDistance.prototype.nodeSqrDistanceToPoint_m5117s$ = PointDistance.prototype.nodeSqrDistanceToPoint_m5117s$;
  CenterPointTraverser$pointDistance$ObjectLiteral.prototype.nodeSqrDistanceToPoint_m5117s$ = PointDistance.prototype.nodeSqrDistanceToPoint_m5117s$;
  CenterPointTraverser$pointDistance$ObjectLiteral.prototype.itemSqrDistanceToPoint_54x1zp$ = PointDistance.prototype.itemSqrDistanceToPoint_54x1zp$;
  NearestToRayTraverser$rayDistance$ObjectLiteral.prototype.nodeSqrDistanceToRay_4lohg5$ = RayDistance.prototype.nodeSqrDistanceToRay_4lohg5$;
  NearestToRayTraverser$rayDistance$ObjectLiteral.prototype.itemSqrDistanceToRay_t0er6w$ = RayDistance.prototype.itemSqrDistanceToRay_t0er6w$;
  NearestEdgeToRayTraverser_init$ObjectLiteral.prototype.nodeSqrDistanceToRay_4lohg5$ = RayDistance.prototype.nodeSqrDistanceToRay_4lohg5$;
  TriangleHitTraverser_init$ObjectLiteral.prototype.nodeSqrDistanceToRay_4lohg5$ = RayDistance.prototype.nodeSqrDistanceToRay_4lohg5$;
  ShaderGeneratorImplWebGl$CodeGen.prototype.sampleTexture2d_buzeal$ = CodeGenerator.prototype.sampleTexture2d_buzeal$;
  ShaderGeneratorImplWebGl$CodeGen.prototype.sampleTextureCube_buzeal$ = CodeGenerator.prototype.sampleTextureCube_buzeal$;
  GenericBuffer.prototype.removeAt_za3lpa$ = Buffer.prototype.removeAt_za3lpa$;
  Uint8BufferImpl.prototype.put_fqrh44$ = Uint8Buffer.prototype.put_fqrh44$;
  Uint8BufferImpl.prototype.plusAssign_s8j3t7$ = Uint8Buffer.prototype.plusAssign_s8j3t7$;
  Uint8BufferImpl.prototype.removeAt_za3lpa$ = Uint8Buffer.prototype.removeAt_za3lpa$;
  Uint16BufferImpl.prototype.put_gmedm2$ = Uint16Buffer.prototype.put_gmedm2$;
  Uint16BufferImpl.prototype.plusAssign_mq22fl$ = Uint16Buffer.prototype.plusAssign_mq22fl$;
  Uint16BufferImpl.prototype.removeAt_za3lpa$ = Uint16Buffer.prototype.removeAt_za3lpa$;
  Uint32BufferImpl.prototype.put_q5rwfd$ = Uint32Buffer.prototype.put_q5rwfd$;
  Uint32BufferImpl.prototype.plusAssign_za3lpa$ = Uint32Buffer.prototype.plusAssign_za3lpa$;
  Uint32BufferImpl.prototype.removeAt_za3lpa$ = Uint32Buffer.prototype.removeAt_za3lpa$;
  Float32BufferImpl.prototype.put_q3cr5i$ = Float32Buffer.prototype.put_q3cr5i$;
  Float32BufferImpl.prototype.plusAssign_mx4ult$ = Float32Buffer.prototype.plusAssign_mx4ult$;
  Float32BufferImpl.prototype.removeAt_za3lpa$ = Float32Buffer.prototype.removeAt_za3lpa$;
  MixedBufferImpl.prototype.putUint8_fqrh44$ = MixedBuffer.prototype.putUint8_fqrh44$;
  MixedBufferImpl.prototype.putUint16_gmedm2$ = MixedBuffer.prototype.putUint16_gmedm2$;
  MixedBufferImpl.prototype.putUint32_q5rwfd$ = MixedBuffer.prototype.putUint32_q5rwfd$;
  MixedBufferImpl.prototype.putFloat32_q3cr5i$ = MixedBuffer.prototype.putFloat32_q3cr5i$;
  MixedBufferImpl.prototype.removeAt_za3lpa$ = MixedBuffer.prototype.removeAt_za3lpa$;
  DEG_2_RAD = math.PI / 180.0;
  RAD_2_DEG = 180.0 / math.PI;
  FUZZY_EQ_F = 1.0E-5;
  FUZZY_EQ_D = 1.0E-10;
  FLT_EPSILON = 1.1920929E-7;
  SQRT_1_2 = 0.70710677;
  defaultRandomInstance = new Random_0(numberToInt(now()));
  slerpTmpAf = MutableVec4f_init();
  slerpTmpBf = MutableVec4f_init();
  slerpTmpCf = MutableVec4f_init();
  slerpTmpAd = MutableVec4d_init();
  slerpTmpBd = MutableVec4d_init();
  slerpTmpCd = MutableVec4d_init();
  Kotlin.defineModule('kool', _);
  return _;
});
